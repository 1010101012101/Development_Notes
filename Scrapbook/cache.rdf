<?xml version="1.0"?>
<RDF:RDF xmlns:NS1="http://amb.vis.ne.jp/mozilla/scrapbook-rdf#"
         xmlns:NC="http://home.netscape.com/NC-rdf#"
         xmlns:RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <RDF:Description RDF:about="urn:scrapbook:item20160627072031#index"
                   NS1:content=" logo HOME ABOUT RWANDA OUR SERVICES PASSPORT ORDINARY PASSPORT ADDITIONAL PASSPORT SERVICE PASSPORT DIPLOMATIC PASSPORT VISA ENTRY VISA TRANSIT VISA TOURIST VISA PERMITS TEMPORARY PERMITS PERMANENT PERMITS LAISSEZ-PASSER CITIZENSHIP INGO CEPGL BORDER MANAGEMENT FOREIGNERS IDENTITY CARD TRACKING PUBLICATIONS LAWS CLIENT CHARTER ODL BORDER STATISTICS INGO LISTS SURVEY RESULTS MEDIA CENTER NEWS CAPTURING OF BIOMETRICS TENDERS RWANDA EMBASSIES LINKS TO OTHER WEBSITES FAQs CONTACT US ONLINE APPOINTMENT GENERAL INQUIRIES FEEDBACK CLIENT FEEDBACK CONTACTS WEBMAIL H1. SKILLED WORKERS ON AN OCCUPATION ON DEMAND LIST INFORMATION FOR APPLICANTS SPECIFIC TO PERMIT SUB-CLASS H1 SKILLED WORKER ON AN OCCUPATION ON DEMAND LIST. Click here for application form ELIGIBLE PERSON: This sub-class of Resident Permit shall be issued to a skilled Worker on an Occupation on Demand List who possesses the qualifications or relevant work experience on an occupation on demand list! DEPENDANTS: Eligible dependants may accompany the principal applicant. But will have to apply for M2 resident permit. WHERE APPLICATIONS CAN BE MADE: *Applications should be submitted at the Directorate General of Immigration and Emigration. TRAVEL DOCUMENT: Any genuine and recognized travel document valid not less than 6 months. PERMIT FEES: 100,000 frw VALIDITY OF PERMIT: 3 Years PERMIT EXTENSION: This permit may be extended upon application. CHANGE OF STATUS: Change is permitted WORKING IN RWANDA: Work is permitted NUMBER OF ENTRIES: Multiple entries CERTIFICATE OF GOOD CONDUCT: Applicants are required to provide a certificate of good conduct from recognized law enforcement authority of the country they have been residents for the last 6 months. This certificate has to indicate whether the applicant has not had any criminal convictions. TRANSCRIPTION: For the applicant whose permit is in the expired or lost passport, will pay 10,000Frwfor the permit to be transferred in the new passport. REQUIREMENTS: *One colored passport size photo with white background recently taken without glasses, caps and scurf. The photo should be attached to the application form by use of glue stick. Stapling and clipping the photo to the application form is not advisable. *A completed application form: (Click here for application form) *An application letter addressed to the Director General of Immigration and Emigration by the employer. *Curriculum Vitae *Original Police Clearance from the country you have lived in for the last 6 months *Notified diploma/degree *Employment contract *Applicant should also submit copy of NGO/INGO certificate, company RDB certificate copy as one of requirements. RENEWAL OF H1 REQUIREMENTS: *One colored passport size photo with white background recently taken, without glasses, caps and scurf. The photo should be attached to the application form by use of glue stick. Stapling and clipping the photo to the application form is not advisable. *A completed application form: (Click here for application form) *An application letter addressed to the Director General of Immigration and Emigration from the employer. *A bank slip of 100,000 Rwf paid to RRA; Click the following link to request for payment advice ticket to take to the bank. *Copy of green card *Valid Employment contract *INGO registration certificate [valid] PROCESSING TIME: 3 Day N.B: To avoid penalties, the applicant should apply/renew his/her visa before expiration of the current visa. Penalty fee is 20,000frw in a period of 6 to 15 days of the delay. Article 34 of the Ministerial Order No. 02/01 of 21/05/2011 establishing procedures and regulations implementing Immigration and Emigration law, categorizes other penalties from 16 days to 9 months and above. TEMPORARY PERMITS A-Prospecting and Mining B-Agriculture and related activities C-Prescribed Professionals D-Diplomats E-Government or parastatal Employee F-Specific Manufacturing and Processing G-Specific Trade,business and services H-Specific Employement by specific employer I-Approved Religious Activities J-Hospitality Industry and Related Activities K-Person with Assured income M-Dependant Pass S-Frontier Pass N-Student Pass and occupation Trainee P-Voluntary worker and Holiday worker R-Special Pass W-Information Technology X-Transport and logistics Z-Other investments PERMANENT PERMITS L-1 Resident Exceeding 5 years L-2 Exceptional Consideration L-3 Ket staff of Multinationals L-4 Diaspora L-C Child L-M Spouse P. O. BOX 6229, KIGALI Tel. +250 78 815 2222 / Fax +250 0252585292 Email: info@migration.gov.rw | visa@migration.gov.rw |production@migration.gov.rw Service Tel: Passport +250 788 809 607 |Laissez Passer +250 788 80 96 27|Visa &amp; Permit +250 78 889 9971/+250786792106 |PRO +250 788 674 848 © Rwanda Directorate General of immigration and Emigration. All rights reserved. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705162108#index"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Watch 24 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 86 Star 86 Fork Where should we fork this repository? Loading 20 sbabic/swupdate Code Issues 0 Pull requests 3 Wiki Pulse Graphs Software Update for Embedded Systems 359 commits 2 branches 5 releases 15 contributors C 85.4% C++ 5.1% Makefile 3.3% Shell 1.8% Yacc 1.5% Perl 1.5% Other 1.4% C C++ Makefile Shell Yacc Perl Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Create new file Upload files Find file Branch: master Switch branches/tags Branches Tags gh-pages master Nothing to show 2016.07-rc3 2016.04 2016.04-rc1 2015.07 2014.07 Nothing to show New pull request Latest commit c7f57c9 6 days ago @sbabic sbabic doc: latexpdf not built due to unknown code:: makefile … Building of doc (latexpdf target) does not work. Build stops due to unknown code. Signed-off-by: Stefano Babic &lt;sbabic@denx.de&gt; CC: Christian Storm &lt;christian.storm@tngtech.com&gt; Permalink Failed to load latest commit information. archival core: cpio cannot be dropped 20 days ago core Fix warning if CONFIG_DOWNLOAD is not set 8 days ago corelib mtd-interface: prevent attaching mtd type MTD_UBIVOLUME 2 months ago doc doc: latexpdf not built due to unknown code:: makefile 3 days ago examples examples: extend libconfig example for software version checking 4 months ago handlers archive_handler: allow installing files without mounting 3 months ago include Enhance output when searching for LUA handlers 25 days ago ipc Factorize function for asking swupdate result 7 months ago mongoose Fix two small typos in user facing messages 3 months ago parser Fix warning introduced checking U-Boot variable length 21 days ago scripts Kbuild: compatibility with make-4.1 7 months ago suricatta Suricatta Unit Testing Framework a month ago www Make index.html more readable 4 months ago .gitignore gitignore: add some Kconfig build files 4 months ago COPYING First version of swupdate tool 3 years ago Kconfig Suricatta Integration into SWUpdate a month ago Makefile Prepare 2016.07-rc3 8 days ago Makefile.deps U-Boot handler cannot be set 2 months ago Makefile.flags Suricatta Integration into SWUpdate a month ago Makefile.help Build documentation from main Makefile 8 months ago README.md Suricatta Integration into SWUpdate a month ago README.md SWUpdate - Software Update for Embedded Systems SWUpdate is a Linux Update agent with the goal to provide an efficient and safe way to update an embedded system. SWUpdate supports local and remote updates, multiple update strategies and it can be well integrated in the Yocto build system by adding the meta-swupdate layer. It supports the common media on embedded devices such as as NOR / NAND flashes, UBI volumes, SD / eMMC, and can be easy extended to introduce project specific update procedures. Pre- and postinstall scripts are supported, and a LUA interpreter helps to customize the update process. An update package is described by the sw-description file, using the libconfig syntax or JSON. It is even possible to use LUA with a custom syntax. Here a short list of the main features: Install on embedded media (eMMC, SD, Raw NAND, NOR and SPI-NOR flashes) Allow delivery single image for multiple devices Multiple interfaces for getting software local storage integrated web server integrated REST client connector to hawkBit remote server download Software delivered as images, gzipped tarball, etc. Allow custom handlers for installing FPGA firmware, microcontroller firmware via custom protocols. Power-Off safe Hardware / Software compatibility. This software is licensed under GPL Version 2.0+ Please check inside doc directory for documentation or the online documentation (generated from doc/) at: http://sbabic.github.io/swupdate Submitting patches You can submit your patches (or post questions reagarding the project to the swupdate Mailing List: swupdate@googlegroups.com When creating patches, please use something like: git format-patch -s &lt;revision range&gt; Please use 'git send- email' to send the generated patches to the ML to bypass changes from your mailer. Status API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Contact Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705093233#index"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Watch 17 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 38 Star 38 Fork Where should we fork this repository? Loading 41 RobertCNelson/boot-scripts Code Issues 8 Pull requests 3 Wiki Pulse Graphs Permalink Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show Find file Copy path boot-scripts/tools/eMMC/beaglebone-black-make-microSD-flasher-from-eMMC.sh ac2c09c 25 days ago @RobertCNelson RobertCNelson eMMC: remove reference to halt -f 1 contributor Users who have contributed to this file @RobertCNelson RobertCNelson Raw Blame History executable file 565 lines (473 sloc) 17.5 KB #!/bin/bash -e # # Copyright (c) 2013-2016 Robert Nelson &lt;robertcnelson@gmail.com&gt; # Portions copyright (c) 2014 Charles Steinkuehler &lt;charles@steinkuehler.net&gt; # # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the &quot;Software&quot;), to deal # in the Software without restriction, including without limitation the rights # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell # copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included in # all copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN # THE SOFTWARE. #This script assumes, these packages are installed, as network may not be setup #dosfstools initramfs-tools rsync u-boot-tools version_message=&quot;1.20160527: upgrade backup u-boot: v2016.03-r7...&quot; #https://rcn-ee.com/repos/bootloader/am335x_evm/ http_spl=&quot;MLO-am335x_evm-v2016.03-r7&quot; http_uboot=&quot;u-boot-am335x_evm-v2016.03-r7.img&quot; if ! id | grep -q root; then echo &quot;must be run as root&quot; exit fi unset root_drive root_drive=&quot;$(cat /proc/cmdline | sed 's/ /\n/g' | grep root=UUID= | awk -F 'root=' '{print $2}' || true)&quot; if [ ! &quot;x${root_drive}&quot; = &quot;x&quot; ] ; then root_drive=&quot;$(/sbin/findfs ${root_drive} || true)&quot; else root_drive=&quot;$(cat /proc/cmdline | sed 's/ /\n/g' | grep root= | awk -F 'root=' '{print $2}' || true)&quot; fi boot_drive=&quot;${root_drive%?}1&quot; if [ &quot;x${boot_drive}&quot; = &quot;x/dev/mmcblk0p1&quot; ] ; then source=&quot;/dev/mmcblk0&quot; destination=&quot;/dev/mmcblk1&quot; fi if [ &quot;x${boot_drive}&quot; = &quot;x/dev/mmcblk1p1&quot; ] ; then source=&quot;/dev/mmcblk1&quot; destination=&quot;/dev/mmcblk0&quot; fi echo &quot;&quot; echo &quot;Unmounting Partitions&quot; echo &quot;-----------------------------&quot; NUM_MOUNTS=$(mount | grep -v none | grep &quot;${destination}&quot; | wc -l) i=0 ; while test $i -le ${NUM_MOUNTS} ; do DRIVE=$(mount | grep -v none | grep &quot;${destination}&quot; | tail -1 | awk '{print $1}') umount ${DRIVE} &gt;/dev/null 2&gt;&amp;1 || true i=$(($i+1)) done flush_cache () { sync blockdev --flushbufs ${destination} } broadcast () { if [ &quot;x${message}&quot; != &quot;x&quot; ] ; then echo &quot;${message}&quot; #echo &quot;${message}&quot; &gt; /dev/tty0 || true fi } write_failure () { message=&quot;writing to [${destination}] failed...&quot; ; broadcast [ -e /proc/$CYLON_PID ] &amp;&amp; kill $CYLON_PID &gt; /dev/null 2&gt;&amp;1 if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr1/trigger echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr2/trigger echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr3/trigger fi message=&quot;-----------------------------&quot; ; broadcast flush_cache umount ${destination}p1 &gt; /dev/null 2&gt;&amp;1 || true umount ${destination}p2 &gt; /dev/null 2&gt;&amp;1 || true inf_loop } check_running_system () { message=&quot;copying: [${source}] -&gt; [${destination}]&quot; ; broadcast message=&quot;lsblk:&quot; ; broadcast message=&quot;`lsblk || true`&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast message=&quot;df -h | grep rootfs:&quot; ; broadcast message=&quot;`df -h | grep rootfs || true`&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast if [ ! -b &quot;${destination}&quot; ] ; then message=&quot;Error: [${destination}] does not exist&quot; ; broadcast write_failure fi if [ ! -f /boot/config-$(uname -r) ] ; then zcat /proc/config.gz &gt; /boot/config-$(uname -r) fi if [ -f /boot/initrd.img-$(uname -r) ] ; then update-initramfs -u -k $(uname -r) else update-initramfs -c -k $(uname -r) fi flush_cache ##FIXME: quick check for rsync 3.1 (jessie) unset rsync_check unset rsync_progress rsync_check=$(LC_ALL=C rsync --version | grep version | awk '{print $3}' || true) if [ &quot;x${rsync_check}&quot; = &quot;x3.1.1&quot; ] ; then rsync_progress=&quot;--info=progress2 --human-readable&quot; fi if [ ! -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then modprobe leds_gpio || true sleep 1 fi } cylon_leds () { if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then BASE=/sys/class/leds/beaglebone\:green\:usr echo none &gt; ${BASE}0/trigger echo none &gt; ${BASE}1/trigger echo none &gt; ${BASE}2/trigger echo none &gt; ${BASE}3/trigger STATE=1 while : ; do case $STATE in 1) echo 255 &gt; ${BASE}0/brightness echo 0 &gt; ${BASE}1/brightness STATE=2 ;; 2) echo 255 &gt; ${BASE}1/brightness echo 0 &gt; ${BASE}0/brightness STATE=3 ;; 3) echo 255 &gt; ${BASE}2/brightness echo 0 &gt; ${BASE}1/brightness STATE=4 ;; 4) echo 255 &gt; ${BASE}3/brightness echo 0 &gt; ${BASE}2/brightness STATE=5 ;; 5) echo 255 &gt; ${BASE}2/brightness echo 0 &gt; ${BASE}3/brightness STATE=6 ;; 6) echo 255 &gt; ${BASE}1/brightness echo 0 &gt; ${BASE}2/brightness STATE=1 ;; *) echo 255 &gt; ${BASE}0/brightness echo 0 &gt; ${BASE}1/brightness STATE=2 ;; esac sleep 0.1 done fi } dd_bootloader () { message=&quot;Writing bootloader to [${destination}]&quot; ; broadcast unset dd_spl_uboot if [ ! &quot;x${dd_spl_uboot_count}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}count=${dd_spl_uboot_count} &quot; fi if [ ! &quot;x${dd_spl_uboot_seek}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}seek=${dd_spl_uboot_seek} &quot; fi if [ ! &quot;x${dd_spl_uboot_conf}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}conv=${dd_spl_uboot_conf} &quot; fi if [ ! &quot;x${dd_spl_uboot_bs}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}bs=${dd_spl_uboot_bs}&quot; fi unset dd_uboot if [ ! &quot;x${dd_uboot_count}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}count=${dd_uboot_count} &quot; fi if [ ! &quot;x${dd_uboot_seek}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}seek=${dd_uboot_seek} &quot; fi if [ ! &quot;x${dd_uboot_conf}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}conv=${dd_uboot_conf} &quot; fi if [ ! &quot;x${dd_uboot_bs}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}bs=${dd_uboot_bs}&quot; fi message=&quot;dd if=${dd_spl_uboot_backup} of=${destination} ${dd_spl_uboot}&quot; ; broadcast echo &quot;-----------------------------&quot; dd if=${dd_spl_uboot_backup} of=${destination} ${dd_spl_uboot} echo &quot;-----------------------------&quot; message=&quot;dd if=${dd_uboot_backup} of=${destination} ${dd_uboot}&quot; ; broadcast echo &quot;-----------------------------&quot; dd if=${dd_uboot_backup} of=${destination} ${dd_uboot} message=&quot;-----------------------------&quot; ; broadcast } format_boot () { message=&quot;mkfs.vfat -F 16 ${destination}p1 -n ${boot_label}&quot; ; broadcast echo &quot;-----------------------------&quot; mkfs.vfat -F 16 ${destination}p1 -n ${boot_label} echo &quot;-----------------------------&quot; flush_cache } format_root () { message=&quot;mkfs.ext4 ${destination}p2 -L ${rootfs_label}&quot; ; broadcast echo &quot;-----------------------------&quot; mkfs.ext4 ${destination}p2 -L ${rootfs_label} echo &quot;-----------------------------&quot; flush_cache } format_single_root () { message=&quot;mkfs.ext4 ${destination}p1 -L ${boot_label}&quot; ; broadcast echo &quot;-----------------------------&quot; mkfs.ext4 ${destination}p1 -L ${boot_label} echo &quot;-----------------------------&quot; flush_cache } copy_boot () { message=&quot;Copying: ${source}p1 -&gt; ${destination}p1&quot; ; broadcast mkdir -p /tmp/boot/ || true umount ${source}p1 || umount -l ${source}p1 || true if ! mount -o sync ${source}p1 /boot/uboot/; then echo &quot;-----------------------------&quot; echo &quot;BUG: [mount -o sync ${source}p1 /boot/uboot/] was not available so trying to mount again in 5 seconds...&quot; sync sleep 5 echo &quot;-----------------------------&quot; if ! mount -o sync ${source}p1 /boot/uboot/; then echo &quot;mounting ${source}p1 failed..&quot; exit fi fi if ! mount -o sync ${destination}p1 /tmp/boot/; then echo &quot;-----------------------------&quot; echo &quot;BUG: [mount -o sync ${destination}p1 /tmp/boot/] was not available so trying to mount again in 5 seconds...&quot; sync sleep 5 echo &quot;-----------------------------&quot; if ! mount -o sync ${destination}p1 /tmp/boot/; then echo &quot;mounting ${destination}p1 failed..&quot; exit fi fi if [ -f /boot/uboot/MLO ] ; then #Make sure the BootLoader gets copied first: cp -v /boot/uboot/MLO /tmp/boot/MLO || write_failure flush_cache cp -v /boot/uboot/u-boot.img /tmp/boot/u-boot.img || write_failure flush_cache fi message=&quot;rsync: /boot/uboot/ -&gt; /tmp/boot/&quot; ; broadcast if [ ! &quot;x${rsync_progress}&quot; = &quot;x&quot; ] ; then echo &quot;rsync: note the % column is useless...&quot; fi rsync -aAx ${rsync_progress} /boot/uboot/ /tmp/boot/ --exclude={MLO,u-boot.img,uEnv.txt} || write_failure flush_cache flush_cache umount /tmp/boot/ || umount -l /tmp/boot/ || write_failure flush_cache umount /boot/uboot || umount -l /boot/uboot } copy_rootfs () { message=&quot;Copying: ${source}p${media_rootfs} -&gt; ${destination}p${media_rootfs}&quot; ; broadcast mkdir -p /tmp/rootfs/ || true if ! mount -o async,noatime ${destination}p${media_rootfs} /tmp/rootfs/; then echo &quot;-----------------------------&quot; echo &quot;BUG: [mount -o sync ${destination}p${media_rootfs} /tmp/rootfs/] was not available so trying to mount again in 5 seconds...&quot; sync sleep 5 echo &quot;-----------------------------&quot; if ! mount -o async,noatime ${destination}p${media_rootfs} /tmp/rootfs/; then echo &quot;mounting ${destination}p${media_rootfs} failed..&quot; exit fi fi message=&quot;rsync: / -&gt; /tmp/rootfs/&quot; ; broadcast if [ ! &quot;x${rsync_progress}&quot; = &quot;x&quot; ] ; then echo &quot;rsync: note the % column is useless...&quot; fi rsync -aAx ${rsync_progress} /* /tmp/rootfs/ --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found,/lib/modules/*,/uEnv.txt} || write_failure flush_cache mkdir -p /tmp/rootfs/lib/modules/$(uname -r)/ || true message=&quot;Copying: Kernel modules&quot; ; broadcast message=&quot;rsync: /lib/modules/$(uname -r)/ -&gt; /tmp/rootfs/lib/modules/$(uname -r)/&quot; ; broadcast if [ ! &quot;x${rsync_progress}&quot; = &quot;x&quot; ] ; then echo &quot;rsync: note the % column is useless...&quot; fi rsync -aAx ${rsync_progress} /lib/modules/$(uname -r)/* /tmp/rootfs/lib/modules/$(uname -r)/ || write_failure flush_cache message=&quot;Copying: ${source}p${media_rootfs} -&gt; ${destination}p${media_rootfs} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast message=&quot;Final System Tweaks:&quot; ; broadcast unset root_uuid root_uuid=$(/sbin/blkid -c /dev/null -s UUID -o value ${destination}p${media_rootfs}) if [ &quot;${root_uuid}&quot; ] ; then sed -i -e 's:uuid=:#uuid=:g' /tmp/rootfs/boot/uEnv.txt echo &quot;uuid=${root_uuid}&quot; &gt;&gt; /tmp/rootfs/boot/uEnv.txt message=&quot;UUID=${root_uuid}&quot; ; broadcast root_uuid=&quot;UUID=${root_uuid}&quot; else #really a failure... root_uuid=&quot;${source}p${media_rootfs}&quot; fi if [ ! -f /opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh ] ; then mkdir -p /opt/scripts/tools/eMMC/ wget --directory-prefix=&quot;/opt/scripts/tools/eMMC/&quot; https://raw.githubusercontent.com/RobertCNelson/boot-scripts/master/tools/eMMC/init-eMMC-flasher-v3.sh sudo chmod +x /opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh fi message=&quot;Generating: /etc/fstab&quot; ; broadcast echo &quot;# /etc/fstab: static file system information.&quot; &gt; /tmp/rootfs/etc/fstab echo &quot;#&quot; &gt;&gt; /tmp/rootfs/etc/fstab echo &quot;${root_uuid} / ext4 noatime,errors=remount-ro 0 1&quot; &gt;&gt; /tmp/rootfs/etc/fstab echo &quot;debugfs /sys/kernel/debug debugfs defaults 0 0&quot; &gt;&gt; /tmp/rootfs/etc/fstab cat /tmp/rootfs/etc/fstab message=&quot;/boot/uEnv.txt: enabling eMMC flasher script&quot; ; broadcast script=&quot;cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh&quot; echo &quot;${script}&quot; &gt;&gt; /tmp/rootfs/boot/uEnv.txt cat /tmp/rootfs/boot/uEnv.txt message=&quot;-----------------------------&quot; ; broadcast flush_cache umount /tmp/rootfs/ || umount -l /tmp/rootfs/ || write_failure [ -e /proc/$CYLON_PID ] &amp;&amp; kill $CYLON_PID message=&quot;Syncing: ${destination}&quot; ; broadcast #https://github.com/beagleboard/meta-beagleboard/blob/master/contrib/bone-flash-tool/emmc.sh#L158-L159 # force writeback of eMMC buffers sync dd if=${destination} of=/dev/null count=100000 message=&quot;Syncing: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast if [ -f /boot/debug.txt ] ; then message=&quot;This script has now completed its task&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast message=&quot;debug: enabled&quot; ; broadcast inf_loop else if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr1/trigger echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr2/trigger echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr3/trigger fi mount message=&quot;eMMC has been flashed: please wait for device to power down.&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast flush_cache fi } partition_drive () { message=&quot;Erasing: ${destination}&quot; ; broadcast flush_cache dd if=/dev/zero of=${destination} bs=1M count=108 sync dd if=${destination} of=/dev/null bs=1M count=108 sync flush_cache message=&quot;Erasing: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast if [ -f /boot/SOC.sh ] ; then . /boot/SOC.sh fi if [ &quot;x${dd_spl_uboot_backup}&quot; = &quot;x&quot; ] ; then spl_uboot_name=MLO dd_spl_uboot_count=&quot;1&quot; dd_spl_uboot_seek=&quot;1&quot; dd_spl_uboot_conf=&quot;&quot; dd_spl_uboot_bs=&quot;128k&quot; dd_spl_uboot_backup=/opt/backup/uboot/MLO echo &quot;spl_uboot_name=${spl_uboot_name}&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_count=1&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_seek=1&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_conf=&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_bs=128k&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_name=${dd_spl_uboot_name}&quot; &gt;&gt; /boot/SOC.sh fi if [ ! -f /opt/backup/uboot/MLO ] ; then mkdir -p /opt/backup/uboot/ wget --directory-prefix=/opt/backup/uboot/ http://rcn-ee.com/repos/bootloader/am335x_evm/${http_spl} mv /opt/backup/uboot/${http_spl} /opt/backup/uboot/MLO fi if [ &quot;x${dd_uboot_backup}&quot; = &quot;x&quot; ] ; then uboot_name=u-boot.img dd_uboot_count=&quot;2&quot; dd_uboot_seek=&quot;1&quot; dd_uboot_conf=&quot;&quot; dd_uboot_bs=&quot;384k&quot; dd_uboot_backup=/opt/backup/uboot/u-boot.img echo &quot;uboot_name=${uboot_name}&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_count=2&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_seek=1&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_conf=&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_bs=384k&quot; &gt;&gt; /boot/SOC.sh echo &quot;boot_name=u-boot.img&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_name=${dd_uboot_name}&quot; &gt;&gt; /boot/SOC.sh fi if [ ! -f /opt/backup/uboot/u-boot.img ] ; then mkdir -p /opt/backup/uboot/ wget --directory-prefix=/opt/backup/uboot/ http://rcn-ee.com/repos/bootloader/am335x_evm/${http_uboot} mv /opt/backup/uboot/${http_uboot} /opt/backup/uboot/u-boot.img fi dd_bootloader if [ &quot;x${boot_fstype}&quot; = &quot;xfat&quot; ] ; then conf_boot_startmb=${conf_boot_startmb:-&quot;1&quot;} conf_boot_endmb=${conf_boot_endmb:-&quot;96&quot;} sfdisk_fstype=${sfdisk_fstype:-&quot;0xE&quot;} boot_label=${boot_label:-&quot;BEAGLEBONE&quot;} rootfs_label=${rootfs_label:-&quot;rootfs&quot;} message=&quot;Formatting: ${destination}&quot; ; broadcast sfdisk_options=&quot;--force --Linux --in-order --unit M&quot; sfdisk_boot_startmb=&quot;${conf_boot_startmb}&quot; sfdisk_boot_endmb=&quot;${conf_boot_endmb}&quot; test_sfdisk=$(LC_ALL=C sfdisk --help | grep -m 1 -e &quot;--in-order&quot; || true) if [ &quot;x${test_sfdisk}&quot; = &quot;x&quot; ] ; then message=&quot;sfdisk: [2.26.x or greater]&quot; ; broadcast sfdisk_options=&quot;--force&quot; sfdisk_boot_startmb=&quot;${sfdisk_boot_startmb}M&quot; sfdisk_boot_endmb=&quot;${sfdisk_boot_endmb}M&quot; fi message=&quot;sfdisk: [sfdisk ${sfdisk_options} ${destination}]&quot; ; broadcast message=&quot;sfdisk: [${sfdisk_boot_startmb},${sfdisk_boot_endmb},${sfdisk_fstype},*]&quot; ; broadcast message=&quot;sfdisk: [,,,-]&quot; ; broadcast LC_ALL=C sfdisk ${sfdisk_options} &quot;${destination}&quot; &lt;&lt;-__EOF__ ${sfdisk_boot_startmb},${sfdisk_boot_endmb},${sfdisk_fstype},* ,,,- __EOF__ flush_cache format_boot format_root message=&quot;Formatting: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast copy_boot media_rootfs=&quot;2&quot; copy_rootfs else conf_boot_startmb=${conf_boot_startmb:-&quot;1&quot;} sfdisk_fstype=${sfdisk_fstype:-&quot;L&quot;} if [ &quot;x${sfdisk_fstype}&quot; = &quot;x0x83&quot; ] ; then sfdisk_fstype=&quot;L&quot; fi boot_label=${boot_label:-&quot;BEAGLEBONE&quot;} message=&quot;Formatting: ${destination}&quot; ; broadcast sfdisk_options=&quot;--force --Linux --in-order --unit M&quot; sfdisk_boot_startmb=&quot;${conf_boot_startmb}&quot; test_sfdisk=$(LC_ALL=C sfdisk --help | grep -m 1 -e &quot;--in-order&quot; || true) if [ &quot;x${test_sfdisk}&quot; = &quot;x&quot; ] ; then message=&quot;sfdisk: [2.26.x or greater]&quot; ; broadcast if [ &quot;x${bootrom_gpt}&quot; = &quot;xenable&quot; ] ; then sfdisk_options=&quot;--force --label gpt&quot; else sfdisk_options=&quot;--force&quot; fi sfdisk_boot_startmb=&quot;${sfdisk_boot_startmb}M&quot; fi message=&quot;sfdisk: [$(LC_ALL=C sfdisk --version)]&quot; ; broadcast message=&quot;sfdisk: [sfdisk ${sfdisk_options} ${destination}]&quot; ; broadcast message=&quot;sfdisk: [${sfdisk_boot_startmb},${sfdisk_boot_endmb},${sfdisk_fstype},*]&quot; ; broadcast LC_ALL=C sfdisk ${sfdisk_options} &quot;${destination}&quot; &lt;&lt;-__EOF__ ${sfdisk_boot_startmb},,${sfdisk_fstype},* __EOF__ flush_cache format_single_root message=&quot;Formatting: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast media_rootfs=&quot;1&quot; copy_rootfs fi } clear message=&quot;-----------------------------&quot; ; broadcast message=&quot;Version: [${version_message}]&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast check_running_system cylon_leds &amp; CYLON_PID=$! partition_drive # Jump to Line Go Status API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Contact Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630093323#index"
                   NS1:content=" Did you know that elinux.org has Mailing Lists? Please feel free to register today to discuss the wiki in general, request features, etc. etc.. Thanks!--Wmat (talk) BeagleBone Black Extracting eMMC contents From eLinux.org Jump to: navigation, search Contents [hide] 1 Intro 1.1 Steps to save 1.2 Performing restore/flashing 2 Sources 2.1 Build steps 2.1.1 uEnv.txt 2.1.2 autorun.sh 2.1.3 Other sources used 3 Alternatives Intro There are lots of ways to extract the contents of the eMMC to save off and reuse. I'm proposing a method using Buildroot and an initramfs such that you can simply drop a few files from a .zip onto a normal, FAT-formatted SD card to perform the extraction. There are several things really handy here, such as the ability to edit autorun.sh to be whatever script you want to run on your board at boot. In the archive, I only have the necessary autorun.sh for saving your eMMC content. The flip-side is provided here in the text such that you need to go through a couple of steps before you trash your eMMC. Steps to save The steps for saving off your eMMC contents to a file: Get a 4GB or larger uSD card that is FAT formatted. Make sure that the partition on the uSD card is marked as active. Download beagleboneblack-save-emmc.zip and extract the contents onto your uSD card. Eject uSD card from your computer, insert into powered-off BeagleBone Black and apply power to your board while holding down the S2 button (release button a couple seconds after boot). IMPORTANT: Due to the way the environment sets the partition mmcblk1, some newer boards (shipped with Debian 7.5 or newer) won't work with the autorun.sh. As a workaround, instead of holding down the S2 button, just power the board with the uSD card inserted. IMPORTANT: On Rev C BeagleBone Blacks from element14, you need to create a folder titled &quot;dtbs&quot; and copy am335x-boneblack.dtb into it in order for the SD card to be booted. IMPORTANT: On Rev C BeagleBone Greens from Seed Studio, you need to create a folder titled &quot;dtbs&quot; and copy am335x-boneblack.dtb to dtbs/am335x-bonegreen.dtb (note the name change) in order for the SD card to be booted. You'll notice USR0 (the LED closest to the S1 button in the corner) will (after about 20 seconds) start to blink steadily, rather than the double-pulse &quot;heartbeat&quot; pattern that is typical when your BeagleBone Black is running the typical Linux kernel configuration. It'll run for a bit under 10 minutes and then USR0 will stay ON steady. That's your cue to remove power, remove the uSD card and put it back into your computer. You should see a file called BeagleBoneBlack-eMMC-image-XXXXX.img.gz, where XXXXX is a set of random numbers. Save off this file to use for restoring your image later. NOTE: Because the date won't be set on your board, you might want to adjust the date on the file to remember when you made it. NOTE: Delete the file if you want to make room for a new backup image. NOTE: If you plan to use Windows Win32 Disk Imager, you'll need to uncompress the image. It is compressed due to some FAT (non-FAT32) partitions not being able to store more than 2GB files. NOTE: To mark a partition as active in Windows 7: Open command prompt and enter the following commands: diskpart -&gt; list disk -&gt; select disk x (where x is the uSD card) -&gt; list partition -&gt; select partition 1 (assuming the uSD card has 1 partition) -&gt; active. Performing restore/flashing To restore the file, make sure there is a valid BeagleBoneBlack-eMMC-image-XXXX.img file on the uSD card and edit autorun.sh with your favorite text editor to contain the following: #!/bin/sh echo timer &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger gunzip -c /mnt/BBB-eMMC-XXXXX.img.gz | dd of=/dev/mmcblk1 bs=16M UUID=$(/sbin/blkid -c /dev/null -s UUID -o value /dev/mmcblk1p2) mkdir -p /mnt mount /dev/mmcblk1p2 /mnt sed -i &quot;s/^uuid=.*\$/uuid=$UUID/&quot; /mnt/boot/uEnv.txt umount /mnt sync echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger NOTE: Be certain to replace the 'XXXXX' above with the proper name of your image file. NOTE: You can share and use other people's image files, but be sure to have them uncompressed on the card or add decompression to the script. NOTE: The UUID replacement is required for recent Debian images. If you have something other than a 2 partition image, you might need to adjust or remove the lines that configure the UUID. They should be generally safe, but be aware that the newer u-boots that ship with BeagleBone Black attempt to use the UUID and pointing the '/dev/mmcblk1p2' to the right root partition is important. NOTE: if you have difficulty booting a Rev. C BBB with this tool mount the SD card and make the following changes: cd /mnt #or wherever you have mounted the card mkdir dtbs cp am335x-boneblack.dtb dtbs/am335x-boneblack.dtb # if you have a BeageBoneGreen just change the name: cp am335x-boneblack.dtb dtbs/am335x-bonegreen.dtb You may also try booting with the barrel jack (AC power) rather than the USB port. Sources This image was built using Buildroot. The sources are at https://github.com/jadonk/buildroot with tag save-emmc-0.0.1. Download via https://github.com/jadonk/buildroot/releases/tag/save-emmc-0.0.1 or clone the git repo. It is a small fork from git://git.buildroot.net/buildroot tag e9f6011617528646768e69203e85fe64364b7efd. Build steps To build, 'make beagleboneblack_defconfig; make; ./mkuimage.sh'. Output files (am335x-boneblack.dtb, MLO, u-boot.img and uImage) will be in the output/images subdirectory. The following files were created manually. uEnv.txt bootpart=0:1 bootdir= fdtaddr=0x81FF0000 optargs=quiet capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN uenvcmd=load mmc 0 ${loadaddr} uImage;run loadfdt;setenv bootargs console=${console} ${optargs};bootm ${loadaddr} - ${fdtaddr} autorun.sh #!/bin/sh echo timer &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger· #un-comment the following 2 lines to perform a backup IMAGEFILE=/mnt/BBB-eMMC-$RANDOM.img.gz dd if=/dev/mmcblk1 bs=16M | gzip -c &gt; $IMAGEFILE #un-comment the following 6 lines to perform a restore (be sure to replace XXXXX with your image name) #gunzip -c /mnt/BBB-eMMC-XXXXX.img.gz | dd of=/dev/mmcblk1 bs=16M #UUID=$(/sbin/blkid -c /dev/null -s UUID -o value /dev/mmcblk1p2) #mkdir -p /mnt #mount /dev/mmcblk1p2 /mnt #sed -i &quot;s/^uuid=.*\$/uuid=$UUID/&quot; /mnt/boot/uEnv.txt #umount /mnt sync echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger Other sources used The kernel is based on https://github.com/beagleboard/kernel/commit/9fdb452245a58158a4bea787cdc663c17681bcfe, but I applied the patches, added firmware and uploaded it to https://github.com/beagleboard/linux/commit/ddd36e546e53d3c493075bbebd6188ee843208f9 to pull down in the Buildroot makefile. The link to the source for the firmware is in the commit. Alternatives For many BeagleBone Debian users, there is a simple alternative of using the /opt/scripts/tools/eMMC/beaglebone-black-make-microSD-flasher-from-eMMC.sh to write an image from the on-board eMMC to a microSD card in a way that the microSD card becomes a &quot;flasher&quot; to write to other BeagleBone eMMCs. Simply boot off the on-board eMMC that you wish to copy, insert a blank microSD card at least 4GB, run the script as root and wait for the script to complete. At that point, you shut down your board and remove the microSD card. Booting off that microSD card on other BeagleBones should result in the typical &quot;flasher&quot; process writing the contents onto that BeagleBone's eMMC. The source code for the script is at https://github.com/RobertCNelson/boot-scripts/blob/master/tools/eMMC/beaglebone-black-make-microSD-flasher-from-eMMC.sh. Retrieved from &quot;http://elinux.org/index.php?title=BeagleBone_Black_Extracting_eMMC_contents&amp;oldid=401401&quot; Categories: BeagleBone BeagleBoneBlack HowTo Navigation menu Personal tools Log in Request account Log in / create account with OpenID Namespaces Page Discussion Variants Views Read View source View history More Search Navigation Main Page Community portal Current events Recent changes Help Volunteering Bug Tracker Where else to find us Google+ Community Twitter (@elinux) #elinux on Freenode Facebook (@elinux.org) Mailing Lists Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 3 February 2016, at 13:58. This page has been accessed 33,323 times. Content is available under a Creative Commons Attribution-ShareAlike 3.0 Unported License unless otherwise noted. Privacy policy About eLinux.org Disclaimers a Creative Commons Attribution-ShareAlike 3.0 Unported License Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628163751#index"
                   NS1:content=" H i F i D U I N O Lot of Value, Little Money Home Musiland USB INTRO Free High-Res CODE Apple Remote Sabre32 OTHER B-II Home &gt; Embedded Computing &gt; BEAGLEBONE BLACK: ACCESSING uSD AND USB STORAGE BEAGLEBONE BLACK: ACCESSING uSD AND USB STORAGE March 19, 2014 Leave a comment Go to comments ACCESSING THE uSD CARD Once the operating system is flashed to the internal eMMC, the uSD card can be used as storage and it is a convenient means to store music tracks. The command “fdisk -l” will list all the storage devices seen by the operating system: Here is without any devices in the uSD slot. Listed is the internal eMMC storage device (listing only relevant parts): fdisk-l-noSD After inserting a 32MB uSD card we see this additional device: fdisk-l-32MSD After inserting a 2 GB uSD card we see this device instead: fdisk-l-2GSD We realize that the any card inserted in the uSD slot is characterized by “/dev/mmcblk1p1”. “mmc” stands for “multimedia card” -both SD cards and eMMC devices conform to the “multimedia card” specification. “blk1” I think represents “block device 1” and “p1” is “partition 1” However, if the uSD card is already inserted during, we see the following: fdisk-l-beforeboot The device is assigned /dev/mmcblk0p1. It appears the the order the device numbers are assigned at boot time is uSD card first, then internal eMMC. Mounting the uSD card In order to access the contents on the uSD card, the device must be first mounted. First create a “mount point” (a folder). Here I use the directory /media which is already present. Under /media create a directory to mount the uSD card. I created /media/card, /media/usb and /media/nas to represent the 3 different places where music tracks can be stored. Use the command “mount” mount.card The “-v” flag in “mount” is optional. Means “verbose”. Notice that after mounting the uSD card, I can see the “smallmusic” directory and 1 mp3 track. Keep in mind that if the uSD card is already inserted at boot time, it is assigned “mmcblk0p1” instead of “mmcblk1p1” ACCESSING USB MEMORY STICK If digital audio is transmitted through the I2S interface, then the USB host can also be used for a USB memory device. The same procedure can be used to mount a usb memory stick: Insert a USB storage to the USB host connector Type “fdisk -l” to identify the device. Notice that it is /dev/sda1 Type mount /dev/sda1 /”mount point” in my case, mount /dev/sda1 /media/usb Inserting a USB storage device will show up as: fdiskUSB Since there is only one usb host port, a USB memory device will always appear as /dev/sda1 whether it is present during boot or not. AUTOMATING THE MOUNT PROCESS It becomes cumbersome to have to access the board through the command line in order to mount a storage device. For a music device, the ideal is to have these storage devices mounted automatically. I tried different ways to auto-mount the devices when they are inserted: Autofs: looks like the most promising but did not work in my installation while following this excellent guide [link] usbmount: works well with uSD cards and USB storage at any time after boot, but when deleting the X11 package, it wound fail to mount uSD cards. usbmount was last updated in 2007 and is currently unmaintained. Add mount instructions in /etc/fstab which is invoked only during boot time. For now the “best” option in my environment seems using /etc/fstab and ensuring the storage devices are present during boot. This seems a reasonable configuration for an audio player: Insert the storage devices and turn-on the device. Even if switching to another storage device requiring a reboot, the booting process is very short. usbmount has better functionality because it works after boot. I didn’t like the fact that it stopped working for SD cards after I removed the X11 package (which I do not need). I’ll wait for more help on autofs and then I think I’ll switch to autofs. For USB I added the following line to the /etc/fstab file. usbFstab Note the following: Add the “nofail” option. Without it the board will not be able to boot if no USB memory is present in the USB port. Ensure that the USB memory has a single partition since we are assuming it is always /dev/sda1. A newly formatted USB memory device will have a single partition For the uSD Card and assuming that the card is inserted prior to boot, I added the following line: fstab-card Insert a uSD card and a USB memory device, boot the board and they will be mounted under /media/card and /media/usb (or whatever directory you had specified in /etc/fstab. Share this: Print Press This Pinterest Related BEAGLEBONE BLACK: BASE OPERATING SYSTEMIn &quot;Embedded Computing&quot; Musiland 03 Dragon and CD11TIn &quot;General&quot; BEAGLEBONE BLACK: NETWORK AND WIFIIn &quot;Embedded Computing&quot; Comments (5) Trackbacks (0) Leave a comment Trackback Salvo March 19, 2014 at 18:28 Reply Just to know, in the hope to be not useless, each time you would need to mount agn a unmounted data disk that wasn’t there at the boot time do it with: root# mount -a The same will work if you have exchanged any data unmountable disk, doing at first, i.e. root#umount /media/usb Then the next command after you have inserted a new one media card/key (even the same you had umounted BTW) will be easy and clever: root# mount -a Maybe it is like mount automate, reads the /etc/fstab and mount any valid entry found Almost the same as at the boot time. This would mean that on each bout /etc/fstab will be read and all the disk partitions – mount points are to be mounted exactly in the same order and in the same places for the OS at the specified boot level. Maybe also the ‘df’ command, with all its switches …, will work. That’s much easy than using ‘fdisk -l’ … on my poor mind. That’s since BSD, mount, the first. I don’t remember about ‘df’. Several UNIX flavours have had changes for that last. Ciao. Salvo PS TU for all UR work, that’s really interesting from several points of view. BlgGear March 19, 2014 at 19:25 Reply Thanks for sharing. My concern is that as a music player, I would set it up totally headless. (of course in order to play a track, I would have to use the command line, but I have not thought of this part yet :-)). I did try autofs but couldn’t figure out why it would not work, so I gave up… Foundatron March 22, 2014 at 15:33 Reply Another great post! you mentioned “low noise power supplies”. Can you prove some links? Foundatron March 22, 2014 at 15:34 Reply errr….provide some links:) BlgGear March 22, 2014 at 22:14 Reply For the moment I am using a linear 5V, 1A supply that came with an old ZIP drive. A linear supply (those bigger and heavier transformer-based) are lower noise than the newer switching types. No trackbacks yet. Leave a Reply Cancel reply Fill in your details below or click an icon to log in: Gravatar Email (Address never made public) Name Website Gravatar kinyarwandablog: You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Notify me of new posts via email. BEAGLEBONE BLACK: ACCESSING NETWORK SHARE BEAGLEBONE BLACK: NETWORK AND WIFI RSS feed Recent Posts Firmware v 0.99 Soekris DAC: Modding VRef R2R DAC Benchmark Filters (for now) dam 1021 R2R More Mods… Digital Filters for Soekris R-2R DAC Soekris dam 1021 R-2R DAC ILLUSTRATED GUIDE BBB DAC DEVELOPMENTS dam1021 R-2R DAC MODs Soekris dam1021 Build Raspberry Pi 2 The Soekris R-2R DAC: Technical Details INSIDE MARANTZ AV RECEIVER AKM Verita 4490EQ DAC Raspberry Pi B+ Digital Audio Raspberry Pi version B+ Latest Comments tamer on Improved Large Font for L… Dwight Chizen on MarkAudio Alpair Speaker … amix on BBB DAC DEVELOPMENTS themystical on AKM Verita 4490EQ DAC Derek on CODE a good writing about… on Raspberry Pi B+ Digital A… Łukasz L on Raspberry Pi B+ Digital A… Mykhailo on BUILDING THE DIYINHK ES90… Audrey Ramirez on JDS Labs Headphone Amp with Ar… soundcheck on Raspberry Pi B+ Digital A… themystical on AKM Verita 4490EQ DAC landroni on The Soekris R-2R DAC: Technica… museguy on AMANERO USB – I2S I… museguy on AKM Verita 4490EQ DAC ddimitr on Soekris dam 1021 R-2R DAC ILLU… Arduino Arduino Tutorials ARDUINOOS Code and Life Electronics Lab Blog Ken Shirriff's blog Kerry Wong -Arduino, etc Theory Choosing and Using Bypass Caps Complete List of Linear Tech Application Notes Decoupling, Bypassing, Layout FIR Filter Tutorial Grounding Data Converters Intro to FIR Digital Filters Intuitive Guide to Principles of Communications Rakon Jitter Whitepaper Reduce EMI, RFI Successful PCB grounding with mixed-signal chips The Scientist and Engineer's Guide to Digital Signal Processing Tutorials and other Resources USB Power Tools for DIYaudio % to dB Calculator Audio Equipment Database Best Solder Circuit simulation Generate DSD128 and DSD256 Hex&lt;-&gt;Binary&lt;-&gt;Decimal Converter IC Manufacturer's LOGOs Inductor markings Inside Audio Equipment Jitter Calculator LOTs of Calculators Schematics Service Manuals SMD Codebook SMD Marking Code Search SMD Markings Tantalum Capacitor Markings Understanding Audio &amp; Reviews Artifact Audibility Audio Musings BitPerfect 牙尖嘴利音響頻道 In Ear Headphone Comparison Low-Jitter USB OpAmp Comparisons Red Spade Audio Blog TC Electronics The Slow Diyer Tweak's Guide to Recording Success USB-SPDIF shootout Follow HifiDuino via Email Join 292 other followers Top Create a free website or blog at WordPress.com. The INove Theme. Post to Cancel Follow New posts from this site will now appear in your Reader H i F i D U I N O Customize Follow Copy shortlink Report this content View Site in the Reader Manage Sites I Follow Collapse this bar Skip to toolbar My Site kinyarwandablogkinyarwandablog.wordpress.com + Add New WordPress Stats Stats PlanFree Publish Blog PostsAdd PagesAdd Personalize ThemesCustomize Menus Configure Sharing PeopleAdd DomainsAdd Settings Reader Streams Followed SitesManage Discover Recommendations My Likes Notifications Me kinyarwandablog@kinyarwandablog Sign Out Profile My Profile Account Settings Billing History Security Notifications Special Get Apps Next Steps Help Log Out :) Secure Connection Failed The connection to public-api.wordpress.com was interrupted while the page was loading. The page you are trying to view cannot be shown because the authenticity of the received data could not be verified. Please contact the web site owners to inform them of this problem. Learn more… Go Back Advanced Try Again Report errors like this to help Mozilla identify and block malicious sites uses security technology that is outdated and vulnerable to attack. An attacker could easily reveal information which you thought to be safe. (Not secure) Try loading using outdated security All Unread Comments Follows Likes  Older than 2 days  Your stats are booming! kinyarwandablog is getting lots of traffic. Older than a week  You've made 5 posts on kinyarwandablog. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628101558#index"
                   NS1:content=" Skip to content Primary Menu Home About Miscellaneous Search Search for: happily embedded I am here to share my knowledge which I acquired through my job… :) File transfer between BeagleBone Black and UBUNTU PC via SSH September 2, 2015September 26, 2015pt AR Do you know how to copy files between BBB(BeagleBone black) and Linux PC via SSH? Here is the solution. The secure copy(scp) command is used to copy files to and from different hosts and it uses ssh for data transfer. Connect BeagleBone Black to PC via mini USB cable.It will establish ssh connection between PC and BBB. Check ipaddress assigned for ssh connection on both BBB and PC. Copying file syntax:scp &lt;file-path&gt; dest_username@dest_host_IP:/home/dest_username copy file from UBUNTU PC to BBB sudo scp examples/example.c root@192.168.7.2:/home/root copy file from BBB to UBUNTU PC scp pics/pic.jpg dtsuser@192.168.7.1:/home/dtsuser Copying entire directory syntax:scp -r &lt;directory&gt; dest_username@dest_host_IP:/home/dest_username copy entire directory from UBUNTU PC to BBB sudo scp -r examples root@192.168.7.2:/home/root copy entire directory from BBB to UBUNTU PC sudo scp -r pics dtsuser@192.168.7.1:/home/dtsuser *Note: login to BBB: sudo ssh root@192.168.7.2 Share this: Press This Twitter Facebook Google Like this: Like Loading... Related How to enable gpio on Beaglebone black?In &quot;Embedded Systems&quot; Error:Unknown file system.Grub in rescue mode...How to repair this error in UBUNTU?In &quot;Linux&quot; BeagleBone black : Interfacing load cell weight sensor on UART1In &quot;Embedded Systems&quot; Embedded Systems, LinuxBeagleBone Black, C, Embedded Linux, scp, ssh, ubuntu14.04 Previous Article Introduction to RTOS Next Article BeagleBone black : Interfacing load cell weight sensor on UART1 Leave a Reply Cancel reply Please log in using one of these methods to post your comment: Gravatar Email (required) (Address never made public) Name (required) Website Gravatar kinyarwandablog: You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Archives May 2016 (1) February 2016 (3) November 2015 (1) October 2015 (4) September 2015 (3) August 2015 (1) July 2015 (1) June 2015 (4) April 2015 (2) December 2014 (2) October 2014 (1) September 2014 (2) August 2014 (4) Tags Android Angstrom Automotive BCM43142 BeagleBone Black bluetooth C CAN Embedded Linux Embedded Systems Error flash memory freescale gpio Grub Grub rescue gtk GUI hostapd i.mx28 imx28 imx28 u-boot kernel libnl Linux Linux image LPC1768 ltib mcimx28evk MTD mtdutils nautilus openssl PIC C18 RTOS SAE J1979 scp sd card serial NOR flash sf sf commands SPI ssh u-boot UART ubuntu14.04 Weight sensor WPA Supplicant yocto yocto image Categories Automotive (2) Bluetooth (1) CAN (2) Embedded Linux (1) Embedded Systems (19) freescale (6) IEC1107 (1) imx28 (5) Linux (8) LPC1768 (1) ltib (3) RTOS (3) SAE J1979 (1) u-boot (1) Yocto (1) Blogs I Follow Atmel | Bits &amp; Pieces Random Codes - Elementz Tech Blog TechCrunch Embedded Linux uEZings HalfaGeek Blogroll The keyword – volatile Recent Posts How to read data from IEC1107 Energy Meter STM32F103 Keil FreeRTOS “Error : No space in execution regions with .ANY selector matching heap_2.0 (.bss) MPLABX Error : “Harmony Location is not valid” CAN Multiple Frame Transmission Error – section ‘.udata_J1939Server.o’ can not fit the section. Section ‘.udata_J1939Server.o’ length=0x00000144 Top Posts &amp; Pages File transfer between BeagleBone Black and UBUNTU PC via SSH File transfer between BeagleBone Black and UBUNTU PC via SSH Uboot sf commands Uboot sf commands STM32F103 Keil FreeRTOS &quot;Error : No space in execution regions with .ANY selector matching heap_2.0 (.bss) STM32F103 Keil FreeRTOS &quot;Error : No space in execution regions with .ANY selector matching heap_2.0 (.bss) CAN Multiple Frame Transmission CAN Multiple Frame Transmission Blog Stats 4,415 hits Author Flag Counter Top Clicks en.wikipedia.org/wiki/ISO… Blog Images Posted on … September 2015 M T W T F S S « Aug Oct » 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Blog at WordPress.com. | The Plane Theme. Atmel | Bits &amp; Pieces Random Codes - Elementz Tech Blog Tech blog based on research and development done by the Elementz team. TechCrunch Startup and Technology News Embedded Linux Embedded system in linux uEZings Future Design's Official Blog about uEZ HalfaGeek Post to Cancel Follow New posts from this site will now appear in your Reader happily embedded Customize Follow Get theme: Plane Copy shortlink Report this content View Site in the Reader Manage Sites I Follow Collapse this bar %d bloggers like this: Skip to toolbar My Site kinyarwandablogkinyarwandablog.wordpress.com + Add New WordPress Stats Stats PlanFree Publish Blog PostsAdd PagesAdd Personalize ThemesCustomize Menus Configure Sharing PeopleAdd DomainsAdd Settings Reader Streams Followed SitesManage Discover Recommendations My Likes Notifications Me kinyarwandablog@kinyarwandablog Sign Out Profile My Profile Account Settings Billing History Security Notifications Special Get Apps Next Steps Help Log Out :) Like All Unread Comments Follows Likes  Older than 2 days  Your stats are booming! kinyarwandablog is getting lots of traffic. Older than a week  You've made 5 posts on kinyarwandablog. Reblog Like MD Nawazuddin One blogger likes this. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717090256#index"
                   NS1:content=" Etsy Lesen Machen Kaufen Verkaufen Etsy Events Über Uns Etsys Deutscher Blog Getränkedose + Essstäbchen + Klebefolie = Cola Pen Etsy.com handmade and vintage goods marianeidhold Beitrag von Maria Neidhold Veröffentlicht am 31. Jan 2012 in Machen Gestern Abend haben wir unsere Berliner Etsy Labs in eine Kalligrafie-Kreativschmiede verwandelt. Grafikdesignerin Sarah Hartwig zeigte uns, wie man aus einer Getränkedose einem Essstäbchen und Klebefolie einen „Cola Pen“ zaubert und diesen mit schwarzer Tinte zum Malen bringt. Falls ihr Lust bekommen habt, euren eigenen Stift herzustellen, dann findet ihr hier eine kleine Anleitung…. Die Tinte lässt sich jedoch nicht nur mithilfe eines Cola Pens auf Papier bringen, sondern auch andere Materialen wie Kiefernadeln, Walnüsse oder Holz sind dafür hervorragend geeignet. Weitere Anregungen erhaltet ihr auf Sarahs Webseite. Probiert es doch einfach mal aus. Noch ein kleiner Hinweis von mir: Zieht euch vielleicht Gummihandschuhe an, damit eure Finger danach nicht genauso schmutzig aussehen wie meine. Share on Tumblr custom self-inking calligraphy address stamp custom self-inking calligraphy address stamp €39.00 EUR Bunny Bear Healing Love Print Original Ink Drawing on White MiKa Art Bunny Bear Healing Love Print Original Ink Drawing on White MiKa Art Sold Custom Ink Pack Kit Custom Ink Pack Kit Sold Original Ink Drawing, Black and White Original Illustration, Abstract Circle Flowers Archival Ink Pen Line Illustration, Size 11x14 Inches Original Ink Drawing, Black and White Original Illustration, Abstract Circle Flowers Archival Ink Pen Line Illustration, Size 11x14 Inches Sold Eco-friendly Greeting Card &quot;Vielen Dank&quot; Eco-friendly Greeting Card &quot;Vielen Dank&quot; Sold Walnut Ink Speckled and Distressed Paper Tags - 10 large Paper Tags Walnut Ink Speckled and Distressed Paper Tags - 10 large Paper Tags €4.64 EUR 0 Kommentare Kommentar hinzufügen You must be signed in to post a comment. Einloggen und eigene hinzufügen Suche Sag' Hallo! Etsyde auf Instagram Jetzt - sofort - reinbeißen! Moment! Diese leckere Waffel gehört nämlich über die Schulter und nicht in den Magen. Wir wünschen ein quietschvergnügtes Wochenende! @rommydebommy #etsyde #creative #creativebusiness #handmade #art #bag #waffles #fashion #yummy #friyay #friday #weekend etsyde @etsyde: Jetzt - sofort - reinbeißen! Moment! Diese leckere Waffel gehört nämlich über die Schulter und nicht in den Magen. Wir wünschen ein quietschvergnügtes Wochenende! @rommydebommy #etsyde #creative #creativebusiness #handmade #art #bag #waffles #fashion #yummy #friyay #friday #weekend Ausgewählte Produkte PENGUIN / do it yourself paper lamp shade 2&quot; Inch extra LARGE Round Brass Blank Tags 2 inch - 18 gauge QTY 5 Hand painted Ceramic Teapot. Blue and White. Andere Etsy-Blogs Blog Francais Deutscher Blog UK Edition Australia Edition Nederlandse Blog Verkäuferhandbuch Etsy News Der Etsy-Blog Newsletter auf Deutsch Hol dir tägliche E-Mails für neue Produkte und Geschenkideen Andere Newsletter. Impressum Hier ansehen © 2016 Etsy, Inc. Über uns Kontakt Presse Entwickler Jobs Nutzungsbedingungen Datenschutz Copyright SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. URL Blocked: This redirect failed because the redirect URI is not whitelisted in the appâ€™s Client OAuth Settings. Make sure Client and Web OAuth Login are on and add all your app domains as Valid OAuth Redirect URIs. Like0 Twittern "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622090431#index"
                   NS1:content=" About Sakis3g How to use Download Keep alive Comments Sakis3g About Sakis3g Sakis3g is a script which creates an Internet connection using 3G modems. The software works with most USB and Bluetooth modems. Sakis3g is frequently used in devices such as Raspberry Pi and BeagleBone Black. The script can be used via a graphical user interface or through command lines. How to use Sakis3g The instructions presented here should work on most Linux distributions. Feel free to post a comment at the bottom of the page if there are any issues. The first step is to make sure you have the ppp package installed. Then the Sakis3g package can be downloaded, unzipped, made executable and then run. First check that you have ppp installed sudo apt-get install ppp Now download the Sakis3g package sudo wget &quot;http://www.sakis3g.com/downloads/sakis3g.tar.gz&quot; -O sakis3g.tar.gz Then unzip the file sudo tar -xzvf sakis3g.tar.gz Make the file executable sudo chmod +x sakis3g And finally launch it ./sakis3g --interactive Sakis3g will start in an interactive mode. Select the right options for your modem and either choose a predefined APN or enter a custom APN. If one of the custom APN fields is empty (no user and/or no password required), then enter 0. If the connection is successful, you will get a confirmation message. If the modem is identified, but it fails to connect, the APN settings might be wrong. If the modem can't be configured, it may be possible that the modem requires additional configuration. Please enter your problem and modem details in the comments if the configuration fails. Download Sakis3g To directly download the latest version Sakis3g script, please click here: Download The script is suitable for all architectures with USB ports (i386, amd64, armv4t &amp; armv5t). The package includes usb-modeswitch, required to switch some 3G modems from CDROM mode to the modem mode. The software requires the ppp package to be installed and also possibly wvdial. Keep alive Sakis3g will not ensure the connection is kept alive. In poor signal areas it is very likely that the connection will drop after some time. In critical situations where the connection needs to be restored automatically, you can use UMTSkeeper, a script which ensures the connection is restored automatically. For more information about UMTSkeeper please click here. Note that UMTSkeeper already includes sakis3g. Make sure that the resetusb program included in UMTSkeeper executes properly on your Linux machine! It will not run by default on Raspberry Pi or Beaglebone Black! To check that resetusb works fine on your machine, run the following command in terminal from within the umtskeeper directory: sudo resetusb /dev/bus/usb/-port-/-dev-You can get the port and device number of the modem by typing lsusb in terminal. If an error occurs when running the command mentioned above, resetusb needs to be recompiled by using the following command: sudo gcc resetusb.c -o resetusb Donate If you've found this website useful and my comments helpful, you can donate any sum using the button below. Sponsors Analizoare de gaze | Kronstadt Energii Regenerabile Comments If you require assistance, please leave a comment below. Sakis3g script was developed by Sakis Dimopoulos and not by the author of this website. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Seq RDF:about="urn:scrapbook:cache">
    <RDF:li RDF:resource="urn:scrapbook:item20160615143837#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616135942#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616141056#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616162207#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616164519#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616164532#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616165627#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616171225#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616173034#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160616173227#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160617103143#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160617103305#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160617103623#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160617150333#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160617154301#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620123149#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620124122#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620150728#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620152343#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620152401#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620155427#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620162551#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620170108#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620171314#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620171615#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620171940#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160621210426#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622090408#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622090425#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622090431#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622094138#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622114016#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622114237#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622114515#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622114526#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622144816#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160623110751#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160623111552#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160623111740#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160623115136#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160622212230#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160623161000#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160623171946#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160624161032#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160624162352#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160624164710#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160624164820#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160624165015#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160627072031#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160627073645#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160627073717#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160627160810#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160627170229#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160627172915#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628101558#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628102204#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628102831#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628115855#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628120748#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628122008#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628134447#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628140329#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620113347#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620113812#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160620114707#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628160522#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628163751#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628173951#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160628174051#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160629153748#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160629170003#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160629170505#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630093323#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630094820#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630095043#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630095142#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630095351#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630095454#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160630140546#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705093233#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705093313#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705102903#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705104959#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705110227#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705152015#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705162108#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705162115#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160705162718#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160707185735#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160707194543#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708090245#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708091922#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708103008#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708142818#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708144007#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708175508#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160708175529#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160711091020#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160711202521#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160711210418#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160712163439#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717085213#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717085525#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717090025#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717090045#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717090256#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717090439#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717091424#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717091535#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717091544#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717092814#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717093112#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717093233#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160717093521#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160719204656#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160719211453#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160720094818#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160720095147#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160720141252#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160721101841#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160725153049#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160726100608#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160726102516#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160726104548#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160726142731#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160727170301#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160727170444#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160729153550#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160729153556#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160729153603#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160802140703#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160802140743#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160802144235#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160802170544#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160802170621#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160808152013#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160810104429#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160810104654#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160810134555#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160818121214#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160818121224#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160818143659#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160822152524#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160823093821#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160824110755#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160824112714#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20160824130851#index"/>
  </RDF:Seq>
  <RDF:Description RDF:about="urn:scrapbook:item20160810134555#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" pip stable Quickstart Installation User Guide Reference Guide pip pip install Usage Description Overview Argument Handling Working Out the Name and Version Satisfying Requirements Installation Order Requirements File Format Requirement Specifiers Per-requirement Overrides Pre-release Versions VCS Support Finding Packages SSL Certificate Verification Caching Hash-Checking Mode &quot;Editable&quot; Installs Controlling setup_requires Build System Interface Options Examples pip download pip uninstall pip freeze pip list pip show pip search pip wheel pip hash Development Release Notes Open Source (including Read the Docs) is underfunded. This report from the Ford Foundation is a must-read. pip Docs » Reference Guide » pip install Edit on GitHub pip install¶ Contents pip install Usage Description Overview Argument Handling Working Out the Name and Version Satisfying Requirements Installation Order Requirements File Format Example Requirements File Requirement Specifiers Per-requirement Overrides Pre-release Versions VCS Support Git Mercurial Subversion Bazaar Finding Packages SSL Certificate Verification Caching Wheel Cache Hash-Checking Mode Hashes from PyPI &quot;Editable&quot; Installs Controlling setup_requires Build System Interface Options Examples Usage¶ pip install [options] &lt;requirement specifier&gt; [package-index-options] ... pip install [options] -r &lt;requirements file&gt; [package-index-options] ... pip install [options] [-e] &lt;vcs project url&gt; ... pip install [options] [-e] &lt;local project path&gt; ... pip install [options] &lt;archive url/path&gt; ... Description¶ Install packages from: PyPI (and other indexes) using requirement specifiers. VCS project urls. Local project directories. Local or remote source archives. pip also supports installing from &quot;requirements files&quot;, which provide an easy way to specify a whole environment to be installed. Overview¶ Pip install has several stages: Identify the base requirements. The user supplied arguments are processed here. Resolve dependencies. What will be installed is determined here. Build wheels. All the dependencies that can be are built into wheels. Install the packages (and uninstall anything being upgraded/replaced). Argument Handling¶ When looking at the items to be installed, pip checks what type of item each is, in the following order: Project or archive URL. Local directory (which must contain a setup.py, or pip will report an error). Local file (a sdist or wheel format archive, following the naming conventions for those formats). A requirement, as specified in PEP 440. Each item identified is added to the set of requirements to be satisfied by the install. Working Out the Name and Version¶ For each candidate item, pip needs to know the project name and version. For wheels (identified by the .whl file extension) this can be obtained from the filename, as per the Wheel spec. For local directories, or explicitly specified sdist files, the setup.py egg_info command is used to determine the project metadata. For sdists located via an index, the filename is parsed for the name and project version (this is in theory slightly less reliable than using the egg_info command, but avoids downloading and processing unnecessary numbers of files). Any URL may use the #egg=name syntax (see VCS Support) to explicitly state the project name. Satisfying Requirements¶ Once pip has the set of requirements to satisfy, it chooses which version of each requirement to install using the simple rule that the latest version that satisfies the given constraints will be installed (but see here for an exception regarding pre-release versions). Where more than one source of the chosen version is available, it is assumed that any source is acceptable (as otherwise the versions would differ). Installation Order¶ As of v6.1.0, pip installs dependencies before their dependents, i.e. in &quot;topological order&quot;. This is the only commitment pip currently makes related to order. While it may be coincidentally true that pip will install things in the order of the install arguments or in the order of the items in a requirements file, this is not a promise. In the event of a dependency cycle (aka &quot;circular dependency&quot;), the current implementation (which might possibly change later) has it such that the first encountered member of the cycle is installed last. For instance, if quux depends on foo which depends on bar which depends on baz, which depends on foo: pip install quux ... Installing collected packages baz, bar, foo, quux pip install bar ... Installing collected packages foo, baz, bar Prior to v6.1.0, pip made no commitments about install order. The decision to install topologically is based on the principle that installations should proceed in a way that leaves the environment usable at each step. This has two main practical benefits: Concurrent use of the environment during the install is more likely to work. A failed install is less likely to leave a broken environment. Although pip would like to support failure rollbacks eventually, in the mean time, this is an improvement. Although the new install order is not intended to replace (and does not replace) the use of setup_requires to declare build dependencies, it may help certain projects install from sdist (that might previously fail) that fit the following profile: They have build dependencies that are also declared as install dependencies using install_requires. python setup.py egg_info works without their build dependencies being installed. For whatever reason, they don't or won't declare their build dependencies using setup_requires. Requirements File Format¶ Each line of the requirements file indicates something to be installed, and like arguments to pip install, the following forms are supported: [[--option]...] &lt;requirement specifier&gt; [; markers] [[--option]...] &lt;archive url/path&gt; [-e] &lt;local project path&gt; [-e] &lt;vcs project url&gt; For details on requirement specifiers, see Requirement Specifiers. See the pip install Examples for examples of all these forms. A line that begins with # is treated as a comment and ignored. Whitespace followed by a # causes the # and the remainder of the line to be treated as a comment. A line ending in an unescaped \ is treated as a line continuation and the newline following it is effectively ignored. Comments are stripped before line continuations are processed. The following options are supported: -i, --index-url --extra-index-url --no-index -f, --find-links --no-binary --only-binary --require-hashes For example, to specify --no-index and 2 --find-links locations: --no-index --find-links /my/local/archives --find-links http://some.archives.com/archives If you wish, you can refer to other requirements files, like this: -r more_requirements.txt You can also refer to constraints files, like this: -c some_constraints.txt Example Requirements File¶ Use pip install -r example-requirements.txt to install: # ####### example-requirements.txt ####### # ###### Requirements without Version Specifiers ###### nose nose-cov beautifulsoup4 # ###### Requirements with Version Specifiers ###### # See https://www.python.org/dev/peps/pep-0440/#version-specifiers docopt == 0.6.1 # Version Matching. Must be version 0.6.1 keyring &gt;= 4.1.1 # Minimum version 4.1.1 coverage != 3.5 # Version Exclusion. Anything except version 3.5 Mopidy-Dirble ~= 1.1 # Compatible release. Same as &gt;= 1.1, == 1.* # ###### Refer to other requirements files ###### -r other-requirements.txt # # ###### A particular file ###### ./downloads/numpy-1.9.2-cp34-none-win32.whl http://wxpython.org/Phoenix/snapshot-builds/wxPython_Phoenix-3.0.3.dev1820+49a8884-cp34-none-win_amd64.whl # ###### Additional Requirements without Version Specifiers ###### # Same as 1st section, just here to show that you can put things in any order. rejected green # Requirement Specifiers¶ pip supports installing from a package index using a requirement specifier. Generally speaking, a requirement specifier is composed of a project name followed by optional version specifiers. PEP508 contains a full specification of the format of a requirement (pip does not support the url_req form of specifier at this time). Some examples: SomeProject SomeProject == 1.3 SomeProject &gt;=1.2,&lt;.2.0 SomeProject[foo, bar] SomeProject~=1.4.2 Since version 6.0, pip also supports specifiers containing environment markers like so: SomeProject ==5.4 ; python_version &lt; '2.7' SomeProject; sys_platform == 'win32' Environment markers are supported in the command line and in requirements files. Note Use quotes around specifiers in the shell when using &gt;, &lt;, or when using environment markers. Don't use quotes in requirement files. [1] Per-requirement Overrides¶ Since version 7.0 pip supports controlling the command line options given to setup.py via requirements files. This disables the use of wheels (cached or otherwise) for that package, as setup.py does not exist for wheels. The --global-option and --install-option options are used to pass options to setup.py. For example: FooProject &gt;= 1.2 --global-option=&quot;--no-user-cfg&quot; \ --install-option=&quot;--prefix='/usr/local'&quot; \ --install-option=&quot;--no-compile&quot; The above translates roughly into running FooProject's setup.py script as: python setup.py --no-user-cfg install --prefix='/usr/local' --no-compile Note that the only way of giving more than one option to setup.py is through multiple --global-option and --install-option options, as shown in the example above. The value of each option is passed as a single argument to the setup.py script. Therefore, a line such as the following is invalid and would result in an installation error. # Invalid. Please use '--install-option' twice as shown above. FooProject &gt;= 1.2 --install-option=&quot;--prefix=/usr/local --no-compile&quot; Pre-release Versions¶ Starting with v1.4, pip will only install stable versions as specified by PEP426 by default. If a version cannot be parsed as a compliant PEP426 version then it is assumed to be a pre-release. If a Requirement specifier includes a pre-release or development version (e.g. &gt;=0.0.dev0) then pip will allow pre-release and development versions for that requirement. This does not include the != flag. The pip install command also supports a --pre flag that will enable installing pre-releases and development releases. VCS Support¶ pip supports installing from Git, Mercurial, Subversion and Bazaar, and detects the type of VCS using url prefixes: &quot;git+&quot;, &quot;hg+&quot;, &quot;bzr+&quot;, &quot;svn+&quot;. pip requires a working VCS command on your path: git, hg, svn, or bzr. VCS projects can be installed in editable mode (using the --editable option) or not. For editable installs, the clone location by default is &quot;&lt;venv path&gt;/src/SomeProject&quot; in virtual environments, and &quot;&lt;cwd&gt;/src/SomeProject&quot; for global installs. The --src option can be used to modify this location. For non-editable installs, the project is built locally in a temp dir and then installed normally. The &quot;project name&quot; component of the url suffix &quot;egg=&lt;project name&gt;-&lt;version&gt;&quot; is used by pip in its dependency logic to identify the project prior to pip downloading and analyzing the metadata. The optional &quot;version&quot; component of the egg name is not functionally important. It merely provides a human-readable clue as to what version is in use. For projects where setup.py is not in the root of project, &quot;subdirectory&quot; component is used. Value of &quot;subdirectory&quot; component should be a path starting from root of the project to where setup.py is located. So if your repository layout is: pkg_dir/ setup.py # setup.py for package pkg some_module.py other_dir/ some_file some_other_file You'll need to use pip install -e vcs+protocol://repo_url/#egg=pkg&amp;subdirectory=pkg_dir. Git¶ pip currently supports cloning over git, git+https and git+ssh: Here are the supported forms: [-e] git+git://git.myproject.org/MyProject#egg=MyProject [-e] git+https://git.myproject.org/MyProject#egg=MyProject [-e] git+ssh://git.myproject.org/MyProject#egg=MyProject -e git+git@git.myproject.org:MyProject#egg=MyProject Passing branch names, a commit hash or a tag name is possible like so: [-e] git://git.myproject.org/MyProject.git@master#egg=MyProject [-e] git://git.myproject.org/MyProject.git@v1.0#egg=MyProject [-e] git://git.myproject.org/MyProject.git@da39a3ee5e6b4b0d3255bfef95601890afd80709#egg=MyProject Mercurial¶ The supported schemes are: hg+http, hg+https, hg+static-http and hg+ssh. Here are the supported forms: [-e] hg+http://hg.myproject.org/MyProject#egg=MyProject [-e] hg+https://hg.myproject.org/MyProject#egg=MyProject [-e] hg+ssh://hg.myproject.org/MyProject#egg=MyProject You can also specify a revision number, a revision hash, a tag name or a local branch name like so: [-e] hg+http://hg.myproject.org/MyProject@da39a3ee5e6b#egg=MyProject [-e] hg+http://hg.myproject.org/MyProject@2019#egg=MyProject [-e] hg+http://hg.myproject.org/MyProject@v1.0#egg=MyProject [-e] hg+http://hg.myproject.org/MyProject@special_feature#egg=MyProject Subversion¶ pip supports the URL schemes svn, svn+svn, svn+http, svn+https, svn+ssh. You can also give specific revisions to an SVN URL, like so: [-e] svn+svn://svn.myproject.org/svn/MyProject#egg=MyProject [-e] svn+http://svn.myproject.org/svn/MyProject/trunk@2019#egg=MyProject which will check out revision 2019. @{20080101} would also check out the revision from 2008-01-01. You can only check out specific revisions using -e svn+.... Bazaar¶ pip supports Bazaar using the bzr+http, bzr+https, bzr+ssh, bzr+sftp, bzr+ftp and bzr+lp schemes. Here are the supported forms: [-e] bzr+http://bzr.myproject.org/MyProject/trunk#egg=MyProject [-e] bzr+sftp://user@myproject.org/MyProject/trunk#egg=MyProject [-e] bzr+ssh://user@myproject.org/MyProject/trunk#egg=MyProject [-e] bzr+ftp://user@myproject.org/MyProject/trunk#egg=MyProject [-e] bzr+lp:MyProject#egg=MyProject Tags or revisions can be installed like so: [-e] bzr+https://bzr.myproject.org/MyProject/trunk@2019#egg=MyProject [-e] bzr+http://bzr.myproject.org/MyProject/trunk@v1.0#egg=MyProject Finding Packages¶ pip searches for packages on PyPI using the http simple interface, which is documented here and there pip offers a number of Package Index Options for modifying how packages are found. pip looks for packages in a number of places, on PyPI (if not disabled via `--no-index`), in the local filesystem, and in any additional repositories specified via `--find-links` or `--index-url`. There is no ordering in the locations that are searched, rather they are all checked, and the &quot;best&quot; match for the requirements (in terms of version number - see PEP440 for details) is selected. See the pip install Examples. SSL Certificate Verification¶ Starting with v1.3, pip provides SSL certificate verification over https, to prevent man-in-the-middle attacks against PyPI downloads. Caching¶ Starting with v6.0, pip provides an on-by-default cache which functions similarly to that of a web browser. While the cache is on by default and is designed do the right thing by default you can disable the cache and always access PyPI by utilizing the --no-cache-dir option. When making any HTTP request pip will first check its local cache to determine if it has a suitable response stored for that request which has not expired. If it does then it simply returns that response and doesn't make the request. If it has a response stored, but it has expired, then it will attempt to make a conditional request to refresh the cache which will either return an empty response telling pip to simply use the cached item (and refresh the expiration timer) or it will return a whole new response which pip can then store in the cache. When storing items in the cache, pip will respect the CacheControl header if it exists, or it will fall back to the Expires header if that exists. This allows pip to function as a browser would, and allows the index server to communicate to pip how long it is reasonable to cache any particular item. While this cache attempts to minimize network activity, it does not prevent network access altogether. If you want a local install solution that circumvents accessing PyPI, see Installing from local packages. The default location for the cache directory depends on the Operating System: Unix ~/.cache/pip and it respects the XDG_CACHE_HOME directory. OS X ~/Library/Caches/pip. Windows &lt;CSIDL_LOCAL_APPDATA&gt;\pip\Cache Wheel Cache¶ Pip will read from the subdirectory wheels within the pip cache directory and use any packages found there. This is disabled via the same --no-cache-dir option that disables the HTTP cache. The internal structure of that is not part of the pip API. As of 7.0, pip makes a subdirectory for each sdist that wheels are built from and places the resulting wheels inside. Pip attempts to choose the best wheels from those built in preference to building a new wheel. Note that this means when a package has both optional C extensions and builds py tagged wheels when the C extension can't be built that pip will not attempt to build a better wheel for Pythons that would have supported it, once any generic wheel is built. To correct this, make sure that the wheels are built with Python specific tags - e.g. pp on Pypy. When no wheels are found for an sdist, pip will attempt to build a wheel automatically and insert it into the wheel cache. Hash-Checking Mode¶ Since version 8.0, pip can check downloaded package archives against local hashes to protect against remote tampering. To verify a package against one or more hashes, add them to the end of the line: FooProject == 1.2 --hash=sha256:2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824 \ --hash=sha256:486ea46224d1bb4fb680f34f7c9ad96a8f24ec88be73ea8e5a6c65260e9cb8a7 (The ability to use multiple hashes is important when a package has both binary and source distributions or when it offers binary distributions for a variety of platforms.) The recommended hash algorithm at the moment is sha256, but stronger ones are allowed, including all those supported by hashlib. However, weaker ones such as md5, sha1, and sha224 are excluded to avoid giving a false sense of security. Hash verification is an all-or-nothing proposition. Specifying a --hash against any requirement not only checks that hash but also activates a global hash-checking mode, which imposes several other security restrictions: Hashes are required for all requirements. This is because a partially-hashed requirements file is of little use and thus likely an error: a malicious actor could slip bad code into the installation via one of the unhashed requirements. Note that hashes embedded in URL-style requirements via the #md5=... syntax suffice to satisfy this rule (regardless of hash strength, for legacy reasons), though you should use a stronger hash like sha256 whenever possible. Hashes are required for all dependencies. An error results if there is a dependency that is not spelled out and hashed in the requirements file. Requirements that take the form of project names (rather than URLs or local filesystem paths) must be pinned to a specific version using ==. This prevents a surprising hash mismatch upon the release of a new version that matches the requirement specifier. --egg is disallowed, because it delegates installation of dependencies to setuptools, giving up pip's ability to enforce any of the above. Hash-checking mode can be forced on with the --require-hashes command-line option: $ pip install --require-hashes -r requirements.txt ... Hashes are required in --require-hashes mode (implicitly on when a hash is specified for any package). These requirements were missing hashes, leaving them open to tampering. These are the hashes the downloaded archives actually had. You can add lines like these to your requirements files to prevent tampering. pyelasticsearch==1.0 --hash=sha256:44ddfb1225054d7d6b1d02e9338e7d4809be94edbe9929a2ec0807d38df993fa more-itertools==2.2 --hash=sha256:93e62e05c7ad3da1a233def6731e8285156701e3419a5fe279017c429ec67ce0 This can be useful in deploy scripts, to ensure that the author of the requirements file provided hashes. It is also a convenient way to bootstrap your list of hashes, since it shows the hashes of the packages it fetched. It fetches only the preferred archive for each package, so you may still need to add hashes for alternatives archives using pip hash: for instance if there is both a binary and a source distribution. The wheel cache is disabled in hash-checking mode to prevent spurious hash mismatch errors. These would otherwise occur while installing sdists that had already been automatically built into cached wheels: those wheels would be selected for installation, but their hashes would not match the sdist ones from the requirements file. A further complication is that locally built wheels are nondeterministic: contemporary modification times make their way into the archive, making hashes unpredictable across machines and cache flushes. Compilation of C code adds further nondeterminism, as many compilers include random-seeded values in their output. However, wheels fetched from index servers are the same every time. They land in pip's HTTP cache, not its wheel cache, and are used normally in hash-checking mode. The only downside of having the wheel cache disabled is thus extra build time for sdists, and this can be solved by making sure pre-built wheels are available from the index server. Hash-checking mode also works with pip download and pip wheel. A comparison of hash-checking mode with other repeatability strategies is available in the User Guide. Warning Beware of the setup_requires keyword arg in setup.py. The (rare) packages that use it will cause those dependencies to be downloaded by setuptools directly, skipping pip's hash-checking. If you need to use such a package, see Controlling setup_requires. Warning Be careful not to nullify all your security work when you install your actual project by using setuptools directly: for example, by calling python setup.py install, python setup.py develop, or easy_install. Setuptools will happily go out and download, unchecked, anything you missed in your requirements file—and it’s easy to miss things as your project evolves. To be safe, install your project using pip and --no-deps. Instead of python setup.py develop, use... pip install --no-deps -e . Instead of python setup.py install, use... pip install --no-deps . Hashes from PyPI¶ PyPI provides an MD5 hash in the fragment portion of each package download URL, like #md5=123..., which pip checks as a protection against download corruption. Other hash algorithms that have guaranteed support from hashlib are also supported here: sha1, sha224, sha384, sha256, and sha512. Since this hash originates remotely, it is not a useful guard against tampering and thus does not satisfy the --require-hashes demand that every package have a local hash. &quot;Editable&quot; Installs¶ &quot;Editable&quot; installs are fundamentally &quot;setuptools develop mode&quot; installs. You can install local projects or VCS projects in &quot;editable&quot; mode: $ pip install -e path/to/SomeProject $ pip install -e git+http://repo/my_project.git#egg=SomeProject (See the VCS Support section above for more information on VCS-related syntax.) For local projects, the &quot;SomeProject.egg-info&quot; directory is created relative to the project path. This is one advantage over just using setup.py develop, which creates the &quot;egg-info&quot; directly relative the current working directory. Controlling setup_requires¶ Setuptools offers the setup_requires setup() keyword for specifying dependencies that need to be present in order for the setup.py script to run. Internally, Setuptools uses easy_install to fulfill these dependencies. pip has no way to control how these dependencies are located. None of the Package Index Options have an effect. The solution is to configure a &quot;system&quot; or &quot;personal&quot; Distutils configuration file to manage the fulfillment. For example, to have the dependency located at an alternate index, add this: [easy_install] index_url = https://my.index-mirror.com To have the dependency located from a local directory and not crawl PyPI, add this: [easy_install] allow_hosts = '' find_links = file:///path/to/local/archives/ Build System Interface¶ In order for pip to install a package from source, setup.py must implement the following commands: setup.py egg_info [--egg-base XXX] setup.py install --record XXX [--single-version-externally-managed] [--root XXX] [--compile|--no-compile] [--install-headers XXX] The egg_info command should create egg metadata for the package, as described in the setuptools documentation at http://pythonhosted.org/setuptools/setuptools.html#egg-info-create-egg-metadata-and-set-build-tags The install command should implement the complete process of installing the package to the target directory XXX. To install a package in &quot;editable&quot; mode (pip install -e), setup.py must implement the following command: setup.py develop --no-deps This should implement the complete process of installing the package in &quot;editable&quot; mode. All packages will be attempted to built into wheels: setup.py bdist_wheel -d XXX One further setup.py command is invoked by pip install: setup.py clean This command is invoked to clean up temporary commands from the build. (TODO: Investigate in more detail when this command is required). No other build system commands are invoked by the pip install command. Installing a package from a wheel does not invoke the build system at all. Options¶ -c, --constraint &lt;file&gt;¶ Constrain versions using the given constraints file. This option can be used multiple times. -e, --editable &lt;path/url&gt;¶ Install a project in editable mode (i.e. setuptools &quot;develop mode&quot;) from a local project path or a VCS url. -r, --requirement &lt;file&gt;¶ Install from the given requirements file. This option can be used multiple times. -b, --build &lt;dir&gt;¶ Directory to unpack packages into and build in. -t, --target &lt;dir&gt;¶ Install packages into &lt;dir&gt;. By default this will not replace existing files/folders in &lt;dir&gt;. Use --upgrade to replace existing packages in &lt;dir&gt; with new versions. -d, --download &lt;dir&gt;¶ Download packages into &lt;dir&gt; instead of installing them, regardless of what's already installed. --src &lt;dir&gt;¶ Directory to check out editable projects into. The default in a virtualenv is &quot;&lt;venv path&gt;/src&quot;. The default for global installs is &quot;&lt;current dir&gt;/src&quot;. -U, --upgrade¶ Upgrade all specified packages to the newest available version. This process is recursive regardless of whether a dependency is already satisfied. --force-reinstall¶ When upgrading, reinstall all packages even if they are already up-to-date. -I, --ignore-installed¶ Ignore the installed packages (reinstalling instead). --no-deps¶ Don't install package dependencies. --install-option &lt;options&gt;¶ Extra arguments to be supplied to the setup.py install command (use like --install-option=&quot;--install-scripts=/usr/local/bin&quot;). Use multiple --install-option options to pass multiple options to setup.py install. If you are using an option with a directory path, be sure to use absolute path. --global-option &lt;options&gt;¶ Extra global options to be supplied to the setup.py call before the install command. --user¶ Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%Python on Windows. (See the Python documentation for site.USER_BASE for full details.) --egg¶ Install packages as eggs, not 'flat', like pip normally does. This option is not about installing from eggs. (WARNING: Because this option overrides pip's normal install logic, requirements files may not behave as expected.) --root &lt;dir&gt;¶ Install everything relative to this alternate root directory. --prefix &lt;dir&gt;¶ Installation prefix where lib, bin and other top-level folders are placed --compile¶ Compile py files to pyc --no-compile¶ Do not compile py files to pyc --no-use-wheel¶ Do not Find and prefer wheel archives when searching indexes and find-links locations. DEPRECATED in favour of --no-binary. --no-binary &lt;format_control&gt;¶ Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package names with commas between them. Note that some packages are tricky to compile and may fail to install when this option is used on them. --only-binary &lt;format_control&gt;¶ Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them. --pre¶ Include pre-release and development versions. By default, pip only finds stable versions. --no-clean¶ Don't clean up build directories. --require-hashes¶ Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option. -i, --index-url &lt;url&gt;¶ Base URL of Python Package Index (default https://pypi.python.org/simple). --extra-index-url &lt;url&gt;¶ Extra URLs of package indexes to use in addition to --index-url. --no-index¶ Ignore package index (only looking at --find-links URLs instead). -f, --find-links &lt;url&gt;¶ If a url or path to an html file, then parse for links to archives. If a local path or file:// url that's a directory, then look for archives in the directory listing. --process-dependency-links¶ Enable the processing of dependency links. Examples¶ Install SomePackage and its dependencies from PyPI using Requirement Specifiers $ pip install SomePackage # latest version $ pip install SomePackage==1.0.4 # specific version $ pip install 'SomePackage&gt;=1.0.4' # minimum version Install a list of requirements specified in a file. See the Requirements files. $ pip install -r requirements.txt Upgrade an already installed SomePackage to the latest from PyPI. $ pip install --upgrade SomePackage Install a local project in &quot;editable&quot; mode. See the section on Editable Installs. $ pip install -e . # project in current directory $ pip install -e path/to/project # project in another directory Install a project from VCS in &quot;editable&quot; mode. See the sections on VCS Support and Editable Installs. $ pip install -e git+https://git.repo/some_pkg.git#egg=SomePackage # from git $ pip install -e hg+https://hg.repo/some_pkg.git#egg=SomePackage # from mercurial $ pip install -e svn+svn://svn.repo/some_pkg/trunk/#egg=SomePackage # from svn $ pip install -e git+https://git.repo/some_pkg.git@feature#egg=SomePackage # from 'feature' branch $ pip install -e &quot;git+https://git.repo/some_repo.git#egg=subdir&amp;subdirectory=subdir_path&quot; # install a python package from a repo subdirectory Install a package with setuptools extras. $ pip install SomePackage[PDF] $ pip install SomePackage[PDF]==3.0 $ pip install -e .[PDF]==3.0 # editable project in current directory Install a particular source archive file. $ pip install ./downloads/SomePackage-1.0.4.tar.gz $ pip install http://my.package.repo/SomePackage-1.0.4.zip Install from alternative package repositories. Install from a different index, and not PyPI $ pip install --index-url http://my.package.repo/simple/ SomePackage Search an additional index during install, in addition to PyPI $ pip install --extra-index-url http://my.package.repo/simple SomePackage Install from a local flat directory containing archives (and don't scan indexes): $ pip install --no-index --find-links=file:///local/dir/ SomePackage $ pip install --no-index --find-links=/local/dir/ SomePackage $ pip install --no-index --find-links=relative/dir/ SomePackage Find pre-release and development versions, in addition to stable versions. By default, pip only finds stable versions. $ pip install --pre SomePackage [1] This is true with the exception that pip v7.0 and v7.0.1 required quotes around specifiers containing environment markers in requirement files. Next Previous © Copyright 2008-2014, PyPA. Revision 281eb61b. Built with Sphinx using a theme provided by Read the Docs. Read the Docs v: stable Versions latest stable Downloads PDF HTML Epub On Read the Docs Project Home Builds Downloads On GitHub View Edit Search Free document hosting provided by Read the Docs. " />
  <RDF:Description RDF:about="urn:scrapbook:item20160729153603#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Home Close Menu Blog Downloads Community Help Forums Education Resources Training Menu Search Buy documentation &gt; installation &gt; installing-images &gt; linux Installing operating system images on Linux Please note that the use of the dd tool can overwrite any partition of your machine. If you specify the wrong device in the instructions below, you could delete your primary Linux partition. Please be careful. Run df -h to see what devices are currently mounted. If your computer has a slot for SD cards, insert the card. If not, insert the card into an SD card reader, then connect the reader to your computer. Run df -h again. The new device that has appeared is your SD card. The left column gives the device name of your SD card; it will be listed as something like /dev/mmcblk0p1 or /dev/sdd1. The last part (p1 or 1 respectively) is the partition number but you want to write to the whole SD card, not just one partition. You therefore need to remove that part from the name, getting, for example, /dev/mmcblk0 or /dev/sdd as the device name for the whole SD card. Note that the SD card can show up more than once in the output of df; it will do this if you have previously written a Raspberry Pi image to this SD card, because the Raspberry Pi SD images have more than one partition. Now that you've noted what the device name is, you need to unmount it so that files can't be read or written to the SD card while you are copying over the SD image. Run umount /dev/sdd1, replacing sdd1 with whatever your SD card's device name is (including the partition number). If your SD card shows up more than once in the output of df due to having multiple partitions on the SD card, you should unmount all of these partitions. In the terminal, write the image to the card with the command below, making sure you replace the input file if= argument with the path to your .img file, and the /dev/sdd in the output file of= argument with the right device name. This is very important, as you will lose all data on the hard drive if you provide the wrong device name. Make sure the device name is the name of the whole SD card as described above, not just a partition of it; for example, sdd, not sdds1 or sddp1, and mmcblk0, not mmcblk0p1. dd bs=4M if=2016-05-27-raspbian-jessie.img of=/dev/sdd Please note that block size set to 4M will work most of the time; if not, please try 1M, although this will take considerably longer. Also note that if you are not logged in as root you will need to prefix this with sudo. The dd command does not give any information of its progress and so may appear to have frozen; it could take more than five minutes to finish writing to the card. If your card reader has an LED it may blink during the write process. To see the progress of the copy operation you can run pkill -USR1 -n -x dd in another terminal, prefixed with sudo if you are not logged in as root. The progress will be displayed in the original window and not the window with the pkill command; it may not display immediately, due to buffering. Instead of dd you can use dcfldd; it will give a progress report about how much has been written. You can check what's written to the SD card by dd-ing from the card back to another image on your hard disk, truncating the new image to the same size as the original, and then running diff (or md5sum) on those two images. The SD card might be bigger than the original image, and dd will make a copy of the whole card. We must therefore truncate the new image to the size of the original image. Make sure you replace the input file if= argument with the right device name. diff should report that the files are identical. dd bs=4M if=/dev/sdd of=from-sd-card.img truncate --reference 2016-05-27-raspbian-jessie.img from-sd-card.img diff -s from-sd-card.img 2016-05-27-raspbian-jessie.img Run sync; this will ensure the write cache is flushed and that it is safe to unmount your SD card. Remove the SD card from the card reader. This article uses content from the eLinux wiki page RPi_Easy_SD_Card_Setup, which is shared under the Creative Commons Attribution-ShareAlike 3.0 Unported license View/Edit this page on GitHub Read our usage and contributions policy Creative Commons Licence About About us Team Governance Partners Support Help Documentation Learning resources Training Downloads FAQs Contact Contact us Social Twitter Facebook Google+ GitHub Vimeo YouTube Raspberry Pi Foundation UK registered charity 1129409 Cookies Trademark rules and brand guidelines " />
  <RDF:Description RDF:about="urn:scrapbook:item20160623171946#index"
                   NS1:content=" Home Packages Forums Wiki Bugs AUR Download pppd From ArchWiki Jump to: navigation, search ppp (Paul's PPP Package) is an open source package which implements the point-to-point protocol (PPP) on Linux and Solaris systems. It is implemented as single pppd daemon and acts as backend for xl2tpd, pptpd and netctl. 3G, L2TP and PPPoE connections are internally based on PPP protocol and therefore can be managed by ppp. Contents [hide] 1 Installation 2 Configuration 2.1 PPPoE 2.2 Starting pppd on boot 3 Tips and tricks 3.1 Do an auto redial 3.2 ISP auto-disconnect after 24h 3.2.1 Using cron 3.2.2 Using a systemd timer 4 Troubleshooting 4.1 Default route 4.2 Masquerading seems to be working fine but some sites do not work 4.3 pppd cannot load kernel module ppp_generic Installation Install the ppp package. Make sure that your kernel is compiled with PPPoE support (present in default kernel): $ zgrep CONFIG_PPPOE /proc/config.gz CONFIG_PPPOE=m Configuration PPPoE Create the connection configuration file: /etc/ppp/peers/your_provider plugin rp-pppoe.so # rp_pppoe_ac 'your ac name' # rp_pppoe_service 'your service name' # network interface eth0 # login name name &quot;someloginname&quot; usepeerdns persist # Uncomment this if you want to enable dial on demand #demand #idle 180 defaultroute hide-password noauth If usepeerdns option is used, pppd will create the /etc/ppp/resolv.conf file with obtained DNS addresses while establishing a connection. By default, the /etc/ppp/ip-up.d/00_dns hook script moves this file to /etc/resolv.conf, allowing the system to use these name servers. If this is undesirable (e.g. you are using a local caching DNS), edit the /etc/ppp/ip-up.d/00_dns.sh as you need. Put a line like this in /etc/ppp/pap-secrets or /etc/ppp/chap-secrets as required by the authentication method used by your ISP. It is OK to write these two files at the same time, pppd will automatically use the appropriate one: someloginname * yourpassword You can now start the link using the command: # pppd call your_provider Alternatively, you can use this # pon your_provider where your_provider is the exact name of your options file in /etc/ppp/peers. To see whether your PPPoE connection is started correctly, check the pppd output in system logs: # journalctl -b --no-pager | grep pppd On a successful connection, you will see something like the following: Jul 09 22:42:33 localhost pppd[239]: Plugin rp-pppoe.so loaded. Jul 09 22:42:33 localhost pppd[239]: RP-PPPoE plugin version 3.8p compiled against pppd 2.4.6 Jul 09 22:42:33 localhost network[184]: RP-PPPoE plugin version 3.8p compiled against pppd 2.4.6 Jul 09 22:42:33 localhost pppd[239]: pppd 2.4.6 started by root, uid 0 Jul 09 22:42:39 localhost pppd[239]: PPP session is 292 Jul 09 22:42:39 localhost pppd[239]: Connected to a0:f3:e4:4f:e3:b0 via interface enp4s0 Jul 09 22:42:39 localhost pppd[239]: Using interface ppp0 Jul 09 22:42:39 localhost pppd[239]: Connect: ppp0 &lt;--&gt; enp4s0 Jul 09 22:42:39 localhost pppd[239]: CHAP authentication succeeded: CHAP authentication success Jul 09 22:42:39 localhost pppd[239]: CHAP authentication succeeded Jul 09 22:42:39 localhost pppd[239]: peer from calling number A0:F3:E4:4F:E3:B0 authorized Jul 09 22:42:39 localhost pppd[239]: Cannot determine ethernet address for proxy ARP Jul 09 22:42:39 localhost pppd[239]: local IP address 10.6.2.137 Jul 09 22:42:39 localhost pppd[239]: remote IP address 10.6.1.1 Jul 09 22:42:39 localhost pppd[239]: primary DNS address 10.6.1.1 Jul 09 22:42:39 localhost pppd[239]: secondary DNS address 210.21.196.6 By default the configuration in /etc/ppp/peers/provider is treated as the default, so if you want to make &quot;your_provider&quot; the default, you can create a link like this # ln -s /etc/ppp/peers/your_provider /etc/ppp/peers/provider Now you can start the link by simply running: # pon To close a connection, use this # poff your_provider Starting pppd on boot Configure the ppp_generic module to load on boot. See Kernel modules#Automatic module handling for more information. Enable the systemd service ppp@your_provider.service. Tips and tricks Do an auto redial If pppd is running, you can force a connection reset by sending the SIGHUP signal to the process: # export PPPD_PID=$(pidof pppd) # kill -s HUP $PPPD_PID And you have redialed the connection. Note: Make sure you have persist option enabled in your /etc/ppp/peers/provider tab. Additionally you might want to set holdoff 0 to reconnect without waiting. ISP auto-disconnect after 24h Note: If you are not running your computer always on (running 24/7) then you can skip this step. If you use a flat-rate always-on connection on a computer, some providers restart your connection after 24h. That makes sure that the IP is rotated every 24h. To compensate, you can use an dynamic DNS service in combination with inadynAUR[broken link: archived in aur-mirror] to compensate for the rotating IP address. But to avoid disconnects when you do not need it, you might try to restart the connection using a cron job or systemd timer at a time of day you know no one will be using the connection (e.g. at 4 AM). Using cron As root, do the following: Create a bash script similar to this and give it a name (e.g. pppd_redial.sh): #!/bin/bash message=&quot;Restarting the PPP connection @:&quot; $(date) pppd_id=$(pidof pppd) kill -s HUP $pppd_id echo $message Give it execute permissions and put it on a path visible to root. Then create a cron job using crontab -e. Check that your EDITOR env variable is set if the command fails. So add anywhere in the file, 0 4 * * * /bin/bash /root/pppd_redial.sh Confirm that cronie service is up and running. If this is not the case, just enable and start it. Save and exit. Your PPPoE connection will now restart every day at 4AM. Using a systemd timer An alternative way to force a reconnect is using a systemd timer and the poff script (in particular its -r option). Simply create a .service and .timer files with the same name: ppp-redial.timer [Unit] Description=Reconnect PPP connections daily [Timer] OnCalendar=*-*-* 05:00:00 [Install] WantedBy=multi-user.target ppp-redial.service [Unit] Description=Reconnect PPP connections [Service] Type=simple ExecStart=/usr/bin/poff -r Now just enable and start the timer and systemd will cause a restart at the specified time. Troubleshooting Default route If you have a preconfigured default route before the pppd is started, the default route is kept, so take a look in /var/log/errors.log and if you have something like: pppd[nnnn]: not replacing existing default route via xxx.xxx.xxx.xxx and xxx.xxx.xxx.xxx is not the correct route for you Create a new script in /etc/ppp/ip-pre-up.d with this content: /etc/ppp/ip-pre-up.d/10-route-del-default.sh #!/bin/sh /usr/bin/route del default Note: Make sure you have a script named 'ip-pre-up' which launches *.sh in 'ip-pre-up.d' like other launch scripts do. Restart the pppd service. Masquerading seems to be working fine but some sites do not work The MTU under pppoe is 1492 bytes. Most sites use an MTU of 1500. So your connection sends an ICMP 3:4 (fragmentation needed) packet, asking for a smaller MTU, but some sites have their firewall blocking that. Enabling the PMTU clamping in iptables can solve that: iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu Now, for some reason, just trying to save the resulting iptables configuration with iptables-save and restoring it later, does not work. It has to be executed after the other iptables configuration had been loaded. So, here is a systemd unit to solve it: pmtu-clamping.service [Unit] Description=PMTU clamping for pppoe Requires=iptables.service After=iptables.service [Service] Type=oneshot ExecStart=/usr/bin/iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu [Install] WantedBy=multi-user.target And enable it. pppd cannot load kernel module ppp_generic When starting PPTP client, the pppd process cannot locate the appropriate module: Couldn't open the /dev/ppp device: No such device or address Please load the ppp_generic kernel module. The solution is to edit the /etc/modprobe.d/modules.conf file and change alias char-major-108 ppp to alias char-major-108 ppp_generic or just add such alias if it does not exist. The correct module will be loaded after reboot. Retrieved from &quot;https://wiki.archlinux.org/index.php?title=Pppd&amp;oldid=394332&quot; Category: Networking Hidden category: Pages with broken package links Navigation menu Views Page Discussion View source History Personal tools Log in Navigation Main page Categories Getting involved Wiki news Random page Search interaction Help Contributing Recent changes Recent talks New pages Statistics Reports Requests Tools What links here Related changes Special pages Printable version Permanent link Page information In other languages 日本語 Русский This page was last modified on 28 August 2015, at 17:47. Content is available under GNU Free Documentation License 1.3 or later unless otherwise noted. Privacy policy About ArchWiki Disclaimers "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160623110751#index"
                   NS1:content=" Trending Welcome Raspberry Pi Zero now has a camera connector Top 5 Raspberry Pi 3 Project Ideas Using the BBC Microbit with the Raspberry Pi Kano Computer Kit First Impressions 8-megapixel Raspberry Pi Camera Module v2 Write SD Card Images Using Etcher On Windows, Linux &amp; Mac How to Change Your Character Skin In Minecraft Pi Edition 7-Port USB Hub For Raspberry Pi RSS Twitter Google+ Facebook Pinterest YouTube Raspberry Pi Spy Navigate Home Categories General Hardware Programming Python Software Tutorials &amp; Help BerryClip BerryClip Instructions BerryClip Plus Instructions Videos &amp; Reviews Buy Buy Pi Buy Accessories Buy Books Tools Pi-Lite 14×9 LED Matrix Sprite Editor Pi Power Estimator App RPiREF Pin-out Reference App Simple Ohm’s Law Calculator Web Sites &amp; Links Tutorials &amp; Help Contact Us Site Map You are at:Home»Raspbian»How To Autostart Apps In Rasbian LXDE Desktop How To Autostart Apps In Rasbian LXDE Desktop 29 By Matt on May 3, 2014 Raspbian, Tutorials &amp; Help LXDE Desktop If you use the Raspbian operating system on your Raspberry Pi you will be aware that when you type startx you launch the graphical user interface “LXDE”. Within this environment there are plenty of applications and utilities. In your projects you may want to auto-load one or more of these applications when you run startx to save you having to launch them manually. Popular choices might include LXTerminal, Scratch, Midori and Leafpad. There are two methods you can choose. For most people either one will work but if in doubt use Method 1. In the examples below I’ve added two applications (LXTerminal and Leafpad) but you can add however many you need. Start by booting your Pi to the command prompt. Method 1 This method uses a global list of autostart applications that applies to all user accounts. They will load whenever LXDE is loaded regardless of what user is logged in at the time. Usually this user is the default ‘Pi’ account. Use the following command to launch the nano text editor and edit the autostart file : sudo nano /etc/xdg/lxsession/LXDE-pi/autostart Note : The newer Raspbian image changed the folder “LXDE” to “LXDE-pi” so the line above has been updated. After the last line add a line for each application you wish to autorun. For example if I add lines for LXTerminal and Leafpad my file looks like this : @lxpanel --profile LXDE @pcmanfm --desktop --profile LXDE @lxterminal @leafpad @xscreensaver -no-splash@ To save and exit the nano editor press CTRL-X, Y and then ENTER. You can use your preferred text editor if nano isn’t your first choice. Method 2 The alternative method is to create a configuration file that is unique to the currently logged in user. First you need to edit this text file : sudo nano ~/.config/lxsession/LXDE/autostart As in Method 1 this file represents a list of commands to be executed when the GUI loads. It is usually blank when you first edit it so just add the applications you need to auto-load: @lxterminal @leafpad To save and exit the nano editor press CTRL-X, Y and then ENTER. Test Once your configuration file has been updated you are ready to test. startx The LXDE desktop should load and your chosen applications should launch. Both Methods At The Same Time? Since v0.4.9 If both files are present, lxsession only executes the local file. This means you can no longer use both methods at the same time. Method 2 will take priority over Method 1. Auto-run Minecraft Assuming you have already installed Minecraft on your Pi you can auto-run it as well. When I am in a Python-Minecraft mood I launch Minecraft and a terminal window ready for executing scripts using the following lines : @~/mcpi/minecraft-pi @lxterminal This assume the Minecraft executable is located in ~/mcpi/ (same as /home/pi/mcpi/). Auto-run Python Scripts You can auto-launch your own Python scripts by adding the line : @/usr/bin/python /home/pi/example.py This works best with Method 2 as in this example the Python script is stored in the home directory of the default Pi user. If another user is logged in they wouldn’t have access to this directory so LXDE may not be able to autoload it. Whichever method you used just type startx from the command line and your chosen applications should load automatically. LXDE Desktop Note 1 : The order that you place the application commands doesn’t always mean they will load in that order as different applications will take different amounts of time to load completely. I would tend to put the larger applications first so they have as much time as possible to fire up. i.e. Midori before LXTerminal. Note 2 : Make sure your commands come before the @xscreensaver line. Share. Twitter Facebook Google+ Pinterest LinkedIn Tumblr Email Previous ArticleHow To Use Gnuplot To Graph Data On The Raspberry Pi Next Article How To Capture Minecraft Screenshots On The Raspberry Pi Related Posts SD Card Benchmarking on The Raspberry Pi April 11, 2016 1 Write SD Card Images Using Etcher On Windows, Linux &amp; Mac Change Skin in Minecraft Pi Edition March 24, 2016 2 How to Change Your Character Skin In Minecraft Pi Edition 7 Segment Display and the Raspberry Pi March 10, 2016 5 7-segment Display Modules and the Raspberry Pi Raspberry Pi 3 February 29, 2016 0 Raspberry Pi 3 Model B Review &amp; Setup Raspberry Pi Spy WordPress Banner - Code February 27, 2016 0 How to List the Pre-installed Packages in Raspbian systemd Screenshot October 12, 2015 15 How To Autorun A Python Script On Boot Using systemd rasp-config boot options September 30, 2015 0 Raspbian Configuration Utility and New Boot Options Hall Effect Sensor and Magnet September 28, 2015 2 How To Use A Hall Effect Sensor With The Raspberry Pi Basic Temperature Logger June 20, 2015 33 Basic Temperature Logging To The Internet With Raspberry Pi 29 Comments Paul Adomshick on May 4, 2014 12:20 am Will the python script open in a terminal window or run as a process in the background? I’d like to be able to get a python script that outputs text (generated from sensor outputs) to automatically run in a terminal window. Is there an easy way to accomplish that? Reply Matt on May 4, 2014 10:16 am It runs in the background … but you can launch LXTerminal instead and pass it a command line parameter to run a Python script. Haven’t tested it but you could try something like : @lxterminal -e ‘/usr/bin/python /home/pi/myscript.py’ -t ‘MyTitle’ Reply Paul Adomshick on May 6, 2014 4:13 am Much appreciated. I’ll try that. Reply AJ on December 2, 2015 3:35 am IMPORTANT: this line has to be added before the @xscreensaver line. Finally worked for me after reading about that here: https://www.raspberrypi.org/forums/viewtopic.php?f=91&amp;t=65607 Reply Matt on December 3, 2015 7:23 pm Thanks, I’ve added a note at the bottom of the post. Reply Don Sorensen on May 4, 2014 8:16 pm Looks like a “code” tag got misplaces in your first snippet above. I’m pretty sure the lines “To save and exit the nano editor press CTRL-X, Y and then ENTER. You can use your preferred text editor if nano isn’t your first choice.” don’t belong in the autostart file. I’m sorry if it sounds picky, but I’ve been fighting the way Wordpad puts tags into posts for about a week now. Thought you’d like to know. Great site you’ve got here. Thank you for going through the trouble. Reply Matt on May 4, 2014 8:45 pm Thanks Don. I spotted that just before I published it … then obviously forgot to actually correct it! Thanks for pointing it out. It’s sorted now. Reply Jeremy on January 11, 2015 7:23 pm I couldn’t figure out why I couldn’t get this to work. In the latest raspbian image I downloaded (around Dec 30, 2014) they changed the path for the autostart file that is used. This in method #1: sudo nano /etc/xdg/lxsession/LXDE/autostart is now this: sudo nano /etc/xdg/lxsession/LXDE-pi/autostart I hope that saves someone some time. Reply goodsayan on January 12, 2015 11:15 am folder LXDE has changed, Thanks Jeremy! Reply Claudio on January 13, 2015 11:18 pm THANK YOU! This saved me really time! Reply Daniel on January 16, 2015 3:29 am As Jeremy was saying, with the changes to the new image for Raspbian, it also effect the per user basis. I tried to figure it out for hours why my apps were not auto starter per user and you have to change the folder ~/.config/lxsession/LXDE to ~/.config/lxsession/LXDE-pi for it to work properly. Hopes this helps. Reply Ben on January 17, 2015 2:28 pm Thanks Jeremy – I am trying to use the user autostart (to start pipresents on startup) and it didn’t work until i created: ~/.config/lxsession/LXDE-pi/autostart Reading the above I guess this is new – I downloaded and installed NOOBS today, 17th Jan 2015. Hope this helps. Reply Carlos on February 18, 2015 9:39 pm Thanks all, I was having issues with this as well… I had set the pi to autostart into GUI (thru raspi-config) and all the instructions never made this work!!! However, figured out that if I disabled the autostart into GUI (via raspi-config) and run the command startx, it started working… any ideas how to make it boot the pi into GUI and have auto start of an application. My second issue is that I can now see my python script trying to execute (by running startx manually), but can’t start since input() has an EOF error… so I basically want to boot to GUI and ready for keyboard input. Something relatively easy, but has been taking me several days to figure because of all the oddities of Raspian/Pi Thanks, -Carlos Reply David van Wyk on February 24, 2015 3:07 pm Hi Guys, I am busy with an application that utilises the GPIO and it needs root priviliges, but I want it to auto start on boot. Do I need something extra, as on the command line ‘sudo’? I usually have to open the current folder as root and then I can start my application by double clicking. The above code doesn’t start my application up. Thanks. Reply Howard on April 14, 2015 10:09 am I used the following command to change the file ownership to pi and switch back to root afterward. chown pi:pi [filename] Reply David van Wyk on June 7, 2015 10:15 am Howard, I am not quite with you? I have since also upgraded to the Rpi 2B, but still having trouble starting my app. Now on the Rpi 2B I cant switch a window to root user, the option was removed. So my app doesn’t even start on normal double click anymore. It only runs if I remove gpio references from the code. How do I run a GUI with GPIO (root privileges) on Rpi 2B and more especially how can I autostart the app. I changed the file ownership to root, still doesnt work. Reply Henry Hansel on February 25, 2015 12:05 pm I too have been battling this on a RPI2 running Rasbian. My app uses GPIO and tkinter so I need X running. My intention is to auto boot to desktop and then for my application to launch covering the OS like a virtual machine. Strange behavior is that after locating the path .config/lxsession/LXDE-pi/ and creating my autostart file my python program will auto launch about 50% of the time on boot. I have not been able to determine why it will not the other times? I hope that someone can finally put a nail in this, I am dead in the water with this project until I can get 100% autostart to work. Thanks for all the input. Henry Reply Henry Hansel on March 1, 2015 12:01 pm Finally, I think that I have got autostart to work 100% of the time. I had to modify my autostart file in /etc/xdg/lxsession/LXDE-pi/autostart to read: @/usr/bin/python3.2/myscript.py myscript.py resides in home/pi I added python3.2 for it to work, apparently it was trying to run my python3 script with python2 even though the shebang statement at the top of the script calls for python3. I am a linux noob so any insight on why this works would be appreciated. Henry Reply Ashley Burt on March 17, 2015 8:03 pm I just put the commands I needed to autorun into the users .profile in their home directory. Worked like a champ. Reply Rebecca on April 11, 2015 4:51 pm Is it possible to have multiple python scripts set to run at the start up of the GUI? I have tried just adding in another @/usr/bin/python /home/pi/example.py line to the autostart file but it doesn’t run the second python script Reply Frank on October 6, 2015 2:35 pm I was having issues trying to get the R Pi2 to launch a website on boot I ended up making the change to this config file to make it work sudo nano /home/pi/.config/lxsession/LXDE-pi/autostart It worked like a charm. I had a hard time finding this solution and i hope it helps others. Reply Sal on October 26, 2015 5:18 am Frank thank you spent hours and hours looking for this solution, editing sudo nano /home/pi/.config/lxsession/LXDE-pi/autostart Worked perfect! THANKS!!!! Reply Mark Baker on October 28, 2015 3:15 pm I’ve modified /home/pi/.config/lxsession/LXDE-pi/autostart adding @xfreerdp server1 to automatically start a RDP session to a terminal server. It works perfectly if I manually login as pi but as soon as I reconfigure it to automatically login as pi into the desktop it stops working. If I add @leafpad to the autostart file it works but not the @xfreerdp Any suggestions? Reply Peter Triandafillou on January 24, 2016 10:42 pm This thread has been very helpful – thanks to all the contributors. I have a question: I added a line to start an lxterminal to run my program, and it works. However, my program accesses a Sense Hat, and it needs to start with sudo to run properly. Is there a way to specify the user password in the autostart line so that it doesn’t need to be entered? I’m developing an application that would be better off without a keyboard. Thanks! Reply Alex Cahill on February 11, 2016 10:59 pm Annonyingly I took me 2 days to figure out that method 1 no longer works. https://wiki.archlinux.org/index.php/LXDE#Autostart “Note: If both files are present, lxsession only executes the local file as of v0.4.9” Reply Matt on February 15, 2016 8:27 pm Method should work as long as there are no local files defined. Thanks for the tip, I’ve modified the article to mention the local file take priority over the global file. Reply Peter on February 23, 2016 12:54 pm I have a small problem. I want to autostart two programs and of cause it works with mentioned method no.1. The problem is, I want to start them in two different virtuell desktops, unfortunately both programs are starting only on one desktop and I really do not find a way to start on the defined desktops. Any idea? Reply jordan on March 12, 2016 11:09 pm THANK YOU I have been trying to find a way to get this to work, and i’ve seen other tutorials like this, but only using method 1 and I could never get it to work. Method 2 worked perfectly for me. Thank you again! Reply ALI on April 10, 2016 6:39 pm Can I run a shell file placed on Desktop on reboot?? How to do that? Reply Leave A Reply Cancel Reply Recent Popular News Raspberry Pi Zero with camera connector May 16, 2016 0 Raspberry Pi Zero now has a camera connector Top 5 Raspberry Pi 3 Project Ideas May 15, 2016 0 Top 5 Raspberry Pi 3 Project Ideas BBC Microbit and Raspberry Pi May 1, 2016 1 Using the BBC Microbit with the Raspberry Pi Raspberry Pi KANO Computer Kit April 28, 2016 0 Kano Computer Kit First Impressions Pi Camera v2 April 25, 2016 0 8-megapixel Raspberry Pi Camera Module v2 16x2_lcd_module_1 July 27, 2012 86 16×2 LCD Module Control Using Python MCP3008 Example Circuit #2 October 20, 2013 79 Analogue Sensors On The Raspberry Pi Using An MCP3008 Raspberry Pi Sucks September 19, 2014 63 Top 5 Reasons The Raspberry Pi Sucks DS18B20 Command Line Setup March 15, 2013 47 Raspberry Pi 1- Wire Digital Thermometer Sensor (DS18B20) Raspberry Pi Model B+ July 11, 2012 45 Stepper Motor Control In Python Raspberry Pi 3 February 28, 2016 2 Introducing The Raspberry Pi 3 Model B Raspberry Pi Model B+ November 30, 2015 0 Raspberry Pi Family Photo by RasPi.TV Raspberry Pi Zero November 26, 2015 6 Introducing the Raspberry Pi Zero Pi Projects Book November 23, 2015 0 The Official Raspberry Pi Projects Book Raspberry Pi Display September 8, 2015 5 Official Raspberry Pi Touchscreen Display is here Search for: Categories 3D Printing Add-ons BBC Micro:bit BerryClip Books Camera Module Cases Events General Hardware I2C Infographics Minecraft Model A+ Model B+ News Pi 2 Model B Pi Models Pi Zero Power Programming Python Raspbian Robotics Sensors Software SPI Tutorials &amp; Help Tags 3D Printing 44780 audio avconv battery berryclip Birthday bluetooth cambridge camera CamJam cpu DigiMakers display GPIO i2c Kickstarter lcd LED Li-on Linux Minecraft Model A Model B mp4 pcb photography photos Pi-Lite portable power python Raspberry Pi Bootcamp raspbian ravpower revision sd card security sensor soldering SPI temperature ultrasonic usb video Raspberry PI Related Averageman Vs Pi MattsBits – Pi Resources Official RaspBerry Pi Site Raspberry Pi Pod RasPi.tv Raspihub.com RaspTut Rastrack.co.uk RPi School Tech Resources How2Code Technology Spy Archives Archives About Unofficial site devoted to the Raspberry Pi credit card sized computer offering tutorials, guides, resources,scripts and downloads. We hope to help everyone get the most out of their Pi by providing clear, simple articles on configuring, programming and operating it. Popular Posts 16x2_lcd_module_1 July 27, 2012 86 16×2 LCD Module Control Using Python MCP3008 Example Circuit #2 October 20, 2013 79 Analogue Sensors On The Raspberry Pi Using An MCP3008 Raspberry Pi Sucks September 19, 2014 63 Top 5 Reasons The Raspberry Pi Sucks Recent Posts Raspberry Pi Zero with camera connector May 16, 2016 0 Raspberry Pi Zero now has a camera connector Top 5 Raspberry Pi 3 Project Ideas May 15, 2016 0 Top 5 Raspberry Pi 3 Project Ideas BBC Microbit and Raspberry Pi May 1, 2016 1 Using the BBC Microbit with the Raspberry Pi Entries RSS | Comments RSS This site is not associated with the official Raspberrypi.org site or the Raspberry Pi Foundation. Raspberry Pi is a trademark of the Raspberry Pi Foundation. Copyright © 2015 - All Rights Reserved - Matt Hawkins Advertisement More information &amp; opt-out options » What is interest based advertising » AdRoll Privacy Policy » Privacy Controls by Ghostery, Inc. [ X ] AdRoll works with brands to provide ads that are relevant and useful based on anonymous browsing information, and we do not collect or store your personal information. We also believe in providing transparency &amp; control over the type of ads that we show you. Please access the below links for more information. Ads byGoogle Ad covers the page Stop seeing this ad Why this ad? It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620171314#index"
                   NS1:content=" Home Packages Forums Wiki Bugs AUR Download USB 3G Modem From ArchWiki Jump to: navigation, search Related articles wvdial Direct Modem Connection 3G and GPRS modems with pppd Category:Modems Tango-edit-clear.pngThis article or section needs language, wiki syntax or style improvements.Tango-edit-clear.png Reason: does not conform to Help:Style (Discuss in Talk:USB 3G Modem#) A number of mobile telephone networks around the world offer mobile internet connections over UMTS (or EDGE or GSM) using a portable USB modem device. Contents [hide] 1 Remove the PIN 2 Device identification 3 Mode switching 4 Connection 4.1 Network Manager 4.2 wvdial 4.3 netctl 4.4 sakis3g 4.5 Low connection speed 4.5.1 QoS parameter 4.5.2 Baud parameter 4.6 Monitor used bandwith 5 Reading SMS 5.1 command line script 6 Fix image quality Remove the PIN First of all use your SIM card in a normal phone and disable the PIN request if present. If the SIM card asks the PIN wvdial will not work. Failing that, you can also use mmcli to unlock the SIM card: # mmcli -i SIMNUMBER --pin=XXXX where SIMNUMBER can be found using mmcli -L and mmcli -m X. Device identification Examine the output of $ lsusb which will show the vendor and product IDs of the device. Note that some devices will show two different product IDs at different times as explained below. Mode switching Often these devices will have two modes (1) USB flash memory storage (2) USB Modem. The first mode, sometimes known as ZeroCD, is often used to deliver an internet communications program for another operating system and is generally of no interest to Linux users. Additionally some have a slot into which the user can insert an additional flash memory card. A useful utility for switching these devices into modem mode is usb_modeswitch, available in the official repositories. Udev rules are supplied with the package in /lib/udev/rules.d/40-usb_modeswitch.rules. This contains entries for many devices, which it will switch to modem mode upon insertion. When a device is switched, its product ID may change to a different value. The vendor ID will remain unchanged. This can be seen in the output of lsusb. Some devices are supported in the USB serial kernel module called &quot;option&quot; (after the Option devices, but not limited to just those) and may be used without usb_modeswitch. Udev itself included a utility called /lib/udev/modem-modeswitch. In udev 157 this was renamed to /lib/udev/mobile-action-modeswitch and morphed into a tool that only switches Mobile Action cables. For other devices use usb_modeswitch. Note: You can find an alternative way to do this base on eject command here. Connection Network Manager After installing usbutils and usb_modeswitch, you just need to install modemmanager to make the modem work with NetworkManager. Make sure both NetworkManager and ModemManager services are running, see systemd#Using units for details. Make sure mobile-broadband-provider-info and nm-connection-editor are installed. A system restart might be necessary for ModemManager to detect the USB modem. After you restart the NetworkManager-applet and plug the modem in again NetworkManager should recognize the modem in the menu without further configuration. Setting up the modem in NetworkManager is self-explanatory, you should only need the login-information provided by your network provider. Whilst running ModemManager gammu will not work. SMS and Ussd codes can be still used with modem-manager-gui. wvdial See main article: wvdial netctl Netctl can be used to establish a connection using a USB modem. An example configuration file provided by netctl is located at /etc/netctl/examples/mobile_ppp. See the netctl article for more information. sakis3g There may be the chance that the modem stick is supported by sakis3g which is an all in one command line script and automates all the steps above. Install sakis3gAUR from the AUR. Low connection speed Someone claims that the connection speed under Linux is lower than Windows: [1] A short summary for possible solutions which are not fully verified. In most of conditions, the low speed is caused by bad receiver signals and too many people in cell. But you still could use the following method to try to improve the connection speed. QoS parameter The AT+CGEQMIN and AT+CGEQREQ commands can be used to set the QoS. It is also possible to decrease and limit the connect speed. Add the following Init command in /etc/wvdial.conf: Init6 = AT+CGEQMIN=1,4,64,640,64,640 Init7 = AT+CGEQREQ=1,4,64,640,64,640 Baud parameter Baud parameter in wvdial.conf could be used to increase the connection speed. Baud = 460800 But the official Huawei E261 windows application set the Baud=9600 under Windows Vista. More verifications are needed to double check this point. Monitor used bandwith Frequently a 3G connection obtained via a mobile phone operator comes with restricted bandwidth, so that you are only allowed to use a certain bandwidth per time (e.g. 1GB per month). While it is quite straight-forward to know which type of network applications are pretty bandwidth extensive (e.g. video streaming, gaming, torrent, etc.), it may be difficult to keep an overview about overall consumed bandwidth. A number of tools are available to help with that. Two console tools are vnstat, which allows to keep track of bandwith over time, and iftop to monitor bandwidth of individual sessions. If you are a KDE user, knemo might help. All are available in the official repositories. Reading SMS This was tested on a Huawei EM770W (GTM382E) 3g card integrated into an Acer Aspire AS3810TG laptop. $ pacman -S gnokii $ mkdir -p $XDG_CONFIG_HOME/gnokii Usually the configuration directory is ~/.config/gnokii. $ cp /etc/gnokiirc ~/.config/gnokii/config edit ~/.config/gnokii/config as follows: port = /dev/ttyUSB0 You may have to use a different port depending on your configuration, for example /dev/ttyUSB1 or something else: model = AT connection = serial You need to be part of the uucp group to use /dev/ttyUSB0, for example if your user is called &quot;x&quot;: # gpasswd -a x uucp $ newgrp uucp The newgrp command allows you to take advantage of the new group assignment immediately without having to logout/login. Then launch gnokii: $ xgnokii Click on the &quot;SMS&quot; icon button, a window opens up. Then click: &quot;messages-&gt;activate sms reading&quot;. Your messages will show up in the window. command line script A small command line script using gnokii to read SMS on your SIM card (not phone memory) without having to start a GUI: $ gnokii --getsms SM 0 end 2&gt;&amp;1|grep Text -A1 -B3|grep -v Text What it does: gnokii # invoke gnokii --getsms SM 0 end # read SMS from SM-memory location (=SIM card) starting at 0 and reading all occupied memory locations (&quot;end&quot;) 2&gt;&amp;1 # connect STDERR to STDOUT to make sure the output from the --getsms command can be piped to grep |grep Text # pipe output from gnokii to grep, anchoring at output containing &quot;Text&quot; -A1 -B3 # print one line after the matched pattern and three lines before the matched pattern |grep -v Text # grep result to another grep to exclude the &quot;Text&quot; line (-v for inverting the pattern) Granted this does not work very well if your SMS contains the word &quot;Text&quot;, but you may adapt the script to your liking. Fix image quality If you are getting low quality images while browsing the web over a mobile broadband connection with the hints &quot;shift+r improves the quality of this image&quot; and &quot;shift+a improves the quality of all images on this page&quot;, follow these instructions: Install tinyproxy, available in the official repositories. Edit /etc/tinyproxy/tinyproxy.conf and insert the following two lines: AddHeader &quot;Pragma&quot; &quot;No-Cache&quot; AddHeader &quot;Cache-Control&quot; &quot;No-Cache&quot; Start tinyproxy: systemctl start tinyproxy Configure your browser to use localhost:8888 as a proxy server and you are all done. This is especially useful if you are using, for example, Google Chrome which, unlike Firefox, does not allow you to modify the Pragma and Cache-Control headers. Retrieved from &quot;https://wiki.archlinux.org/index.php?title=USB_3G_Modem&amp;oldid=426038&quot; Category: Modems Hidden category: Pages or sections flagged with Template:Style Navigation menu Views Page Discussion View source History Personal tools Log in Navigation Main page Categories Getting involved Wiki news Random page Search interaction Help Contributing Recent changes Recent talks New pages Statistics Reports Requests Tools What links here Related changes Special pages Printable version Permanent link Page information In other languages 日本語 Русский This page was last modified on 16 March 2016, at 12:46. Content is available under GNU Free Documentation License 1.3 or later unless otherwise noted. Privacy policy About ArchWiki Disclaimers "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620150728#index"
                   NS1:content=" Mark's Blog Marko's getting his blog on ;-) Search Main menu Skip to primary content Skip to secondary content Home About Me! Post navigation ← Previous Next → BeagleBone and USB GSM Stick Posted on 19/11/2012 by Mark More sysadmin than electronics today! I have an O2 USB modem and I was wondering about getting the BeagleBone hooked up to it. It would be cool to have the BeagleBone “phone home” if is was out in the field logging, or whatever. Front side of my USB GSM modem As you can see form the photo of the back-side it’s a Huawei Mobile Broadband E1752C USB modem. The back side of the Huawei Mobile Broadband E1752C USB stick It turns out to be really easy to use this (or any other USB GSM modem) with Ubuntu. It a little “old school” without a GUI to work in, but hay, command line is king after all!.. It brings back memories of using pppd and chat scripts when I used Linux to connect over a copper phone line to the “Internet!”. On the O2 network here in Ireland my /etc/ppp/peers/o2 file looks like this: debug connect &quot;/usr/sbin/chat -v -f /etc/chatscripts/o2&quot; lock local user &quot;o2&quot; password &quot;o2&quot; ttyUSB0 noauth defaultroute noipdefault usepeerdns ipcp-max-failure 5 lcp-echo-failure 5 lcp-echo-interval 30 persist #auth refuse-chap refuse-mschap refuse-mschap-v2 refuse-eap # compression novjccomp nobsdcomp noaccomp nopcomp novj noccp And my chat script looks like this: ECHO ON TIMEOUT 10 ABORT 'BUSY' ABORT 'NO ANSWER' ABORT 'ERROR' ABORT 'NO CARRIER' &quot;&quot; AT OK AT+CPIN=XXXX TIMEOUT 5 ERROR-AT-OK AT+CGDCONT=1,&quot;IP&quot;,&quot;open.internet&quot; OK &quot;ATD*99#&quot; CONNECT &quot;&quot; Nice little trick here for the PIN entry.. You need it the first time the modem boots up, but not for re-connecting the “TIMEOUT 5 ERROR-AT-OK” will allow the PIN code to fail (because it already been entered) and not stop the script. As I want to remote connect to BeagleBone, I’ve got it to send it’s IP address back to base (every time the PPP interface comes up). You will need to set up shared SSH keys between your server and the Bone to get this to work without a password. Then I created the following little script ( /etc/ppp/ip-up.d/001updateIP ): #!/bin/sh # # scp the current IP address back to base... # (MMcK 2012-11-19) # /sbin/ifconfig -a \ | awk '/inet addr/ { print $2 }' \ | awk -F: '{ print $2 }' \ &gt; /tmp/bone.ipaddr /usr/bin/scp -q /tmp/bone.ipaddr &lt;me&gt;@&lt;my server&gt;: Now every time the Bone comes online over the PPP interface I can connect to it by looking up it’s new IP address. This entry was posted in BeagleBone, Sysadmin and tagged BeageBone, GSM modem, ppp, USB by Mark. Bookmark the permalink. ©2016 Mark McKillen "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160617103305#index"
                   NS1:content=" Here is an example session that shows how to POST requests: &gt;&gt;&gt; &gt;&gt;&gt; import httplib, urllib &gt;&gt;&gt; params = urllib.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'}) &gt;&gt;&gt; headers = {&quot;Content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, ... &quot;Accept&quot;: &quot;text/plain&quot;} &gt;&gt;&gt; conn = httplib.HTTPConnection(&quot;bugs.python.org&quot;) &gt;&gt;&gt; conn.request(&quot;POST&quot;, &quot;&quot;, params, headers) &gt;&gt;&gt; response = conn.getresponse() &gt;&gt;&gt; print response.status, response.reason 302 Found &gt;&gt;&gt; data = response.read() &gt;&gt;&gt; data 'Redirecting to &lt;a href=&quot;http://bugs.python.org/issue12524&quot;&gt;http://bugs.python.org/issue12524&lt;/a&gt;' "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616164519#index"
                   NS1:content=" current community chat Stack Overflow Meta Stack Overflow Stack Overflow Careers your communities Sign up or log in to customize your list. more stack exchange communities company blog Stack Exchange Inbox Reputation and Badges sign up log in tour help Tour Start here for a quick overview of the site Help Center Detailed answers to any questions you might have Meta Discuss the workings and policies of this site About Us Learn more about Stack Overflow the company Business Learn more about hiring developers or posting ads with us Stack Overflow Questions Jobs Tags Users Badges Ask Question _ Stack Overflow is a community of 4.7 million programmers, just like you, helping each other. Join them; it only takes a minute: Sign up Join the Stack Overflow community to: Ask programming questions Answer and help your peers Get recognized for your expertise Python URLLib / URLLib2 POST No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 26 down vote favorite 11 I'm trying to create a super-simplistic Virtual In / Out Board using wx/Python. I've got the following code in place for one of my requests to the server where I'll be storing the data: data = urllib.urlencode({'q': 'Status'}) u = urllib2.urlopen('http://myserver/inout-tracker', data) for line in u.readlines(): print line Nothing special going on there. The problem I'm having is that, based on how I read the docs, this should perform a Post Request because I've provided the data parameter and that's not happening. I have this code in the index for that url: if (!isset($_POST['q'])) { die ('No action specified'); } echo $_POST['q']; And every time I run my Python App I get the 'No action specified' text printed to my console. I'm going to try to implement it using the Request Objects as I've seen a few demos that include those, but I'm wondering if anyone can help me explain why I don't get a Post Request with this code. Thanks! -- EDITED -- This code does work and Posts to my web page properly: data = urllib.urlencode({'q': 'Status'}) h = httplib.HTTPConnection('myserver:8080') headers = {&quot;Content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept&quot;: &quot;text/plain&quot;} h.request('POST', '/inout-tracker/index.php', data, headers) r = h.getresponse() print r.read() I am still unsure why the urllib2 library doesn't Post when I provide the data parameter - to me the docs indicate that it should. python post urllib2 urllib share|improve this question edited Jul 13 '10 at 16:03 asked Jul 13 '10 at 15:53 g.d.d.c 25.5k44872 Why aren't you using urllib2? – S.Lott Jul 13 '10 at 15:59 3 I am. urllib2.urlopen. I'm only using urllib to encode the post data. – g.d.d.c Jul 13 '10 at 16:01 add a comment | 1 Answer 1 active oldest votes up vote 37 down vote accepted u = urllib2.urlopen('http://myserver/inout-tracker', data) h.request('POST', '/inout-tracker/index.php', data, headers) Using the path /inout-tracker without a trailing / doesn't fetch index.php. Instead the server will issue a 302 redirect to the version with the trailing /. Doing a 302 will typically cause clients to convert a POST to a GET request. share|improve this answer answered Jul 13 '10 at 16:29 bobince 353k72462677 That was what I needed. Thank you! – g.d.d.c Jul 13 '10 at 16:44 6 This answer was perfect! The Python 2.6 urllib2 module does switch from POST to GET on the redirect. This happens not only with a trailing forward slash, but can also happen for cases when http is redirected to https. – Hazok Jan 2 '14 at 1:14 add a comment | Your Answer draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Email and Password Post as a guest Name Email discard By posting your answer, you agree to the privacy policy and terms of service. Not the answer you're looking for? Browse other questions tagged python post urllib2 urllib or ask your own question. asked 5 years ago viewed 70120 times active 5 years ago How do you simplify this square root of sum? No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. Work from anywhere Experienced Frontend Engineer CitrusbyteNo office location RemoteRelocation javascriptreactjs Senior eCommerce Software Engineer Focustron PTENo office location $1,000 - $2,000Remote mwsamazon-mws Linked 1 How can i post using Python urllib in html input type submit 22 Making a POST call instead of GET using urllib2 12 urllib2 - post request 0 Data extraction by Python from a dynamic javascript page 0 How post data over https with urllib2? 0 How to send XML through HTTP Request in Python? 1 Submiting form with python 0 Python mongolab REST api 0 python SOAP client that uses POST method 0 error HTTP Error 405: Method Not Allowed while using HTTP Post method see more linked questions… Related 52 Python: urllib/urllib2/httplib confusion 2892 PUT vs POST in REST 302 What are the differences between the urllib, urllib2, and requests module? 4 Trying to post multipart form data in python, won't post 2 POST request via urllib/urllib2? 3 How are HTTP POST responses contructed? How can I recreate them with Python and urllib2 to simulate filling out a form? 2 Issues posting a form using python 1 urllib+cookielib packet manipulation in python 3 Make an http POST request to upload a file using python urllib/urllib2 -3 Python urllib2 or requests post method Hot Network Questions Extension update server &quot;priority&quot; attribute Find the missing room Where can I change my clothes at the airport? Which spaces have enough curves Neighbor's child is trying to spend all her time with us The Calculator with Misbehaving `+` and `*` Can this algorithm still be considered a Binary Search algorithm? Would a 100% simulated war be a way to solve national conflict? How many constructors does the class have? SQL Query for cumulative sum Why is the Sun called an &quot;average star&quot;? What does &quot;they are looking for nurses to go out to Saudi Arabia.“ mean? How do you simplify this square root of sum? Why doesn't \write work when nothing is typeset in document? Why do dialogs have grey backgrounds? Why does Zaphod Beeblebrox call Ford Prefect &quot;Ford&quot; when they meet on the Heart of Gold? Golf the repeated totient function Square root confusion: Why am I getting an answer if it doesn't work? How to make some labels BOLD using Expression Builder QGIS Who is the killer? How do I quickly build and test the kernel if I want to modify a system call Does Aragorn wear pants? Does associativity imply commutativity? Why do I sometimes experience a delay despite a very low ping? more hot questions question feed lang-py about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix &amp; Linux Ask Different (Apple) WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce ExpressionEngine® Answers more (13) Photography Science Fiction &amp; Fantasy Graphic Design Movies &amp; TV Seasoned Advice (cooking) Home Improvement Personal Finance &amp; Money Academia more (9) English Language &amp; Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow Chemistry Biology more (5) Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required rev 2016.6.16.3679 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160726102516#index"
                   NS1:content=" Apr 5 ARDUINO UNO I/O PORT PROGRAMMING ARDUINO UNO I/O PORT PROGRAMMING Hello readers, today I will discuss with you about the three important registers that are associated with Arduino Uno (ATMEGA 328). They are PORT register, DDR (Data Direction register) and PIN register. Arduino Uno board has 3 ports namely PORTB, PORTC and PORTD. PORTB occupies pin number (8 to 13) PORTC occupies analog pins (A0 to A5) PORTD occupies digital pins (0 to 7) DDR register is used to set the direction of the PORT. Any port pin can be configured as input pin or an output pin. To understand how we can set the direction of a particular port pins let’s see some of the examples- If we write DDRB = B00111111; then PORTB pins (PB0 to PB5) are configured as output port pins. DDRB = B00000001; then PB0 is configured as output port pins and PB1 to PB5 pins are configured as input pins. So it’s quite clear that if it is required to set a port pin as i/p pin then write 0 to the corresponding port pin position in DDR register and for configuring a port pin as o/p pin then write 1 to the corresponding port pin position in DDR register. PORT register is used for assigning the value on to a particular port. For example- PORTB = B00111111; then all pins of PORTB are set to HIGH level. PORTB = B00111100; then PB0 and PB1 are reset to LOW level and PB2 to PB5 are set to HIGH level. PIN register The status of the i/p port pins can be read from the PIN register. This register can only be read and each port has its own corresponding PIN register, PORTA has PINA, PORTB has PINB and PORTC has PINC register. Now after understanding the role of different registers associated with i/o functionality of ports, let’s develop some examples to get used to the usage of these registers. Consider that PORTB has six LED’s connected to it as shown in figure below- Circuit Diagram- Figure 1 Circuit showing 6 LEDs connected to PORTB Now it is required to blink these six LEDs after every 1 second. To do this task first in the setup() function the directions of PORTB pins has to be configured as i/p pins and then in the loop() function PORTB can be assigned values. The complete code is given below- Code for blinking six led’s connected on PORTB every 1 second- void setup() { DDRB = B00111111; // Initialize PORTB data direction register PB0 to PB5 configured as o/p pins } void loop() { PORTB = B00111111; // assign value to PORTB making all pins high delay(1000); // delay of 1 sec PORTB = B00000000; // assign value to PORTB making all pins low delay(1000); // delay of 1 sec } Similarly readers can try other simple programs like led flashing pattern from right to left or from left to right using shift left (&lt;&lt;) and shift right operator (&gt;&gt;). One simple loop() body for blinking the leds from left to right can be- void loop() { int m; PORTB = B00000001; // make PB0 high delay(1000); // 1 sec delay for(m=0;m&lt;5;m++) { PORTB = PORTB&lt;&lt;1; // shift left delay(1000); // 1 sec delay } } Now let’s analyze some of the examples in which PIN register is used to read the status of a port. Assume that an active low switch is connected to pin 13 and a led is connected to pin 12 of arduino. The default state of the pin 13 is high and the default state of pin 12 is low. It is required that when switch is pressed the LED should glow and when it is released then the led should remain in the off state. The circuit diagram for demonstrating this problem is shown below- Figure 2 Circuit showing a button connected on pin 13 and an led connected on pin 12 The following arduino code can be used to read the status of a button- byte temp; // define a temporary variable to hold the status of port pins void setup() { DDRB = B00000010; // configure PB0 as i/p and PB1 as o/p pins } void loop() { temp = PINB &amp; B00000001; // check the status of port pins using simple and operation if (temp == B00000001) // check the status of temporary variable temp which stores the status of //PORTB { PORTB = B00000000; // assign this value to PORTB } // if switch is pressed then else block is executed else { PORTB = B00000010; } } So here a temporary variable temp is used to check the status of i/p and temp variable is assigned the value as- temp = PINB &amp; B00000001; If switch is not pressed then temp will have the value of B00000001 as PB0 i/p pin is high. When switch is pressed then i/p pin PB0 becomes low and so “and” operation will make temp value as B00000000. Note- Assigning a port pin value using digitalWrite() function is an easier method instead of using PORTB value assignment but if you need to set more than one pin to logic high then you need to write individual statements of digitalWrite() for individual pins and this means that all pins will not be raised to logic high at the same time though that delay is very small but can create certain performance issues when a port pin is driving a heavy load with the help of interfacing circuits. Assigning values to a complete port using port value assignment strategy can remove this delay and all the pins can be raised to logic high at the same time. THNAKS FOR READING……. UMESH DUTTA Posted 5th April 2015 by Umesh Dutta 0 Add a comment Add comment No more comments Electronics &amp; Communication Engineering Classic Classic Flipcard Magazine Mosaic Sidebar Snapshot Timeslide Jun 21 TOGGLING LED in ATMega168PB Xplained Mini Evaluation Kit TOGGLING LED in ATMega168PB Xplained Mini Evaluation Kit Hello readers today I will introduce you with one of the latest low cost Atmel Microcontroller based development board. The name of the development board is ATMEL ATMEGA168PB XPLAINED MINI. I got this board few days back and implemented few of the applications that I used to develop on other platforms using different microcontroller. ATMEL has done great work in bringing a new microcontroller based development board that is Arduino compatible and cost less than 10$, isn’t it great. The development board is based on microcontroller ATMega168PB which can be called as the heart of the entire development board but there is one more thing which makes it even more special and that is the presence of In Circuit Debugger which is a requirement of today’s Embedded designers so that the task of debugging can be performed in real time on the actual h/w. A microcontroller based development board costing less than 10$ and with the ICD (In Circuit Debugger) is a very good choice for developing microcontroller based applications. Fig.1 below shows pictorial view of the ATMega168PB Xplained Mini Evaluation Kit from ATMEL:- Fig.1 ATMega168PB Xplained Mini Evaluation Kit The top view showing different pins on board is shown below in Fig.2- Fig.2 Top view of the evaluation kit showing different pins The following breakout I/O port pins are visible onboard:- PORTD pins PD0 to PD7 (8 pins) PORTC pins PC0 to PC5 (6 pins) PORTB pins PB0 to PB5 (6 pins) However microcontroller ATMEGA168PB has PORTC pins PC0 to PC6 (pin number 23 to 29), PORTD pins PD0 to PD7 (pin number 30, 31, 32, 1, 2, 9, 10, 11) PORTB pins PB0 to PB7 (pin number 12 to 17 and pin number 7 and 8) and PORTE pins PE0 to PE3 (pin number 3, 6, 19, 22). So it’s clear that every pin of the microcontroller is not seen on the board and if some application demands the use of these left out pins then some arrangement must be made in order to bring these pin out connections from the microcontroller. Apart from the I/O port pins there are some other pins that are available like AREF for setting the reference voltage for the A/D conversion and dedicated ISP connection pins are also available in order to program the microcontroller using external ISP programmer. Breakout pins for VCC and GND connections are also available for connections with the external peripheral devices. This is very useful because if the board has enough number of GND and VCC pins then it becomes easy to interface number of peripherals taking the supply voltage from the common VCC and having common GND. If there is not enough number of pins available for GND and VCC then the h/w designer either combines different supply voltage wires together or then route it to the common VCC pin or they make a separate breakout board for connections of VCC and GND pins. It’s good that the board has enough number of VCC and GND breakout pins on board. It is a pint to note that some of the port pins have some special functionality besides functioning as I/O pins. The special features include ADC channels, SPI pins, I2C pins etc. Readers can refer to the detailed pin diagram shown in Fig.3 below for the same:- Fig.3 ATMega168PB Microcontroller ATMega168PB microcontroller has 16KB of flash memory, 512 bytes of EEPROM, 1KB RAM. The total pin count is 32. The detailed features are given below for the reference of the readers:- The description of the features is extracted from the data sheet of the ATMega168PB microcontroller. After understanding the features and pin diagram of the ATMega168PB microcontrollers, let’s develop a code for blinking the led connected on board on pin number PB5. For developing the hex file I have used Atmel Studio software, again a great job from Atmel. The software can be used as an IDE (Integrated Development Environment) for developing applications on all the AVR architecture based microcontrollers and also for developing applications for the ARM based MCU’s from ATMEL. I will surely post a separate tutorial for the instructions on using the Atmel studio software for developing an application. The code given below is tested on the kit and it works fine in which led connected to port pin PB5 blinks after every 1 second. The comments are also given in the code for better understanding of the readers. Code- #include &lt;avr/io.h&gt; // header file #define F_CPU 8000000 // define the clock frequency as 8MHZ #include &lt;util/delay.h&gt; // header file so as to use _delay_ms() function in the code int main(void) // main function starts from here { DDRB = (1&lt;&lt;5); // configure PB5 as o/p pin PORTB = (1&lt;&lt;5); // enable the pull up connected on PB5 while(1) { PORTB ^= (1&lt;&lt;5); // toggle PB5 using xor operation _delay_ms(1000); // give delay of 1000ms } } Brief Explanation of the code- First include the relevant header files in the program, I have included avr/io.h and util/delay.h header files. Header files are always included at the top of the program and have specific purpose. util/delay.h contains the definition of the delay function and in order to use the built in delay function (_delay_ms( ) ) this header file must be included in the code. Avr/io.h is included to use the I/O functionality of the microcontroller. It is necessary to define the clock frequency in the code. It’s not a mandatory thing to do but a good practice that must be followed by the s/w designers. Here the definition of clock frequency is given by- #define F_CPU 8000000 // Indicating the clock frequency of 8MHz. In the main function two important registers are utilized ie. DDRB (Data Direction Register of PORTB) and PORTB register DDRB register is used for configuring the PORTB pins as i/p or o/p. If 1 is written to a particular position of DDRB register then that port pin is configured as o/p pin and if 0 is written then that particular port pin is configured as i/p pin. Since the on board LED is connected to PORTB pin 5 and so the instruction for configuring it as o/p can be written as- DDRB = (1&lt;&lt;5) // configures PB5 as o/p pin Weak pull ups are available internally on the port pins and they can be enabled. Here the pull up of PORTB pin PB5 is enabled by writing PORTB = (1&lt;&lt;5) //enables pull up on PB5 In the infinite loop the blinking action is performed by utilizing the XOR operation. The instruction for toggling the port pin PB5 is given as- PORTB ^= (1&lt;&lt;5); // toggle PB5 using xor operation Note: Logic 1 XOR Logic 1 is Logic 0 Logic 1 XOR Logic 0 is Logic 1. The LED remains in a particular state for the time delay defined by _delay_ms( ) function. Here time delay of 1 second is specified using the instruction _delay_ms(1000) indicating 1000 ms delay. So reader’s that’s it with the LED blinking code, now download ATMEL Studio on your System, get ATMega168PB Xplained Mini Evaluation Kit and start experimenting. THANKS FOR READING… UMESH DUTTA Posted 21st June 2015 by Umesh Dutta 2 View comments Hitanshu Dhawan1 September 2015 at 06:30 Really helpful ReplyDelete Unknown9 February 2016 at 21:25 Sir can i get coding for pir sensor motion detection ReplyDelete Add comment Load more Apr 5 ARDUINO UNO I/O PORT PROGRAMMING ARDUINO UNO I/O PORT PROGRAMMING Hello readers, today I will discuss with you about the three important registers that are associated with Arduino Uno (ATMEGA 328). They are PORT register, DDR (Data Direction register) and PIN register. Arduino Uno board has 3 ports namely PORTB, PORTC and PORTD. PORTB occupies pin number (8 to 13) PORTC occupies analog pins (A0 to A5) PORTD occupies digital pins (0 to 7) DDR register is used to set the direction of the PORT. Any port pin can be configured as input pin or an output pin. To understand how we can set the direction of a particular port pins let’s see some of the examples- If we write DDRB = B00111111; then PORTB pins (PB0 to PB5) are configured as output port pins. DDRB = B00000001; then PB0 is configured as output port pins and PB1 to PB5 pins are configured as input pins. So it’s quite clear that if it is required to set a port pin as i/p pin then write 0 to the corresponding port pin position in DDR register and for configuring a port pin as o/p pin then write 1 to the corresponding port pin position in DDR register. PORT register is used for assigning the value on to a particular port. For example- PORTB = B00111111; then all pins of PORTB are set to HIGH level. PORTB = B00111100; then PB0 and PB1 are reset to LOW level and PB2 to PB5 are set to HIGH level. PIN register The status of the i/p port pins can be read from the PIN register. This register can only be read and each port has its own corresponding PIN register, PORTA has PINA, PORTB has PINB and PORTC has PINC register. Now after understanding the role of different registers associated with i/o functionality of ports, let’s develop some examples to get used to the usage of these registers. Consider that PORTB has six LED’s connected to it as shown in figure below- Circuit Diagram- Figure 1 Circuit showing 6 LEDs connected to PORTB Now it is required to blink these six LEDs after every 1 second. To do this task first in the setup() function the directions of PORTB pins has to be configured as i/p pins and then in the loop() function PORTB can be assigned values. The complete code is given below- Code for blinking six led’s connected on PORTB every 1 second- void setup() { DDRB = B00111111; // Initialize PORTB data direction register PB0 to PB5 configured as o/p pins } void loop() { PORTB = B00111111; // assign value to PORTB making all pins high delay(1000); // delay of 1 sec PORTB = B00000000; // assign value to PORTB making all pins low delay(1000); // delay of 1 sec } Similarly readers can try other simple programs like led flashing pattern from right to left or from left to right using shift left (&lt;&lt;) and shift right operator (&gt;&gt;). One simple loop() body for blinking the leds from left to right can be- void loop() { int m; PORTB = B00000001; // make PB0 high delay(1000); // 1 sec delay for(m=0;m&lt;5;m++) { PORTB = PORTB&lt;&lt;1; // shift left delay(1000); // 1 sec delay } } Now let’s analyze some of the examples in which PIN register is used to read the status of a port. Assume that an active low switch is connected to pin 13 and a led is connected to pin 12 of arduino. The default state of the pin 13 is high and the default state of pin 12 is low. It is required that when switch is pressed the LED should glow and when it is released then the led should remain in the off state. The circuit diagram for demonstrating this problem is shown below- Figure 2 Circuit showing a button connected on pin 13 and an led connected on pin 12 The following arduino code can be used to read the status of a button- byte temp; // define a temporary variable to hold the status of port pins void setup() { DDRB = B00000010; // configure PB0 as i/p and PB1 as o/p pins } void loop() { temp = PINB &amp; B00000001; // check the status of port pins using simple and operation if (temp == B00000001) // check the status of temporary variable temp which stores the status of //PORTB { PORTB = B00000000; // assign this value to PORTB } // if switch is pressed then else block is executed else { PORTB = B00000010; } } So here a temporary variable temp is used to check the status of i/p and temp variable is assigned the value as- temp = PINB &amp; B00000001; If switch is not pressed then temp will have the value of B00000001 as PB0 i/p pin is high. When switch is pressed then i/p pin PB0 becomes low and so “and” operation will make temp value as B00000000. Note- Assigning a port pin value using digitalWrite() function is an easier method instead of using PORTB value assignment but if you need to set more than one pin to logic high then you need to write individual statements of digitalWrite() for individual pins and this means that all pins will not be raised to logic high at the same time though that delay is very small but can create certain performance issues when a port pin is driving a heavy load with the help of interfacing circuits. Assigning values to a complete port using port value assignment strategy can remove this delay and all the pins can be raised to logic high at the same time. THNAKS FOR READING……. UMESH DUTTA Posted 5th April 2015 by Umesh Dutta 0 Add a comment Add comment No more comments Feb 7 SMS BASED HOME AUTOMATION SYSTEM SMS BASED HOME AUTOMATION SYSTEM Hello readers, in this article I am discussing with you about the art of designing SMS based home automation system. SMS based control of appliances is a very popular application and the one with very much utility for different domains. Sometimes it becomes difficult to imagine and believe that your mobile phone can act as a remote for the commonly used home appliances and you are always connected to your home through your mobile phone no matter in which part of the world you are. SMS service can be used to control different appliances of our home and for that it is quite obvious that there must be an intelligent system installed at home which will receive the sms, read its content and finally will be able to perform the desired action for switching on/off the appliances. This type of intelligent system can be easily designed using microcontroller, gsm modem and some electro-mechanical relays. Fig. below shows a simple block diagram of the home automation system design using arduino uno development platform. Block Diagram Working GSM module (SIM900) is interfaced with arduino using serial pins (0 and 1). AT commands are sent to gsm modem for configuring it in sms mode and also to route the new incoming message to the serial reception pin of the arduino. The incoming message is decoded by the arduino and is compared with the predefined codes. If the match is found then the corresponding action for that code will be performed by the arduino. The following codes are used- D1N----------device 1 on D1F----------device 1 off D2N----------device 2 on D2F----------device 2 off DAN----------all devices on DAF----------all devices off If the received message contents are D1N then relay 1 will be triggered through BC547 transistor and device 1 is switched on, here transistor BC547 acts as a relay driver and it drives the SPDT relay. Similarly for other codes the corresponding programmed functions are performed. RELAY A relay is an electrically controllable switch widely used in industrial controls, automobiles, and appliances. Fig. below shows a SPDT relay- As shown in the above figure a SPDT relay has 5 terminals out of which two are for the coil, one for common, one for normally open contact and one for normally closed contact. When the coil terminal is energized then due to the magnetic force the common terminal contact is pulled from normally closed position to normally open position. A simple npn transistor can be used to energize the coil terminals of the relay. Fig. below shows the connection diagram of BC547 transistor with the SPDT relay for controlling a lamp. A button is connected at the base terminal with a resistor R2. When the button is pressed then the emitter base junction gets forward biased and transistor switches to “ON” state. In this state the relay coil gets energized and the common terminal of the relay gets shifted to the normally open terminal where a lamp is connected. The common terminal is connected to the voltage at which it is desired to operate the device which is connected on the normally open terminal. So the device will remain in the “ON” state till the button is in the pressed state. When the button is released then the emitter base junction will not get the enough forward bias voltage to turn the transistor to “ON” state and because of this the transistor switches to off state and the relay coil will get de- energized. The magnetic force collapses and the common terminal of the relay is pulled back to the normally closed position and the device switches to “OFF” state. AT COMMANDS to initialize GSM modem AT+CNMI, New Message Indications to TE This command selects the procedure, how receiving of new messages from the network is indicated to the DTE when DTE is active. AT+CNMI=[&lt;mode&gt;[,&lt;mt&gt;[,&lt;bm&gt;[,&lt;ds&gt;[,&lt;bfr&gt;]]]]] Here I have used the command- AT+CNMI=2,2,0,0,0 &lt;mode&gt; value here is 2 which indicates buffer unsolicited result codes in the modem when modem-DTE link is reserved (e.g. in on-line data mode) and flush them to the DTE after reservation. Otherwise forward them directly to the DTE. The rules for storing received sms depends on its coding scheme, preferred memory storage (using command at+cpms) settings and the value of &lt;mt&gt; field that is specified in the at+cnmi command. Here I have used &lt;mt&gt; field value as 2 and this indicates that SMS-DELIVERs (except class 2 messages and messages in the message waiting indication group (store message)) are routed directly to the DTE using unsolicited result code +CMT: &lt;bm&gt; field is et to 0 and this indicates that no CBM (Cell Broadcast Message) indications are routed to the DTE. &lt;ds&gt; field is also set to 0 and this indicates that no SMS-STATUS-REPORTs are routed to the DTE. &lt;bfr&gt; field is set to 0 and this means modem buffer of unsolicited result codes defined within this command is flushed to the DTE when &lt;mode&gt; 1 - 3 is entered (OK response shall be given before flushing the codes) AT+CMGF, SMS Format AT+CMGF=&lt;mode&gt; mode = 0: PDU mode mode = 1: Text mode Here I have used the command AT+CMGF=1 and this configures the modem in the sms mode. Circuit Diagram CODE // code for the home automation using arduino // gsm module sim900 is used with arduino uno atmega328 // written by UMESH DUTTA #include &lt;LiquidCrystal.h&gt; // initialize the library with the numbers of the interface pins LiquidCrystal lcd(12, 11, 7, 6, 5, 4); //temporary variable to store the contents of the received sms char temp[50]; int m; int inByte =0; void setup() { // initialize serial communication with baud rate of 9600 bps Serial.begin(9600); // wait for a while till the serial port is ready delay(100); // configure the gsm modemin sms mode Serial.print(&quot;AT+CMGF=1\r&quot;); delay(500); // route the contents of the received sms on to serial port Serial.print(&quot;AT+CNMI=2,2,0,0,0\r&quot;); // initialize 20X4 the lcd lcd.begin(20, 4); //print inittial message on lcd lcd.print(&quot;**Device Control..**&quot;); //define pins 2 ad 3 as o/p pins pinMode(2,OUTPUT); pinMode(3,OUTPUT); // make default status of pin 2 and 3 low digitalWrite(2,LOW); digitalWrite(3,LOW); delay(500); } // loop function starts here void loop() { // clear the temporary variable temp m=0; for(m=0;m&lt;45;m++) { temp[m]=0; } // wait for the reception of the message // &quot; is a identifier for the start of the message do { while ( !Serial.available() ); } while ( '&quot;' != Serial.read() ); // read the sms which will have date, time, sms body and the senders number for(m=0;m&lt;45;m++) { while ( !Serial.available() ); inByte = Serial.read(); temp[m]=inByte; } // set the cursor position of the lcd lcd.setCursor(0,1); // after testing it is found that the main body of the sms willl start from psition 42 ie. for m=42 // I have used 3 digit code for the sms and so position 42, 43 and 44 will contain the main body of the sms // print the received sms main body on the lcd screen for(m=42;m&lt;45;m++) { lcd.print(temp[m]); } //now write different conditions and required actions /*codes are D1N----------device 1 on D1F----------device 1 off D2N----------device 2 on D2F----------device 2 off DAN----------all devices on DAF----------all devices off */ // device 1 is connected to pin 2 and device 2 is connected to pin 3 of the arduino if(temp[42]=='D' &amp;&amp; temp[43]=='1' &amp;&amp; temp[44]=='N') { digitalWrite(2,HIGH); lcd.setCursor(0,2); lcd.print(&quot;device 1 on&quot;); } if(temp[42]=='D' &amp;&amp; temp[43]=='1' &amp;&amp; temp[44]=='F') { digitalWrite(2,LOW); lcd.setCursor(0,2); lcd.print(&quot;device 1 off&quot;); } if(temp[42]=='D' &amp;&amp; temp[43]=='2' &amp;&amp; temp[44]=='N') { digitalWrite(3,HIGH); lcd.setCursor(0,2); lcd.print(&quot;device 2 on&quot;); } if(temp[42]=='D' &amp;&amp; temp[43]=='2' &amp;&amp; temp[44]=='F') { digitalWrite(3,LOW); lcd.setCursor(0,2); lcd.print(&quot;device 2 off&quot;); } if(temp[42]=='D' &amp;&amp; temp[43]=='A' &amp;&amp; temp[44]=='N') { digitalWrite(2,HIGH); digitalWrite(3,HIGH); lcd.setCursor(0,2); lcd.print(&quot;all devices on&quot;); } if(temp[42]=='D' &amp;&amp; temp[43]=='A' &amp;&amp; temp[44]=='F') { digitalWrite(2,LOW); digitalWrite(3,LOW); lcd.setCursor(0,2); lcd.print(&quot;all devices off&quot;); } delay(1500); // give some delay before the next cycle starts lcd.clear(); // clear the lcd screen lcd.print(&quot;**Device Control..**&quot;);// print this message on lcd } Advancements The project can be extended by including the number sensitive feature in which SMS trigger from a particular mobile phone number will be accepted. For sending the SMS using android mobile phone an application can be designed for easy user interface. The system can also be equipped to give feedback messages indicating the status of all the appliances on demand and also on the successful execution of the issued command. I will discuss the app designing fundamentals for sending the SMS in my upcoming articles. THANKS FOR READING UMESH DUTTA Posted 7th February 2015 by Umesh Dutta 3 View comments Feb 3 GSM MODULE INTERFACING WITH 8051 MICROCONTROLLER GSM MODULE (SIM300) INTERFACING WITH 8051 MICROCONTROLLER Hello readers, I hope you are interested in designing embedded system applications involving the feature of sending the SMS to a particular mobile phone on the occurrence of an event. For example take the case of a simple temperature monitoring system in which it is desired to get a notification SMS on a mobile phone when temperature value exceeds 70 degree celcius or getting a SMS notification on breach of security. All these type of applications can be very easily tackled with the help of a GSM modem. Two most popular GSM modules that are used in embedded applications are SIM300 and SIM900. In this article I will explain the concept of interfacing 8051 microcontroller with SIM300 GSM module. Fig. below shows a SIM300 GSM module- AT commands are used to control GSM modem, AT is the abbreviation for “attention” and microcontroller can interact with the GSM modem by using AT commands. AT command set is very huge and here I will be explaining few AT commands that are quite often used in various embedded system applications. The general syntax of AT command is – AT &lt;command name&gt; &lt;carriage return&gt; Every AT command begins with a prefix AT and it ends with a carriage return. AT commands that are used in SMS and calling applications are given below- • ATà TO INITIATE THE GSM MODEM • ATD98XXXXXXX;à THIS WILL ESTABLISH THE CALL TO MOBILE NUMBER (98XXXXXXXX) • ATAàTO ANSWER THE CALL • ATHàTO DISCONNECT THE CALL • AT+CMGF=1àINITITATE THE GSM MODEM IN TEXT MODE • AT+CMGS=“98XXXXXXXX” &gt;TYPE YOUR MESSAGE HERE CRTL+ZàTO SEND MESSAGE • AT+CMGR=MESSAGE NUMBER IN INBOX MESSAGE AT POSITION MESSAGE NUMBER WILL BE DISPLAYED If the AT command given by microcontroller to GSM modem is executed successfully by the GSM modem then OK return code will be given back to microcontroller otherwise error code will be returned back which will indicate the cause of unsuccessful execution of the given command. Circuit Diagram- Working Details- SIM300 GSM modem is interfaced with 8051 microcontroller via RXD and TXD pins (P3.0 and P3.1 respectively). In order to send sms via GSM modem it is required to configure the GSM modem using AT commands. Readers must have good understanding of the serial communication programming fundamentals and if you are not aware of the same then you are recommended to go through my other post on “Serial Communication in 8051 Microcontroller”. As shown in the circuit diagram there is a push button connected on port pin P1.0 of 8051 microcontroller. Port pin P1.0 is configured as i/p pin and is pulled up using a 10K resistor. Default state of pin P1.0 is logic ‘1’ and when push button is pressed then the state of port pin P1.0 goes to logic ‘0’. It is required to send the SMS with the message body as “hello sir” to a predefined mobile phone number whenever push button is pressed. The code for this is given below- Code- #include&lt;reg51.h&gt; #include&lt;stdio.h&gt; sbit sw=P1^0; // delay subroutine starts here void delay() { int i,j; for(j=0;j&lt;40;j++) for(i=0;i&lt;15000;i++); } // main function starts here void main() { sw=1; // initialize P1^0 as an i/p pin if(sw==0) // if switch is pressed then send the SMS { TMOD=0X20; // Timer 1 in mode2 TH1=0XFD; // TH1 is loaded for 9600bps baud rate generation SCON=0X50; // Serial communication in mode 1 with receive enable TR1=1; // Start Timer TI=1; // Since printf( ) is used so TI flag has to be raised printf(&quot;at&quot;); // initiate the GSM modem printf(&quot;\n&quot;); printf(&quot;\r&quot;); delay(); printf(&quot;at+cmgf=1&quot;); // initiate GSM modem in text mode printf(&quot;\n&quot;); printf(&quot;\r&quot;); delay(); printf(&quot;at+cmgs=\&quot;098XXXXXXXX\&quot;&quot;); // send sms to the specified mobile number printf(&quot;\n&quot;); printf(&quot;\r&quot;); delay(); printf(&quot;Hello Sir&quot;); // body of the SMS delay(); SBUF=0x1A; // ASCII code for ctrl+z while(TI==0); // wait for the transmission to complete TI=0; // clear the transmit interrupt flag delay(); } } The code is tested on Proteus simulation platform and the snap shot of the commands that are sent to the virtual terminal from the 8051 microcontroller is shown below- Caution: During testing on Proteus platform make sure that you set the clock frequency of crystal oscillator as 11.0592 MHz, Otherwise baud rate mismatch will happen and will cause the erroneous interpretation of the instructions sent by 8051 microcontroller. THANKS FOR READING UMESH DUTTA Posted 3rd February 2015 by Umesh Dutta 4 View comments Jan 30 BLUETOOTH CONTROLLED ROBOT USING ANDROID Bluetooth Controlled Robot using Android Hello readers, in this project I will demonstrate the concepts that will help you to build your own Bluetooth controlled robot using your own designed android application. Bluetooth technology is very popular these days and almost all smart phones have this feature. In this work I am designing a robot which will have a Bluetooth module for communication with the smart phone. HC05 is one of the most popular serial Bluetooth module available and it can be directly interfaced with any microcontroller. Here I am using 8051 microcontroller which is interfaced with HC05 bluetooth module and L293D motor driver IC. The block diagram of the project is shown below- HC05 Bluetooth module Specifications- Bluetooth protocol: Bluetooth Specification v2.0+EDR Frequency: 2.4GHz ISM band Power supply: +3.3VDC 50mA Modulation: GFSK (Gaussian Frequency Shift Keying) Emission power: 4dBm, Class 2 Sensitivity: -84dBm at 0.1% BER Speed: Asynchronous: 2.1Mbps (Max) / 160 kbps Synchronous: 1Mbps/1Mbps Security: Authentication and encryption Profiles: Bluetooth serial port Power supply: +3.3VDC 50mA Working temperature: -20 +75 Centigrade Dimension: 26.9mm x 13mm x 2.2 mm The serial o/p of the Bluetooth module will be received by 8051 microcontroller which has been programmed to receive the data serially. The received data from the Bluetooth module is compared with the predefined data by 8051 microcontroller and if the match is found then the required action will be performed. If serially ‘1’ is received then the robot will move forward If serially ‘2’ is received then the robot will move backward If serially ‘3’ is received then the robot will move towards right If serially ‘4’ is received then the robot will move towards left If serially ‘5’ is received then the robot will stop L293D Motor Driver IC It is one of the most widely used dc motor driver IC and is available in 16 pin DIP package. Motor needs high current i/p signal which cannot be provided by microcontroller directly and so in between microcontroller and dc motor a motor driver IC is required for converting a low current control signal into a high current signal which can drive the dc motor. L293D is a dual H bridge IC and it performs the job of current amplification. Two dc motors can be easily driven in any direction using L293D IC. It has two H bridge’s which works independently to control the dc motor and that’s why the name dual H bridge is given to it. It is a known fact that if it is required to change the direction of rotation of dc motor one has to change the direction of flow of current and this can be easily achieved by reversing the polarity of applied voltage. Fig. below shows the H bridge using switches- Fig. H bridge using switches The following situations arise- If switches S1, S4 are closed and S2, S3 are open then the motor will rotate in clock wise direction. If S2, S3 are closed and S1, S4 are open then the motor will rotate in the anti clockwise direction. If S2, S4 are closed and S1, S3 are open or vice versa the it will create a direct path b/w power supply and ground leading to short circuit condition and this must be avoided. If S1, S2 are closed and S3, S4 are open or vice versa then there will be no difference in potential across the two ends of the motor and so it will not rotate. The pin diagram of L293D motor driver IC is shown below- IN1, IN2, IN3, IN4 are connected to microcontroller, motor M1 is connected b/w pin number 3 and 6 and similarly the other motor M2 is connected b/w pin number 11 and 14. EN1 and EN2 are two enable pins for the buffers which are there inside the IC. To enable the buffers EN1 and EN2 are required to be connected to +5V. Vs is motor supply voltage pin and this is required to be connected to the voltage at which motors are required to be operate, if it is required to operate the motors on 12V then this pin must be connected to the +12V power supply. Pin numbers 4, 5, 12, 13 are connected to Ground. Pin number 16 is Vss and is connected to +5V supply. In this work IN1 is connected to P2.0, IN2 is connected to P2.1, IN3 is connected to P2.2 and IN4 is connected to P2.3 of the 8051 microcontroller. Circuit Diagram- Code- The code for the robot contol is given below- #include&lt;reg51.h&gt; // define the o/p ports to be connected to L293D sbit op1=P2^0; sbit op2=P2^1; sbit op3=P2^2; sbit op4=P2^3; // temp is a variable used here for storing the serially received data byte unsigned char temp; //main program begins from here void main() { // initialization commands for serial communication TMOD=0x20; TH1=0XFD; SCON=0X50; TR1=1; // infinite loop starts from this point for serial data reception while(1) { while(RI==0); // wait until some data byte is received serially temp=SBUF; // store the data byte in the temporary variable RI=0; // clear te RI flag for next data byte reception // now put comparative statements using if loop if(temp=='1') // move the robot forward { op1=1; op2=0; op3=1; op4=0; } if(temp=='2') // move the robot backward { op1=0; op2=1; op3=0; op4=1; } if(temp=='3') // move the robot towards right { op1=1; op2=0; op3=0; op4=0; } if(temp=='4') // move the robot towards left { op1=0; op2=0; op3=1; op4=0; } if(temp=='5') // stop the robot { op1=0; op2=0; op3=0; op4=0; } } } Android App for controlling the Robot The App is designed using MIT App Inventor. The screen shot of the MIT app inventor designer window is shown below- In MIT app inventors block window the entire logic is designed. To set up the Bluetooth connection he following blocks are required to be connected- To send ‘1’ on button 1 click the following blocks are connected- Similarly one can connect the blocks for the actions that are required to be performed on the click of the remaining buttons. The app is tested in the emulator as well as on the hardware, the screen shot of the emulator is shown below- Note- 1.The distance within which the robot can be controlled is around 10 meters and this is because of the range limitation of the bluetooth device. 2. The bluetooth of the mobile phone must be in the on condition and mobile phone must be paired up with the HC05 bluetooth module before starting the android app for controlling the robot. Thats it, Now arrange the required stuff and make your own bluetooth controlled robot using Android... Thanks for Reading UMESH DUTTA Posted 30th January 2015 by Umesh Dutta 0 Add a comment Nov 2 Arduino in Proteus Arduino in Proteus Hello readers today I am discussing with you the sequence of steps that are required to be followed for using Arduino in proteus environment. Proteus software now also supports Arduino simulations, It’s a great news for all those who use proteus software for simulating microcontroller based applications. Three Arduino boards are currently supported by proteus software- Arduino Uno R3 Arduino MEGA2560 R3 Arduino MEGA1280 You first need to add the arduino library files in the proteus library. Download Arduino proteus library and extract these two files- ARDUINO.IDX, ARDUINO.LIB Copy these files and paste them in the location- C:\Archivos de programa\Hielazo Electronics\Proteus 7 Professional\LIBRARY That’s it now you are ready to use Arduino in Proteus, yes it’s that simple. Now I will discuss with you Arduino code for blinking an led connected to pin 13 and its simulation on proteus- Step 1- Write the Arduino code in Arduino IDE for blinking an led as given below- void setup() { pinMode(13,OUTPUT); // configure pin 13 as output } void loop() { digitalWrite(13,HIGH); // make pin 13 high delay(1000); // delay of 1 sec digitalWrite(13,LOW); // make pin 13 low delay(1000); // give delay of 1 sec } Step 2- For generating hex file click on Files and then Preferences Click OK Step 3- Now compile your Arduino code (Ctrl+R) to generate the hex file. Step 4- Copy the path of the hex file generated above, here in this case the path is- C:\Users\DUTTA\AppData\Local\Temp\build1767933099525274361.tmp\ledblink.cpp.hex Step 5- Open proteus software and in the part search option type- arduino uno Select ARDUINO UNO R3 and click OK Step 6- Now connect an led to pin 13 as shown in the circuit diagram below- Step 7- Double click on Arduino Uno, a new window will pop up and in this window paste the path of hex file copied in step 4 a s shown below- Click OK button Step 8- Click on play button in proteus and see the effect. Led connected on pin 13 will start blinking every 1 sec. A proteus snap shot during run time is shown below- That’s it……… Now try simulating your Arduino applications in Proteus. THNAKS FOR READING... UMESH DUTTA Posted 2nd November 2014 by Umesh Dutta 1 View comments Oct 25 Electronic Voting Machine Using Arduino VOTING MACHINE USING ARDUINO Hello readers, before I give you a brief about the topic that I am going to discuss with you today, I would like to share with you a very small story. Few days back I was posted on Election duty as a presiding officer and this news was not less than an earthquake for me but then a senior colleague of mine told me that one should do it at least once in a life time. I went for it and believe me it is really tough and demanding duty. I spent two days away from home and during that time there was one thing which was more precious than my own life, Can you guess what that thing was? It was the Electronic Voting Machine (EVM). Now after spending two days with this machine I thought I should also design a one for my own use and today I will discuss with you the design of EVM using Arduino. Generally EVM has two parts- Control Unit Ballot Unit Control unit stores all the votes in the memory and is generally battery operated. Control unit also contains important buttons like result, close, print, clear. Ballot unit contains buttons of the contesting parties. A connecting cable is used for connecting ballot unit with the control unit. Fig. below shows a pictorial block diagram of the EVM machine that I have designed. Three buttons are provided for the three contesting parties (PARTY-A , PARTY-B, PARTY-C). Voters can use these buttons to vote for their party. So these three buttons are accessible to the voters. Voters are not given the access of the rest of the four buttons. Total button can be pressed any time to get the count of the total number of votes that are polled so far. Close button if pressed closes the voting process and if this button is pressed then PARTY-A, B and C buttons will become in effective and pressing of these three buttons will not have any effect on the system. Once close button is pressed, Result button can be pressed to check the results of the poll. One Result button is pressed the machine will tell you the exact number of votes that are polled for each of the three contesting parties and it will also tell the result of the poll that is which party has won the election. The machine is programmed to also indicate the vote difference b/w the winning party and the first runner up party. In case tie happens b/w any two parties, or b/w all three contesting parties then the machine will show the tie result on the lcd screen. Clear button is also provided and if this button is pressed then entire memory of the machine gets empty and all the stored vote count becomes zero. So clear and total button can be pressed any time during the voting process and if these buttons are pressed corresponding action that is programmed into the system will happen. Close button must be pressed before result button is pressed to get the result. The vote count is saved in the on chip EEPROM of the Arduino and so if power cut occurs then also the votes that are entered into the system will remain safe and again when the system is powered up the voting will begin from the previous state. The circuit diagram drawn on proteus software is shown below- All the buttons are connected to the digital pins of the arduino except for one (Clear button) which is connected to analog pin A0. Though clear button is connected to analog channel pin A0 it actually is working as a digital pin. PC0/ADC0 is the name of pin A0 so A to D conversion channel is an alternative functionality of this pin and it surely can behave as a normal digital input/output pin. 16*2 LCD display is interfaced with arduino to display the information to the user. The software code was written in arduino IDE and was tested both on proteus software and on actual hardware and it worked perfectly in both these cases. The entire software code of the Electronic Voting Machine is given below- Code- #include&lt;LiquidCrystal.h&gt; // lcd library #include &lt;EEPROM.h&gt; //EEPROM library LiquidCrystal lcd(13,12,11,10,9,8); // lcd control and data lines // button pin definitions int result=5; int closed=6; int total=7; int clearbutton=A0; int a=4; int b=3; int c=2; // temporary variables used in program int v1; int v2; int v3; int v; int cflag; void setup() { cflag=EEPROM.read(0); //read the status of cflag from memory v1=EEPROM.read(1);// v1 stores the vote count of party A v2=EEPROM.read(2); // v2 stores thevote count of party B v3=EEPROM.read(3); // v3 stores the vote count of party C pinMode(a,INPUT); // declaration of buttons as input pinMode(b,INPUT); pinMode(c,INPUT); pinMode(total,INPUT); pinMode(closed,INPUT); pinMode(result,INPUT); pinMode(clearbutton,INPUT); digitalWrite(a,HIGH); //default status of buttons when not pressed is high digitalWrite(b,HIGH); digitalWrite(c,HIGH); digitalWrite(total,HIGH); digitalWrite(closed,HIGH); digitalWrite(result,HIGH); digitalWrite(clearbutton,HIGH); lcd.begin(16,2); if(cflag==0) { lcd.print(&quot;Press button&quot;); lcd.setCursor(0,1); lcd.print(&quot;to vote...&quot;); delay(1000); } if(cflag==1) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Voting Closed&quot;); lcd.setCursor(0,1); v=v1+v2+v3; lcd.print(&quot;Total Votes:&quot;); lcd.print(v); } } void rpt() { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Press button&quot;); lcd.setCursor(0,1); lcd.print(&quot;to vote...&quot;); } void votedifference() // subrotine to calculate vote difference { if(v1&gt;v2) { if(v2&gt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;A wins by&quot;); lcd.setCursor(0,1); lcd.print(v1-v2); lcd.print(&quot; votes&quot;); } else { if(v1&gt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;A wins by&quot;); lcd.setCursor(0,1); lcd.print(v1-v3); lcd.print(&quot; votes&quot;); } if(v1&lt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;C wins by&quot;); lcd.setCursor(0,1); lcd.print(v3-v1); lcd.print(&quot; votes&quot;); } } } else { if(v1&gt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;B wins by&quot;); lcd.setCursor(0,1); lcd.print(v2-v1); lcd.print(&quot; votes&quot;); } else { if(v2&gt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;B wins by&quot;); lcd.setCursor(0,1); lcd.print(v2-v3); lcd.print(&quot; votes&quot;); } if(v2&lt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;C wins by&quot;); lcd.setCursor(0,1); lcd.print(v3-v2); lcd.print(&quot; votes&quot;); } } } } void loop() { if(digitalRead(a)==LOW &amp;&amp; cflag==0) // if party A button is pressed { v1=v1+1; EEPROM.write(1,v1); lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;vote received...&quot;); delay(1500); rpt(); } if(digitalRead(b)==LOW &amp;&amp; cflag==0) // if party B button is pressed { v2=v2+1; EEPROM.write(2,v2); lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;vote received...&quot;); delay(1500); rpt(); } if(digitalRead(c)==LOW &amp;&amp; cflag==0) // if party C button is pressed { v3=v3+1; EEPROM.write(3,v3); lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;vote received...&quot;); delay(1500); rpt(); } // if total button is pressed and close button was not pressed earlier if(digitalRead(total)==LOW &amp;&amp; cflag==0) { v=v1+v2+v3; lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Total votes:&quot;); lcd.setCursor(0,1); lcd.print(v); delay(2000); rpt(); } if(digitalRead(closed)==LOW) // if close button is pressed { cflag=1; EEPROM.write(0,cflag); lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Voting Closed...&quot;); lcd.setCursor(0,1); v=v1+v2+v3; lcd.print(&quot;Total Votes:&quot;); lcd.print(v); while(digitalRead(result)==HIGH); } // if result button is pressed and before that close button was pressed if(digitalRead(result)==LOW &amp;&amp; cflag==1) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;A:&quot;); lcd.print(v1); lcd.setCursor(7,0); lcd.print(&quot;B:&quot;); lcd.print(v2); lcd.setCursor(0,1); lcd.print(&quot;C:&quot;); lcd.print(v3); delay(1500); // logic for result of voting process if(v1==v2 &amp;&amp; v2==v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Result Tied&quot;); delay(1500); } if(v1==v2 &amp;&amp; v1&gt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Tie b/w A and B&quot;); delay(1500); } if(v2==v3 &amp;&amp; v2&gt;v1) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Tie b/w B and C&quot;); delay(1500); } if(v1==v3 &amp;&amp; v1&gt;v2) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Tie b/w A and C&quot;); delay(1500); } if(v1&gt;v2) { if(v1&gt;v3) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Party A wins&quot;); delay(1500); votedifference(); } else if(v3&gt;v1) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Party C wins&quot;); delay(1500); votedifference(); } } else { if(v2&gt;v3 &amp;&amp; v1!=v2) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Party B wins&quot;); delay(1500); votedifference(); } else if(v3&gt;v2) { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Party C wins&quot;); delay(1500); votedifference(); } } } if(digitalRead(clearbutton)==LOW) // if clear button is pressed { for (int i = 0; i &lt; 512; i++) { EEPROM.write(i, 0); } v1=0; v2=0; v3=0; cflag=0; lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Memory Cleared&quot;); delay(1500); lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Press button&quot;); lcd.setCursor(0,1); lcd.print(&quot;to vote...&quot;); } } A snap shot during proteus simulation when result button is pressed is shown below- When clear button is pressed the lcd will show the message memory cleared as shown below- I hope that after reading this article, readers will have a better understanding of EVM implementation using Arduino and I also believe that the description and coding provided here will help you to extend this project further by interfacing a GSM modem with the machine for sending SMS to the mobile phone numbers all the participating candidates/parties so that they can also get to know the result of each and every voting machine instantly. THANKS FOR READING……. UMESH DUTTA Posted 25th October 2014 by Umesh Dutta 5 View comments Oct 24 Password Protected System Using Arduino Password Protected System Using Arduino Hello readers, in this article I am going to discuss with you the fundamentals and programming art involved behind the design of password protected systems. These systems are very commonly used in our day to day life like in ATM machines, Electronic safe lock, door lock etc. These systems in common involve keypad input unit for entering the password and a display unit (generally an lcd display unit) for visual display of information, some switching mechanism to activate the motors in case of locks and a programmed microcontroller that will process the input information and take the appropriate action. So in order to design these systems the designer must have a good knowledge of programming for interfacing these peripherals with the microcontroller. So before I start explaining you all these concepts lets define an aim that is required to be achieved. Aim- To design a password protected system based on Arduino. The system will have a 16*2 lcd display for visual display of information, an led for indication and a 4*3 keypad for entering the information. If correct password is entered by the user then the lcd should display correct password and led should glow for 3 seconds. If user enters an incorrect password then lcd should show access denied and if user enters an incorrect password 3 times consecutively then system should lock. Now the aim is quite clear and for achieving it the first step is to understand how 4*3 keypad works. Fig. below shows how a 4*3 keypad can be constructed using micro switch:- It has 4 rows denoted here by r1, r2, r3, r4 and 3 columns denoted here by c1, c2, c3. Pictorial view of 4*3 keypad used in proteus is shown below- Every number has a unique column number and a unique row number for example digit ‘9’ has row number r3 and column number c3, similarly for digit ‘4’ row number is r2 and column number is c1. Whenever a key is pressed the row and column number corresponding to that digit will get shorted and so if we want to identify that which key is pressed, we just need to identify the row and column numbers that gets shorted. Fig. below shows one such case- The circuit diagram drawn in proteus is shown below- In programming declare all the column pins as inputs and all row pins as output. pinMode(r1,OUTPUT); pinMode(r2,OUTPUT); pinMode(r3,OUTPUT); pinMode(r4,OUTPUT); pinMode(c1,INPUT); pinMode(c2,INPUT); pinMode(c3,INPUT); Ground all the rows and make all column pins high. Then keep on checking the status of all column pins and if any one of them goes low then check which one goes low. while(digitalRead(c1)==HIGH &amp;&amp; digitalRead(c2)==HIGH &amp;&amp; digitalRead(c3)==HIGH); if(digitalRead(c1)==LOW) { col1(); } if(digitalRead(c2)==LOW) { col2(); } if(digitalRead(c3)==LOW) { col3(); } Subroutines col1(), col2() and col3() contains codes for checking the particular row number due to which the column has become Low and in those subroutines ground one row at a time and then check the status of the column pin to detect the unique row number. The complete code is given below for your reference. Code- #include&lt;LiquidCrystal.h&gt; /*LCD rs=12, en=11, D4=10, D5=9 D6=8, D7=7 */ LiquidCrystal lcd(12,11,10,9,8,7); //defining pins used for rows and columns int c1=2; int c2=3; int c3=4; int r1=5; int r2=6; int r3=A0; int r4=A1; //attempt is a variable used to keep a check on number of times //wrong password is entered int attempt; //temp[] array stores the 3 digit password entered by user char temp[3]; int m; void col1() //routine for checking column1 { digitalWrite(r1,LOW); digitalWrite(r2,HIGH); digitalWrite(r3,HIGH); digitalWrite(r4,HIGH); if(digitalRead(c1)==LOW) // r1 and c1 shorted so '1' pressed { lcd.print(&quot;1&quot;); temp[m]='1'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,LOW); digitalWrite(r3,HIGH); digitalWrite(r4,HIGH); if(digitalRead(c1)==LOW) // r2 and c1 shorted so '4' pressed { lcd.print(&quot;4&quot;); temp[m]='4'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,HIGH); digitalWrite(r3,LOW); digitalWrite(r4,HIGH); if(digitalRead(c1)==LOW) { lcd.print(&quot;7&quot;); temp[m]='7'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,HIGH); digitalWrite(r3,HIGH); digitalWrite(r4,LOW); if(digitalRead(c1)==LOW) { lcd.print(&quot;*&quot;); temp[m]='*'; delay(100); } digitalWrite(r4,HIGH); delay(200); } void col2() // routine for checking column2 { digitalWrite(r1,LOW); digitalWrite(r2,HIGH); digitalWrite(r3,HIGH); digitalWrite(r4,HIGH); if(digitalRead(c2)==LOW) // r1 and c2 shorted so '2' pressed { lcd.print(&quot;2&quot;); temp[m]='2'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,LOW); digitalWrite(r3,HIGH); digitalWrite(r4,HIGH); if(digitalRead(c2)==LOW) { lcd.print(&quot;5&quot;); temp[m]='5'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,HIGH); digitalWrite(r3,LOW); digitalWrite(r4,HIGH); if(digitalRead(c2)==LOW) { lcd.print(&quot;8&quot;); temp[m]='8'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,HIGH); digitalWrite(r3,HIGH); digitalWrite(r4,LOW); if(digitalRead(c2)==LOW) { lcd.print(&quot;0&quot;); temp[m]='0'; delay(100); } digitalWrite(r4,HIGH); delay(200); } void col3() // routine for checking column3 { digitalWrite(r1,LOW); digitalWrite(r2,HIGH); digitalWrite(r3,HIGH); digitalWrite(r4,HIGH); if(digitalRead(c3)==LOW) // r1 and c3 shorted so '3' pressed { lcd.print(&quot;3&quot;); temp[m]='3'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,LOW); digitalWrite(r3,HIGH); digitalWrite(r4,HIGH); if(digitalRead(c3)==LOW) { lcd.print(&quot;6&quot;); temp[m]='6'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,HIGH); digitalWrite(r3,LOW); digitalWrite(r4,HIGH); if(digitalRead(c3)==LOW) { lcd.print(&quot;9&quot;); temp[m]='9'; delay(100); } digitalWrite(r1,HIGH); digitalWrite(r2,HIGH); digitalWrite(r3,HIGH); digitalWrite(r4,LOW); if(digitalRead(c3)==LOW) { lcd.print(&quot;#&quot;); temp[m]='#'; delay(100); } digitalWrite(r4,HIGH); delay(200); } void scan_choice() // routine for scanning the input { digitalWrite(r1,LOW); digitalWrite(r2,LOW); digitalWrite(r3,LOW); digitalWrite(r4,LOW); digitalWrite(c1,HIGH); digitalWrite(c2,HIGH); digitalWrite(c3,HIGH); while(digitalRead(c1)==HIGH &amp;&amp; digitalRead(c2)==HIGH &amp;&amp; digitalRead(c3)==HIGH); if(digitalRead(c1)==LOW) { col1(); } if(digitalRead(c2)==LOW) { col2(); } if(digitalRead(c3)==LOW) { col3(); } } void next() // subroutine called for begining next cycle { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Enter Password:&quot;); lcd.setCursor(0,1); } void setup() { lcd.begin(16,2); // lcd initialized 16*2 lcd.print(&quot;Enter Password:&quot;); lcd.setCursor(0,1); pinMode(r1,OUTPUT); pinMode(r2,OUTPUT); pinMode(r3,OUTPUT); pinMode(r4,OUTPUT); pinMode(c1,INPUT); pinMode(c2,INPUT); pinMode(c3,INPUT); pinMode(13,OUTPUT); //led connectd to pin 13 } void loop() { for(m=0;m&lt;3;m++) { scan_choice(); } if(temp[0]=='7' &amp;&amp; temp[1]=='8' &amp;&amp; temp[2]=='6') // correct password 786 { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Access Granted&quot;); digitalWrite(13,HIGH); // led on delay(3000); // delay of 3 seconds digitalWrite(13,LOW); // led off next(); } else { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;Wrong Password&quot;); delay(1500); next(); attempt=attempt+1; // variable increment by 1 on entering wrong password if(attempt==3) // if 3 wrong passwords entered consecutively { lcd.clear(); lcd.setCursor(0,0); lcd.print(&quot;No More Trials&quot;); lcd.setCursor(0,1); lcd.print(&quot;Acess Denied&quot;); while(1); // stay here until system is reset again } } } This code is tested in proteus simulation software and also on the hardware and it worked perfectly in both the cases. Fig. below shows the run time snap shot when correct password was entered. Access Granted message is printed on the lcd display and led connected to pin number 13 remains on for 3 seconds and then it goes to off state. When wrong password is entered 3 times then the system will be locked and user needs to press reset button so that system begins executing program from the start. The snap shot under no more trials condition is given below- This project demonstrates the concepts used in designing password protected systems using Arduino. This idea can be extended to meet your demands and I hope that after reading this article you will be in a position to do just that and if not then don’t panic your help is just one click away. THANKS FOR READING……….. UMESH DUTTA Posted 24th October 2014 by Umesh Dutta 0 Add a comment Oct 24 ARDUINO SERIAL COMMUNICATION Serial Communication in Arduino Arduino UNO has a built in UART for serial communication. Rx and TX pins (0 &amp; 1 respectively) in Arduino Uno can be used for communicating data serially with any peripheral device (like Bluetooth, GSM, GPS etc.). There are some built in functions that readers should understand before writing Arduino code for serial data transmission and reception. Some of the commonly used functions in serial data transmission and reception are discussed below- Serial.println() Prints data to the serial port as human-readable ASCII text followed by a carriage return character (ASCII 13, or '\r') and a newline character (ASCII 10, or '\n'). Syntax Serial.println(val) Serial.println(val, format) Parameters val: the value to print - any data type format: specifies the number base (for integral data types) or number of decimal places (for floating point types) Returns size_t (long): println() returns the number of bytes written, though reading that number is optional Example- Serial.println(“UMESH DUTTA”) will transmit UMESH DUTTA through the Tx pin of Arduino Uno. Serial.println(78, HEX) gives &quot;4E&quot; Serial.print() Syntax Serial.print(val) Serial.print(val, format) Parameters val: the value to print - any data type format: specifies the number base (for integral data types) or number of decimal places (for floating point types) Returns size_t (long): print() returns the number of bytes written, though reading that number is optional. For example- Serial.print(78, BIN) gives &quot;1001110&quot; Serial.println(1.23456, 2) gives &quot;1.23&quot; Serial.print(&quot;INDIA&quot;) gives &quot;INDIA&quot; Serial.write() This function writes binary data to the serial port. This data is sent as a byte or series of bytes. Syntax Serial.write(val) Serial.write(str) Serial.write(buf, len) Parameters val: a value to send as a single byte str: a string to send as a series of bytes buf: an array to send as a series of bytes len: the length of the buffer Returns byte write() will return the number of bytes written, though reading that number is optional Serial.write(32); // send a byte with the value 32 int bytesSent = Serial.write(“Delhi”); //send the string “Delhi” and return the length of the string. Serial.begin() Syntax Serial.begin(speed) Serial.begin(speed, config) Description Sets the data rate in bits per second (baud) for serial data transmission. For communicating with the computer, use one of these rates: 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, or 115200. You can, however, specify other rates - for example, to communicate over pins 0 and 1 with a component that requires a particular baud rate. An optional second argument configures the data, parity, and stop bits. The default is 8 data bits, no parity, one stop bit. Example- Serial.begin(9600); // specifies 9600bpds baud rate for communication of data Serial.available() Syntax Serial.available() Description Get the number of bytes (characters) available for reading from the serial port. This is the data that's already arrived and stored in the serial receive buffer (which holds 64 bytes). Example- If some serial data is received and some action is required to be performed at that point of time then the coding can take the following form- if (Serial.available()&gt;0) { ………….do something…………. } Serial.read() Syntax Serial.read() Decription Reads incoming serial data. Returns the first byte of incoming serial data available (or -1 if no data is available) Example- if (Serial.available()&gt;0) { temp = Serial.read(); // reads the serially received data and stores it in temporary variable temp } Serial.end() Syntax Serial.end() Description Disables serial communication, allowing the RX and TX pins to be used for general input and output. To re-enable serial communication, call Serial.begin(). There are some other functions that are associated with serial communication and for understanding the left out functions I recommend you to refer the below given link- http://arduino.cc/ Now after understanding most of the functions that are associated with serial communication in Arduino Uno, I will discuss with you some of the programming examples and after going through these examples you will get the answer of question - Where to use which function? Problem1- Two led’s are connected to pin number 13 (led1) and 12(led2) of arduino uno. If serial data ‘1’ is received then led1 should glow, led2 should remain off. If serial data ‘2’ is received then led2 should glow, led1 should remain off. If serial data ‘3’ is received then both led1 and led2 should remain on. If serial data ‘4’ is received then both led1 and led2 should remain off. Circuit Diagram in proteus- Code- char temp; void setup() { Serial.begin(9600); // Baud rate of 9600bps pinMode(12,OUTPUT); //pin 12 declared as output pinMode(13,OUTPUT); // pin 13 declared as output delay(10); // delay of 10ms } void loop() { while(!Serial.available()); // stay on this line if no data is received serially if(Serial.available()&gt;0) // check if some data is available to be read { temp=Serial.read(); // read the incoming serial data byte and store in temp if(temp=='1') { digitalWrite(13,HIGH); digitalWrite(12,LOW); } if(temp=='2') { digitalWrite(13,LOW); digitalWrite(12,HIGH); } if(temp=='3') { digitalWrite(13,HIGH); digitalWrite(12,HIGH); } if(temp=='4') { digitalWrite(13,LOW); digitalWrite(12,LOW); } } The above given code was tested in proteus simulation software and on actual hardware. The code worked perfectly fine in both the cases. A snap shot of proteus simulation during run time is shown below- Caution- Take Crystal frequency of 16MHz in proteus and for that connect a crystal oscillator b/w pin 9 and 10. Double click on Arduino and a new window will pop up. In this window make sure that clock Frequence is 16MHz ad CKSEL Fuses is set at (0000)Ext. Clock. A snap shot of these settings is given below- Problem 2 LM 35 temperature sensor output is connected to analog channel A0 of Arduino Uno. Show the digital output of the temperature on virtual terminal of proteus (Send the temperature readings serially after every 1 second). Circuit diagram- Code- float value; void setup() { Serial.begin(9600); // begin serial communication with baud rate of 9600bps } void loop() { Serial.print(&quot;temperature:&quot;);//print string temperature on serial port value=analogRead(A0); // read the analog voltage of channel A0 value = ((value * 5000.0)/1024.0)/10.0;// software caliberation Serial.println(value,2); // print the temperature serially with 2 decimal places delay(1000); // delay of 1 second } A snap shot during proteus simulation is shown below- I hope that these examples will prove to be useful for the readers in grasping the programming concepts of Arduino serial communication. These fundamentals will be required when you perform GSM module (SIM900) interfacing with arduino for SMS sending or receiving applications, GPS, Bluetooth and many other applications that require the use of serial communication. I will post the articles on all these real time applications very soon. THANKS FOR READING………… UMESH DUTTA Posted 24th October 2014 by Umesh Dutta 0 Add a comment Oct 23 Serial Communication in 8051 Microcontroller SERIAL COMMUNICATION IN 8051 Hello readers, today I am writing about serial communication of data in one of the most widely used microcontroller (8051). Lot of applications require microcontrollers to either accept the data in serial form or o/p the data in serial form. Microcontrollers can communicate data in either parallel form or serial form. In parallel communication, data is transferred over more than one wire for example if 8 wires of one microcontroller are connected to any other peripheral device or another microcontroller then at a particular time 8 data bits are transferred. On the other hand in serial communication, data is transferred in bit by bit manner over a single wire. For example if a microcontroller 1 is transferring data to another microcontroller 2 in serial form then TXD pin of microcontroller 1 will be connected to RXD pin of microcontroller 2 and data is transferred from microcontroller 1 to microcontroller 2 in bit by bit manner over a single wire. If microcontroller 2 wants to send some data to microcontroller 1 then for that TXD pin of microcontroller 2 must be connected to RXD pin of microcontroller 1 and again data bits will be transferred over a single wire. So it is clear that for full duplex communication of data two wires are involved and for simplex communication only one wire will be involved. Parallel communication requires more number of wires than serial communication but it has higher speed of data transfer as more than one bit is transferred at a given time. Serial communication is preferred when the distance b/w transmitter and receiver is large and it is required to save the cabling cost and reduce h/w complexity but definitely this comes at the cost of reduced speed of data transfer. Fig. 1 below shows parallel data transmission- Fig.1 Parallel data transmission Fig.2 below shows serial data transmission- Fig.2 serial data transmission In serial communication parallel to serial converter and serial to parallel converter module is required. In 8051 in built UART (Universal Asynchronous Receiver Transmitter) module performs the job of serial communication of data. Data communication process can be synchronous or asynchronous. The following points clearly discriminates between these two modes of data transfer- Synchronous data transfer: sender and receiver use the same clock signal supports high data transfer rate needs clock signal between the sender and the receiver requires master/slave configuration Asynchronous data transfer: sender provides a synchronization signal to the receiver before starting the transfer of each message does not need clock signal between the sender and the receiver slower data transfer rate In 8051 microcontroller serial communication of data is performed with the help of following special purpose registers- 1. SBUF (Serial buffer register) 2. SCON (serial control register) 3. TMOD (Timer mode register) 4. TCON (Timer control register) 5. TH1 (Timer1 register higher byte) Before going further it is extremely important to first understand these registers and their importance with reference to serial communication. 1. SBUF (Serial buffer register) It is an 8-bit register and is used for serial communication of data in 8051 microcontroller. Whatever data is required to be transmitted via TXD line must be placed in the SBUF register. Similarly the received data via RXD line is saved in SBUF register. When data is written to SBUF register then it is framed in b/w start and stop bit before it is transmitted via TXD line and similarly during reception of data start and stop bits are removed and actual data bits are extracted from the received frame and then it is placed in the SBUF register. 2. SCON (Serial control register) SM0, SM1 Serial port mode specifier REN (Receive enable) set/cleared by software to enable/disable reception. TI Transmit interrupt flag. RI Receive interrupt flag. SM2 = TB8 = RB8 =0 (not widely used) SM1 and SM0 determine the framing of data. Only mode 1 is compatible with COM port of PC. 3. TMOD (Timer mode register) Both timer 0 and timer 1 use the same register, called TMOD, to set the various timer modes. TMOD is an 8-bit register in which the lower 4-bits are set aside for timer 0 and the upper 4-bits are set aside for timer 1. In each case, the lower 2 bits are used to set the timer mode and the upper two bits are used to specify the operation. C/T- If this bit is set then counter operation is performed (for counting applications) and if this bit is clear then timer operation is performed (for delay generation ). The clock source for timer is the crystal oscillator that is connected to the 8051 micro-controller. Crystal oscillator also determines the speed at which the timer ticks. 4. TCON (Timer Control Register) 5. TH1 (Timer 1 register high byte) Timer 1 high byte register is loaded with appropriate value for baud rate generation. Timer 1 in mode 2 is used for baud rate generation. Concept of Baud Rate Generation in 8051 Micro-controller 8051 divides the crystal oscillator frequency by 12 to get the machine cycle frequency. UART divides the machine cycle frequency by 32 and sends it to Timer 1 to set the baud rate. Timer 1, mode 2 (8-bit, auto-reload) Define TH1 to set the baud rate. XTAL = 11.0592 MHz The system frequency = 11.0592 MHz / 12 = 921.6 kHz Timer 1 has 921.6 kHz/ 32 = 28,800 Hz as source Baud rate = 28,800/3= 9,600 bps So TH1 must be loaded with value of FDH (-3) for the generation of baud rate of 9600 bps. For the crystal oscillator frequency of 11.0592MHz the below given table can be used as a reference for getting the value that is required to be loaded into TH1 register for the desired baud rate generation. Baud Rate TH1 (Decimal) TH1 (Hex) 9600 -3 FD 4800 -6 FA 2400 -12 F4 1200 -24 E8 What is the significance/Importance of TI and RI flags? When 8051 is transmitting serial data then TI flag (Transmit Interrupt Flag) plays a very important role. This flag must be monitored to check whether data transfer operation is executed successfully or not. This bit is set by the hardware at the beginning of the stop bit in mode 1. This flag bit must be cleared by software. In embedded C the instructions that can be used to monitor the status of TI flag is- SBUF = ’U’; // load SBUF with the data that is required to be transmitted While (TI ==0); //stay on this line till TI=0 (wait until transmitted) TI=0; // clear TI flag Similarly during reception RI flag (Receive Interrupt Flag) plays a very important role. This flag must be monitored to check whether any data is received or not. This flag bit is set in half way through the stop bit in mode 1 and must be cleared by the software. The instructions that can be used to monitor the status of RI flag in embedded C are- While (RI==0); // stay on this line till RI=0 (wait to receive) temp = SBUF; //read SBUF and store it in some temp variable P2 = temp; // put the received data on port 2 RI=0; // clear the RI flag In simple terms TI = 1 indicates that data is transferred successfully and RI = 1 indicates that data byte is received successfully. Programming Steps for Serial data transmission- Step 1- Load TMOD register with 0X20 (timer 1 in mode2) In embedded C- TMOD = 0X20; In Assembly Language- MOV TMOD, #20H Step 2- Load TH1 with a value for the required baud rate generation (refer to baud rate table) TH1=0XFD (for 9600bps baud rate). In embedded C- TH1 = 0XFD; In Assemble Language- MOV TH1, #0FDH Step 3- Load SCON with 0X50 (serial mode 1 with REN = 1), receive operation is enabled. In Embedded C- SCON=0X50; In Assembly Language- MOV SCON, #50H Step 4- Set TR1 bit to start timer 1. In Embedded C- TR1=1; In Assembly Language- SETB TR1 Step 5- Clear the transmit interrupt flag before transmitting any data. This is just to make sure that UART is ready to transfer a new byte of data. In Embedded C- TI=0; In Assembly Language- CLR TI Step 6- Load the data to be transmitted in SBUF register In Embedded C- SBUF = ‘U’; // example ‘U’ us loaded in SBUF In Assembly Language- MOV SBUF, #’U’ Step 7- Monitor the TI flag to check whether the data has been transmitted successfully or not. In embedded C- while (TI==0); In Assembly Language- Here: JNB TI, Here Step 8- To transfer the next data byte, go to step 5, and start again. It does not mean that one should repeat all the steps for transmitting 1 byte of data. In embedded C you can create a function for doing steps 5 to 7 and pass data to be transmitted dynamically to the function. In assembly program one can make a subroutine and it can be called any time whenever data is required to be transmitted. Programming Steps for Serial data reception- Step1- Load TMOD register with 0X20 (timer 1 in mode2) In embedded C- TMOD = 0X20; In Assembly Language- MOV TMOD, #20H Step 2-Load TH1 with a value for the required baud rate generation (refer to baud rate table) TH1=0XFD (for 9600bps baud rate). In embedded C- TH1 = 0XFD; In Assemble Language- MOV TH1, #0FDH Step 3- Load SCON with 0X50 (serial mode 1 with REN = 1), receive operation is enabled. In Embedded C- SCON=0X50; In Assembly Language- MOV SCON, #50H Step 4- Set TR1 bit to start timer 1. In Embedded C- TR1=1; In Assembly Language- SETB TR1 Step 5- Clear the receive interrupt flag before receiving any data. This is just to make sure that UART is ready to receive a new byte of data. In Embedded C- RI=0; In Assembly Language- CLR RI Step 6- Monitor the RI flag to check whether the data has been received successfully or not. In embedded C- while (RI==0); In Assembly Language- Here: JNB RI, Here Step 7- When RI becomes 1 it means that a data byte is received and so the received data byte must be stored in some temporary variable for further processing. temp = SBUF; Storing the SBUF value in a temporary variable is one way to save the SBUF value you can use your own way to make sure that the data byte received is moved to the safe place. Step 8- To receive the next data byte, go to step 5. Again note that you can make your program modular with the use of function in embedded C for performing the repetitive job of step 5 to 7. In Assembly language you can make subroutine for performing steps 5 to 7. I hope that these concepts will be useful for the readers to start the programming of real time applications which involve serial data communication using 8051 micro-controller. In the upcoming articles I will share such applications along with proteus simulations for better understanding. THANKS FOR READING...................... UMESH DUTTA Posted 23rd October 2014 by Umesh Dutta 0 Add a comment About Me About Me Umesh Dutta Blog Archive Blog Archive 20155 June1 TOGGLING LED in ATMega168PB Xplained Mini Evaluati... April1 February2 January1 20148 November1 October7 Loading Dynamic Views template. Powered by Blogger. 0 Follow 17 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160720094818#index"
                   NS1:content=" tommy.britnell@googlemail.com wird geladen Standardansicht wird geladen | (für langsame Verbindungen) Der Vorgang dauert länger als gewöhnlich. Versuchen Sie, die Seite zu aktualisieren. Wenn das nicht funktioniert, können Sie: Deaktivieren Sie Labs und versuchen Sie es noch einmal. Wenn Sie nur über eine langsame Verbindung verfügen, verwenden Sie die . Weitere Informationen zur Fehlerbehebung finden Sie in der Hilfe. Konversation geöffnet. 1 Nachricht gelesen. Direkt zum Inhalt Gmail mit Screenreadern verwenden Tastenkombinationen Gmail-Anleitung für die Standardansicht Tommy Mein Konto Suche Maps Play Gmail Drive Kalender Google+ Übersetzer Fotos Gmail Verknüpfung hinzufügen Mehr Google Docs Books Blogger Kontakte My Business Hangouts Noch mehr von Google Ändern Tommy Wonday tommy.britnell@googlemail.com Google+ Profil–Datenschutz Mein Konto Google+ Profil-Symbol Thomas Britnell t.a.britnell@gmail.com Google+ Profil-Symbol Tommy Wonday tommy.britnell@googlemail.com (Standard) Meine Google+ Seiten › Konto hinzufügen Abmelden Suche Ausgeblendete Felder Gmail Logo Gmail Schreiben Labels Posteingang (6) Markiert Wichtig Gesendet Entwürfe (48) Spam (268) Papierkorb Kreise ▼ coursera ▼ eBay ▼ receipts ▼ sign-ups ▼ Societies ▼ Uni appl. ▼ Mehr Chats Alle Nachrichten Kategorien ▼ amazon ▼ mom / dad ▼ past papers ▼ Word of the day: ▼ Labels verwalten Neues Label erstellen Art des Posteingangs Standard Wichtige zuerst Ungelesene zuerst Markierte zuerst Sortierter Eingang Testen Sie alle Designs und wählen Sie das, was Ihnen am besten gefällt Testen Sie alle neuen Designs für den Posteingang, um zu sehen, welches Ihnen am besten gefällt. Sie können jederzeit zurückwechseln. Tabs weiter testen Art des Posteingangs Standard Wichtige zuerst Ungelesene zuerst Markierte zuerst Sortierter Eingang Testen Sie alle Designs und wählen Sie das, was Ihnen am besten gefällt Testen Sie alle neuen Designs für den Posteingang, um zu sehen, welches Ihnen am besten gefällt. Sie können jederzeit zurückwechseln. Tabs weiter testen Art des Posteingangs Standard Wichtige zuerst Ungelesene zuerst Markierte zuerst Sortierter Eingang Testen Sie alle Designs und wählen Sie das, was Ihnen am besten gefällt Testen Sie alle neuen Designs für den Posteingang, um zu sehen, welches Ihnen am besten gefällt. Sie können jederzeit zurückwechseln. Tabs weiter testen Minimieren Hangouts Hoppla! Beim Verbindungsaufbau zu Google ist ein Problem aufgetreten. Wir versuchen es weiter… Ursache hierfür können Netzwerk- oder Proxyprobleme sein. Weitere Informationen E-Mails werden abgerufen... Mehr Alle Keine Gelesen Ungelesen Markiert Nicht markiert 1–50 von 2.234 Mehr 1 von 2.234 Konversationen Allgemein Soziale Netzwerke 4 neu Werbung Make: Newsletter; UNO-Flüchtlingshilfe; the runnymede-on-thames; Resident Advisor 2 neu Benachrichtigungen Trish Murray - 38 Degrees; Carys Afoko, SumOfUs.org Allgemein 1–50 von 2.234 Der Tab &quot;Allgemein&quot; enthält keine Nachrichten. Hier werden persönliche Nachrichten sowie alle Nachrichten angezeigt, die nicht in anderen Tabs erscheinen. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Hans-Joachim Horn, Unser Ruanda-Plan, enthält Anhänge, 13. Juli, Lieber Tommy, hier -wie per Whatsapp angekündigt- unser Ruanda Plan als Excel-Dokument. Ein paar Punkte dazu: 1. Wir kommen am Freitag, den 5. August abends an und fahren ins &quot;Five to Five Hotel Hans-Joachim Horn Unser Ruanda-Plan - Lieber Tommy, hier -wie per Whatsapp angekündigt- unser Ruanda Plan als Excel-Dokument. Ein paar Punkte dazu: 1. Wir kommen am Freitag, den 5. August abends an und fahren ins &quot;Five to Five Hotel Anhang 13. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Simon (4), (Kein Betreff), 9. Juli, Haha nice, thanks for that. Portugal played really well! T 2016-07-09 22:34 GMT+02:00 Simon Britnell &lt;simon.britnell@gmail.com&gt;: Hi tom. Here is the vote of the Munich jury : Uno quatro nein huit ich, Simon (4) (Kein Betreff) - Haha nice, thanks for that. Portugal played really well! T 2016-07-09 22:34 GMT+02:00 Simon Britnell &lt;simon.britnell@gmail.com&gt;: Hi tom. Here is the vote of the Munich jury : Uno quatro nein huit 9. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ungelesen, Stettner Baldham, WG: WG: Leitfaden BAMF Interview der lawclinic Munich, 9. Juli, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Vaterstetten. Weitere Infos zum Helferkreis unter: http://www.helferkreis-grasbrunn-vaterstetten.de/ Zur Info. Stettner Baldham WG: WG: Leitfaden BAMF Interview der lawclinic Munich - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Vaterstetten. Weitere Infos zum Helferkreis unter: http://www.helferkreis-grasbrunn-vaterstetten.de/ Zur Info. 9. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ungelesen, Stettner Baldham, WG: WG: Film &quot;Flucht nach vorn&quot; ist fertig!, 9. Juli, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Vaterstetten. Weitere Infos zum Helferkreis unter: http://www.helferkreis-grasbrunn-vaterstetten.de/ Zur Info. Stettner Baldham WG: WG: Film &quot;Flucht nach vorn&quot; ist fertig! - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Vaterstetten. Weitere Infos zum Helferkreis unter: http://www.helferkreis-grasbrunn-vaterstetten.de/ Zur Info. 9. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Irmgard (6), blog, 6. Juli, Hi Tommy, hab leider erst heute deine email gelesen... Toll, daß du die Gegend erkundest .... Wie ich, Irmgard (6) blog - Hi Tommy, hab leider erst heute deine email gelesen... Toll, daß du die Gegend erkundest .... Wie 6. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Gayatri (5), Bills, 5. Juli, Okay, No worries, just let me know when you have added it. I Left 20k as token in your night cup- ich, Gayatri (5) Bills - Okay, No worries, just let me know when you have added it. I Left 20k as token in your night cup- 5. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ungelesen, Google, New sign-in, 4. Juli, New sign-in Hi Tommy, Your Google Account tommy.britnell@googlemail.com was just used to sign in. Google New sign-in - New sign-in Hi Tommy, Your Google Account tommy.britnell@googlemail.com was just used to sign in. 4. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ungelesen, Stettner Baldham, WG: Senegal Perspektiven Treffen 20.07.2016 19 Uhr im Bellevue in München, 4. Juli, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Senegal Perspektiven Treffen 20.07.2016 19 Uhr im Bellevue in München - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn 4. Juli Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen ungelesen, tharcisse bizimungu, (Kein Betreff), 3. Juli, Hello! nice to write you this mail, was you left home in kimihurura or you will back , miss u! tharcisse bizimungu (Kein Betreff) - Hello! nice to write you this mail, was you left home in kimihurura or you will back , miss u! 3. Juli Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen ungelesen, Google, Neue Anmeldung, 3. Juli, Neue Anmeldung Sie haben diese E-Mail erhalten, weil tommy.britnell@gmail.com als Wiederherstellungs- Google Neue Anmeldung - Neue Anmeldung Sie haben diese E-Mail erhalten, weil tommy.britnell@gmail.com als Wiederherstellungs- 3. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Simon, ich (2), Mvv credit, 2. Juli, ermm try E l 3 phant, or E l 3 ph @ nt 2016-07-02 10:44 GMT+02:00 Simon Britnell &lt;simon.britnell@ Simon, ich (2) Mvv credit - ermm try E l 3 phant, or E l 3 ph @ nt 2016-07-02 10:44 GMT+02:00 Simon Britnell &lt;simon.britnell@ 2. Juli Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen The team at Watchdog.. (2), The U.S. official who snuck big bank giveaways into the TPP, 1. Juli, Thomas, Sorry for the double email but there seems to have been broken links in our previous mailing The team at Watchdog.. (2) The U.S. official who snuck big bank giveaways into the TPP - Thomas, Sorry for the double email but there seems to have been broken links in our previous mailing 1. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Irmgard M. Britnell, Handy, 29. Juni, Hi Tommy, hast du dir schon ein neues Handy gekauft? Bis wir von dir hören, gehe ich davon aus, daß Irmgard M. Britnell Handy - Hi Tommy, hast du dir schon ein neues Handy gekauft? Bis wir von dir hören, gehe ich davon aus, daß 29. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen James, ich (3), Hi, enthält Anhänge, 29. Juni, Today was better. Mom walking around this museum/castle bare foot because she didn't want to wear James, ich (3) Hi - Today was better. Mom walking around this museum/castle bare foot because she didn't want to wear Anhang 29. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Integrationsleistungen von Flüchtlingen schützen - entspr. Kabinettsbeschluss in Ba..., 27. Juni, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Integrationsleistungen von Flüchtlingen schützen - entspr. Kabinettsbeschluss in Ba... - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn 27. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Sandy, simon (6), a vendre, enthält Anhänge, 26. Juni, Oui il est encore à vendre... 350.000 frw à négocier. 😉 Bien à vous ! Simon Télécharger Outlook pour ich, Sandy, simon (6) a vendre - Oui il est encore à vendre... 350.000 frw à négocier. 😉 Bien à vous ! Simon Télécharger Outlook pour Anhang 26. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Trish Murray - 38 Deg. (3), One more thing, 25. Juni, Thank you for signing the petition &quot;Keep the promise of £350 million for our NHS&quot; The more Trish Murray - 38 Deg. (3) One more thing - Thank you for signing the petition &quot;Keep the promise of £350 million for our NHS&quot; The more 25. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Irmgard, ich (2), Volksentscheid in England, 24. Juni, Jaaa ich konnte es auch kaum glaube. wirklich unfassbar. eine schwerwiegende falsche entscheidung. Irmgard, ich (2) Volksentscheid in England - Jaaa ich konnte es auch kaum glaube. wirklich unfassbar. eine schwerwiegende falsche entscheidung. 24. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Irmgard M. Britnell, Hi Tom, 24. Juni, Hi Tommy, alles okay bis auf die Tatsache, daß du zur Zeit handylos bist??? Hoffentlich.... Heute Irmgard M. Britnell Hi Tom - Hi Tommy, alles okay bis auf die Tatsache, daß du zur Zeit handylos bist??? Hoffentlich.... Heute 24. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stack Exchange, Thanks for your post on Ask Ubuntu, 24. Juni, Recently, you answered a question on Ask Ubuntu, but you haven't verified your email address yet. Stack Exchange Thanks for your post on Ask Ubuntu - Recently, you answered a question on Ask Ubuntu, but you haven't verified your email address yet. 24. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Irmgard, Simon (8), Handy, 23. Juni, I have, i have a letter too, but I wrote it quickly so its honest, nothing about a bag, only my phone ich, Irmgard, Simon (8) Handy - I have, i have a letter too, but I wrote it quickly so its honest, nothing about a bag, only my phone 23. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Simon (5), mount unmount, 23. Juni, Irmgard tends to get in a groove and she has gotten int oa whatsapp groove so she wasn't reading ich, Simon (5) mount unmount - Irmgard tends to get in a groove and she has gotten int oa whatsapp groove so she wasn't reading 23. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, postmaster, Simon (6), linux drivers, 23. Juni, Hey Si, yesterday I used a fix that is the same for tsetting up wifi on RasPi Putting connect info in ich, postmaster, Simon (6) linux drivers - Hey Si, yesterday I used a fix that is the same for tsetting up wifi on RasPi Putting connect info in 23. Juni Markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen markiert, Google, New sign-in from Firefox on Windows, 23. Juni, New sign-in from Firefox on Windows Hi Tommy, Your Google Account tommy.britnell@googlemail.com was Google New sign-in from Firefox on Windows - New sign-in from Firefox on Windows Hi Tommy, Your Google Account tommy.britnell@googlemail.com was 23. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Josh Sandler, (Kein Betreff), 22. Juni, http://mobile.nytimes.com/2016/06/22/world/europe/david-cameron-brexit-european-union.html Joshua Josh Sandler (Kein Betreff) - http://mobile.nytimes.com/2016/06/22/world/europe/david-cameron-brexit-european-union.html Joshua 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, WhatsApp (3), Lost/Stolen: Please deactivate my account, 22. Juni, ##- WhatsApp Support -## Hi, Thanks for your message. Your WhatsApp account has been deactivated. ich, WhatsApp (3) Lost/Stolen: Please deactivate my account - ##- WhatsApp Support -## Hi, Thanks for your message. Your WhatsApp account has been deactivated. 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Public Viewing bei der Fußball-EM, enthält Anhänge, 22. Juni, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Public Viewing bei der Fußball-EM - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Anhang 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: AWO - Rumpelkammer - Kontakt Helferkreis Kirchheim, enthält Anhänge, 21. Juni, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: AWO - Rumpelkammer - Kontakt Helferkreis Kirchheim - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Anhang 21. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Einladung zu regionalen Vernetzungstreffen für Ehrenamtliche in der Asylarbeit, enthält Anhänge, 17. Juni, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Einladung zu regionalen Vernetzungstreffen für Ehrenamtliche in der Asylarbeit - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Anhang 17. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Cassie Jackson, Confidential, 16. Juni, Hi Tommy, I hope you are well. I work as an international head-hunter specialising in Electronics and Cassie Jackson Confidential - Hi Tommy, I hope you are well. I work as an international head-hunter specialising in Electronics and 16. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Google, Neue Anmeldung in Firefox auf &quot;Linux&quot;, enthält Anhänge, 14. Juni, Neue Anmeldung in Firefox auf &quot;Linux&quot; Sie haben diese E-Mail erhalten, weil tommy.britnell@ Google Neue Anmeldung in Firefox auf &quot;Linux&quot; - Neue Anmeldung in Firefox auf &quot;Linux&quot; Sie haben diese E-Mail erhalten, weil tommy.britnell@ Anhang 14. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Google, New sign-in from Firefox on Linux, enthält Anhänge, 14. Juni, New sign-in from Firefox on Linux Hi Tommy, Your Google Account tommy.britnell@googlemail.com was Google New sign-in from Firefox on Linux - New sign-in from Firefox on Linux Hi Tommy, Your Google Account tommy.britnell@googlemail.com was Anhang 14. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Gisa Michelón, Flamenco y Picasso im Münchner Künstlerhaus, 13. Juni, Liebe Flamencofreunde, nach &quot;Flamenco y Goya&quot; gibt es diesen Sommer &quot;Flamenco y Gisa Michelón Flamenco y Picasso im Münchner Künstlerhaus - Liebe Flamencofreunde, nach &quot;Flamenco y Goya&quot; gibt es diesen Sommer &quot;Flamenco y 13. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Einladung zum zweiten Asylgipfel in Starnberg am 18. Juni 2016 - geänderte Tagesord..., 10. Juni, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Einladung zum zweiten Asylgipfel in Starnberg am 18. Juni 2016 - geänderte Tagesord... - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn 10. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Public Viewing, enthält Anhänge, 6. Juni, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Public Viewing - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Anhang 6. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Tristan (2), R R, 3. Juni, Hey! Freut mich von dir zu hören und dass du offenbar gut in Ruanda angekommen bist. Ich wünsche dir ich, Tristan (2) R R - Hey! Freut mich von dir zu hören und dass du offenbar gut in Ruanda angekommen bist. Ich wünsche dir 3. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Microsoft account team, Microsoft account unusual sign-in activity, 1. Juni, Microsoft account Unusual sign-in activity We detected something unusual about a recent sign-in to Microsoft account team Microsoft account unusual sign-in activity - Microsoft account Unusual sign-in activity We detected something unusual about a recent sign-in to 1. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Microsoft account team, Microsoft account security code, 1. Juni, Microsoft account Security code Please use the following security code for the Microsoft account to** Microsoft account team Microsoft account security code - Microsoft account Security code Please use the following security code for the Microsoft account to** 1. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Gayatri (3), Arrive, 31. Mai, Oh and I'm +250 789001492 and +17813542961 on whatsapp. On Tuesday, May 31, 2016, Gayatri Datar ich, Gayatri (3) Arrive - Oh and I'm +250 789001492 and +17813542961 on whatsapp. On Tuesday, May 31, 2016, Gayatri Datar 31. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Clare Moseley, Fire in the Jungle - Emergency Appeal, 30. Mai, Dear Care4Calais supporters, You may have seen reports of the horrific events that happened in Calais Clare Moseley Fire in the Jungle - Emergency Appeal - Dear Care4Calais supporters, You may have seen reports of the horrific events that happened in Calais 30. Mai Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Team Snapchat, Snapchat Password Reset, 25. Mai, Hey wonday, To reset your password for Snapchat, please click the following link: https://accounts. Team Snapchat Snapchat Password Reset - Hey wonday, To reset your password for Snapchat, please click the following link: https://accounts. 25. Mai Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen chris britnell, pi, 25. Mai, https://shop.pimoroni.com/products/raspberry-pi-zero in stock fyi chris britnell pi - https://shop.pimoroni.com/products/raspberry-pi-zero in stock fyi 25. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Irmgard M. Britnell, Raffle, 25. Mai, Who is the winner of the raffle ???? XXX, MAMA Irmgard M. Britnell Raffle - Who is the winner of the raffle ???? XXX, MAMA 25. Mai Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen 8tracks (2), ♫ A playlist comment for you ♪ ☀️, 20. Mai, Someone posted a comment on your glorious playlist. Hopefully the world is now a better place. Get 8tracks (2) ♫ A playlist comment for you ♪ ☀️ - Someone posted a comment on your glorious playlist. Hopefully the world is now a better place. Get 20. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Simon Britnell, doc2, enthält Anhänge, 18. Mai, Simon Britnell doc2 Anhang 18. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Simon (5), TK Brief, enthält Anhänge, 18. Mai, doc scans On Tue, May 17, 2016 at 7:51 PM, Tommy Britnell &lt;tommy.britnell@googlemail.com&gt; wrote ich, Simon (5) TK Brief - doc scans On Tue, May 17, 2016 at 7:51 PM, Tommy Britnell &lt;tommy.britnell@googlemail.com&gt; wrote Anhang 18. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Irmgard M. Britnell, FW: Geburtstagsgrüße, 16. Mai, Hier Monika Rehnkes email address... Monika Rehnke - monika-rehnke@wrz.de Irmgard M. Britnell FW: Geburtstagsgrüße - Hier Monika Rehnkes email address... Monika Rehnke - monika-rehnke@wrz.de 16. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Hans-Joachim, ich (2), Gorilla Permit, enthält Anhänge, 16. Mai, Forwarded message From: &quot;Hans-Joachim Horn&quot; &lt;hornhj@aol.com&gt; Hans-Joachim, ich (2) Gorilla Permit - Forwarded message From: &quot;Hans-Joachim Horn&quot; &lt;hornhj@aol.com&gt; Anhang 16. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Forschungsanfrage &quot;Ehrenamt in der Flüchtlingshilfe&quot;, enthält Anhänge, 13. Mai, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Forschungsanfrage &quot;Ehrenamt in der Flüchtlingshilfe&quot; - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Anhang 13. Mai Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Stettner Baldham, WG: Informationen, enthält Anhänge, 13. Mai, Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Stettner Baldham WG: Informationen - Diese eMail geht als Bcc… an alle Helferinnen und Helfer des Helferkreises Asyl Grasbrunn Anhang 13. Mai Soziale Netzwerke 1–50 von 1.448 Der Tab &quot;Soziale Netzwerke&quot; enthält keine Nachrichten. Hier werden E-Mails aus sozialen Netzwerken, Plattformen zum Teilen von Medien, Online-Partnervermittlungen und anderen sozialen Websites angezeigt. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. WerbungMake: Newsletter, UNO-Flüchtlingshilfe, the runnymede-on-thames, Resident Advisor 1–50 von 5.729 Der Tab &quot;Werbung&quot; enthält keine Nachrichten. Hier werden Werbeaktionen, Angebote und andere Werbe-E-Mails angezeigt. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Benachrichtigungen 1–50 von 4.025 Der Tab &quot;Benachrichtigungen&quot; enthält keine Nachrichten. Hier werden Bestätigungen, Belege, Kontoauszüge und andere Benachrichtigungen angezeigt. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Alle minimieren Alle maximieren Alle drucken In neuem Fenster öffnen Unser Ruanda-Plan Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Posteingang x Hans-Joachim Horn Anhänge13. Juli (vor 7 Tagen) an mich Lieber Tommy, hier -wie per Whatsapp angekündigt- unser Ruanda Plan als Excel-Dokument. Ein paar Punkte dazu: 1. Wir kommen am Freitag, den 5. August abends an und fahren ins &quot;Five to Five Hotel&quot;. Dort sind wir 3 Nächte. Wir können uns also am Wochenende (6 &amp; 7 August) in Kigali treffen. Klara und ich würden gerne sehen, wo Du lebst und arbeitest und so was alles..... Wir bekommen unseren wagen am Samstag Vormittag. 2. Am Montag fahren wir für 2 Tage zum Kivu-Lake und kommen am Mittwoch, den 10. August zurück. Dann übernachten wir in Kigali für eine Nacht im &quot;Hotel des Mille Colines&quot; aus dem Film &quot;Hotel Ruanda&quot;. 3. Ab DONNERSTAG, den 11. August müsstest Du dann Urlaub nehmen!!! Dann fahren wir morgens nach Musanze (Ruhengeri). Am Freitag, den 12. August machen wir dann unseren Gorilla Treck.... Am Samstag, den 13. August sind wir auch noch im/am Vulcano Nationalpark. Mal sehen, was wir dann machen... (Golden Monkeys, Fossey Grab oder so...) Am Sonntag, den 14. August fahren wir zurück nach Kigali. 4. Was wir dann in der folgenden Woche ( ab 15. August) machen, steht noch nicht fest. Wie Du in dem Excel-Plan siehst, haben wir noch nichts geplant, noch nichts gebucht. Es gibt ja noch weitere Nationalparks und wir wollen noch auf einen der Vulkane steigen. Alles klar??? Die Hotel-Adressen und so stehen im Excel-Sheet. Wie ist das Wetter? Wie viel regnet es? Ab August soll es ja trockener werden... Viele Grüße aus Düsseldorf. Klara &amp; Achim Hans-Joachim Horn, Zwickauer Str. 11, 40627 Düsseldorf, Mobil: +49 171 768 0813 Bereich mit Anhängen Die Virenscanner für Gmail sind vorübergehend nicht verfügbar. Die angehängten Dateien wurden daher nicht auf Viren überprüft. Sie können diese Dateien auf eigenes Risiko herunterladen. Weitere Informationen Vorschau für Anhang &quot;Plan Ruanda 2016-x.xlsx&quot; ansehen [Microsoft Excel] Plan Ruanda 2016-x.xlsx 16 KB Antworten Weiterleiten Zum Antworten oder Weiterleiten hier klicken 3,88 GB (25 %) von 15 GB belegt Verwalten Nutzungsbedingungen - Datenschutz Letzte Kontoaktivität vor 22 Stunden Details Hans-Joachim Horn Zu Kreisen hinzufügen Details anzeigen 3,88 GB (25 %) von 15 GB belegt Verwalten Nutzungsbedingungen - Datenschutz Letzte Kontoaktivität vor 22 Stunden Details In Arbeit... Deutsch Mein Wörterbuch aktivieren Mein Wörterbuch deaktivieren Tastatur einblenden Tastatur ausblenden Einstellungen für Eingabetools Automatisch erzeugte Statusinformationen persönlicher Art, zum Beispiel Bestätigungen, Belege, Rechnungen oder Kontoauszüge Deutsch Mein Wörterbuch aktivieren Mein Wörterbuch deaktivieren Tastatur einblenden Tastatur ausblenden Einstellungen für Eingabetools "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160617150333#index"
                   NS1:content=" current community chat Stack Overflow Meta Stack Overflow Stack Overflow Careers your communities Sign up or log in to customize your list. more stack exchange communities company blog Stack Exchange Inbox Reputation and Badges sign up log in tour help Tour Start here for a quick overview of the site Help Center Detailed answers to any questions you might have Meta Discuss the workings and policies of this site About Us Learn more about Stack Overflow the company Business Learn more about hiring developers or posting ads with us Stack Overflow Questions Jobs Tags Users Badges Ask Question _ Stack Overflow is a community of 4.7 million programmers, just like you, helping each other. Join them; it only takes a minute: Sign up Join the Stack Overflow community to: Ask programming questions Answer and help your peers Get recognized for your expertise Login to Facebook using python requests No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 14 down vote favorite 5 I'm trying to find a way to automatically login to Facebook without browser using Python. I experimented with &quot;requests&quot; lib. Tried several ways: URL = 'http://m.facebook.com' requests.get(URL, auth = ('email@domain.com', 'mypassword')) ... form_data = {'email': 'email@domain.com', 'pass' : 'mypassword' } requests.post(URL, data = form_data) ... requests.post(URL + '?email=email@domain.com&amp;pass=mypassword') The last method fills &quot;email&quot; box on a page but &quot;pass&quot; box remains empty... Could someone help me with this please? Is it possible to emulate FB login using requests? Thanks! python facebook facebook-login python-requests share|improve this question asked Feb 21 '14 at 7:48 alexryabkov 76115 Which library does request come from? urllib2? – Torxed Feb 21 '14 at 7:57 1 @Torxed, Maybe python-requests (Authentication - Requests documentation). – falsetru Feb 21 '14 at 8:31 @falsetru Doh yea figures, thought it was some odd tag of from urllib.request :) – Torxed Feb 21 '14 at 8:33 add a comment | 4 Answers 4 active oldest votes up vote 14 down vote You need to send a complete form. The easiest way to find out what Facebook expects is to use something like Google Chrome's developer tools to monitor your web requests. To make your life easier I've monitored my own login on Facebook, and reproduced it below (with private information redacted, obviously) with the unimportant information stripped: Request URL:https://m.facebook.com/login.php?refsrc=https%3A%2F%2Fm.facebook.com%2F&amp;refid=8 Request Method:POST Form Data: lsd:AVqAE5Wf charset_test:€,´,€,´,水,Д,Є version:1 ajax:0 width:0 pxr:0 gps:0 m_ts:1392974963 li:cxwHUxatQiaLv1nZEYPp0aTB email:... pass:... login:Log In As you can see, the form contains a lot of fields. All of these need to be provided to allow you to log in. Email and password will be provided by your code. The rest of the fields actually have their values set by the HTML that Facebook serves you. This means, to emulate a browser login you need to perform the following steps: Do a GET to the login page (https://m.facebook.com/) Use a HTML parsing library (e.g. BeautifulSoup) to parse the HTML and find the default values of the form fields. The default values are all in &lt;input&gt; HTML elements below the #login_form element. You'll want to find them by name (e.g. charset_test) and then pull out their value attribute. Working out how to do this is outside the scope of this answer, so I'm not going to go into it. Combine the default values of the form fields with your email and password, like so: data = { 'lsd': lsd, 'charset_test': csettest, 'version': version, 'ajax': ajax, 'width': width, 'pxr': pxr, 'gps': gps, 'm_ts': mts, 'li': li, } data['email'] = email data['pass'] = pass data['login'] = 'Log In' Send your login using a Requests Session: s = requests.Session() r = s.post(url, data=data) r.raise_for_status() Send all your future HTTP traffic through that Session. As you can see, this is a non-trivial way of doing things. That's because it's not expected that programs will use the website to log in: instead, you're expected to use their SDK or their web API instead. share|improve this answer answered Feb 21 '14 at 9:43 Lukasa 3,0081019 1 Thank you very much! BTW, I've just found a library called &quot;mechanize&quot;, looks like it can do FB login simpler that with &quot;requests&quot;. – alexryabkov Feb 21 '14 at 10:58 Yeah, mechanize will make this substantially easier. – Lukasa Feb 21 '14 at 13:28 This works for me! Thank you so much! – Charles Chow Sep 20 '15 at 20:48 add a comment | No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 6 down vote I was also searching for answer. Doing it with requests is pain. So, i used mechanize. import mechanize browser = mechanize.Browser() browser.set_handle_robots(False) cookies = mechanize.CookieJar() browser.set_cookiejar(cookies) browser.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7')] browser.set_handle_refresh(False) url = 'http://www.facebook.com/login.php' self.browser.open(url) self.browser.select_form(nr = 0) #This is login-password form -&gt; nr = number = 0 self.browser.form['email'] = YourLogin self.browser.form['pass'] = YourPassw response = self.browser.submit() print response.read() It works. mechanize.browser is emulated browser, so you don't need to send all form values. It will send them as normal browser, you should provide only login and password. Good luck! share|improve this answer edited Nov 11 '15 at 9:52 Liam 8531522 answered Jun 27 '15 at 17:59 rzaaeeff 147212 2 When I use this code I get a FB error page saying that I don't have cookies enabled. – Sparr Jul 9 '15 at 16:44 1 Did you manage to solve your problem? I'm facing the cookies issue as well, no solution so far. Thanks. – Neria Nachum Apr 20 at 11:22 add a comment | up vote 1 down vote First of all, you need ALL the form data. You can't just send user+pass, the server won't allow it. Secondly you will need to take care and use the cookies recieved from Facebook in order for this to work. But all in all, yes you can use request or any other library. But i would reccomend using their API instead. share|improve this answer answered Feb 21 '14 at 7:58 Torxed 9,13553867 add a comment | up vote 0 down vote I can say it's quite annoying to log in to Facebook without using their API. They also like to change everything so often it is quite the job to maintain the code. I did this a while ago, but I don't think my code is up to speed with current Facebook. However it should be a useful starting-point: https://gitorious.org/blogsmashonfb/blogsmashonfb/source/4f7ee94a56fdffe9392485df8999e340f97f4bbe: It has two parts, a webcrawler and a Facebook-handler (the latter is what you are interested in). One major issue you have in your code is that you must first visit Facebook, because they send you a login form with hidden elements that you need to send back. share|improve this answer edited Feb 21 '14 at 9:44 answered Feb 21 '14 at 9:38 deinonychusaur 2,42611330 add a comment | Your Answer draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Email and Password Post as a guest Name Email discard By posting your answer, you agree to the privacy policy and terms of service. Not the answer you're looking for? Browse other questions tagged python facebook facebook-login python-requests or ask your own question. asked 2 years ago viewed 13328 times active 7 months ago Looking for a job? Senior eCommerce Software Engineer Focustron PTENo office location $1,000 - $2,000Remote mwsamazon-mws Project Reviewer UdacityNo office location Remote pythonmachine-learning Senior Back-End Developer TravelBirdAmsterdam, Netherlands RelocationVisa Sponsorship pythondjango Are you a Full Stack Developer - this if for you!! Telefonica InnovationMadrid, Spain RelocationVisa Sponsorship pythonnosql Get the weekly newsletter! In it, you'll get: The week's top questions and answers Important community announcements Questions that need answers see an example newsletter By subscribing, you agree to the privacy policy and terms of service. Linked 26 How to “log in” to a website using Python's Requests module? 0 How do I enable cookies with python requests 0 facebook pages scraping need login 0 python, authentication not recognised - urllib2, requests, asp.net Related 4984 What does the yield keyword do in Python? 1 Using Facebook REST API to login, but meet 'Application does not have the capability to make this API call' 2 Facebook Login “500 internal server error” in touch mode 2 Server-side login with Facebook from iOS native WebView -2 How to add facebook login to Python Django Project? 0 How do I enable cookies with python requests 0 Facebook login flow with to nodejs 0 Facebook login with Python Requests and BeautifulSoup 1 Python requests post blocked by server 0 Python requests: Can't send message to myself via Facebook Hot Network Questions Should I point out that I'm a woman when negotiating starting salary? Can anyone solve this kind of summation in Mathematica?(Screen shot attached) Please help! Why does Zaphod Beeblebrox call Ford Prefect &quot;Ford&quot; when they meet on the Heart of Gold? What is the point of the exhaust? When citing a paper with a lot of authors; is it OK to shorten the author list in the references section? Did Einstein say this about marriage? converting spaces into dashes Rationale for operating the diode in the (reverse biased) breakdown region Why is my mood dictated so much by how well my research is going? Why does Bruce Wayne keep speaking in that low raspy voice to Catwoman? Did Euler prove theorems by example? Why does the sun have to be nearly fully covered to notice any darkening in an eclipse? Is there an image editing software that can open DDS files in Ubuntu? What does &quot;Forgeite&quot; mean? Where does it come from? Use an instance or a class for game resources (wood,iron,gold) Why do dialogs have grey backgrounds? usage of &quot;Mrs&quot; for male Managing alone my work hours - should I stop? Between the twins when laughing How to round a number to a chosen integer Would a 100% simulated war be a way to solve national conflict? Lithp Tranthlator Can this algorithm still be considered a Binary Search algorithm? Can I take out a loan and invest it at higher interest? question feed lang-py about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix &amp; Linux Ask Different (Apple) WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce ExpressionEngine® Answers more (13) Photography Science Fiction &amp; Fantasy Graphic Design Movies &amp; TV Seasoned Advice (cooking) Home Improvement Personal Finance &amp; Money Academia more (9) English Language &amp; Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow Chemistry Biology more (5) Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required rev 2016.6.16.3680 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160711202521#index"
                   NS1:content=" Add a profile photo Welcome to Instagram! Follow accounts to see photos and videos in your feed. Suggestions for You dalailamaVerified Dalai Lama Follow boomfestivalofficial Boom Festival Official Follow nikeVerified nike Follow unicefVerified UNICEF Follow tinyhousetalk TinyHouseTalk Follow southlondonmakerspace South London Makerspace Follow mewlana_jalaluddin_rumi Rumi Follow promoafrika promoafriKa Follow knittingmagazine Knitting Magazine Follow stockholmtapfestival Stockholm Tap Festival Follow Get Started Instagram Search Find People Activity Feed Profile About us Support Blog Press API Jobs Privacy Terms Language © 2016 Instagram "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160708103008#index"
                   NS1:content=" Search: Python ConfigParserExamples ConfigParserExamples FrontPage RecentChanges FindPage HelpContents ConfigParserExamples Page Immutable Page Comments Info Attachments User Login Basic configparser usage These are some examples on using ConfigParser, assuming the following INI file... [SectionOne] Status: Single Name: Derek Value: Yes Age: 30 Single: True [SectionTwo] FavoriteColor = Green [SectionThree] FamilyName: Johnson [Others] Route: 66 &gt;&gt;&gt; import ConfigParser &gt;&gt;&gt; Config = ConfigParser.ConfigParser() &gt;&gt;&gt; Config &lt;ConfigParser.ConfigParser instance at 0x00BA9B20&gt; &gt;&gt;&gt; Config.read(&quot;c:\\tomorrow.ini&quot;) ['c:\\tomorrow.ini'] &gt;&gt;&gt; Config.sections() ['Others', 'SectionThree', 'SectionOne', 'SectionTwo'] &gt;&gt;&gt; Explanation: We first import the configparser, tell it to read the file, and get a listing of the sections. Sections are listed in square brackets []. Next, we are going to get some settings, after defining a helper function. The Function: def ConfigSectionMap(section): dict1 = {} options = Config.options(section) for option in options: try: dict1[option] = Config.get(section, option) if dict1[option] == -1: DebugPrint(&quot;skip: %s&quot; % option) except: print(&quot;exception on %s!&quot; % option) dict1[option] = None return dict1 Now the code: &gt;&gt;&gt; Name = ConfigSectionMap(&quot;SectionOne&quot;)['name'] &gt;&gt;&gt; Age = ConfigSectionMap(&quot;SectionOne&quot;)['age'] &gt;&gt;&gt; print &quot;Hello %s. You are %s years old.&quot; % (Name, Age) Hello Derek. You are 30 years old. This works great most of the time, but what about the &quot;Value: Yes&quot; and &quot;Single: True&quot; values? Those are booleans. They can be either True or False, Yes or No, 1 or 0, on or off. To read a boolean value, you use: Config.getboolean(section, option) Example, continuing from above: &gt;&gt;&gt; single = Config.getboolean(&quot;SectionOne&quot;, &quot;single&quot;) &gt;&gt;&gt; single True You can also use getint(section, option) to get a number as an int. This may be easier to use than int(Config.get(section, option)) There is also getfloat which is used the same as getint, but, as you guessed, returns a float instead of an int. Notes on reading an INI file lines beginning with a semicolon ';' a pound sign '#' or the letters 'REM' (uppercase or lowercase) will be ignored. You may use these for comments if you want. You cannot put a comment on an option line. It will only be treated as a comment if it is at the beginning of the line! Writing an INI file When you write to an INI file, you will wipe out all comments. Assuming the config file doesn't exist yet, this is the code to create one: # lets create that config file for next time... cfgfile = open(&quot;c:\\next.ini&quot;,'w') # add the settings to the structure of the file, and lets write it out... Config.add_section('Person') Config.set('Person','HasEyes',True) Config.set('Person','Age', 50) Config.write(cfgfile) cfgfile.close() Advanced configparser usage ExtendedInterpolation Using ExtendedInterpolation one can make use of cross-chapter flexible parameter values. For instance, using the following ini file: [SectionOne] Param1: Hello Param2: World [SectionTwo] Param1: ${SectionOne:Param1} ${SectionOne:Param2} [SectionThree] Alpha: One Bravo: Two Charlie: ${Alpha} Mississippi By setting _interpolation to ExtendedInterpolation() the values become dynamic. &gt;&gt;&gt; import configparser &gt;&gt;&gt; settings = configparser.ConfigParser() &gt;&gt;&gt; settings._interpolation = configparser.ExtendedInterpolation() &gt;&gt;&gt; settings.read('settings.ini') ['settings.ini'] &gt;&gt;&gt; settings.sections() ['SectionOne', 'SectionTwo', 'SectionThree'] &gt;&gt;&gt; settings.get('SectionTwo', 'Param1') 'Hello World' &gt;&gt;&gt; settings.get('SectionThree', 'Charlie') 'One Mississippi' CategoryDocumentation ConfigParserExamples (last edited 2016-04-11 04:17:05 by bignose) MoinMoin Powered Python Powered GPL licensed Valid HTML 4.01 Unable to edit the page? See the FrontPage for instructions. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160615143837#index"
                   NS1:content=" That equation is this… t – Time in hours. Its the time that the battery will last given a particular rate of discharge (the current). H – The discharge time in hours that the Amp Hour specification is based on. For example, if you had a 100 Amp Hour battery at a 20 hour discharge rate, H would equal 20. C – The battery capacity in Amp Hours based on the specified discharge time. For a 100 Amp Hour battery, this would be I – This is the current that we’re solving for. For example, if we wanted to know how long a battery would last while drawing 7.5 amps, we would enter it here. k – the Peukert Exponent. Every battery has its own Peukert exponent. Sometimes the manufacturer will provide it and other times we may need to figure it out. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160824130851#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" t.a.britnell@gmail.com wird geladen Standardansicht wird geladen | (für langsame Verbindungen) Der Vorgang dauert länger als gewöhnlich. Versuchen Sie, die Seite zu aktualisieren. Wenn das nicht funktioniert, können Sie: Deaktivieren Sie Labs und versuchen Sie es noch einmal. Wenn Sie nur über eine langsame Verbindung verfügen, verwenden Sie die . Weitere Informationen zur Fehlerbehebung finden Sie in der Hilfe. Konversation geöffnet. 2 Nachrichten. Alle Nachrichten gelesen. Direkt zum Inhalt Gmail mit Screenreadern verwenden Tastenkombinationen Gmail-Anleitung für die Standardansicht Thomas Mein Konto Suche Maps Play Gmail Drive Kalender Google+ Übersetzer Fotos Gmail Verknüpfung hinzufügen Mehr Docs Books Blogger Kontakte Hangouts Noch mehr von Google Ändern Thomas Britnell t.a.britnell@gmail.com Google+ Profil–Datenschutz Mein Konto Google+ Profil-Symbol Thomas Britnell t.a.britnell@gmail.com Google+ Profil-Symbol Tommy Wonday tommy.britnell@googlemail.com (Standard) Meine Google+ Seiten › Konto hinzufügen Abmelden Suche Ausgeblendete Felder Gmail Logo Gmail Schreiben Labels Posteingang Markiert Wichtig Gesendet Entwürfe (5) Kreise ▼ Mehr Chats Alle Nachrichten Spam (1) Papierkorb Kategorien ▼ Labels verwalten Neues Label erstellen Art des Posteingangs Standard Wichtige zuerst Ungelesene zuerst Markierte zuerst Sortierter Eingang Testen Sie alle Designs und wählen Sie das, was Ihnen am besten gefällt Testen Sie alle neuen Designs für den Posteingang, um zu sehen, welches Ihnen am besten gefällt. Sie können jederzeit zurückwechseln. Art des Posteingangs Standard Wichtige zuerst Ungelesene zuerst Markierte zuerst Sortierter Eingang Testen Sie alle Designs und wählen Sie das, was Ihnen am besten gefällt Testen Sie alle neuen Designs für den Posteingang, um zu sehen, welches Ihnen am besten gefällt. Sie können jederzeit zurückwechseln. Art des Posteingangs Standard Wichtige zuerst Ungelesene zuerst Markierte zuerst Sortierter Eingang Testen Sie alle Designs und wählen Sie das, was Ihnen am besten gefällt Testen Sie alle neuen Designs für den Posteingang, um zu sehen, welches Ihnen am besten gefällt. Sie können jederzeit zurückwechseln. Minimieren Hangouts Hoppla! Beim Verbindungsaufbau zu Google ist ein Problem aufgetreten. Wir versuchen es weiter… Ursache hierfür können Netzwerk- oder Proxyprobleme sein. Weitere Informationen E-Mails werden abgerufen... Mehr Alle Keine Gelesen Ungelesen Markiert Nicht markiert 1–50 von 258 Mehr 2 von 258 Konversationen Allgemein Soziale Netzwerke Werbung Benachrichtigungen Allgemein 1–50 von 258 Der Tab &quot;Allgemein&quot; enthält keine Nachrichten. Hier werden persönliche Nachrichten sowie alle Nachrichten angezeigt, die nicht in anderen Tabs erscheinen. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Anya, ich (6), GLE Update, 23. Aug., Hi Anya, Yes that's a good idea, Thursday 1pm suits me fine. I am best to reach on WhatsApp if that works for you, else we can try Skype. +250 7899 23414 Tommy.britnell@gmail.com for Skype Kind Anya, ich (6) GLE Update - Hi Anya, Yes that's a good idea, Thursday 1pm suits me fine. I am best to reach on WhatsApp if that works for you, else we can try Skype. +250 7899 23414 Tommy.britnell@gmail.com for Skype Kind 23. Aug. Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Anya, ich (2), Technical Details for Call Tomorrow | Engineers Without Borders UK volunteers | Team En..., 23. Aug., Hi Anya, Reactivated my skype account, username is t.britnell or email tabritnell@gmail.com for the same account. Got citrix GoToMetting running too, speak to you later! 2016-08-23 17:09 GMT+02:00 Anya Anya, ich (2) Technical Details for Call Tomorrow | Engineers Without Borders UK volunteers | Team En... - Hi Anya, Reactivated my skype account, username is t.britnell or email tabritnell@gmail.com for the same account. Got citrix GoToMetting running too, speak to you later! 2016-08-23 17:09 GMT+02:00 Anya 23. Aug. Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Anya, ich (2), Confirming Wed 24th August | Engineers Without Borders UK volunteers | Team Energy | Sk..., 22. Aug., Hi Anya, suits me fine, thanks! On 22 Aug 2016 11:57, &quot;Anya Boyd&quot; &lt;anya.boyd@ewb-uk.org&gt; wrote: Thank you all for your prompt response and flexibility with the spread of timezones. 1/ Anya, ich (2) Confirming Wed 24th August | Engineers Without Borders UK volunteers | Team Energy | Sk... - Hi Anya, suits me fine, thanks! On 22 Aug 2016 11:57, &quot;Anya Boyd&quot; &lt;anya.boyd@ewb-uk.org&gt; wrote: Thank you all for your prompt response and flexibility with the spread of timezones. 1/ 22. Aug. Markiert Klicken, um Gmail diese Konversation als wichtig beizubringen markiert, Tumblr, Account notice: Your username needs attention, 21. Aug., Hello, ariane-koenigshof It's been a while since you've been on Tumblr, and we wanted to make sure that you're still interested in using the username ariane-koenigshof. If so, just click Tumblr Account notice: Your username needs attention - Hello, ariane-koenigshof It's been a while since you've been on Tumblr, and we wanted to make sure that you're still interested in using the username ariane-koenigshof. If so, just click 21. Aug. Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Anya Boyd, Engineers Without Borders UK volunteers | Team Energy | Skype call, 19. Aug., Hi All, This year we are going to be setting up thematic calls between the various volunteers working on similar work streams - ie energy, water or the built environment. The Energy Team is the biggest Anya Boyd Engineers Without Borders UK volunteers | Team Energy | Skype call - Hi All, This year we are going to be setting up thematic calls between the various volunteers working on similar work streams - ie energy, water or the built environment. The Energy Team is the biggest 19. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Ndatimana Mora, GREETING, 12. Aug., Hi You Too How Are You? How Is your Family? How Is yourjob? Me Iam Fine . My Family Is Ok. My friend Now I Have Problem? Best Wishes Mora On 8/11/16, Thomas Britnell &lt;tabritnell@gmail.com&gt; wrote: Ndatimana Mora GREETING - Hi You Too How Are You? How Is your Family? How Is yourjob? Me Iam Fine . My Family Is Ok. My friend Now I Have Problem? Best Wishes Mora On 8/11/16, Thomas Britnell &lt;tabritnell@gmail.com&gt; wrote: 12. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen EWB-UK Placements, Good News for 2016 Volunteers : Accredited CPD in Engineering in an International Devel..., 12. Aug., Dear All, Some good news for a Friday afternoon. For the first time this year we have successfully accredited our training for overseas volunteers with the CPD (Continuing Professional Development) EWB-UK Placements Good News for 2016 Volunteers : Accredited CPD in Engineering in an International Devel... - Dear All, Some good news for a Friday afternoon. For the first time this year we have successfully accredited our training for overseas volunteers with the CPD (Continuing Professional Development) 12. Aug. Markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen markiert, EWB-UK, Martin (3), IMPORTANT - Thomas Britnell - Monitoring and Evaluation Log, 11. Aug., Hi Thomas, This is a polite reminder that you have not updated anything in your Monitoring and Evaluation log. Seeing as you have been with GLE since June there should be plenty to add and it should be EWB-UK, Martin (3) IMPORTANT - Thomas Britnell - Monitoring and Evaluation Log - Hi Thomas, This is a polite reminder that you have not updated anything in your Monitoring and Evaluation log. Seeing as you have been with GLE since June there should be plenty to add and it should be 11. Aug. Nicht markiert Klicken, um Gmail diese Konversation als wichtig beizubringen Google, Neue Anmeldung über Samsung Galaxy J5, 11. Aug., Neue Anmeldung über Samsung Galaxy J5 Hallo Thomas, Ihr Google-Konto tabritnell@gmail.com wurde soeben zur Anmeldung auf einem Samsung Galaxy J5-Gerät verwendet. Thomas Britnell tabritnell@gmail.com Google Neue Anmeldung über Samsung Galaxy J5 - Neue Anmeldung über Samsung Galaxy J5 Hallo Thomas, Ihr Google-Konto tabritnell@gmail.com wurde soeben zur Anmeldung auf einem Samsung Galaxy J5-Gerät verwendet. Thomas Britnell tabritnell@gmail.com 11. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Jonathan .. Sam, Anya (9), EWB Placement Arrival, 10. Aug., Dear Sam, Just to re-iterate Martin's words that this is indeed very disappointing for all involved. Thank you for thinking of other opportunities, however at this point if I could ask that it is Jonathan .. Sam, Anya (9) EWB Placement Arrival - Dear Sam, Just to re-iterate Martin's words that this is indeed very disappointing for all involved. Thank you for thinking of other opportunities, however at this point if I could ask that it is 10. Aug. Nicht markiert Klicken, um Gmail diese Konversation als wichtig beizubringen Google, New sign-in from Samsung Galaxy J5, 8. Aug., New sign-in from Samsung Galaxy J5 You received this message because tabritnell@gmail.com is listed as the recovery email for tommy.britnell@googlemail.com. If tommy.britnell@googlemail.com is not your Google New sign-in from Samsung Galaxy J5 - New sign-in from Samsung Galaxy J5 You received this message because tabritnell@gmail.com is listed as the recovery email for tommy.britnell@googlemail.com. If tommy.britnell@googlemail.com is not your 8. Aug. Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Martin, ich (7), Pre departure follow up, enthält Anhänge, 3. Aug., The project plan. -- Martin Findlay Regional Partnership Coordinator (Africa) Forwarded message From: Martin Findlay &lt;martin.findlay@ewb-uk.org&gt; Date: 24 May 2016 at 20:54 Martin, ich (7) Pre departure follow up - The project plan. -- Martin Findlay Regional Partnership Coordinator (Africa) Forwarded message From: Martin Findlay &lt;martin.findlay@ewb-uk.org&gt; Date: 24 May 2016 at 20:54 Anhang 3. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan, FW: Happy Birthday - Impact Hub Kigali, 3. Aug., Team – Impact Hub, of which our company is an honorary member, has a big party tonight on the roof. Should be fun. All of our team would be very welcome there. Sam From: Jonathan Stever [mailto:jon. Sam Dargan FW: Happy Birthday - Impact Hub Kigali - Team – Impact Hub, of which our company is an honorary member, has a big party tonight on the roof. Should be fun. All of our team would be very welcome there. Sam From: Jonathan Stever [mailto:jon. 3. Aug. Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Martin, ich (3), Catch up, 2. Aug., Hi Thomas, I had a great time at Glastonbury festival and then up in Scotland with the family. I've also just got back from another festival this weekend, so feeling pretty tired! Great, well now I Martin, ich (3) Catch up - Hi Thomas, I had a great time at Glastonbury festival and then up in Scotland with the family. I've also just got back from another festival this weekend, so feeling pretty tired! Great, well now I 2. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen EWB-UK Placements, IMPORTANT : Medical Cover for Pre-Existing Conditions, 1. Aug., Dear Volunteers, I hope you are all enjoying your various placements/Member Led Partnerships or preparations for them if you aren't already overseas. I am writing to you all to make an important EWB-UK Placements IMPORTANT : Medical Cover for Pre-Existing Conditions - Dear Volunteers, I hope you are all enjoying your various placements/Member Led Partnerships or preparations for them if you aren't already overseas. I am writing to you all to make an important 1. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Honore Basazababo, EmonTx payload format, 1. Aug., power1,power2,power3,power4,v_battery_bank,dc_current,, dc_power, Vrms,T1,T2,T3,T4,T5,T6,pulseCount -- Honore Basazababo Electronics Engineer +250 (0) 783.490.703 www.gle.solar Honore Basazababo EmonTx payload format - power1,power2,power3,power4,v_battery_bank,dc_current,, dc_power, Vrms,T1,T2,T3,T4,T5,T6,pulseCount -- Honore Basazababo Electronics Engineer +250 (0) 783.490.703 www.gle.solar 1. Aug. Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Honore Basazababo, EmonTX Libraries, enthält Anhänge, 20. Juli, http://openenergymonitor.org/emon/buildingblocks/installing-arduino-libraries -- Honore Basazababo Electronics Engineer +250 (0) 783.490.703 www.gle.solar Honore Basazababo EmonTX Libraries - http://openenergymonitor.org/emon/buildingblocks/installing-arduino-libraries -- Honore Basazababo Electronics Engineer +250 (0) 783.490.703 www.gle.solar Anhang 20. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Alp Tilev, comments on GitHub for meonpiLCD, 13. Juli, HI Thomas, Can you checkout the comments on GitHub I left of your latest PR? Let's close this first please. (Please check your email settings for GitHub so your get alerts when your name is Alp Tilev comments on GitHub for meonpiLCD - HI Thomas, Can you checkout the comments on GitHub I left of your latest PR? Let's close this first please. (Please check your email settings for GitHub so your get alerts when your name is 13. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen IET Travel Awards 2016, Deadline for submitting an application for July round of Travel Awards, 11. Juli, Dear colleague, Just a reminder - the July deadline for submission for IET Travel Awards 2016 is 17:00 pm (BST) 27 July 2016. If you wish to submit an aapplication you must do so by this date. Full IET Travel Awards 2016 Deadline for submitting an application for July round of Travel Awards - Dear colleague, Just a reminder - the July deadline for submission for IET Travel Awards 2016 is 17:00 pm (BST) 27 July 2016. If you wish to submit an aapplication you must do so by this date. Full 11. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan, File naming and saving protocols, 11. Juli, Team, Because we have so many new members, I will explain the company file naming protocols. The point is to have solid and trackable version control. This is an important thing for an engineering Sam Dargan File naming and saving protocols - Team, Because we have so many new members, I will explain the company file naming protocols. The point is to have solid and trackable version control. This is an important thing for an engineering 11. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan, Review session, 11. Juli, Alp, I propose we meet with Thomas at 10am Tuesday (tomorrow) Does this suit you? Thomas – if Alp confirms – we are on. If he suggests another time, we go for that time. Thanks, Sam Sam Dargan Review session - Alp, I propose we meet with Thomas at 10am Tuesday (tomorrow) Does this suit you? Thomas – if Alp confirms – we are on. If he suggests another time, we go for that time. Thanks, Sam 11. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam, Alp, ich (5), WV visit to office on Monday, 9. Juli, Thomas, 9am Monday will be fine. They wont be here that early and it wont take you long to sort your desk. Thanks, Sam Original Message From: Thomas Britnell [mailto:tabritnell@gmail.com] Sam, Alp, ich (5) WV visit to office on Monday - Thomas, 9am Monday will be fine. They wont be here that early and it wont take you long to sort your desk. Thanks, Sam Original Message From: Thomas Britnell [mailto:tabritnell@gmail.com] 9. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan, after sales service document / content, enthält Anhänge, 7. Juli, Team – newest version of After Sales service content is on server. General. After Sales Services Sam Dargan after sales service document / content - Team – newest version of After Sales service content is on server. General. After Sales Services Anhang 7. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Alp (3), remote flashing, 5. Juli, More documentation on this here: http://sbabic.github.io/swupdate/ Alp Tilev CTO, Great Lakes Energy ich, Alp (3) remote flashing - More documentation on this here: http://sbabic.github.io/swupdate/ Alp Tilev CTO, Great Lakes Energy 5. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam, Alp (3), July Holidays, 4. Juli, Thanks Alp. And my number is 255.742.600.148 On 4 Jul 2016 10:28, &quot;Alp Tilev&quot; &lt;alp@gle. Sam, Alp (3) July Holidays - Thanks Alp. And my number is 255.742.600.148 On 4 Jul 2016 10:28, &quot;Alp Tilev&quot; &lt;alp@gle. 4. Juli Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Anya Boyd, Fundraising Snapshot | 2016 Vols, 29. Juni, Hi All, I hope you are doing well - and that those on placement are settling in, that those traveling Anya Boyd Fundraising Snapshot | 2016 Vols - Hi All, I hope you are doing well - and that those on placement are settling in, that those traveling 29. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam, Rachel (2), Article for Igihe, draft, enthält Anhänge, 29. Juni, It's a good concept. Would it be possible to shorten it to one page? I think more people might Sam, Rachel (2) Article for Igihe, draft - It's a good concept. Would it be possible to shorten it to one page? I think more people might Anhang 29. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Alp Tilev (2), Re: [GreatLakesEnergy/sesh-rmc-powerboard] Tomas initial (#1), 27. Juni, Merged #1. — You are receiving this because you authored the thread. Reply to this email directly, Alp Tilev (2) Re: [GreatLakesEnergy/sesh-rmc-powerboard] Tomas initial (#1) - Merged #1. — You are receiving this because you authored the thread. Reply to this email directly, View Pull Request 27. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Anya (6), urgent letter for Visa, enthält Anhänge, 27. Juni, Awesome, Thank you very much Anya! How are things in London? From what I hear from here the whole ich, Anya (6) urgent letter for Visa - Awesome, Thank you very much Anya! How are things in London? From what I hear from here the whole Anhang 27. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan, FW: Emailing: Partnership Agreement, enthält Anhänge, 27. Juni, From: Jonny Gutteridge [mailto:jonny.gutteridge@ewb-uk.org] Sent: Thursday, December 13, 2012 8:11 PM Sam Dargan FW: Emailing: Partnership Agreement - From: Jonny Gutteridge [mailto:jonny.gutteridge@ewb-uk.org] Sent: Thursday, December 13, 2012 8:11 PM Anhang 27. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Alp Tilev, where you able to upload the eaglecad for the rmc power to GitHub?, 27. Juni, https://github.com/GreatLakesEnergy/sesh-rmc-powerboard Alp Tilev CTO, Great Lakes Energy http://gle. Alp Tilev where you able to upload the eaglecad for the rmc power to GitHub? - https://github.com/GreatLakesEnergy/sesh-rmc-powerboard Alp Tilev CTO, Great Lakes Energy http://gle. 27. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen IET Travel Awards 2016, Deadline for submitting an application for July round of Travel Awards, 27. Juni, Dear colleague, Just a reminder - the July deadline for submission for IET Travel Awards 2016 is 17: IET Travel Awards 2016 Deadline for submitting an application for July round of Travel Awards - Dear colleague, Just a reminder - the July deadline for submission for IET Travel Awards 2016 is 17: 27. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Alp (7), Phone, 26. Juni, Cool thats great. For longterm I still need to get a phone though. Would be worried of losing or ich, Alp (7) Phone - Cool thats great. For longterm I still need to get a phone though. Would be worried of losing or 26. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen portal, Simon, ich (9), ElsterOnline-Portal: Benachrichtigung ueber neue Bescheiddaten, 26. Juni, yeah no problem, it shouldnt take long, just check if the usb stick etc are there else I need to portal, Simon, ich (9) ElsterOnline-Portal: Benachrichtigung ueber neue Bescheiddaten - yeah no problem, it shouldnt take long, just check if the usb stick etc are there else I need to 26. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Bente, Bente, ich (7), House Kacyiru, enthält Anhänge, 25. Juni, Bente! Yes! sorry i forgot, for the past few days ive had an upset tummy and not done much. Noo i Bente, Bente, ich (7) House Kacyiru - Bente! Yes! sorry i forgot, for the past few days ive had an upset tummy and not done much. Noo i Anhang 25. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Alp Tilev, OOF Re: Phone, 24. Juni, Hello, Thank you for your email. I'll be traveling for the next couple of weeks, so please expect Alp Tilev OOF Re: Phone - Hello, Thank you for your email. I'll be traveling for the next couple of weeks, so please expect 24. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan, Monday, 24. Juni, Team, Monday we will not be able to have our meeting at 10am as usual. Aime and I will be visiting Sam Dargan Monday - Team, Monday we will not be able to have our meeting at 10am as usual. Aime and I will be visiting 24. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Ivan (6), print pleeeease, enthält Anhänge, 24. Juni, ​No homo dude.​ On Fri, Jun 24, 2016 at 2:03 PM, Thomas Britnell &lt;tabritnell@gmail.com&gt; wrote: ich, Ivan (6) print pleeeease - ​No homo dude.​ On Fri, Jun 24, 2016 at 2:03 PM, Thomas Britnell &lt;tabritnell@gmail.com&gt; wrote: Anhang 24. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Honore Basazababo, Heaven restaurant` RMC, 22. Juni, We installed RMC at heaven but we faced some challenges which we will handle tomorrow , They are Honore Basazababo Heaven restaurant` RMC - We installed RMC at heaven but we faced some challenges which we will handle tomorrow , They are 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Honore Basazababo, dashboard, 22. Juni, http://sesh-dev.westeurope.cloudapp.azure.com:3000/dashboard/db/sesh-dashboard -- Honore Basazababo Honore Basazababo dashboard - http://sesh-dev.westeurope.cloudapp.azure.com:3000/dashboard/db/sesh-dashboard -- Honore Basazababo 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam Dargan (2), FW: Victron Energy News - wk23 2016, enthält Anhänge, 22. Juni, Sometime tell me your thoughts on the battery Life product from Victron and how it will affect us, Sam Dargan (2) FW: Victron Energy News - wk23 2016 - Sometime tell me your thoughts on the battery Life product from Victron and how it will affect us, Anhang 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen sezibera job, hi!, 22. Juni, hi,i am Job from Fablab Rwanda we receive you email.so we can work with you no ploblem but your phone sezibera job hi! - hi,i am Job from Fablab Rwanda we receive you email.so we can work with you no ploblem but your phone 22. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam, ich (3), News?, 22. Juni, Thomas, Please bring your passport to the office today, assuming you are now feeling better. If you Sam, ich (3) News? - Thomas, Please bring your passport to the office today, assuming you are now feeling better. If you 22. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam, ich (3), FW: Safe, sustainable, and now 24 volts, 21. Juni, Thanks Sam, I will look forward to playing with this. I will be staying home today, felt ill Sam, ich (3) FW: Safe, sustainable, and now 24 volts - Thanks Sam, I will look forward to playing with this. I will be staying home today, felt ill 21. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Honore Basazababo, RMC enclosure, enthält Anhänge, 20. Juni, -- Honore Basazababo Electronics Engineer +250 (0) 783.490.703 www.gle.solar Honore Basazababo RMC enclosure - -- Honore Basazababo Electronics Engineer +250 (0) 783.490.703 www.gle.solar Anhang 20. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Ray, Martin (5), EwB - Africa - GLE, 19. Juni, Hi Ray, Sounds like interesting work! If you're ever back in the UK and have the time, I'm ich, Ray, Martin (5) EwB - Africa - GLE - Hi Ray, Sounds like interesting work! If you're ever back in the UK and have the time, I'm 19. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Alp (2), server, 17. Juni, Hi Tom, Not sure about samba and linux its been a while. One easier way to do it is accessing it ich, Alp (2) server - Hi Tom, Not sure about samba and linux its been a while. One easier way to do it is accessing it 17. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund der an der Konversation beteiligten Personen wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen Sam, Rachel (2), Sam's schedule today, 17. Juni, Does the online quoting tool have pricing? If so, we'll have to do financial review before Sam, Rachel (2) Sam's schedule today - Does the online quoting tool have pricing? If so, we'll have to do financial review before 17. Juni Nicht markiert Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Sam (2), housing, 16. Juni, Randy – no reply back from you on rooms. Thoughts? Sam From: Thomas Britnell [mailto:tabritnell@gmail ich, Sam (2) housing - Randy – no reply back from you on rooms. Thoughts? Sam From: Thomas Britnell [mailto:tabritnell@gmail 16. Juni Nicht markiert Diese Nachricht ist vor allem aufgrund Ihrer Beteiligung an dieser Konversation wichtig. Klicken, um Gmail diese Konversation als unwichtig beizubringen ich, Sam, Ray (9), ray, 15. Juni, Hey Tom, Thanks for the offer, but I've still got plenty of friends I can crash with. I'll ich, Sam, Ray (9) ray - Hey Tom, Thanks for the offer, but I've still got plenty of friends I can crash with. I'll 15. Juni Soziale Netzwerke 1–50 von 167 Der Tab &quot;Soziale Netzwerke&quot; enthält keine Nachrichten. Hier werden E-Mails aus sozialen Netzwerken, Plattformen zum Teilen von Medien, Online-Partnervermittlungen und anderen sozialen Websites angezeigt. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Werbung 1–50 von 132 Der Tab &quot;Werbung&quot; enthält keine Nachrichten. Hier werden Werbeaktionen, Angebote und andere Werbe-E-Mails angezeigt. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Benachrichtigungen 1–50 von 176 Der Tab &quot;Benachrichtigungen&quot; enthält keine Nachrichten. Hier werden Bestätigungen, Belege, Kontoauszüge und andere Benachrichtigungen angezeigt. Wenn Sie Tabs hinzufügen oder entfernen möchten, klicken Sie auf Posteingangseinstellungen. Alle minimieren Alle maximieren Alle drucken In neuem Fenster öffnen Technical Details for Call Tomorrow | Engineers Without Borders UK volunteers | Team Energy Diese Nachricht ist vor allem wichtig, weil sie direkt an Sie gesendet wurde. Klicken, um Gmail diese Konversation als unwichtig beizubringen Posteingang x Anya Boyd Hi All, Looking forward to speaking with you tomorrow. We are due to have 8 p... 17:09 (vor 19 Stunden) Hi All, Looking forward to speaking with you tomorrow. We are due to have 8 p... Anya Boyd 17:09 (vor 19 Stunden) an Calum; Dan; Elliott; Nav's; Jenny; mich; Isobelle; Jonathan; Stuart; Tash; EWB-UK Hi All, Looking forward to speaking with you tomorrow. We are due to have 8 people on the call across 3 continents, some on cell phones, some on internet connections. So I kindly ask of you all to be patient and flexible. Hopefully for subsequent calls the technological hiccups will be sorted. To allow for these technical hiccups, please be prepared for two options tomorrow. We will try Option 1 first. Option 1: Go To Meeting This requires you to have spent a couple of minutes downloading the Citrix software (which should be automatically prompted when you follow the link) Thematic Energy Call Wed, Aug 24, 2016 1:00 PM - 3:00 PM BST Please join my meeting from your computer, tablet or smartphone. https://global.gotomeeting.com/join/592282685 You can also dial in using your phone. United Kingdom : +44 (0) 330 221 0086 Access Code: 592-282-685 First GoToMeeting? Try a test session: http://help.citrix.com/getready For Calum &amp; Dan if your internet does not work, we will send a toll free number for you from the Philippines. 2/ Option 2: Skype Call We have the following skype details for you, please check them &amp; add them if they are missing. We will then add you from an 'ewb-uk' skype account. jenny.hawkin nav.sawhney stuwelly85 dan_frydman calumr1987 jonnie clowes ?? Issobelle Logan ?? Thomas Britnell ?? For Calum &amp; Dan if your internet does not work, we will dial you in on your cell phone. Please shout if you have any questions. Thanks Anya On 22 August 2016 at 10:57, Anya Boyd &lt;anya.boyd@ewb-uk.org&gt; wrote: Thank you all for your prompt response and flexibility with the spread of timezones. 1/ We confirm that the call will go ahead on Wednesday 24th August, UK time 13:00-15:00. We hope the below timezones are correct for you. UK 0 13:00-15:00 Mal &amp; Php +7 20:00-22:00 Rwanda +1 14:00-16:00 Kenya +2 15:00-17:00 Peru -6 07:00-09:00 2/ We will send the details of the conference call to you soonest, which you can access via your laptops if you have an internet connection. If you have unreliable internet access at the time of the call please let us know so that we can potentially add your cell phone/landline numbers. Thomas &amp; Nav, please let us know if you will be able to join at this time. Many thanks Anya On 19 August 2016 at 15:19, Anya Boyd &lt;anya.boyd@ewb-uk.org&gt; wrote: Hi All, This year we are going to be setting up thematic calls between the various volunteers working on similar work streams - i.e. energy, water or the built environment. The Energy Team is the biggest and spans 3 continents, so we have suggested a couple of time slots that might work for all of you. Unfortunately those in Peru or Malaysia/Philippines will have slightly extreme early or late options. I ask that you do your best to be accommodating. Those of you currently working on Energy are as follows (I have included the links to their respective projects): - Jenny Hawkins, Malaysian Borneo, Fellowship 5 - Jonny Clowes, Kenya, Placement 3 - Thomas Britnell, Rwanda. Placement 1 - Isobelle Logan, Peru, Placement 6 - Calum &amp; Dan, Philipinnes, Placement 4 &amp; Placement 5 - Elliot &amp; Nav, India, Placement 8 &amp; Placement 9 (Stuart Llewellyn, Peru, Placement 7, from September only) (Tash Perros, Malaysian Borneo, Fellowship 6, from November only) We will have a more structured agenda closer to the time, however we would broadly aim to: * Share what you've been working on * Raise challenges/issues * Support each other with potential resources or similar learning experiences * Start building collective knowledge across the energy work of volunteers Please complete this doodle poll on which scenario suits you best. I have indicated UK time in the Doodle, but below is what this means in practise: Country Time diff UK 0 13:00-15:00 14.00-16:00 Mal &amp; Php +7 20:00-22:00 21:00-23:00 Rwanda +1 14:00-16:00 15:00-17:00 Kenya +2 15:00-17:00 16:00-18:00 Peru -6 07:00-09:00 08:00-10:00 Looking forward to speaking with you all, Anya -- Anya Boyd Head of International Partnerships -- Anya Boyd Head of International Partnerships -- Anya Boyd Head of International Partnerships Engineers Without Borders UK The Foundry, 17 Oval Way London, SE11 5RR t: 0203 752 5820 f: 0870 123 1905 Engineers Without Borders UK is a registered charity in England &amp; Wales (No. 1101849) and Scotland (No. SC043537) and is a company limited by guarantee (No. 04856607). Antworten Allen antworten Weiterleiten Thomas Britnell &lt;t.a.britnell@gmail.com&gt; 09:25 (vor 3 Stunden) an Anya Hi Anya, Reactivated my skype account, username is t.britnell or email t.a.britnell@gmail.com for the same account. Got citrix GoToMetting running too, speak to you later! 2016-08-23 17:09 GMT+02:00 Anya Boyd &lt;anya.boyd@ewb-uk.org&gt;: Hi All, Looking forward to speaking with you tomorrow. We are due to have 8 people on the call across 3 continents, some on cell phones, some on internet connections. So I kindly ask of you all to be patient and flexible. Hopefully for subsequent calls the technological hiccups will be sorted. To allow for these technical hiccups, please be prepared for two options tomorrow. We will try Option 1 first. Option 1: Go To Meeting This requires you to have spent a couple of minutes downloading the Citrix software (which should be automatically prompted when you follow the link) Thematic Energy Call Wed, Aug 24, 2016 1:00 PM - 3:00 PM BST Please join my meeting from your computer, tablet or smartphone. https://global.gotomeeting.com/join/592282685 You can also dial in using your phone. United Kingdom : +44 (0) 330 221 0086 Access Code: 592-282-685 First GoToMeeting? Try a test session: http://help.citrix.com/getready For Calum &amp; Dan if your internet does not work, we will send a toll free number for you from the Philippines. 2/ Option 2: Skype Call We have the following skype details for you, please check them &amp; add them if they are missing. We will then add you from an 'ewb-uk' skype account. jenny.hawkin nav.sawhney stuwelly85 dan_frydman calumr1987 jonnie clowes ?? Issobelle Logan ?? Thomas Britnell ?? For Calum &amp; Dan if your internet does not work, we will dial you in on your cell phone. Please shout if you have any questions. Thanks Anya On 22 August 2016 at 10:57, Anya Boyd &lt;anya.boyd@ewb-uk.org&gt; wrote: Thank you all for your prompt response and flexibility with the spread of timezones. 1/ We confirm that the call will go ahead on Wednesday 24th August, UK time 13:00-15:00. We hope the below timezones are correct for you. UK 0 13:00-15:00 Mal &amp; Php +7 20:00-22:00 Rwanda +1 14:00-16:00 Kenya +2 15:00-17:00 Peru -6 07:00-09:00 2/ We will send the details of the conference call to you soonest, which you can access via your laptops if you have an internet connection. If you have unreliable internet access at the time of the call please let us know so that we can potentially add your cell phone/landline numbers. Thomas &amp; Nav, please let us know if you will be able to join at this time. Many thanks Anya On 19 August 2016 at 15:19, Anya Boyd &lt;anya.boyd@ewb-uk.org&gt; wrote: Hi All, This year we are going to be setting up thematic calls between the various volunteers working on similar work streams - i.e. energy, water or the built environment. The Energy Team is the biggest and spans 3 continents, so we have suggested a couple of time slots that might work for all of you. Unfortunately those in Peru or Malaysia/Philippines will have slightly extreme early or late options. I ask that you do your best to be accommodating. Those of you currently working on Energy are as follows (I have included the links to their respective projects): - Jenny Hawkins, Malaysian Borneo, Fellowship 5 - Jonny Clowes, Kenya, Placement 3 - Thomas Britnell, Rwanda. Placement 1 - Isobelle Logan, Peru, Placement 6 - Calum &amp; Dan, Philipinnes, Placement 4 &amp; Placement 5 - Elliot &amp; Nav, India, Placement 8 &amp; Placement 9 (Stuart Llewellyn, Peru, Placement 7, from September only) (Tash Perros, Malaysian Borneo, Fellowship 6, from November only) We will have a more structured agenda closer to the time, however we would broadly aim to: * Share what you've been working on * Raise challenges/issues * Support each other with potential resources or similar learning experiences * Start building collective knowledge across the energy work of volunteers Please complete this doodle poll on which scenario suits you best. I have indicated UK time in the Doodle, but below is what this means in practise: Country Time diff UK 0 13:00-15:00 14.00-16:00 Mal &amp; Php +7 20:00-22:00 21:00-23:00 Rwanda +1 14:00-16:00 15:00-17:00 Kenya +2 15:00-17:00 16:00-18:00 Peru -6 07:00-09:00 08:00-10:00 Looking forward to speaking with you all, Anya -- Anya Boyd Head of International Partnerships -- Anya Boyd Head of International Partnerships -- Anya Boyd Head of International Partnerships Engineers Without Borders UK The Foundry, 17 Oval Way London, SE11 5RR t: 0203 752 5820 f: 0870 123 1905 Engineers Without Borders UK is a registered charity in England &amp; Wales (No. 1101849) and Scotland (No. SC043537) and is a company limited by guarantee (No. 04856607). Antworten Weiterleiten Zum Antworten oder Weiterleiten hier klicken 0,15 GB (1 %) von 15 GB belegt Verwalten Nutzungsbedingungen - Datenschutz Letzte Kontoaktivität vor 0 Minuten Geöffnet an einem anderen Standort Details 7 weitere Anya Boyd Zu Kreisen hinzufügen Details anzeigen 0,15 GB (1 %) von 15 GB belegt Verwalten Nutzungsbedingungen - Datenschutz Letzte Kontoaktivität vor 0 Minuten Geöffnet an einem anderen Standort Details Wird geladen... Deutsch Deutsch Deutschsprachige Schweiz US International Deutsch Mein Wörterbuch aktivieren Mein Wörterbuch deaktivieren Tastatur einblenden Tastatur ausblenden Einstellungen für Eingabetools Deutsch Deutsch Deutschsprachige Schweiz US International Deutsch Mein Wörterbuch aktivieren Mein Wörterbuch deaktivieren Tastatur einblenden Tastatur ausblenden Einstellungen für Eingabetools " />
  <RDF:Description RDF:about="urn:scrapbook:item20160726100608#index"
                   NS1:content=" Skip to main content Menu AVR Freaks AVR Freaks AVR Freaks Main menu mobile Home Communities Forums Projects Vendors Wiki Search My summary Privacy Contact Site Use Terms Cookies Communities Projects Vendors WIKI Signup Login Search form Search You are here Home » Projects » Universal I/O C++ classes that should work with all 8bit AVRs Main menu mobile Home Communities Forums Projects Vendors Wiki Search My summary Privacy Contact Site Use Terms Cookies Communities Projects Vendors WIKI Universal I/O C++ classes that should work with all 8bit AVRs jvalencia's picture Posted by jvalencia on Sun. Apr 24, 2016 - 11:23 AM Fivestar widget 1 2 3 4 5 Total votes: 0 Type: Complete code Compiler/Assembler: WinAVR (GNU GCC) I've finished these 2 classes to manage I/O pins. I wanted 3 main things with these libs: - Abstraction, so they work with every 8bit AVR mcu. - To manage different active levels for each pin (useful for pullup pins and such). - Faster than arduino libs. A sample blink.cpp program looks like this: int main() { Pin led(Port::B, 5, OUTPUT); while(true) { led.high(); delay(1000); led.low(); delay(1000); } } If you want to invert the output of that pin, pass the active level to the constructor as this (or use the &quot;mode()&quot; function): int main() { Pin led(Port::B, 5, OUTPUT, LOW); while(true) { led.high(); delay(1000); led.low(); delay(1000); } } That way, when issuing a: led.high() the output will be 0 volts accordingly. Another example, reading the state of a button: int main() { Pin led(Port::B, 5, OUTPUT); Pin button(Port::D, 2, INPUT_PULLUP, LOW); while(true) { if (button.active()) { led.toggle(); delay(200); } } } For reading a pin we use the &quot;active()&quot; function. This function also understands different activation levels. In this case we used a internal pull up resistor for the button, so 0 volts means the button is pressed. That's why the button object has LOW in the active level parameter. Other functions are: - Pin::high() -&gt; sets that pin to a HIGH &quot;logical&quot; value. - Pin::low() -&gt; sets that pin to a LOW &quot;logical&quot; value. - Pin::toggle() -&gt; toggle the state of an output pin. - Pin::active() -&gt; returns a boolean indicating if that input pin is HIGH or LOW depending on the activation level. - Pin::mode() -&gt; change the pin mode and activation level. The Port class shouldn't be used directly, but you can. The different Port variables (A, B, C...) are automatically declared if the assosiated PORTX is defined. I've added up to PORTG (atmega256). I think this is the maximum port for any 8bit AVR device. These libs are GPL v2. Hope you find the code useful. Attachment(s): iolibs.zip Tags: Complete code , WinAVR (GNU GCC) , Attiny , atmega , I/O port , Library ©2015 Atmel Corporation Privacy Contact Site Use Terms Cookies "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160802144235#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Toggle navigation Videos Deploy! eBook Editions Articles Login Sign Up An Ansible Tutorial Aug 26, 2014 ansible provisioning If you're interested in more of this type of content, check out the Servers for Hackers eBook! Ansible is a configuration management and provisioning tool, similar to Chef, Puppet or Salt. I've found it to be one of the simplest and the easiest to get started with. A lot of this is because it's &quot;just SSH&quot;; It uses SSH to connect to servers and run the configured Tasks. One nice thing about Ansible is that it's very easy to convert bash scripts (still a popular way to accomplish configuration management) into Ansible Tasks. Since it's primarily SSH based, it's not hard to see why this might be the case - Ansible ends up running the same commands. We could just script our own provisioners, but Ansible is much cleaner because it automates the process of getting context before running Tasks. With this context, Ansible is able to handle most edge cases - the kind we usually take care of with longer and increasingly complex scripts. Ansible Tasks are idempotent. Without a lot of extra coding, bash scripts are usually not safety run again and again. Ansible uses &quot;Facts&quot;, which is system and environment information it gathers (&quot;context&quot;) before running Tasks. Ansible uses these facts to check state and see if it needs to change anything in order to get the desired outcome. This makes it safe to run Ansible Tasks against a server over and over again. Here I'll show how easy it is to get started with Anible. We'll start basic and then add in more features as we improve upon our configurations. Install Of course we need to start by installing Ansible. Tasks can be run off of any machine Ansible is installed on. This means there's usually a &quot;central&quot; server running Ansible commands, although there's nothing particularly special about what server Ansible is installed on. Ansible is &quot;agentless&quot; - there's no central agent(s) running. We can even run Ansible from any server; I often run Tasks from my laptop. Here's how to install Ansible on Ubuntu 14.04. We'll use the easy-to-remember ppa:ansible/ansible repository as per the official docs. sudo apt-add-repository -y ppa:ansible/ansible sudo apt-get update sudo apt-get install -y ansible Managing Servers Ansible has a default inventory file used to define which servers it will be managing. After installation, there's an example one you can reference at /etc/ansible/hosts. I usually copy and move the default one so I can reference it later: sudo mv /etc/ansible/hosts /etc/ansible/hosts.orig Then I create my own inventory file from scratch. After moving the example inventory file, create a new /etc/ansible/hosts file, and define some servers to manage. Here's we'll define two servers under the &quot;web&quot; label: [web] 192.168.22.10 192.168.22.11 That's good enough for now. If needed, we can define ranges of hosts, multiple groups, reusable variables, and use other fancy setups, including creating a dynamic inventory. For testing this article, I created a virtual machine, installed Ansible, and then ran Ansible Tasks directly on that server. To do this, my hosts inventory file simply looked like this: [local] 127.0.0.1 This makes testing pretty easy - I don't need to setup multiple servers or virtual machines. A consequence of this is that I need to tell Ansible to run Tasks as user &quot;vagrant&quot; and use password-based (rather than key-based) authentication. Basic: Running Commands Once we have an inventory configured, we can start running Tasks against the defined servers. Ansible will assume you have SSH access available to your servers, usually based on SSH-Key. Because Ansible uses SSH, the server it's on needs to be able to SSH into the inventory servers. It will attempt to connect as the current user it is being run as. If I'm running Ansible as user vagrant, it will attempt to connect as user vagrant on the other servers. If Ansible can directly SSH into the managed servers, we can run commands without too much fuss: $ ansible all -m ping 127.0.0.1 | success &gt;&gt; { &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot; } We can see the output we get from Ansible is some JSON which tells us if the Task made any changes and the result. If we need to define the user and perhaps some other settings in order to connect to our server, we can. When testing locally on Vagrant, I use the following: ansible all -m ping -s -k -u vagrant Let's cover these commands: all - Use all defined servers from the inventory file -m ping - Use the &quot;ping&quot; module, which simply runs the ping command and returns the results -s - Use &quot;sudo&quot; to run the commands -k - Ask for a password rather than use key-based authentication -u vagrant - Log into servers using user vagrant Modules Ansible uses &quot;modules&quot; to accomplish most of its Tasks. Modules can do things like install software, copy files, use templates and much more. Modules are the way to use Ansible, as they can use available context (&quot;Facts&quot;) in order to determine what actions, if any need to be done to accomplish a Task. If we didn't have modules, we'd be left running arbitrary shell commands like this: ansible all -s -m shell -a 'apt-get install nginx' Here, the sudo apt-get install nginx command will be run using the &quot;shell&quot; module. The -a flag is used to pass any arguments to the module. I use -s to run this command using sudo. However this isn't particularly powerful. While it's handy to be able to run these commands on all of our servers at once, we still only accomplish what any bash script might do. If we used a more appropriate module instead, we can run commands with an assurance of the result. Ansible modules ensure indempotence - we can run the same Tasks over and over without affecting the final result. For installing software on Debian/Ubuntu servers, the &quot;apt&quot; module will run the same command, but ensure idempotence. ansible all -s -m apt -a 'pkg=nginx state=installed update_cache=true' 127.0.0.1 | success &gt;&gt; { &quot;changed&quot;: false } This will use the apt module to update the repository cache and install Nginx (if not installed). The result of running the Task was &quot;changed&quot;: false. This shows that there were no changes; I had already installed Nginx. I can run this command over and over without worrying about it affecting the desired result. Going over the command: all - Run on all defined hosts from the inventory file -s - Run using sudo -m apt - Use the apt module -a 'pkg=nginx state=installed update_cache=true' - Provide the arguments for the apt module, including the package name, our desired end state and whether to update the package repository cache or not We can run all of our needed Tasks (via modules) in this ad-hoc way, but let's make this more managable. We'll move this Task into a Playbook, which can run and coordinate multiple Tasks. Basic Playbook Playbooks can run multiple Tasks and provide some more advanced functionality that we would miss out on using ad-hoc commands. Let's move the above Task into a playbook. Playbooks and Roles in Ansible all use Yaml. Create file nginx.yml: --- - hosts: local tasks: - name: Install Nginx apt: pkg=nginx state=installed update_cache=true This Task does exactly the same as our ad-hoc command, however I chose to specify my &quot;local&quot; group of servers rather than &quot;all&quot;. We can run it with the ansible-playbook command: $ ansible-playbook -s nginx.yml PLAY [local] ****************************************************************** GATHERING FACTS *************************************************************** ok: [127.0.0.1] TASK: [Install Nginx] ********************************************************* ok: [127.0.0.1] PLAY RECAP ******************************************************************** 127.0.0.1 : ok=2 changed=0 unreachable=0 failed=0 Use use -s to tell Ansible to use sudo again, and then pass the Playbook file. We get some useful feedback while this runs, including the Tasks Ansible runs and their result. Here we see all ran OK, but nothing was changed. I have Nginx installed already. I used the command $ ansible-playbook -s -k -u vagrant nginx.yml to run this playbook locally on my Vagrant installation. Handlers A Handler is exactly the same as a Task (it can do anything a Task can), but it will run when called by another Task. You can think of it as part of an Event system; A Handler will take an action when called by an event it listens for. This is useful for &quot;secondary&quot; actions that might be required after running a Task, such as starting a new service after installation or reloading a service after a configuration change. --- - hosts: local tasks: - name: Install Nginx apt: pkg=nginx state=installed update_cache=true notify: - Start Nginx handlers: - name: Start Nginx service: name=nginx state=started We can add a notify directive to the installation Task. This notifies any Handler named &quot;Start Nginx&quot; after the Task is run. Then we can create the Handler called &quot;Start Nginx&quot;. This Handler is the Task called when &quot;Start Nginx&quot; is notified. This particular Handler uses the Service module, which can start, stop, restart, reload (and so on) system services. Here we simply tell Ansible that we want Nginx to be started. Note that Ansible has us define the state you wish the service to be in, rather than defining the change you want. Ansible will decide if a change is needed, we just tell it the desired result. Let's run this Playbook again: $ ansible-playbook -s nginx.yml PLAY [local] ****************************************************************** GATHERING FACTS *************************************************************** ok: [127.0.0.1] TASK: [Install Nginx] ********************************************************* ok: [127.0.0.1] NOTIFIED: [nginx | Start Nginx] *********************************************** ok: [127.0.0.1] PLAY RECAP ******************************************************************** 127.0.0.1 : ok=2 changed=0 unreachable=0 failed=0 We get the similar output, but this time the Handler was run. Notifiers are only run if the Task is run. If I already had Nginx installed, the Install Nginx Task would not be run and the notifier would not be called. We can use Playbooks to run multiple Tasks, add in variables, define other settings and even include other playbooks. More Tasks Next we can add a few more Tasks to this Playbook and explore some other functionality. --- - hosts: local vars: - docroot: /var/www/serversforhackers.com/public tasks: - name: Add Nginx Repository apt_repository: repo='ppa:nginx/stable' state=present register: ppastable - name: Install Nginx apt: pkg=nginx state=installed update_cache=true when: ppastable|success register: nginxinstalled notify: - Start Nginx - name: Create Web Root when: nginxinstalled|success file: dest={{ '{{' }} docroot {{ '}}' }} mode=775 state=directory owner=www-data group=www-data notify: - Reload Nginx handlers: - name: Start Nginx service: name=nginx state=started - name: Reload Nginx service: name=nginx state=reloaded There are now three Tasks: Add Nginx Repository - Add the Nginx stable PPA to get the latest stable version of Nginx, using the apt_repository module. Install Nginx - Installs Nginx using the Apt module. Create Web Root - Finally, create a web root directory. Also new here are the register and when directives. These tell Ansible to run a Task when something else happens. The &quot;Add Nginx Repository&quot; Task registers &quot;ppastable&quot;. Then we use that to inform the Install Nginx Task to only run when the registered &quot;ppastable&quot; Task is successful. This allows us to conditionally stop Ansible from running a Task. We also use a variable. The docroot variable is defined in the var section. It's then used as the destination argument of the file module which creates the defined directory. This playbook can be run with the usual command: ansible-playbook -s nginx.yml # Or, as I ran on my Vagrant machine: ansible-playbook -s -k -u vagrant nginx.yml Next we'll take Ansible further and by organizing the Playbook into a Role while also showing some more functionality. Roles Roles are good for organizing multiple, related Tasks and encapsulating data needed to accomplish those Tasks. For example, installing Nginx may involve adding a package repository, installing the package and setting up configuration. We've seen installation in action in a Playbook, but once we start configuring our installations, the Playbooks tend to get a little more busy. The configuration portion often requires extra data such as variables, files, dynamic templates and more. These tools can be used with Playbooks, but we can do better immediately by organizing related Tasks and data into one coherent structure: a Role. Roles have a directory structure like this: rolename - files - handlers - meta - templates - tasks - vars Within each directory, Ansible will search for and read any Yaml file called main.yml automatically. We'll break apart our nginx.yml file and put each component within the corresponding directory to create a cleaner and more complete provisioning toolset. Files First, within the files directory, we can add files that we'll want copied into our servers. For Nginx, I often copy H5BP's Nginx component configurations. I simply download the latest from Github, make any tweaks I want, and put them into the files directory. nginx - files - - h5bp As we'll see, these configurations will be added via the copy module. Handlers Inside of the handlers directory, we can put all of our Handlers that were once within the nginx.yml Playbook. Inside of handlers/main.yml: --- - name: Start Nginx service: name=nginx state=started - name: Reload Nginx service: name=nginx state=reloaded Once these are in place, we can reference them from other files freely. Meta The main.yml file within the meta directory contains Role meta data, including dependencies. If this Role depended on another Role, we could define that here. For example, I have the Nginx Role depend on the SSL Role, which installs SSL certificates. --- dependencies: - { role: ssl } If I called the &quot;nginx&quot; Role, it would attempt to first run the &quot;ssl&quot; Role. Otherwise we can omit this file, or define the Role as having no dependencies: --- dependencies: [] Template Template files can contain template variables, based on Python's Jinja2 template engine. Files in here should end in .j2, but can otherwise have any name. Similar to files, we won't find a main.yml file within the templates directory. Here's an example Nginx virtual host configuration. Note that it uses some variables which we'll define later in the vars/main.yml file. Nginx virtual host file found at templates/serversforhackers.com.conf: server { # Enforce the use of HTTPS listen 80 default_server; server_name *.{{ '{{' }} domain {{ '}}' }}; return 301 https://{{ '{{' }} domain {{ '}}' }}$request_uri; } server { listen 443 default_server ssl; root /var/www/{{ '{{' }} domain {{ '}}' }}/public; index index.html index.htm index.php; access_log /var/log/nginx/{{ '{{' }} domain {{ '}}' }}.log; error_log /var/log/nginx/{{ '{{' }} domain {{ '}}' }}-error.log error; server_name {{ '{{' }} domain {{ '}}' }}; charset utf-8; include h5bp/basic.conf; ssl_certificate {{ '{{' }} ssl_crt {{ '}}' }}; ssl_certificate_key {{ '{{' }} ssl_key {{ '}}' }}; include h5bp/directive-only/ssl.conf; location /book { return 301 http://book.{{ '{{' }} domain {{ '}}' }}; } location / { try_files $uri $uri/ /index.php$is_args$args; } location = /favicon.ico { log_not_found off; access_log off; } location = /robots.txt { log_not_found off; access_log off; } location ~ \.php$ { fastcgi_split_path_info ^(.+\.php)(/.+)$; fastcgi_pass unix:/var/run/php5-fpm.sock; fastcgi_index index.php; include fastcgi_params; # fastcgi.conf for version 1.6.1+ fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param ENV production; } # Nginx status # Nginx Plus only #location /status { # status; # status_format json; # allow 127.0.0.1; # deny all; #} location ~ ^/(fpmstatus|fpmping)$ { access_log off; allow 127.0.0.1; deny all; include fastcgi_params; # fastcgi.conf for version 1.6.1+ fastcgi_pass unix:/var/run/php5-fpm.sock; } } This is a fairly standard Nginx configuration for a PHP application. There are three variables used here: domain ssl_crt ssl_key These three will be defined in the variables section. Variables Before we look at the Tasks, let's look at variables. The vars directory contains a main.yml file which simply lists variables we'll use. This provides a convenient place for us to change configuration-wide settings. Here's what the vars/main.yml file might look like: --- domain: serversforhackers.com ssl_key: /etc/ssl/sfh/sfh.key ssl_crt: /etc/ssl/sfh/sfh.crt These are three variables which we can use elsewhere in this Role. We saw them used in the template above, but we'll see them in our defined Tasks as well. Tasks Let's finally see this all put together into a series of Tasks. Inside of tasks/main.yml: --- - name: Add Nginx Repository apt_repository: repo='ppa:nginx/stable' state=present register: ppastable - name: Install Nginx apt: pkg=nginx state=installed update_cache=true when: ppastable|success register: nginxinstalled notify: - Start Nginx - name: Add H5BP Config when: nginxinstalled|success copy: src=h5bp dest=/etc/nginx owner=root group=root - name: Disable Default Site when: nginxinstalled|success file: dest=/etc/nginx/sites-enabled/default state=absent - name: Add SFH Site Config when: nginxinstalled|success register: sfhconfig template: src=serversforhackers.com.j2 dest=/etc/nginx/sites-available/{{ '{{' }} domain {{ '}}' }}.conf owner=root group=root - name: Enable SFH Site Config when: sfhconfig|success file: src=/etc/nginx/sites-available/{{ '{{' }} domain {{ '}}' }}.conf dest=/etc/nginx/sites-enabled/{{ '{{' }} domain {{ '}}' }}.conf state=link - name: Create Web root when: nginxinstalled|success file: dest=/var/www/{{ '{{' }} domain {{ '}}' }}/public mode=775 state=directory owner=www-data group=www-data notify: - Reload Nginx - name: Web Root Permissions when: nginxinstalled|success file: dest=/var/www/{{ '{{' }} domain {{ '}}' }} mode=775 state=directory owner=www-data group=www-data recurse=yes notify: - Reload Nginx This is a longer series of Tasks, which makes for a more complete installation of Nginx. The Tasks, in order of appearance, accomplish the following: Add the nginx/stable repository Install &amp; start Nginx, register successful installation to trigger remaining Tasks Add H5BP configuration Disable the default virtual host by removing the symlink to the default file from the sites-enabled directory Copy the serversforhackers.com.conf.j2 virtual host template into the Nginx configuration Enable the virtual host configuration by symlinking it to the sites-enabled directory Create the web root Change permission for the project root directory, which is one level above the web root created previously There's some new modules (and new uses of some we've covered), including copy, template, &amp; file. By setting the arguments for each module, we can do some interesting things such as ensuring files are &quot;absent&quot; (delete them if they exist) via state=absent, or create a file as a symlink via state=link. You should check the docs for each module to see what interesting and useful things you can accomplish with them. Running the Role Before running the Role, we need to tell Ansible where our Roles are located. In my Vagrant server, they are located within /vagrant/ansible/roles. We can add this file path to the /etc/ansible/ansible.cfg file: roles_path = /vagrant/ansible/roles Assuming our nginx Role is located at /vagrant/ansible/roles/nginx, we'll be all set to run this Role! Remove the ssl dependency from meta/main.yml before running this Role if you are following along. Let's create a &quot;master&quot; yaml file which defines the Roles to use and what hosts to run them on: File server.yml: --- - hosts: all roles: - nginx In my Vagrant example, I use the host &quot;local&quot; rather than &quot;all&quot;. Then we can run the Role(s): ansible-playbook -s server.yml # Or as I do with my Vagrant VM: ansible-playbook -s -k -u vagrant server.yml Here's the output from the run of the Nginx Role: PLAY [all] ******************************************************************** GATHERING FACTS *************************************************************** ok: [127.0.0.1] TASK: [nginx | Add Nginx Repository] ****************************************** changed: [127.0.0.1] TASK: [nginx | Install Nginx] ************************************************* changed: [127.0.0.1] TASK: [nginx | Add H5BP Config] *********************************************** changed: [127.0.0.1] TASK: [nginx | Disable Default Site] ****************************************** changed: [127.0.0.1] TASK: [nginx | Add SFH Site Config] ******************************************* changed: [127.0.0.1] TASK: [nginx | Enable SFH Site Config] **************************************** changed: [127.0.0.1] TASK: [nginx | Create Web root] *********************************************** changed: [127.0.0.1] TASK: [nginx | Web Root Permissions] ****************************************** ok: [127.0.0.1] NOTIFIED: [nginx | Start Nginx] *********************************************** ok: [127.0.0.1] NOTIFIED: [nginx | Reload Nginx] ********************************************** changed: [127.0.0.1] PLAY RECAP ******************************************************************** 127.0.0.1 : ok=8 changed=7 unreachable=0 failed=0 Awesome, we put all the various components together into a coherent Role and now have Nginx installed and configured! Facts Before running any Tasks, Ansible will gather information about the system it's provisioning. These are called Facts, and include a wide array of system information such as the number of CPU cores, available ipv4 and ipv6 networks, mounted disks, Linux distribution and more. Facts are often useful in Tasks or Tempalte configurations. For example Nginx is commonly set to use as any worker processors as there are CPU cores. Knowing this, you may choose to set your template of the nginx.conf file like so: user www-data www-data; worker_processes {% verbatim %}{{ ansible_processor_cores }}{% endverbatim %}; pid /var/run/nginx.pid; # And other configurations... Or if you have a server with multiple CPU's, you can use: user www-data www-data; worker_processes {% verbatim %}{{ ansible_processor_cores * ansible_processor_count }}{% endverbatim %}; pid /var/run/nginx.pid; # And other configurations... Ansible facts all start with anisble_ and are globally available for use any place variables can be used: Variable files, Tasks, and Templates. Example: NodeJS For Ubuntu, we can get the latest stable NodeJS and NPM from NodeSource, which has teamed up with Chris Lea. Chris ran the Ubuntu repository ppa:chris-lea/node.js, but now provides NodeJS via NodeSource packages. To that end, they have provided a shells script which installs the latest stable NodeJS and NPM on Debian/Ubuntu systems. This shellscript is found at https://deb.nodesource.com/setup. We can take a look at this and convert it to the following tasks from a NodeJS Role: --- - name: Ensure Ubuntu Distro is Supported get_url: url='https://deb.nodesource.com/node/dists/{% verbatim %}{{ ansible_distribution_release }}{% endverbatim %}/Release' dest=/dev/null register: distrosupported - name: Remove Old Chris Lea PPA apt_repository: repo='ppa:chris-lea/node.js' state=absent when: distrosupported|success - name: Remove Old Chris Lea Sources file: path='/etc/apt/sources.list.d/chris-lea-node_js-{% verbatim %}{{ ansible_distribution_release }}{% endverbatim %}.list' state=absent when: distrosupported|success - name: Add Nodesource Keys apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present - name: Add Nodesource Apt Sources List Deb apt_repository: repo='deb https://deb.nodesource.com/node {% verbatim %}{{ ansible_distribution_release }}{% endverbatim %} main' state=present when: distrosupported|success - name: Add Nodesource Apt Sources List Deb Src apt_repository: repo='deb-src https://deb.nodesource.com/node {% verbatim %}{{ ansible_distribution_release }}{% endverbatim %} main' state=present when: distrosupported|success - name: Install NodeJS apt: pkg=nodejs state=latest update_cache=true when: distrosupported|success There's a few tricks happening there. These mirror the bash script provided by Node Source. First we create the Ensure Ubuntu Distro is Supported task, which uses the ansible_distribution_release Fact. This gives us the Ubuntu release, such as Precise or Trusty. If the resulting URL exists, then we know our Ubuntu distribution is supported and can continue. We register distrosupported so we can test if this step was successfully on subsequent tasks. Then we run a series of tasks to remove NodeJS repositories in case the system already has ppa:chris-lea/node.js added. These only run when if the distribution is supported via when: distrosupported|success. Note that most of these continue to use the ansible_distribution_release Fact. Finally we get the debian source packages and install NodeJS after updating the repository cache. This will install the latest stable of NodeJS and NPM. We know it will get the latest version available by using state=latest when installing the nodejs package. Vault We often need to store sensitive data in our Ansible templates, Files or Variable files; It unfortunately cannot always be avoided. Ansible has a solution for this called Ansible Vault. Vault allows you to encrypt any Yaml file, which typically boil down to our Variable files. Vault will not encrypt Files and Templates. When creating an encrypted file, you'll be asked a password which you must use to edit the file later and when calling the Roles or Playbooks. For example we can create a new Variable file: ansible-vault create vars/main.yml Vault Password: After entering in the encryption password, the file will be opened in your default editor, usually Vim. The editor used is defined by the EDITOR environmental variable. The default is usually Vim. If you are not a Vim user, you can change it quickly by setting the environmental variabls: export EDITOR=nano ansible-vault edit vars/main.yml T&gt; The editor can be set in the users profile/bash configuration, usually found at ~/.profile, ~/.bashrc, ~/.zshrc or similar, depending on the shell and Linux distribution used. Ansible Vault itself is fairly self-explanatory. Here are the commands you can use: $ ansible-vault -h Usage: ansible-vault [create|decrypt|edit|encrypt|rekey] \ [--help] [options] file_name Options: -h, --help show this help message and exit For the most part, we'll use ansible-vault create|edit /path/to/file.yml. Here, however, are all of the available commands: create - Create a new file and encrypt it decrypt - Create a plaintext file from an encrypted file edit - Edit an already-existing encrypted file encrypt - Encrypt an existing plain-text file rekey - Set a new password on a encrypted file Example: Users I use Vault when creating new users. In a User Role, you can set a Variable file with users' passwords and a public key to add to the users' authorized_keys file (thus giving you SSH access). T&gt; Public SSH keys are technically safe for the general public to see - all someone can do with them is allow you access to their own servers. Public keys are intentionally useless for gaining access to a sytem without the paired private key, which we are not putting into this Role. Here's an example variable file which can be created and encrypt with Vault. While editing it, it's of course in plain-text: admin_password: $6$lpQ1DqjZQ25gq9YW$mHZAmGhFpPVVv0JCYUFaDovu8u5EqvQi.Ih deploy_password: $6$edOqVumZrYW9$d5zj1Ok/G80DrnckixhkQDpXl0fACDfNx2EHnC common_public_key: ssh-rsa ALongSSHPublicKeyHere Note that the passwords for the users are also hashed. You can read Ansible's documentation on generating encrypted passwords, which the User module requires to set a user password. As a quick primer, it looks like this: # The whois package makes the mkpasswd # command available on Ubuntu $ sudo apt-get install -y whois # Create a password hash $ mkpasswd --method=SHA-512 Password: This will generate a hashed password for you to use with the user module. Once you have set the user passwords and added the public key into the Variables file, we can make a Task to use these encrypted variables: --- - name: Create Admin User user: name=admin password={% verbatim %}{{ admin_password }}{% endverbatim %} groups=sudo append=yes shell=/bin/bash - name: Add Admin Authorized Key authorized_key: user=admin key=&quot;{% verbatim %}{{ common_public_key }}{% endverbatim %}&quot; state=present - name: Create Deploy User user: name=deploy password={% verbatim %}{{ deploy_password }}{% endverbatim %} groups=www-data append=yes shell=/bin/bash - name: Add Deployer Authorized Key authorized_key: user=deploy key=&quot;{% verbatim %}{{ common_public_key }}{% endverbatim %}&quot; state=present These Tasks use the user module to create new users, passing in the passwords set in the Variable file. It also uses the authorized_key module to add the SSH pulic key as an authorized SSH key in the server for each user. Variables are used like usual within the Tasks file. However, in order to run this Role, we'll need to tell Ansible to ask for the Vault password so it can unencrypt the variables. Let's setup a provision.yml Playbook file to call our user Role: --- - hosts: all sudo: yes roles: - user To run this Playbook, we need to tell Ansible to ask for the Vault password, as we're running a Role which contains an encrypted file: ansible-playbook --ask-vault-pass provision.yml Recap Here's what we did: Installed Ansible Configured Ansible inventory Ran idempotent ad-hoc commands on multiple servers simultaneously Created a basic Playbook to run multiple Tasks, using Handlers Abstracted the Tasks into a Role to keep everything Nginx-related organized Saw how to set dependencies Saw how to register Task &quot;dependencies&quot; and run other Tasks only if they are successful Saw how to use more templates, files and variables in our Tasks Saw how to incorporate Ansible Facts Saw how to use Ansible Vault to add security to our variables We covered a lot of ground, and it will get you pretty far. However, there are many more tools provided by Ansible to explore! If this edition piqued your interest, the Servers for Hackers eBook will go into more depth with Ansible and many other topics! Additional Resources Many more example Roles in the Servers for Hackers Github repo. Use Ansible Vault to encrypt secure data, making it more safe if your playbooks or Roles end up in version control or are otherwise shared See the Module Index for more information on available modules There are a lot of useful things you can do with Ansible. Explore the documentation! Want more? If articles like this interest you, sign up for the newsletter! Join nearly 10000 others on the mailing list! Subscribe Servers for Hackers Videos Editions Articles RSS 💥 SFH eBook 💥 Deploy! The Newsletter Get Actually Useful™ server info bimonthly! Subscribe © 2016 - Fideloper LLC - @srvrsforhackers We were unable to load Disqus. If you are a moderator please see our troubleshooting guide. 39 comments Comments Servers for Hackers Community Login Disqus Facebook Twitter Google 1 Recommend Recommended 14 Discussion Recommended! Recommending means this is a discussion worth sharing. It gets shared to your followers' Disqus feeds, and gives the creator kudos! Find More Discussions Share Share this discussion on Twitter Facebook Sort by Best Best Newest Oldest Avatar Join the discussion… in this conversation ⬇ Drag and drop your images here to upload them. Media preview placeholder Attach Log in with or sign up with Disqus or pick a name Disqus is a discussion network Disqus never moderates or censors. The rules on this community are its own. Your email is safe with us. It's only used for moderation and optional notifications. Don't be a jerk or do anything illegal. Everything is easier that way. Read full terms and conditions By signing up, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. By posting, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. − + Avatar Raphael Burnes • 2 years ago This is great, thanks for writing it up. I'd looked at ansible several times before but hadn't the time or inclination before to dig into it to understand and this tutorial was very useful. see more 5 • Reply • Share › Twitter Facebook − + Avatar Massimiliano Adamo • a month ago thanks man! see more 0 • Reply • Share › Twitter Facebook − + Avatar Raz M • 5 months ago Hi, I'm trying to make the tasks that create users work (Vaults), but Ansible complains about the following: The offending line appears to be: name: admin password: {%verbatim%}{{ admin_password }}{%endverbatim%} ^ here We could be wrong, but this one looks like it might be an issue with missing quotes. Always quote template expression brackets when they start a value. For instance: with_items: - {{ foo }} Should be written as: with_items: - &quot;{{ foo }}&quot; I couldn't find much info about that. I tried various combination, but if I add the double quotes, Ansible complains about unknown variable (%verbatim%) see more 0 • Reply • Share › Twitter Facebook − + Avatar Raz M Raz M • 5 months ago Solved my issue. 1- Moved my &quot;secret.yml&quot; to roles/user/vars/main.yml 2- Removed the &quot;{%verbatim%}&quot; and &quot;{%end_verbatim%}&quot; &lt;- I haven't found documentation about what these verbs are for 3- Added double quotes to all variables (&quot;{{ admin_password }}&quot;) Works like a charm! see more 0 • Reply • Share › Twitter Facebook − + Avatar Raz M • 5 months ago Outstanding! Thanks :) Minor typos in the &quot;task&quot; section: Tempalte --&gt; Template Ansible facts all start with anisble_ --&gt; with _ansible see more 0 • Reply • Share › Twitter Facebook − + Avatar Farhan Ziya • 8 months ago Where do i get a complete Ansible video tutorial? see more 0 • Reply • Share › Twitter Facebook − + Avatar Kc Android • 9 months ago Excellent quick start. More intuitive than the actual Ansible documentation. see more 0 • Reply • Share › Twitter Facebook − + Avatar Vesa Laakso • 9 months ago I suppose the way template strings are used here is a bit weird probably due to some double-escaping issues? e/{{ '{{' }} domain {{ '}}' }}` And seems like you have indented the last task in &quot;More tasks&quot; section too much, as it failed when I tried following these steps on my virtual machine. see more 0 • Reply • Share › Twitter Facebook − + Avatar shiva • 9 months ago what are the advantages of ansible please tell me see more 0 • Reply • Share › Twitter Facebook − + Avatar silverdr shiva • 9 months ago Too many to list here. Please read the docs. It's all there. see more 0 • Reply • Share › Twitter Facebook − + Avatar mozillazg • 9 months ago Thank you for your work! see more 0 • Reply • Share › Twitter Facebook − + Avatar Greg • a year ago Why &quot;when: xxx|success&quot; everywhere? I thought ansible cut a host out as soon as a task failed. see more 0 • Reply • Share › Twitter Facebook − + Avatar fideloper Mod Greg • a year ago That's absolutely accurate, those are unnecessary unless you are ignoring errors till stop the default behaviour of stopping on error. I've since stopped using those checks so often! see more 0 • Reply • Share › Twitter Facebook − + Avatar James Scollard • a year ago Very useful. Thanks! see more 0 • Reply • Share › Twitter Facebook − + Avatar silverdr • a year ago Does anyone know how to do something (like wait for port / boot of the managed node) *BEFORE* gathering facts? I know I can turn gathering facts off and *THEN* wait for port but what if I need them and still need to wait until the node boots up? see more 0 • Reply • Share › Twitter Facebook − + Avatar RubenKelevra silverdr • 5 months ago You mean, reboot a node and wait until it comes up again? http://pastebin.com/RYyN1QW9 see more 0 • Reply • Share › Twitter Facebook − + Avatar George Jones • a year ago FYI comments in the apt module (https://raw.githubusercontent.... lists apt=installed as deprecated. Preferred is now &quot;present&quot; (and &quot;absent&quot;) see more 0 • Reply • Share › Twitter Facebook − + Avatar Brett L. Schuchert • a year ago Reading through this, nice so far. Minor typo: &quot;Ansible modules ensure indempotence &quot; -&gt; idempotence see more 0 • Reply • Share › Twitter Facebook − + Avatar James • a year ago When I get to the Module section and run. &quot;ansible all -s -m shell -a 'apt-get install nginx'&quot; localhost | FAILED =&gt; Missing become password What am I doing wrong? see more 0 • Reply • Share › Twitter Facebook − + Avatar fideloper Mod James • a year ago The article actually recommends not using that command, and instead use the &quot;apt&quot; module. The likely issue is running that command exactly as you see it is that we aren't telling it to use &quot;sudo&quot;, which is needed for running an apt-get command. You can use -s flag to have it use sudo, and -K to have it ask you the sudo password, if a password is required. But I'd suggest just moving on and using the &quot;apt&quot; module. see more 0 • Reply • Share › Twitter Facebook − + Avatar chollie fideloper • a year ago ansible mygroup -s -K -B 3600 -m apt -a &quot;upgrade=dist&quot; I'm no expert but if password is requied you still need to send in -K when running it as an adhoc command see more 0 • Reply • Share › Twitter Facebook − + Avatar Itamar Gal • a year ago Thanks for the great tutorial! I'm having an issue with the nginx example. The nginx server does not appear to start (e.g. the &quot;service nginx status&quot; command returns &quot; * nginx is not running&quot;), even though the handler appears to have executed. I posted a question to superuser.com with more details: http://superuser.com/questions... Has anyone else experienced this type of issue? Is there an explanation? Is there a resolution? Thanks in advance for your time, and thanks again to the author for writing a great post! see more 0 • Reply • Share › Twitter Facebook − + Avatar Swasher • a year ago It's best ansible quick-start. Thank author for your work! see more 0 • Reply • Share › Twitter Facebook − + Avatar Fizer • a year ago Really great article. Best place to read about Ansible. Good Work. see more 0 • Reply • Share › Twitter Facebook − + Avatar Ben Hockley • a year ago Thank-you - very nice write-up! see more 0 • Reply • Share › Twitter Facebook − + Avatar Uziel Bueno • a year ago fideloper What does verbatim means?, i am using ansible 1.8 and im getting this error : template error while templating string: Encountered unknown tag 'verbatim' :( see more 0 • Reply • Share › Twitter Facebook − + Avatar chollie Uziel Bueno • 10 months ago Did you manage to fix this one? see more 0 • Reply • Share › Twitter Facebook − + Avatar Serge Zarouski • a year ago 'ansible all -m ping' was failing for me on 127.0.0.1 because ansible was trying to connect using ssh. What worked: 'ansible all -m ping -c local'. Also I had to run 'apt-get install python-software-properties' to be able to 'apt-add-repository -y ppa:ansible/ansible'. see more 0 • Reply • Share › Twitter Facebook − + Avatar Serge Zarouski • 2 years ago Hi, let me first thank you for all the great and easy to follow articles! I learned so much today! I like ansible a lot, though I've also seen an article about docker. Can docker be used as a replacement for ansible, or I misunderstand how docker works? Thank you. see more 0 • Reply • Share › Twitter Facebook − + Avatar fideloper Mod Serge Zarouski • 2 years ago Yes, some people's work flows for deployment include making Docker images and updating them with new server update or code updates as part of your build/deploy process, rather than use Ansible or Chef or Puppet. see more 1 • Reply • Share › Twitter Facebook − + Avatar pricees • 2 years ago Brilliant write up. see more 0 • Reply • Share › Twitter Facebook − + Avatar Pratik Garg • 2 years ago Thanks for such an explanatory article.!! see more 0 • Reply • Share › Twitter Facebook − + Avatar aguidis • 2 years ago Thanks a lot for your clear explanation. But I have some troubles with the install of nodejs on my debian 7.4 vm : I have always this message : Invalid repository string: ppa:chris-lea/node.js. Do you know how to solve this ? :) see more 0 • Reply • Share › Twitter Facebook − + Avatar fideloper Mod aguidis • 2 years ago The add-apt-repository command might not be present (debian appears to need &quot;python-software-properties&quot;, where as newer Ubuntu releases get that command in package &quot;software-properties-common&quot;). Alternatively, just remove the task that removes the PPA (since it's just attempting to remove it if was installed previously). see more 0 • Reply • Share › Twitter Facebook − + Avatar aguidis fideloper • 2 years ago I tried this but without success... I succeed in installing nodejs from the NodeSource Debian and Ubuntu binary distributions repository thanks to a curl request. - name: Node.js | Fetching node.js source action: shell curl -sL https://deb.nodesource.com/set... | bash -s - name: install nodejs packages apt: pkg={{ item }} state=latest with_items: - nodejs see more 2 • Reply • Share › Twitter Facebook − + Avatar Carter Robinson aguidis • 4 days ago Here's the proper newer code: --- - hosts: boxes become: yes tasks: - name: Install list of packages apt: name={{item}} state=installed with_items: - auditd - fail2ban - rkhunter - chkrootkit see more 0 • Reply • Share › Twitter Facebook − + Avatar vinit khandagle • 2 years ago Awesome !!! Ansible is easy to start of with but you made it more simpler for anyone to understand!! Thanks for this, waiting for your book!! see more 0 • Reply • Share › Twitter Facebook − + Avatar Gayan Hewa • 2 years ago Simply Awesome , cleared up all my questions to get started with ansible. see more 0 • Reply • Share › Twitter Facebook − + Avatar Tarellel • 2 years ago Amazing writeup, I would of loved something like this when first jumping into Ansible. But hopefully, it'll save other people hours of pain digging through ugly, complicated, obfuscated, and incomplete examples on GitHub. see more 0 • Reply • Share › Twitter Facebook Load more comments Also on Servers for Hackers Logrotate for Forge 6 comments 3 months ago Avatar fideloper — It definitely can be! Laravel defaults to using a single log file, which can grow in size indefinitely until the disk is full (I've seen it happen often!) So if there's any application log that's not in the /var/log directory (which usually are taken … Creating and Using SSH Keys 2 comments 8 months ago Avatar Alex Fraundorf — Is there a benefit to doing it this way instead of using ssh-copy-id command? Thanks! Compiling Third-Party Modules Into Nginx 28 comments 4 months ago Avatar Matt Stone — Hi I'm trying to use this technique to include modsecurity (https://www.trustwave.com/Reso...... I've added the lines to the rules file: add-module=($MODULESDIR)/mod_security/nginx/modsecurity \ ...and placed … PHP-FPM: Multiple Resource Pools 4 comments a year ago Avatar Renie Siqueira da Silva — Great! It works very well. Thank you very much. Powered by Disqus Subscribe Add Disqus to your site Add Disqus Add Privacy - - " />
  <RDF:Description RDF:about="urn:scrapbook:item20160818121214#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Donate0 OpenSCAD The Programmers Solid 3D CAD Modeller Home About News Downloads Documentation Gallery Community GitHub Downloads Mac OS X Windows Linux Other Systems Source Code Development Snapshots Prior Releases Mac OS X System requirements: Mac OS X 10.7 or newer OpenSCAD 2015.03-3 64 bit Intel - dmg package - 23 MB OpenSCAD is also available on MacPorts: $ sudo port install openscad Windows System requirements: Windows XP or newer on x86 32/64 bit OpenSCAD 2015.03-2 x86 (32-bit) exe installer - 14 MB OpenSCAD 2015.03-2 x86 (32-bit) zip package - 14 MB OpenSCAD 2015.03-2 x86 (64-bit) exe installer - 14 MB OpenSCAD 2015.03-2 x86 (64-bit) zip package - 14 MB Linux Debian / Ubuntu / Kubuntu OpenSCAD is available in the repositories of recent distributions. $ sudo apt-get install openscad For Ubuntu users: To update to the latest release add the following PPA before installing OpenSCAD: $ sudo add-apt-repository ppa:openscad/releases Fedora OpenSCAD is available in Fedora official repositories. To install, run the following command: # yum install openscad If you want the MCAD library: # yum install openscad-MCAD Please note that you'll find OpenSCAD 2014.03 in Fedora 21 and lower. In case you'd like to use 2015.03 in Fedora 21, you can use a Copr repo with it. openSUSE OpenSCAD is available from software.opensuse.org Arch Linux # pacman -S openscad Other Linux The following generic binary Linux packages are available: OpenSCAD 2014.03 x86 (32-bit) - tgz archive - 21.9 MB OpenSCAD 2014.03 x64 (64-bit) - tgz archive -21.5 MB BSD NetBSD (&gt;=6.1) Set up pkgin and run this command: # pkgin install openscad FreeBSD (&gt;=10) # pkg install openscad OpenBSD OpenSCAD is available for amd64, i386 and macppc in OpenBSD packages: # pkg_add openscad Other Systems It's possible to build OpenSCAD on other systems as long as a C++ compiler and the prerequisite software libraries are available. Fork me on GitHub Source Code OpenSCAD 2015.03-2 source code - tgz archive -13 MB You can also access the latest source code on github: openscad/openscad on github Development Snapshots Development snapshots are built irregularly. If you want access to a more recent development snapshot, please contact the mailing list. Mac OS X OpenSCAD 2016.07.22 64 bit Intel - dmg package - 22.6 MB Windows OpenSCAD 2016.07.20 x86 (32-bit) exe installer - 15 MB OpenSCAD 2016.07.20 x86 (32-bit) zip package - 15 MB OpenSCAD Tests 2014.07.22 x86 (32-bit) test suite - 19MB OpenSCAD 2016.07.20 x86 (64-bit) exe installer - 15 MB OpenSCAD 2016.07.20 x86 (64-bit) zip package - 15 MB OpenSCAD Tests 2014.07.22 x86 (64-bit) test suite - 19MB Linux The packages are automatically built based on the master branch on github. Note: The packages are called &quot;openscad-nightly&quot; so it's possible to install the development snapshot packages in parallel to the release version from the official repositories. Debian / Ubuntu packages built on OpenSUSE build service To install the packages, the release key must be added with apt-key to the key-ring to allow apt-get / aptitude to validate the packages. Key ID: 30EB8E08 (valid till 2016-11-28) Key UID: home:t-paul OBS Project &lt;home:t-paul@build.opensuse.org&gt; # wget -qO - http://files.openscad.org/OBS-Repository-Key.pub | sudo apt-key add - After the key is added, the repository URL needs to be configured. This can be done by creating a new file /etc/apt/sources.list.d/openscad.list with the URL specific to the distribution. Debian 7 (Wheezy) deb http://download.opensuse.org/repositories/home:/t-paul/Debian_7.0/ ./ Debian 8 (Jessie) deb http://download.opensuse.org/repositories/home:/t-paul/Debian_8.0/ ./ Ubuntu 14.04 LTS deb http://download.opensuse.org/repositories/home:/t-paul/xUbuntu_14.04/ ./ Ubuntu 14.10 deb http://download.opensuse.org/repositories/home:/t-paul/xUbuntu_14.10/ ./ Ubuntu 15.04 deb http://download.opensuse.org/repositories/home:/t-paul/xUbuntu_15.04/ ./ openSUSE packages built on OpenSUSE build service openSUSE 13.1 http://download.opensuse.org/repositories/home:/t-paul/openSUSE_13.1/ openSUSE 13.2 http://download.opensuse.org/repositories/home:/t-paul/openSUSE_13.2/ openSUSE Tumbleweed http://download.opensuse.org/repositories/home:/t-paul/openSUSE_Tumbleweed/ Fedora packages built on Copr RPM repository with nightly OpenSCAD development snapshots on copr.fedoraproject.org. Arch Linux To install OpenSCAD from git on Arch Linux the openscad-git pkgbuild is available on AUR. Prior Releases Prior releases are available at files.openscad.org 899 " />
  <RDF:Description RDF:about="urn:scrapbook:item20160810104429#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Lloyds Bank - View Product Details +00206943289ClassicLTSBAVAACCOUNT||20721960||306442NoLLOYDS08/10/201608:42:37trueLLOYDS/pages/p303_00/properties. Lloyds BankLloyds Bank Log off HOME MENU Cookie Policy Safe and secureOur Internet Banking guarantee Our products and services Saving Instant access Children's savings Cash ISAs Fixed term Joint accounts Renew your savings account Banking Open a Current Account Join Club Lloyds or upgrade Switch to us Joint accounts Travel money Text Alerts Pay a Contact Business banking Private banking International banking Borrowing Credit cards Loan Car finance Overdrafts Mortgage calculator Other mortgage options Insurance &amp; Investments Home insurance Car insurance Van insurance Travel insurance Life insurance New e-Investments Existing Investments Share dealing Retirement Financial advice Our online and mobile banking guarantee We guarantee to refund your money in the unlikely event you experience fraud with our Internet Banking service - as long as you've been careful, for example, by taking reasonable steps to keep your security information safe. We protect you with safeguards that meet Industry Standards. Keep your password secure and do not let anyone else make use of your security details, even if they share a joint account with you. Do not let anyone watch you enter your security details and log off after each Online Banking session. Carry out regular virus checks on your devices and have the latest operating system and web browser installed. Find out more about how to protect yourself online. Security information Mr T. Britnell Last logged on 27 May 16 at 08:22 PM Your Profile Contact Details Marketing Preferences SMS Preferences Pay A Contact Preferences Everyday Offers settings Set up and manage travel flags Your Accounts Your Profile Help &amp; Support Inbox 0 Help &amp; contact us Lost or stolen card Order replacement card or PIN Help General enquires are open 24/7. 0800 096 9779 Contact us Log off Cookie Policy Safe and secure Your Accounts Account Name Classic Sort code 30-64-42 Account Number 20721960 View IBAN and BIC £ 276.79 Balance £177.41 Funds available ? Available Funds This is the amount you can spend now. It includes your agreed Planned Overdraft and has been reduced by any pending debit card transactions. It doesn't include any cheques paid into your account which are still being processed. Contactless transactions and cheques you have written which are not yet showing on your account will not be reflected in your available funds, so you need to ensure that you keep track of these. View statement Make a payment Upgrade account More actions View your overdraft options &gt; Classic 30-64-42 20721960 Close Payments and transfers Pay a person or company Make a payment Make an international payment Manage recipients Manage pending payments Direct Debits and standing orders Direct Debits Manage direct debits Standing orders Set up a standing order Manage standing orders Overdraft Apply for an overdraft today Apply for an overdraft Account services Online and paper preferences The paperless status for this account: Online and paper preferences for this account: Statements: Online only Correspondence: Online only Manage online and paper preference settings MIDATA What is midata? A midata file downloaded from us contains a 12 month transaction history of your selected personal current account. If you’ve held your account for less than a year, it will contain data from the day you opened the account. midata is presented in a format compatible for use on participating comparison websites, to help you better evaluate the range of current accounts available. The information in a midata file is limited to details about your incoming payments and your expenditure. It does not contain information like your name, address or date of birth. Midata Export Admin Rename account Order replacement card or PIN Account information and benefits STATEMENT SUMMARY View statement summary View annual summary You have Classic View account benefits Upgrade account See your upgrade options Statement Search your statement PERIOD 90 days 30 days 7 days Between From and To PrevNext August 2016 Mon Tue Wed Thu Fri Sat Sun 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Go to today DESCRIPTION: More Options AMOUNT: Any amount Exact amount £ Between £ and £ TRANSACTION TYPE Previous Next Latest Statement for Classic 306442 20721960 Date Description Type ? Key to abbreviations BGC Bank Giro Credit BNS Bonus BP Bill Payment CHG Charge CHQ Cheque COM Commission COR Correction CPT Cashpoint CSH Cash CSQ Cash/Cheque DD Direct Debit DEB Debit Card DEP Deposit EFT EFTPOS (electronic funds transfer at point of sale) EUR Euro Cheque FE Foreign Exchange FEE Fixed Service Charge FPC Faster Payment charge FPI Faster Payment incoming FPO Faster Payment outgoing IB Internet Banking INT Interest MPI Mobile Payment incoming MPO Mobile Payment outgoing MTG Mortgage NS National Savings Dividend NSC National Savings Certificates OTH Other PAY Payment PSB Premium Savings Bonds PSV Paysave SAL Salary SPB Cashpoint SO Standing Order STK Stocks/Shares TD Dep Term Dec TDG Term Deposit Gross Interest TDI Dep Term Inc TDN Term Deposit Net Interest TFR Transfer UT Unit Trust SUR Excess Reject In (£) Out (£) Balance (£) View Pending Transactions 08 Aug 16 NON-STG CASH FEE CD 0568 07AUG16 DEB 2.00 276.79 08 Aug 16 NON-STG TRANS FEE 2.99% CD 0568 07AUG16 DEB 2.91 278.79 08 Aug 16 ABPR RW 100000.00 VISAXR 1026.27258 CD 0568 07AUG16 DEB 97.44 281.70 04 Aug 16 STUDENT LOANS SO 137.00 379.14 28 Jul 16 NON-STG CASH FEE CD 0568 28JUL16 DEB 2.00 516.14 Details for this transaction are not currently available. I need more help to identify a transaction 28 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 28JUL16 DEB 2.97 518.14 28 Jul 16 BK OLD BUILDING RW 102000.00 VISAXR 1024.50783 CD 0568 28JUL16 DEB 99.56 521.11 28 Jul 16 F/FLOW THOMAS BRIT TFR 173.33 620.67 25 Jul 16 NON-STG CASH FEE CD 0568 24JUL16 DEB 2.00 447.34 25 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 24JUL16 DEB 2.91 449.34 25 Jul 16 BPR RSWITCH RWANDA RW 100000.00 VISAXR 1024.27533 CD 0568 24JUL16 DEB 97.63 452.25 18 Jul 16 NON-STG CASH FEE CD 0568 17JUL16 DEB 2.00 549.88 18 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 17JUL16 DEB 2.88 551.88 18 Jul 16 KG RW 100000.00 VISAXR 1035.41106 CD 0568 17JUL16 DEB 96.58 554.76 18 Jul 16 NON-STG CASH FEE CD 0568 15JUL16 DEB 2.00 651.34 18 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 15JUL16 DEB 2.94 653.34 18 Jul 16 BK KINAMBA K-CONNE RW 102000.00 VISAXR 1035.42788 CD 0568 15JUL16 DEB 98.51 656.28 11 Jul 16 NON-STG CASH FEE CD 0568 09JUL16 DEB 2.00 754.79 11 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 09JUL16 DEB 2.98 756.79 11 Jul 16 KIGALI RW 100000.00 VISAXR 1000.90081 CD 0568 09JUL16 DEB 99.91 759.77 08 Jul 16 NON-STG CASH FEE CD 0568 06JUL16 DEB 2.00 859.68 08 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 06JUL16 DEB 3.05 861.68 08 Jul 16 BK KINAMBA K-CONNE RW 102000.00 VISAXR 997.45746 CD 0568 06JUL16 DEB 102.26 864.73 05 Jul 16 NON-STG CASH FEE CD 0568 01JUL16 DEB 2.00 966.99 05 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 01JUL16 DEB 2.91 968.99 Previous Next Latest Export Print Order Paper Statement Export Statement You can export a statement by entering a date range or export the current view of your statement. You can download a total of 150 transactions at a time. If there are more than 150 transactions in the range you've chosen, continue downloading until all the transactions have been included. Current view of statement Between From and To PrevNext August 2016 Mon Tue Wed Thu Fri Sat Sun 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Go to today Format REPLACE NOW YOU CAN REPLACE A DAMAGED CARD OR FORGOTTEN PIN ONLINE Find out more Contact us Internet banking queries Technical queries about the Internet Banking service. 0345 300 0116. We’re open 7am-10pm Mon – Fri, 8am-6pm Sat – Sun. If you need to call us from abroad or prefer not to use our 0345 number, you can also call us on +44 20499 43776 All account related queries 0345 300 0000 If you need to call us from abroad or prefer not to use our 0345 number, you can also call us on +44 1733 347 007. Lost or stolen debit card 0800 096 9779 If you need to call us from abroad or prefer not to use our 0345 number, you can also call us on +44 1702 278 270. If your debit card is declined, there are transactions you don’t recognise or you need a PIN call us on 0345 300 0000. If you need to call us from abroad or prefer not to use our 0345 number, you can also call us on +44 1733 347 007. We are open 24/7, calls may be recorded. Credit card customer services line 0345 606 2172 If you need to call us from abroad or prefer not to use our 0345 number, you can also call us on +44 1702 278 272. Calls may be monitored and recorded in case we need to check we have carried out your instructions correctly and to help us improve our quality of service. More ways to contact us Help &amp; Support My statement details are incorrect. What do I do? If you believe your statement is incorrect, please call us on 0345 300 0000 any time. If you prefer not to use our 0345 number, or you live outside of the UK, you can also call us on +44 (0) 1733 347 007. How are my deposits protected? Eligible deposits with us are protected by the Financial Services Compensation Scheme (FSCS). We will provide you with an information sheet and exclusions list every year. For further information about the compensation provided by the FSCS, refer to the FSCS website at www.FSCS.org.uk/. You can also visit our Financial Services Compensation Scheme page for more details. Holders of Jersey, the Bailiwick of Guernsey and the Isle of Man accounts can find relevant compensation scheme details here. What types of ISAs are available? There are three types of ISA: 'Cash', 'Stocks and Shares' and 'Innovative Finance'. UK residents over 16 can invest in a Cash ISA, and those over 18 in a Stocks and Shares ISA and/or Innovative Finance ISA. HM Revenue &amp; Customs decide the maximum annual ISA investment limits, and those limits may change. If you'd like to discuss investing in our ISAs, call us on 0345 300 0000 (or +44 1733 347 007 from outside the UK). How far back can I search for an account entry? The search facility will allow you to search all statement entries on your account since 1 July 2002, up to and including the most recent working day. How do I stop receiving paper statements? To stop receiving paper statements, use the 'Go paperless' link on your account statement page. Follow the instructions, then click to confirm. How far back can I search for items on my account? If you've gone paperless, you can view, print and download statements dating back to July 2002, free of charge. If you still get paper statements, you can view, print and download them online but we'll charge you for additional copies of your statements. What are the different ways I can search? You can search by: a date or range of dates (up to 3 months) a company or person’s name the type of payment made the transaction amount. Why can I only search a 3-month period? We’ve narrowed the search range to 3 months so you get your information quicker. What countries require a BIC and IBAN to be included in the payment? This is the current list of countries in the EU (Europe): Austria Bahrain Belgium Bulgaria Croatia Cyprus Czech Republic Denmark Estonia Finland France Germany Greece Hungary Ireland Italy Latvia Lithuania Luxembourg Malta Monaco Netherlands Poland Portugal Romania Slovakia Slovenia Spain Sweden Switzerland UAE United Kingdom I've been given a clearing code, but no Bank Identifier Code (BIC) or SWIFT code. What should I do? If you are creating an international recipient for an EU (European) country, you'll need to ask the recipient for this information. If your recipient is outside the EU, please choose the 'I don't know the BIC' option and follow the instructions. Why do I need a BIC/SWIFT code to make a payment to a recipient in an EU (European) country? If you're creating a recipient in the UAE, Bahrain or EEA (European Economic Area), you'll need to find out the BIC/SWIFT code and IBAN of their bank. Without them we won't be able to direct the payment to the right recipient so we won't be able to process the transaction. Why do I need a BIC/SWIFT code to make a payment to a recipient in certain countries? If you're creating a recipient in the UAE, Bahrain, Switzerland, Monaco or the EEA (European Economic Area), you'll need to find out the BIC/SWIFT code and IBAN of their bank. Without them we won't be able to direct the payment to the right recipient so we won't be able to process the transaction. I'm struggling with debt, where can I get help and guidance? Our Managing debt guide can help you get things under control. If you wish to speak to someone, please call the Customer Support Unit on 0808 145 0373 (+44 1733 347 007 from mobiles or abroad). I've been made redundant, what help is available to me? If you've recently been made redundant, or there's a chance that you soon could be, our redundancy help and guidance can help you get an understanding of your finances and what support is available to you. How do I close my savings account online? Only savings accounts that are eligible can be closed online. To check if your account is eligible go to your Account Statement page and look for the ‘Close this account’ link. If you have an eligible savings account and a balance of £5 or less in your account you will be able to close your account online by clicking the ‘Close this account’ link, on the Account Statement page. Why can’t I close my fixed rate or monthly saver account online? Fixed rate and monthly saver accounts are structured to pay interest at the end of a fixed period. You may be charged for closing your account early. To protect you from accidentally incurring this charge we restrict online closure to eligible accounts. You can close your fixed rate or monthly saver account by visiting your nearest branch. What if I have an applicable product but a balance of more than £5 and would like to close my savings account online? If you have a savings account with a balance of more than £5 but wish to close your account online, you can transfer the money out of your savings account. Providing the transfer will leave you with a final balance of £5 or less, you will be presented with the opportunity to close your account online. I have an account that is eligible and a balance of £5 or less, but I still don’t see the ‘Close this account’ link. How do I close my account? There may be a restriction on your account that prevents changes from occurring to it, for security reasons such as periods of inactivity for 2 years or more. For further assistance please visit your nearest branch. Can I close my joint account online? Joint savings accounts can be closed online unless you’ve previously requested that both parties named on the account sign their names to authorise any changes. If this is the case, please visit your nearest branch to close your account. How can I close my savings account if I have no other account to transfer the closing balance to? If you only have your savings account with us and no other account to transfer your closing balance, please visit your nearest branch. Will I get any outstanding or owed interest on my account if I close it online? Yes, if you choose to close your savings account online we will calculate any remaining interest on the account and if applicable transfer it along with the remaining balance to an account chosen by you. A statement showing your closing balance will be shown on screen, once your account is closed. This screen can be printed or saved onto your computer. What should I do if I’ve closed my account online but have not received the closing balance? If you have closed your savings account online but not received your closing balance, please call us on this number 0345 300 0116 and we will try to find out why this has happened. If you prefer not to use our 0345 number, or you live outside of the UK, you can also call us on +44 (0) 1733 347 007. More Show me how to... Our products and Services Featured Upgrade Current account Home insurance Try going Paperless Overdrafts Instant access Savings Cash ISAs Instant access Children's savings Monthly saver Fixed term Joint accounts Renew your savings account Current accounts Open a current account Join Club Lloyds or upgrade Switch to us Joint accounts Overdrafts Send money abroad Travel money Text Alerts Pay a Contact Insurance Home Insurance Car Insurance Van Insurance Travel Insurance Life Insurance Business Insurance Overdrafts Manage your overdraft Apply for an overdraft Credit cards All credit cards Loans Loan calculator New loan Car finance Mortgages Find out how much you can borrow Get agreement in principle Book a branch appointment Switch to a new deal Other mortgage options Investments New e-Investments Existing Investments Share dealing Retirement Financial advice Other services Send money abroad Travel money Text Alerts Pay a Contact Business banking Private banking International banking Islands Banking Start Saving Thomas Britnell - open an Easy Saver account today with just £1 and get instant access 24/7. Open with £1 Banking with us Branch finder CashPoint® finder Mobile Banking Rate and charges Glossary About us Communities Lloyds Banking Group Careers About this site Security Legal Privacy Terms and conditions Accessibility Contact us Go to mobile site Lloyds Bank plc is authorised by the Prudential Regulation Authority and regulated by the Financial Conduct Authority and the Prudential Regulation Authority under registration number 119278. Lloyds Bank plc is covered by the Financial Services Compensation Scheme and the Financial Ombudsman Service. (Please note that due to the schemes eligibility criteria not all Lloyds Bank business customers will be covered by these schemes.) Calls may be recorded for our mutual protection, training and monitoring purposes. Accounts in Jersey, the Bailiwick of Guernsey and the Isle of Man are held by Lloyds Bank International Limited which is not and is not required to be, authorised under the Financial Services and Markets Act 2000 of the United Kingdom and therefore is not subject to the rules and regulations of the Financial Services Compensation Scheme made under that Act for the protection of depositors or investors. For more information about depositor compensation schemes in Jersey, the Bailiwick of Guernsey and the Isle of Man please click here. Lloyds Bank International Limited. Registered office and principal place of business: PO Box 160, 25 New Street, St. Helier, Jersey JE4 8RG. Lloyds Bank International Limited is incorporated in Jersey No. 4029 and is regulated by the Jersey Financial Services Commission to carry on deposit-taking business under the Banking Business (Jersey) Law 1991 and investment and general insurance mediation business under the Financial Services (Jersey) Law 1998. Lloyds Bank International Limited subscribes to the Jersey Code of Practice for Consumer Lending and has also notified the Jersey Financial Services Commission that it carries on money service business. The Guernsey branch of Lloyds Bank International Limited, principal place of business PO Box 136, Sarnia House, Le Truchot, St Peter Port, Guernsey, GY1 4EN, is licensed by the Guernsey Financial Services Commission to take deposits and to carry on controlled investment business and insurance intermediary business under The Banking Supervision (Bailiwick of Guernsey) Law, 1994, The Protection of Investors (Bailiwick of Guernsey) Law, 1987 (as amended) and The Insurance Managers and Insurance Intermediaries (Bailiwick of Guernsey) Law, 2002 (as amended), respectively, and is also registered with the Guernsey Financial Services Commission as a money service provider. The Isle of Man branch of Lloyds Bank International Limited of PO Box 111, Peveril Buildings, Peveril Square, Douglas, Isle of Man IM99 1JJ, is licensed by the Isle of Man Financial Supervision Commission to conduct deposit-taking and investment business and is registered with the Isle of Man Insurance and Pensions Authority in respect of general insurance business (intermediary). " />
  <RDF:Description RDF:about="urn:scrapbook:item20160708090245#index"
                   NS1:content=" Tommy Advanced Search Find pages with... To do this in the search box all these words: Type the important words: tricolor rat terrier this exact word or phrase: Put exact words in quotes: &quot;rat terrier&quot; any of these words: Type OR between all the words you want: miniature OR standard none of these words: Put a minus sign just before words you don't want: -rodent, -&quot;Jack Russell&quot; numbers ranging from: to Put 2 periods between the numbers and add a unit of measure: 10..35 lb, $300..$500, 2010..2011 Then narrow your results by... language: any language Find pages in the language you select. region: any region Find pages published in a particular region. last update: anytime Find pages updated within the time you specify. site or domain: Search one site (like wikipedia.org ) or limit your results to a domain like .edu, .org or .gov terms appearing: anywhere in the page Search for terms in the whole page, page title, or web address, or links to the page you're looking for. SafeSearch: Show most relevant results Tell SafeSearch whether to filter sexually explicit content. file type: any format Find pages in the format you prefer. usage rights: not filtered by license Find pages you are free to use yourself. You can also... Find pages that are similar to, or link to, a URL Search pages you've visited Use operators in the search box Customize your search settings Help Privacy Terms Use Google.rw any language Afrikaans Arabic Armenian Belarusian Bulgarian Catalan Chinese (Simplified) Chinese (Traditional) Croatian Czech Danish Dutch English Esperanto Estonian Filipino Finnish French German Greek Hebrew Hindi Hungarian Icelandic Indonesian Italian Japanese Korean Latvian Lithuanian Norwegian Persian Polish Portuguese Romanian Russian Serbian Slovak Slovenian Spanish Swahili Swedish Thai Turkish Ukrainian Vietnamese any region Afghanistan Albania Algeria American Samoa Andorra Angola Anguilla Antarctica Antigua &amp; Barbuda Argentina Armenia Aruba Australia Austria Azerbaijan Bahamas Bahrain Bangladesh Barbados Belarus Belgium Belize Benin Bermuda Bhutan Bolivia Bosnia &amp; Herzegovina Botswana Bouvet Island Brazil British Indian Ocean Territory British Virgin Islands Brunei Bulgaria Burkina Faso Burundi Cambodia Cameroon Canada Cape Verde Cayman Islands Central African Republic Chad Chile China Christmas Island Cocos (Keeling) Islands Colombia Comoros Congo (DRC) Congo (Republic) Cook Islands Costa Rica Côte d’Ivoire Croatia Cuba Cyprus Czech Republic Denmark Djibouti Dominica Dominican Republic Ecuador Egypt El Salvador Equatorial Guinea Eritrea Estonia Ethiopia Falkland Islands (Islas Malvinas) Faroe Islands Fiji Finland France French Guiana French Polynesia French Southern Territories Gabon Gambia Georgia Germany Ghana Gibraltar Greece Greenland Grenada Guadeloupe Guam Guatemala Guinea Guinea-Bissau Guyana Haiti Heard &amp; McDonald Islands Honduras Hong Kong Hungary Iceland India Indonesia Iran Iraq Ireland Israel Italy Jamaica Japan Jordan Kazakhstan Kenya Kiribati Kuwait Kyrgyzstan Laos Latvia Lebanon Lesotho Liberia Libya Liechtenstein Lithuania Luxembourg Macau Macedonia (FYROM) Madagascar Malawi Malaysia Maldives Mali Malta Marshall Islands Martinique Mauritania Mauritius Mayotte Mexico Micronesia Moldova Monaco Mongolia Montserrat Morocco Mozambique Myanmar (Burma) Namibia Nauru Nepal Netherlands New Caledonia New Zealand Nicaragua Niger Nigeria Niue Norfolk Island North Korea Northern Mariana Islands Norway Oman Pakistan Palau Palestine Panama Papua New Guinea Paraguay Peru Philippines Pitcairn Islands Poland Portugal Puerto Rico Qatar Réunion Romania Russia Rwanda Samoa San Marino São Tomé &amp; Príncipe Saudi Arabia Senegal Serbia Seychelles Sierra Leone Singapore Slovakia Slovenia Solomon Islands Somalia South Africa South Georgia &amp; South Sandwich Islands South Korea Spain Sri Lanka St. Helena St. Kitts &amp; Nevis St. Lucia St. Pierre &amp; Miquelon St. Vincent &amp; Grenadines Sudan Suriname Svalbard &amp; Jan Mayen Swaziland Sweden Switzerland Syria Taiwan Tajikistan Tanzania Thailand Togo Tokelau Tonga Trinidad &amp; Tobago Tunisia Turkey Turkmenistan Turks &amp; Caicos Islands Tuvalu U.S. Outlying Islands U.S. Virgin Islands Uganda Ukraine United Arab Emirates United Kingdom United States Uruguay Uzbekistan Vanuatu Vatican City Venezuela Vietnam Wallis &amp; Futuna Western Sahara Yemen Zambia Zimbabwe anytime past 24 hours past week past month past year anywhere in the page in the title of the page in the text of the page in the URL of the page in links to the page not filtered by license free to use or share free to use or share, even commercially free to use share or modify free to use, share or modify, even commercially any format Adobe Acrobat PDF (.pdf) Adobe Postscript (.ps) Autodesk DWF (.dwf) Google Earth KML (.kml) Google Earth KMZ (.kmz) Microsoft Excel (.xls) Microsoft Powerpoint (.ppt) Microsoft Word (.doc) Rich Text Format (.rtf) Shockwave Flash (.swf) Show most relevant results Filter explicit results "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160629170003#index"
                   NS1:content=" current community chat Stack Overflow Meta Stack Overflow Stack Overflow Careers your communities Sign up or log in to customize your list. more stack exchange communities company blog Stack Exchange Inbox Reputation and Badges sign up log in tour help Tour Start here for a quick overview of the site Help Center Detailed answers to any questions you might have Meta Discuss the workings and policies of this site About Us Learn more about Stack Overflow the company Business Learn more about hiring developers or posting ads with us Stack Overflow Questions Jobs Tags Users Badges Ask Question _ Stack Overflow is a community of 4.7 million programmers, just like you, helping each other. Join them; it only takes a minute: Sign up Join the Stack Overflow community to: Ask programming questions Answer and help your peers Get recognized for your expertise Duplicating identical BeagleBone Black setups up vote 13 down vote favorite 4 After having set-up and customized my &quot;master&quot; BeagleBone Black (BBB) with applications etc. on the on-board eMMC, I want to duplicate it on other BBB boards. What is the best way to duplicate the BBB? My understanding of options: SD-Card: Programming each board by inserting a prepared SD card containing an image and pressing the &quot;boot&quot; switch while powering up. How should I prepare that .img file or the SD card from my master BBB? The image should copy to the on-board eMMC, so that the SD-card can be removed afterwards. USB: Programming by connecting the board over USB to a (Win7) PC. Is it possible to write the full on-board eMMC from the PC? With which app to do the writing? How to prepare the image which will be written, starting from the master BBB? Ethernet: Programming over LAN after boot-up with default angstrom distro. Is it even possible over LAN? How to do the writing? How to prepare the image which will be written, starting from the master BBB? Which is possible/best? Edit: My current solution is to flash with a standard image (from the BeagleBoe website) and then have a script do all modifications as expected. This includes disabling many services I don't need, installing applications and configuring stuff etc. If there is an easier way for making a SD card with a full image on it, I'm still interested. linux embedded-linux boot beagleboard beagleboneblack share|improve this question edited Oct 22 '14 at 10:20 asked Jul 24 '13 at 12:51 Philipp 1,37942138 1 check these scripts: github.com/RobertCNelson/tools/tree/master/scripts – Ottavio Campana Jul 24 '13 at 14:16 1 New user @Master tried found this and found it worked on Angstrom Rev 6, but on Rev C Debian board, &quot;it simply doesn't start when booting while holding the S2 Button pressed, all of the LEDs remain turned off and nothing else happen until I Restart the BBB normally.&quot; Anyone have any thoughts? – Chris Stratton Jul 30 '14 at 19:15 @ChrisStratton I'm having the same problems. It backs up a copy of the eMMC to the SD card, but I can't get S2 to work when I go to boot…have you had any luck? – Robert C Edwards Aug 6 '14 at 15:26 1 @RobertCEdwards - I was merely relaying a comment from someone else who had improperly posted it as an answer. I have not personally experimented with one of these particular boards. – Chris Stratton Aug 6 '14 at 15:28 add a comment | 5 Answers 5 active oldest votes up vote 9 down vote accepted For anyone else that needs this, the best answer I've found to this is to do the following: First setup your master Beaglebone Black the way you want it. Backup the eMMC FAT format a 4GB or larger SD card (must be a MBR/bootable formatted microSD card) Download beagleboneblack-save-emmc.zip and extract the contents onto your SD card Note: this is an image from Jason Krinder at his github https://github.com/jadonk/buildroot using the save-emmc-0.0.1 tag Put the card into your powered off Beaglebone Black Power on your Beaglebone Black while holding the S2 Button The USR0 led will blink for about 10 minutes, when it's steady on you have an SD card with a copy of your eMMC in a .img file Use the eMMC to flash a new Beaglebone Black On the SD card edit autorun.sh #!/bin/sh echo timer &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger dd if=/mnt/&lt;image-file&gt;.img of=/dev/mmcblk1 bs=10M sync echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger where &lt;image-file&gt; is the image file you got after copying backing up your eMMC Insert the card into your powered off Beaglebone Black Power on your Beaglebone Black while holding the S2 Button The Beaglebone Black should go into rebuilding mode and within about 20 minutes you'll have a newly flashed Beaglebone Black (when all 4 USR LEDs are solid) with a copy of your original eLinux reference used for this article - http://elinux.org/BeagleBone_Black_Extracting_eMMC_contents share|improve this answer edited Mar 13 '15 at 19:50 Visser 412310 answered May 10 '14 at 15:41 Paul Ryan 1,099721 1 Thanks for the edit. This is correct that the S2 button needs to be held until the USR lights start flashing (about 3-10 seconds). – Paul Ryan Jul 4 '14 at 23:22 I was running into problems getting the BBB to boot from the SD card. Turns out you need to mark the SD partition as active in order to boot from it. See Talk section from eLinux article referenced above. – Robert C Edwards Aug 6 '14 at 16:17 I would also recommend, to disconnect everything connected to the board (e.g. USB adapters, eth cable etc.) before powering it on. I was getting just two leds blinking briefly and the nothing before removing every connected device. – Luca Lenardi Feb 18 '15 at 20:35 I'm trying the above instructions and can't get it to work. I have a BBB Rev B. I have a 8GB SD card formatted FAT32. I don't see how you can format it just FAT as I think that only supports 2GB partitions. In either case neither windows 7 nor OSX will allow me to format it non-32 FAT. I disconnect all cables, put the card in, hold down S2 and plug the power in. After about 10 seconds the USR0 LED comes on solid (no flashing), USR2 just barley flashes. I leave it for hours and come back and USR0 is still on solid. I take card out, BBB-eMMC-2967.img is only 10 bytes. What is wrong? – Timothy Vann Feb 26 '15 at 5:20 Anyone know why this wouldn't work on the older 2G version of BBB? I have it working fine with the newer 4G version, but when I try to run it on a 2G one, it goes to a solid LCD immediately, and I only get a 1K image file. I wrote the contents of ls /dev/ to the card and noticed that there mmcblk1 is not there, only mmcblk0 (the SD card). Why would the eMMC not mount on the 2G version when it works fine on the 4G version? – Shawn Jacobson May 19 '15 at 14:29 | show 6 more comments No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 6 down vote I have the same need and am using dd and nc (NetCat) to save directly on my desktop without having to use an intermediary SD Card. You can do this over the USB connection, or ethernet connection, by changing the IP address in the steps below. After setting up your BBB with the applications you want, the basic steps are: On the desktop, run this command in a terminal: nc -l 19000|bzip2 -d|dd bs=16M of=BBB.img On the BeagleBone Black, run this command in a terminal (you can SSH into it, or do it directly from the BBB): dd bs=16M if=/dev/mmcblk0|bzip2 -c|nc 192.168.7.1 19000 The 192.168.7.1 address is for the USB connection. (BBB is 192.168.7.2) If you're doing this over an ethernet connection, you should use your desktop's IP address. This is taken from instructions here. Finally, follow any method to install onto the next BBB. Here's an example of how to flash the emmc. share|improve this answer answered Sep 5 '14 at 12:36 SevakPrime 38338 this almost worked, I spent a while before realizing that you need to actually do nc -l -p 19000 or that won't work on Linux Debian – joël Nov 12 '14 at 19:34 SevakPrime, I did manage to get my image BBB.img, and copied it on microSD, inserted in BBB, hold S2 while power it up but I am still not able to flash it back to my eMMC. I may be missing something in your workflow – joël Nov 13 '14 at 1:47 @joelmaranhao, copying it as a file to the microSD card won't work. You need to write it as an image to the microSD card. (See step #5 in the second link above.) See this link for how to write an image: embeddedarm.com/support/faqs.php?item=10 – SevakPrime Nov 13 '14 at 20:08 I didn't formulate my sentence correctly, that is actually exactly what I have done. I used the dd command to write the image, I didn't copy the file img onto the microSD. May be it's an issue with the revision of my BBB – joël Nov 16 '14 at 5:36 1 Is it safe to use dd to capture an image of an active system that is writing back to the device constantly? – kevinc Nov 17 '14 at 16:50 | show 1 more comment up vote 1 down vote As noted at the bottom of the eLinux article, there is a much easier way if you are running the Debian distribution: Boot master BBB with no SD card in Insert SD card Log in (e.g. with serial terminal, SSH etc.) and run sudo /opt/scripts/tools/eMMC/beaglebone-black-make-microSD-flasher-from-eMMC.sh. LEDs will flash in sequence whilst SD card is being written. When the LEDs stop and the script terminates, remove the SD card. Insert SD card into new BBB then power on. eMMC will be flashed; LEDs on new BBB will flash in sequence until complete. share|improve this answer answered Mar 22 at 12:02 emorris 345 add a comment | up vote 0 down vote Copying your emmc Image back to a SD card is a bit tricky, since it will need to be formated in a certain way to get it to mount. Here are some tips to get that working: http://dev.gentoo.org/~armin76/arm/beagleboneblack/install_emmc.xml#expand What might be easier is using an USB thumb drive, or USB SD card reader. Note, currently there are some issues hot-plugging USB devices, so boot with it plugged in. You can copy your entire FS to the USB drive, then compress it. Create a new bootable linux sd image, and put your compressed FS on there and use one of the scripts Ottavio linked to to copy over the compressed image. you can make a systemd service to launch the script on startup. share|improve this answer answered Aug 21 '13 at 7:29 stbtrax 504 add a comment | up vote 0 down vote We have noticed that on Beaglebones with the Jan 23rd 2015 release of Debian, the only way to successfully copy the image from SD is not to hold the boot button down when powering up. share|improve this answer answered Feb 1 at 16:17 Julian Gold 553322 add a comment | protected by Community♦ Aug 28 '14 at 9:31 Thank you for your interest in this question. Because it has attracted low-quality or spam answers that had to be removed, posting an answer now requires 10 reputation on this site (the association bonus does not count). Would you like to answer one of these unanswered questions instead? Not the answer you're looking for? Browse other questions tagged linux embedded-linux boot beagleboard beagleboneblack or ask your own question. asked 2 years ago viewed 15712 times active 3 months ago No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. Get the weekly newsletter! In it, you'll get: The week's top questions and answers Important community announcements Questions that need answers see an example newsletter By subscribing, you agree to the privacy policy and terms of service. Related 1 BeagleBone: Sitara SDK Installation Failure at Setup.sh 2 How to start beaglebone black without OS? 3 USB Bluetooth Dongle isn't recognized by BeagleBone Black 4 installing Angstrom on Beaglebone black 3 BeagleBone Black get interrupts from user-space 0 BeagleBone Black: Getting an image from eMMC back to the SD Card -1 Terminal connection to Beaglebone Black after Booting from Micro SD 4 Beaglebone Black not booting due to modification of uEnv.txt 1 Fix the boot order/eMMC on a Beagle Bone Black 0 how do I boot BeagleBone Black directly over UART? Hot Network Questions How to query with 2 conditions? CamlQuery Theoretically output Graham's number Is it normal to feel like I bought my way into graduate school after being rejected and then accepted when I was awarded an external fellowship? When is fsck dangerous? How to run my C programs with the Bourne Shell? Why did my LED resistor burn while lighting four LEDs in series? When a joke is really unfunny What are the new features in C++17? Could we rank languages, saying one is superior to the other? Is the UK Parliament e-petition system trustworthy? How will the UK leaving the EU affect ESA? What is a good translation of &quot;cancelled&quot; in the context of buses and trains? What is the proper way to ask a &quot;find the domain&quot; question? How do I wipe an encrypted USB flash drive? Where to hide my evil Overlord? Knight on the Rim is Grim Probable criteria for Ramming to become popularized for Space Combat Will it damage my MacBook if I put it in the fridge to cool it down? Is it ok to load a package twice (as long as no extra options are given)? Hosting company advised us to avoid PHP for security reasons. Are they right? What do you do when code review is just too hard? What exactly killed Ariana when Dumbledore and Grindelwald fought for 'The Greater Good'? If the British government did not follow through with the brexit what would happen? Magento 2: virtual types plugins question feed about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix &amp; Linux Ask Different (Apple) WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce ExpressionEngine® Answers more (13) Photography Science Fiction &amp; Fantasy Graphic Design Movies &amp; TV Seasoned Advice (cooking) Home Improvement Personal Finance &amp; Money Academia more (9) English Language &amp; Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow Chemistry Biology more (5) Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required rev 2016.6.29.3716 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630140546#index"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Watch 17 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 38 Star 38 Fork Where should we fork this repository? Loading 41 RobertCNelson/boot-scripts Code Issues 8 Pull requests 3 Wiki Pulse Graphs Permalink Branch: master Switch branches/tags Branches Tags master Nothing to show Nothing to show Find file Copy path boot-scripts/tools/eMMC/beaglebone-black-make-microSD-flasher-from-eMMC.sh ac2c09c 20 days ago @RobertCNelson RobertCNelson eMMC: remove reference to halt -f 1 contributor Users who have contributed to this file @RobertCNelson RobertCNelson Raw Blame History executable file 565 lines (473 sloc) 17.5 KB #!/bin/bash -e # # Copyright (c) 2013-2016 Robert Nelson &lt;robertcnelson@gmail.com&gt; # Portions copyright (c) 2014 Charles Steinkuehler &lt;charles@steinkuehler.net&gt; # # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the &quot;Software&quot;), to deal # in the Software without restriction, including without limitation the rights # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell # copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included in # all copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN # THE SOFTWARE. #This script assumes, these packages are installed, as network may not be setup #dosfstools initramfs-tools rsync u-boot-tools version_message=&quot;1.20160527: upgrade backup u-boot: v2016.03-r7...&quot; #https://rcn-ee.com/repos/bootloader/am335x_evm/ http_spl=&quot;MLO-am335x_evm-v2016.03-r7&quot; http_uboot=&quot;u-boot-am335x_evm-v2016.03-r7.img&quot; if ! id | grep -q root; then echo &quot;must be run as root&quot; exit fi unset root_drive root_drive=&quot;$(cat /proc/cmdline | sed 's/ /\n/g' | grep root=UUID= | awk -F 'root=' '{print $2}' || true)&quot; if [ ! &quot;x${root_drive}&quot; = &quot;x&quot; ] ; then root_drive=&quot;$(/sbin/findfs ${root_drive} || true)&quot; else root_drive=&quot;$(cat /proc/cmdline | sed 's/ /\n/g' | grep root= | awk -F 'root=' '{print $2}' || true)&quot; fi boot_drive=&quot;${root_drive%?}1&quot; if [ &quot;x${boot_drive}&quot; = &quot;x/dev/mmcblk0p1&quot; ] ; then source=&quot;/dev/mmcblk0&quot; destination=&quot;/dev/mmcblk1&quot; fi if [ &quot;x${boot_drive}&quot; = &quot;x/dev/mmcblk1p1&quot; ] ; then source=&quot;/dev/mmcblk1&quot; destination=&quot;/dev/mmcblk0&quot; fi echo &quot;&quot; echo &quot;Unmounting Partitions&quot; echo &quot;-----------------------------&quot; NUM_MOUNTS=$(mount | grep -v none | grep &quot;${destination}&quot; | wc -l) i=0 ; while test $i -le ${NUM_MOUNTS} ; do DRIVE=$(mount | grep -v none | grep &quot;${destination}&quot; | tail -1 | awk '{print $1}') umount ${DRIVE} &gt;/dev/null 2&gt;&amp;1 || true i=$(($i+1)) done flush_cache () { sync blockdev --flushbufs ${destination} } broadcast () { if [ &quot;x${message}&quot; != &quot;x&quot; ] ; then echo &quot;${message}&quot; #echo &quot;${message}&quot; &gt; /dev/tty0 || true fi } write_failure () { message=&quot;writing to [${destination}] failed...&quot; ; broadcast [ -e /proc/$CYLON_PID ] &amp;&amp; kill $CYLON_PID &gt; /dev/null 2&gt;&amp;1 if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr1/trigger echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr2/trigger echo heartbeat &gt; /sys/class/leds/beaglebone\:green\:usr3/trigger fi message=&quot;-----------------------------&quot; ; broadcast flush_cache umount ${destination}p1 &gt; /dev/null 2&gt;&amp;1 || true umount ${destination}p2 &gt; /dev/null 2&gt;&amp;1 || true inf_loop } check_running_system () { message=&quot;copying: [${source}] -&gt; [${destination}]&quot; ; broadcast message=&quot;lsblk:&quot; ; broadcast message=&quot;`lsblk || true`&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast message=&quot;df -h | grep rootfs:&quot; ; broadcast message=&quot;`df -h | grep rootfs || true`&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast if [ ! -b &quot;${destination}&quot; ] ; then message=&quot;Error: [${destination}] does not exist&quot; ; broadcast write_failure fi if [ ! -f /boot/config-$(uname -r) ] ; then zcat /proc/config.gz &gt; /boot/config-$(uname -r) fi if [ -f /boot/initrd.img-$(uname -r) ] ; then update-initramfs -u -k $(uname -r) else update-initramfs -c -k $(uname -r) fi flush_cache ##FIXME: quick check for rsync 3.1 (jessie) unset rsync_check unset rsync_progress rsync_check=$(LC_ALL=C rsync --version | grep version | awk '{print $3}' || true) if [ &quot;x${rsync_check}&quot; = &quot;x3.1.1&quot; ] ; then rsync_progress=&quot;--info=progress2 --human-readable&quot; fi if [ ! -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then modprobe leds_gpio || true sleep 1 fi } cylon_leds () { if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then BASE=/sys/class/leds/beaglebone\:green\:usr echo none &gt; ${BASE}0/trigger echo none &gt; ${BASE}1/trigger echo none &gt; ${BASE}2/trigger echo none &gt; ${BASE}3/trigger STATE=1 while : ; do case $STATE in 1) echo 255 &gt; ${BASE}0/brightness echo 0 &gt; ${BASE}1/brightness STATE=2 ;; 2) echo 255 &gt; ${BASE}1/brightness echo 0 &gt; ${BASE}0/brightness STATE=3 ;; 3) echo 255 &gt; ${BASE}2/brightness echo 0 &gt; ${BASE}1/brightness STATE=4 ;; 4) echo 255 &gt; ${BASE}3/brightness echo 0 &gt; ${BASE}2/brightness STATE=5 ;; 5) echo 255 &gt; ${BASE}2/brightness echo 0 &gt; ${BASE}3/brightness STATE=6 ;; 6) echo 255 &gt; ${BASE}1/brightness echo 0 &gt; ${BASE}2/brightness STATE=1 ;; *) echo 255 &gt; ${BASE}0/brightness echo 0 &gt; ${BASE}1/brightness STATE=2 ;; esac sleep 0.1 done fi } dd_bootloader () { message=&quot;Writing bootloader to [${destination}]&quot; ; broadcast unset dd_spl_uboot if [ ! &quot;x${dd_spl_uboot_count}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}count=${dd_spl_uboot_count} &quot; fi if [ ! &quot;x${dd_spl_uboot_seek}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}seek=${dd_spl_uboot_seek} &quot; fi if [ ! &quot;x${dd_spl_uboot_conf}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}conv=${dd_spl_uboot_conf} &quot; fi if [ ! &quot;x${dd_spl_uboot_bs}&quot; = &quot;x&quot; ] ; then dd_spl_uboot=&quot;${dd_spl_uboot}bs=${dd_spl_uboot_bs}&quot; fi unset dd_uboot if [ ! &quot;x${dd_uboot_count}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}count=${dd_uboot_count} &quot; fi if [ ! &quot;x${dd_uboot_seek}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}seek=${dd_uboot_seek} &quot; fi if [ ! &quot;x${dd_uboot_conf}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}conv=${dd_uboot_conf} &quot; fi if [ ! &quot;x${dd_uboot_bs}&quot; = &quot;x&quot; ] ; then dd_uboot=&quot;${dd_uboot}bs=${dd_uboot_bs}&quot; fi message=&quot;dd if=${dd_spl_uboot_backup} of=${destination} ${dd_spl_uboot}&quot; ; broadcast echo &quot;-----------------------------&quot; dd if=${dd_spl_uboot_backup} of=${destination} ${dd_spl_uboot} echo &quot;-----------------------------&quot; message=&quot;dd if=${dd_uboot_backup} of=${destination} ${dd_uboot}&quot; ; broadcast echo &quot;-----------------------------&quot; dd if=${dd_uboot_backup} of=${destination} ${dd_uboot} message=&quot;-----------------------------&quot; ; broadcast } format_boot () { message=&quot;mkfs.vfat -F 16 ${destination}p1 -n ${boot_label}&quot; ; broadcast echo &quot;-----------------------------&quot; mkfs.vfat -F 16 ${destination}p1 -n ${boot_label} echo &quot;-----------------------------&quot; flush_cache } format_root () { message=&quot;mkfs.ext4 ${destination}p2 -L ${rootfs_label}&quot; ; broadcast echo &quot;-----------------------------&quot; mkfs.ext4 ${destination}p2 -L ${rootfs_label} echo &quot;-----------------------------&quot; flush_cache } format_single_root () { message=&quot;mkfs.ext4 ${destination}p1 -L ${boot_label}&quot; ; broadcast echo &quot;-----------------------------&quot; mkfs.ext4 ${destination}p1 -L ${boot_label} echo &quot;-----------------------------&quot; flush_cache } copy_boot () { message=&quot;Copying: ${source}p1 -&gt; ${destination}p1&quot; ; broadcast mkdir -p /tmp/boot/ || true umount ${source}p1 || umount -l ${source}p1 || true if ! mount -o sync ${source}p1 /boot/uboot/; then echo &quot;-----------------------------&quot; echo &quot;BUG: [mount -o sync ${source}p1 /boot/uboot/] was not available so trying to mount again in 5 seconds...&quot; sync sleep 5 echo &quot;-----------------------------&quot; if ! mount -o sync ${source}p1 /boot/uboot/; then echo &quot;mounting ${source}p1 failed..&quot; exit fi fi if ! mount -o sync ${destination}p1 /tmp/boot/; then echo &quot;-----------------------------&quot; echo &quot;BUG: [mount -o sync ${destination}p1 /tmp/boot/] was not available so trying to mount again in 5 seconds...&quot; sync sleep 5 echo &quot;-----------------------------&quot; if ! mount -o sync ${destination}p1 /tmp/boot/; then echo &quot;mounting ${destination}p1 failed..&quot; exit fi fi if [ -f /boot/uboot/MLO ] ; then #Make sure the BootLoader gets copied first: cp -v /boot/uboot/MLO /tmp/boot/MLO || write_failure flush_cache cp -v /boot/uboot/u-boot.img /tmp/boot/u-boot.img || write_failure flush_cache fi message=&quot;rsync: /boot/uboot/ -&gt; /tmp/boot/&quot; ; broadcast if [ ! &quot;x${rsync_progress}&quot; = &quot;x&quot; ] ; then echo &quot;rsync: note the % column is useless...&quot; fi rsync -aAx ${rsync_progress} /boot/uboot/ /tmp/boot/ --exclude={MLO,u-boot.img,uEnv.txt} || write_failure flush_cache flush_cache umount /tmp/boot/ || umount -l /tmp/boot/ || write_failure flush_cache umount /boot/uboot || umount -l /boot/uboot } copy_rootfs () { message=&quot;Copying: ${source}p${media_rootfs} -&gt; ${destination}p${media_rootfs}&quot; ; broadcast mkdir -p /tmp/rootfs/ || true if ! mount -o async,noatime ${destination}p${media_rootfs} /tmp/rootfs/; then echo &quot;-----------------------------&quot; echo &quot;BUG: [mount -o sync ${destination}p${media_rootfs} /tmp/rootfs/] was not available so trying to mount again in 5 seconds...&quot; sync sleep 5 echo &quot;-----------------------------&quot; if ! mount -o async,noatime ${destination}p${media_rootfs} /tmp/rootfs/; then echo &quot;mounting ${destination}p${media_rootfs} failed..&quot; exit fi fi message=&quot;rsync: / -&gt; /tmp/rootfs/&quot; ; broadcast if [ ! &quot;x${rsync_progress}&quot; = &quot;x&quot; ] ; then echo &quot;rsync: note the % column is useless...&quot; fi rsync -aAx ${rsync_progress} /* /tmp/rootfs/ --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found,/lib/modules/*,/uEnv.txt} || write_failure flush_cache mkdir -p /tmp/rootfs/lib/modules/$(uname -r)/ || true message=&quot;Copying: Kernel modules&quot; ; broadcast message=&quot;rsync: /lib/modules/$(uname -r)/ -&gt; /tmp/rootfs/lib/modules/$(uname -r)/&quot; ; broadcast if [ ! &quot;x${rsync_progress}&quot; = &quot;x&quot; ] ; then echo &quot;rsync: note the % column is useless...&quot; fi rsync -aAx ${rsync_progress} /lib/modules/$(uname -r)/* /tmp/rootfs/lib/modules/$(uname -r)/ || write_failure flush_cache message=&quot;Copying: ${source}p${media_rootfs} -&gt; ${destination}p${media_rootfs} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast message=&quot;Final System Tweaks:&quot; ; broadcast unset root_uuid root_uuid=$(/sbin/blkid -c /dev/null -s UUID -o value ${destination}p${media_rootfs}) if [ &quot;${root_uuid}&quot; ] ; then sed -i -e 's:uuid=:#uuid=:g' /tmp/rootfs/boot/uEnv.txt echo &quot;uuid=${root_uuid}&quot; &gt;&gt; /tmp/rootfs/boot/uEnv.txt message=&quot;UUID=${root_uuid}&quot; ; broadcast root_uuid=&quot;UUID=${root_uuid}&quot; else #really a failure... root_uuid=&quot;${source}p${media_rootfs}&quot; fi if [ ! -f /opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh ] ; then mkdir -p /opt/scripts/tools/eMMC/ wget --directory-prefix=&quot;/opt/scripts/tools/eMMC/&quot; https://raw.githubusercontent.com/RobertCNelson/boot-scripts/master/tools/eMMC/init-eMMC-flasher-v3.sh sudo chmod +x /opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh fi message=&quot;Generating: /etc/fstab&quot; ; broadcast echo &quot;# /etc/fstab: static file system information.&quot; &gt; /tmp/rootfs/etc/fstab echo &quot;#&quot; &gt;&gt; /tmp/rootfs/etc/fstab echo &quot;${root_uuid} / ext4 noatime,errors=remount-ro 0 1&quot; &gt;&gt; /tmp/rootfs/etc/fstab echo &quot;debugfs /sys/kernel/debug debugfs defaults 0 0&quot; &gt;&gt; /tmp/rootfs/etc/fstab cat /tmp/rootfs/etc/fstab message=&quot;/boot/uEnv.txt: enabling eMMC flasher script&quot; ; broadcast script=&quot;cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh&quot; echo &quot;${script}&quot; &gt;&gt; /tmp/rootfs/boot/uEnv.txt cat /tmp/rootfs/boot/uEnv.txt message=&quot;-----------------------------&quot; ; broadcast flush_cache umount /tmp/rootfs/ || umount -l /tmp/rootfs/ || write_failure [ -e /proc/$CYLON_PID ] &amp;&amp; kill $CYLON_PID message=&quot;Syncing: ${destination}&quot; ; broadcast #https://github.com/beagleboard/meta-beagleboard/blob/master/contrib/bone-flash-tool/emmc.sh#L158-L159 # force writeback of eMMC buffers sync dd if=${destination} of=/dev/null count=100000 message=&quot;Syncing: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast if [ -f /boot/debug.txt ] ; then message=&quot;This script has now completed its task&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast message=&quot;debug: enabled&quot; ; broadcast inf_loop else if [ -e /sys/class/leds/beaglebone\:green\:usr0/trigger ] ; then echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr0/trigger echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr1/trigger echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr2/trigger echo default-on &gt; /sys/class/leds/beaglebone\:green\:usr3/trigger fi mount message=&quot;eMMC has been flashed: please wait for device to power down.&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast flush_cache fi } partition_drive () { message=&quot;Erasing: ${destination}&quot; ; broadcast flush_cache dd if=/dev/zero of=${destination} bs=1M count=108 sync dd if=${destination} of=/dev/null bs=1M count=108 sync flush_cache message=&quot;Erasing: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast if [ -f /boot/SOC.sh ] ; then . /boot/SOC.sh fi if [ &quot;x${dd_spl_uboot_backup}&quot; = &quot;x&quot; ] ; then spl_uboot_name=MLO dd_spl_uboot_count=&quot;1&quot; dd_spl_uboot_seek=&quot;1&quot; dd_spl_uboot_conf=&quot;&quot; dd_spl_uboot_bs=&quot;128k&quot; dd_spl_uboot_backup=/opt/backup/uboot/MLO echo &quot;spl_uboot_name=${spl_uboot_name}&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_count=1&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_seek=1&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_conf=&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_bs=128k&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_spl_uboot_name=${dd_spl_uboot_name}&quot; &gt;&gt; /boot/SOC.sh fi if [ ! -f /opt/backup/uboot/MLO ] ; then mkdir -p /opt/backup/uboot/ wget --directory-prefix=/opt/backup/uboot/ http://rcn-ee.com/repos/bootloader/am335x_evm/${http_spl} mv /opt/backup/uboot/${http_spl} /opt/backup/uboot/MLO fi if [ &quot;x${dd_uboot_backup}&quot; = &quot;x&quot; ] ; then uboot_name=u-boot.img dd_uboot_count=&quot;2&quot; dd_uboot_seek=&quot;1&quot; dd_uboot_conf=&quot;&quot; dd_uboot_bs=&quot;384k&quot; dd_uboot_backup=/opt/backup/uboot/u-boot.img echo &quot;uboot_name=${uboot_name}&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_count=2&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_seek=1&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_conf=&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_bs=384k&quot; &gt;&gt; /boot/SOC.sh echo &quot;boot_name=u-boot.img&quot; &gt;&gt; /boot/SOC.sh echo &quot;dd_uboot_name=${dd_uboot_name}&quot; &gt;&gt; /boot/SOC.sh fi if [ ! -f /opt/backup/uboot/u-boot.img ] ; then mkdir -p /opt/backup/uboot/ wget --directory-prefix=/opt/backup/uboot/ http://rcn-ee.com/repos/bootloader/am335x_evm/${http_uboot} mv /opt/backup/uboot/${http_uboot} /opt/backup/uboot/u-boot.img fi dd_bootloader if [ &quot;x${boot_fstype}&quot; = &quot;xfat&quot; ] ; then conf_boot_startmb=${conf_boot_startmb:-&quot;1&quot;} conf_boot_endmb=${conf_boot_endmb:-&quot;96&quot;} sfdisk_fstype=${sfdisk_fstype:-&quot;0xE&quot;} boot_label=${boot_label:-&quot;BEAGLEBONE&quot;} rootfs_label=${rootfs_label:-&quot;rootfs&quot;} message=&quot;Formatting: ${destination}&quot; ; broadcast sfdisk_options=&quot;--force --Linux --in-order --unit M&quot; sfdisk_boot_startmb=&quot;${conf_boot_startmb}&quot; sfdisk_boot_endmb=&quot;${conf_boot_endmb}&quot; test_sfdisk=$(LC_ALL=C sfdisk --help | grep -m 1 -e &quot;--in-order&quot; || true) if [ &quot;x${test_sfdisk}&quot; = &quot;x&quot; ] ; then message=&quot;sfdisk: [2.26.x or greater]&quot; ; broadcast sfdisk_options=&quot;--force&quot; sfdisk_boot_startmb=&quot;${sfdisk_boot_startmb}M&quot; sfdisk_boot_endmb=&quot;${sfdisk_boot_endmb}M&quot; fi message=&quot;sfdisk: [sfdisk ${sfdisk_options} ${destination}]&quot; ; broadcast message=&quot;sfdisk: [${sfdisk_boot_startmb},${sfdisk_boot_endmb},${sfdisk_fstype},*]&quot; ; broadcast message=&quot;sfdisk: [,,,-]&quot; ; broadcast LC_ALL=C sfdisk ${sfdisk_options} &quot;${destination}&quot; &lt;&lt;-__EOF__ ${sfdisk_boot_startmb},${sfdisk_boot_endmb},${sfdisk_fstype},* ,,,- __EOF__ flush_cache format_boot format_root message=&quot;Formatting: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast copy_boot media_rootfs=&quot;2&quot; copy_rootfs else conf_boot_startmb=${conf_boot_startmb:-&quot;1&quot;} sfdisk_fstype=${sfdisk_fstype:-&quot;L&quot;} if [ &quot;x${sfdisk_fstype}&quot; = &quot;x0x83&quot; ] ; then sfdisk_fstype=&quot;L&quot; fi boot_label=${boot_label:-&quot;BEAGLEBONE&quot;} message=&quot;Formatting: ${destination}&quot; ; broadcast sfdisk_options=&quot;--force --Linux --in-order --unit M&quot; sfdisk_boot_startmb=&quot;${conf_boot_startmb}&quot; test_sfdisk=$(LC_ALL=C sfdisk --help | grep -m 1 -e &quot;--in-order&quot; || true) if [ &quot;x${test_sfdisk}&quot; = &quot;x&quot; ] ; then message=&quot;sfdisk: [2.26.x or greater]&quot; ; broadcast if [ &quot;x${bootrom_gpt}&quot; = &quot;xenable&quot; ] ; then sfdisk_options=&quot;--force --label gpt&quot; else sfdisk_options=&quot;--force&quot; fi sfdisk_boot_startmb=&quot;${sfdisk_boot_startmb}M&quot; fi message=&quot;sfdisk: [$(LC_ALL=C sfdisk --version)]&quot; ; broadcast message=&quot;sfdisk: [sfdisk ${sfdisk_options} ${destination}]&quot; ; broadcast message=&quot;sfdisk: [${sfdisk_boot_startmb},${sfdisk_boot_endmb},${sfdisk_fstype},*]&quot; ; broadcast LC_ALL=C sfdisk ${sfdisk_options} &quot;${destination}&quot; &lt;&lt;-__EOF__ ${sfdisk_boot_startmb},,${sfdisk_fstype},* __EOF__ flush_cache format_single_root message=&quot;Formatting: ${destination} complete&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast media_rootfs=&quot;1&quot; copy_rootfs fi } clear message=&quot;-----------------------------&quot; ; broadcast message=&quot;Version: [${version_message}]&quot; ; broadcast message=&quot;-----------------------------&quot; ; broadcast check_running_system cylon_leds &amp; CYLON_PID=$! partition_drive # Jump to Line Go Status API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Contact Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160629170505#index"
                   NS1:content=" Menu Close Home How-To About Us Subscribe Blog Logo Menu How-To: Make custom BeagleBone Black OS images with the OMAP Image Builder 30 June 2015 on Linux, How-To, BeagleBone Black For most use cases, the official OS images for the BeagleBone Black (BBB) will work just fine. However, sometimes you want to create your own custom image. And, if you find yourself doing that more than sometimes - like myself - you will want a repeatable process for generating the custom images. For that I recommend using Robert C. Nelson's OMAP Image Builder, available on GitHub. Using the config files already in the project as a reference, you can easily generate your own custom BBB OS image. In this post I'll provide you with an overview of the OMAP Image Builder project so you know what's what, and walk you through making your own custom OS image for the BBB. Requirements and recommendations Hardware It is highly recommended you use actual ARM7 hardware for building images. If you don't have access to something beefier than a BBB, and you don't want to buy a another (more expensive) board, check out Scaleway. They provide bare-metal ARM computers via a service similar to Linode or DigitalOcean. If you want a non-cloud option, the Wandboard Quad with an attached SATA drive is probably your best value. Software I've used Ubuntu or Debian as the host OS when creating all of my images. You can probably get a Redhat-based distro to work, but I can't vouch for it. I doubt you can use OSX, but I'd love to be proven wrong. Skills This post is targeted towards those who are generally familiar with Linux, and are comfortable with Bash scripting. You'll probably be asked to install a number of missing packages and dependencies, so you should be familiar with how to install software through a CLI package manager. Also if you aren't familiar with chroot, Google it, as it is an essential concept in the image-creation process. OMAP Image Builder overview Building an image with the OMAP Image Builder is essentially a two-step process. Generate an OS filesystem in a chroot jail with custom attributes defined in a config file: ./RootStock-NG.sh -c your_config_file Turn that filesystem into an image that can be copied to a microSD card: ./setup_sdcard.sh [a] [bunch] [of] [options] You can see some examples in the project README. Structure If you haven't done so yet, open the OMAP Image Builder GitHub project in a new tab. We'll be referring back to it. Here is the project structure: omap-image-builder/ ├── configs ├── docs ├── LICENSE ├── machinekit ├── publish ├── readme.md ├── RootStock-NG.sh ├── scripts │ ├── chroot.sh │ ├── debootstrap.sh │ └── install_dependencies.sh ├── target │ ├── boot │ ├── chroot │ ├── init_scripts │ ├── keyring │ └── other └── tools ├── hwpack └── setup_sdcard.sh I've omitted all the files except the few we're interested in. So what's important? RootStock-NG.sh - This is main script for building root filesystem. Input is a config. configs/ - This folder contains the config files that can be used with RootStock-NG.sh target/ - This folder contains scripts, referenced in the config files, that can be optionally accessed while building the filesystem or by setup_sdcard.sh. target/chroot/ - This folder contains scripts that can be executed from within the generated filesystem without knowledge of the host. target/boot - Various boot configs. setup_sdcard.sh - Script that generates the image file from what RootStock-NG.sh makes. Configs and chroot scripts These configs are the input for RootStock-NG.sh. They may also refer to other scripts which will be executed at some point during the build process. In the configs folder you will find a template config file, but without guiding documentation, making it difficult to tell what each variable's purpose is, or what format its value should take. Rather than using that template to make a new config, it is often easier to take a preexisting config file, copy it, and edit it. Let's take a closer look at bb.org-debian-wheezy-console.conf. There are a lot of variables, though there are only a few that you will probably want to change. deb_include - These are the packages that are installed by debootstrap, an application that installs a complete Debian base system in a subdirectory. deb_exclude - These are the packages that would be installed...but you don't want. deb_additional_pkg - Packages listed here are not installed natively by debootstrap, and will likely fail if done in QEMU on non-ARM7 hardware. Remember that warning about building on ARM7? This partly why. It's best to try to install packages via deb_include. rfs_username, rfs_fullname, and rfs_password - I think 'rfs' stands for &quot;root filesystem&quot;. This is where you define the default username and password. chroot_script - The script in target/chroot/ that you want to execute from inside the chroot while building an image. This where you can install python packages, clone git repos, setup configs, etc. all from inside the chroot. Open up the chroot script, beagleboard.org-console.sh that is bb.org-debian-wheezy-console.conf. This a bit confusing, but this is what you use to install system packages. I recommend looking at the other scripts in this folder to see what they do. chroot_after_hook - This isn't currently used by any of the configs in the configs/ folder, but it's essentially like chroot_script; however, the script resides in the project root, and is executed outside of the chroot. This is useful if you have something on the host computer that you need to add to the chroot. Look at the chroot.sh and see where chrootafterhook is called. setup_sdcard.sh setupsdcard.sh is not particularly well documented, but luckily there are a couple good examples of how to use it in beaglboard.orgimage.sh. I personally haven't strayed from these, but if you read the script, you will see that there are a lot more options available. I haven't verified this with the author, but I assume this is the script that is used to generate the official BeagleBone Black images. In the script you can see this function: generic_img () { cd \${base_rootfs}/ sudo ./setup_sdcard.sh \${options} mv *.img ../ cd .. } and a little further down you can see it being used to make the bb.org-debian-wheezy-console image: options=&quot;--img-2gb BBB-eMMC-flasher-\${base_rootfs} --dtb beaglebone --boot_label BEAGLEBONE --enable-systemd --bbb-flasher --bbb-old-bootloader-in-emmc --hostname beaglebone&quot; generic_img Let's look at some of the options used. img-2gb - This is basically defining how big the image will be. Important for BeagleBone Black owners as the latest generation (rev C) has a 4GB eMMC, while past generations had a 2GB eMMC. dtb - I think this is where you say which hardware profile to use from tools/hwpack. bbb-flasher - make it an eMMC flasher (flash the eMMC with the image), as opposed to booting off the SD card. All together now Ok let's make a custom image! This is what we're going to do: Clone the repo Make a custom config file Make a custom chroot script Generate our root filesystem Make an eMMC flasher image out of the root filesystem Compress the image so you can easily send it to all your friends Step 1: Clone that repo Git clone the OMAP Image Builder project. If you're unfamiliar with git, Atlassian has this great guide. git clone https://github.com/RobertCNelson/omap-image-builder.git &amp;&amp; cd omap-image-builder Step 2: Create a custom config Copy a config you like to a different name: cp configs/bb.org-debian-wheezy-console.conf configs/custom-image.conf In configs/custom-image.conf add or remove some packages from deb_include. I love htop, nmap, and moon-buggy, so I'm adding those. Change any of the other variables that you feel comfortable changing. Feel free to look at other configs for inspiration. ... deb_include=&quot;ca-certificates dosfstools dbus initramfs-tools linux-base \ openssh-server patch rsync sudo systemd wget htop nmap moon-buggy&quot; ... Step 3: Create a custom chroot script Copy a chroot script you like to a different name: cp target/chroot/beagleboard.org-console.sh target/chroot/custom-image.sh Open the config file you just made, and make sure to change chroot_script to point at your new script: chroot_script=&quot;custom-image.sh&quot; Ok, back to custom-image.sh. Let's install some more python packages. In your new config, find the function install_pip_pkg. Here it is in the original script. I like ipython and ipdb, so i'm going add those here: pip install Adafruit_BBIO ipython ipdb At the bottom of the script, uncomment #install_pip_pkgs. Step 4: Generate the root filesystem ./RootStock-NG.sh -c custom-image Get a coffee... this will take a while. Step 5: Generate an .img file Finished? No errors? Cool, let's make an image. The last step made a deploy/ directory. The root filesystem is in there. cd deploy In there you will see a folder with the name of the filesystem you created. If you used the bb.org-debian-wheezy-console.conf as your reference, it's probably something like debian-7.8-console-armhf. cd into that directory. In this directory you should see setup_sdcard.sh. Use that to make a eMMC flasher image. sudo ./setup_sdcard --img-2gb BBB-eMMC-flasher-debian-7.8-console-armhf --dtb beaglebone --boot_label BEAGLEBONE --enable-systemd --bbb-flasher --bbb-old-bootloader-in-emmc --hostname beaglebone&quot; This should generate an image file named BBB-eMMC-flasher-debian-7.8-console-armhf-2gb.img. Step 6: Compress that image file If you used the --img-2gb option, your .img file should be just shy of 2 GB. We should be able to compress that down to under 500 MB. To do so, do this: xz -z -8 -v BBB-eMMC-flasher-debian-7.8-console-armhf-2gb.img This takes a few minutes, but afterwards you'll have a much smaller file to distribute. End It is way easier to just install an OS using the provided images, and configure them after deploying. There is no shame in that. If you don't need a custom image, don't use one! But, for those scenarios that don't allow for using the stock images, I'm thankful that Robert Nelson has provided the OMAP Image Builder and made it simple to add new configs. Also see this post about modifying an image with the loop device. Good luck hacking! Scott McGhee's Picture Scott McGhee Father, husband, technologist, entrepreneur. Working to get to the point where work is no longer required, and family and gardens take up the best hours of the day. Mill Creek, WA http://barsandspaces.com Share this post Twitter Facebook Google+ How-to: Chain your certs The problem: You're getting all kinds of SSL errors on network services you're trying to run. Maybe 500-level HTTP… bars_and_spaces © 2016 Proudly published with Ghost "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628122008#index"
                   NS1:content=" SD/MMC format for OMAP3 boot From Texas Instruments Wiki &lt; SD(Redirected from MMC Boot Format) Jump to: navigation, search In order to create a bootable SD/MMC card under Linux compatible with OMAP3 boot ROM, you'd have to set a special geometry in the partition table, which is done through the fdisk &quot;Expert mode&quot;. For Windows tooling see Procedure to boot with MMC/SD page. First, lets clear the partition table: # fdisk /dev/sdb Command (m for help): o Building a new DOS disklabel. Changes will remain in memory only, until you decide to write them. After that, of course, the previous content won't be recoverable. Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite) Print card info: Command (m for help): p Disk /dev/sdb: 128 MB, 128450560 bytes .... Note card size in bytes. Needed later below. Then go into &quot;Expert mode&quot;: Command (m for help): x Now we want to set the geometry to 255 heads, 63 sectors and calculate the number of cylinders required for the particular SD/MMC card: Expert command (m for help): h Number of heads (1-256, default 4): 255 Expert command (m for help): s Number of sectors (1-63, default 62): 63 Warning: setting sector offset for DOS compatiblity Expert command (m for help): c Number of cylinders (1-1048576, default 1011): 15 In this case 128MB card is used (reported as 128450560 bytes by fdisk above), thus 128450560 / 255 / 63 / 512 = 15.6 rounded down to 15 cylinders. Numbers there are 255 heads, 63 sectors, 512 bytes per sector. Now, return to main mode and create a new partition: Expert command (m for help): r Command (m for help): n Command action e extended p primary partition (1-4) p Partition number (1-4): 1 First cylinder (1-15, default 1): 1 Last cylinder or +size or +sizeM or +sizeK (1-15, default 15): 15 Mark it bootable: Command (m for help): a Partition number (1-4): 1 And change its type to FAT32: Command (m for help): t Selected partition 1 Hex code (type L to list codes): c Changed system type of partition 1 to c (W95 FAT32 (LBA)) The result is: Command (m for help): p Disk /dev/sdb: 128 MB, 128450560 bytes 255 heads, 63 sectors/track, 15 cylinders Units = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System /dev/sdb1 * 1 15 120456 c W95 FAT32 (LBA) Now, really write configuration to card (until here, card is not changed): Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: If you have created or modified any DOS 6.x partitions, please see the fdisk manual page for additional information. Syncing disks. Done! What's left is to format our partition as FAT32 to be mounted and populated: # mkfs.vfat -F 32 /dev/sdb1 mkfs.vfat 2.11 (12 Mar 2005) Note: before running mkfs.vfat (included in the dosfstools package in Debian) make sure /dev/sdb is not mounted. # mount /dev/sdb1 /mnt/tmp Note: If you use additional mkfs.vfat parameter -n you can give the card a name, e.g. for easier identification (i.e. mkfs.vfat -n omap3 -F 32 /dev/sdb1) The SD/MMC card is now ready to be used to boot OMAP3 boards. sfdisk In order to format same card using sfdisk, one needs to do the following: # sfdisk -H 255 -S 63 -C 15 /dev/sdb &lt;&lt; EOF &gt; ,,b,* &gt; EOF And follow with the mkfs.vfat commands above. E2e.jpg For technical support please post your questions at http://e2e.ti.com. Please post only comments about the article MMC Boot Format here. Hyperlink blue.png Links Amplifiers &amp; Linear Audio Broadband RF/IF &amp; Digital Radio Clocks &amp; Timers Data Converters DLP &amp; MEMS High-Reliability Interface Logic Power Management Processors ARM Processors Digital Signal Processors (DSP) Microcontrollers (MCU) OMAP Applications Processors Switches &amp; Multiplexers Temperature Sensors &amp; Control ICs Wireless Connectivity Retrieved from &quot;http://processors.wiki.ti.com/index.php?title=SD/MMC_format_for_OMAP3_boot&amp;oldid=114261&quot; Categories: AM437x AM335x AM35x AM37x AM1x AM18x Linux Boot SD/MMC OMAP35x DM37xxHW Navigation menu Personal tools Log in Request account Namespaces Page Discussion Variants Views Read View source View history More Search Navigation Main Page All pages All categories Recent changes Random page Help Print/export Create a book Download as PDF Printable version Toolbox What links here Related changes Special pages Permanent link Page information This page was last modified on 24 July 2012, at 17:36. This page has been accessed 7,293 times. Content is available under Creative Commons Attribution-ShareAlike unless otherwise noted. Privacy policy About Texas Instruments Wiki Disclaimers Terms of Use Creative Commons Attribution-ShareAlike Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160627172915#index"
                   NS1:content=" (shrikant-sharat) AboutLabsArchivesTagsAtom Feed The ever useful and neat subprocess module 29 Apr, 2012 Python's subprocess module is one of my favourite modules in the standard library. If you have ever done some decent amount of coding in python, you might have encountered it. This module is used for dealing with external commands, intended to be a replacement to the old os.system and the like. The most trivial use might be to get the output of a small shell command like ls or ps. Not that this is the best way to get a list of files in a directory (think os.listdir), but you get the point. I am going to put my notes and experiences about this module here. Please note, I wrote this with Python 2.7 in mind. Things are slightly different in other versions (even 2.6). If you find any errors or suggestions, please let me know. A simple usage Popen class Running via the shell Getting the return code (aka exit status) IO Streams Reading error stream Watching both stdout and stderr Passing an environment Merge with current environment Unicode Execute in a different working directory Killing and dieing Auto-kill on death Launch commands in a terminal emulator Linux Windows Conclusion A simple usage For the sake of providing context, lets run the ls command from subprocess and get its output import subprocess ls_output = subprocess.check_output(['ls']) I'll cover getting output from a command in detail later. To give more command line arguments, subprocess.check_output(['ls', '-l']) The first item in the list is the executable and rest are its command line arguments (argv equivalent). No quirky shell quoting and complex nested quote rules to digest. Just a plain python list. However, not having shell quoting implies you don't also have the shell niceties. Like piping for one. The following won't work the way one would expect it to. subprocess.check_output(['ls', '|', 'wc', '-l']) Here, the ls command gets its first command as | and I have no idea what ls would do with it. Perhaps complain that no such file exists. So, instead, we have to use the shell boolean argument. More later down in the article. Popen class If there's just one thing in the subprocess module that you should be concerned with, its the Popen class. The other functions like call, check_output, and check_call use Popen internally. Here's the signature from the docs. class subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0) I suggest you read the docs for this class. As with all python docs, its really good. Running via the shell Subprocess can also run command-line instructions via a shell program. This is usually dash/bash on Linux and cmd on windows. subprocess.call('ls | wc -l', shell=True) Notice that in this case we pass a string, not a list. This is because we want the shell to interpret the whole of our command. You can even use shell style quoting if you like. It is up to the shell to decide how to best split the command line into executable and command line arguments. On windows, if you pass a list for args, it will be turned into a string using the same rules as the MS C runtime. See the doc-string for subprocess.list2cmdline for more on this. Whereas on unix-like systems, even if you pass a string, its turned into a list of one item :). The behaviour of the shell argument can sometimes be confusing so I'll try to clear it a bit here. Something I wished I had when I first encountered this module. Firstly, lets consider the case where shell is set to False, the default. In this case, if args is a string, it is assumed to be the name of the executable file. Even if it contains spaces. Consider the following. subprocess.call('ls -l') This won't work because subprocess is looking for an executable file called ls -l, but obviously can't find it. However, if args is a list, then the first item in this list is considered as the executable and the rest of the items in the list are passed as command line arguments to the program. subprocess.call(['ls', '-l']) does what you think it will. Second case, with shell set to True, the program that actually gets executed is the OS default shell, /bin/sh on Linux and cmd.exe on windows. This can be changed with the executable argument. When using the shell, args is usually a string, something that will be parsed by the shell program. The args string is passed as a command line argument to the shell (with a -c option on Linux) such that the shell will interpret it as a shell command sequence and process it accordingly. This means you can use all the shell builtins and goodies that your shell offers. subprocess.call('ls -l', shell=True) is similar to $ /bin/sh -c 'ls -l' In the same vein, if you pass a list as args with shell set to True, all items in the list are passed as command line arguments to the shell. subprocess.call(['ls', '-l'], shell=True) is similar to $ /bin/sh -c ls -l which is the same as $ /bin/sh -c ls since /bin/sh takes just the argument next to -c as the command line to execute. Getting the return code (aka exit status) If you want to run an external command and its return code is all you're concerned with, the call and check_call functions are what you're looking for. They both return the return code after running the command. The difference is, check_call raises a CalledProcessError if the return code is non-zero. If you've read the docs for these functions, you'll see that its not recommended to use stdout=PIPE or stderr=PIPE. And if you don't, the stdout and stderr of the command are just redirected to the parent's (Python VM in this case) streams. If that is not what you want, you have to use the Popen class. proc = Popen('ls') The moment the Popen class is instantiated, the command starts running. You can wait for it and after its done, access the return code via the returncode attribute. proc.wait() print proc.returncode If you are trying this out in a python REPL, you won't see a need to call .wait() since you can just wait yourself in the REPL till the command is finished and then access the returncode. Surprise! &gt;&gt;&gt; proc = Popen('ls') &gt;&gt;&gt; file1 file2 &gt;&gt;&gt; print proc.returncode None &gt;&gt;&gt; # wat? The command is definitely finished. Why don't we have a return code? &gt;&gt;&gt; proc.wait() 0 &gt;&gt;&gt; print proc.returncode 0 The reason for this is the returncode is not automatically set when a process ends. You have to call .wait or .poll to realize if the program is done and set the returncode attribute. IO Streams The simplest way to get the output of a command, as seen previously, is to use the check_output function. output = subprocess.check_output('ls') Notice the check_ prefix in the function name? Ring any bell? That's right, this function will raise a CalledProcessError if the return code is non-zero. This may not always be the best solution to get the output from a command. If you do get a CalledProcessError from this function call, unless you have the contents of stderr you probably have little idea what went wrong. You'll want to know what's written to the command's stderr. Reading error stream There are two ways to get the error output. First is redirecting stderr to stdout and only being concerned with stdout. This can be done by setting the stderr argument to subprocess.STDOUT. Second is to create a Popen object with stderr set to subprocess.PIPE (optionally along with stdout argument) and read from its stderr attribute which is a readable file-like object. There is also a convenience method on Popen class, called .communicate, which optionally takes a string to be sent to the process's stdin and returns a tuple of (stdout_content, stderr_content). Watching both stdout and stderr However, all of these assume that the command runs for some time, prints out a couple of lines of output and exits, so you can get the output(s) in strings. This is sometimes not the case. If you want to run a network intensive command like an svn checkout, which prints each file as and when downloaded, you need something better. The initial solution one can think of is this. proc = Popen('svn co svn+ssh://myrepo', stdout=PIPE) for line in proc.stdout: print line This works, for the most part. But, again, if there is an error, you'll want to read stderr too. It would be nice to read stdout and stderr simultaneously. Just like a shell seems to be doing. Alas, this remains a not so straightforward problem as of today, at least on non-Linux systems. On Linux (and where its supported), you can use the select module to keep an eye on multiple file-like stream objects. But this isn't available on windows. A more platform independent solution that I found works well, is using threads and a Queue. from subprocess import Popen, PIPE from threading import Thread from Queue import Queue, Empty io_q = Queue() def stream_watcher(identifier, stream): for line in stream: io_q.put((identifier, line)) if not stream.closed: stream.close() proc = Popen('svn co svn+ssh://myrepo', stdout=PIPE, stderr=PIPE) Thread(target=stream_watcher, name='stdout-watcher', args=('STDOUT', proc.stdout)).start() Thread(target=stream_watcher, name='stderr-watcher', args=('STDERR', proc.stderr)).start() def printer(): while True: try: # Block for 1 second. item = io_q.get(True, 1) except Empty: # No output in either streams for a second. Are we done? if proc.poll() is not None: break else: identifier, line = item print identifier + ':', line Thread(target=printer, name='printer').start() Fair bit of code. This is a typical producer-consumer thing. Two threads producing lines of output (one each from stdout and stderr) and pushing them into a queue. One thread watching the queue and printing the lines until the process itself finishes. Passing an environment The env argument to Popen (and others) lets you customize the environment of the command being run. If it is not set, or is set to None, the current process's environment is used, just as documented. You might not agree with me, but I feel there are some subtleties with this argument that should have been mentioned in the documentation. Merge with current environment One is that if you provide a mapping to env, whatever is in this mapping is all that's available to the command being run. For example, if you don't give a TOP_ARG in the env mapping, the command won't see a TOP_ARG in its environment. So, I frequently find myself doing this p = Popen('command', env=dict(os.environ, my_env_prop='value')) This makes sense once you realize it, but I wish it were at least hinted at in the documentation. Unicode Another one, is to do with Unicode (Surprise surprise!). And windows. If you use unicodes in the env mapping, you get an error saying you can only use strings in the environment mapping. The worst part about this error is that it only seems to happen on windows and not on Linux. If its an error to use unicodes in this place, I wish it break on both platforms. This issue is very painful if you're like me and use unicodeall the time. from __future__ import unicode_literals That line is present in all my python source files. The error message doesn't even bother to mention that you have unicodes in your env so it's very hard to understand what's going wrong. Execute in a different working directory This is handled by the cwd argument. You set the location of the directory which you want as the working directory of the program you are launching. The docs do mention that the working directory is changed before the command even starts running. But that you can't specify program's path relative to the cwd. In reality, I found that you can do this. Either I'm missing something with this or the docs really are inaccurate. Anyway, this works subprocess.call('./ls', cwd='/bin') Prints out all the files in /bin. Of course, the following doesn't work when the working directory is not /bin. subprocess.call('./ls') So, if you are giving something explicitly to cwd and are using a relative path for the executable, this is something to keep in mind. Killing and dieing A simple proc.terminate() or for some dramatic umphh! proc.kill() will do the trick to end the process. As noted in the documentation, the former sends a SIGTERM and later sends a SIGKILL on unix, but both do some native windows-y thing on windows. Auto-kill on death The processes you start in your python program, stay running even after your program exits. This is usually what you want, but when you want all your sub processes killed automatically on exit with Ctrl+C or the like, you have to use the atexit module. procs = [] @atexit.register def kill_subprocesses(): for proc in procs: proc.kill() And add all the Popen objects created to the procs list. This is the only solution I found that works best. Launch commands in a terminal emulator On one occasion, I had to write a script that would launch multiple svn checkouts and then run many ant builds (~20-35) on the checked out projects. In my opinion, the best and easiest way to do this is to fire up multiple terminal emulator windows each running an individual checkout/ant-build. This allows us to monitor each process and even cancel any of them by simply closing the corresponding terminal emulator window. Linux This is pretty trivial actually. On Linux, you can use xterm for this. Popen(['xterm', '-e', 'sleep 3s']) Windows On windows, its not as straight forward. The first solution for this would be Popen(['cmd', '/K', 'command']) /K option tells cmd to run the command and keep the command window from closing. You may use /C instead to close the command window after the command finishes. As simple as it looks, it has some weird behavior. I don't completely understand it, but I'll try to explain what I have. When you try to run a python script with the above Popen call, in a command window like this python main.py you don't see a new command window pop up. Instead, the sub command runs in the same command window. I have no idea what happens when you run multiple sub commands this way. (I have only limited access to windows). If instead you run it in something like an IDE or IDLE (F5), you have a new command window open up. I believe one each for each command you run this way. Just the way you expect. But I gave up on cmd.exe for this purpose and learnt to use the mintty utility that comes with cygwin (I think 1.7+). mintty is awesome. Really. Its been a while since I felt that way about a command line utility on windows. Popen(['mintty', '--hold', 'error', '--exec', 'command']) This. A new mintty console window opens up running the command and it closes automatically, if the command exits with zero status (that's what --hold error does). Otherwise, it stays on. Very useful. Conclusion The subprocess module is a very useful thing. Spend some time understanding it better. This is my attempt at helping people with it, and turned out to be way longer than I'd expected. If there are any inaccuracies in this, or if you have anything to add, please leave a comment. Comments (shrikant-sharat) © Shrikant Sharat Kandula 2013. Secure Connection Failed The connection to www.reddit.com was interrupted while the page was loading. The page you are trying to view cannot be shown because the authenticity of the received data could not be verified. Please contact the web site owners to inform them of this problem. Learn more… Go Back Advanced Try Again Report errors like this to help Mozilla identify and block malicious sites uses security technology that is outdated and vulnerable to attack. An attacker could easily reveal information which you thought to be safe. (Not secure) Try loading using outdated security Tweet "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616171225#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 17. Interprocess Communication and Networking » 17.2. socket — Low-level networking interface¶ This module provides access to the BSD socket interface. It is available on all modern Unix systems, Windows, Mac OS X, BeOS, OS/2, and probably additional platforms. Note Some behavior may be platform dependent, since calls are made to the operating system socket APIs. For an introduction to socket programming (in C), see the following papers: An Introductory 4.3BSD Interprocess Communication Tutorial, by Stuart Sechrest and An Advanced 4.3BSD Interprocess Communication Tutorial, by Samuel J. Leffler et al, both in the UNIX Programmer’s Manual, Supplementary Documents 1 (sections PS1:7 and PS1:8). The platform-specific reference material for the various socket-related system calls are also a valuable source of information on the details of socket semantics. For Unix, refer to the manual pages; for Windows, see the WinSock (or Winsock 2) specification. For IPv6-ready APIs, readers may want to refer to RFC 3493 titled Basic Socket Interface Extensions for IPv6. The Python interface is a straightforward transliteration of the Unix system call and library interface for sockets to Python’s object-oriented style: the socket() function returns a socket object whose methods implement the various socket system calls. Parameter types are somewhat higher-level than in the C interface: as with read() and write() operations on Python files, buffer allocation on receive operations is automatic, and buffer length is implicit on send operations. Socket addresses are represented as follows: A single string is used for the AF_UNIX address family. A pair (host, port) is used for the AF_INET address family, where host is a string representing either a hostname in Internet domain notation like 'daring.cwi.nl' or an IPv4 address like '100.50.200.5', and port is an integer. For AF_INET6 address family, a four-tuple (host, port, flowinfo, scopeid) is used, where flowinfo and scopeid represents sin6_flowinfo and sin6_scope_id member in struct sockaddr_in6 in C. For socket module methods, flowinfo and scopeid can be omitted just for backward compatibility. Note, however, omission of scopeid can cause problems in manipulating scoped IPv6 addresses. Other address families are currently not supported. The address format required by a particular socket object is automatically selected based on the address family specified when the socket object was created. For IPv4 addresses, two special forms are accepted instead of a host address: the empty string represents INADDR_ANY, and the string '&lt;broadcast&gt;' represents INADDR_BROADCAST. The behavior is not available for IPv6 for backward compatibility, therefore, you may want to avoid these if you intend to support IPv6 with your Python programs. If you use a hostname in the host portion of IPv4/v6 socket address, the program may show a nondeterministic behavior, as Python uses the first address returned from the DNS resolution. The socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution and/or the host configuration. For deterministic behavior use a numeric address in host portion. New in version 2.5: AF_NETLINK sockets are represented as pairs pid, groups. New in version 2.6: Linux-only support for TIPC is also available using the AF_TIPC address family. TIPC is an open, non-IP based networked protocol designed for use in clustered computer environments. Addresses are represented by a tuple, and the fields depend on the address type. The general tuple form is (addr_type, v1, v2, v3 [, scope]), where: addr_type is one of TIPC_ADDR_NAMESEQ, TIPC_ADDR_NAME, or TIPC_ADDR_ID. scope is one of TIPC_ZONE_SCOPE, TIPC_CLUSTER_SCOPE, and TIPC_NODE_SCOPE. If addr_type is TIPC_ADDR_NAME, then v1 is the server type, v2 is the port identifier, and v3 should be 0. If addr_type is TIPC_ADDR_NAMESEQ, then v1 is the server type, v2 is the lower port number, and v3 is the upper port number. If addr_type is TIPC_ADDR_ID, then v1 is the node, v2 is the reference, and v3 should be set to 0. All errors raise exceptions. The normal exceptions for invalid argument types and out-of-memory conditions can be raised; errors related to socket or address semantics raise the error socket.error. Non-blocking mode is supported through setblocking(). A generalization of this based on timeouts is supported through settimeout(). The module socket exports the following constants and functions: exception socket.error¶ This exception is raised for socket-related errors. The accompanying value is either a string telling what went wrong or a pair (errno, string) representing an error returned by a system call, similar to the value accompanying os.error. See the module errno, which contains names for the error codes defined by the underlying operating system. Changed in version 2.6: socket.error is now a child class of IOError. exception socket.herror¶ This exception is raised for address-related errors, i.e. for functions that use h_errno in the C API, including gethostbyname_ex() and gethostbyaddr(). The accompanying value is a pair (h_errno, string) representing an error returned by a library call. string represents the description of h_errno, as returned by the hstrerror() C function. exception socket.gaierror¶ This exception is raised for address-related errors, for getaddrinfo() and getnameinfo(). The accompanying value is a pair (error, string) representing an error returned by a library call. string represents the description of error, as returned by the gai_strerror() C function. The error value will match one of the EAI_* constants defined in this module. exception socket.timeout¶ This exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout(). The accompanying value is a string whose value is currently always “timed out”. New in version 2.3. socket.AF_UNIX¶ socket.AF_INET¶ socket.AF_INET6¶ These constants represent the address (and protocol) families, used for the first argument to socket(). If the AF_UNIX constant is not defined then this protocol is unsupported. socket.SOCK_STREAM¶ socket.SOCK_DGRAM¶ socket.SOCK_RAW¶ socket.SOCK_RDM¶ socket.SOCK_SEQPACKET¶ These constants represent the socket types, used for the second argument to socket(). (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.) SO_* socket.SOMAXCONN¶ MSG_* SOL_* IPPROTO_* IPPORT_* INADDR_* IP_* IPV6_* EAI_* AI_* NI_* TCP_* Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects. In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided. SIO_* RCVALL_* Constants for Windows’ WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects. New in version 2.6. TIPC_* TIPC related constants, matching the ones exported by the C socket API. See the TIPC documentation for more information. New in version 2.6. socket.has_ipv6¶ This constant contains a boolean value which indicates if IPv6 is supported on this platform. New in version 2.3. socket.create_connection(address[, timeout[, source_address]])¶ Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object. This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds. This makes it easy to write clients that are compatible to both IPv4 and IPv6. Passing the optional timeout parameter will set the timeout on the socket instance before attempting to connect. If no timeout is supplied, the global default timeout setting returned by getdefaulttimeout() is used. If supplied, source_address must be a 2-tuple (host, port) for the socket to bind to as its source address before connecting. If host or port are ‘’ or 0 respectively the OS default behavior will be used. New in version 2.6. Changed in version 2.7: source_address was added. socket.getaddrinfo(host, port[, family[, socktype[, proto[, flags]]]])¶ Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4/v6 address or None. port is a string service name such as 'http', a numeric port number or None. By passing None as the value of host and port, you can pass NULL to the underlying C API. The family, socktype and proto arguments can be optionally specified in order to narrow the list of addresses returned. By default, their value is 0, meaning that the full range of results is selected. The flags argument can be one or several of the AI_* constants, and will influence how results are computed and returned. Its default value is 0. For example, AI_NUMERICHOST will disable domain name resolution and will raise an error if host is a domain name. The function returns a list of 5-tuples with the following structure: (family, socktype, proto, canonname, sockaddr) In these tuples, family, socktype, proto are all integers and are meant to be passed to the socket() function. canonname will be a string representing the canonical name of the host if AI_CANONNAME is part of the flags argument; else canonname will be empty. sockaddr is a tuple describing a socket address, whose format depends on the returned family (a (address, port) 2-tuple for AF_INET, a (address, port, flow info, scope id) 4-tuple for AF_INET6), and is meant to be passed to the socket.connect() method. The following example fetches address information for a hypothetical TCP connection to example.org on port 80 (results may differ on your system if IPv6 isn’t enabled): &gt;&gt;&gt; &gt;&gt;&gt; socket.getaddrinfo(&quot;example.org&quot;, 80, 0, 0, socket.IPPROTO_TCP) [(10, 1, 6, '', ('2606:2800:220:1:248:1893:25c8:1946', 80, 0, 0)), (2, 1, 6, '', ('93.184.216.34', 80))] New in version 2.2. socket.getfqdn([name])¶ Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host. To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available. The first name which includes a period is selected. In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned. New in version 2.0. socket.gethostbyname(hostname)¶ Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as '100.50.200.5'. If the host name is an IPv4 address itself it is returned unchanged. See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support. socket.gethostbyname_ex(hostname)¶ Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support. socket.gethostname()¶ Return a string containing the hostname of the machine where the Python interpreter is currently executing. If you want to know the current machine’s IP address, you may want to use gethostbyname(gethostname()). This operation assumes that there is a valid address-to-host mapping for the host, and the assumption does not always hold. Note: gethostname() doesn’t always return the fully qualified domain name; use getfqdn() (see above). socket.gethostbyaddr(ip_address)¶ Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6. socket.getnameinfo(sockaddr, flags)¶ Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host. Similarly, port can contain a string port name or a numeric port number. New in version 2.2. socket.getprotobyname(protocolname)¶ Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function. This is usually only needed for sockets opened in “raw” mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero. socket.getservbyname(servicename[, protocolname])¶ Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match. socket.getservbyport(port[, protocolname])¶ Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match. socket.socket([family[, type[, proto]]])¶ Create a new socket using the given address family, socket type and protocol number. The address family should be AF_INET (the default), AF_INET6 or AF_UNIX. The socket type should be SOCK_STREAM (the default), SOCK_DGRAM or perhaps one of the other SOCK_ constants. The protocol number is usually zero and may be omitted in that case. socket.socketpair([family[, type[, proto]]])¶ Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET. Availability: Unix. New in version 2.4. socket.fromfd(fd, family, type[, proto])¶ Duplicate the file descriptor fd (an integer as returned by a file object’s fileno() method) and build a socket object from the result. Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked — subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode. Availability: Unix. socket.ntohl(x)¶ Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation. socket.ntohs(x)¶ Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation. socket.htonl(x)¶ Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation. socket.htons(x)¶ Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation. socket.inet_aton(ip_string)¶ Convert an IPv4 address from dotted-quad string format (for example, ‘123.45.67.89’) to 32-bit packed binary format, as a string four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns. inet_aton() also accepts strings with less than three dots; see the Unix manual page inet(3) for details. If the IPv4 address string passed to this function is invalid, socket.error will be raised. Note that exactly what is valid depends on the underlying C implementation of inet_aton(). inet_aton() does not support IPv6, and inet_pton() should be used instead for IPv4/v6 dual stack support. socket.inet_ntoa(packed_ip)¶ Convert a 32-bit packed IPv4 address (a string four characters in length) to its standard dotted-quad string representation (for example, ‘123.45.67.89’). This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument. If the string passed to this function is not exactly 4 bytes in length, socket.error will be raised. inet_ntoa() does not support IPv6, and inet_ntop() should be used instead for IPv4/v6 dual stack support. socket.inet_pton(address_family, ip_string)¶ Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr. Supported values for address_family are currently AF_INET and AF_INET6. If the IP address string ip_string is invalid, socket.error will be raised. Note that exactly what is valid depends on both the value of address_family and the underlying implementation of inet_pton(). Availability: Unix (maybe not all platforms). New in version 2.3. socket.inet_ntop(address_family, packed_ip)¶ Convert a packed IP address (a string of some number of characters) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8') inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr. Supported values for address_family are currently AF_INET and AF_INET6. If the string packed_ip is not the correct length for the specified address family, ValueError will be raised. A socket.error is raised for errors from the call to inet_ntop(). Availability: Unix (maybe not all platforms). New in version 2.3. socket.getdefaulttimeout()¶ Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None. New in version 2.3. socket.setdefaulttimeout(timeout)¶ Set the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None. New in version 2.3. socket.SocketType¶ This is a Python type object that represents the socket object type. It is the same as type(socket(...)). See also Module SocketServer Classes that simplify writing network servers. Module ssl A TLS/SSL wrapper for socket objects. 17.2.1. Socket Objects¶ Socket objects have the following methods. Except for makefile() these correspond to Unix system calls applicable to sockets. socket.accept()¶ Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection. socket.bind(address)¶ Bind the socket to address. The socket must not already be bound. (The format of address depends on the address family — see above.) Note This method has historically accepted a pair of parameters for AF_INET addresses instead of only a tuple. This was never intentional and is no longer available in Python 2.0 and later. socket.close()¶ Close the socket. All future operations on the socket object will fail. The remote end will receive no more data (after queued data is flushed). Sockets are automatically closed when they are garbage-collected. Note close() releases the resource associated with a connection but does not necessarily close the connection immediately. If you want to close the connection in a timely fashion, call shutdown() before close(). socket.connect(address)¶ Connect to a remote socket at address. (The format of address depends on the address family — see above.) Note This method has historically accepted a pair of parameters for AF_INET addresses instead of only a tuple. This was never intentional and is no longer available in Python 2.0 and later. socket.connect_ex(address)¶ Like connect(address), but return an error indicator instead of raising an exception for errors returned by the C-level connect() call (other problems, such as “host not found,” can still raise exceptions). The error indicator is 0 if the operation succeeded, otherwise the value of the errno variable. This is useful to support, for example, asynchronous connects. Note This method has historically accepted a pair of parameters for AF_INET addresses instead of only a tuple. This was never intentional and is no longer available in Python 2.0 and later. socket.fileno()¶ Return the socket’s file descriptor (a small integer). This is useful with select.select(). Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as os.fdopen()). Unix does not have this limitation. socket.getpeername()¶ Return the remote address to which the socket is connected. This is useful to find out the port number of a remote IPv4/v6 socket, for instance. (The format of the address returned depends on the address family — see above.) On some systems this function is not supported. socket.getsockname()¶ Return the socket’s own address. This is useful to find out the port number of an IPv4/v6 socket, for instance. (The format of the address returned depends on the address family — see above.) socket.getsockopt(level, optname[, buflen])¶ Return the value of the given socket option (see the Unix man page getsockopt(2)). The needed symbolic constants (SO_* etc.) are defined in this module. If buflen is absent, an integer option is assumed and its integer value is returned by the function. If buflen is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a string. It is up to the caller to decode the contents of the buffer (see the optional built-in module struct for a way to decode C structures encoded as strings). socket.ioctl(control, option)¶ Platform: Windows The ioctl() method is a limited interface to the WSAIoctl system interface. Please refer to the Win32 documentation for more information. On other platforms, the generic fcntl.fcntl() and fcntl.ioctl() functions may be used; they accept a socket object as their first argument. New in version 2.6. socket.listen(backlog)¶ Listen for connections made to the socket. The backlog argument specifies the maximum number of queued connections and should be at least 0; the maximum value is system-dependent (usually 5), the minimum value is forced to 0. socket.makefile([mode[, bufsize]])¶ Return a file object associated with the socket. (File objects are described in File Objects.) The file object does not close the socket explicitly when its close() method is called, but only removes its reference to the socket object, so that the socket will be closed if it is not referenced from anywhere else. The socket must be in blocking mode (it can not have a timeout). The optional mode and bufsize arguments are interpreted the same way as by the built-in file() function. Note On Windows, the file-like object created by makefile() cannot be used where a file object with a file descriptor is expected, such as the stream arguments of subprocess.Popen(). socket.recv(bufsize[, flags])¶ Receive data from the socket. The return value is a string representing the data received. The maximum amount of data to be received at once is specified by bufsize. See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero. Note For best match with hardware and network realities, the value of bufsize should be a relatively small power of 2, for example, 4096. socket.recvfrom(bufsize[, flags])¶ Receive data from the socket. The return value is a pair (string, address) where string is a string representing the data received and address is the address of the socket sending the data. See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero. (The format of address depends on the address family — see above.) socket.recvfrom_into(buffer[, nbytes[, flags]])¶ Receive data from the socket, writing it into buffer instead of creating a new string. The return value is a pair (nbytes, address) where nbytes is the number of bytes received and address is the address of the socket sending the data. See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero. (The format of address depends on the address family — see above.) New in version 2.5. socket.recv_into(buffer[, nbytes[, flags]])¶ Receive up to nbytes bytes from the socket, storing the data into a buffer rather than creating a new string. If nbytes is not specified (or 0), receive up to the size available in the given buffer. Returns the number of bytes received. See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero. New in version 2.5. socket.send(string[, flags])¶ Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. For further information on this concept, consult the Socket Programming HOWTO. socket.sendall(string[, flags])¶ Send data to the socket. The socket must be connected to a remote socket. The optional flags argument has the same meaning as for recv() above. Unlike send(), this method continues to send data from string until either all data has been sent or an error occurs. None is returned on success. On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent. socket.sendto(string, address)¶ socket.sendto(string, flags, address) Send data to the socket. The socket should not be connected to a remote socket, since the destination socket is specified by address. The optional flags argument has the same meaning as for recv() above. Return the number of bytes sent. (The format of address depends on the address family — see above.) socket.setblocking(flag)¶ Set blocking or non-blocking mode of the socket: if flag is 0, the socket is set to non-blocking, else to blocking mode. Initially all sockets are in blocking mode. In non-blocking mode, if a recv() call doesn’t find any data, or if a send() call can’t immediately dispose of the data, a error exception is raised; in blocking mode, the calls block until they can proceed. s.setblocking(0) is equivalent to s.settimeout(0.0); s.setblocking(1) is equivalent to s.settimeout(None). socket.settimeout(value)¶ Set a timeout on blocking socket operations. The value argument can be a nonnegative float expressing seconds, or None. If a float is given, subsequent socket operations will raise a timeout exception if the timeout period value has elapsed before the operation has completed. Setting a timeout of None disables timeouts on socket operations. s.settimeout(0.0) is equivalent to s.setblocking(0); s.settimeout(None) is equivalent to s.setblocking(1). New in version 2.3. socket.gettimeout()¶ Return the timeout in seconds (float) associated with socket operations, or None if no timeout is set. This reflects the last call to setblocking() or settimeout(). New in version 2.3. Some notes on socket blocking and timeouts: A socket object can be in one of three modes: blocking, non-blocking, or timeout. Sockets are always created in blocking mode. In blocking mode, operations block until complete or the system returns an error (such as connection timed out). In non-blocking mode, operations fail (with an error that is unfortunately system-dependent) if they cannot be completed immediately. In timeout mode, operations fail if they cannot be completed within the timeout specified for the socket or if the system returns an error. The setblocking() method is simply a shorthand for certain settimeout() calls. Timeout mode internally sets the socket in non-blocking mode. The blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint. A consequence of this is that file objects returned by the makefile() method must only be used when the socket is in blocking mode; in timeout or non-blocking mode file operations that cannot be completed immediately will fail. Note that the connect() operation is subject to the timeout setting, and in general it is recommended to call settimeout() before calling connect() or pass a timeout parameter to create_connection(). The system network stack may return a connection timeout error of its own regardless of any Python socket timeout setting. socket.setsockopt(level, optname, value)¶ Set the value of the given socket option (see the Unix manual page setsockopt(2)). The needed symbolic constants are defined in the socket module (SO_* etc.). The value can be an integer or a string representing a buffer. In the latter case it is up to the caller to ensure that the string contains the proper bits (see the optional built-in module struct for a way to encode C structures as strings). socket.shutdown(how)¶ Shut down one or both halves of the connection. If how is SHUT_RD, further receives are disallowed. If how is SHUT_WR, further sends are disallowed. If how is SHUT_RDWR, further sends and receives are disallowed. Depending on the platform, shutting down one half of the connection can also close the opposite half (e.g. on Mac OS X, shutdown(SHUT_WR) does not allow further reads on the other end of the connection). Note that there are no methods read() or write(); use recv() and send() without flags argument instead. Socket objects also have these (read-only) attributes that correspond to the values given to the socket constructor. socket.family¶ The socket family. New in version 2.5. socket.type¶ The socket type. New in version 2.5. socket.proto¶ The socket protocol. New in version 2.5. 17.2.2. Example¶ Here are four minimal example programs using the TCP/IP protocol: a server that echoes all data that it receives back (servicing only one client), and a client using it. Note that a server must perform the sequence socket(), bind(), listen(), accept() (possibly repeating the accept() to service more than one client), while a client only needs the sequence socket(), connect(). Also note that the server does not sendall()/recv() on the socket it is listening on but on the new socket returned by accept(). The first two examples support IPv4 only. # Echo server program import socket HOST = '' # Symbolic name meaning all available interfaces PORT = 50007 # Arbitrary non-privileged port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen(1) conn, addr = s.accept() print 'Connected by', addr while 1: data = conn.recv(1024) if not data: break conn.sendall(data) conn.close() # Echo client program import socket HOST = 'daring.cwi.nl' # The remote host PORT = 50007 # The same port as used by the server s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) s.sendall('Hello, world') data = s.recv(1024) s.close() print 'Received', repr(data) The next two examples are identical to the above two, but support both IPv4 and IPv6. The server side will listen to the first address family available (it should listen to both instead). On most of IPv6-ready systems, IPv6 will take precedence and the server may not accept IPv4 traffic. The client side will try to connect to the all addresses returned as a result of the name resolution, and sends traffic to the first one connected successfully. # Echo server program import socket import sys HOST = None # Symbolic name meaning all available interfaces PORT = 50007 # Arbitrary non-privileged port s = None for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_PASSIVE): af, socktype, proto, canonname, sa = res try: s = socket.socket(af, socktype, proto) except socket.error as msg: s = None continue try: s.bind(sa) s.listen(1) except socket.error as msg: s.close() s = None continue break if s is None: print 'could not open socket' sys.exit(1) conn, addr = s.accept() print 'Connected by', addr while 1: data = conn.recv(1024) if not data: break conn.send(data) conn.close() # Echo client program import socket import sys HOST = 'daring.cwi.nl' # The remote host PORT = 50007 # The same port as used by the server s = None for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_STREAM): af, socktype, proto, canonname, sa = res try: s = socket.socket(af, socktype, proto) except socket.error as msg: s = None continue try: s.connect(sa) except socket.error as msg: s.close() s = None continue break if s is None: print 'could not open socket' sys.exit(1) s.sendall('Hello, world') data = s.recv(1024) s.close() print 'Received', repr(data) The last example shows how to write a very simple network sniffer with raw sockets on Windows. The example requires administrator privileges to modify the interface: import socket # the public network interface HOST = socket.gethostbyname(socket.gethostname()) # create a raw socket and bind it to the public interface s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP) s.bind((HOST, 0)) # Include IP headers s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1) # receive all packages s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON) # receive a package print s.recvfrom(65565) # disabled promiscuous mode s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF) Running an example several times with too small delay between executions, could lead to this error: socket.error: [Errno 98] Address already in use This is because the previous execution has left the socket in a TIME_WAIT state, and can’t be immediately reused. There is a socket flag to set, in order to prevent this, socket.SO_REUSEADDR: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((HOST, PORT)) the SO_REUSEADDR flag tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire. Table Of Contents 17.2. socket — Low-level networking interface 17.2.1. Socket Objects 17.2.2. Example Previous topic 17.1. subprocess — Subprocess management Next topic 17.3. ssl — TLS/SSL wrapper for socket objects This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 17. Interprocess Communication and Networking » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 11, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160729153556#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Home Close Menu Blog Downloads Community Help Forums Education Resources Training Menu Search Buy documentation &gt; installation &gt; installing-images Installing operating system images This resource explains how to install a Raspberry Pi operating system image on an SD card. You will need another computer with an SD card reader to install the image. We recommend most users download NOOBS, which is designed to be very easy to use. However, more advanced users looking to install a particular image should use this guide. Download the image Official images for recommended operating systems are available to download from the Raspberry Pi website Downloads page. Alternative distributions are available from third-party vendors. After downloading the .zip file, unzip it to get the image file (.img) for writing to your SD card. Writing an image to the SD card With the image file of the distribution of your choice, you need to use an image writing tool to install it on your SD card. See our guide for your system: Linux Mac OS Windows View/Edit this page on GitHub Read our usage and contributions policy Creative Commons Licence About About us Team Governance Partners Support Help Documentation Learning resources Training Downloads FAQs Contact Contact us Social Twitter Facebook Google+ GitHub Vimeo YouTube Raspberry Pi Foundation UK registered charity 1129409 Cookies Trademark rules and brand guidelines " />
  <RDF:Description RDF:about="urn:scrapbook:item20160624165015#index"
                   NS1:content=" Skip to main content The Fan Club dynamic design solutions Search form Search Menu Main menu home about projects experiments software contact How to setup a USB 3G Modem on Raspberry PI using usb_modeswitch and wvdial Submitted by The Fan Club on Tue, 2013-11-12 16:04 Setting up a USB 3G/4G modem on a Raspberry Pi is not a simple task. There are many guides available using the now defunct sakis3g script, but getting my modem to work required a bit more understanding. The main problem is that most USB modems act as two devices - a USB storage device and a USB modem. When plugged in to the Raspberry PI the device is usually in USB storage mode. There is a program called usb_modeswitch that we can use to do the switching The other missing part is a way to connect to the cellular network with the USB modem from the Raspberry. For this we will use the classic ppp and wvdial programs. Requirements Raspberry PI computer Raspbian OS installed USB 3G Modem 5V 1A power supply for the Raspberry PI 1. Install required software Connect your Raspberry PI to the internet via LAN or Wifi Open a terminal window and enter: sudo apt-get update sudo apt-get install ppp usb-modeswitch wvdial 2. Get the USB switching codes We need to get the codes of the USB device in USB storage mode and USB modem mode. Connect your USB modem and reboot the Raspberry PI without LAN or Wifi connection Once rebooted open a terminal window and enter: lsusb The output will look similar to the screenshot below. Your modem should be listed as one of the USB devices. Note the numbers underlined. These are the device vendor and product codes. Make a note of these numbers. In this case it is 19d2:2000 This value will later be used in the DefaultProduct value Then we need to soft reboot the Rapberry PI with the modem connected. Open a terminal window and enter: sudo reboot Once rebooted open a terminal window and enter: lsusb The output will look similar to the screenshot below. Your modem should be listed and if you are lucky the second set of numbers would have changed. This is usb_modeswitch doing it's job and switching the device to USB modem mode. Make a note of the new numbers. In this case it is 19d2:2002 This value will be used later in the TargetProduct value 3. Create custom usb_modeswitch config file We need to create a custom config file for usb_modeswitch on the Raspberry PI because on a cold boot the device is not always active yet when usb_modeswitch runs on startup and the device is left in USB storage mode. We will extract some more information for our usb_modeswitch config file so that we can do the switching manually. Open a terminal window and enter the following replacing the codes 19d2 and 2000 with the codes you noted in step 2. Also note the added backslash. cd /tmp tar -xzvf /usr/share/usb_modeswitch/configPack.tar.gz 19d2\:2000 Now open the extracted file with a text editor like leafpad replacing the codes noted in step 2. leafpad 19d2:2000 The content of the file should look something similar to the screenshot below. The parts we are interested in are shown in blue. Now open the /etc/usb_modeswitch.conf file and add the information obtained above to the file. Open a terminal window and enter: sudo leafpad /etc/usb_modeswitch.conf Then add the following replacing the codes and MessageContent values with those of your device and save. DefaultVendor=0x19d2 DefaultProduct=0x2000 TargetVendor=0x19d2 TargetProduct=0x2002 MessageContent=&quot;5553424312345678000000000000061e000000000000000000000000000000&quot; MessageContent2=&quot;5553424312345679000000000000061b000000020000000000000000000000&quot; MessageContent3=&quot;55534243123456702000000080000c85010101180101010101000000000000&quot; 4. Create the wvdial config file The next step is to create a config file for wvdial so you can connect to your service provider. Open a terminal window and enter: sudo leafpad /etc/wvdial.conf Replace the content of the file with the following. [Dialer 3gconnect] Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; Stupid Mode = 1 Modem Type = Analog Modem ISDN = 0 Phone = *99# Modem = /dev/gsmmodem Username = { } Password = { } Baud = 460800 Replace internet with your service provider's APN Replace the Phone number if you need to dial a different code to connect. Replace Username and Password if needed. To leave the username and password as blank use { } 5. Connect to the internet To connect we need to make sure the device is in modem mode. Open a terminal and enter: sudo usb_modeswitch -c /etc/usb_modeswitch.conf Then connect to the internet with: wvdial 3gconnect Tags: Raspberry Pi Raspbian 3G USB 3G Modem wvdial usb_modeswitch GSM Mobile Broadband Networking 276177 reads Comments Hi. Is there any way to Submitted by bogdan (not verified) on Sat, 2013-11-23 21:58 Hi. Is there any way to forward ports (22 in my case) on a 3g usb dongle (Huawei e3131) connected to the USB of an RaspberyPi. I want remote access to the shell of the Raspbery. Your name Subject Comment * Leave this field blank If your service provider Submitted by The Fan Club on Sat, 2013-11-23 23:19 If your service provider allows your 3G USB modem a public IP you can access ssh directly with the IP. You will need a DDNS service like Duck DNS to point a domain name to the IP of the 3G modem as the public IP of the modem will change. Your name Subject Comment * Leave this field blank Hi, can this method be Submitted by Khingcat (not verified) on Tue, 2013-12-03 04:48 Hi, can this method be applied for EVDO USB modem? Thank you. Your name Subject Comment * Leave this field blank EVDO is just another 3G Submitted by The Fan Club on Tue, 2013-12-03 10:48 EVDO is just another 3G standard like HSPA - depending on the modem it should work. Let us know. Your name Subject Comment * Leave this field blank I'm planning to use Wifi or Submitted by hendfu (not verified) on Sun, 2013-12-08 08:46 I'm planning to use Wifi or LAN as main internet connection and USB 3G modem for sending SMS using gammu, but also able to switch to USB modem for internet connection if wifi or LAN failed. Do you think it's possible? Your name Subject Comment * Leave this field blank Yes it is. Almost anything is Submitted by The Fan Club on Sun, 2013-12-08 10:42 Yes it is. Almost anything is possible with linux Your name Subject Comment * Leave this field blank E: Unable to locate package Submitted by aliks bright (not verified) on Sat, 2013-12-28 23:28 E: Unable to locate package usb_modeswitch Correct : sudo apt-get install ppp usb-modeswitch wvdial Your name Subject Comment * Leave this field blank Corrected the instructions - Submitted by The Fan Club on Sun, 2013-12-29 09:38 Corrected the instructions - thank you Your name Subject Comment * Leave this field blank Thanks for the tutorial - it Submitted by Jono (not verified) on Mon, 2014-01-13 21:00 Thanks for the tutorial - it's certainly the best information source out there! I managed to get most of the way there, but now have the following error: ... CONNECT --&gt; Carrier detected. Starting PPP immediately. --&gt; Unable to run /usr/sbin/pppd. --&gt; Check permissions, or specify a &quot;PPPD Path&quot; option in wvdial.conf. I've tried to chown, and chmod the appropriate files, but doesn't seem to work. Thanks! Your name Subject Comment * Leave this field blank The permissions on /usr/sbin Submitted by The Fan Club on Mon, 2014-01-13 22:24 The permissions on /usr/sbin/pppd should not be changed. You can re-install ppp and try again, or use sudo wvdial 3gconnect . Your name Subject Comment * Leave this field blank unable to locate wvidal Submitted by kyle (not verified) on Mon, 2014-02-10 00:59 What do I do if im unable to locate package wvidal? Your name Subject Comment * Leave this field blank unable to locate wvidal Submitted by The Fan Club on Mon, 2014-02-10 09:40 Hi Kyle - check you spelling - it is wvdial NOT wvidal Your name Subject Comment * Leave this field blank Use to send sms instead? Submitted by Andrew (not verified) on Wed, 2014-02-26 20:34 Hi! I'm trying to send an SMS from my pi using a huawei e3131 dongle and I was wondering what changes I would need to make to the wvdial.conf file so that when I execute it, instead of connecting the dongle to 3G it just connects so that I can send an sms instead? Thank you! Your name Subject Comment * Leave this field blank SMS Submitted by The Fan Club on Thu, 2014-02-27 16:52 Hi Andrew. Look at using Gammu for sending sms's, you do not need to connect to the 3G network with wvdial, just make sure the modem is in 3G mode. Your name Subject Comment * Leave this field blank Re SMS Submitted by Andrew (not verified) on Sat, 2014-03-01 01:12 Hi, thanks for replying! By putting the dongle in 3G mode I assume. Because I can get it into modem mode using usb modeswitch, like you have written, but then gammu will not work because there is nothing in the ttyUSB ports? Thanks again. Your name Subject Comment * Leave this field blank SMS Submitted by The Fan Club on Sat, 2014-03-01 10:40 Hi Andrew, this article is not about SMS. Try and replace /dev/ttyUSB device with /dev/gsmmodem. Your name Subject Comment * Leave this field blank Step #2 Submitted by Octopus (not verified) on Fri, 2014-03-07 20:49 Can you please clarify what you do in step 2. lsusb gives you two different numbers. For me I get the same numbers. What is the difference? All you do is a cold reboot vs a warm reboot? Your name Subject Comment * Leave this field blank Step #2 Submitted by The Fan Club on Fri, 2014-03-07 22:10 Hi Ocopus, it is confusing. Most modems have two modes, the USB mode and a modem mode. The modem is detected differently if plugged in on a soft reboot vs hard reboot. Try booting the Pi without the modem plugged in. Then plug it in, wait a 10 seconds and the do the lsusb. Usually this is the usb mode. Then with reboot with sudo reboot, this will make sure the modem is powered on the reboot and usb modeswitch should do the switching to modem mode. Check the numbers again now with lsusb. Your name Subject Comment * Leave this field blank Huawei E303c supported on Raspberrry Pi? Submitted by Jonty (not verified) on Mon, 2014-03-31 20:24 Can I setup the Huawei E303c as a 3G usb modem on Raspberry pi using usb_modeswitch and wvdial?? Your name Subject Comment * Leave this field blank Sierra Wireless Modem Submitted by Sashmo (not verified) on Tue, 2014-04-01 19:24 I am not able to find the codes from your file for 1199:68a3 Will something else work? or do I have to find the codes from the Sierra driver pack? Your name Subject Comment * Leave this field blank Thank Submitted by cesar (not verified) on Mon, 2015-01-26 22:34 Work perfect!!! Your name Subject Comment * Leave this field blank Show all comments Show less comments related content How to auto connect Ubuntu 12.04 USB GSM Mobile Broadband Connection on Boot as startup service without user login using Network Manager CLi Free IP DDNS service Duck DNS setup script for Linux and OSX How to add a Wireless LAN adaptor static IP to Ubuntu that auto connects at startup How to install Open Visual Traceroute on Ubuntu dd Utility - Write and Backup Operating System IMG and ISO files on Memory Card or Disk more popular now How to install apache2 mod_security and mod_evasive on Ubuntu 12.04 LTS server How to install memcached on Ubuntu for use with Drupal Ubuntu After Install Fedora Google Drive Client with Grive and Grive Tools How to install PSAD Intrusion Detection on Ubuntu 16.04 LTS server more 1GB1Ys6SSHtZEUn8BuCTTJvrbDnuFbzdBM LNFxFGg5LTdgCoPk6kdYA3wKAVTboYbdPj The Fan Club © 2001-2016. All Rights Reserved. The material on this site may not be reproduced, distributed, transmitted, cached or otherwise used, except with the prior written permission of The Fan Club. about us privacy policy terms &amp; conditions sitemap contact "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160623161000#index"
                   NS1:content=" H i F i D U I N O Lot of Value, Little Money Home Musiland USB INTRO Free High-Res CODE Apple Remote Sabre32 OTHER B-II Home &gt; Embedded Computing &gt; BEAGLEBONE BLACK: ACCESSING uSD AND USB STORAGE BEAGLEBONE BLACK: ACCESSING uSD AND USB STORAGE March 19, 2014 Leave a comment Go to comments ACCESSING THE uSD CARD Once the operating system is flashed to the internal eMMC, the uSD card can be used as storage and it is a convenient means to store music tracks. The command “fdisk -l” will list all the storage devices seen by the operating system: Here is without any devices in the uSD slot. Listed is the internal eMMC storage device (listing only relevant parts): fdisk-l-noSD After inserting a 32MB uSD card we see this additional device: fdisk-l-32MSD After inserting a 2 GB uSD card we see this device instead: fdisk-l-2GSD We realize that the any card inserted in the uSD slot is characterized by “/dev/mmcblk1p1”. “mmc” stands for “multimedia card” -both SD cards and eMMC devices conform to the “multimedia card” specification. “blk1” I think represents “block device 1” and “p1” is “partition 1” However, if the uSD card is already inserted during, we see the following: fdisk-l-beforeboot The device is assigned /dev/mmcblk0p1. It appears the the order the device numbers are assigned at boot time is uSD card first, then internal eMMC. Mounting the uSD card In order to access the contents on the uSD card, the device must be first mounted. First create a “mount point” (a folder). Here I use the directory /media which is already present. Under /media create a directory to mount the uSD card. I created /media/card, /media/usb and /media/nas to represent the 3 different places where music tracks can be stored. Use the command “mount” mount.card The “-v” flag in “mount” is optional. Means “verbose”. Notice that after mounting the uSD card, I can see the “smallmusic” directory and 1 mp3 track. Keep in mind that if the uSD card is already inserted at boot time, it is assigned “mmcblk0p1” instead of “mmcblk1p1” ACCESSING USB MEMORY STICK If digital audio is transmitted through the I2S interface, then the USB host can also be used for a USB memory device. The same procedure can be used to mount a usb memory stick: Insert a USB storage to the USB host connector Type “fdisk -l” to identify the device. Notice that it is /dev/sda1 Type mount /dev/sda1 /”mount point” in my case, mount /dev/sda1 /media/usb Inserting a USB storage device will show up as: fdiskUSB Since there is only one usb host port, a USB memory device will always appear as /dev/sda1 whether it is present during boot or not. AUTOMATING THE MOUNT PROCESS It becomes cumbersome to have to access the board through the command line in order to mount a storage device. For a music device, the ideal is to have these storage devices mounted automatically. I tried different ways to auto-mount the devices when they are inserted: Autofs: looks like the most promising but did not work in my installation while following this excellent guide [link] usbmount: works well with uSD cards and USB storage at any time after boot, but when deleting the X11 package, it wound fail to mount uSD cards. usbmount was last updated in 2007 and is currently unmaintained. Add mount instructions in /etc/fstab which is invoked only during boot time. For now the “best” option in my environment seems using /etc/fstab and ensuring the storage devices are present during boot. This seems a reasonable configuration for an audio player: Insert the storage devices and turn-on the device. Even if switching to another storage device requiring a reboot, the booting process is very short. usbmount has better functionality because it works after boot. I didn’t like the fact that it stopped working for SD cards after I removed the X11 package (which I do not need). I’ll wait for more help on autofs and then I think I’ll switch to autofs. For USB I added the following line to the /etc/fstab file. usbFstab Note the following: Add the “nofail” option. Without it the board will not be able to boot if no USB memory is present in the USB port. Ensure that the USB memory has a single partition since we are assuming it is always /dev/sda1. A newly formatted USB memory device will have a single partition For the uSD Card and assuming that the card is inserted prior to boot, I added the following line: fstab-card Insert a uSD card and a USB memory device, boot the board and they will be mounted under /media/card and /media/usb (or whatever directory you had specified in /etc/fstab. Share this: Print Pinterest Related Comments (5) Trackbacks (0) Leave a comment Trackback Salvo March 19, 2014 at 18:28 Reply Just to know, in the hope to be not useless, each time you would need to mount agn a unmounted data disk that wasn’t there at the boot time do it with: root# mount -a The same will work if you have exchanged any data unmountable disk, doing at first, i.e. root#umount /media/usb Then the next command after you have inserted a new one media card/key (even the same you had umounted BTW) will be easy and clever: root# mount -a Maybe it is like mount automate, reads the /etc/fstab and mount any valid entry found Almost the same as at the boot time. This would mean that on each bout /etc/fstab will be read and all the disk partitions – mount points are to be mounted exactly in the same order and in the same places for the OS at the specified boot level. Maybe also the ‘df’ command, with all its switches …, will work. That’s much easy than using ‘fdisk -l’ … on my poor mind. That’s since BSD, mount, the first. I don’t remember about ‘df’. Several UNIX flavours have had changes for that last. Ciao. Salvo PS TU for all UR work, that’s really interesting from several points of view. BlgGear March 19, 2014 at 19:25 Reply Thanks for sharing. My concern is that as a music player, I would set it up totally headless. (of course in order to play a track, I would have to use the command line, but I have not thought of this part yet :-)). I did try autofs but couldn’t figure out why it would not work, so I gave up… Foundatron March 22, 2014 at 15:33 Reply Another great post! you mentioned “low noise power supplies”. Can you prove some links? Foundatron March 22, 2014 at 15:34 Reply errr….provide some links:) BlgGear March 22, 2014 at 22:14 Reply For the moment I am using a linear 5V, 1A supply that came with an old ZIP drive. A linear supply (those bigger and heavier transformer-based) are lower noise than the newer switching types. No trackbacks yet. Leave a Reply Cancel reply Enter your comment here... Fill in your details below or click an icon to log in: Gravatar Email (Address never made public) Name Website WordPress.com Logo You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Notify me of new posts via email. BEAGLEBONE BLACK: ACCESSING NETWORK SHARE BEAGLEBONE BLACK: NETWORK AND WIFI RSS feed Recent Posts Firmware v 0.99 Soekris DAC: Modding VRef R2R DAC Benchmark Filters (for now) dam 1021 R2R More Mods… Digital Filters for Soekris R-2R DAC Soekris dam 1021 R-2R DAC ILLUSTRATED GUIDE BBB DAC DEVELOPMENTS dam1021 R-2R DAC MODs Soekris dam1021 Build Raspberry Pi 2 The Soekris R-2R DAC: Technical Details INSIDE MARANTZ AV RECEIVER AKM Verita 4490EQ DAC Raspberry Pi B+ Digital Audio Raspberry Pi version B+ Latest Comments tamer on Improved Large Font for L… Dwight Chizen on MarkAudio Alpair Speaker … amix on BBB DAC DEVELOPMENTS themystical on AKM Verita 4490EQ DAC Derek on CODE a good writing about… on Raspberry Pi B+ Digital A… Łukasz L on Raspberry Pi B+ Digital A… Mykhailo on BUILDING THE DIYINHK ES90… Audrey Ramirez on JDS Labs Headphone Amp with Ar… soundcheck on Raspberry Pi B+ Digital A… themystical on AKM Verita 4490EQ DAC landroni on The Soekris R-2R DAC: Technica… museguy on AMANERO USB – I2S I… museguy on AKM Verita 4490EQ DAC ddimitr on Soekris dam 1021 R-2R DAC ILLU… Arduino Arduino Tutorials ARDUINOOS Code and Life Electronics Lab Blog Ken Shirriff's blog Kerry Wong -Arduino, etc Theory Choosing and Using Bypass Caps Complete List of Linear Tech Application Notes Decoupling, Bypassing, Layout FIR Filter Tutorial Grounding Data Converters Intro to FIR Digital Filters Intuitive Guide to Principles of Communications Rakon Jitter Whitepaper Reduce EMI, RFI Successful PCB grounding with mixed-signal chips The Scientist and Engineer's Guide to Digital Signal Processing Tutorials and other Resources USB Power Tools for DIYaudio % to dB Calculator Audio Equipment Database Best Solder Circuit simulation Generate DSD128 and DSD256 Hex&lt;-&gt;Binary&lt;-&gt;Decimal Converter IC Manufacturer's LOGOs Inductor markings Inside Audio Equipment Jitter Calculator LOTs of Calculators Schematics Service Manuals SMD Codebook SMD Marking Code Search SMD Markings Tantalum Capacitor Markings Understanding Audio &amp; Reviews Artifact Audibility Audio Musings BitPerfect 牙尖嘴利音響頻道 In Ear Headphone Comparison Low-Jitter USB OpAmp Comparisons Red Spade Audio Blog TC Electronics The Slow Diyer Tweak's Guide to Recording Success USB-SPDIF shootout Follow HifiDuino via Email Join 293 other followers Top Create a free website or blog at WordPress.com. The INove Theme. :) Secure Connection Failed The connection to public-api.wordpress.com was interrupted while the page was loading. The page you are trying to view cannot be shown because the authenticity of the received data could not be verified. Please contact the web site owners to inform them of this problem. Learn more… Go Back Advanced Try Again Report errors like this to help Mozilla identify and block malicious sites uses security technology that is outdated and vulnerable to attack. An attacker could easily reveal information which you thought to be safe. (Not secure) Try loading using outdated security "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622144816#index"
                   NS1:content=" Did you know that elinux.org has Mailing Lists? Please feel free to register today to discuss the wiki in general, request features, etc. etc.. Thanks!--Wmat (talk) Linux command line basics From eLinux.org Jump to: navigation, search Linux Command Line Interface (CLI from now on) could be at first glance discouraging for the average Joe, since nowadays we are only used to Graphic Interfaces. But don’t let that get you down, using a command line shell could be not only very useful, but also kind of funny. This guide will help you make your first steps in the command shell environment. First, when could a Command Line Interface be useful for you? Remote Connection via SSH: SSH remote connection allows you to interact with UDOO without physical access to it. SSH is available only with command line interface. Using a minimal Linux Distribution without a graphical interface. Some Linux Distributions come without a Graphical User Interface in order to maximize available resources. Command line interface is your only bet in this scenario. Some power-users consider CLI the most convenient way to perform code execution and file-system operations. Even if you are not in this category, you may find that the CLI can be very fast when you get used to it. To help you get started, here are some very basic Linux commands: sudo Your first ally, this command allows users to run programs with the security privileges of root, or superuser. Its name is a concatenation of &quot;su&quot; (super user) and &quot;do&quot;, or take action . So, if you get an error message saying &quot;only root can do that&quot;, just use the same command preceded with sudo. sudo su This enables root privileges once for all, without forcing you to type sudo everytime. It works until you close the shell you are working in. sudo su touch Creates an empty file. nano Open an handy text editor. To save and exit, press CTRL and X, and press Y for yes or N for no. cat Shows the content of a file, it speeds up file inspection for smaller files. e.g. cat /etc/hostname ls Lists the contents of the current folder. cd Changes current folder to specific folder. cd.. Changes current folder to a higher folder level. cd / Changes current folder to root (top filesystem level). rm Deletes a file. rm -rf Deletes a folder. mv Moves a file or a folder. Useful for renaming as well, e.g. mv myfile /myfolder/myfile and mv myfile mysecondfile cp Copies a file, e.g. cp myfile /home/ubuntu/ cp -R Copies a folder, e.g. cp -R myfolder /home/ubuntu/myfolder mkdir Creates a folder top A very useful utility, this command basically gives you a complete overview of the system's status. It produces an ordered list of running processes selected by user-specified criteria. top shows how much processing power and memory are being used, as well as other information about the running processes. df -h Shows used and available disk space, in megabytes. ifconfig -a Shows useful networking data, like current IP, netmasks and other statistics. chmod Lets you set files permissions. This utility is very important for people concerned about security, but it is also useful for coders, since you can set a script as executable with it. dmesg Shows the messages resulting from the most recent system boot. This is useful for troubleshooting, since you can see which modules have been loaded, which binaries have started and so on. sync Thanks to this command your SD card lifespan will drastically improve, remember to launch it every time before you turn UDOO off or remove the power. It completes all pending input/output operations. It must be launched as root, or with sudo. reboot Reboots the system. shutdown Shuts it down. Retrieved from &quot;http://elinux.org/index.php?title=Linux_command_line_basics&amp;oldid=357584&quot; Category: UDOO Navigation menu Personal tools Log in Request account Log in / create account with OpenID Namespaces Page Discussion Variants Views Read View source View history More Search Navigation Main Page Community portal Current events Recent changes Help Volunteering Bug Tracker Where else to find us Google+ Community Twitter (@elinux) #elinux on Freenode Facebook (@elinux.org) Mailing Lists Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 7 November 2014, at 08:18. This page has been accessed 3,216 times. Content is available under a Creative Commons Attribution-ShareAlike 3.0 Unported License unless otherwise noted. Privacy policy About eLinux.org Disclaimers a Creative Commons Attribution-ShareAlike 3.0 Unported License Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620170108#index"
                   NS1:content=" Electronic Engineering Education and Innovation derekmolloy.ie derekmolloy.ie Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About Go to... Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About derekmolloy.ie derekmolloy.ie Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About Go to... Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About GPIOs on the Beaglebone Black using the Device Tree Overlays Home Blog Beaglebone GPIOs on the Beaglebone Black using the Device Tree Overlays Previous Next   GPIOs on the Beaglebone Black using the Device Tree Overlays This post provides supplementary information to the video that I have just posted on using GPIOs with the Beaglebone Black. Page Contents [hide] 1 The Video 2 Getting started 3 Setting up the Circuit 4 Setup for Device Tree Overlays 5 Using an Overlay 6 The C++ Code 7 Citation 8 Further Reading: The Video In this video I am going to continue my series on the Beaglebone by demonstrating how to use its GPIOs for both input and output applications. In this video I will wire simple input and output circuits that are attached to two GPIOs – one that lights an LED and the other that receives a button input. I covered this topic below before in a previous video. I am updating it here because there have been significant changes to the Linux kernel. This video will cover the Linux device tree for ARM embedded systems and explain how you can create custom device tree overlays to configure the GPIOs for your applications at run time from within the Linux userspace. I will explain the use of internal and external pullup and pulldown resistors and I will make available and describe a set of C++ code examples for reading and writing to the Beaglebone’s GPIOs. I have also built a set of PDF tables that aggregate the information that you need and make it easier to configure GPIOs on your Beaglebone’s P8 and P9 headers. The code for this video is available by typing: git clone git://github.com/derekmolloy/boneDeviceTree.git 1 git clone git://github.com/derekmolloy/boneDeviceTree.git The information below is covered in the video, but here it is just in case you need to get a text view: Getting started We can get some information about the pins in use: root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat pingroups registered pin groups: group: pinmux_userled_pins pin 21 (44e10854) pin 22 (44e10858) pin 23 (44e1085c) pin 24 (44e10860) group: pinmux_rstctl_pins pin 20 (44e10850) group: pinmux_i2c0_pins pin 98 (44e10988) pin 99 (44e1098c) group: pinmux_i2c2_pins pin 94 (44e10978) pin 95 (44e1097c) group: pinmux_emmc2_pins pin 32 (44e10880) pin 33 (44e10884) pin 0 (44e10800) pin 1 (44e10804) pin 2 (44e10808) pin 3 (44e1080c) pin 4 (44e10810) pin 5 (44e10814) pin 6 (44e10818) pin 7 (44e1081c) group: pinmux_userled_pins pin 21 (44e10854) pin 22 (44e10858) pin 23 (44e1085c) pin 24 (44e10860) group: mcasp0_pins pin 107 (44e109ac) pin 103 (44e1099c) pin 101 (44e10994) pin 100 (44e10990) pin 106 (44e109a8) group: nxp_hdmi_bonelt_pins pin 108 (44e109b0) pin 40 (44e108a0) pin 41 (44e108a4) pin 42 (44e108a8) pin 43 (44e108ac) pin 44 (44e108b0) pin 45 (44e108b4) pin 46 (44e108b8) pin 47 (44e108bc) pin 48 (44e108c0) pin 49 (44e108c4) pin 50 (44e108c8) pin 51 (44e108cc) pin 52 (44e108d0) pin 53 (44e108d4) pin 54 (44e108d8) pin 55 (44e108dc) pin 56 (44e108e0) pin 57 (44e108e4) pin 58 (44e108e8) pin 59 (44e108ec) group: nxp_hdmi_bonelt_off_pins pin 108 (44e109b0) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat pingroups registered pin groups: group: pinmux_userled_pins pin 21 (44e10854) pin 22 (44e10858) pin 23 (44e1085c) pin 24 (44e10860) group: pinmux_rstctl_pins pin 20 (44e10850) group: pinmux_i2c0_pins pin 98 (44e10988) pin 99 (44e1098c) group: pinmux_i2c2_pins pin 94 (44e10978) pin 95 (44e1097c) group: pinmux_emmc2_pins pin 32 (44e10880) pin 33 (44e10884) pin 0 (44e10800) pin 1 (44e10804) pin 2 (44e10808) pin 3 (44e1080c) pin 4 (44e10810) pin 5 (44e10814) pin 6 (44e10818) pin 7 (44e1081c) group: pinmux_userled_pins pin 21 (44e10854) pin 22 (44e10858) pin 23 (44e1085c) pin 24 (44e10860) group: mcasp0_pins pin 107 (44e109ac) pin 103 (44e1099c) pin 101 (44e10994) pin 100 (44e10990) pin 106 (44e109a8) group: nxp_hdmi_bonelt_pins pin 108 (44e109b0) pin 40 (44e108a0) pin 41 (44e108a4) pin 42 (44e108a8) pin 43 (44e108ac) pin 44 (44e108b0) pin 45 (44e108b4) pin 46 (44e108b8) pin 47 (44e108bc) pin 48 (44e108c0) pin 49 (44e108c4) pin 50 (44e108c8) pin 51 (44e108cc) pin 52 (44e108d0) pin 53 (44e108d4) pin 54 (44e108d8) pin 55 (44e108dc) pin 56 (44e108e0) pin 57 (44e108e4) pin 58 (44e108e8) pin 59 (44e108ec) group: nxp_hdmi_bonelt_off_pins pin 108 (44e109b0) We can also get information about which pins are in use (allocated): root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat pinmux-pins |more Pinmux settings per pin Format: pin (name): mux_owner gpio_owner hog? pin 0 (44e10800): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 1 (44e10804): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 2 (44e10808): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 3 (44e1080c): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 4 (44e10810): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 5 (44e10814): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 6 (44e10818): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 7 (44e1081c): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 8 (44e10820): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 9 (44e10824): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 10 (44e10828): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 11 (44e1082c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 12 (44e10830): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 13 (44e10834): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 14 (44e10838): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 15 (44e1083c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 16 (44e10840): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 17 (44e10844): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 18 (44e10848): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 19 (44e1084c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 20 (44e10850): rstctl.3 (GPIO UNCLAIMED) function pinmux_rstctl_pins group pinmux_rstctl_pins pin 21 (44e10854): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 22 (44e10858): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 23 (44e1085c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 24 (44e10860): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 25 (44e10864): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 26 (44e10868): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 27 (44e1086c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 28 (44e10870): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 29 (44e10874): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 30 (44e10878): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 31 (44e1087c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 32 (44e10880): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 33 (44e10884): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 34 (44e10888): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 35 (44e1088c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 36 (44e10890): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 37 (44e10894): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 38 (44e10898): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 39 (44e1089c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 40 (44e108a0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 41 (44e108a4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 42 (44e108a8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 43 (44e108ac): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 44 (44e108b0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 45 (44e108b4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 46 (44e108b8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 47 (44e108bc): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 48 (44e108c0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 49 (44e108c4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 50 (44e108c8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 51 (44e108cc): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 52 (44e108d0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 53 (44e108d4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 54 (44e108d8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 55 (44e108dc): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 56 (44e108e0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 57 (44e108e4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 58 (44e108e8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 59 (44e108ec): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 60 (44e108f0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 61 (44e108f4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 62 (44e108f8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 63 (44e108fc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 64 (44e10900): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 65 (44e10904): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 66 (44e10908): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 67 (44e1090c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 68 (44e10910): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 69 (44e10914): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 70 (44e10918): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 71 (44e1091c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 72 (44e10920): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 73 (44e10924): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 74 (44e10928): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 75 (44e1092c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 76 (44e10930): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 77 (44e10934): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 78 (44e10938): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 79 (44e1093c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 80 (44e10940): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 81 (44e10944): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 82 (44e10948): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 83 (44e1094c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 84 (44e10950): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 85 (44e10954): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 86 (44e10958): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 87 (44e1095c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 88 (44e10960): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 89 (44e10964): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 90 (44e10968): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 91 (44e1096c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 92 (44e10970): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 93 (44e10974): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 94 (44e10978): 4819c000.i2c (GPIO UNCLAIMED) function pinmux_i2c2_pins group pinmux_i2c2_pins pin 95 (44e1097c): 4819c000.i2c (GPIO UNCLAIMED) function pinmux_i2c2_pins group pinmux_i2c2_pins pin 96 (44e10980): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 97 (44e10984): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 98 (44e10988): 44e0b000.i2c (GPIO UNCLAIMED) function pinmux_i2c0_pins group pinmux_i2c0_pins pin 99 (44e1098c): 44e0b000.i2c (GPIO UNCLAIMED) function pinmux_i2c0_pins group pinmux_i2c0_pins pin 100 (44e10990): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 101 (44e10994): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 102 (44e10998): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 103 (44e1099c): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 104 (44e109a0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 105 (44e109a4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 106 (44e109a8): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 107 (44e109ac): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 108 (44e109b0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pin s pin 109 (44e109b4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 110 (44e109b8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 111 (44e109bc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 112 (44e109c0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 113 (44e109c4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 114 (44e109c8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 115 (44e109cc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 116 (44e109d0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 117 (44e109d4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 118 (44e109d8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 119 (44e109dc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 120 (44e109e0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 121 (44e109e4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 122 (44e109e8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 123 (44e109ec): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 124 (44e109f0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 125 (44e109f4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 126 (44e109f8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 127 (44e109fc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 128 (44e10a00): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 129 (44e10a04): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 130 (44e10a08): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 131 (44e10a0c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 132 (44e10a10): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 133 (44e10a14): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 134 (44e10a18): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 135 (44e10a1c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 136 (44e10a20): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 137 (44e10a24): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 138 (44e10a28): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 139 (44e10a2c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 140 (44e10a30): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 141 (44e10a34): (MUX UNCLAIMED) (GPIO UNCLAIMED) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat pinmux-pins |more Pinmux settings per pin Format: pin (name): mux_owner gpio_owner hog? pin 0 (44e10800): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 1 (44e10804): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 2 (44e10808): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 3 (44e1080c): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 4 (44e10810): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 5 (44e10814): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 6 (44e10818): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 7 (44e1081c): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 8 (44e10820): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 9 (44e10824): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 10 (44e10828): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 11 (44e1082c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 12 (44e10830): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 13 (44e10834): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 14 (44e10838): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 15 (44e1083c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 16 (44e10840): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 17 (44e10844): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 18 (44e10848): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 19 (44e1084c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 20 (44e10850): rstctl.3 (GPIO UNCLAIMED) function pinmux_rstctl_pins group pinmux_rstctl_pins pin 21 (44e10854): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 22 (44e10858): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 23 (44e1085c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 24 (44e10860): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 25 (44e10864): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 26 (44e10868): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 27 (44e1086c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 28 (44e10870): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 29 (44e10874): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 30 (44e10878): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 31 (44e1087c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 32 (44e10880): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 33 (44e10884): mmc.5 (GPIO UNCLAIMED) function pinmux_emmc2_pins group pinmux_emmc2_pins pin 34 (44e10888): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 35 (44e1088c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 36 (44e10890): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 37 (44e10894): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 38 (44e10898): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 39 (44e1089c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 40 (44e108a0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 41 (44e108a4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 42 (44e108a8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 43 (44e108ac): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 44 (44e108b0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 45 (44e108b4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 46 (44e108b8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 47 (44e108bc): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 48 (44e108c0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 49 (44e108c4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 50 (44e108c8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 51 (44e108cc): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 52 (44e108d0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 53 (44e108d4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 54 (44e108d8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 55 (44e108dc): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 56 (44e108e0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 57 (44e108e4): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 58 (44e108e8): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 59 (44e108ec): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pins pin 60 (44e108f0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 61 (44e108f4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 62 (44e108f8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 63 (44e108fc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 64 (44e10900): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 65 (44e10904): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 66 (44e10908): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 67 (44e1090c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 68 (44e10910): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 69 (44e10914): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 70 (44e10918): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 71 (44e1091c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 72 (44e10920): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 73 (44e10924): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 74 (44e10928): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 75 (44e1092c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 76 (44e10930): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 77 (44e10934): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 78 (44e10938): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 79 (44e1093c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 80 (44e10940): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 81 (44e10944): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 82 (44e10948): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 83 (44e1094c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 84 (44e10950): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 85 (44e10954): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 86 (44e10958): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 87 (44e1095c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 88 (44e10960): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 89 (44e10964): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 90 (44e10968): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 91 (44e1096c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 92 (44e10970): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 93 (44e10974): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 94 (44e10978): 4819c000.i2c (GPIO UNCLAIMED) function pinmux_i2c2_pins group pinmux_i2c2_pins pin 95 (44e1097c): 4819c000.i2c (GPIO UNCLAIMED) function pinmux_i2c2_pins group pinmux_i2c2_pins pin 96 (44e10980): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 97 (44e10984): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 98 (44e10988): 44e0b000.i2c (GPIO UNCLAIMED) function pinmux_i2c0_pins group pinmux_i2c0_pins pin 99 (44e1098c): 44e0b000.i2c (GPIO UNCLAIMED) function pinmux_i2c0_pins group pinmux_i2c0_pins pin 100 (44e10990): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 101 (44e10994): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 102 (44e10998): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 103 (44e1099c): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 104 (44e109a0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 105 (44e109a4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 106 (44e109a8): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 107 (44e109ac): 48038000.mcasp (GPIO UNCLAIMED) function mcasp0_pins group mcasp0_pins pin 108 (44e109b0): hdmi.12 (GPIO UNCLAIMED) function nxp_hdmi_bonelt_pins group nxp_hdmi_bonelt_pin s pin 109 (44e109b4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 110 (44e109b8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 111 (44e109bc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 112 (44e109c0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 113 (44e109c4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 114 (44e109c8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 115 (44e109cc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 116 (44e109d0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 117 (44e109d4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 118 (44e109d8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 119 (44e109dc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 120 (44e109e0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 121 (44e109e4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 122 (44e109e8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 123 (44e109ec): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 124 (44e109f0): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 125 (44e109f4): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 126 (44e109f8): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 127 (44e109fc): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 128 (44e10a00): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 129 (44e10a04): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 130 (44e10a08): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 131 (44e10a0c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 132 (44e10a10): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 133 (44e10a14): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 134 (44e10a18): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 135 (44e10a1c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 136 (44e10a20): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 137 (44e10a24): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 138 (44e10a28): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 139 (44e10a2c): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 140 (44e10a30): (MUX UNCLAIMED) (GPIO UNCLAIMED) pin 141 (44e10a34): (MUX UNCLAIMED) (GPIO UNCLAIMED) And a full list of the pins: root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat pins |more registered pins: 142 pin 0 (44e10800) 00000031 pinctrl-single pin 1 (44e10804) 00000031 pinctrl-single pin 2 (44e10808) 00000031 pinctrl-single pin 3 (44e1080c) 00000031 pinctrl-single pin 4 (44e10810) 00000031 pinctrl-single pin 5 (44e10814) 00000031 pinctrl-single pin 6 (44e10818) 00000031 pinctrl-single pin 7 (44e1081c) 00000031 pinctrl-single pin 8 (44e10820) 00000027 pinctrl-single pin 9 (44e10824) 00000027 pinctrl-single pin 10 (44e10828) 00000027 pinctrl-single pin 11 (44e1082c) 00000027 pinctrl-single pin 12 (44e10830) 00000027 pinctrl-single pin 13 (44e10834) 00000027 pinctrl-single pin 14 (44e10838) 00000027 pinctrl-single pin 15 (44e1083c) 00000027 pinctrl-single pin 16 (44e10840) 00000027 pinctrl-single pin 17 (44e10844) 00000027 pinctrl-single pin 18 (44e10848) 00000027 pinctrl-single pin 19 (44e1084c) 00000027 pinctrl-single pin 20 (44e10850) 00000017 pinctrl-single pin 21 (44e10854) 00000007 pinctrl-single pin 22 (44e10858) 00000017 pinctrl-single pin 23 (44e1085c) 00000007 pinctrl-single pin 24 (44e10860) 00000017 pinctrl-single pin 25 (44e10864) 00000027 pinctrl-single pin 26 (44e10868) 00000027 pinctrl-single pin 27 (44e1086c) 00000027 pinctrl-single pin 28 (44e10870) 00000037 pinctrl-single pin 29 (44e10874) 00000037 pinctrl-single pin 30 (44e10878) 00000037 pinctrl-single pin 31 (44e1087c) 00000037 pinctrl-single pin 32 (44e10880) 00000032 pinctrl-single pin 33 (44e10884) 00000032 pinctrl-single pin 34 (44e10888) 00000037 pinctrl-single pin 35 (44e1088c) 00000027 pinctrl-single pin 36 (44e10890) 00000037 pinctrl-single pin 37 (44e10894) 00000037 pinctrl-single pin 38 (44e10898) 00000037 pinctrl-single pin 39 (44e1089c) 00000037 pinctrl-single pin 40 (44e108a0) 00000008 pinctrl-single pin 41 (44e108a4) 00000008 pinctrl-single pin 42 (44e108a8) 00000008 pinctrl-single pin 43 (44e108ac) 00000008 pinctrl-single pin 44 (44e108b0) 00000008 pinctrl-single pin 45 (44e108b4) 00000008 pinctrl-single pin 46 (44e108b8) 00000008 pinctrl-single pin 47 (44e108bc) 00000008 pinctrl-single pin 48 (44e108c0) 00000008 pinctrl-single pin 49 (44e108c4) 00000008 pinctrl-single pin 50 (44e108c8) 00000008 pinctrl-single pin 51 (44e108cc) 00000008 pinctrl-single pin 52 (44e108d0) 00000008 pinctrl-single pin 53 (44e108d4) 00000008 pinctrl-single pin 54 (44e108d8) 00000008 pinctrl-single pin 55 (44e108dc) 00000008 pinctrl-single pin 56 (44e108e0) 00000000 pinctrl-single pin 57 (44e108e4) 00000000 pinctrl-single pin 58 (44e108e8) 00000000 pinctrl-single pin 59 (44e108ec) 00000000 pinctrl-single pin 60 (44e108f0) 00000030 pinctrl-single pin 61 (44e108f4) 00000030 pinctrl-single pin 62 (44e108f8) 00000030 pinctrl-single pin 63 (44e108fc) 00000030 pinctrl-single pin 64 (44e10900) 00000030 pinctrl-single pin 65 (44e10904) 00000030 pinctrl-single pin 66 (44e10908) 00000027 pinctrl-single pin 67 (44e1090c) 00000027 pinctrl-single pin 68 (44e10910) 00000020 pinctrl-single pin 69 (44e10914) 00000000 pinctrl-single pin 70 (44e10918) 00000020 pinctrl-single pin 71 (44e1091c) 00000000 pinctrl-single pin 72 (44e10920) 00000000 pinctrl-single pin 73 (44e10924) 00000000 pinctrl-single pin 74 (44e10928) 00000000 pinctrl-single pin 75 (44e1092c) 00000020 pinctrl-single pin 76 (44e10930) 00000020 pinctrl-single pin 77 (44e10934) 00000020 pinctrl-single pin 78 (44e10938) 00000020 pinctrl-single pin 79 (44e1093c) 00000020 pinctrl-single pin 80 (44e10940) 00000020 pinctrl-single pin 81 (44e10944) 00000027 pinctrl-single pin 82 (44e10948) 00000030 pinctrl-single pin 83 (44e1094c) 00000010 pinctrl-single pin 84 (44e10950) 00000037 pinctrl-single pin 85 (44e10954) 00000037 pinctrl-single pin 86 (44e10958) 00000062 pinctrl-single pin 87 (44e1095c) 00000062 pinctrl-single pin 88 (44e10960) 00000035 pinctrl-single pin 89 (44e10964) 00000027 pinctrl-single pin 90 (44e10968) 00000037 pinctrl-single pin 91 (44e1096c) 00000037 pinctrl-single pin 92 (44e10970) 00000030 pinctrl-single pin 93 (44e10974) 00000000 pinctrl-single pin 94 (44e10978) 00000073 pinctrl-single pin 95 (44e1097c) 00000073 pinctrl-single pin 96 (44e10980) 00000037 pinctrl-single pin 97 (44e10984) 00000037 pinctrl-single pin 98 (44e10988) 00000070 pinctrl-single pin 99 (44e1098c) 00000070 pinctrl-single pin 100 (44e10990) 00000000 pinctrl-single pin 101 (44e10994) 00000010 pinctrl-single pin 102 (44e10998) 00000027 pinctrl-single pin 103 (44e1099c) 00000002 pinctrl-single pin 104 (44e109a0) 00000024 pinctrl-single pin 105 (44e109a4) 00000027 pinctrl-single pin 106 (44e109a8) 0000001f pinctrl-single pin 107 (44e109ac) 00000030 pinctrl-single pin 108 (44e109b0) 00000003 pinctrl-single pin 109 (44e109b4) 00000027 pinctrl-single pin 110 (44e109b8) 00000030 pinctrl-single pin 111 (44e109bc) 00000028 pinctrl-single pin 112 (44e109c0) 00000030 pinctrl-single pin 113 (44e109c4) 00000028 pinctrl-single pin 114 (44e109c8) 00000028 pinctrl-single pin 115 (44e109cc) 00000028 pinctrl-single pin 116 (44e109d0) 00000030 pinctrl-single pin 117 (44e109d4) 00000030 pinctrl-single pin 118 (44e109d8) 00000030 pinctrl-single pin 119 (44e109dc) 00000030 pinctrl-single pin 120 (44e109e0) 00000020 pinctrl-single pin 121 (44e109e4) 00000030 pinctrl-single pin 122 (44e109e8) 00000030 pinctrl-single pin 123 (44e109ec) 00000028 pinctrl-single pin 124 (44e109f0) 00000028 pinctrl-single pin 125 (44e109f4) 00000028 pinctrl-single pin 126 (44e109f8) 00000030 pinctrl-single pin 127 (44e109fc) 00000028 pinctrl-single pin 128 (44e10a00) 00000028 pinctrl-single pin 129 (44e10a04) 00000020 pinctrl-single pin 130 (44e10a08) 00000028 pinctrl-single pin 131 (44e10a0c) 00000028 pinctrl-single pin 132 (44e10a10) 00000028 pinctrl-single pin 133 (44e10a14) 00000028 pinctrl-single pin 134 (44e10a18) 00000028 pinctrl-single pin 135 (44e10a1c) 00000020 pinctrl-single pin 136 (44e10a20) 00000028 pinctrl-single pin 137 (44e10a24) 00000028 pinctrl-single pin 138 (44e10a28) 00000028 pinctrl-single pin 139 (44e10a2c) 00000028 pinctrl-single pin 140 (44e10a30) 00000028 pinctrl-single pin 141 (44e10a34) 00000020 pinctrl-single 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# cat pins |more registered pins: 142 pin 0 (44e10800) 00000031 pinctrl-single pin 1 (44e10804) 00000031 pinctrl-single pin 2 (44e10808) 00000031 pinctrl-single pin 3 (44e1080c) 00000031 pinctrl-single pin 4 (44e10810) 00000031 pinctrl-single pin 5 (44e10814) 00000031 pinctrl-single pin 6 (44e10818) 00000031 pinctrl-single pin 7 (44e1081c) 00000031 pinctrl-single pin 8 (44e10820) 00000027 pinctrl-single pin 9 (44e10824) 00000027 pinctrl-single pin 10 (44e10828) 00000027 pinctrl-single pin 11 (44e1082c) 00000027 pinctrl-single pin 12 (44e10830) 00000027 pinctrl-single pin 13 (44e10834) 00000027 pinctrl-single pin 14 (44e10838) 00000027 pinctrl-single pin 15 (44e1083c) 00000027 pinctrl-single pin 16 (44e10840) 00000027 pinctrl-single pin 17 (44e10844) 00000027 pinctrl-single pin 18 (44e10848) 00000027 pinctrl-single pin 19 (44e1084c) 00000027 pinctrl-single pin 20 (44e10850) 00000017 pinctrl-single pin 21 (44e10854) 00000007 pinctrl-single pin 22 (44e10858) 00000017 pinctrl-single pin 23 (44e1085c) 00000007 pinctrl-single pin 24 (44e10860) 00000017 pinctrl-single pin 25 (44e10864) 00000027 pinctrl-single pin 26 (44e10868) 00000027 pinctrl-single pin 27 (44e1086c) 00000027 pinctrl-single pin 28 (44e10870) 00000037 pinctrl-single pin 29 (44e10874) 00000037 pinctrl-single pin 30 (44e10878) 00000037 pinctrl-single pin 31 (44e1087c) 00000037 pinctrl-single pin 32 (44e10880) 00000032 pinctrl-single pin 33 (44e10884) 00000032 pinctrl-single pin 34 (44e10888) 00000037 pinctrl-single pin 35 (44e1088c) 00000027 pinctrl-single pin 36 (44e10890) 00000037 pinctrl-single pin 37 (44e10894) 00000037 pinctrl-single pin 38 (44e10898) 00000037 pinctrl-single pin 39 (44e1089c) 00000037 pinctrl-single pin 40 (44e108a0) 00000008 pinctrl-single pin 41 (44e108a4) 00000008 pinctrl-single pin 42 (44e108a8) 00000008 pinctrl-single pin 43 (44e108ac) 00000008 pinctrl-single pin 44 (44e108b0) 00000008 pinctrl-single pin 45 (44e108b4) 00000008 pinctrl-single pin 46 (44e108b8) 00000008 pinctrl-single pin 47 (44e108bc) 00000008 pinctrl-single pin 48 (44e108c0) 00000008 pinctrl-single pin 49 (44e108c4) 00000008 pinctrl-single pin 50 (44e108c8) 00000008 pinctrl-single pin 51 (44e108cc) 00000008 pinctrl-single pin 52 (44e108d0) 00000008 pinctrl-single pin 53 (44e108d4) 00000008 pinctrl-single pin 54 (44e108d8) 00000008 pinctrl-single pin 55 (44e108dc) 00000008 pinctrl-single pin 56 (44e108e0) 00000000 pinctrl-single pin 57 (44e108e4) 00000000 pinctrl-single pin 58 (44e108e8) 00000000 pinctrl-single pin 59 (44e108ec) 00000000 pinctrl-single pin 60 (44e108f0) 00000030 pinctrl-single pin 61 (44e108f4) 00000030 pinctrl-single pin 62 (44e108f8) 00000030 pinctrl-single pin 63 (44e108fc) 00000030 pinctrl-single pin 64 (44e10900) 00000030 pinctrl-single pin 65 (44e10904) 00000030 pinctrl-single pin 66 (44e10908) 00000027 pinctrl-single pin 67 (44e1090c) 00000027 pinctrl-single pin 68 (44e10910) 00000020 pinctrl-single pin 69 (44e10914) 00000000 pinctrl-single pin 70 (44e10918) 00000020 pinctrl-single pin 71 (44e1091c) 00000000 pinctrl-single pin 72 (44e10920) 00000000 pinctrl-single pin 73 (44e10924) 00000000 pinctrl-single pin 74 (44e10928) 00000000 pinctrl-single pin 75 (44e1092c) 00000020 pinctrl-single pin 76 (44e10930) 00000020 pinctrl-single pin 77 (44e10934) 00000020 pinctrl-single pin 78 (44e10938) 00000020 pinctrl-single pin 79 (44e1093c) 00000020 pinctrl-single pin 80 (44e10940) 00000020 pinctrl-single pin 81 (44e10944) 00000027 pinctrl-single pin 82 (44e10948) 00000030 pinctrl-single pin 83 (44e1094c) 00000010 pinctrl-single pin 84 (44e10950) 00000037 pinctrl-single pin 85 (44e10954) 00000037 pinctrl-single pin 86 (44e10958) 00000062 pinctrl-single pin 87 (44e1095c) 00000062 pinctrl-single pin 88 (44e10960) 00000035 pinctrl-single pin 89 (44e10964) 00000027 pinctrl-single pin 90 (44e10968) 00000037 pinctrl-single pin 91 (44e1096c) 00000037 pinctrl-single pin 92 (44e10970) 00000030 pinctrl-single pin 93 (44e10974) 00000000 pinctrl-single pin 94 (44e10978) 00000073 pinctrl-single pin 95 (44e1097c) 00000073 pinctrl-single pin 96 (44e10980) 00000037 pinctrl-single pin 97 (44e10984) 00000037 pinctrl-single pin 98 (44e10988) 00000070 pinctrl-single pin 99 (44e1098c) 00000070 pinctrl-single pin 100 (44e10990) 00000000 pinctrl-single pin 101 (44e10994) 00000010 pinctrl-single pin 102 (44e10998) 00000027 pinctrl-single pin 103 (44e1099c) 00000002 pinctrl-single pin 104 (44e109a0) 00000024 pinctrl-single pin 105 (44e109a4) 00000027 pinctrl-single pin 106 (44e109a8) 0000001f pinctrl-single pin 107 (44e109ac) 00000030 pinctrl-single pin 108 (44e109b0) 00000003 pinctrl-single pin 109 (44e109b4) 00000027 pinctrl-single pin 110 (44e109b8) 00000030 pinctrl-single pin 111 (44e109bc) 00000028 pinctrl-single pin 112 (44e109c0) 00000030 pinctrl-single pin 113 (44e109c4) 00000028 pinctrl-single pin 114 (44e109c8) 00000028 pinctrl-single pin 115 (44e109cc) 00000028 pinctrl-single pin 116 (44e109d0) 00000030 pinctrl-single pin 117 (44e109d4) 00000030 pinctrl-single pin 118 (44e109d8) 00000030 pinctrl-single pin 119 (44e109dc) 00000030 pinctrl-single pin 120 (44e109e0) 00000020 pinctrl-single pin 121 (44e109e4) 00000030 pinctrl-single pin 122 (44e109e8) 00000030 pinctrl-single pin 123 (44e109ec) 00000028 pinctrl-single pin 124 (44e109f0) 00000028 pinctrl-single pin 125 (44e109f4) 00000028 pinctrl-single pin 126 (44e109f8) 00000030 pinctrl-single pin 127 (44e109fc) 00000028 pinctrl-single pin 128 (44e10a00) 00000028 pinctrl-single pin 129 (44e10a04) 00000020 pinctrl-single pin 130 (44e10a08) 00000028 pinctrl-single pin 131 (44e10a0c) 00000028 pinctrl-single pin 132 (44e10a10) 00000028 pinctrl-single pin 133 (44e10a14) 00000028 pinctrl-single pin 134 (44e10a18) 00000028 pinctrl-single pin 135 (44e10a1c) 00000020 pinctrl-single pin 136 (44e10a20) 00000028 pinctrl-single pin 137 (44e10a24) 00000028 pinctrl-single pin 138 (44e10a28) 00000028 pinctrl-single pin 139 (44e10a2c) 00000028 pinctrl-single pin 140 (44e10a30) 00000028 pinctrl-single pin 141 (44e10a34) 00000020 pinctrl-single Setting up the Circuit Using the same circuit as in my old video. Since each GPIO module provides 32 dedicated GPIOs (general purpose input/output) and the GPIOs support 4 banks of 32 GPIOs (so, 128 GPIOs in total) the naming of GPIO0_5, would be GPIO 5 as (0 x32 + 5 = 5) (Pin 12 on the P9 Header) GPIO1_28 – The LED = 1 x 32 + 28 = GPIO 60 (Offset 0x078, P9-12 GPIO1_28) #88 NOTE: GPIO 60 is not PIN 60!!! If we check pins again and search for pin 60, by using the offset we can see: root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# more pins |grep 878 pin 30 (44e10878) 00000030 pinctrl-single 1 2 root@beaglebone:/sys/kernel/debug/pinctrl/44e10800.pinmux# more pins |grep 878 pin 30 (44e10878) 00000030 pinctrl-single The pin mode on pin 30 is 30 HEX. What does that mean? Well to understand this you need the document to beat all documents – the AM3359 Technical Reference Manual. http://www.ti.com/product/am3359 and you can see the link for this document. The version I am using is called the “AM335x ARM Cortex-A8 Microprocessors (MPUs) Technical Reference Manual (Rev.H). It is a 18.5MB document with 4,727 pages (no typo there – 4,700 pages!). The current direct link is: http://www.ti.com/lit/ug/spruh73j/spruh73j.pdf The GPIOs section is Chapter 25 and begins on page 4,056. The page I am most interested in is Page 815, Section 9.3.51. You can search the PDF for “conf_&lt;module&gt;” if you are using a different version of the document. The value: 0x30 Hex is 110000 in Binary, so what does that mean? Well, you have to see the table: Bit Field Reset Description 6 conf_&lt;module&gt;_&lt;pin&gt;_slewctrl X Slew Control. Slew Rate: Fast is 0, Slow is 1 5 conf_&lt;module&gt;_&lt;pin&gt;_rxactive 1h Receiver Active. Input Enable: Receiver Disable 0, Receiver Enable 1 4 conf_&lt;module&gt;_&lt;pin&gt;_putypesel X Pad Pullup/Pulldown Type. Pulldown is 0, Pullup is 1 3 conf_&lt;module&gt;_&lt;pin&gt;_puden X Pad Pullup/Pulldown enable. Enabled is 0, Disabled is 1 2-0 conf_&lt;module&gt;_&lt;pin&gt;_mmode X Mode. Pad functional mux select. A number between 0 and 7 i.e. 000 and 111. This depends on which mode we require. Well if you look at this table, you see that 0x30 means the slew rate is fast, the receiver is enabled, the pad is set for pullup and pullup is enabled. The Mode is 0. which means when you look a the table for this pin on the P9 header (Table 8. Expansion Header P9 Pinout), you see that pin is set as: Beaglebone P9 Header, Pin 12, Mode 0 is gpmc_be1n, we would like to set it to Mode 7, which is gpio1[28] (Note the LED is currently on). 27 means 100111 = Fast, Enable Receiver, Pulldown type, enabled, mux mode 7. 37 means 110111 = Fast, Enable Receiver, Pullup type, enabled, mux mode 7. Be careful, not all pins work in this way and there are external resistors on the board that affect the behaviour. For example, pins GPIO2_6 to GPIO2_14 all have external 42.2k resistors to GND and 100k resistors to high. We can export the pins by echoing the GPIO number to /sys/class/gpio/export root@beaglebone:/sys/class/gpio# ls -al total 0 drwxr-xr-x 2 root root 0 Jan 1 2000 . drwxr-xr-x 48 root root 0 Jan 1 2000 .. --w------- 1 root root 4096 Jun 1 22:21 export lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4096 Jan 1 2000 unexport root@beaglebone:/sys/class/gpio# echo 117 &gt; export root@beaglebone:/sys/class/gpio# echo 60 &gt; export root@beaglebone:/sys/class/gpio# ls -al total 0 drwxr-xr-x 2 root root 0 Jan 1 2000 . drwxr-xr-x 48 root root 0 Jan 1 2000 .. --w------- 1 root root 4096 Jun 1 22:22 export lrwxrwxrwx 1 root root 0 Jun 1 22:22 gpio117 -&gt; ../../devices/virtual/gpio/gpio117 lrwxrwxrwx 1 root root 0 Jun 1 22:22 gpio60 -&gt; ../../devices/virtual/gpio/gpio60 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4096 Jan 1 2000 unexport root@beaglebone:/sys/class/gpio# cd gpio60 root@beaglebone:/sys/class/gpio/gpio60# ls -al total 0 drwxr-xr-x 3 root root 0 Jun 1 22:22 . drwxr-xr-x 8 root root 0 Jan 1 2000 .. -rw-r--r-- 1 root root 4096 Jun 1 22:24 active_low -rw-r--r-- 1 root root 4096 Jun 1 22:24 direction -rw-r--r-- 1 root root 4096 Jun 1 22:24 edge drwxr-xr-x 2 root root 0 Jun 1 22:24 power lrwxrwxrwx 1 root root 0 Jun 1 22:24 subsystem -&gt; ../../../../class/gpio -rw-r--r-- 1 root root 4096 Jun 1 22:22 uevent -rw-r--r-- 1 root root 4096 Jun 1 22:24 value root@beaglebone:/sys/class/gpio/gpio60# echo &quot;out&quot; &gt; direction root@beaglebone:/sys/class/gpio/gpio60# cat direction out root@beaglebone:/sys/class/gpio/gpio60# echo 0 &gt; value root@beaglebone:/sys/class/gpio/gpio60# echo 1 &gt; value root@beaglebone:/sys/class/gpio/gpio60# echo 0 &gt; value root@beaglebone:/sys/class/gpio/gpio60# echo 1 &gt; value 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 root@beaglebone:/sys/class/gpio# ls -al total 0 drwxr-xr-x 2 root root 0 Jan 1 2000 . drwxr-xr-x 48 root root 0 Jan 1 2000 .. --w------- 1 root root 4096 Jun 1 22:21 export lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4096 Jan 1 2000 unexport root@beaglebone:/sys/class/gpio# echo 117 &gt; export root@beaglebone:/sys/class/gpio# echo 60 &gt; export root@beaglebone:/sys/class/gpio# ls -al total 0 drwxr-xr-x 2 root root 0 Jan 1 2000 . drwxr-xr-x 48 root root 0 Jan 1 2000 .. --w------- 1 root root 4096 Jun 1 22:22 export lrwxrwxrwx 1 root root 0 Jun 1 22:22 gpio117 -&gt; ../../devices/virtual/gpio/gpio117 lrwxrwxrwx 1 root root 0 Jun 1 22:22 gpio60 -&gt; ../../devices/virtual/gpio/gpio60 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4096 Jan 1 2000 unexport root@beaglebone:/sys/class/gpio# cd gpio60 root@beaglebone:/sys/class/gpio/gpio60# ls -al total 0 drwxr-xr-x 3 root root 0 Jun 1 22:22 . drwxr-xr-x 8 root root 0 Jan 1 2000 .. -rw-r--r-- 1 root root 4096 Jun 1 22:24 active_low -rw-r--r-- 1 root root 4096 Jun 1 22:24 direction -rw-r--r-- 1 root root 4096 Jun 1 22:24 edge drwxr-xr-x 2 root root 0 Jun 1 22:24 power lrwxrwxrwx 1 root root 0 Jun 1 22:24 subsystem -&gt; ../../../../class/gpio -rw-r--r-- 1 root root 4096 Jun 1 22:22 uevent -rw-r--r-- 1 root root 4096 Jun 1 22:24 value root@beaglebone:/sys/class/gpio/gpio60# echo &quot;out&quot; &gt; direction root@beaglebone:/sys/class/gpio/gpio60# cat direction out root@beaglebone:/sys/class/gpio/gpio60# echo 0 &gt; value root@beaglebone:/sys/class/gpio/gpio60# echo 1 &gt; value root@beaglebone:/sys/class/gpio/gpio60# echo 0 &gt; value root@beaglebone:/sys/class/gpio/gpio60# echo 1 &gt; value Light goes on and off. The Beaglebone Black System Reference Manual (SRM) is available at: http://circuitco.com/support/index.php?title=BeagleBoneBlack Page 65 of the SRM has the table that you need to map the GPIO to the Offset! GPIO1_28 maps to P9-12 with an offset of 160 (pin 88 44e10960) Setup for Device Tree Overlays https://github.com/jadonk/validation-scripts/blob/master/test-capemgr/README.md As is described in this guide: root@beaglebone:/lib/firmware# export SLOTS=/sys/devices/bone_capemgr.9/slots root@beaglebone:/lib/firmware# export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins 1 2 root@beaglebone:/lib/firmware# export SLOTS=/sys/devices/bone_capemgr.9/slots root@beaglebone:/lib/firmware# export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins We now have $SLOTS and $PINS that we can echo root@beaglebone:/lib/firmware# echo $SLOTS /sys/devices/bone_capemgr.9/slots root@beaglebone:/lib/firmware# echo $PINS /sys/kernel/debug/pinctrl/44e10800.pinmux/pins 1 2 3 4 root@beaglebone:/lib/firmware# echo $SLOTS /sys/devices/bone_capemgr.9/slots root@beaglebone:/lib/firmware# echo $PINS /sys/kernel/debug/pinctrl/44e10800.pinmux/pins But we can also cat these values, for example cat $SLOTS: root@beaglebone:~/temp# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI 1 2 3 4 5 6 7 root@beaglebone:~/temp# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI Just so that I always have these environment variables I am adding them to my .profile. So my ~/.profile looks like this: export SLOTS=/sys/devices/bone_capemgr.9/slots export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt 1 2 3 export SLOTS=/sys/devices/bone_capemgr.9/slots export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt Which includes the environment variable to set up the certs to fix the configuration issue for curl as discussed here: Git and Curl SSL Certificates Configuration on Beaglebone Black If we wish to set these values now, without typing them twice we can use the ‘.’ so: root@beaglebone:~# . ~/.profile root@beaglebone:~# echo $CURL_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt 1 2 3 root@beaglebone:~# . ~/.profile root@beaglebone:~# echo $CURL_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt And you can see that the variables have been set. Using an Overlay Overlays allow the initial device tree that was described at boot to be modified in userspace at run time. This is useful as we are able to enable any device without having to recompile the kernel and/or reboot. When you enable output using the pinmux settings, you’re only enabling the output driver circuitry at the pin. When you change the mux, you’re selecting which internal signal gets connected to this pins output driver. So, the pin mux (physical pin) is completely separate from the gpio block (internal signal). You have to enable both. In this overlay example I am using the bone-pinmux-helper to enable the pins. The GPIO is treated as a separate peripheral, just like all other peripherals. root@beaglebone:~/boneDeviceTree/overlay# ls -al total 16 drwxr-xr-x 2 root root 4096 Jun 6 23:59 . drwxr-xr-x 6 root root 4096 Jan 1 2000 .. -rw-r--r-- 1 root root 1129 Jun 6 23:56 DM-GPIO-Test.dts -rwxr-xr-x 1 root root 124 Jun 6 23:29 build root@beaglebone:~/boneDeviceTree/overlay# more ./build #!/bin/bash echo &quot;Compiling the overlay from .dts to .dtbo&quot; dtc -O dtb -o DM-GPIO-Test-00A0.dtbo -b 0 -@ DM-GPIO-Test.dts root@beaglebone:~/boneDeviceTree/overlay# ./build Compiling the overlay from .dts to .dtbo root@beaglebone:~/boneDeviceTree/overlay# ls -al total 20 drwxr-xr-x 2 root root 4096 Jun 6 23:59 . drwxr-xr-x 6 root root 4096 Jan 1 2000 .. -rw-r--r-- 1 root root 952 Jun 6 23:59 DM-GPIO-Test-00A0.dtbo -rw-r--r-- 1 root root 1129 Jun 6 23:56 DM-GPIO-Test.dts -rwxr-xr-x 1 root root 124 Jun 6 23:29 build root@beaglebone:~/boneDeviceTree/overlay# cp DM-GPIO-Test-00A0.dtbo /lib/firmware 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 root@beaglebone:~/boneDeviceTree/overlay# ls -al total 16 drwxr-xr-x 2 root root 4096 Jun 6 23:59 . drwxr-xr-x 6 root root 4096 Jan 1 2000 .. -rw-r--r-- 1 root root 1129 Jun 6 23:56 DM-GPIO-Test.dts -rwxr-xr-x 1 root root 124 Jun 6 23:29 build root@beaglebone:~/boneDeviceTree/overlay# more ./build #!/bin/bash echo &quot;Compiling the overlay from .dts to .dtbo&quot; dtc -O dtb -o DM-GPIO-Test-00A0.dtbo -b 0 -@ DM-GPIO-Test.dts root@beaglebone:~/boneDeviceTree/overlay# ./build Compiling the overlay from .dts to .dtbo root@beaglebone:~/boneDeviceTree/overlay# ls -al total 20 drwxr-xr-x 2 root root 4096 Jun 6 23:59 . drwxr-xr-x 6 root root 4096 Jan 1 2000 .. -rw-r--r-- 1 root root 952 Jun 6 23:59 DM-GPIO-Test-00A0.dtbo -rw-r--r-- 1 root root 1129 Jun 6 23:56 DM-GPIO-Test.dts -rwxr-xr-x 1 root root 124 Jun 6 23:29 build root@beaglebone:~/boneDeviceTree/overlay# cp DM-GPIO-Test-00A0.dtbo /lib/firmware Now, note when you echo DM-GPIO-Test &gt; $SLOTS, make sure that you don’t pass DM-GPIO-Test-00A0.dtbo root@beaglebone:~# cd /lib/firmware/ root@beaglebone:/lib/firmware# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI root@beaglebone:/lib/firmware# echo DM-GPIO-Test &gt; $SLOTS root@beaglebone:/lib/firmware# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI 6: ff:P-O-L Override Board Name,00A0,Override Manuf,DM-GPIO-Test root@beaglebone:/lib/firmware# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 root@beaglebone:~# cd /lib/firmware/ root@beaglebone:/lib/firmware# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI root@beaglebone:/lib/firmware# echo DM-GPIO-Test &gt; $SLOTS root@beaglebone:/lib/firmware# cat $SLOTS 0: 54:PF--- 1: 55:PF--- 2: 56:PF--- 3: 57:PF--- 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI 6: ff:P-O-L Override Board Name,00A0,Override Manuf,DM-GPIO-Test root@beaglebone:/lib/firmware# Checking the pins (for example, pins 88 and 85): root@beaglebone:/lib/firmware# cat $PINS |grep 960 pin 88 (44e10960) 00000007 pinctrl-single root@beaglebone:/lib/firmware# cat $PINS |grep 954 pin 85 (44e10954) 00000027 pinctrl-single root@beaglebone:/lib/firmware# 1 2 3 4 5 root@beaglebone:/lib/firmware# cat $PINS |grep 960 pin 88 (44e10960) 00000007 pinctrl-single root@beaglebone:/lib/firmware# cat $PINS |grep 954 pin 85 (44e10954) 00000027 pinctrl-single root@beaglebone:/lib/firmware# 1020 is a20 – remember that it is in hexadecimal. Now if we type dmesg, we can see the impact of this operation: [ 62.334146] bone-capemgr bone_capemgr.9: part_number 'DM-GPIO-Test', version 'N/A' [ 62.334223] bone-capemgr bone_capemgr.9: slot #6: generic override [ 62.334242] bone-capemgr bone_capemgr.9: bone: Using override eeprom data at slot 6 [ 62.334260] bone-capemgr bone_capemgr.9: slot #6: 'Override Board Name,00A0,Override Manuf,DM-GPIO-Test' [ 62.334363] bone-capemgr bone_capemgr.9: slot #6: Requesting part number/version based 'DM-GPIO-Test-00A0.dtbo [ 62.334381] bone-capemgr bone_capemgr.9: slot #6: Requesting firmware 'DM-GPIO-Test-00A0.dtbo' for board-name 'Override Board Name', version '00A0' [ 62.338787] bone-capemgr bone_capemgr.9: slot #6: dtbo 'DM-GPIO-Test-00A0.dtbo' loaded; converting to live tree [ 62.338970] bone-capemgr bone_capemgr.9: slot #6: #2 overlays [ 62.342899] bone-capemgr bone_capemgr.9: slot #6: Applied #2 overlays. 1 2 3 4 5 6 7 8 9 [ 62.334146] bone-capemgr bone_capemgr.9: part_number 'DM-GPIO-Test', version 'N/A' [ 62.334223] bone-capemgr bone_capemgr.9: slot #6: generic override [ 62.334242] bone-capemgr bone_capemgr.9: bone: Using override eeprom data at slot 6 [ 62.334260] bone-capemgr bone_capemgr.9: slot #6: 'Override Board Name,00A0,Override Manuf,DM-GPIO-Test' [ 62.334363] bone-capemgr bone_capemgr.9: slot #6: Requesting part number/version based 'DM-GPIO-Test-00A0.dtbo [ 62.334381] bone-capemgr bone_capemgr.9: slot #6: Requesting firmware 'DM-GPIO-Test-00A0.dtbo' for board-name 'Override Board Name', version '00A0' [ 62.338787] bone-capemgr bone_capemgr.9: slot #6: dtbo 'DM-GPIO-Test-00A0.dtbo' loaded; converting to live tree [ 62.338970] bone-capemgr bone_capemgr.9: slot #6: #2 overlays [ 62.342899] bone-capemgr bone_capemgr.9: slot #6: Applied #2 overlays. Now we can work with the GPIOs directly: root@beaglebone:/sys/class/gpio# echo 60 &gt; export root@beaglebone:/sys/class/gpio# echo 49 &gt; export root@beaglebone:/sys/class/gpio# ls -al total 0 drwxr-xr-x 2 root root 0 Jan 1 2000 . drwxr-xr-x 48 root root 0 Jan 1 2000 .. --w------- 1 root root 4096 Jun 7 14:00 export lrwxrwxrwx 1 root root 0 Jun 7 14:00 gpio49 -&gt; ../../devices/virtual/gpio/gpio49 lrwxrwxrwx 1 root root 0 Jun 7 14:00 gpio60 -&gt; ../../devices/virtual/gpio/gpio60 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4096 Jan 1 2000 unexport root@beaglebone:/sys/class/gpio# cd gpio49 root@beaglebone:/sys/class/gpio/gpio49# ls active_low direction edge power subsystem uevent value root@beaglebone:/sys/class/gpio/gpio49# echo &quot;in&quot; &gt; direction root@beaglebone:/sys/class/gpio/gpio49# cat direction in root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 1 root@beaglebone:/sys/class/gpio/gpio49# cat value 1 root@beaglebone:/sys/class/gpio/gpio49# cat value 1 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 root@beaglebone:/sys/class/gpio# echo 60 &gt; export root@beaglebone:/sys/class/gpio# echo 49 &gt; export root@beaglebone:/sys/class/gpio# ls -al total 0 drwxr-xr-x 2 root root 0 Jan 1 2000 . drwxr-xr-x 48 root root 0 Jan 1 2000 .. --w------- 1 root root 4096 Jun 7 14:00 export lrwxrwxrwx 1 root root 0 Jun 7 14:00 gpio49 -&gt; ../../devices/virtual/gpio/gpio49 lrwxrwxrwx 1 root root 0 Jun 7 14:00 gpio60 -&gt; ../../devices/virtual/gpio/gpio60 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4096 Jan 1 2000 unexport root@beaglebone:/sys/class/gpio# cd gpio49 root@beaglebone:/sys/class/gpio/gpio49# ls active_low direction edge power subsystem uevent value root@beaglebone:/sys/class/gpio/gpio49# echo &quot;in&quot; &gt; direction root@beaglebone:/sys/class/gpio/gpio49# cat direction in root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 1 root@beaglebone:/sys/class/gpio/gpio49# cat value 1 root@beaglebone:/sys/class/gpio/gpio49# cat value 1 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# cat value 0 root@beaglebone:/sys/class/gpio/gpio49# All is in order. The C++ Code All of the C++ code is available in the gpio directory of the github repository. The description of this code and its use can be found in the video. Citation If you use this video in your research, please cite: Molloy, D. [DerekMolloyDCU]. (2012, May, 3). Beaglebone: GPIO Programming on ARM Embedded Linux [Video file]. Retrieved from http://www.youtube.com/watch?v=SaIpz0… Further Reading: Understanding the GPIOs: https://www.kernel.org/doc/Documentation/gpio/gpio.txt Understanding Overlays: https://github.com/jadonk/validation-scripts/blob/master/test-capemgr/README.md Understanding the Device Tree: http://devicetree.org/Device_Tree_Usage By Derek|2015-04-22T12:11:05+00:00June 12th, 2013|Beaglebone, Blog|102 Comments Share This Story, Choose Your Platform! About the Author: Derek Dr. Derek Molloy is a senior lecturer in the School of Electronic Engineering, Faculty of Engineering and Computing, Dublin City University, Ireland. He lectures at undergraduate and postgraduate levels in object-oriented programming with embedded systems, digital and analog electronics, and 3D computer graphics. His research contributions are largely in the fields of computer and machine vision, 3D graphics, embedded systems, and e-Learning. This is his personal blog site. Related Posts Linux-Image-Header Permalink Gallery Writing a Linux Kernel Module — Part 3: Buttons and LEDs Linux-Image-Header Permalink Gallery Writing a Linux Kernel Module — Part 2: A Character Device Linux-Image-Header Permalink Gallery Writing a Linux Kernel Module — Part 1: Introduction Featured_derekmolloyie_4 Permalink Gallery Introduction to CMake by Example CGIfeatured Permalink Gallery CGI using C++ on the BeagleBone (Ggicc) 102 Comments Sukru June 12, 2013 at 9:00 pm - Reply I think this will be most helpful video for us in BBB. Especially on Device Tree in Linux. Thanks for Your effort again. haris s June 13, 2013 at 4:35 am - Reply amazing you did it, Thanks a lot i will try in my BB with new image. Célio Goetten June 15, 2013 at 8:47 pm - Reply I followed all the instructions and it worked for me. In my BBB I have bone_capemgr.8 instead of bone_capemgr.9. Thanks a lot! Célio Goetten Brazil Marcin June 16, 2013 at 10:26 pm - Reply When I follow one of the steps I get message: root@beaglebone:~/boneDeviceTree/overlay# ls -l total 16 -rw-rw-r– 1 root root 976 Jun 11 2013 DM-GPIO-Test-00A0.dtbo -rw-rw-r– 1 root root 1844 Jun 11 2013 DM-GPIO-Test.dts -rw-rw-r– 1 root root 1573 Jun 11 2013 DM-GPIO-Test.dts~ -rwxr-xr-x 1 root root 124 Jun 11 2013 build root@beaglebone:~/boneDeviceTree/overlay# ./build Compiling the overlay from .dts to .dtbo Error: DM-GPIO-Test.dts:35.1-3 syntax error FATAL ERROR: Unable to parse input tree root@beaglebone:~/boneDeviceTree/overlay# Really thank you for your help. Marcin Derek June 16, 2013 at 10:41 pm - Reply Hi Marcin, I have seen this before when I downloaded the files to my PC and SFTP’d them across to the Beaglebone. I’m not sure why this happened as my transfer format was correct. The way I fixed this was to git clone directly to the Beaglebone and it worked perfectly. I don’t know if this is why you are having the problem. Derek. Kairo Tavares June 17, 2013 at 5:45 pm - Reply Hi Derek, I am working with interruption with the BBB and I am in need of a interruption @ 100 Khz. I am having problems with the polling. When I put more than 10 Khz the over load in the processor goes to 90%. I tried to use the GPIO-Keys driver and the Device Tree configuration to try not overload the processor, but seams that the GPIO-keys driver only work with interruptions less than 1Khz. I will try to use the PRU as a last resource. I Wanna to say too that you website is one of the best that I saw!!! Thanks. Kairo Tavares June 19, 2013 at 6:29 pm - Reply So far without success in getting interruption @100 kHz without overload the CPU, do you have some idea about that? Thanks. Tarik June 27, 2013 at 8:12 am - Reply Hi, When I try to run build file. I have this problem. Can you help me? Compiling the overlay from .dts to .dtbo dtc: invalid option — ‘@’ Usage: dtc [options] Options: -h This help text -q Quiet: -q suppress warnings, -qq errors, -qqq all -I Input formats are: dts – device tree source text dtb – device tree blob fs – /proc/device-tree style directory -o -O Output formats are: dts – device tree source text dtb – device tree blob asm – assembler source -V Blob version to produce, defaults to 17 (relevant for dtb and asm output only) -d -R Make space for reserve map entries (relevant for dtb and asm output only) -S Make the blob at least long (extra space) -p Add padding to the blob of long (extra space) -b Set the physical boot cpu -f Force – try to produce output even if the input tree has errors -s Sort nodes and properties before outputting (only useful for comparing trees) -v Print DTC version and exit -H phandle formats are: legacy – “linux,phandle” properties only epapr – “phandle” properties only both – Both “linux,phandle” and “phandle” properties leowise September 25, 2013 at 6:07 pm - Reply Tarik, your post is kinda old, so I don’t know if you solved the issue already, but, I had the same issue and I solved using the post from: http://www.embedded-things.com/bbb/patching-the-device-tree-compiler-for-ubuntu/ hope this helps you or someone else! leowise ansie June 27, 2013 at 2:10 pm - Reply Hello, How can i kill Override Board Name,00A0,Override Manuf,DM-GPIO-Test. ( excluding reboot ) cxp June 29, 2013 at 3:42 pm - Reply Amazing tutorial! Thank you very much! JCM June 29, 2013 at 11:27 pm - Reply Hi Derek, I’m new to linux and Ran into problem when trying to./build ran into input/output error, so I try removing the input gpio 15 and while loop in vim, but its a read only file. How do I edit your C++ code and why would i get input/output error when trying to ./build? JCM June 30, 2013 at 12:03 am - Reply I reset ubuntu and BBB then tried ./build and it works. I get bugged log in screens on USB over network a lot… BB seems buggy. What is the easiest way to Start editing the example you uploaded? PS: I would love to see datalogger example video. Peter Mills July 1, 2013 at 5:40 pm - Reply Hi Derek and friends, I have been trying to follow along with video for several days now and each time I get stuck in the same place. When I try to compile the DM-GPIO-Test.dts file I get an the followint error: Error: DM-GPIO-Test.dts:35.1-3 syntax error FATAL ERROR: Unable to parse input tree I know I’m not the first to report this problem but after reading comments and trying the solutions posted on this site and on the Beagleboard forum site, I am totally stumped. I have used git to clone the pertinent files directly on the BBB; I have removed all comments from the first fragment; I have tried keyboarding the code by hand into a duplicate file to eliminate any invisible character. Still, I get the same error. Does anyone have any suggestions? Thanks, Peter M BBB uname -a Linux beaglebone 3.8.13 #1 SMP Tue Jun 18 02:11:09 EDT 2013 armv7l GNU/Linux Angstrom 6/20 JCM` July 3, 2013 at 3:46 pm - Reply I removed most of the comments in order to get the file to compile. Peter M July 4, 2013 at 3:41 pm - Reply I appreciate your suggestion. I have tried removing comments in a previous attempt. I will try once more. Thanks again, Peter M Derek July 4, 2013 at 3:03 pm - Reply Hi Peter. I have no idea why this is. Stripping out the comments seems to work for most people, but it appears to me that dtc is being very fussy with syntax. Try retyping an almost empty dts using vi and see if you can get that to compile (e.g. one with just an include), then start adding until you get the error. Derek. Peter M July 4, 2013 at 3:53 pm - Reply Hi Derek, Thanks for your response and thanks for your lucid and inspiring videos and blogs. I am a newbie on the beaglebone and mostly new on Linux but very interested and motivated. I will keep trying to write a dts file that will compile. I tried removing all comments; that didn’t work. I earlier tried writing from scratch, your dts file from this video resulting in the same error message. The error message points, I think the the section beginning with the line, “&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&quot;. Can this section be changed to avoid the syntax error? Again, thanks for your help, Peter M Derek July 4, 2013 at 4:31 pm - Reply Hi Peter, That shouldn’t be there at all!! That’s a git update issue. You can manually remove all of the lines below: &lt; &lt;&lt;&lt;&lt;&lt;&lt; HEAD /* OUTPUT GPIO(mode7) 0x07 pullup, 0x17 pulldown, 0x0f no pullup/down */ /* INPUT GPIO(mode7) 0x27 pullup, 0x37 pulldown, 0x2f no pullup/down */ ======= /* INPUT GPIO(mode7) 0x07 pulldown, 0x17 pullup, 0x?f no pullup/down */ /* OUTPUT GPIO(mode7) 0x27 pulldown, 0x37 pullup, 0x?f no pullup/down */ &gt;&gt;&gt;&gt;&gt;&gt;&gt; f83cf685371044f2fbc8e8da09759bed24038367 I will fix that later. Thanks for pointing that out! Derek. Peter M July 4, 2013 at 6:10 pm Hi Derek, Deleting those line worked! The file compiled without complaint. I will now move on with my education. Y Thanks for your videos and blog posts on the Beaglebone and thanks for your help. Peter M erhardd July 2, 2013 at 9:07 am - Reply Only a question: Could it be possible the overlays in addresses to put in structs together joined in a bbb.h – file to alias the addresses? examples should be the stm32fxxx.h – file: typedef struct { __IO uint32_t MODER; /*!&lt; GPIO port mode register, Address offset: 0x00 */ __IO uint32_t OTYPER; /*!&lt; GPIO port output type register, Address offset: 0x04 */ __IO uint32_t OSPEEDR; /*!&lt; GPIO port output speed register, Address offset: 0x08 */ __IO uint32_t PUPDR; /*!&lt; GPIO port pull-up/pull-down register, Address offset: 0x0C */ __IO uint32_t IDR; /*!&lt; GPIO port input data register, Address offset: 0x10 */ __IO uint32_t ODR; /*!&lt; GPIO port output data register, Address offset: 0x14 */ __IO uint16_t BSRRL; /*!&lt; GPIO port bit set/reset low register, Address offset: 0x18 */ __IO uint16_t BSRRH; /*!&lt; GPIO port bit set/reset high register, Address offset: 0x1A */ __IO uint32_t LCKR; /*!&lt; GPIO port configuration lock register, Address offset: 0x1C */ __IO uint32_t AFR[2]; /*!&lt; GPIO alternate function registers, Address offset: 0x24-0x28 */ } GPIO_TypeDef; and then wirte GPIO_InitTypeDef GPIO_InitStructure; GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC); GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC); GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC); ….. GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF; GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; ….. GPIO_Init(GPIOD, &amp;GPIO_InitStructure); scosaje July 4, 2013 at 8:33 pm - Reply I am sorry I am new to this. Pls could help i cannot locate the Directory ~/boneDeviceTree sco Derek July 5, 2013 at 2:48 pm - Reply You need to clone my git repository into your directory, so in my case I cloned it to my home directory, which is always ~/ – it is equivalent in my case to saying /home/molloyd/ which contains the directory after git cloning of /home/molloyd/boneDeviceTree Daniele Puccinelli July 8, 2013 at 11:24 pm - Reply Hi, Derek, Great tutorial, thanks! Your whole website is fabulous! Have you looked into reading the analog inputs of the Beaglebone Black? Using echo cape-bone-iio &gt; $SLOTS cat /sys/devices/ocp.2/helper.1*/AIN1 doesn’t work very well according to my multimeter. It seems like there may be issues in the ADC drivers. It would be great if you could share your experience on this topic. Thanks so much! Daniele ken klein July 12, 2013 at 3:14 pm - Reply This is a great tutorial for a beginner like me. I have had limited success but am stuck on getting a reading from a ds18b20. I am trying to use p9 pin 12. But is it offset 160 or 0x078 From above: Pin 12 on the P9 Header) GPIO1_28 – The LED = 1 x 32 + 28 = GPIO 60 (Offset 0×078, P9-12 GPIO1_28) #88 From not so far above: GPIO1_28 maps to P9-12 with an offset of 160 (pin 88 44e10960) From the PDF: P9_12 30 0x878/078 GPIO1_28 60 gpio1[28] From the BBB SRM A52 Table 11 P9 Pinout 12 U18 GPIO1_28 gpmc_be1n mii2_col gpmc_csn6 mmc2_dat3 gpmc_dir mcasp0_aclkr_mux3 gpio1[28] And table 15 on page 90 of SRM 160 P9-12 GPIO1_28 Derek July 12, 2013 at 4:00 pm - Reply Hi Ken, P12 on the P9 Header in Mode7 is GPIO1_28 = GPIO 60 as you have said. This is at address 44e10878 and offset 0x078 according to my table. A few values in the SRM did not work for me and this may have been one of them. Hence, I generated the table directly from the board itself. Let me know if you get it working against my values, Derek. ken klein July 15, 2013 at 1:18 am - Reply Yes, I have been able to flash the led and read the button according to your offsets. Even your TestApplication worked right out of the box. Offset 160 is pin 88 but I am not sure what it is used for yet or where it is on the headers. P9_12 is definitely at 078. Thanks for your great instruction. Ken Klein Lexington, KY NickG July 15, 2013 at 11:26 am - Reply Hey Derek, Really great video cheers – I was wondering how easy it would be to demonstrate an interrupt coming in from S2? I know it’s used by the HDMI (or so it seems) but would love to see how to use it from device tree through to a kernel module/user space. Cheers, Nick Silver July 16, 2013 at 12:20 pm - Reply Is there a way to unload an overlay from the capemgr? Loading an overlay is simple, but how to unload one ? Thanks Silver July 16, 2013 at 4:48 pm - Reply # A=perl -pe 's/^.*(\d+):.*/$1/' $SLOTS | tail -1 # echo “-$A” -6 # echo “-$A” &gt; $SLOTS I found this code on another page. And it works^^ yet i don’t realy understand what it´s doing… A is a variable and contains the value 6 … to remove overlay on slot 6 if i write -6 directly into slots (echo -6 &gt; slots) my terminal shutdown… Why? Thanks Karsten Sorensen July 22, 2013 at 1:57 pm - Reply Thank you for the video, and the other videos. Now the DM-GPIO-Test works. The primary problem is that the “main-line” Device Tree Compiler does not handle overlays, or at least the -@ option and you have to either patch the source of the DTC or find a version that has been properly patched. Before hitting you head against the wall type ‘dtc -h’ and look for ‘-@’ as one of the permitted options. If there is no ‘-@’ option listed, the dtc will not work and will complain that input cannot be parsed and ‘@’ is an invalid option. Tried downloading a version of dtc from RobertCNelson’s github repository. At work, it would not download because of proxy/firewall. When I tried it at home, without any proxy, it worked just fine. Kanta August 28, 2013 at 12:21 pm - Reply How can configure and use its UART feature? Kishor August 28, 2013 at 1:45 pm - Reply Hello Derek, I want to change the mode settings of P9-17 and P9-18 pin which are 00000062 default. And I want to use that pins as normal pins. How can I change the mode of this pins permanentely. Thanking you. Steve August 30, 2013 at 9:35 pm - Reply What would you need to do in order to do the Stepper motor with this new device-tree setup? I tried doing it but it doesn’t seem to work. My first attempt with custom .dts was this 0x034 0x2f /* P8_11 45 INPUT fast,RX enabled,PD/off,mode 7 */ 0x030 0x2f /* P8_12 44 INPUT fast,RX enabled,PD/off,mode 7 */ 0x028 0x2f /* P8_14 26 INPUT fast,RX enabled,PD/off,mode 7 */ 0x03c 0x2f /* P8_15 47 INPUT fast,RX enabled,PD/off,mode 7 */ 0x038 0x2f /* P8_16 46 INPUT fast,RX enabled,PD/off,mode 7 */ I really wasn’t sure what RX enabled/pullup/down should be But when I did this then made slight change to your easy driver code(getting rid of omap_mux calls) nothing would happen… I even tried changing the .dts pins to 0x07 and that didn’t seem to do anything as well. Any tips would be appreciated Len September 3, 2013 at 8:25 pm - Reply The line “Well if you look at this table, you see that 0×30 means the slew rate is fast,” just below the first table, does not match the value in the table. Just being picky. Thanks for the great job. :) Brandon Fowler September 4, 2013 at 4:45 pm - Reply I have a quick question regarding some of the “Real Time” functions of the AM335x on the BeagleBone Black. In the manual I see the following: “The Programmable Real-Time Unit and Industrial Communication Subsystem (PRU-ICSS) is separate from the ARM core, allowing independent operation and clocking for greater efficiency and flexibility” I have a process that while not “PROFIBUS” it is Modbus, and I would like to try and use the “Real Time” features. Do Device Tree Overlays make use of this or is this a special function that requires explicit definitions? Have you made use of the independent sub-processes, and if so do you have any advice? Jo September 27, 2013 at 7:24 pm - Reply According to BBB user manual p61 and BBB schematic: led user0 is connected on PIN GPIO1_21, so his pin number should be 1*32+21=53. But in arch/arm/mach-omap2/board-omap3beagle.c his number is 150, and led user1 pin number is 149; static struct gpio_led gpio_leds[] = { { .name = “beagleboard::usr0”, .default_trigger = “heartbeat”, .gpio = 150, }, { .name = “beagleboard::usr1”, .default_trigger = “mmc0”, .gpio = 149, }, […] }; Do you have any explanation? Julien Huot October 18, 2013 at 7:31 pm - Reply Hi, first of all, Mr Melloy, thank you for your implication and your creations ! I’ve a problem to change the mux of pin P9_17 and maybe someone can help me. I used the file on the tutorial, (DM-GPIO-Test.dts) all if working for pin P9_17. I used the cape-bone-iio for analog, and the analog work fine. But when I try to mix both together, the pin P9_17 do not change to the good mode. This is my DM-GPIO-Test.dts http://ubuntuone.com/64pVz2qxo5PFUcLshrEVVO I run on kernel 3.8.13, Beagle bone black. I’m stuck with this since 2 days, it’s probably a stupid error, but I can’t figure it out. thank you Julien Matt October 21, 2013 at 3:20 pm - Reply These are fantastic tutorials, and have saved me from throwing my BBB out the window and going back to the RPi! However, wouldn’t accessing IO using file open/close be really slow? Lets say if you were bit bashing a port. Just curious, is there no other way to do this? samira October 26, 2013 at 11:40 pm - Reply from the article: #————————– Page 65 of the SRM has the table that you need to map the GPIO to the Offset! GPIO1_28 maps to P9-12 with an offset of 160 (pin 88 44e10960) #————————– From the table, I can find out that P9-12 is mapped to GPIO1_28. But…. How can I find out that P9-12(GPIO1_28) is mapped to Pin 88 in the list ? Thanks. samira October 28, 2013 at 2:33 pm - Reply Please ignore my above question. I think this was addressed by ken klein before and answered by the author.. Sorry for not reading all questions. Thanks again for great tutorial. Sebastian November 2, 2013 at 9:05 pm - Reply Hello to all, I try to solve a problem and can not do it: root@ubuntu-armhf:/lib/firmware# echo DM-GPIO-Test &gt; $SLOTS bash: $SLOTS: ambiguous redirect root@ubuntu-armhf:/lib/firmware# the next step should be: root@beaglebone:/lib/firmware# cat $SLOTS 0: 54:PF— 1: 55:PF— 2: 56:PF— 3: 57:PF— 4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G 5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI 6: ff:P-O-L Override Board Name,00A0,Override Manuf,DM-GPIO-Test I try to execute this command in different ways and i always get this as result: bash: $SLOTS: ambiguous redirect Does anyone know how to solve this problem? Thanks for your help Gustavo November 4, 2013 at 6:56 pm - Reply Hi, can you explain what is active_low used for? Does it invert all the bit coming into that pin? Gustavo Juan C. November 21, 2013 at 9:42 pm - Reply Hello Dereck, your tutorial is awsome!! I have two questions: 1) In /sys/devices/ I got only “bone_capemgr.8” why? 2) I try to export the SLOTS and PINS, but I can´t to view .profile file. Why? Thanks a lot! Juan C. One comment, you have a typo in the GPIO table for bit 4 “conf___putypesel” pullup is 1 and pulldown is 0. Carlos December 8, 2013 at 1:55 am - Reply Hi, I have the same problem, I can not find “.profile” I suppose that it is an file created for him but I don’t have idea how I can create it. Did you find how fix it? Derek December 8, 2013 at 5:48 pm - Reply Hi, yes if it doesn’t exist, just create a .profile file. Remember that you will have to do a ls -a to see hidden files (those with a . at the front). You can create it by using the nano editor e.g. nano .profile ben December 7, 2013 at 9:00 pm - Reply Do you have a video or a tutorial on how to do ‘git’? I’m hoping to get a beaglebone for christmas, but there’s so much I’m unfamiliar with! I have compiled a basic embedded hello world program for the beaglebone, but the electronics side and the source control side I’m still learning! Derek December 8, 2013 at 5:53 pm - Reply Hi Ben, I might do a full post, but as a short response, keeping it very simple you can follow these steps: 1) Create a new repository on the github.com website say username: gituser repository: temp Open Source Repositories are free. 2) On your local device – type “git clone https://github.com/gituser/temp.git” 3) Add your source code to that directory on your local device 4) When you are finished type “git add *” on the local device 5) Then you need to commit the changes, type “git commit -m “your message”” on the local device 6) Finally, push the code to the remote repository, type “git push” Kind regards, Derek. Steve December 12, 2013 at 9:26 pm - Reply Hi I have a problem that i cant seem to fix, i hope someone out there can give me some clues. I have an LCD7 cape which when connected to the beaglebone loads the correct firmware into SLOT-0. I have swapped the LCD screen to one with a different resolution, so i have modified the BB-BONE-LCD7-01-00A3.dts firmware and recompilied this using the “dtc -O dtb -o BB-BONE-LCD7-01_00A3.dtbo -b 0 -@ BB-BONE-LCD7-01-00A3.dts” code provided by Derek. (this was all done in /lib/firmware directory). However when the LCD7 cape is connected the old firmware is still loaded with the old resolution, even though i removed the original .dtbo file and replaced it, can anybody shed any light on this? Is there another location firmware is located where the kernel could be reading the old .dtbo file? Many thanks Steve Shobhit January 2, 2014 at 1:40 am - Reply `Derek, I replicated your steps to enable PWMs. I was able to change the pin mode into PWM. How do i export PWM from /sys/class/pwm ? There is another method which uses echo am335x_pwm &gt; $SLOTS and then you obtain the pwm directory structure in /sys/devices/ocp.3. This is a pre compiled overlay**.dtbo) file in lib/firmware However I am more interested in knowing how to enable the PWM using a custom overlay, compiling it and then using it. Could you help with it. I am using ubuntu 13.10 with 3.8.13 kernel Satish Sharma January 2, 2014 at 11:10 pm - Reply Derek, I believe you have a mistake in this page. In the table you flipped the PULLUP/DOWN SENSE. Pullup should be 1 you have it as 0 and of course the PullDown goes with it. Excellent write up though – thanks Derek January 3, 2014 at 12:16 am - Reply Thanks for that. Fixed. mik January 3, 2014 at 5:33 am - Reply Hi Derek! Did you mean pin 30 but not 60? mik January 3, 2014 at 5:55 am - Reply Sorry I did not study table P9 Now I understand your explanation Tim January 7, 2014 at 3:15 am - Reply Hi Derek, Thanks for the great tutorial. I also watched the video and that was great as well. I really appreciate it when someone goes through the effort of sharing knowledge in a well thought out and thorough way. I’m hoping that you or someone can help me with my issue. I’m trying to make the BBB communicate with an RS-485 device using UART1 or UART4 through a breakout board that uses a max3485 transceiver. The issue that I have is that this unit requires RTS. All of the RTS pins are dedicated to other functions as your table clearly shows. I’ve made a custom overlay that I think would work, except the RTS and CTS pins conflict with either the I2C2 pins on UART1 or the HDMI pins on UART4. How do I disable the I2C2 control of the P9_19 and P9_20 pins or the HDMI control of the P8_33 and P8_35 pins? Do the following overlay changes look correct for UART1-RTS? part-number = “BB-UART1-RTS”; exclusive-use = “P9.26”, “P9.24”, “P9.20”, “P9.19”, “uart1”; pinctrl-single,pins = ; (Everything else is the same as the original BB-UART1.dts file) Thank you, Tim Tim January 7, 2014 at 3:19 am - Reply The previous post deleted the following snippet from the dts file snippet. pinctrl-single,pins = ; Tim January 7, 2014 at 3:20 am - Reply 0x180 0x20 /* P9_26 = UART1_RXD, MODE0 */ 0x184 0x00 /* P9_24 = UART1_TXD, MODE0 */ 0x178 0x20 /* P9_20 = UART1_CTSN, MODE0 */ 0x17c 0x00 /* P9_19 = UART1_RTSN, MODE0 */ Tim January 11, 2014 at 5:56 pm - Reply I found a friend with an oscilloscope and we were able to find out part of the problem. We needed to connect TX-O on the 485 board to uart4_rx and RX-I on the 485 board to uart4_tx. You also need to disable the hdmi interface. Then the overlay found here: https://groups.google.com/forum/#!topic/beagleboard/6am1GKyo60s will sort of work. The remaining issues are: 1. The 485 board needs RTS to be low in order transmit and needs RTS to be low in order to receive. The uart4_rts pin is working opposite of this. Or perhaps I should say the 485 board is expecting the opposite signal from what the pin is giving it. How can I reverse the default polarity of the uart4_rts pin so it is low for transmit and high for receive? 2. I’m using pyserial and when I setup the serial port in pyserial: ser = serial.Serial(port = “/dev/ttyO4”, baudrate=9600, rtscts=True) it actually disables the RTS pin. Or at least it stops working in automatic mode. How I use pyserial with RTS? Michael February 17, 2014 at 7:38 am - Reply How can I load the “6: ff:P-O-L Override Board Name,00A0,Override Manuf,DM-GPIO-Test” automatically when starting up? Mike Duffy April 3, 2014 at 4:26 am - Reply Michael: Assuming the DM-GPIO-00A0.dtbo file is in the /lib/firmware directory, edit /media/BEAGLEBONE/uEnv.txt so that it looks like optargs=quiet drm.debug=7 capemgr.enable_partno=DM-GPIO (should all be on one line). Reboot and cat /sys/devices/bone_capemgr.*/slots and you should see the overlay loaded. Raul February 24, 2014 at 1:40 pm - Reply Hi Derek, I just compile a Yocto linux for BeagleBone Black using dora branch. But in my distribution I cant see the path: /sys/devices/bone_capemgr.9/slots Do you know if there some to do for enable this feature (overlay in userspace)? Thanks. Feng March 21, 2014 at 2:35 pm - Reply Hi Derek, I tried to clone the code. I got error message. Please advise. root@beaglebone:~# git clone git://github.com/derekmolloy/boneDeviceTree.git Cloning into boneDeviceTree… fatal: Unable to look up github.com (port 9418) (Name or service not known) root@beaglebone:~# Thanks, -Feng Derek March 22, 2014 at 12:32 am - Reply Hi Feng, that looks like a network problem. Can you ping 8.8.8.8? If so you have IP access and it is a nameserver problem. Can you ping http://www.google.com? If so, then I am at a loss. Is github blocked from your location? You should be able to go in using the web interface at the worst case using http://github.com/ Derek. Feng March 22, 2014 at 6:23 pm - Reply Hi Derek, Both don’t ping. It’s probably because I’m using USB to connect. I will download directly from HTTP then. Thank you! Mike Duffy April 3, 2014 at 4:17 am - Reply Great information, thank you. You’re a tremendous resource for the BBB community. As of December, 2013, revision J of the AM335x Technical Reference Manual is the current version, so your direct link should now be (still reachable from the product page): http://www.ti.com/lit/ug/spruh73j/spruh73j.pdf Derek April 3, 2014 at 11:22 am - Reply Thanks Mike, Have updated the link, Derek. russ April 21, 2014 at 6:24 pm - Reply Derek, Thanks for your outstanding lecture. You have a wonderful flowing style with a fine balance of detail vs. getting on with the big picture. Question: I appreciate the pedagogical value of writing text to Linux files to accomplish I/O. But as an inveterate real-time graphics programmer I cringe at the inefficiency of this approach. Is there some reason I can’t write directly to the BBB GPIO pin addresses once I take them away from the kernel with EXPORT? Derek May 4, 2014 at 2:02 pm - Reply Thanks russ. Yes for real-time programming this structure is not ideal. It is possible to flush the stream to avoid opening and closing each time, but if you need real-time performance then you will have to look at the PRUs. The real advantage of embedded Linux is the software support that it provides, but it is limited for real-time programming. Julio Fajardo June 22, 2014 at 9:00 pm - Reply Hi, how can i control the pins between GPIO2_6 to GPIO2_14? Jeremiah July 30, 2014 at 2:57 am - Reply This is so needlessly complex it literally gave me a migraine trying to understand it. This is such typical Linux nonsense. One might say “but look at all the power you have,” to which I would reply “look at all the nonsense you have to fiddle with to write a ONE OR A ZERO out of a GPIO pin.” It would be faster for me to buy a parallel port, install Windows XP, and write an application in assembler to bit-bang what I want out of the parallel port than it would to bother to comprehend this device tree nonsense. It is no wonder people use Windows. … someone get me some morphine. this hurts my head. Jules October 20, 2015 at 3:55 pm - Reply I completely agree – overly complicated because no one wants to pull their head from the trough of low level geek fodder and see the larger goal – I/O configuration. I really don’t care what a device tree overlay is and whether or not I have to use one to configure my pins. I simply want to configure my I/O to accommodate the circuit. And here’s the best part. I’ve been thinking I’ll circumvent this pile of horse manure by creating a cape with an EEPROM that defines all the pin configurations. That’s great, plug in the hardware and auto-configure your I/O. But NO, you still need a DTO in addition to this which, for the life of me, I can’t see why. Note: For anyone reading this, please do not respond to explain why – I’m not interested in how bad designs work, only good ones. mbjvfx August 12, 2014 at 4:11 pm - Reply When you said: “If we check pins again and search for pin 60, by using the offset we can see:” Did you mean: “If we check pins again and search for pin 30 (GPIO 60), by using the offset (0x078) we can see:” John Holeman September 18, 2014 at 7:04 pm - Reply Not sure if this was mentioned before, but the link to the Linux kernel GPIO docs is stale. The correct link is: https://www.kernel.org/doc/Documentation/gpio/gpio.txt Ashok Rao September 20, 2014 at 12:13 pm - Reply Hi Derek, From ken klein’s comment &amp; your reply above: “Hi Ken, P12 on the P9 Header in Mode7 is GPIO1_28 = GPIO 60 as you have said. This is at address 44e10878 and offset 0×078 according to my table. A few values in the SRM did not work for me and this may have been one of them. Hence, I generated the table directly from the board itself. Let me know if you get it working against my values, Derek.” I’m having trouble generating the GPIO mapping table from the board. The offsets in the SRM don’t work. Can you please let me know how you generate the mapping table from the board itself? That would be useful insight for me. Thank you in advance! Regards, Ashok R. Kaubha September 22, 2014 at 12:45 pm - Reply Hi Derek and friends, Thanks for all discussion here. I am a new to linux world and followed every step as shown in the video. Good part is I could see change in mode for pins shown in video. Now I want to change modes of lcd_data pins i.e. P8_31 to P8_46 as GPIO. When I insert addresses like 0x0a0, 0x0a4 etc in .dts file, I do not see any relevant changes in modes of these files when seen on $PINS | more. Point to note is I followed same procedure again by deleting previous files. Also, mode changes are seen correct when pin addresses are changed to those demonstrated in video. Is there any restriction in using lcd_data pins as GPIO (I am not using HDMI port)? or is there any other way to put Hex numbers as addresses? My code in fragment 0 looks like this: fragment@0 { target = ; __overlay__ { pinctrl_test: DM_GPIO_Test_Pins { pinctrl-single,pins = ; code doesn’t work. But when i revert back to below code, everything works well. fragment@0 { target = ; __overlay__ { pinctrl_test: DM_GPIO_Test_Pins { pinctrl-single,pins = ; Can anyone comment on this? Kaubha September 22, 2014 at 12:51 pm - Reply I guess code was changed by site settings automatically. Hence, copying it again here. Code which works: 0x078 0x07 /* P9_12 60 OUTPUT MODE7 – The LED Output */ 0x184 0x2f /* P9_24 15 INPUT MODE7 none – The Button Input */ 0x034 0x37 /* P8_11 45 INPUT MODE7 pullup – Yellow Wire */ 0x030 0x27 /* P8_12 44 INPUT MODE7 pulldown – Green Wire */ 0x024 0x2f /* P8_13 23 INPUT MODE7 none – White Wire */ /* OUTPUT GPIO(mode7) 0x07 pulldown, 0x17 pullup, 0x?f no pullup/down */ /* INPUT GPIO(mode7) 0x27 pulldown, 0x37 pullup, 0x?f no pullup/down */ Code which doesn’t work: 0x0a8 0x07 /* P8_43 72 OUTPUT MODE7 */ 0x184 0x2f /* P9_24 15 INPUT MODE7 none – The Button Input */ 0x034 0x37 /* P8_11 45 INPUT MODE7 pullup – Yellow Wire */ 0x030 0x27 /* P8_12 44 INPUT MODE7 pulldown – Green Wire */ 0x024 0x2f /* P8_13 23 INPUT MODE7 none – White Wire */ /* OUTPUT GPIO(mode7) 0x07 pulldown, 0x17 pullup, 0x?f no pullup/down */ /* INPUT GPIO(mode7) 0x27 pulldown, 0x37 pullup, 0x?f no pullup/down */ Chazl September 22, 2014 at 6:21 pm - Reply Hi Derek, Just learning – thanks for the great write-up and video! Question: Can I be using both Mode 0 (for the SPI pins) and Mode 7 for a GPIO interrupt on another pin at the same time (the same Python program running)? I was wondering because every so often my code freezes and I am guessing but maybe something gets confused as to which Mode the mux is in??? Thanks so much! Joe G. Papst September 25, 2014 at 10:46 pm - Reply Hello, I want to use the Pins P9_29 and P9_31 as PWM. How do I disable these pins mcasp? Rob Hurd October 4, 2014 at 1:13 am - Reply Thanks for this excellent tutorial Derek. This will really help get me started with the BBB. I have been searching for a few days on how to change the pin MUX etc. Britton Kerin October 9, 2014 at 7:23 pm - Reply Unloading and reloading an overlay doesn’t work. If I make an overlay following your example for a single pin, with a setting of 0x27 (input with pull-down enable), it works right after boot. Same for pull-up (0x37). But if I try to unload the overlay (echo ‘-overlay_number’ &gt;$SLOTS) and load one with the opposite pull setting it doesn’t seem to take: I still get high if it was initially configured with pull-up, or low if initially configured with pull-down. Is there anything in the overlay example itself that might be causing this, or is it just a bug somewhere? Gunasekaran October 24, 2014 at 2:19 pm - Reply Hi Molloy, I am using BBB with angstrom linux (Kernel 3.18.13)..I am following your instruction for gpio. I am not able to make it work.. I am getting the following error when i am echo-ing DM-GPIO-TEST to /sys/devices/bone_capemgr.9/slots.Any help? error: sh: echo: write error: No such file or directory But slots file is present and i could read it.. Ken October 28, 2014 at 8:01 pm - Reply Am I correct in assuming that all of the IO performed using the techniques explained here are using ‘polled’ techniques ‘behind-the-scenes’? Or is the kernel using interrupt service routines to drive IO? Rick Mann December 25, 2014 at 12:22 pm - Reply Hi Derek, thank you very much for these tutorials, and the book (which I just bought, hoping it would help with my issue). No matter what I do, I can’t get the GPIO inputs value to reflect the actual state of the pin. I tried one output and I couldn’t get the pin’s voltage to change despite changing the value. I’m running Debian 7/3.8.13-bone68. Everything I can think to check matches what you have on this page and in the book. Even pins that are configured by default as input with pullup enabled report a value 0 (but checking with the DMM, the pin is near 3.3 V). I’ve tried pins on both headers. FWIW, I’ve been able to use the ADC for some time. Any idea on what I can check? Thank you! Rick Mann December 26, 2014 at 12:39 am - Reply Ah, I figured it out. I misunderstood all the admonitions that “GPIO number” wasn’t the same as “pin number.” I thought “GPIO Number” was some TI reference, and “pin number” was how Linux referred to the pin. But in fact, Linux (in its infinite wisdom) uses two different labels for a pin, depending on what part of sysfs you’re using. Awesome. Just awesome. To be clear: The “pin number” (e.g. 36 for P8_07) is what’s used in /sys/kernel/debug/pinctrl/44e10800.pinmux/pins. The “GPIO number” is what’s used in /sys/class/gpio/… (e.g. 66 for P8_07). Derek December 26, 2014 at 11:26 pm - Reply Hi Rick, Yes, that issue has caught many people out (including me on my first pass!). I have listed the software reference as $PINS on the P8/P9 header tables. The book should help! — there is a big warning that makes that clear in Chapter 6 :-). Thanks for your support, Derek. Dave December 30, 2015 at 9:08 pm - Reply Hi everybody, Thank to your explanation is now clear to me too. But there is another problem in this site, which I cannot understand and I think it is a typo made by Mr. Molloy. I refer to the fact, that at the very beginning of the page the used gpio is the following one: Pin 12 on the P9 Header) GPIO1_28 – The LED = 1 x 32 + 28 = GPIO 60 (Offset 0x078, P9-12 GPIO1_28) #88 Mr. Molloy calculates the GPIO corresponding pin and then writes the offset for that port. That’s ok, but lately in this page he wrote: Page 65 of the SRM has the table that you need to map the GPIO to the Offset! GPIO1_28 maps to P9-12 with an offset of 160 (pin 88 44e10960) Despite of the fact that I couldn’t find any help at that page (but I found the checklist on page 104 of the SRM very helplful), the real problem is that I cannot understand why the GPIO1_28 has now 2 different offsets. The former is 0x078 and latter is 160 (0x0A0 in HEX). Which is the real offset of that pin? Is a mistake in this website or there is another explanation? Anyway this tutorial is really helpful and very interesting to understand the beaglebone. Regards and happy new year. Daniel January 12, 2015 at 11:25 am - Reply Hello Derek, Thaks for the tutorial. After following it I was able to change the state of GPIO pins in userspace by exporting them. However I am writing a kernel module to write values to the GPIO pins however that does not work. My approach was to follow your procedure to configure the mux to set the corresponding pins to GPIO output. Then set the bits within my kernel module using GPIO registers siva February 17, 2015 at 6:54 am - Reply Hi Derek I am using custom board based on AM335x and sdk-7 not beagle bone black board, we are not using HDMI controller and we direct interface leds to lcd_data0* to lcd_data7* pins(GPIO2_6,7,8,9,10,11,12) we took reference as bbb user leds. 1. In am33xx_pinmux: pinmux@44e10800 compatible = “gpio-leds”; 0xa0 (PIN_OUTPUT_PULLUP | MUX_MODE7) /* lcd_data0.gpio2_6 D0/Away_LED shan */ 0xa4, 0xa8,0xac… offset add etc 2. in leds node led@6 { label = “Away_led”; gpios = ; linux,default-trigger = “heartbeat”; default-state = “on”; }; 3. shell prompt root@am335x-evm:/# cd sys/class/leds/ Away_led/ beaglebone:green:usr2/ beaglebone:green:heartbeat/ beaglebone:green:usr3/ beaglebone:green:mmc0/ root@am335x-evm:/# cd sys/class/leds/Away_led root@am335x-evm:/sys/class/leds/Away_led# ls brightness max_brightness subsystem uevent device power trigger root@am335x-evm:/sys/class/leds/Away_led# echo 1 &gt; brightness root@am335x-evm:/sys/class/leds/Away_led# echo 0 &gt; brightness 4. All commands are executed fine but am unable turn on leds here i am checking through sys/class/leds/ attributes like brightness and trigger, please give me any suggestion…… Thanks and Regards……… Dennis Meade April 22, 2015 at 12:06 pm - Reply Hi Derek, I believe there is a broken link under Further Reading. “https://www.kernel.org/doc/Documentation/gpio.txt” needs a “gpio” making it “https://www.kernel.org/doc/Documentation/gpio/gpio.txt” Derek April 22, 2015 at 12:11 pm - Reply Thanks Dennis, I fixed that. Steve Flynn June 10, 2015 at 8:45 pm - Reply Hi Dennis, First off, great book and blog for the BBB, I am just getting started and it has be hugely helpful. Apologies if this is redundant post, but it seems the DTO mechanism for updating the device trees at runtime has been removed from recent kernels (greater than 3.8 I believe). In particular, the /sys/devices/bone_capemgr.9 file is gone. They are apparently working on something new but in the mean time do you have any suggestions? Should I revert back to the “onerous” mechanism of editing DTS directly and recompiling? Thanks for any help, – Steve Dave D June 23, 2015 at 12:28 pm - Reply Hi Derek. Great info, love all your videos and your book. I’ve got this to work as the root user, but how do you get it to work as a non-root user? For instance, the user “debian”. It does not have write access to the /sys/class/gpio directory. I wrote some hack code to get around this using the system() command and sudo, but there must be a proper way. An example of my hack: // setDirection(INPUT): ostringstream theCommand; theCommand &lt;” &lt;path &lt;&lt; &quot;direction\&quot;&quot;; system(theCommand.str().c_str()); Heitor July 22, 2015 at 8:26 pm - Reply Hi, I’m currently using a an ubuntu distribution -&gt; https://rcn-ee.com/rootfs/2015-07-08/flasher/BBB-eMMC-flasher-ubuntu-14.04.2-console-armhf-2015-07-08-2gb.img.xz in my beaglebone black In that version, there’s no folder /sys/devices/bone_capemgr.9, How do i load the dtbo files to configure the pins? Thanks advanced! Vladimir September 8, 2015 at 8:43 pm - Reply Hello! This works, but then i use analog inputs, in /sys/devices/bone_capemgr.*/slots we can see: 11: ff:P-O-L Override Board Name,00A0,Override Manuf,DM-GPIO-Test 12: ff:P-O-L Override Board Name,00A0,Override Manuf,cape-bone-iio But gpio pinmux not changed. Then i turn off cape-bone-iio, pinmux changes propertly. Any things? Flavio November 5, 2015 at 10:09 am - Reply Dear Derek thank you very much for your great tutorials. They are helping me a lot in my project. Nevertheless, I am facing a problem of the cape manager. I have to unload an overlay that was already on my distribution, in order to load a custom overlay. But everytime I try to unload the specific overlay the BBB crashes and after a reboot nothing has changed. Disabling the overlay in the uEnv.txt doesnt help either. Can you help me please? Im very new to this environment.. Mohamed January 12, 2016 at 5:31 pm - Reply Hi Derek First of all many thanks for the very well organized tutorial. I learned a lot. However, I am facing an issue when trying to load the newly created profile, i.e. The command: [prompt$] echo DM-GPIO-Test &gt; $SLOTS says an error did occur: -su: echo: write error: Invalid argument I can’t understand the reason for that and I would be glad if you can help. My configuration seems to be ok. The following commands react correctly. [prompt$] cat $SLOTS 0: PF—- -1 1: PF—- -1 2: PF—- -1 3: PF—- -1 [prompt$] ho BB-ADC &gt; $SLOTS [prompt$] cat $SLOTS 0: PF—- -1 1: PF—- -1 2: PF—- -1 3: PF—- -1 6: P-O-L- 0 Override Board Name,00A0,Override Manuf,BB-ADC [prompt$] uname -a Linux bbone1 4.1.12-ti-r29 #1 SMP PREEMPT Mon Nov 9 22:46:19 UTC 2015 armv7l GNU/Linux In advance many thanks for your help. Alban February 28, 2016 at 5:35 pm - Reply Hi, I just wanted to say “thank you” for these great tutorials. I have made an “arcade-in-a-stick” out of a Beaglebone black, and honestly I don’t know how I would have succeeded to code the controller without your great articles (this specific one was my Bible :-) ). I have been documenting my project on a Blogger page, and I have just added links to your work. Thanks *a lot*. Derek February 29, 2016 at 12:48 am - Reply Thanks Alban, great project and I love the final version — very professional! Wadi Ben Rhouma March 2, 2016 at 10:53 am - Reply hi, i’m working on a project using the BBB , and i want to controle the BBB GPIO using NetBeans, it didn’t work , can u help in this issue please best regards Clark March 27, 2016 at 4:58 pm - Reply Hi Derek! Thank you so much for the video! Very helpful and excellently done. Our project is integrating a Cirrus m5102 (SoC 6 channel ADC/sound) with the BBB. best Clark Ernesto May 10, 2016 at 8:56 am - Reply What I have to do with a BeagleBoard xM? Gaurav Roy June 9, 2016 at 5:14 am - Reply Hi derek, Thank you so much for these tutorials. They are a life saver. I dont know if this post is related to this topic or not but I am having some trouble connecting a flight controller to the BBB. I am trying to connect the KK Mini flight controller which takes in 4 PWM signals at 5 volts. I need to basically output 4 PWMs from the BBB at 3.3 V to the flight controller at 5 V. I have used a logic converter circuit using 4 N MOSFETs. The trouble is that these have damaged one BBB and I dont want to repeat that again. I think the problem is when the BBB is switched off these four wires going to the logic converter circuit are at 3.3V by default and this voltage going back to the BBB is destroying the board as it is mentioned in multiple places in the SRM that we should never give any voltage to the GPIO pins when the BBB is powered down. How do you suggest that I connect these circuits so that they are always powered on after the BBB finishes booting up and powered down before it switches off. http://www.hobbytronics.co.uk/image/data/tutorial/mosfet_level_converter.jpg This is the circuit that I have implemented. The low side is connected to the BBB and the high side is connected to inputs on the flight controller. Another thing I have tried is to give the +3.3V source from one of the GPIO(P9_23) instead of the 3V3 rail on the BBB so that I can control switching on and off the low side before the signal wires go high or low but this doesn’t seem to work as it doesn’t change the output signal when I change the input signal. But when I connect the voltage source to 3V3 it works. Could you suggest me a better option that I can use universally wherever I need to convert 3.3V to 5V for my signals(including the PWM). Also I have discussed this question in further detail on stackexchange. http://electronics.stackexchange.com/questions/239803/connecting-the-beaglebone-black-to-the-kk-mini-flight-controller/239807?noredirect=1#comment523325_239807 Please consider giving me some advice. It would greatly benefit the project. Thanks, Roy Leave A Comment Cancel reply The &quot;monster&quot; image that is associated with your comment is auto-generated -- it makes it easier to follow the conversation threads. If you wish to replace this image with a less (or perhaps more) monstrous version, add an image at Gravatar.com against the e-mail address that you use to submit your comment. Your image will henceforth be used on most WordPress sites. Please note that I will remove any messages that contain blatant advertisement or that refer to illegal software, content etc. I may tidy up some messages if they contain code dumps etc. E-mail addresses are used only to notify you of any responses, and to authenticate your future comments on this website -- they are not made public nor used for any other purpose. See the Privacy and Cookie Policy for a full description. I manually approve all new posts in order to keep the website spam free, but once your post is approved, all future posts should be automatically approved. Please let me know if your messages do not appear. I really appreciate it when you answer the questions of others on the page, as it is difficult for me to do so and continue to produce new content. Thanks for your understanding, Derek. Current ye@r * Leave this field empty My new book on the BeagleBone. See: www.exploringbeaglebone.com for further information. Buy on Amazon: (USA) (Canada) (Brazil) (Mexico) (UK) (Germany) (France) (Italy) (Spain) (China) (India) (Japan) My Recommended Products: Exploring BeagleBone: Tools and T… Derek Molloy (Paperback - Dec 31, 20… $22.36 Exploring Arduino: Tools and Techn… Jeremy Blum (Paperback - Jul 22, 2013) $21.08 Logitech HD Pro Webcam C920, 10… Logitech $67.99 Beagleboard (BeagleBone Rev C) Beagleboard $56.75 Practical Electronics for Inventors… Paul Scherz, Simon Monk (Paperback - … $12.96 Development Boards &amp; Kits - AVR … Arduino $23.98 Amazon.com Privacy Tags Analog Discovery angstrom avconv beaglebone beaglebone black bitbake build building c++ C920 connman cpu curl device driver distribution easydriver embedded embedded Linux ffmpeg flash Flip-Flop git gpio https Java kernel LED LEDs linux LKM Logic Analyzer makefile module nmap opencv RTP source stepper motor sysfs Tutorial UDP Video VLC Wordpress x264 Categories Analog Beaglebone Blog Digital Electronics Embedded Systems General Linux Main Blog Raspberry PI Tools Uncategorized Recent Posts Writing a Linux Kernel Module — Part 3: Buttons and LEDs Writing a Linux Kernel Module — Part 2: A Character Device Writing a Linux Kernel Module — Part 1: Introduction Introduction to CMake by Example CGI using C++ on the BeagleBone (Ggicc) Archives April 2015 March 2015 June 2014 January 2014 December 2013 November 2013 October 2013 July 2013 June 2013 May 2013 April 2013 About: This site brings together all of the video content on the Derek Molloy YouTube channel and structures it so that you can follow the videos as lessons. It also integrates associated documentation, datasheets and tools to allow you to get the best from the video series. It also has a blog to allow me to post new videos, articles and useful information that may not be in video form Recent Comments Gaurav Roy on GPIOs on the Beaglebone Black using the Device Tree Overlays Samuel Chase on Introduction to CMake by Example Michal on Resize a VirtualBox guest Linux VDI Disk under Windows Host essid8moez on Writing a new Image to the Beaglebone Black Derek Molloy YouTube Recent Tweets Just supported @krtkl_inc Xilinx Zynq-based (ARM Cortex-A9 + FPGA) #Snickerdoodle on Crowd Supply https://t.co/mXTpTYLjbX A great product! 3 weeks ago @guydillen Thanks. I updated to the foundation page, but Dart support really hasn't grown over the past year. Hard to know where it's going! 3 months ago Copyright 2015- Derek Molloy | All Rights Reserved | Powered by WordPress | DCU Homepage | Privacy and Cookie Policy Arduino Arduino Arduino Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620124122#index"
                   NS1:content=" Git --distributed-even-if-your-workflow-isnt About Documentation Reference Book Videos External Links Blog Downloads GUI Clients Logos Community Download this book in PDF, mobi, or ePub form for free. This book is translated into Deutsch, 简体中文, 正體中文, Français, 日本語, Nederlands, Русский, 한국어, Português (Brasil) and Čeština. Partial translations available in Arabic, Español, Indonesian, Italiano, Suomi, Македонски, Polski and Türkçe. Translations started for Azərbaycan dili, Беларуская, Català, Esperanto, Español (Nicaragua), فارسی, हिन्दी, Magyar, Norwegian Bokmål, Română, Српски, ภาษาไทย, Tiếng Việt, Українська and Ўзбекча. The source of this book is hosted on GitHub. Patches, suggestions and comments are welcome. Related Material git-add in Reference git-reset in Reference git-status in Reference git-commit in Reference git-checkout in Reference Chapters ▾ 1. Getting Started 1.1 About Version Control 1.2 A Short History of Git 1.3 Git Basics 1.4 The Command Line 1.5 Installing Git 1.6 First-Time Git Setup 1.7 Getting Help 1.8 Summary 2. Git Basics 2.1 Getting a Git Repository 2.2 Recording Changes to the Repository 2.3 Viewing the Commit History 2.4 Undoing Things 2.5 Working with Remotes 2.6 Tagging 2.7 Git Aliases 2.8 Summary 3. Git Branching 3.1 Branches in a Nutshell 3.2 Basic Branching and Merging 3.3 Branch Management 3.4 Branching Workflows 3.5 Remote Branches 3.6 Rebasing 3.7 Summary 4. Git on the Server 4.1 The Protocols 4.2 Getting Git on a Server 4.3 Generating Your SSH Public Key 4.4 Setting Up the Server 4.5 Git Daemon 4.6 Smart HTTP 4.7 GitWeb 4.8 GitLab 4.9 Third Party Hosted Options 4.10 Summary 5. Distributed Git 5.1 Distributed Workflows 5.2 Contributing to a Project 5.3 Maintaining a Project 5.4 Summary 6. GitHub 6.1 Account Setup and Configuration 6.2 Contributing to a Project 6.3 Maintaining a Project 6.4 Managing an organization 6.5 Scripting GitHub 6.6 Summary 7. Git Tools 7.1 Revision Selection 7.2 Interactive Staging 7.3 Stashing and Cleaning 7.4 Signing Your Work 7.5 Searching 7.6 Rewriting History 7.7 Reset Demystified 7.8 Advanced Merging 7.9 Rerere 7.10 Debugging with Git 7.11 Submodules 7.12 Bundling 7.13 Replace 7.14 Credential Storage 7.15 Summary 8. Customizing Git 8.1 Git Configuration 8.2 Git Attributes 8.3 Git Hooks 8.4 An Example Git-Enforced Policy 8.5 Summary 9. Git and Other Systems 9.1 Git as a Client 9.2 Migrating to Git 9.3 Summary 10. Git Internals 10.1 Plumbing and Porcelain 10.2 Git Objects 10.3 Git References 10.4 Packfiles 10.5 The Refspec 10.6 Transfer Protocols 10.7 Maintenance and Data Recovery 10.8 Environment Variables 10.9 Summary A1. Git in Other Environments A1.1 Graphical Interfaces A1.2 Git in Visual Studio A1.3 Git in Eclipse A1.4 Git in Bash A1.5 Git in Zsh A1.6 Git in Powershell A1.7 Summary A2. Embedding Git in your Applications A2.1 Command-line Git A2.2 Libgit2 A2.3 JGit A3. Git Commands A3.1 Setup and Config A3.2 Getting and Creating Projects A3.3 Basic Snapshotting A3.4 Branching and Merging A3.5 Sharing and Updating Projects A3.6 Inspection and Comparison A3.7 Debugging A3.8 Patching A3.9 Email A3.10 External Systems A3.11 Administration A3.12 Plumbing Commands 2nd Edition 2.4 Git Basics - Undoing Things Undoing Things At any stage, you may want to undo something. Here, we’ll review a few basic tools for undoing changes that you’ve made. Be careful, because you can’t always undo some of these undos. This is one of the few areas in Git where you may lose some work if you do it wrong. One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to try that commit again, you can run commit with the --amend option: $ git commit --amend This command takes your staging area and uses it for the commit. If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message. The same commit-message editor fires up, but it already contains the message of your previous commit. You can edit the message the same as always, but it overwrites your previous commit. As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this: $ git commit -m 'initial commit' $ git add forgotten_file $ git commit --amend You end up with a single commit – the second commit replaces the results of the first. Unstaging a Staged File The next two sections demonstrate how to wrangle your staging area and working directory changes. The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them. For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both. How can you unstage one of the two? The git status command reminds you: $ git add * $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) renamed: README.md -&gt; README modified: CONTRIBUTING.md Right below the “Changes to be committed” text, it says use git reset HEAD &lt;file&gt;... to unstage. So, let’s use that advice to unstage the CONTRIBUTING.md file: $ git reset HEAD CONTRIBUTING.md Unstaged changes after reset: M CONTRIBUTING.md $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) renamed: README.md -&gt; README Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: CONTRIBUTING.md The command is a bit strange, but it works. The CONTRIBUTING.md file is modified but once again unstaged. Note While git reset can be a dangerous command if you call it with --hard, in this instance the file in your working directory is not touched. Calling git reset without an option is not dangerous - it only touches your staging area. For now this magic invocation is all you need to know about the git reset command. We’ll go into much more detail about what reset does and how to master it to do really interesting things in Reset Demystified. Unmodifying a Modified File What if you realize that you don’t want to keep your changes to the CONTRIBUTING.md file? How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)? Luckily, git status tells you how to do that, too. In the last example output, the unstaged area looks like this: Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: CONTRIBUTING.md It tells you pretty explicitly how to discard the changes you’ve made. Let’s do what it says: $ git checkout -- CONTRIBUTING.md $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) renamed: README.md -&gt; README You can see that the changes have been reverted. Important It’s important to understand that git checkout -- &lt;file&gt; is a dangerous command. Any changes you made to that file are gone – Git just copied another file over it. Don’t ever use this command unless you absolutely know that you don’t want the file. If you would like to keep the changes you’ve made to that file but still need to get it out of the way for now, we’ll go over stashing and branching in Git Branching; these are generally better ways to go. Remember, anything that is committed in Git can almost always be recovered. Even commits that were on branches that were deleted or commits that were overwritten with an --amend commit can be recovered (see Data Recovery for data recovery). However, anything you lose that was never committed is likely never to be seen again. prev | next This open sourced site is hosted on GitHub. Patches, suggestions and comments are welcome. Git is a member of Software Freedom Conservancy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160617103143#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 20. Internet Protocols and Support » 20.7. httplib — HTTP protocol client¶ Note The httplib module has been renamed to http.client in Python 3. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. Source code: Lib/httplib.py This module defines classes which implement the client side of the HTTP and HTTPS protocols. It is normally not used directly — the module urllib uses it to handle URLs that use HTTP and HTTPS. See also The Requests package is recommended for a higher-level HTTP client interface. Note HTTPS support is only available if the socket module was compiled with SSL support. Note The public interface for this module changed substantially in Python 2.0. The HTTP class is retained only for backward compatibility with 1.5.2. It should not be used in new code. Refer to the online docstrings for usage. The module provides the following classes: class httplib.HTTPConnection(host[, port[, strict[, timeout[, source_address]]]])¶ An HTTPConnection instance represents one transaction with an HTTP server. It should be instantiated passing it a host and optional port number. If no port number is passed, the port is extracted from the host string if it has the form host:port, else the default HTTP port (80) is used. When True, the optional parameter strict (which defaults to a false value) causes BadStatusLine to be raised if the status line can’t be parsed as a valid HTTP/1.0 or 1.1 status line. If the optional timeout parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional source_address parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. For example, the following calls all create instances that connect to the server at the same host and port: &gt;&gt;&gt; &gt;&gt;&gt; h1 = httplib.HTTPConnection('www.cwi.nl') &gt;&gt;&gt; h2 = httplib.HTTPConnection('www.cwi.nl:80') &gt;&gt;&gt; h3 = httplib.HTTPConnection('www.cwi.nl', 80) &gt;&gt;&gt; h3 = httplib.HTTPConnection('www.cwi.nl', 80, timeout=10) New in version 2.0. Changed in version 2.6: timeout was added. Changed in version 2.7: source_address was added. class httplib.HTTPSConnection(host[, port[, key_file[, cert_file[, strict[, timeout[, source_address[, context]]]]]]])¶ A subclass of HTTPConnection that uses SSL for communication with secure servers. Default port is 443. If context is specified, it must be a ssl.SSLContext instance describing the various SSL options. key_file and cert_file are deprecated, please use ssl.SSLContext.load_cert_chain() instead, or let ssl.create_default_context() select the system’s trusted CA certificates for you. Please read Security considerations for more information on best practices. New in version 2.0. Changed in version 2.6: timeout was added. Changed in version 2.7: source_address was added. Changed in version 2.7.9: context was added. This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior ssl._create_unverified_context() can be passed to the context parameter. class httplib.HTTPResponse(sock, debuglevel=0, strict=0)¶ Class whose instances are returned upon successful connection. Not instantiated directly by user. New in version 2.0. class httplib.HTTPMessage¶ An HTTPMessage instance is used to hold the headers from an HTTP response. It is implemented using the mimetools.Message class and provides utility functions to deal with HTTP Headers. It is not directly instantiated by the users. The following exceptions are raised as appropriate: exception httplib.HTTPException¶ The base class of the other exceptions in this module. It is a subclass of Exception. New in version 2.0. exception httplib.NotConnected¶ A subclass of HTTPException. New in version 2.0. exception httplib.InvalidURL¶ A subclass of HTTPException, raised if a port is given and is either non-numeric or empty. New in version 2.3. exception httplib.UnknownProtocol¶ A subclass of HTTPException. New in version 2.0. exception httplib.UnknownTransferEncoding¶ A subclass of HTTPException. New in version 2.0. exception httplib.UnimplementedFileMode¶ A subclass of HTTPException. New in version 2.0. exception httplib.IncompleteRead¶ A subclass of HTTPException. New in version 2.0. exception httplib.ImproperConnectionState¶ A subclass of HTTPException. New in version 2.0. exception httplib.CannotSendRequest¶ A subclass of ImproperConnectionState. New in version 2.0. exception httplib.CannotSendHeader¶ A subclass of ImproperConnectionState. New in version 2.0. exception httplib.ResponseNotReady¶ A subclass of ImproperConnectionState. New in version 2.0. exception httplib.BadStatusLine¶ A subclass of HTTPException. Raised if a server responds with a HTTP status code that we don’t understand. New in version 2.0. The constants defined in this module are: httplib.HTTP_PORT¶ The default port for the HTTP protocol (always 80). httplib.HTTPS_PORT¶ The default port for the HTTPS protocol (always 443). and also the following constants for integer status codes: Constant Value Definition CONTINUE 100 HTTP/1.1, RFC 2616, Section 10.1.1 SWITCHING_PROTOCOLS 101 HTTP/1.1, RFC 2616, Section 10.1.2 PROCESSING 102 WEBDAV, RFC 2518, Section 10.1 OK 200 HTTP/1.1, RFC 2616, Section 10.2.1 CREATED 201 HTTP/1.1, RFC 2616, Section 10.2.2 ACCEPTED 202 HTTP/1.1, RFC 2616, Section 10.2.3 NON_AUTHORITATIVE_INFORMATION 203 HTTP/1.1, RFC 2616, Section 10.2.4 NO_CONTENT 204 HTTP/1.1, RFC 2616, Section 10.2.5 RESET_CONTENT 205 HTTP/1.1, RFC 2616, Section 10.2.6 PARTIAL_CONTENT 206 HTTP/1.1, RFC 2616, Section 10.2.7 MULTI_STATUS 207 WEBDAV RFC 2518, Section 10.2 IM_USED 226 Delta encoding in HTTP, RFC 3229, Section 10.4.1 MULTIPLE_CHOICES 300 HTTP/1.1, RFC 2616, Section 10.3.1 MOVED_PERMANENTLY 301 HTTP/1.1, RFC 2616, Section 10.3.2 FOUND 302 HTTP/1.1, RFC 2616, Section 10.3.3 SEE_OTHER 303 HTTP/1.1, RFC 2616, Section 10.3.4 NOT_MODIFIED 304 HTTP/1.1, RFC 2616, Section 10.3.5 USE_PROXY 305 HTTP/1.1, RFC 2616, Section 10.3.6 TEMPORARY_REDIRECT 307 HTTP/1.1, RFC 2616, Section 10.3.8 BAD_REQUEST 400 HTTP/1.1, RFC 2616, Section 10.4.1 UNAUTHORIZED 401 HTTP/1.1, RFC 2616, Section 10.4.2 PAYMENT_REQUIRED 402 HTTP/1.1, RFC 2616, Section 10.4.3 FORBIDDEN 403 HTTP/1.1, RFC 2616, Section 10.4.4 NOT_FOUND 404 HTTP/1.1, RFC 2616, Section 10.4.5 METHOD_NOT_ALLOWED 405 HTTP/1.1, RFC 2616, Section 10.4.6 NOT_ACCEPTABLE 406 HTTP/1.1, RFC 2616, Section 10.4.7 PROXY_AUTHENTICATION_REQUIRED 407 HTTP/1.1, RFC 2616, Section 10.4.8 REQUEST_TIMEOUT 408 HTTP/1.1, RFC 2616, Section 10.4.9 CONFLICT 409 HTTP/1.1, RFC 2616, Section 10.4.10 GONE 410 HTTP/1.1, RFC 2616, Section 10.4.11 LENGTH_REQUIRED 411 HTTP/1.1, RFC 2616, Section 10.4.12 PRECONDITION_FAILED 412 HTTP/1.1, RFC 2616, Section 10.4.13 REQUEST_ENTITY_TOO_LARGE 413 HTTP/1.1, RFC 2616, Section 10.4.14 REQUEST_URI_TOO_LONG 414 HTTP/1.1, RFC 2616, Section 10.4.15 UNSUPPORTED_MEDIA_TYPE 415 HTTP/1.1, RFC 2616, Section 10.4.16 REQUESTED_RANGE_NOT_SATISFIABLE 416 HTTP/1.1, RFC 2616, Section 10.4.17 EXPECTATION_FAILED 417 HTTP/1.1, RFC 2616, Section 10.4.18 UNPROCESSABLE_ENTITY 422 WEBDAV, RFC 2518, Section 10.3 LOCKED 423 WEBDAV RFC 2518, Section 10.4 FAILED_DEPENDENCY 424 WEBDAV, RFC 2518, Section 10.5 UPGRADE_REQUIRED 426 HTTP Upgrade to TLS, RFC 2817, Section 6 INTERNAL_SERVER_ERROR 500 HTTP/1.1, RFC 2616, Section 10.5.1 NOT_IMPLEMENTED 501 HTTP/1.1, RFC 2616, Section 10.5.2 BAD_GATEWAY 502 HTTP/1.1 RFC 2616, Section 10.5.3 SERVICE_UNAVAILABLE 503 HTTP/1.1, RFC 2616, Section 10.5.4 GATEWAY_TIMEOUT 504 HTTP/1.1 RFC 2616, Section 10.5.5 HTTP_VERSION_NOT_SUPPORTED 505 HTTP/1.1, RFC 2616, Section 10.5.6 INSUFFICIENT_STORAGE 507 WEBDAV, RFC 2518, Section 10.6 NOT_EXTENDED 510 An HTTP Extension Framework, RFC 2774, Section 7 httplib.responses¶ This dictionary maps the HTTP 1.1 status codes to the W3C names. Example: httplib.responses[httplib.NOT_FOUND] is 'Not Found'. New in version 2.5. 20.7.1. HTTPConnection Objects¶ HTTPConnection instances have the following methods: HTTPConnection.request(method, url[, body[, headers]])¶ This will send a request to the server using the HTTP request method method and the selector url. If the body argument is present, it should be a string of data to send after the headers are finished. Alternatively, it may be an open file object, in which case the contents of the file is sent; this file object should support fileno() and read() methods. The headers argument should be a mapping of extra HTTP headers to send with the request. If one is not provided in headers, a Content-Length header is added automatically for all methods if the length of the body can be determined, either from the length of the str representation, or from the reported size of the file on disk. If body is None the header is not set except for methods that expect a body (PUT, POST, and PATCH) in which case it is set to 0. Changed in version 2.6: body can be a file object. HTTPConnection.getresponse()¶ Should be called after a request is sent to get the response from the server. Returns an HTTPResponse instance. Note Note that you must have read the whole response before you can send a new request to the server. HTTPConnection.set_debuglevel(level)¶ Set the debugging level (the amount of debugging output printed). The default debug level is 0, meaning no debugging output is printed. HTTPConnection.set_tunnel(host, port=None, headers=None)¶ Set the host and the port for HTTP Connect Tunnelling. Normally used when it is required to do HTTPS Conection through a proxy server. The headers argument should be a mapping of extra HTTP headers to send with the CONNECT request. New in version 2.7. HTTPConnection.connect()¶ Connect to the server specified when the object was created. HTTPConnection.close()¶ Close the connection to the server. As an alternative to using the request() method described above, you can also send your request step by step, by using the four functions below. HTTPConnection.putrequest(request, selector[, skip_host[, skip_accept_encoding]])¶ This should be the first call after the connection to the server has been made. It sends a line to the server consisting of the request string, the selector string, and the HTTP version (HTTP/1.1). To disable automatic sending of Host: or Accept-Encoding: headers (for example to accept additional content encodings), specify skip_host or skip_accept_encoding with non-False values. Changed in version 2.4: skip_accept_encoding argument added. HTTPConnection.putheader(header, argument[, ...])¶ Send an RFC 822-style header to the server. It sends a line to the server consisting of the header, a colon and a space, and the first argument. If more arguments are given, continuation lines are sent, each consisting of a tab and an argument. HTTPConnection.endheaders(message_body=None)¶ Send a blank line to the server, signalling the end of the headers. The optional message_body argument can be used to pass a message body associated with the request. The message body will be sent in the same packet as the message headers if it is string, otherwise it is sent in a separate packet. Changed in version 2.7: message_body was added. HTTPConnection.send(data)¶ Send data to the server. This should be used directly only after the endheaders() method has been called and before getresponse() is called. 20.7.2. HTTPResponse Objects¶ HTTPResponse instances have the following methods and attributes: HTTPResponse.read([amt])¶ Reads and returns the response body, or up to the next amt bytes. HTTPResponse.getheader(name[, default])¶ Get the contents of the header name, or default if there is no matching header. HTTPResponse.getheaders()¶ Return a list of (header, value) tuples. New in version 2.4. HTTPResponse.fileno()¶ Returns the fileno of the underlying socket. HTTPResponse.msg¶ A mimetools.Message instance containing the response headers. HTTPResponse.version¶ HTTP protocol version used by server. 10 for HTTP/1.0, 11 for HTTP/1.1. HTTPResponse.status¶ Status code returned by server. HTTPResponse.reason¶ Reason phrase returned by server. 20.7.3. Examples¶ Here is an example session that uses the GET method: &gt;&gt;&gt; &gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPSConnection(&quot;www.python.org&quot;) &gt;&gt;&gt; conn.request(&quot;GET&quot;, &quot;/&quot;) &gt;&gt;&gt; r1 = conn.getresponse() &gt;&gt;&gt; print r1.status, r1.reason 200 OK &gt;&gt;&gt; data1 = r1.read() &gt;&gt;&gt; conn.request(&quot;GET&quot;, &quot;/&quot;) &gt;&gt;&gt; r2 = conn.getresponse() &gt;&gt;&gt; print r2.status, r2.reason 404 Not Found &gt;&gt;&gt; data2 = r2.read() &gt;&gt;&gt; conn.close() Here is an example session that uses the HEAD method. Note that the HEAD method never returns any data. &gt;&gt;&gt; &gt;&gt;&gt; import httplib &gt;&gt;&gt; conn = httplib.HTTPSConnection(&quot;www.python.org&quot;) &gt;&gt;&gt; conn.request(&quot;HEAD&quot;,&quot;/&quot;) &gt;&gt;&gt; res = conn.getresponse() &gt;&gt;&gt; print res.status, res.reason 200 OK &gt;&gt;&gt; data = res.read() &gt;&gt;&gt; print len(data) 0 &gt;&gt;&gt; data == '' True Here is an example session that shows how to POST requests: &gt;&gt;&gt; &gt;&gt;&gt; import httplib, urllib &gt;&gt;&gt; params = urllib.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'}) &gt;&gt;&gt; headers = {&quot;Content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, ... &quot;Accept&quot;: &quot;text/plain&quot;} &gt;&gt;&gt; conn = httplib.HTTPConnection(&quot;bugs.python.org&quot;) &gt;&gt;&gt; conn.request(&quot;POST&quot;, &quot;&quot;, params, headers) &gt;&gt;&gt; response = conn.getresponse() &gt;&gt;&gt; print response.status, response.reason 302 Found &gt;&gt;&gt; data = response.read() &gt;&gt;&gt; data 'Redirecting to &lt;a href=&quot;http://bugs.python.org/issue12524&quot;&gt;http://bugs.python.org/issue12524&lt;/a&gt;' &gt;&gt;&gt; conn.close() Client side HTTP PUT requests are very similar to POST requests. The difference lies only the server side where HTTP server will allow resources to be created via PUT request. Here is an example session that shows how to do PUT request using httplib: &gt;&gt;&gt; &gt;&gt;&gt; # This creates an HTTP message &gt;&gt;&gt; # with the content of BODY as the enclosed representation &gt;&gt;&gt; # for the resource http://localhost:8080/foobar ... &gt;&gt;&gt; import httplib &gt;&gt;&gt; BODY = &quot;***filecontents***&quot; &gt;&gt;&gt; conn = httplib.HTTPConnection(&quot;localhost&quot;, 8080) &gt;&gt;&gt; conn.request(&quot;PUT&quot;, &quot;/file&quot;, BODY) &gt;&gt;&gt; response = conn.getresponse() &gt;&gt;&gt; print response.status, response.reason 200, OK Table Of Contents 20.7. httplib — HTTP protocol client 20.7.1. HTTPConnection Objects 20.7.2. HTTPResponse Objects 20.7.3. Examples Previous topic 20.6. urllib2 — extensible library for opening URLs Next topic 20.8. ftplib — FTP protocol client This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 20. Internet Protocols and Support » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 11, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160719211453#index"
                   NS1:content=" LOGIN Lost your password? Connect with: Facebook Twitter Google Logging In SIGN UP Create an Inhabitat account Sign up for weekly newsletter I agree to receive emails from the site. I can withdraw my consent at any time by unsubscribing. Do you live in Canada? Register here. Connect with: Facebook Twitter Google Signing Up LOST PASSWORD Checking for Account instagram twitter facebook pinterest user Log In Sign Up opener News Environment Architecture Design Innovation More About Mission Submit a story Advertise with us Contact Press Legal Privacy Policy Cookie Policy Log In Sign Up How To: Make a Bird Feeder for Small Spaces With Recycled Materials Innovation 05/28/2014 under DIY, Features, Green Materials, Innovation, Recycled Materials by Emily Peckenham 0 Comments by Emily Peckenham View Slideshow If you live in an urban apartment, finding access to outdoor space can often be a challenge. But, as other creative urban gardeners and nature lovers have shown, even the smallest of spaces can be turned in a tiny oasis. If all you have is a fire escape, hang up a few bird feeders and you'll have a flurry of feathered visitors in no time. In this simple how-to, we show you how to create a fun, recycled feeder that you can hang from your fire escape or windowsill. It costs next to nothing and anyone can do it—all you need to do is dig through your recycling bin and follow these 8 easy steps! Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step One: Gather the materials Gather the materials you’ll need to create your recycled bird feeder. We used: A recycled clean plastic peanut-butter jar with a screw-on lid (any size will do) Lid from a large plastic yogurt container Dremel (you can also use a small electric drill or make do with a Swiss Army Knife, nail, or utility knife) Washer or nut Sturdy string or twine Scissors Birdseed Gorilla Glue or similar strong glue Stick (you could use a bamboo skewer or even a long pencil). Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Two: Drill Holes for the String Drill a small hole in the middle of the yogurt lid, the jar and the jar lid. The hole needs only be big enough to fit the string. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Three: Cut Feeding Holes Next, make holes for the birds to feed through. Sketch out 3-4 holes with a marker before you begin cutting – make each hole slightly bigger than a half-dollar. Carefully cut out the holes with a utility knife and discard the plastic pieces you cut out. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Four: Create a perch Using a marker and ruler, mark off two spots exactly opposite from each other slightly below your feeding holes. This is where you will thread through your stick, or feeding perch. Use your drill to make two holes that are sized correctly for the circumference of the stick you are using. How much money can a solar roof save you in [%state%]? Profit from your roof space: find local deals on solar in your area, eliminate your power bill, and join the solar revolution. Calculate My Savings! Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Five: String together your birdfeeder Approximate a length of string that is adequate to pass through your birdfeeder with an additional 6-8 inches for hanging, then double it by folding, and then cut your doubled length of string. Folding your piece of string in half, tie the washer or nut to the bottom. Thread the folded end of your string through your birdfeeder, beginning with the yogurt lid, then go through the jar, and finally pull the string through the jar lid. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Six: Attach Base and Perch Pull the string taut and place the lid on the peanut butter jar. Carefully glue the bottom of the jar to the yogurt lid. Next, thread the perch through the two holes you created and add a dab of the glue to each hole. Let the glue dry for an hour. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Seven: Add food to your birdfeeder Unscrew the lid and add the birdseed of your choice. As you see here, we used storebought birdseed mixed with peanut butter. Since we knew we were going to be hanging the birdfeeder on a fire escape, we used peanut butter to keep birdseed from falling into the shared yard below our window. If you aren’t worried about seeds scattering, you can fill it will plain birdseed and the yogurt lid will catch most of the extra seeds. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Eight: Hang it Up! Screw on the peanut butter jar lid, hang up your new recycled bird feeder, and wait for your new feathered friends to stop by for a snack! We tried hanging our bird feeder in a few different locations: here, outside our window hanging from the fire escape above. We also tested the feeder on the fire escape outside our window. We finally decided on hanging the feeder outside our window so we could see the birds when they come to visit. We used an over-the-door coat hook on the top of our window to hold the feeder. View Comments LEAVE A COMMENT You must be logged in to post a comment. Log In Login Remember Me Lost your password? Connect with: Facebook Twitter Google OR Signup with Inhabitat Sign me up for weekly Inhabitat updates Do you live in Canada? Register here. RECOMMENDED FOR YOU How To Save Money And Energy With The Right Window Treatments For Your Home architecture View Gallery (19) How to Find the Right Window Treatments to... crock-pot yogurt environment View Gallery (8) DIY: Make Your Own Yogurt in a Crock-Pot! DIY Plastic Bottle Bird Feeder design View Gallery (4) DIY: How to Make a Bird Feeder From a Plas... [Solar Roof Saving] Start Slideshow Share Pin Tweet + Design Share Pin Tweet + StartSlideshow &gt; How To: Make a Bird Feeder for Small Spaces With Recycled Mate... Share Pin Tweet Photo 1 of 12 Loading... Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like599 reCAPTCHA Please upgrade to a supported browser to get a reCAPTCHA challenge. Alternatively if you think you are getting this page in error, please check your internet connection and reload. Why is this happening to me? Privacy - Terms reCAPTCHA Please upgrade to a supported browser to get a reCAPTCHA challenge. Alternatively if you think you are getting this page in error, please check your internet connection and reload. Why is this happening to me? Privacy - Terms "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717091544#index"
                   NS1:content=" bannerimage Animated Knots by Grog Follow animatedknots on Twitter TIE KNOTS THE FUN AND EASY WAY Better to know a knot and not need it, than need a knot and not know it. indeximage Home indeximage By Name indeximage Arborist indeximage Basics indeximage Boating indeximage Climbing indeximage Decorative indeximage Fishing indeximage Household indeximage Neckties indeximage Rescue indeximage Rope Care indeximage Scouting indeximage Splicing indeximage Surgical indeximage Various indeximage End Loops indeximage Mid-Loops indeximage Bends indeximage Hitches indeximage Mats indeximage Stoppers indeximage Slide/Grip indeximage Store Braiding a Single Rope Decorative Index Decorative Options Grog's Sliding Splice Turk's Head Fiador Knot Lanyard Knot, Diamond Celtic Knot Mat Masthead Knot Mat Carrick Bend Mat Ocean Plait Mat Wall Knot Double Matthew Walker Wall &amp; Crown Monkey's Fist Cobra Lanyard Knot Crown Sinnet Chain Sinnet Braid Single Rope Three Strand Braid (1) Three Strand Braid (2) French Sinnet One French Sinnet Two Square Sinnet Four Strand #2974 Knot Terminology Knot &amp; Rope Safety Rope Properties Contact About Facebook Fast Medium Slow Loop Normal Mirror Inverted Rotated Animation: Braiding a Single Rope (Decorative)Animation: Braiding a Single Rope Braiding a Single Rope (Decorative) 1 2 3 4 5 6 7 8 9 10 11 12 Braiding a Single Rope Make a loop which is about the length needed for the braid. Pass the end through the loop. Twist the loop to create the next hole for the end to pass through. Repeat as often as required to complete the braid. Braiding a Single Rope Details Uses: Braiding several strands is often learned in childhood as a way of controlling long hair. This animation demonstrates how to make a braid with a single piece of rope. Methods: The animation shows the braid being tied with the rope's end being threaded through the loop. In practice braiding is made in the usual way. The strands are manipulated close against the braid ignoring the fact that the end and the loop are getting tangled. Then after adding several braids, the end is pulled clear of the loop. Disclaimer: Any activity that involves ropes is potentially hazardous. Lives may be at risk - possibly your own. Considerable attention and effort have been made to ensure that these descriptions are accurate. However, many critical factors cannot be controlled, including: the choice of materials; the age, size, and condition of ropes; and the accuracy with which these descriptions have been followed. No responsibility is accepted for incidents arising from the use of this material. Copyright © 2007 - 2016 All Rights Reserved Grog LLC Switch to: Mobile Version Copyright and Trademark Version 6.0 Jan 1, 2016 Get Our Apps adimage adimage adimage Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like Share "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717090025#index"
                   NS1:content=" Home Calligraphers of the world Interviews Videos Inspirational DIY Calligraffiti Sunday , July 3 2016 ABOUT CONTACT LOGIN / REGISTER Inspiring Calligraphy, Calligraphy Letters &amp; LetteringInspiring Calligraphy, Calligraphy Letters &amp; Lettering The best calligraphy, calligraphy styles, calligraphy letters, tattoo lettering,hand lettering and more from all around the world. Home Calligraphers of the world Interviews Videos Inspirational DIY Calligraffiti Breaking News 29 examples of stu Home / Calligraphy Masters / Calligraphy Tutorials / How to make your own parallel &amp; Gothic pens by Wore Vms How to make your own parallel &amp; Gothic pens by Wore Vms Milenist February 28, 2015 Calligraphy Tutorials, DIY, Handmade calligraphy tools, Tutorials 0 Comments 11,318 Views 2.16k Share 0 Tweet 2 Share 302 Pin 0 Share 52 Share 4 Share handmade calligraphy pens tutotrials diyHow to make your own parallel &amp; Gothic pens by Wore Vms As not all people are able to buy or find some commercial calligraphy tools, I’ve decided to share this wonderful tutorial on DIY parallel pen &amp; gothic pen. I found it on Behance by the wonderful artist Wore Vms from Buenos Aires, Argentina. The tutorial is provided both in English &amp; Spanish. I hope it’s useful for you, and you enjoy it 🙂 DIY Parallel calligraphy pen: Necessary materials: -Wooden rod, same width than te pen tip that we want to make. -Offset plate. -Paper masking tape. -Scalpel. -Scissors. -Wooden pin. -Round Nosed Pliers. -Metallic Ruler. -Concrete wall. -Hands (Two). Materiales Necesarios: -Varilla de madera del ancho que queramos hacer la pluma. -Chapa Offset. -Cinta de enmascarar de papel. -Bisturí. -Tijeras. -Broche de madera. -Pinza de puntas redondas. -Regla Metálica. -Pared de cemento. -Manos (dos). Step 1: We cut a long wooden piece out of the stick so we create a comfortable holder. Paso 1: Cortar de la varilla de madera una pieza del largo que creamos cómodo para sostener la pluma mientras escribamos. diy parallel pen tutorial by wore vms Step 2: Scrape one end against the wall until you get two flat sides, to support the two plates that form the tip. Paso 2: Raspar una de las puntas contra la pared hasta lograr dos lados planos, para apoyar las dos chapas que formarán la punta. diy parallel pen_13 There should be some wood on both sides, so that the plates remain separate and thus can be loaded with ink. Entre lado y lado debe quedar un poco de madera, para que las chapas queden separadas y de esta manera se pueda cargar tinta. diy parallel pen_14 Step 3: Mark the plate using the knife and metal ruler. Then fold to separate the metal strip edges and blunt using the same wall. The strip should be more than double of what we believe will measure the tip of our pen. For tips about 1 cm wide and 4 cm long (of which more than half are taped), we cut a strip of 11 cm. Paso 3: Marcar la chapa utilizando el bisturí y la regla metálica. Luego doblar para separar la tira de chapa y desafilar los bordes de la misma utilizando la pared. La tira debe ser de más del doble de lo que creamos que va a medir la punta de nuestra pluma. Para unas puntas de 1 cm de ancho y 4 cm de largo (de los cuales mas de la mitad quedan encintados), yo corté una tira de 11 cm. diy parallel pen_15 Step 4: For each of the faces we did to the rod, we make a notch of about one millimeter in depth, this will keep the plates in place when the pen is assembled. Paso 4: A cada una de las caras que le hicimos a la varilla, le hacemos una muesca de aproximadamente un milímetro de profundidad, esto mantendrá las chapas en su lugar cuando la pluma esté ensamblada. diy parallel pen_16 Step 5: Taking the ends of the sheet, bend in the middle, and then return to open to split it into two. Paso 5: Tomando las puntas de la chapa, la doblamos a la mitad, y luego la volvemos a abrir para partirla en dos. diy parallel pen_17 Step 6: On each sheet we make a slight bend in one end, its doubles will be inserted into the notch we did to the rod. Paso 6: A cada chapa le hacemos un pequeño doblés en una de las puntas, éste doblés irá insertado en la muesca que le hicimos a la varilla. diy parallel pen_01 Step 7: By inserting the bend in the groove, the sheet is pressed against the rod with a flat surface, so that the fold molds to the groove. Paso 7: Insertando el doblés en la muesca, presionamos la chapa con la varilla contra una superficie plana, para que el doblés se amolde a la muesca. diy parallel pen_02 Step 7: We put two plates in their respective notches. Paso 7: Colocamos ambas chapas en sus respectivas muescas. diy parallel pen_03 Step 8: Holding the sheets supported on edge against the table, in position, with folds inserted into the notches of the rod, we made a mark with a scalpel, to know the exact length on which to cut off. Paso 8: Sosteniendo las chapas apoyadas de canto contra la mesa, en su posición, con los dobleces insertados en las muescas de la varilla, realizamos una marca con el bisturí, para saber el largo exacto al que las cortaremos. diy parallel pen_04 The marks should look like this. Así deberían quedar las marcas. diy parallel pen_05 Step 9: Cut the sheets where you did the mark. Paso 9: Cortamos las chapas por donde hicimos la marca.Paso 9: Cortamos las chapas por donde hicimos la marca. diy parallel pen_06 Step 10: We hold both ends in place with a pin and proceed to taping tightly with masking tape. Paso 10: Sostenemos ambas puntas en su posición con un broche y procedemos a encintar firmemente con la cinta de enmascarar. diy parallel pen_07 This should be the pen once taped. Do not worry if the tips are not super-partners, it’s not finished yet. Así debería quedar la pluma una vez encintada. No se preocupen si las puntas no quedan super parejas, todavía no terminamos diy parallel pen_08 Step 11: After we break the clasp, and enter the narrowest point of the same between the tip sheets to keep them separate, we make several cuts with the scalpel. Then we remove the small pieces of triangular plate where we made the cuts, making another cut diagonally *to understand better, look at the final photo*. From there you will download our pen’s ink. When finished, the “teeth” resulting of the pressure with the scalpel, be misaligned, so that they will push the needle nose pliers to make them flat, and will shape both plates, so that their ends stick together after the cuts have been slightly separated. [ad name=”CM”] Paso 11: Desarmamos el broche, e introducimos la punta más angosta del mismo entre las chapas de la punta para mantenerlas separadas, y con el bisturí, realizamos varios cortes. Luego quitamos pequeños pedazos de chapa triangulares donde realizamos los cortes, realizando otro corte en diagonal (para entender mejor, ver última foto). Por aquí descargará la tinta de nuestra pluma. Cuando terminemos, los “dientes” resultantes, por la presión ejercida con el bisturí, quedarán desalineados, por lo que los presionaremos con la pinza de punta para que queden chatos, y también moldearemos ambas chapas para que sus puntas queden pegadas, ya que probablemente luego de los cortes, hayan quedado levemente separadas. diy parallel pen_09Step 12: Now, we will match the ends gently scraping against the wall until both remain the same length, and until we don’t notice roughness on the sheet in which we make cuts, which will be the writing paper. Paso 12: Ahora, emparejaremos las puntas raspándolas suavemente contra la pared hasta que ambas queden del mismo largo, y no notemos asperezas en la chapa en la que no realizamos cortes, que será la que se deslizará sobre el papel al escribir. diy parallel pen_10This should be our finished and ready-to-use pen! We hope you learn and enjoy writing with it. Así es como debería verse nuestra pluma terminada. Espero que les sirva y que disfruten escribiendo con esta pluma. diy parallel pen_11 DIY Gothic calligraphy pen: Required materials: Offset plate Wood stick Masking tape (paper ones) Scissors Scalpel (paper knife) Metallic ruler Hammer A carpeted floor or a soft-steady surface Pink pin Concrete wall Hands (two) Time to read well each step &amp; patience Materiales necesarios: Chapa offset Varilla de madera Cinta de enmascarar (de papel) Tijeras Bisturí (cortapapeles) Regla metálica Martillo Piso con alfombra o alguna superficie blanda y firme Alfiler rosado Pared de cemento Manos (dos) Tiempo para leer bien cada paso y paciencia Step 1: With the scissors, cut a rectangle out of the plate, in a bigger size than the necessary to make the pen. Then, with the ruler’s help and the scalpel, trace two parallel lines, when the space between the lines should be the desired stroke width our pen will have. Paso 1: Con las tijeras, recortar un rectángulo de chapa offset, de un tamaño bastante más grande de lo necesario para hacer la pluma. Luego, con ayuda de una regla y un bisturí, trazar dos líneas paralelas, la separación entre estas líneas será del ancho del trazo que deseemos para nuestra pluma. diy gothic pen_07Step 2: Using both hands in the same position shown in the picture, bend the plate by one of the marks, and then bend to the other side, this way you will get a perfect cut. After that repeat the process with the other mark. Paso 2: Utilizando ambas manos en la posición observada en la fotografía, doblamos la chapa por una de las marcas, y luego para el lado contrario, logrando de esta manera un corte perfecto. Luego repetimos la operación con la otra marca. diy gothic pen_08 Step 3: With the scalpel, or by gently rubbing against a concrete wall, we blunt the plate edges. This will prevent stupid people like me from being cut. Paso 3: Con la ayuda del bisturí, o frotando suavemente contra una pared de cemento, desafilamos los bordes de la chapa. Esto evitará que boludos como yo se corten. diy gothic pen_09Step 4: We will do a cut in one of the extremes of the wood stick, it will be about 2-3 centimeters deep. This will be the pen’s body. The pictured stick looks like that because it belonged to an older pen that was broken, so its dyed with ink and sticky, due to earlier masking tape used on it. Paso 4: A la varilla de madera le haremos un corte en una de sus puntas, de unos dos o tres centímetros de profundidad. Este será el cuerpo de la pluma.La varilla de la foto se vé así por que era de una pluma anterior que se rompió, por lo tanto está teñida con tinta y con pegotes de la cinta de enmascarar que tenía anteriormente. diy gothic pen_10Step 5: We take the plate and put it in the cut we did in the wooden stick, and we do a little scratch, approximately two centimeters away form the stick’s end. The place where the mark is placed will be the pen’s nib end, and the scratch, later will indicate where to bend the plate and make the holes to it. Paso 5: Tomamos la tira de chapa e insertamos una de sus puntas en el corte realizado en la punta de la varilla de madera, y dejando unos dos centímetros, aproximadamente, raspamos suavemente con el bisturí. El lugar donde está la marca será la punta de la pluma, e indicará por donde debemos doblar mas tarde la chapa y donde perforarla. diy gothic pen_11Step 6: Using the pink pin and the hammer, we will make some holes on the plate. It’s very important to do it over a soft surface, so the pin can pierce the plate and go across it. It’s also very important to be very precise and make the holes perfectly aligned. Paso 6: Con la ayuda de un alfiler rosado y un martillo (si algún hombre tiene problemas con los alfileres rosados pueden usar uno celeste, así se sienten mas machitos), practicaremos unas perforaciones. Es importante hacerlo sobre una superficie blanda para que el alfiler pueda pasar de lado a lado. También es muy importante ser prolijo y que las perforaciones queden perfectamente alineadas. diy gothic pen_01Step 7: When the pin gets through the plate, it will raise sharp edges around the holes. Gently rub them against the wall, and then turn and rub the opposite side, because when you rub it the first time, the edges can turn to the other side instead of detaching. After doing this, use your fingertip to check there’s no edges left. If there is something, repeat the operation. Paso 7: Al pasar el alfiler, del lado inferior de la chapa las perforaciones tienen que haber quedado con sus bordes levantados. Frótenlos suavemente contra la pared, y luego froten el lado opuesto, por que cuando froten la primera vez puede que parte de los bordes pasen hacia el otro lado, en vez de desprenderse. Pasamos un dedo y comprobamos que las perforaciones no tengan filo ni bordes sobresalientes para ningún lado. Si tuvieran alguno, repetir la operación. diy gothic pen_02Step 8: Now, while being very careful, bend the plate using your hands, and make the holes match the edge of the nib. The holes will drain the ink from the nib to the paper. Depending on the kind of ink you use, there can be more or less holes, you will have to make some experiments to find out how many holes you need. To my homemade ink (my brand is Write 24-7), I make 4 holes in a 1cm wide nib. The plate must be bent but not too much, if you press it too hard it will split in two and you will have to start again. With the plate bent, introduce it in the stick, and cut the plate surplus. Paso 8: Doblamos la chapa, con mucho cuidado y usando las manos, por la línea de perforaciones, haciendo que éstas queden justo en la punta de la pluma, por allí se producirá la descarga de tinta. Dependiendo del tipo de tinta que usen, diferente cantidad de perforaciones darán diferentes resultados, deberán experimentar para saber cuántas perforaciones son las ideales para una descarga apropiada. Para la tinta Write 24-7 yo utilizo 4 perforaciones para una pluma de 1 cm. La chapa debe quedar doblada pero no del todo, caso contrario la chapa se cortará por el doblés y habrá que comenzar nuevamente. Una vez doblada, introducirla en la varilla de madera, y cortar el sobrante de chapa. diy gothic pen_03Step 9: Now wrap the pen and the plate toghether with masking tape. Put several rounds of tape around the nib, this will hold your nib tight, so don’t spare tape here.. Paso 9: Envolvemos el extremo de la varilla que sostiene la chapa con varias vueltas de cinta de pintor, esto le dará firmeza a la punta, así que no escatimen en cinta. diy gothic pen_04The result should look like this: El resultado debería verse similar a esto: diy gothic pen_05Step 10: Test the pen, and if it works fine, enjoy it. If not, blunt the tip and test it, keep doing it until it works. If it gets broken before achieving a good result, make the pen again. Sometimes it just won’t work correctly, but the good news is the time it takes to do the entire process is about 15 minutes or less. I hope this will be helpful, greetings! Paso 10: Probar la pluma, y si funciona, a disfrutar, si no, a desafilar la punta, y si se rompe, a hacerla nuevamente, hasta yo que la sé hacer, muchas veces y sin razón aparente, fabrico alguna pluma que no funciona como esperaba. Lo único bueno es que el proceso entero lleva unos 15 minutos o menos. Espero les sirva, saludos a todos! diy gothic pen_06Follow Wore Vms works on:https://www.facebook.com/originalwore https://instagram.com/originalwore Hope you enjoyed this tutorials as much as I did when I found it. Feel free to drop a comment, send us a picture of how your pens came out. If you have any other calligraphy tutorial that you think could be helpful, you’re most welcome to send it to us at info@calligraphymasters.com 2.16k Share 0 Tweet 302 Pin 0 Share 2 Share 4 Share 52 Share diy diy calligraphy pen diy calligraphy pens diy calligraphy tools diy gothic pen diy parallel pen gothic pen gothic pens parallel pen parallel pens 2015-02-28 Milenist Share inShare0 17 About Milenist @https://twitter.com/CalligraMasters Previous Calligraphy Masters by Mateusz Wolski WLK Next Typism book 2 preorder open until 10th of March Related Articles 8 Examples and 3 DIY videos about Ruling pen Calligraphy cover calligraphy masters 8 Examples and 3 DIY videos about Ruling pen Calligraphy December 4, 2015 DIY Cola pen DIY Cola pen July 24, 2015 cover 10 minutes DIY music pen by Sreeraj Whitehouse 10 minutes DIY music pen by Sreeraj Whitehouse July 6, 2015 Check Also 1 (2) DIY 2 custom calligraphy tools by Ernesto Casciato DIY 2 custom calligraphy tools by Ernesto Casciato : Just because we know you love … Newsletter Email Address: Subscribe to our Channel About: Calligraphy Masters is a community of calligraphy artists and calligraphers passionate about the world of letters. We're all united in a mission to re-establish Calligraphy as a leading art and share the inspiration and experience of creativity together. We believe that everyone can become a master of their own calligraphy. Recent Posts 19 stunning calligraphy tattoo examples by TheosOne Korean Calligraphy Lettering by Psycollapse Calligraffiti Ambassadors vs STROKE Artfair The Design of Words during Design Week in Milan was… The Best Calligraphy Apps to Own in 2016 Recent Comments David Grimes on Denis Brown: I think I’m always “doing” calligraphy Michael G on Qi in your calligraphy strokes David Grimes on Calligraffiti Ambassadors vs STROKE Artfair 19 stunning calligraphy tattoo examples by TheosOne - Inspiring Calligraphy, Calligraphy Letters &amp; Lettering on 29 Incredible calligraphy / lettering tattoo designs by Theosone The Design of Words during Design Week in Milan was... - Inspiring Calligraphy, Calligraphy Letters &amp; Lettering on Calligraffiti Ambassadors exhibition at Affenfaust Galerie in Hamburg Powered by Calligraphy Masters | A part of: Calligraphy Masters Ltd © Copyright 2016, All Rights Reserved This website uses cookies to improve your experience. We'll assume you're ok with this, but you can opt-out if you wish.Accept Read More Privacy &amp; Cookies Policy 2.2k Shares 3022782 SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. StumbleUpon Submit Profile Picture Calligraphy Masters 69 videos YouTube logo SubscribeSubscribedUnsubscribe3K Like2.1k We were unable to load Disqus. If you are a moderator please see our troubleshooting guide. 0 comments Comments Calligraphy Masters Community Login Disqus Facebook Twitter Google 1 Recommend Recommended Discussion Recommended! Recommending means this is a discussion worth sharing. It gets shared to your followers' Disqus feeds, and gives the creator kudos! Find More Discussions Share Share this discussion on Twitter Facebook Sort by Best Best Newest Oldest Avatar Start the discussion… in this conversation ⬇ Drag and drop your images here to upload them. Media preview placeholder Attach Log in with or sign up with Disqus or pick a name Disqus is a discussion network Disqus never moderates or censors. The rules on this community are its own. Your email is safe with us. It's only used for moderation and optional notifications. Don't be a jerk or do anything illegal. Everything is easier that way. Read full terms and conditions By signing up, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. By posting, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. Be the first to comment. Load more comments Also on Calligraphy Masters Calligraffiti Ambassadors vs STROKE Artfair 1 comment 2 months ago Avatar David Grimes — Really sick stuff guys! Good job all around! Fraktur Capitals calligraphy alphabet by Igor Sturion 2 comments 5 months ago Avatar Ian Staber — hehe, i noticed. i love the B,F,I,U, and W. they are elegant, not too over the top, balanced, and fluid. thanks … Guestbook 3 comments 2 years ago Avatar jeanette — Enjoy Calligraphy Masters, I love seeing the work produced and find it inspiring. Thank you Denis Brown: I think I’m always “doing” calligraphy 1 comment 6 months ago Avatar David Grimes — This is absolutely fascinating. Excellent job to both the interviewer and Denis. Captivating to read! Powered by Disqus Subscribe Add Disqus to your site Add Disqus Add Privacy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160711091020#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 15. Generic Operating System Services » 15.4. argparse — Parser for command-line options, arguments and sub-commands¶ New in version 2.7. Source code: Lib/argparse.py Tutorial This page contains the API reference information. For a more gentle introduction to Python command-line parsing, have a look at the argparse tutorial. The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments. 15.4.1. Example¶ The following code is a Python program that takes a list of integers and produces either the sum or the max: import argparse parser = argparse.ArgumentParser(description='Process some integers.') parser.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer for the accumulator') parser.add_argument('--sum', dest='accumulate', action='store_const', const=sum, default=max, help='sum the integers (default: find the max)') args = parser.parse_args() print args.accumulate(args.integers) Assuming the Python code above is saved into a file called prog.py, it can be run at the command line and provides useful help messages: $ python prog.py -h usage: prog.py [-h] [--sum] N [N ...] Process some integers. positional arguments: N an integer for the accumulator optional arguments: -h, --help show this help message and exit --sum sum the integers (default: find the max) When run with the appropriate arguments, it prints either the sum or the max of the command-line integers: $ python prog.py 1 2 3 4 4 $ python prog.py 1 2 3 4 --sum 10 If invalid arguments are passed in, it will issue an error: $ python prog.py a b c usage: prog.py [-h] [--sum] N [N ...] prog.py: error: argument N: invalid int value: 'a' The following sections walk you through this example. 15.4.1.1. Creating a parser¶ The first step in using the argparse is creating an ArgumentParser object: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(description='Process some integers.') The ArgumentParser object will hold all the information necessary to parse the command line into Python data types. 15.4.1.2. Adding arguments¶ Filling an ArgumentParser with information about program arguments is done by making calls to the add_argument() method. Generally, these calls tell the ArgumentParser how to take the strings on the command line and turn them into objects. This information is stored and used when parse_args() is called. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser.add_argument('integers', metavar='N', type=int, nargs='+', ... help='an integer for the accumulator') &gt;&gt;&gt; parser.add_argument('--sum', dest='accumulate', action='store_const', ... const=sum, default=max, ... help='sum the integers (default: find the max)') Later, calling parse_args() will return an object with two attributes, integers and accumulate. The integers attribute will be a list of one or more ints, and the accumulate attribute will be either the sum() function, if --sum was specified at the command line, or the max() function if it was not. 15.4.1.3. Parsing arguments¶ ArgumentParser parses arguments through the parse_args() method. This will inspect the command line, convert each argument to the appropriate type and then invoke the appropriate action. In most cases, this means a simple Namespace object will be built up from attributes parsed out of the command line: &gt;&gt;&gt; &gt;&gt;&gt; parser.parse_args(['--sum', '7', '-1', '42']) Namespace(accumulate=&lt;built-in function sum&gt;, integers=[7, -1, 42]) In a script, parse_args() will typically be called with no arguments, and the ArgumentParser will automatically determine the command-line arguments from sys.argv. 15.4.2. ArgumentParser objects¶ class argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True)¶ Create a new ArgumentParser object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are: prog - The name of the program (default: sys.argv[0]) usage - The string describing the program usage (default: generated from arguments added to parser) description - Text to display before the argument help (default: none) epilog - Text to display after the argument help (default: none) parents - A list of ArgumentParser objects whose arguments should also be included formatter_class - A class for customizing the help output prefix_chars - The set of characters that prefix optional arguments (default: ‘-‘) fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read (default: None) argument_default - The global default value for arguments (default: None) conflict_handler - The strategy for resolving conflicting optionals (usually unnecessary) add_help - Add a -h/–help option to the parser (default: True) The following sections describe how each of these are used. 15.4.2.1. prog¶ By default, ArgumentParser objects uses sys.argv[0] to determine how to display the name of the program in help messages. This default is almost always desirable because it will make the help messages match how the program was invoked on the command line. For example, consider a file named myprogram.py with the following code: import argparse parser = argparse.ArgumentParser() parser.add_argument('--foo', help='foo help') args = parser.parse_args() The help for this program will display myprogram.py as the program name (regardless of where the program was invoked from): $ python myprogram.py --help usage: myprogram.py [-h] [--foo FOO] optional arguments: -h, --help show this help message and exit --foo FOO foo help $ cd .. $ python subdir\myprogram.py --help usage: myprogram.py [-h] [--foo FOO] optional arguments: -h, --help show this help message and exit --foo FOO foo help To change this default behavior, another value can be supplied using the prog= argument to ArgumentParser: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='myprogram') &gt;&gt;&gt; parser.print_help() usage: myprogram [-h] optional arguments: -h, --help show this help message and exit Note that the program name, whether determined from sys.argv[0] or from the prog= argument, is available to help messages using the %(prog)s format specifier. &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='myprogram') &gt;&gt;&gt; parser.add_argument('--foo', help='foo of the %(prog)s program') &gt;&gt;&gt; parser.print_help() usage: myprogram [-h] [--foo FOO] optional arguments: -h, --help show this help message and exit --foo FOO foo of the myprogram program 15.4.2.2. usage¶ By default, ArgumentParser calculates the usage message from the arguments it contains: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('--foo', nargs='?', help='foo help') &gt;&gt;&gt; parser.add_argument('bar', nargs='+', help='bar help') &gt;&gt;&gt; parser.print_help() usage: PROG [-h] [--foo [FOO]] bar [bar ...] positional arguments: bar bar help optional arguments: -h, --help show this help message and exit --foo [FOO] foo help The default message can be overridden with the usage= keyword argument: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]') &gt;&gt;&gt; parser.add_argument('--foo', nargs='?', help='foo help') &gt;&gt;&gt; parser.add_argument('bar', nargs='+', help='bar help') &gt;&gt;&gt; parser.print_help() usage: PROG [options] positional arguments: bar bar help optional arguments: -h, --help show this help message and exit --foo [FOO] foo help The %(prog)s format specifier is available to fill in the program name in your usage messages. 15.4.2.3. description¶ Most calls to the ArgumentParser constructor will use the description= keyword argument. This argument gives a brief description of what the program does and how it works. In help messages, the description is displayed between the command-line usage string and the help messages for the various arguments: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(description='A foo that bars') &gt;&gt;&gt; parser.print_help() usage: argparse.py [-h] A foo that bars optional arguments: -h, --help show this help message and exit By default, the description will be line-wrapped so that it fits within the given space. To change this behavior, see the formatter_class argument. 15.4.2.4. epilog¶ Some programs like to display additional description of the program after the description of the arguments. Such text can be specified using the epilog= argument to ArgumentParser: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser( ... description='A foo that bars', ... epilog=&quot;And that's how you'd foo a bar&quot;) &gt;&gt;&gt; parser.print_help() usage: argparse.py [-h] A foo that bars optional arguments: -h, --help show this help message and exit And that's how you'd foo a bar As with the description argument, the epilog= text is by default line-wrapped, but this behavior can be adjusted with the formatter_class argument to ArgumentParser. 15.4.2.5. parents¶ Sometimes, several parsers share a common set of arguments. Rather than repeating the definitions of these arguments, a single parser with all the shared arguments and passed to parents= argument to ArgumentParser can be used. The parents= argument takes a list of ArgumentParser objects, collects all the positional and optional actions from them, and adds these actions to the ArgumentParser object being constructed: &gt;&gt;&gt; &gt;&gt;&gt; parent_parser = argparse.ArgumentParser(add_help=False) &gt;&gt;&gt; parent_parser.add_argument('--parent', type=int) &gt;&gt;&gt; foo_parser = argparse.ArgumentParser(parents=[parent_parser]) &gt;&gt;&gt; foo_parser.add_argument('foo') &gt;&gt;&gt; foo_parser.parse_args(['--parent', '2', 'XXX']) Namespace(foo='XXX', parent=2) &gt;&gt;&gt; bar_parser = argparse.ArgumentParser(parents=[parent_parser]) &gt;&gt;&gt; bar_parser.add_argument('--bar') &gt;&gt;&gt; bar_parser.parse_args(['--bar', 'YYY']) Namespace(bar='YYY', parent=None) Note that most parent parsers will specify add_help=False. Otherwise, the ArgumentParser will see two -h/--help options (one in the parent and one in the child) and raise an error. Note You must fully initialize the parsers before passing them via parents=. If you change the parent parsers after the child parser, those changes will not be reflected in the child. 15.4.2.6. formatter_class¶ ArgumentParser objects allow the help formatting to be customized by specifying an alternate formatting class. Currently, there are three such classes: class argparse.RawDescriptionHelpFormatter¶ class argparse.RawTextHelpFormatter¶ class argparse.ArgumentDefaultsHelpFormatter¶ The first two allow more control over how textual descriptions are displayed, while the last automatically adds information about argument default values. By default, ArgumentParser objects line-wrap the description and epilog texts in command-line help messages: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser( ... prog='PROG', ... description='''this description ... was indented weird ... but that is okay''', ... epilog=''' ... likewise for this epilog whose whitespace will ... be cleaned up and whose words will be wrapped ... across a couple lines''') &gt;&gt;&gt; parser.print_help() usage: PROG [-h] this description was indented weird but that is okay optional arguments: -h, --help show this help message and exit likewise for this epilog whose whitespace will be cleaned up and whose words will be wrapped across a couple lines Passing RawDescriptionHelpFormatter as formatter_class= indicates that description and epilog are already correctly formatted and should not be line-wrapped: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser( ... prog='PROG', ... formatter_class=argparse.RawDescriptionHelpFormatter, ... description=textwrap.dedent('''\ ... Please do not mess up this text! ... -------------------------------- ... I have indented it ... exactly the way ... I want it ... ''')) &gt;&gt;&gt; parser.print_help() usage: PROG [-h] Please do not mess up this text! -------------------------------- I have indented it exactly the way I want it optional arguments: -h, --help show this help message and exit RawTextHelpFormatter maintains whitespace for all sorts of help text, including argument descriptions. The other formatter class available, ArgumentDefaultsHelpFormatter, will add information about the default value of each of the arguments: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser( ... prog='PROG', ... formatter_class=argparse.ArgumentDefaultsHelpFormatter) &gt;&gt;&gt; parser.add_argument('--foo', type=int, default=42, help='FOO!') &gt;&gt;&gt; parser.add_argument('bar', nargs='*', default=[1, 2, 3], help='BAR!') &gt;&gt;&gt; parser.print_help() usage: PROG [-h] [--foo FOO] [bar [bar ...]] positional arguments: bar BAR! (default: [1, 2, 3]) optional arguments: -h, --help show this help message and exit --foo FOO FOO! (default: 42) 15.4.2.7. prefix_chars¶ Most command-line options will use - as the prefix, e.g. -f/--foo. Parsers that need to support different or additional prefix characters, e.g. for options like +f or /foo, may specify them using the prefix_chars= argument to the ArgumentParser constructor: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+') &gt;&gt;&gt; parser.add_argument('+f') &gt;&gt;&gt; parser.add_argument('++bar') &gt;&gt;&gt; parser.parse_args('+f X ++bar Y'.split()) Namespace(bar='Y', f='X') The prefix_chars= argument defaults to '-'. Supplying a set of characters that does not include - will cause -f/--foo options to be disallowed. 15.4.2.8. fromfile_prefix_chars¶ Sometimes, for example when dealing with a particularly long argument lists, it may make sense to keep the list of arguments in a file rather than typing it out at the command line. If the fromfile_prefix_chars= argument is given to the ArgumentParser constructor, then arguments that start with any of the specified characters will be treated as files, and will be replaced by the arguments they contain. For example: &gt;&gt;&gt; &gt;&gt;&gt; with open('args.txt', 'w') as fp: ... fp.write('-f\nbar') &gt;&gt;&gt; parser = argparse.ArgumentParser(fromfile_prefix_chars='@') &gt;&gt;&gt; parser.add_argument('-f') &gt;&gt;&gt; parser.parse_args(['-f', 'foo', '@args.txt']) Namespace(f='bar') Arguments read from a file must by default be one per line (but see also convert_arg_line_to_args()) and are treated as if they were in the same place as the original file referencing argument on the command line. So in the example above, the expression ['-f', 'foo', '@args.txt'] is considered equivalent to the expression ['-f', 'foo', '-f', 'bar']. The fromfile_prefix_chars= argument defaults to None, meaning that arguments will never be treated as file references. 15.4.2.9. argument_default¶ Generally, argument defaults are specified either by passing a default to add_argument() or by calling the set_defaults() methods with a specific set of name-value pairs. Sometimes however, it may be useful to specify a single parser-wide default for arguments. This can be accomplished by passing the argument_default= keyword argument to ArgumentParser. For example, to globally suppress attribute creation on parse_args() calls, we supply argument_default=SUPPRESS: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS) &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; parser.add_argument('bar', nargs='?') &gt;&gt;&gt; parser.parse_args(['--foo', '1', 'BAR']) Namespace(bar='BAR', foo='1') &gt;&gt;&gt; parser.parse_args([]) Namespace() 15.4.2.10. conflict_handler¶ ArgumentParser objects do not allow two actions with the same option string. By default, ArgumentParser objects raises an exception if an attempt is made to create an argument with an option string that is already in use: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-f', '--foo', help='old foo help') &gt;&gt;&gt; parser.add_argument('--foo', help='new foo help') Traceback (most recent call last): .. ArgumentError: argument --foo: conflicting option string(s): --foo Sometimes (e.g. when using parents) it may be useful to simply override any older arguments with the same option string. To get this behavior, the value 'resolve' can be supplied to the conflict_handler= argument of ArgumentParser: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', conflict_handler='resolve') &gt;&gt;&gt; parser.add_argument('-f', '--foo', help='old foo help') &gt;&gt;&gt; parser.add_argument('--foo', help='new foo help') &gt;&gt;&gt; parser.print_help() usage: PROG [-h] [-f FOO] [--foo FOO] optional arguments: -h, --help show this help message and exit -f FOO old foo help --foo FOO new foo help Note that ArgumentParser objects only remove an action if all of its option strings are overridden. So, in the example above, the old -f/--foo action is retained as the -f action, because only the --foo option string was overridden. 15.4.2.11. add_help¶ By default, ArgumentParser objects add an option which simply displays the parser’s help message. For example, consider a file named myprogram.py containing the following code: import argparse parser = argparse.ArgumentParser() parser.add_argument('--foo', help='foo help') args = parser.parse_args() If -h or --help is supplied at the command line, the ArgumentParser help will be printed: $ python myprogram.py --help usage: myprogram.py [-h] [--foo FOO] optional arguments: -h, --help show this help message and exit --foo FOO foo help Occasionally, it may be useful to disable the addition of this help option. This can be achieved by passing False as the add_help= argument to ArgumentParser: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', add_help=False) &gt;&gt;&gt; parser.add_argument('--foo', help='foo help') &gt;&gt;&gt; parser.print_help() usage: PROG [--foo FOO] optional arguments: --foo FOO foo help The help option is typically -h/--help. The exception to this is if the prefix_chars= is specified and does not include -, in which case -h and --help are not valid options. In this case, the first character in prefix_chars is used to prefix the help options: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', prefix_chars='+/') &gt;&gt;&gt; parser.print_help() usage: PROG [+h] optional arguments: +h, ++help show this help message and exit 15.4.3. The add_argument() method¶ ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])¶ Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are: name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo. action - The basic type of action to be taken when this argument is encountered at the command line. nargs - The number of command-line arguments that should be consumed. const - A constant value required by some action and nargs selections. default - The value produced if the argument is absent from the command line. type - The type to which the command-line argument should be converted. choices - A container of the allowable values for the argument. required - Whether or not the command-line option may be omitted (optionals only). help - A brief description of what the argument does. metavar - A name for the argument in usage messages. dest - The name of the attribute to be added to the object returned by parse_args(). The following sections describe how each of these are used. 15.4.3.1. name or flags¶ The add_argument() method must know whether an optional argument, like -f or --foo, or a positional argument, like a list of filenames, is expected. The first arguments passed to add_argument() must therefore be either a series of flags, or a simple argument name. For example, an optional argument could be created like: &gt;&gt;&gt; &gt;&gt;&gt; parser.add_argument('-f', '--foo') while a positional argument could be created like: &gt;&gt;&gt; &gt;&gt;&gt; parser.add_argument('bar') When parse_args() is called, optional arguments will be identified by the - prefix, and the remaining arguments will be assumed to be positional: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-f', '--foo') &gt;&gt;&gt; parser.add_argument('bar') &gt;&gt;&gt; parser.parse_args(['BAR']) Namespace(bar='BAR', foo=None) &gt;&gt;&gt; parser.parse_args(['BAR', '--foo', 'FOO']) Namespace(bar='BAR', foo='FOO') &gt;&gt;&gt; parser.parse_args(['--foo', 'FOO']) usage: PROG [-h] [-f FOO] bar PROG: error: too few arguments 15.4.3.2. action¶ ArgumentParser objects associate command-line arguments with actions. These actions can do just about anything with the command-line arguments associated with them, though most actions simply add an attribute to the object returned by parse_args(). The action keyword argument specifies how the command-line arguments should be handled. The supplied actions are: 'store' - This just stores the argument’s value. This is the default action. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; parser.parse_args('--foo 1'.split()) Namespace(foo='1') 'store_const' - This stores the value specified by the const keyword argument. The 'store_const' action is most commonly used with optional arguments that specify some sort of flag. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', action='store_const', const=42) &gt;&gt;&gt; parser.parse_args(['--foo']) Namespace(foo=42) 'store_true' and 'store_false' - These are special cases of 'store_const' using for storing the values True and False respectively. In addition, they create default values of False and True respectively. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', action='store_true') &gt;&gt;&gt; parser.add_argument('--bar', action='store_false') &gt;&gt;&gt; parser.add_argument('--baz', action='store_false') &gt;&gt;&gt; parser.parse_args('--foo --bar'.split()) Namespace(bar=False, baz=True, foo=True) 'append' - This stores a list, and appends each argument value to the list. This is useful to allow an option to be specified multiple times. Example usage: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', action='append') &gt;&gt;&gt; parser.parse_args('--foo 1 --foo 2'.split()) Namespace(foo=['1', '2']) 'append_const' - This stores a list, and appends the value specified by the const keyword argument to the list. (Note that the const keyword argument defaults to None.) The 'append_const' action is typically useful when multiple arguments need to store constants to the same list. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--str', dest='types', action='append_const', const=str) &gt;&gt;&gt; parser.add_argument('--int', dest='types', action='append_const', const=int) &gt;&gt;&gt; parser.parse_args('--str --int'.split()) Namespace(types=[&lt;type 'str'&gt;, &lt;type 'int'&gt;]) 'count' - This counts the number of times a keyword argument occurs. For example, this is useful for increasing verbosity levels: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--verbose', '-v', action='count') &gt;&gt;&gt; parser.parse_args(['-vvv']) Namespace(verbose=3) 'help' - This prints a complete help message for all the options in the current parser and then exits. By default a help action is automatically added to the parser. See ArgumentParser for details of how the output is created. 'version' - This expects a version= keyword argument in the add_argument() call, and prints version information and exits when invoked: &gt;&gt;&gt; &gt;&gt;&gt; import argparse &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('--version', action='version', version='%(prog)s 2.0') &gt;&gt;&gt; parser.parse_args(['--version']) PROG 2.0 You may also specify an arbitrary action by passing an Action subclass or other object that implements the same interface. The recommended way to do this is to extend Action, overriding the __call__ method and optionally the __init__ method. An example of a custom action: &gt;&gt;&gt; &gt;&gt;&gt; class FooAction(argparse.Action): ... def __init__(self, option_strings, dest, nargs=None, **kwargs): ... if nargs is not None: ... raise ValueError(&quot;nargs not allowed&quot;) ... super(FooAction, self).__init__(option_strings, dest, **kwargs) ... def __call__(self, parser, namespace, values, option_string=None): ... print '%r %r %r' % (namespace, values, option_string) ... setattr(namespace, self.dest, values) ... &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', action=FooAction) &gt;&gt;&gt; parser.add_argument('bar', action=FooAction) &gt;&gt;&gt; args = parser.parse_args('1 --foo 2'.split()) Namespace(bar=None, foo=None) '1' None Namespace(bar='1', foo=None) '2' '--foo' &gt;&gt;&gt; args Namespace(bar='1', foo='2') For more details, see Action. 15.4.3.3. nargs¶ ArgumentParser objects usually associate a single command-line argument with a single action to be taken. The nargs keyword argument associates a different number of command-line arguments with a single action. The supported values are: N (an integer). N arguments from the command line will be gathered together into a list. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', nargs=2) &gt;&gt;&gt; parser.add_argument('bar', nargs=1) &gt;&gt;&gt; parser.parse_args('c --foo a b'.split()) Namespace(bar=['c'], foo=['a', 'b']) Note that nargs=1 produces a list of one item. This is different from the default, in which the item is produced by itself. '?'. One argument will be consumed from the command line if possible, and produced as a single item. If no command-line argument is present, the value from default will be produced. Note that for optional arguments, there is an additional case - the option string is present but not followed by a command-line argument. In this case the value from const will be produced. Some examples to illustrate this: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', nargs='?', const='c', default='d') &gt;&gt;&gt; parser.add_argument('bar', nargs='?', default='d') &gt;&gt;&gt; parser.parse_args(['XX', '--foo', 'YY']) Namespace(bar='XX', foo='YY') &gt;&gt;&gt; parser.parse_args(['XX', '--foo']) Namespace(bar='XX', foo='c') &gt;&gt;&gt; parser.parse_args([]) Namespace(bar='d', foo='d') One of the more common uses of nargs='?' is to allow optional input and output files: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('infile', nargs='?', type=argparse.FileType('r'), ... default=sys.stdin) &gt;&gt;&gt; parser.add_argument('outfile', nargs='?', type=argparse.FileType('w'), ... default=sys.stdout) &gt;&gt;&gt; parser.parse_args(['input.txt', 'output.txt']) Namespace(infile=&lt;open file 'input.txt', mode 'r' at 0x...&gt;, outfile=&lt;open file 'output.txt', mode 'w' at 0x...&gt;) &gt;&gt;&gt; parser.parse_args([]) Namespace(infile=&lt;open file '&lt;stdin&gt;', mode 'r' at 0x...&gt;, outfile=&lt;open file '&lt;stdout&gt;', mode 'w' at 0x...&gt;) '*'. All command-line arguments present are gathered into a list. Note that it generally doesn’t make much sense to have more than one positional argument with nargs='*', but multiple optional arguments with nargs='*' is possible. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', nargs='*') &gt;&gt;&gt; parser.add_argument('--bar', nargs='*') &gt;&gt;&gt; parser.add_argument('baz', nargs='*') &gt;&gt;&gt; parser.parse_args('a b --foo x y --bar 1 2'.split()) Namespace(bar=['1', '2'], baz=['a', 'b'], foo=['x', 'y']) '+'. Just like '*', all command-line args present are gathered into a list. Additionally, an error message will be generated if there wasn’t at least one command-line argument present. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('foo', nargs='+') &gt;&gt;&gt; parser.parse_args(['a', 'b']) Namespace(foo=['a', 'b']) &gt;&gt;&gt; parser.parse_args([]) usage: PROG [-h] foo [foo ...] PROG: error: too few arguments argparse.REMAINDER. All the remaining command-line arguments are gathered into a list. This is commonly useful for command line utilities that dispatch to other command line utilities: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; parser.add_argument('command') &gt;&gt;&gt; parser.add_argument('args', nargs=argparse.REMAINDER) &gt;&gt;&gt; print parser.parse_args('--foo B cmd --arg1 XX ZZ'.split()) Namespace(args=['--arg1', 'XX', 'ZZ'], command='cmd', foo='B') If the nargs keyword argument is not provided, the number of arguments consumed is determined by the action. Generally this means a single command-line argument will be consumed and a single item (not a list) will be produced. 15.4.3.4. const¶ The const argument of add_argument() is used to hold constant values that are not read from the command line but are required for the various ArgumentParser actions. The two most common uses of it are: When add_argument() is called with action='store_const' or action='append_const'. These actions add the const value to one of the attributes of the object returned by parse_args(). See the action description for examples. When add_argument() is called with option strings (like -f or --foo) and nargs='?'. This creates an optional argument that can be followed by zero or one command-line arguments. When parsing the command line, if the option string is encountered with no command-line argument following it, the value of const will be assumed instead. See the nargs description for examples. With the 'store_const' and 'append_const' actions, the const keyword argument must be given. For other actions, it defaults to None. 15.4.3.5. default¶ All optional arguments and some positional arguments may be omitted at the command line. The default keyword argument of add_argument(), whose value defaults to None, specifies what value should be used if the command-line argument is not present. For optional arguments, the default value is used when the option string was not present at the command line: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', default=42) &gt;&gt;&gt; parser.parse_args(['--foo', '2']) Namespace(foo='2') &gt;&gt;&gt; parser.parse_args([]) Namespace(foo=42) If the default value is a string, the parser parses the value as if it were a command-line argument. In particular, the parser applies any type conversion argument, if provided, before setting the attribute on the Namespace return value. Otherwise, the parser uses the value as is: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--length', default='10', type=int) &gt;&gt;&gt; parser.add_argument('--width', default=10.5, type=int) &gt;&gt;&gt; parser.parse_args() Namespace(length=10, width=10.5) For positional arguments with nargs equal to ? or *, the default value is used when no command-line argument was present: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('foo', nargs='?', default=42) &gt;&gt;&gt; parser.parse_args(['a']) Namespace(foo='a') &gt;&gt;&gt; parser.parse_args([]) Namespace(foo=42) Providing default=argparse.SUPPRESS causes no attribute to be added if the command-line argument was not present.: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', default=argparse.SUPPRESS) &gt;&gt;&gt; parser.parse_args([]) Namespace() &gt;&gt;&gt; parser.parse_args(['--foo', '1']) Namespace(foo='1') 15.4.3.6. type¶ By default, ArgumentParser objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a float or int. The type keyword argument of add_argument() allows any necessary type-checking and type conversions to be performed. Common built-in types and functions can be used directly as the value of the type argument: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('foo', type=int) &gt;&gt;&gt; parser.add_argument('bar', type=file) &gt;&gt;&gt; parser.parse_args('2 temp.txt'.split()) Namespace(bar=&lt;open file 'temp.txt', mode 'r' at 0x...&gt;, foo=2) See the section on the default keyword argument for information on when the type argument is applied to default arguments. To ease the use of various types of files, the argparse module provides the factory FileType which takes the mode= and bufsize= arguments of the file object. For example, FileType('w') can be used to create a writable file: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('bar', type=argparse.FileType('w')) &gt;&gt;&gt; parser.parse_args(['out.txt']) Namespace(bar=&lt;open file 'out.txt', mode 'w' at 0x...&gt;) type= can take any callable that takes a single string argument and returns the converted value: &gt;&gt;&gt; &gt;&gt;&gt; def perfect_square(string): ... value = int(string) ... sqrt = math.sqrt(value) ... if sqrt != int(sqrt): ... msg = &quot;%r is not a perfect square&quot; % string ... raise argparse.ArgumentTypeError(msg) ... return value ... &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('foo', type=perfect_square) &gt;&gt;&gt; parser.parse_args(['9']) Namespace(foo=9) &gt;&gt;&gt; parser.parse_args(['7']) usage: PROG [-h] foo PROG: error: argument foo: '7' is not a perfect square The choices keyword argument may be more convenient for type checkers that simply check against a range of values: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('foo', type=int, choices=xrange(5, 10)) &gt;&gt;&gt; parser.parse_args(['7']) Namespace(foo=7) &gt;&gt;&gt; parser.parse_args(['11']) usage: PROG [-h] {5,6,7,8,9} PROG: error: argument foo: invalid choice: 11 (choose from 5, 6, 7, 8, 9) See the choices section for more details. 15.4.3.7. choices¶ Some command-line arguments should be selected from a restricted set of values. These can be handled by passing a container object as the choices keyword argument to add_argument(). When the command line is parsed, argument values will be checked, and an error message will be displayed if the argument was not one of the acceptable values: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='game.py') &gt;&gt;&gt; parser.add_argument('move', choices=['rock', 'paper', 'scissors']) &gt;&gt;&gt; parser.parse_args(['rock']) Namespace(move='rock') &gt;&gt;&gt; parser.parse_args(['fire']) usage: game.py [-h] {rock,paper,scissors} game.py: error: argument move: invalid choice: 'fire' (choose from 'rock', 'paper', 'scissors') Note that inclusion in the choices container is checked after any type conversions have been performed, so the type of the objects in the choices container should match the type specified: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='doors.py') &gt;&gt;&gt; parser.add_argument('door', type=int, choices=range(1, 4)) &gt;&gt;&gt; print(parser.parse_args(['3'])) Namespace(door=3) &gt;&gt;&gt; parser.parse_args(['4']) usage: doors.py [-h] {1,2,3} doors.py: error: argument door: invalid choice: 4 (choose from 1, 2, 3) Any object that supports the in operator can be passed as the choices value, so dict objects, set objects, custom containers, etc. are all supported. 15.4.3.8. required¶ In general, the argparse module assumes that flags like -f and --bar indicate optional arguments, which can always be omitted at the command line. To make an option required, True can be specified for the required= keyword argument to add_argument(): &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', required=True) &gt;&gt;&gt; parser.parse_args(['--foo', 'BAR']) Namespace(foo='BAR') &gt;&gt;&gt; parser.parse_args([]) usage: argparse.py [-h] [--foo FOO] argparse.py: error: option --foo is required As the example shows, if an option is marked as required, parse_args() will report an error if that option is not present at the command line. Note Required options are generally considered bad form because users expect options to be optional, and thus they should be avoided when possible. 15.4.3.9. help¶ The help value is a string containing a brief description of the argument. When a user requests help (usually by using -h or --help at the command line), these help descriptions will be displayed with each argument: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='frobble') &gt;&gt;&gt; parser.add_argument('--foo', action='store_true', ... help='foo the bars before frobbling') &gt;&gt;&gt; parser.add_argument('bar', nargs='+', ... help='one of the bars to be frobbled') &gt;&gt;&gt; parser.parse_args(['-h']) usage: frobble [-h] [--foo] bar [bar ...] positional arguments: bar one of the bars to be frobbled optional arguments: -h, --help show this help message and exit --foo foo the bars before frobbling The help strings can include various format specifiers to avoid repetition of things like the program name or the argument default. The available specifiers include the program name, %(prog)s and most keyword arguments to add_argument(), e.g. %(default)s, %(type)s, etc.: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='frobble') &gt;&gt;&gt; parser.add_argument('bar', nargs='?', type=int, default=42, ... help='the bar to %(prog)s (default: %(default)s)') &gt;&gt;&gt; parser.print_help() usage: frobble [-h] [bar] positional arguments: bar the bar to frobble (default: 42) optional arguments: -h, --help show this help message and exit argparse supports silencing the help entry for certain options, by setting the help value to argparse.SUPPRESS: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='frobble') &gt;&gt;&gt; parser.add_argument('--foo', help=argparse.SUPPRESS) &gt;&gt;&gt; parser.print_help() usage: frobble [-h] optional arguments: -h, --help show this help message and exit 15.4.3.10. metavar¶ When ArgumentParser generates help messages, it needs some way to refer to each expected argument. By default, ArgumentParser objects use the dest value as the “name” of each object. By default, for positional argument actions, the dest value is used directly, and for optional argument actions, the dest value is uppercased. So, a single positional argument with dest='bar' will be referred to as bar. A single optional argument --foo that should be followed by a single command-line argument will be referred to as FOO. An example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; parser.add_argument('bar') &gt;&gt;&gt; parser.parse_args('X --foo Y'.split()) Namespace(bar='X', foo='Y') &gt;&gt;&gt; parser.print_help() usage: [-h] [--foo FOO] bar positional arguments: bar optional arguments: -h, --help show this help message and exit --foo FOO An alternative name can be specified with metavar: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', metavar='YYY') &gt;&gt;&gt; parser.add_argument('bar', metavar='XXX') &gt;&gt;&gt; parser.parse_args('X --foo Y'.split()) Namespace(bar='X', foo='Y') &gt;&gt;&gt; parser.print_help() usage: [-h] [--foo YYY] XXX positional arguments: XXX optional arguments: -h, --help show this help message and exit --foo YYY Note that metavar only changes the displayed name - the name of the attribute on the parse_args() object is still determined by the dest value. Different values of nargs may cause the metavar to be used multiple times. Providing a tuple to metavar specifies a different display for each of the arguments: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-x', nargs=2) &gt;&gt;&gt; parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz')) &gt;&gt;&gt; parser.print_help() usage: PROG [-h] [-x X X] [--foo bar baz] optional arguments: -h, --help show this help message and exit -x X X --foo bar baz 15.4.3.11. dest¶ Most ArgumentParser actions add some value as an attribute of the object returned by parse_args(). The name of this attribute is determined by the dest keyword argument of add_argument(). For positional argument actions, dest is normally supplied as the first argument to add_argument(): &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('bar') &gt;&gt;&gt; parser.parse_args(['XXX']) Namespace(bar='XXX') For optional argument actions, the value of dest is normally inferred from the option strings. ArgumentParser generates the value of dest by taking the first long option string and stripping away the initial -- string. If no long option strings were supplied, dest will be derived from the first short option string by stripping the initial - character. Any internal - characters will be converted to _ characters to make sure the string is a valid attribute name. The examples below illustrate this behavior: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('-f', '--foo-bar', '--foo') &gt;&gt;&gt; parser.add_argument('-x', '-y') &gt;&gt;&gt; parser.parse_args('-f 1 -x 2'.split()) Namespace(foo_bar='1', x='2') &gt;&gt;&gt; parser.parse_args('--foo 1 -y 2'.split()) Namespace(foo_bar='1', x='2') dest allows a custom attribute name to be provided: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', dest='bar') &gt;&gt;&gt; parser.parse_args('--foo XXX'.split()) Namespace(bar='XXX') 15.4.3.12. Action classes¶ Action classes implement the Action API, a callable which returns a callable which processes arguments from the command-line. Any object which follows this API may be passed as the action parameter to add_argument(). class argparse.Action(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)¶ Action objects are used by an ArgumentParser to represent the information needed to parse a single argument from one or more strings from the command line. The Action class must accept the two positional arguments plus any keyword arguments passed to ArgumentParser.add_argument() except for the action itself. Instances of Action (or return value of any callable to the action parameter) should have attributes “dest”, “option_strings”, “default”, “type”, “required”, “help”, etc. defined. The easiest way to ensure these attributes are defined is to call Action.__init__. Action instances should be callable, so subclasses must override the __call__ method, which should accept four parameters: parser - The ArgumentParser object which contains this action. namespace - The Namespace object that will be returned by parse_args(). Most actions add an attribute to this object using setattr(). values - The associated command-line arguments, with any type conversions applied. Type conversions are specified with the type keyword argument to add_argument(). option_string - The option string that was used to invoke this action. The option_string argument is optional, and will be absent if the action is associated with a positional argument. The __call__ method may perform arbitrary actions, but will typically set attributes on the namespace based on dest and values. 15.4.4. The parse_args() method¶ ArgumentParser.parse_args(args=None, namespace=None)¶ Convert argument strings to objects and assign them as attributes of the namespace. Return the populated namespace. Previous calls to add_argument() determine exactly what objects are created and how they are assigned. See the documentation for add_argument() for details. By default, the argument strings are taken from sys.argv, and a new empty Namespace object is created for the attributes. 15.4.4.1. Option value syntax¶ The parse_args() method supports several ways of specifying the value of an option (if it takes one). In the simplest case, the option and its value are passed as two separate arguments: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-x') &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; parser.parse_args(['-x', 'X']) Namespace(foo=None, x='X') &gt;&gt;&gt; parser.parse_args(['--foo', 'FOO']) Namespace(foo='FOO', x=None) For long options (options with names longer than a single character), the option and value can also be passed as a single command-line argument, using = to separate them: &gt;&gt;&gt; &gt;&gt;&gt; parser.parse_args(['--foo=FOO']) Namespace(foo='FOO', x=None) For short options (options only one character long), the option and its value can be concatenated: &gt;&gt;&gt; &gt;&gt;&gt; parser.parse_args(['-xX']) Namespace(foo=None, x='X') Several short options can be joined together, using only a single - prefix, as long as only the last option (or none of them) requires a value: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-x', action='store_true') &gt;&gt;&gt; parser.add_argument('-y', action='store_true') &gt;&gt;&gt; parser.add_argument('-z') &gt;&gt;&gt; parser.parse_args(['-xyzZ']) Namespace(x=True, y=True, z='Z') 15.4.4.2. Invalid arguments¶ While parsing the command line, parse_args() checks for a variety of errors, including ambiguous options, invalid types, invalid options, wrong number of positional arguments, etc. When it encounters such an error, it exits and prints the error along with a usage message: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('--foo', type=int) &gt;&gt;&gt; parser.add_argument('bar', nargs='?') &gt;&gt;&gt; # invalid type &gt;&gt;&gt; parser.parse_args(['--foo', 'spam']) usage: PROG [-h] [--foo FOO] [bar] PROG: error: argument --foo: invalid int value: 'spam' &gt;&gt;&gt; # invalid option &gt;&gt;&gt; parser.parse_args(['--bar']) usage: PROG [-h] [--foo FOO] [bar] PROG: error: no such option: --bar &gt;&gt;&gt; # wrong number of arguments &gt;&gt;&gt; parser.parse_args(['spam', 'badger']) usage: PROG [-h] [--foo FOO] [bar] PROG: error: extra arguments found: badger 15.4.4.3. Arguments containing -¶ The parse_args() method attempts to give errors whenever the user has clearly made a mistake, but some situations are inherently ambiguous. For example, the command-line argument -1 could either be an attempt to specify an option or an attempt to provide a positional argument. The parse_args() method is cautious here: positional arguments may only begin with - if they look like negative numbers and there are no options in the parser that look like negative numbers: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-x') &gt;&gt;&gt; parser.add_argument('foo', nargs='?') &gt;&gt;&gt; # no negative number options, so -1 is a positional argument &gt;&gt;&gt; parser.parse_args(['-x', '-1']) Namespace(foo=None, x='-1') &gt;&gt;&gt; # no negative number options, so -1 and -5 are positional arguments &gt;&gt;&gt; parser.parse_args(['-x', '-1', '-5']) Namespace(foo='-5', x='-1') &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-1', dest='one') &gt;&gt;&gt; parser.add_argument('foo', nargs='?') &gt;&gt;&gt; # negative number options present, so -1 is an option &gt;&gt;&gt; parser.parse_args(['-1', 'X']) Namespace(foo=None, one='X') &gt;&gt;&gt; # negative number options present, so -2 is an option &gt;&gt;&gt; parser.parse_args(['-2']) usage: PROG [-h] [-1 ONE] [foo] PROG: error: no such option: -2 &gt;&gt;&gt; # negative number options present, so both -1s are options &gt;&gt;&gt; parser.parse_args(['-1', '-1']) usage: PROG [-h] [-1 ONE] [foo] PROG: error: argument -1: expected one argument If you have positional arguments that must begin with - and don’t look like negative numbers, you can insert the pseudo-argument '--' which tells parse_args() that everything after that is a positional argument: &gt;&gt;&gt; &gt;&gt;&gt; parser.parse_args(['--', '-f']) Namespace(foo='-f', one=None) 15.4.4.4. Argument abbreviations (prefix matching)¶ The parse_args() method allows long options to be abbreviated to a prefix, if the abbreviation is unambiguous (the prefix matches a unique option): &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('-bacon') &gt;&gt;&gt; parser.add_argument('-badger') &gt;&gt;&gt; parser.parse_args('-bac MMM'.split()) Namespace(bacon='MMM', badger=None) &gt;&gt;&gt; parser.parse_args('-bad WOOD'.split()) Namespace(bacon=None, badger='WOOD') &gt;&gt;&gt; parser.parse_args('-ba BA'.split()) usage: PROG [-h] [-bacon BACON] [-badger BADGER] PROG: error: ambiguous option: -ba could match -badger, -bacon An error is produced for arguments that could produce more than one options. 15.4.4.5. Beyond sys.argv¶ Sometimes it may be useful to have an ArgumentParser parse arguments other than those of sys.argv. This can be accomplished by passing a list of strings to parse_args(). This is useful for testing at the interactive prompt: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument( ... 'integers', metavar='int', type=int, choices=xrange(10), ... nargs='+', help='an integer in the range 0..9') &gt;&gt;&gt; parser.add_argument( ... '--sum', dest='accumulate', action='store_const', const=sum, ... default=max, help='sum the integers (default: find the max)') &gt;&gt;&gt; parser.parse_args(['1', '2', '3', '4']) Namespace(accumulate=&lt;built-in function max&gt;, integers=[1, 2, 3, 4]) &gt;&gt;&gt; parser.parse_args(['1', '2', '3', '4', '--sum']) Namespace(accumulate=&lt;built-in function sum&gt;, integers=[1, 2, 3, 4]) 15.4.4.6. The Namespace object¶ class argparse.Namespace¶ Simple class used by default by parse_args() to create an object holding attributes and return it. This class is deliberately simple, just an object subclass with a readable string representation. If you prefer to have dict-like view of the attributes, you can use the standard Python idiom, vars(): &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; args = parser.parse_args(['--foo', 'BAR']) &gt;&gt;&gt; vars(args) {'foo': 'BAR'} It may also be useful to have an ArgumentParser assign attributes to an already existing object, rather than a new Namespace object. This can be achieved by specifying the namespace= keyword argument: &gt;&gt;&gt; &gt;&gt;&gt; class C(object): ... pass ... &gt;&gt;&gt; c = C() &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo') &gt;&gt;&gt; parser.parse_args(args=['--foo', 'BAR'], namespace=c) &gt;&gt;&gt; c.foo 'BAR' 15.4.5. Other utilities¶ 15.4.5.1. Sub-commands¶ ArgumentParser.add_subparsers([title][, description][, prog][, parser_class][, action][, option_string][, dest][, help][, metavar])¶ Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout, svn update, and svn commit. Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports the creation of such sub-commands with the add_subparsers() method. The add_subparsers() method is normally called with no arguments and returns a special action object. This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual. Description of parameters: title - title for the sub-parser group in help output; by default “subcommands” if description is provided, otherwise uses title for positional arguments description - description for the sub-parser group in help output, by default None prog - usage information that will be displayed with sub-command help, by default the name of the program and any positional arguments before the subparser argument parser_class - class which will be used to create sub-parser instances, by default the class of the current parser (e.g. ArgumentParser) action - the basic type of action to be taken when this argument is encountered at the command line dest - name of the attribute under which sub-command name will be stored; by default None and no value is stored help - help for sub-parser group in help output, by default None metavar - string presenting available sub-commands in help; by default it is None and presents sub-commands in form {cmd1, cmd2, ..} Some example usage: &gt;&gt;&gt; &gt;&gt;&gt; # create the top-level parser &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; parser.add_argument('--foo', action='store_true', help='foo help') &gt;&gt;&gt; subparsers = parser.add_subparsers(help='sub-command help') &gt;&gt;&gt; &gt;&gt;&gt; # create the parser for the &quot;a&quot; command &gt;&gt;&gt; parser_a = subparsers.add_parser('a', help='a help') &gt;&gt;&gt; parser_a.add_argument('bar', type=int, help='bar help') &gt;&gt;&gt; &gt;&gt;&gt; # create the parser for the &quot;b&quot; command &gt;&gt;&gt; parser_b = subparsers.add_parser('b', help='b help') &gt;&gt;&gt; parser_b.add_argument('--baz', choices='XYZ', help='baz help') &gt;&gt;&gt; &gt;&gt;&gt; # parse some argument lists &gt;&gt;&gt; parser.parse_args(['a', '12']) Namespace(bar=12, foo=False) &gt;&gt;&gt; parser.parse_args(['--foo', 'b', '--baz', 'Z']) Namespace(baz='Z', foo=True) Note that the object returned by parse_args() will only contain attributes for the main parser and the subparser that was selected by the command line (and not any other subparsers). So in the example above, when the a command is specified, only the foo and bar attributes are present, and when the b command is specified, only the foo and baz attributes are present. Similarly, when a help message is requested from a subparser, only the help for that particular parser will be printed. The help message will not include parent parser or sibling parser messages. (A help message for each subparser command, however, can be given by supplying the help= argument to add_parser() as above.) &gt;&gt;&gt; &gt;&gt;&gt; parser.parse_args(['--help']) usage: PROG [-h] [--foo] {a,b} ... positional arguments: {a,b} sub-command help a a help b b help optional arguments: -h, --help show this help message and exit --foo foo help &gt;&gt;&gt; parser.parse_args(['a', '--help']) usage: PROG a [-h] bar positional arguments: bar bar help optional arguments: -h, --help show this help message and exit &gt;&gt;&gt; parser.parse_args(['b', '--help']) usage: PROG b [-h] [--baz {X,Y,Z}] optional arguments: -h, --help show this help message and exit --baz {X,Y,Z} baz help The add_subparsers() method also supports title and description keyword arguments. When either is present, the subparser’s commands will appear in their own group in the help output. For example: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; subparsers = parser.add_subparsers(title='subcommands', ... description='valid subcommands', ... help='additional help') &gt;&gt;&gt; subparsers.add_parser('foo') &gt;&gt;&gt; subparsers.add_parser('bar') &gt;&gt;&gt; parser.parse_args(['-h']) usage: [-h] {foo,bar} ... optional arguments: -h, --help show this help message and exit subcommands: valid subcommands {foo,bar} additional help One particularly effective way of handling sub-commands is to combine the use of the add_subparsers() method with calls to set_defaults() so that each subparser knows which Python function it should execute. For example: &gt;&gt;&gt; &gt;&gt;&gt; # sub-command functions &gt;&gt;&gt; def foo(args): ... print args.x * args.y ... &gt;&gt;&gt; def bar(args): ... print '((%s))' % args.z ... &gt;&gt;&gt; # create the top-level parser &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; subparsers = parser.add_subparsers() &gt;&gt;&gt; &gt;&gt;&gt; # create the parser for the &quot;foo&quot; command &gt;&gt;&gt; parser_foo = subparsers.add_parser('foo') &gt;&gt;&gt; parser_foo.add_argument('-x', type=int, default=1) &gt;&gt;&gt; parser_foo.add_argument('y', type=float) &gt;&gt;&gt; parser_foo.set_defaults(func=foo) &gt;&gt;&gt; &gt;&gt;&gt; # create the parser for the &quot;bar&quot; command &gt;&gt;&gt; parser_bar = subparsers.add_parser('bar') &gt;&gt;&gt; parser_bar.add_argument('z') &gt;&gt;&gt; parser_bar.set_defaults(func=bar) &gt;&gt;&gt; &gt;&gt;&gt; # parse the args and call whatever function was selected &gt;&gt;&gt; args = parser.parse_args('foo 1 -x 2'.split()) &gt;&gt;&gt; args.func(args) 2.0 &gt;&gt;&gt; &gt;&gt;&gt; # parse the args and call whatever function was selected &gt;&gt;&gt; args = parser.parse_args('bar XYZYX'.split()) &gt;&gt;&gt; args.func(args) ((XYZYX)) This way, you can let parse_args() do the job of calling the appropriate function after argument parsing is complete. Associating functions with actions like this is typically the easiest way to handle the different actions for each of your subparsers. However, if it is necessary to check the name of the subparser that was invoked, the dest keyword argument to the add_subparsers() call will work: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; subparsers = parser.add_subparsers(dest='subparser_name') &gt;&gt;&gt; subparser1 = subparsers.add_parser('1') &gt;&gt;&gt; subparser1.add_argument('-x') &gt;&gt;&gt; subparser2 = subparsers.add_parser('2') &gt;&gt;&gt; subparser2.add_argument('y') &gt;&gt;&gt; parser.parse_args(['2', 'frobble']) Namespace(subparser_name='2', y='frobble') 15.4.5.2. FileType objects¶ class argparse.FileType(mode='r', bufsize=None)¶ The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument(). Arguments that have FileType objects as their type will open command-line arguments as files with the requested modes and buffer sizes: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--output', type=argparse.FileType('wb', 0)) &gt;&gt;&gt; parser.parse_args(['--output', 'out']) Namespace(output=&lt;open file 'out', mode 'wb' at 0x...&gt;) FileType objects understand the pseudo-argument '-' and automatically convert this into sys.stdin for readable FileType objects and sys.stdout for writable FileType objects: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('infile', type=argparse.FileType('r')) &gt;&gt;&gt; parser.parse_args(['-']) Namespace(infile=&lt;open file '&lt;stdin&gt;', mode 'r' at 0x...&gt;) 15.4.5.3. Argument groups¶ ArgumentParser.add_argument_group(title=None, description=None)¶ By default, ArgumentParser groups command-line arguments into “positional arguments” and “optional arguments” when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', add_help=False) &gt;&gt;&gt; group = parser.add_argument_group('group') &gt;&gt;&gt; group.add_argument('--foo', help='foo help') &gt;&gt;&gt; group.add_argument('bar', help='bar help') &gt;&gt;&gt; parser.print_help() usage: PROG [--foo FOO] bar group: bar bar help --foo FOO foo help The add_argument_group() method returns an argument group object which has an add_argument() method just like a regular ArgumentParser. When an argument is added to the group, the parser treats it just like a normal argument, but displays the argument in a separate group for help messages. The add_argument_group() method accepts title and description arguments which can be used to customize this display: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG', add_help=False) &gt;&gt;&gt; group1 = parser.add_argument_group('group1', 'group1 description') &gt;&gt;&gt; group1.add_argument('foo', help='foo help') &gt;&gt;&gt; group2 = parser.add_argument_group('group2', 'group2 description') &gt;&gt;&gt; group2.add_argument('--bar', help='bar help') &gt;&gt;&gt; parser.print_help() usage: PROG [--bar BAR] foo group1: group1 description foo foo help group2: group2 description --bar BAR bar help Note that any arguments not in your user-defined groups will end up back in the usual “positional arguments” and “optional arguments” sections. 15.4.5.4. Mutual exclusion¶ ArgumentParser.add_mutually_exclusive_group(required=False)¶ Create a mutually exclusive group. argparse will make sure that only one of the arguments in the mutually exclusive group was present on the command line: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; group = parser.add_mutually_exclusive_group() &gt;&gt;&gt; group.add_argument('--foo', action='store_true') &gt;&gt;&gt; group.add_argument('--bar', action='store_false') &gt;&gt;&gt; parser.parse_args(['--foo']) Namespace(bar=True, foo=True) &gt;&gt;&gt; parser.parse_args(['--bar']) Namespace(bar=False, foo=False) &gt;&gt;&gt; parser.parse_args(['--foo', '--bar']) usage: PROG [-h] [--foo | --bar] PROG: error: argument --bar: not allowed with argument --foo The add_mutually_exclusive_group() method also accepts a required argument, to indicate that at least one of the mutually exclusive arguments is required: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser(prog='PROG') &gt;&gt;&gt; group = parser.add_mutually_exclusive_group(required=True) &gt;&gt;&gt; group.add_argument('--foo', action='store_true') &gt;&gt;&gt; group.add_argument('--bar', action='store_false') &gt;&gt;&gt; parser.parse_args([]) usage: PROG [-h] (--foo | --bar) PROG: error: one of the arguments --foo --bar is required Note that currently mutually exclusive argument groups do not support the title and description arguments of add_argument_group(). 15.4.5.5. Parser defaults¶ ArgumentParser.set_defaults(**kwargs)¶ Most of the time, the attributes of the object returned by parse_args() will be fully determined by inspecting the command-line arguments and the argument actions. set_defaults() allows some additional attributes that are determined without any inspection of the command line to be added: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('foo', type=int) &gt;&gt;&gt; parser.set_defaults(bar=42, baz='badger') &gt;&gt;&gt; parser.parse_args(['736']) Namespace(bar=42, baz='badger', foo=736) Note that parser-level defaults always override argument-level defaults: &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', default='bar') &gt;&gt;&gt; parser.set_defaults(foo='spam') &gt;&gt;&gt; parser.parse_args([]) Namespace(foo='spam') Parser-level defaults can be particularly useful when working with multiple parsers. See the add_subparsers() method for an example of this type. ArgumentParser.get_default(dest)¶ Get the default value for a namespace attribute, as set by either add_argument() or by set_defaults(): &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', default='badger') &gt;&gt;&gt; parser.get_default('foo') 'badger' 15.4.5.6. Printing help¶ In most typical applications, parse_args() will take care of formatting and printing any usage or error messages. However, several formatting methods are available: ArgumentParser.print_usage(file=None)¶ Print a brief description of how the ArgumentParser should be invoked on the command line. If file is None, sys.stdout is assumed. ArgumentParser.print_help(file=None)¶ Print a help message, including the program usage and information about the arguments registered with the ArgumentParser. If file is None, sys.stdout is assumed. There are also variants of these methods that simply return a string instead of printing it: ArgumentParser.format_usage()¶ Return a string containing a brief description of how the ArgumentParser should be invoked on the command line. ArgumentParser.format_help()¶ Return a string containing a help message, including the program usage and information about the arguments registered with the ArgumentParser. 15.4.5.7. Partial parsing¶ ArgumentParser.parse_known_args(args=None, namespace=None)¶ Sometimes a script may only parse a few of the command-line arguments, passing the remaining arguments on to another script or program. In these cases, the parse_known_args() method can be useful. It works much like parse_args() except that it does not produce an error when extra arguments are present. Instead, it returns a two item tuple containing the populated namespace and the list of remaining argument strings. &gt;&gt;&gt; &gt;&gt;&gt; parser = argparse.ArgumentParser() &gt;&gt;&gt; parser.add_argument('--foo', action='store_true') &gt;&gt;&gt; parser.add_argument('bar') &gt;&gt;&gt; parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam']) (Namespace(bar='BAR', foo=True), ['--badger', 'spam']) Warning Prefix matching rules apply to parse_known_args(). The parser may consume an option even if it’s just a prefix of one of its known options, instead of leaving it in the remaining arguments list. 15.4.5.8. Customizing file parsing¶ ArgumentParser.convert_arg_line_to_args(arg_line)¶ Arguments that are read from a file (see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor) are read one argument per line. convert_arg_line_to_args() can be overridden for fancier reading. This method takes a single argument arg_line which is a string read from the argument file. It returns a list of arguments parsed from this string. The method is called once per line read from the argument file, in order. A useful override of this method is one that treats each space-separated word as an argument: def convert_arg_line_to_args(self, arg_line): return arg_line.split() 15.4.5.9. Exiting methods¶ ArgumentParser.exit(status=0, message=None)¶ This method terminates the program, exiting with the specified status and, if given, it prints a message before that. ArgumentParser.error(message)¶ This method prints a usage message including the message to the standard error and terminates the program with a status code of 2. 15.4.6. Upgrading optparse code¶ Originally, the argparse module had attempted to maintain compatibility with optparse. However, optparse was difficult to extend transparently, particularly with the changes required to support the new nargs= specifiers and better usage messages. When most everything in optparse had either been copy-pasted over or monkey-patched, it no longer seemed practical to try to maintain the backwards compatibility. The argparse module improves on the standard library optparse module in a number of ways including: Handling positional arguments. Supporting sub-commands. Allowing alternative option prefixes like + and /. Handling zero-or-more and one-or-more style arguments. Producing more informative usage messages. Providing a much simpler interface for custom type and action. A partial upgrade path from optparse to argparse: Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls. Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what was previously called options, now in argparse context is called args. Replace callback actions and the callback_* keyword arguments with type or action arguments. Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc). Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError. Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s. Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='&lt;the version&gt;'). Table Of Contents 15.4. argparse — Parser for command-line options, arguments and sub-commands 15.4.1. Example 15.4.1.1. Creating a parser 15.4.1.2. Adding arguments 15.4.1.3. Parsing arguments 15.4.2. ArgumentParser objects 15.4.2.1. prog 15.4.2.2. usage 15.4.2.3. description 15.4.2.4. epilog 15.4.2.5. parents 15.4.2.6. formatter_class 15.4.2.7. prefix_chars 15.4.2.8. fromfile_prefix_chars 15.4.2.9. argument_default 15.4.2.10. conflict_handler 15.4.2.11. add_help 15.4.3. The add_argument() method 15.4.3.1. name or flags 15.4.3.2. action 15.4.3.3. nargs 15.4.3.4. const 15.4.3.5. default 15.4.3.6. type 15.4.3.7. choices 15.4.3.8. required 15.4.3.9. help 15.4.3.10. metavar 15.4.3.11. dest 15.4.3.12. Action classes 15.4.4. The parse_args() method 15.4.4.1. Option value syntax 15.4.4.2. Invalid arguments 15.4.4.3. Arguments containing - 15.4.4.4. Argument abbreviations (prefix matching) 15.4.4.5. Beyond sys.argv 15.4.4.6. The Namespace object 15.4.5. Other utilities 15.4.5.1. Sub-commands 15.4.5.2. FileType objects 15.4.5.3. Argument groups 15.4.5.4. Mutual exclusion 15.4.5.5. Parser defaults 15.4.5.6. Printing help 15.4.5.7. Partial parsing 15.4.5.8. Customizing file parsing 15.4.5.9. Exiting methods 15.4.6. Upgrading optparse code Previous topic 15.3. time — Time access and conversions Next topic 15.5. optparse — Parser for command line options This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 15. Generic Operating System Services » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 25, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160708091922#index"
                   NS1:content=" jump to content my subreddits announcementsArtAskRedditaskscienceawwblogbookscreepydataisbeautifulDIYDocumentariesEarthPornexplainlikeimfivefoodfunnyFuturologygadgetsgamingGetMotivatedgifshistoryIAmAInternetIsBeautifulJokesLifeProTipslistentothismildlyinterestingmoviesMusicnewsnosleepnottheonionOldSchoolCoolpersonalfinancephilosophyphotoshopbattlespicsscienceShowerthoughtsspacesportstelevisiontifutodayilearnedTwoXChromosomesUpliftingNewsvideosworldnewsWritingPromptsedit subscriptions front -all -random | AskReddit -news -funny -videos -worldnews -todayilearned -pics -gaming -gifs -aww -movies -Showerthoughts -IAmA -mildlyinteresting -Jokes -science -nottheonion -LifeProTips -DIY -television -photoshopbattles -sports -OldSchoolCool -explainlikeimfive -TwoXChromosomes -Futurology -tifu -UpliftingNews -food -space -creepy -books -Music -dataisbeautiful -WritingPrompts -personalfinance -Documentaries -askscience -nosleep -EarthPorn -gadgets -history -Art -GetMotivated -listentothis -philosophy -InternetIsBeautiful -announcements -blog more » reddit.com embedded comments Want to join? Log in or sign up in seconds.| English limit my search to /r/embedded [-] use the following search parameters to narrow your results: subreddit:subreddit find submissions in &quot;subreddit&quot; author:username find submissions by &quot;username&quot; site:example.com find submissions from &quot;example.com&quot; url:text search for &quot;text&quot; in url selftext:text search for &quot;text&quot; in self post contents self:yes (or self:no) include (or exclude) self posts nsfw:yes (or nsfw:no) include (or exclude) results marked as NSFW e.g. subreddit:aww site:imgur.com dog see the search faq for details. advanced search: by author, subreddit... this post was submitted on 24 Jul 2015 5 points (86% upvoted) shortlink: remember mereset password login Submit a new link Submit a new text post embedded subscribeunsubscribe2,937 readers ~5 users here now Welcome to embeddit! Related sub-reddits: Hardware Arduino a community for 8 years message the moderators MODERATORS raphaelh CheesejaguarPIC16 about moderation team » discussions in /r/embedded &lt;&gt; X 5 points Self Learning - Device Drivers and RTOS 4 points · 1 comment RS-485 Token Ring 1 points CEVA Update the Deep Learning Software Framework for Embedded System 8 points · 2 comments Tuning the PID controller 0 points · 2 comments Reverse engineering embedded devices 5 points Future Electronics FEN-NXP-ARDUINO-PCB-R0 5 points · 11 comments Getting USB up and running (on STM32) 3 points · 9 comments Compact Flash Emulator? 5 points · 16 comments what's the best method to get familiar with hardcore microcontrollers? besides the datasheet 11 points · 9 comments zForth: tiny, embeddable, flexible, compact Forth scripting language for embedded systems This is an archived post. You won't be able to vote or comment. 4 5 6 Embedded Linux – mechanism for deploying firmware updates? (self.embedded) submitted 11 months ago by ralphisis I am considering developing on the Yocto project for an embedded Linux project (an industrial application) and I have a few questions for those with experience with embedded Linux in general -- Yocto experience a bonus. Just need to get an idea of what is being commonly done in firmware updates. I have a few requirements, that being authentication, a secure communications protocol, some type of rollback if the update failed. Also, if there is a way to gradually release the patch across the fleet of devices then that would also be interesting as I want to avoid bricked devices in the field. How do you deploy updates/patches to field devices today – and how long did it take to develop it? Are there any other considerations I am missing? 6 comments share all 6 comments sorted by: best topnewcontroversialoldrandomq&amp;a [–]bboozzoo 2 points3 points4 points 11 months ago (4 children) I am considering developing on the Yocto project for an embedded Linux project (an industrial application) and I have a few questions for those with experience with embedded Linux in general -- Yocto experience a bonus. Just need to get an idea of what is being commonly done in firmware updates. I have a few requirements, that being authentication, a secure communications protocol, some type of rollback if the update failed. Also, if there is a way to gradually release the patch across the fleet of devices then that would also be interesting as I want to avoid bricked devices in the field. How do you deploy updates/patches to field devices today – and how long did it take to develop it? Are there any other considerations I am missing? Firmware update is very much board dependant as it pretty much involves the whole stack starting from the CPU, going through the bootloader finishing up with system glue. It also depends on what kind of memory storage you use and how trusted it is as for instance raw NAND/NOR would usually be more trusted than a eMMC/SD/CF card as far as power outage is considered. There's also the question of how much flash does the board have. I've been working on embedded Linux applications for quite some time, and almost each time we had a different, platform or application tailored solution, however, since this was mostly networking equipment (not WiFi but rather 802.16 BS/CPE or some aviation system) the requirements and the high level process view remained the same. At least 2 firmware images, update switches them in round robin fashion. Each update involved a couple of steps (so that you get a general idea): obtain candaidate firmware checksumming optional decryption identify update partition write the firmware to proper location set the update flags &amp;&amp; reboot bootloader consults the update flags, fiddles with watchdog system boots on failure (ex. panic, or some critical service keeps failing) the wachdog is allowed to reset the system, bootloader then looks at CPU reset flags to indentify the reason for reset, and switches back to the previous partition on success the update flags are cleared, so the next reset will boot the updated partition This was done using, depending on the board, either a customized RedBoot (anyone remembers this one?) or U-Boot. The boards we used all had NAND flashes so you could be fairly certain that once a thing was written it was there (unlike SD/eMMC). Rootfs was also always mounted as RO, and there was a single user configuration partiton. Firmware download was never really performed autonomusly, an operator was usually involved at some stage of the process. My current candidate for a more unified update implementation is swupdate. There's also a corresponding meta-swupdate Yocto layer. Back in June, I've sent a series of patches that Stefano Babic was kind to pull in, that extended the syntax of sw-description file so that you can perform the dual-copy update scenario. swupdate has some nice features such as integration with u-boot (the main author is a Denx employee), support for different memory device (MTD, raw like /dev/sdx) &amp; stream processing, also a really nice update description format. I'm still in progress of getting this well integrated on BeagleBone Black (rootfs &amp; uboot env on eMMC), Wandboard (only SD card) and Gateworks GW54xx (NAND flash with uboot+env &amp; ubifs paritions). Feel free to ping me on #yocto on freenode (I use the same nick as here on reddit) or just pm me here. BTW. since July 2014 uboot supports secure boot and a bit later encrypted configuration has been added, these seem like nice features for use in update process as well. permalink embed save give gold [–]ralphisis[S] 0 points1 point2 points 11 months ago (3 children) Thanks for the description and pointing me to swupdate. Do you know if there is a way to remotely deploy updates en masse rather than 1 by 1? I'm looking for a way to do this across a larger fleet, but in a controlled fashion. permalink embed save parent give gold [–]bboozzoo 1 point2 points3 points 11 months ago (2 children) I'm not aware of any ready solution for mass updates. In one project we just implmented a simple call-home mechanism to check the current version number and if needed download a complete image and run the update. In yet another one, we had both, a push notification (that's because we used a message broker for overall communication) and simple polling. Keep in mind that you still need some sort of back channel for notification about update success/failure. BTW. forgot to write that you can build package feeds with Yocto, similar to what Fedora/Ubuntu or other distributions do. Once that is made available, you can update or install individual packages. I haven't really used that as I prefer using complete firmware update images and fix only a single problem in case of failure. BTW2. there's also Ubuntu Snappy, but having played with it for a while, their OOTB board support is limited, rootfs is significantly larger than what I can obtain with Yocto (even without any special tuning) and snappy packaging policy is ridiculous (last time I checked you had to go through Ubuntu Software Store and I'm guessing patching snappy to work with your self-hosted store would break Canonical's licensing or something). permalink embed save parent give gold [–]ralphisis[S] -1 points0 points1 point 11 months ago (1 child) @bboozzoo Thanks a lot! This is really helpful. Any other distributions I should be aware of aside from Ubuntu Snappy? permalink embed save parent give gold [–]bboozzoo 1 point2 points3 points 11 months ago (0 children) Not that I'm aware of. Snappy is somewhat unique among prebuilt binary distros. The rest is just rebuilds of your usual desktop distro for ARM (and usually ony ARM). They are ok for prototyping, but I'd rather base a product on something that I'm 100% in control of, and that means Yocto or buildroot these days. Before, like 10 years back or so, I've seen people use Gentoo for embedded due to wide arch support and a lively connunity. Though I'm not sure what is the current state of this. I'm guessing these days I'd bet on Yocto as it has all the needed vendor awareness, just look ath the mailing list and see who is contirbuting the patches. It's not only Intel, but Freescale, TI, Windriver (though it's Intel at this point AFAIK), Atmel. permalink embed save parent give gold [–]albinofrenchy 1 point2 points3 points 11 months ago (0 children) A lot of this kind of thing greatly depends on your usage and your device. If you're going to add kernel modules, don't compile them into the kernel; so you can have the system init load them in. This also means you can just backup those files and copy in new ones; and on restart the updates are in place. Same basic strategy for userspace apps. You can also do updates via the boot loader. Uboot has some network capabilities I believe you might be able to use. Security here is going to be largely hand rolled if you need something stronger than ssh/Getty login. You could hit a https site on startup maybe too if the device is networked. Signed images on a usb could work too, but again that is only as secure as the time/expertise put into it. permalink embed save give gold about blog about source code advertise jobs help site rules FAQ wiki reddiquette transparency contact us apps &amp; tools Reddit for iPhone Reddit for Android mobile website buttons &lt;3 reddit gold redditgifts Use of this site constitutes acceptance of our User Agreement and Privacy Policy (updated). © 2016 reddit inc. All rights reserved. REDDIT and the ALIEN Logo are registered trademarks of reddit inc. π Rendered by PID 7374 on app-408 at 2016-07-08 07:07:38.492796+00:00 running b429c4e country code: RW. No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. discuss this ad on reddit "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160824110755#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Liudr's Blog Arduino raspberry pi circuits programming python Linux and physics Search: Home About Buy Donate Gadgets SDI-12 USB adapter phi-panel Phi-panel firmware upgrade Phi-connect Libraries Download Phi_big_font Phi_buttons phi_interfaces Phi_morse Phi_prompt Phi_prompt UI PDK Phi_super_font Phi-menu Shields SDI-12 data logging shield Phi-2 shield Phi-1 shield Phi-3 shield Posts Comments Arduino Announcements Gadgets Coding Sensors SDI-12 Physics Python Raspberry pi Eagle ← Happy New Year! phi_interfaces library beta release → sprintf January 16, 2012 22 Comments I notice that lots of arduino fans are not coming from a C programming background. Even the C++ people may not know such a neat C feature, the sprintf function. I use it so often in my codes and libraries thus it demands a small introduction. The following is a link to the sprintf function (I’ll be adding this link to my sample codes): http://www.cplusplus.com/reference/clibrary/cstdio/sprintf/ Essentially the sprintf function takes in a few parameters, such as integers, floats etc. and then follow a format string, output a formatted string that involves the parameters. Since arduino doesn’t print float (to reduce compiled file size), you may need to print two integers for a float. Say if I want to print on LCD the current time in the following format: 13:02:00 I have three variables: int hour=13; int min=2; int sec=0; If I do the simple print, I have to do the following: lcd.print(hour); lcd.print(&quot;:&quot;); lcd.print(min); lcd.print(&quot;:&quot;); lcd.print(sec); And the result is less than perfect: 13:2:0 So how do I demand the formatting of the numbers to have a maximal 2 integer digits and no missing leading zeros? I have to tell the print function so by means of a format string. Let’s start from simple and add all details step-by-step: A format string is just a string. First I want to output integer (not float or else), so integer output is “%d”, or “%ld” for long integer. Next I want 2 digit integer so “%2d”, or “%4d” if I wanted 4 digit integer. Next I want to keep leading zero so my time looks right, so”%02d”. If I used “%2d” then leading spaces are provided so I get 13:(space)2:(space)0 Now I’m done with format string, it’s time to call the sprintf: char[9] buffer=&quot;&quot;; ///&lt; This is the buffer for the string the sprintf outputs to sprintf(buffer, &quot;%02d:%02d:%02d&quot;, hour, min, sec); ///&lt; This has 3 2-digit integers with leading zeros, separated by &quot;:&quot; . The list of parameters, hour, min, sec, provides the numbers the sprintf prints out with. lcd.print(buffer); ///&lt; You will get &quot;13:02:00&quot; This will get you: 13:02:00 From the above example you can see that you can mix regular texts such as “:” or else with the format string in a complex output. Say we want to output a count-down number like “You have XX minutes left.”, then we do: sprintf(buffer, &quot;You have %2d minutes left.&quot;, min); You always need to have a buffer char array long enough to hold the output. Count the characters before you define the length of the buffer array and add 1 to the count for string terminator. For the above string, the output is 25 characters, the “%2d” counts as 2 characters. Then you do: char [26] buffer=&quot;&quot;; It’s worth mentioning that sprintf is just for the look. There is no reason to use it if you don’t care about the look of your output. Now that you have read so much about sprintf, you may also want to know sscanf, which is the opposite. It picks out number from a complex string so if you have a string like “13:02:00”, you can extract hour, min, and sec from the string. This is especially useful when accepting parameters from serial port. If you want to know about this function, read here or reply to this post saying you are interested in a post about the sscanf. http://www.cplusplus.com/reference/clibrary/cstdio/sscanf/ Share this: 1Share on Facebook (Opens in new window)1 Click to share on Twitter (Opens in new window) Click to share on Reddit (Opens in new window) Click to Press This! (Opens in new window) Click to print (Opens in new window) Click to email (Opens in new window) Like this: Like Loading... Related Optimizing your programIn &quot;Arduino&quot; sscanfIn &quot;Arduino&quot; Arduino Emulation on PCIn &quot;Arduino&quot; Filed under Arduino, Coding Tagged with sprintf 22 Responses to sprintf ahdavidson says: January 18, 2012 at 7:40 am But be aware that floating point is not fully implemented on Arduino, so using %f does not work! Reply liudr says: January 18, 2012 at 7:51 am Thanks for the reminder! That’s right. I’ll change the example to %ld for long integer and add your comment. There is a way to enable the %f but it will increase the file compile size by quite a bit and I don’t remember how to do it anymore. Reply ahdavidson says: January 18, 2012 at 8:08 am Somewhere in the Arduino forum, I remember reading a lot about this issue, so there might some useful links there. AndrewK says: October 19, 2012 at 8:53 pm Is that why my code isn’t working.. Thanks:) Reply liudr says: October 23, 2012 at 11:39 pm I’m a little confused. Which code was that? AndrewK says: October 24, 2012 at 6:33 am I was using %f in my code and only getting ? in the output, I hadn’t realized that it wasn’t handled. The code I mentioned is just my current project, not something I posted looking for help on:) liudr says: October 24, 2012 at 10:03 am Exactly AndrewK. The sprintf doesn’t understand %f since the default compiling option won’t include that for saving memory. You will get a “?”. Roy says: January 28, 2012 at 5:45 pm Liudr, Nice Post on the sprintf….if you have the time/inclination I would thoroughly enjoy short tutorial from you on the scanf as well. I find your use of examples very helpful. Reply liudr says: January 28, 2012 at 8:45 pm Roy, I’m glad that you liked the tutorial. I’ll get started with the sscanf tutorial. It’s just another very useful function to handle strings. You can send human-readable texts from PC via serial port to arduino and arduino can use sscanf to turn the texts into numbers. Reply Pingback: sscanf « Liudr's Blog michael_x says: March 24, 2012 at 1:49 pm With Arduino not caring about where variables (and const literals) reside, it’s even slightly easier to define the buffer right: char* buffer= “00:00:00″; // the content will be overritten, just to avoid wrong size counting sprintf(buffer,”%02d:%02d:%02d”,h,m,s); Reply liudr says: March 24, 2012 at 6:08 pm Good idea. Just be on the cautious side of this practice. I can recall many times I started with a smaller buffer and grew beyond its limits, leading to endless headache in debugging. Reply michael_x says: March 25, 2012 at 2:32 pm You’re right, but that’s the same with your char buffer[9]; No one stops you to strcpy(buffer, “This is too long”); Weird things will happen 😉 Try this on Arduino : int a = 0; char buffer[4]; int c = 0; void setup() { strcpy(buffer, “Hello world”); Serial.begin(9600); } void loop() { delay(2000); Serial.println(buffer); Serial.print(a); Serial.print(c); a++; c–; } The only thing to recognize always is the word “Hell” liudr says: March 25, 2012 at 2:42 pm Yeah, in old C world you are responsible of “wiping your own ass”. The C++ changed it to “all destructed asses are automatically wiped”. The memory allocation will strongly influence how your code works since you are assuming continuous memory on the variables. In a different system where data and code are stored in the same space and without protection, you will be overwriting your code with that strcpy. Virus and encryption people do that to cover their tracks from sourcers. Been a while since I used the term sourcer. liudr says: March 25, 2012 at 2:49 pm BTW, GNU C has this function that ANSI C doesn’t yet have. Check it out. int strlcpy(char *dst, const char *src, int siz) It’s safer for the ass especially when you pass strlen(buffer] as siz parameter😉 bperrybap says: May 3, 2012 at 12:27 am This is very bad practice. While it often works, it is not guaranteed to work. In fact the C standard says that the behavior of writing to a read only string is undefined. See this for some additional information about some of the issues and how to work around it by using a different declaration. http://stackoverflow.com/questions/1405594/writing-into-c-string — bill Reply liudr says: May 3, 2012 at 7:12 am Good eye. I didn’t see the star. Without the star this would be fine and with the star I think verbose mode should complain that line. michael_x says: May 6, 2012 at 12:25 pm @bperrybap: &gt;This is very bad practice. You’re absolutely right. I was astonished that it compiles and works on an Arduino without warning. Replacing char* buffer= “00:00:00″; by char buffer[]= “00:00:00″; is definitely better: E.g. sizeof(buffer) gives a correct result. Thanks for your additional link. Anupam says: June 5, 2014 at 3:34 am thanks sir,it really helped me to understand sprintf…….. Reply Abe says: December 9, 2014 at 10:17 am FYI: your code renders with smart quotes, so when I coppied and pasted a snippet, the double quotes were the wrong character and caused an error. Took a while to track it down, so I thought I’d mention it. But this is not a complaint–thanks for the good info! Reply liudr says: December 9, 2014 at 1:03 pm Thanks Abe. WordPress must have updated since I posted it. It’s doing the smart quote. I had to reform the code as PRE to get rid of the smart quote. Reply Abe says: December 9, 2014 at 3:04 pm Nice! That will help the next person. Thanks. Leave a Reply Cancel reply Fill in your details below or click an icon to log in: Gravatar Email (required) (Address never made public) Name (required) Website Gravatar kinyarwandablog: You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Support my open source arduino libraries, python code, and insightful blogs! 2016-02-05-100346_1680x1050_scrot USB dongle dropbox dev-3 74HC4050 twisted ICSP top Programmer_developer_edition Screen Capture 20140818_140820 Rotary encoder 4 phi-2 20X4 V2 assembled ??????????????????????????????? phi-panel backpack 20X4 rotary encoder keypad front long menu angle DSC03181 faceplate16X2-2 Enclosure05 optiloader_setup Create a free website or blog at WordPress.com. Post to Cancel Post to Cancel Follow New posts from this site will now appear in your Reader Liudr's Blog Customize Follow Copy shortlink Report this content View Site in the Reader Manage Sites I Follow Collapse this bar %d bloggers like this: Skip to toolbar My Site kinyarwandablogkinyarwandablog.wordpress.com + Add New Site Stats Stats PlanFree Publish Blog PostsAdd PagesAdd Personalize ThemesCustomize Menus Configure Sharing PeopleAdd DomainsAdd Settings Reader Streams Followed SitesManage Discover Search Recommendations My Likes Notifications Me kinyarwandablog@kinyarwandablog Sign Out Profile My Profile Account Settings Billing History Security Notifications Special Get Apps Next Steps Help Log Out Send to Email Address loading Cancel Post was not sent - check your email addresses! Email check failed, please try again Sorry, your blog cannot share posts by email. :) Like Reblog Like Be the first to like this. All Unread Comments Follows Likes  Older than a month  Your stats are booming! kinyarwandablog is getting lots of traffic.  You've made 5 posts on kinyarwandablog. " />
  <RDF:Description RDF:about="urn:scrapbook:item20160717092814#index"
                   NS1:content=" bannerimage Animated Knots by Grog Follow animatedknots on Twitter TIE KNOTS THE FUN AND EASY WAY Better to know a knot and not need it, than need a knot and not know it. indeximage Home indeximage By Name indeximage Arborist indeximage Basics indeximage Boating indeximage Climbing indeximage Decorative indeximage Fishing indeximage Household indeximage Neckties indeximage Rescue indeximage Rope Care indeximage Scouting indeximage Splicing indeximage Surgical indeximage Various indeximage End Loops indeximage Mid-Loops indeximage Bends indeximage Hitches indeximage Mats indeximage Stoppers indeximage Slide/Grip indeximage Store Celtic Knot Decorative Index Decorative Options Grog's Sliding Splice Turk's Head Fiador Knot Lanyard Knot, Diamond Celtic Knot Mat Masthead Knot Mat Carrick Bend Mat Ocean Plait Mat Wall Knot Double Matthew Walker Wall &amp; Crown Monkey's Fist Cobra Lanyard Knot Crown Sinnet Chain Sinnet Braid Single Rope Three Strand Braid (1) Three Strand Braid (2) French Sinnet One French Sinnet Two Square Sinnet Four Strand #2974 Knot Terminology Knot &amp; Rope Safety Rope Properties Contact About Facebook Fast Medium Slow Loop Normal Mirror Animation: Celtic Knot Tying (Decorative)Animation: Celtic Knot Tying Celtic Knot Tying (Decorative) 1 2 3 4 5 6 7 8 9 10 11 Celtic Knot Tying Use a strict under and over sequence to tie a simple Celtic Knot. Then follow the first strand round the same path to finish at the original starting position. Celtic Knot Details Origin: Our simple example of a Celtic Knot appears to be identical to the starting layout for Ashley's Six-Stranded Platted Mat (ABOK # 2256, p 365), except that we used his starting position and followed the pattern round a second time whereas Ashley shows it as the basis for a more complicated mat. Celtic Knots: Many different patterns and designs claim to be Celtic Knots. They vary in size and complexity with shapes that include rectangles, squares, triangles and circles. We included this simple example here because one writer asked us why we had selected it as the icon for our decorative knots section but failed to show how to tie it! Additional Turns: Only two complete turns are shown in the animation and space remains between the turns. For a more pleasing appearance, one or more additional turns are added using the same technique. The entire mat is then tightened to eliminate space between the turns. Uses: Small Celtic Knot mats make excellent tablemats and hot pads. Ashley provides a huge selection of designs, some of which are very elaborate with many crossings. Some of the larger versions make useful stair treads and chair covers. Finishing the Mat: The two ends can be secured in one of several ways. When the mat is purely decorative, and the material is one that melts, the two ends can be heated in a flame and fused together. However, to do this an end has to be passed across other turns. The mat then has a thicker section and is less suitable as a tablemat. Another way to finish the mat is to attach each end to the neighboring turn using needle and thread, glue, or twine and constrictor knots. Whichever method is chosen, the junction should be concealed under another turn as demonstrated in the animation. Disclaimer: Any activity that involves ropes is potentially hazardous. Lives may be at risk - possibly your own. Considerable attention and effort have been made to ensure that these descriptions are accurate. However, many critical factors cannot be controlled, including: the choice of materials; the age, size, and condition of ropes; and the accuracy with which these descriptions have been followed. No responsibility is accepted for incidents arising from the use of this material. Copyright © 2007 - 2016 All Rights Reserved Grog LLC Switch to: Mobile Version Copyright and Trademark Version 6.0 Jan 1, 2016 Get Our Apps adimage adimage adimage Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like Share "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160617103623#index"
                   NS1:content=" import urllib import urllib2 url = 'http://www.someserver.com/cgi-bin/register.cgi' values = {'name' : 'Michael Foord', 'location' : 'Northampton', 'language' : 'Python' } data = urllib.urlencode(values) req = urllib2.Request(url, data) response = urllib2.urlopen(req) the_page = response.read() "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705102903#index"
                   NS1:content=" ↓ Skip to Main Content armhf.com Expanding Linux Partitions: Part 2 of 2 Home Boards BeagleBone BeagleBone Black ODROID-XU Wandboard HOWTO Downloads Accessories Home › BeagleBone Black › Expanding Linux Partitions: Part 2 of 2 Expanding Linux Partitions: Part 2 of 2 Posted on May 11, 2013 by John Clark — 18 Comments ↓ As shown in Part 1 of this article, extracting Linux from a pre-made .img file can result in unused space at the end of the uSD card. Depending on the size of the uSD card, this could leave a significant amount of space left unused. This article shows how to repartition the uSD card to utilize all of the space on the uSD card. This can be done on an unmounted filesystem or even on a live filesystem. In the example below, the live filesystem of a BeagelBone Black (running the Debian Wheezy image) will be resized to take advantage of the full 4GB of space available on the uSD card used in this example. Step 1: Start fdisk To get started, list the volumes available on a BeagleBone Black that is booted from a uSD card: root@debian-armhf:/# ls -l /dev/mmcblk* brw-rw---T 1 root floppy 179, 0 Jan 1 2000 /dev/mmcblk0 brw-rw---T 1 root floppy 179, 1 Jan 1 2000 /dev/mmcblk0p1 brw-rw---T 1 root floppy 179, 2 Jan 1 2000 /dev/mmcblk0p2 brw-rw---T 1 root floppy 179, 8 Jan 1 2000 /dev/mmcblk1 brw-rw---T 1 root floppy 179, 16 Jan 1 2000 /dev/mmcblk1boot0 brw-rw---T 1 root floppy 179, 24 Jan 1 2000 /dev/mmcblk1boot1 brw-rw---T 1 root floppy 179, 9 Jan 1 2000 /dev/mmcblk1p1 brw-rw---T 1 root floppy 179, 10 Jan 1 2000 /dev/mmcblk1p2 The listing above shows an external uSD card is currently booted as indicated by the /dev/mmcblk0 entries and the lack of /dev/mmcblk0boot entries. When booted from the internal eMMC, the device with the /dev/mmcblk1boot entries would instead be at the device zero location as shown here: root@debian-armhf:/# ls -l /dev/mmcblk* brw-rw---T 1 root floppy 179, 0 Jan 1 2000 /dev/mmcblk0 brw-rw---T 1 root floppy 179, 1 Jan 1 2000 /dev/mmcblk0p1 brw-rw---T 1 root floppy 179, 16 Jan 1 2000 /dev/mmcblk0boot0 brw-rw---T 1 root floppy 179, 24 Jan 1 2000 /dev/mmcblk0boot1 brw-rw---T 1 root floppy 179, 2 Jan 1 2000 /dev/mmcblk0p2 brw-rw---T 1 root floppy 179, 8 Jan 1 2000 /dev/mmcblk1 brw-rw---T 1 root floppy 179, 9 Jan 1 2000 /dev/mmcblk1p1 brw-rw---T 1 root floppy 179, 10 Jan 1 2000 /dev/mmcblk1p2 To get started, run fdisk /dev/mmcblk0 to examine the partitioning of the external uSD card that is currently booted: root@debian-armhf:/# fdisk /dev/mmcblk0 Command (m for help): p Disk /dev/mmcblk0: 3947 MB, 3947888640 bytes 4 heads, 16 sectors/track, 120480 cylinders, total 7710720 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x80000000 Device Boot Start End Blocks Id System /dev/mmcblk0p1 * 2048 4095 1024 1 FAT12 /dev/mmcblk0p2 4096 3751935 1873920 83 Linux Command (m for help): Take a moment to examine what fdisk is reporting. The first line indicates that the uSD card is 3947888640 bytes in size. The 4th line reports the sector size to be 512 bytes. Some quick math shows that 3947888640 bytes / 512 bytes per sector = 7710720 sectors as is also reported on the second line. The default “block” size is 1024 bytes, but it does not actually report this unit anywhere. The Start and End columns are reporting 512 byte sectors, and the Blocks column is reporting 1024 byte blocks. The way this .img is partitioned makes the relationship easy to see in this case, but it would not be immediately apparent if this were a large hard disk and the numbers were not as magic. The starting block of the partition table at position 2048 reveals that blocks 0-2047 are not being used for user data. This amounts to a full megabyte (2048 * 512 bytes per block = 1048576 bytes), and this is the default of fdisk. The first partition is 2048 sectors in size, or 1024K, which confirms the block size being 1K. To calculate the total size of the space used on the disk, there are 2048 sectors at the head reserved for partitioning, 2048 sectors in mmcblk0p1, and 3,751,936 sectors in mmcblk0p2 for a total of 3,756,032 sectors. With each sector using 512 bytes, this totals 1,923,088,384 bytes. The choice of 1,923,088,384 bytes was used to make this image the exact size of the BeagleBone’s available eMMC space (note that 1,923,088,384 bytes / 1024^2 = 1834 MB). It is also a good size because not all external 2 GB uSD cards are exactly 2048 * 1024^2 in size. Having it a bit under 2 GB makes it a sure fit. Repartitioning the disk is rather easy since fdisk will prompt with smart default choices. The steps below will begin by deleting partition 2, then recreate it as a larger size, and finally write the new table to the disk only at the end. Notice the emphasis on the last part: No changes are actually committed to disk along the way — only by pressing ‘w’ at the end will cause changes to be written. If you make a mistake or panic, just hit ‘q’ to quit and no changes will have been made. Step 2: Delete Partition 2 Press ‘d’ for delete and ‘2’ for partition 2. Command (m for help): p Disk /dev/mmcblk0: 3947 MB, 3947888640 bytes 4 heads, 16 sectors/track, 120480 cylinders, total 7710720 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x80000000 Device Boot Start End Blocks Id System /dev/mmcblk0p1 * 2048 4095 1024 1 FAT12 /dev/mmcblk0p2 4096 3751935 1873920 83 Linux Command (m for help): d Partition number (1-4): 2 Command (m for help): p Disk /dev/mmcblk0: 3947 MB, 3947888640 bytes 4 heads, 16 sectors/track, 120480 cylinders, total 7710720 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x80000000 Device Boot Start End Blocks Id System /dev/mmcblk0p1 * 2048 4095 1024 1 FAT12 Command (m for help): Step 3: Recreate Partition 2 Press ‘n’ for new, ‘p’ for primary, and ‘2’ for partition 2. Specify start and end sectors for the new partition — just select the default values by pressing enter. In fact, outside of the the first ‘n’ they were all default choices and pressing enter alone to confirm the choice is all that is needed. Command (m for help): n Partition type: p primary (1 primary, 0 extended, 3 free) e extended Select (default p): p Partition number (1-4, default 2): 2 First sector (4096-7710719, default 4096): Using default value 4096 Last sector, +sectors or +size{K,M,G} (4096-7710719, default 7710719): Using default value 7710719 Command (m for help): p Disk /dev/mmcblk0: 3947 MB, 3947888640 bytes 4 heads, 16 sectors/track, 120480 cylinders, total 7710720 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x80000000 Device Boot Start End Blocks Id System /dev/mmcblk0p1 * 2048 4095 1024 1 FAT12 /dev/mmcblk0p2 4096 7710719 3853312 83 Linux Command (m for help): That is it! Select ‘w’ to commit the changes to the uSD card. Notice that the partition table in this example was “busy” so a reboot was needed to cause the changes to be reflected. Even if it were not busy, it seems like it could be a good idea to reboot at this point if you want to be extra safe. Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy. The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks. root@debian-armhf:/# reboot Step 4: Expand the Filesystem This is the last step. Now that the second partition is larger, expand the filesystem to match the larger partition using resize2fs. root@debian-armhf:/# df Filesystem 1K-blocks Used Available Use% Mounted on rootfs 1811704 740184 977824 44% / /dev/root 1811704 740184 977824 44% / devtmpfs 253920 0 253920 0% /dev tmpfs 50816 216 50600 1% /run tmpfs 5120 0 5120 0% /run/lock tmpfs 101620 0 101620 0% /run/shm /dev/mmcblk0p1 1004 474 530 48% /boot/uboot root@debian-armhf:/# root@debian-armhf:/# resize2fs /dev/mmcblk0p2 resize2fs 1.42.5 (29-Jul-2012) Filesystem at /dev/mmcblk0p2 is mounted on /; on-line resizing required old_desc_blocks = 1, new_desc_blocks = 1 The filesystem on /dev/mmcblk0p2 is now 963328 blocks long. root@debian-armhf:/# df Filesystem 1K-blocks Used Available Use% Mounted on rootfs 3761680 741096 2851404 21% / /dev/root 3761680 741096 2851404 21% / devtmpfs 253920 0 253920 0% /dev tmpfs 50816 216 50600 1% /run tmpfs 5120 0 5120 0% /run/lock tmpfs 101620 0 101620 0% /run/shm /dev/mmcblk0p1 1004 474 530 48% /boot/uboot root@debian-armhf:/# Summary All of the space on the uSD card is now available for use. To recap: # fdisk /dev/mmcblk0 d 2 n p 2 4096 w # reboot # resize2fs /dev/mmcblk0p2 Part 1 ‹ BeagleBone Black GA Angstrom Image Using BeagleBone Black GPIOs › Posted in BeagleBone Black, eMMC, HowTo, Partitioning In Archive June 2013 May 2013 April 2013 © 2015 armhf.com ↑ We were unable to load Disqus. If you are a moderator please see our troubleshooting guide. 18 comments Comments ARMHF Community Login Disqus Facebook Twitter Google 1 Recommend Recommended 1 Discussion Recommended! Recommending means this is a discussion worth sharing. It gets shared to your followers' Disqus feeds, and gives the creator kudos! Find More Discussions Share Share this discussion on Twitter Facebook Sort by Newest Best Newest Oldest Avatar Join the discussion… in this conversation ⬇ Drag and drop your images here to upload them. Media preview placeholder Attach Log in with or sign up with Disqus or pick a name Disqus is a discussion network Disqus never moderates or censors. The rules on this community are its own. Your email is safe with us. It's only used for moderation and optional notifications. Don't be a jerk or do anything illegal. Everything is easier that way. Read full terms and conditions By signing up, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. By posting, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. I'd rather post as a guest − + Avatar Tamer • 2 years ago Hi, Thank you for these instructions. I am using BBB Rev C booting from microSD that is 16GB in size. I followed it, but I see something strange when I issue df -H: Filesystem Size Used Avail Use% Mounted on rootfs 3.7G 1.6G 2.0G 45% / udev 11M 0 11M 0% /dev tmpfs 105M 697k 104M 1% /run /dev/disk/by-uuid/b0959813-cfcf-46c4-9b09-e4573ac30ac5 3.7G 1.6G 2.0G 45% / tmpfs 261M 0 261M 0% /dev/shm tmpfs 261M 0 261M 0% /sys/fs/cgroup tmpfs 105M 0 105M 0% /run/user tmpfs 5.3M 0 5.3M 0% /run/lock /dev/mmcblk1p1 101M 76M 26M 75% /boot/uboot /dev/mmcblk0p1 1.1M 484k 545k 48% /media/boot /dev/mmcblk0p2 16G 291M 15G 2% /media/rootfs Notice I see a mount point mounted on &quot;/media/rootfs&quot;. This is the one that is getting resized. But that is not the one that I running from. I am running from the one mounted on &quot;/&quot; What am I doing wrong? Thank you see more 0 • Reply • Share › Twitter Facebook Link − + Avatar fxam • 2 years ago Thanks it's working! I think the summary recap should add a 'reboot' command after 'w'. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Bozont • 2 years ago Thank you! Resized my BBB-s SD partitions in 2 minutes! Very good tutorial! see more 0 • Reply • Share › Twitter Facebook Link − + Avatar alvaro • 2 years ago Hi, i have a question, all the process must be done from the sd? i do this question because i can see the user that you have used to do the tutorial, and this is root@debian-armhf, this user (debian-armhf) is shows when you boot from emmc, when you boot from uSD, the user is ARM, example: in my case ubuntu@arm. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Stacy Aaron Cottles • 3 years ago I was able to follow your instructions to get it to work but I had to skip the first part because when I put &quot; ll /dev/mmcblk*&quot; into the command-line, it gave me &quot;bash: ll: command not found&quot;. Any ideas why? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar armhf Mod Stacy Aaron Cottles • 3 years ago That is lower case L... The ll command is a common alias for ls -al or ls -l. The article has been edited to not use the ll alias and use the full ls -l Linux command. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Daniel U. Thibault armhf • 2 years ago Part 1 of the article has not been edited to use 'ls -l' instead of 'll'. Please do so. For one thing, ll is not available on the factory-supplied Ångström operating system. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Ruben • 3 years ago really awesome instructions, clear and works great, thanks a million!! Ruben see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Philip Gerald Taylor • 3 years ago Dumb question, but at the beginning you say /dev/mmcblk1 is the SD then proceed to give instructions to re-partition the eMMC @ mmcblk0 i.e. fdisk /dev/mmcblk0 see more 0 • Reply • Share › Twitter Facebook Link − + Avatar armhf Mod Philip Gerald Taylor • 3 years ago Its confusing perhaps -- the booted device is always device 0 as in: mmcblk0. The internal eMMC always has the mmcblkXboot0 and mmcblkXboot1 entries. If the device is booted from eMMC the entries will be mmcblk0boot0 and mmcblk0boot1. If the device is NOT booted from eMMC the entries will be mmcblk1boot0 and mmcblk1boot1. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar William Miller • 3 years ago This is a great article. I was wondering how you can add a swap file to the mix? It looks like when the resize command is used, it takes all available space by default. Thanks for any help you can give. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar armhf Mod William Miller • 3 years ago Instead of creating a swap partition, you should consider a swap file: http://www.cyberciti.biz/faq/l... That being said, if you do want a swap partition, don't expand to the end of the disk -- leave enough unused blocks to create a 3rd swap partition afterward. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Eric Nelson • 3 years ago Why is it that ARM Linux distributions insist on shipping around disk images instead of tar-balls of the filesystem? Having watched some of this develop, it seems to stem from the fact that many ARM CPUs **can** load a boot loader from SD card, and board designers choose to use this feature to save cost. We noticed it first with TI's Davinci chips, and it seems a bad idea to stuff a boot loader into un-partitioned space. Partitioning should be the job of the installer based on usage and the actual media used. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar armhf Mod Eric Nelson • 3 years ago I don't disagree about the Linaro boot technique -- I was going to post the .tar files once an updated bootloader was available (from Boundary) that we discussed on Robert Nelson's site. I was concerned that I would not be able to adequately support the patching and flashing of my own custom u-boot. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Eric Nelson armhf • 3 years ago To make life easier, I just placed a set of kernel, modules, and boot script online that use our existing infrastructure for an easy, though not complete way to boot Debian or Ubuntu. http://commondatastorage.googl... If you just drop these onto a single-partition filesystem, they'll boot using 'root=/dev/mmcblk0p1' for SD boots or 'root=/dev/sda1' if booting to SATA. This is not quite as nice as booting to a RAM disk and the kernel is our latest based on 3.0.35, but this provides a gentle introduction and will be more usable because of the wider variety of peripherals supported by 3.0.35 (vs. 3.9). I tested this out against your wheezy .xz file and in worked like a champ. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar armhf Mod Eric Nelson • 3 years ago Great news -- I'll update the Nitrogen6x section. I still seem to be struggling with the gigabit network drivers to some extent. I am running the wheezy image, and when transferring large files, I am seeing occasional stutters. When I use a gigabit USB adapter, I don't see any issues. This leads me to suspect the Linux drivers. If you still have that wheezy SD handy, could you install samba and transfer a few hundred megabytes to see if you can reproduce it? BTW -- I am empirically measuring ~800Mbit file transfers up to the Nitrogen6x with an external 2TB HDD. A very impressive board. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Eric Nelson armhf • 3 years ago Is this using the 3.0.35 kernel that I uploaded? I did some digging and left some comments on eewiki regarding the 3.9 kernels: http://www.eewiki.net/display/... It turns out that there are some patches from Freescale in flight to address some ethernet issues there. We did some work a while back to improve the ethernet stability in 3.0.35 as discussed here: http://boundarydevices.com/i-m... The upshot is that throughput is likely to peak at around 600 Mbits/s. We have seen full Gb transfer rates using PCIe Gb adapters, but that's a bit of work and kind of clumsy (w/daughter boards and the like). see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Eric Nelson armhf • 3 years ago Sorry for the rant ;) see more 0 • Reply • Share › Twitter Facebook Link Load more comments Also on ARMHF BeagleBone 7 comments 3 years ago Avatar TL — Hi, I have installed Ubuntu Precise 12.04.4 LTS (June 3, 2014) into a 8GB microSD card and it works on my … BeagleBone Black 640 comments 3 years ago Avatar Sumanth Peddamatham — Hey John, I just wanted to chime in and say thanks for the amazing work. You've saved … Wandboard 89 comments 3 years ago Avatar vijay — Hi All, I have installed ubuntu-trusty-14.04-rootfs-3.10.17.1-wand-armhf.com.tar.xz on wandboard … Using BeagleBone Black GPIOs 52 comments 3 years ago Avatar Culero Connor — By chance do you get a brief [less than a second] ON state on your relays and outlets when you … Powered by Disqus Subscribe Add Disqus to your site Add Disqus Add Privacy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160822152524#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Arduino userpicture Home Buy Download Products Back Arduino (USA only) Genuino (outside USA) AtHeart Certified Learning Back Getting started Tutorials Reference CTC Program Playground Forum Support Back FAQ Contact Us Blog LOG IN SIGN UP Reference Language | Libraries | Comparison | Changes String Description The String class, part of the core as of version 0019, allows you to use and manipulate strings of text in more complex ways than character arrays do. You can concatenate Strings, append to them, search for and replace substrings, and more. It takes more memory than a simple character array, but it is also more useful. For reference, character arrays are referred to as strings with a small s, and instances of the String class are referred to as Strings with a capital S. Note that constant strings, specified in &quot;double quotes&quot; are treated as char arrays, not instances of the String class. Examples StringConstructors StringAdditionOperator StringIndexOf StringAppendOperator StringLengthTrim StringCaseChanges StringReplace StringRemove StringCharacters StringStartsWithEndsWith StringComparisonOperators StringSubstring See Also string: character arrays Variable Declaration Functions String() charAt() compareTo() concat() c_str() endsWith() equals() equalsIgnoreCase() getBytes() indexOf() lastIndexOf() length() remove() replace() reserve() setCharAt() startsWith() substring() toCharArray() toInt() toFloat() toLowerCase() toUpperCase() trim() Operators [] (element access) + (concatenation) += (append) == (comparison) &gt; (greater than) &gt;= (greater than or equal to) &lt; (less than) &lt;= (less than or equal to) != (different from) Reference Home Corrections, suggestions, and new documentation should be posted to the Forum. The text of the Arduino reference is licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Code samples in the reference are released into the public domain. Share This link has expired. Please re-subscribe to our Newsletters. Subscribe to our Newsletters Email Please enter a valid email to subscribe Arduino Newsletter Arduino Store Newsletter Newsletter Italiana Cancel Next Confirm your email address We need to confirm your email address. To complete the subscription, please click the link in the email we just sent you. Thank you for subscribing! Arduino via Egeo 16 Torino, 10131 Italy Ok Newsletter ©2016 Arduino Copyright Notice Contact us About us Careers Pin it « 5K+ SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. 0 Sorry, there was a problem loading Checkout. If this persists, please try a different browser. This message will automatically close in 5 seconds. Tweet Like1 " />
  <RDF:Description RDF:about="urn:scrapbook:item20160628102831#index"
                   NS1:content=" Git --distributed-even-if-your-workflow-isnt About Documentation Reference Book Videos External Links Blog Downloads GUI Clients Logos Community Reference Quick reference guides: GitHub Cheat Sheet (PDF) | Visual Git Cheat Sheet (SVG | PNG) Setup and Config config help Getting and Creating Projects init clone Basic Snapshotting add status diff commit reset rm mv Branching and Merging branch checkout merge mergetool log stash tag Sharing and Updating Projects fetch pull push remote submodule Inspection and Comparison show log diff shortlog describe Patching apply cherry-pick diff rebase revert Debugging bisect blame grep Email am apply format-patch send-email request-pull External Systems svn fast-import Administration clean gc fsck reflog filter-branch instaweb archive bundle Server Admin daemon update-server-info Plumbing Commands cat-file commit-tree count-objects diff-index for-each-ref hash-object ls-files merge-base read-tree rev-list rev-parse show-ref symbolic-ref update-index update-ref verify-pack write-tree This open sourced site is hosted on GitHub. Patches, suggestions and comments are welcome. Git is a member of Software Freedom Conservancy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160707194543#index"
                   NS1:content=" BILL'S SPACE Learn, teach, or do calligraphy at Bill's Space. Skip to content Bill’s Space Gallery Bill’s You Tube CHANNEL Vimeo for Bill’s Space Bill’s Flickr Photostream Bill’s Art &amp; Calligraphy supplies Regularly updated links More Lovely Links Luton Calligraphy Workshops. Luton Calligraphy Workshops. Week 1 Luton Calligraphy Workshops. Week 2 Luton Calligraphy Workshops. Week 3 Luton Calligraphy Workshops. Week 4 Luton Calligraphy Workshops. Week 5 Learn, Teach or Do Calligraphy in Luton Hints and Tips ← A Calligraphy Workshop at Jewels. Blowing my own trumpet. → Getting Started in Calligraphy Posted on October 26, 2011 | 11 Comments Calligraphy. Getting started. The Scribe's nightmare. The Scribe’s Nightmare. I strongly suggest that beginners read this post first and then click on Lesson One. Familiarise yourself first with the Roundhand alphabet. I am sure it will save a lot of heartache later. Firstly, there are so many products on sale, all purported to be the must have for the budding scribe. For the time being, my advice is to forget all that. Keep it simple. Buy or make only that which you need to get through the next stage in your journey. All the pens and brushes in the whole wide world are of no use if you have no idea what to do with them. If you follow the Calligradoodles videos and use the worksheets that go with them, you will notice that all the elements are made up of pencil marks on paper. So, all we need to get started, is a sheet of ordinary copy paper, a ruler and two pencils joined together with elastic bands. ( Better than tape when it comes to sharpening ). A board of some description propped at an angle of about 20 degrees on your table, or even on your knees ( Not good for the back! ), will be enough for the first few sessions. So, now you are able to construct a half decent Roundhand and Roman alphabet and are ready to progress. You will need a pen and some ink, and once again there are so many products out there that confusion can easily set in, so simplicity is best. A fountain pen set with 4 – 6 nib sizes and a good supply of cartridges or ink is a good addition to your tool-box at this point. A couple of pen holders and some broad nibs plus a bottle of black calligraphy ink ( not waterproof, this will easily clog your nib ). Here I shall make no apologies for directing you to Bill’s Art and Calligraphy Supplies I do earn a small commission from Amazon on any sales, But please don’t feel that you have to buy here. The main reason for setting up this A Shop was to illustrate the mind boggling choices we have just in this one discipline. The Book Section is mind blowing! If I can raise a few pennies to offset expenses, thanks for your custom. The Technik Art Layout Pad A/3 is a handy addition right now. Only 50 gsm means you can make one guideline sheet and lay it under each page. A good tip at this point is to rule lines at 1/8″intervals from top to bottom of that page. If you do this in landscape format it will be much more versatile. When laid under the actual working page it is easy to mark an X over 1,2,3, or however many lines it takes to make up the x height needed for the particular nib size you are using. This will stand you in good stead for the rest of your life. If you do have to draw lines, always draw them in multiples of 1/8″ according to nib size. More on this as you progress. The Brause assortment calligraphy set or William Mitchell right hand italic set. ( There are left hand versions available, and you will find a really good book for Lefthanders in the book department ). ( See also The Left-handed Calligrapher, here at Bill’s Space, and for more support and info try the Facebook group, Calligraphy for the Left Handed ) . The Manuscript Leonardt Calligraphy dip pen nibs – Italic and Poster set, is particularly good value. A bottle of black Manuscript ink or set of three, black, gold, red, W &amp; N inks will keep you busy for a while. A better quality paper is now needed to show off your new skills so a pad of Daler Rowney A/3 might be your next choice. Why A/3? Simply, this size gives more scope for layouts. If you need a smaller format, it is no problem to cut a page. For line drawing, a Rowney or any of the many boards or drawing machines available will make life a bit easier, but I find a set square running along a 2 foot ruler taped to my board is quite sufficient. Incidentally, I use a home made light -table whenever possible. If you try this, PLEASE USE ONLY TOUGHENED GLASS.There is a commercially made Artograph box in Bill’s Art and calligraphy supplies. A “T”-square is a handy addition and perhaps a few basic drawing instruments next. You see. Your collection is building up already. But only with stuff you use. Not just stuff! Scribblers have kindly issued 50 calligraphy tips You might find these useful. By the way, when conducting a workshop, I usually ask participants to bring with them the following articles if at all possible. A drawing board, approximately 18” x 24”. MDF or something similar will do, Something to prop it up to make a writing slope, i.e., a piece of wood 4” x 4” or perhaps a brick wrapped in a carrier bag. A ruler , preferably 2 foot, and a set square. A set of roundhand nibs with penholder and reservoirs. A calligraphy fountain pen is a handy addition for practice work. (Any left-handers will benefit by choosing left hand oblique nibs). Calligraphy ink. NOT WATERPROOF. Avoid Indian ink whether waterproof or not. Gouache or watercolours. Coeruleum Blue, and Vermilion. Winsor &amp; Newton Gold ink. (Optional but very handy.) 2, HB and I, 2H pencil. A 00 paint brush. A cheap brush for mixing. A palette or saucer. A jar for water and a kitchen roll. An A3 Layout pad or even a cheap sketch book. If you have some, a nice HP watercolour paper for your finished work If you have problems obtaining any commercially marketed equipment, You might try going back to basics and making your own. It is a good idea anyway to experiment with quills, reeds, bamboo, tin cans etc. My take on the Cola pen. The RED STRIPE Pen. To my mind, much more fun emptying the can. A chisel cut pencil to dip. A needlepoint and 6mm with film reservoir. Bamboo, and a 2mm Reed. Make sure mummy and daddy are supervising. Heheh. We don’t want any cut fingers! With scissors, cut top and bottom from the can, making sure you have first downed the contents. (Adults, it might be best to leave this stage ’til tomorrow, depending on the strength of the aforesaid). Carefully, (The cut tin can will be very sharp). Open up and then fold down the length of the metal. Cut whatever shape you are looking for for the nib…then continue down the length,making sure to leave enough for the handle. This is rolled and then taped tightly. Perhaps strengthening by rolling the handle round a pencil. You could make a much prettier job by soldering.Just make sure that all bare edges are covered or blunted. ‘speriment and enjoy. You might like to note that I have been experimenting with various materials to use as reservoirs. The best so far is old fashioned film or even negatives. Used flat it can be cut and pushed into a slit formed in the quill, reed, bamboo or whatever, or rolled into a spring and pushed into the aperture. Some other examples………….. http://www.youtube.com/watch?v=kbcXlvTiuIw http://www.flick.com/~liralen/quills/quills.html http://joshberer.wordpress.com/2010/09/10/the-kamis-pen/ http://www.facebook.com/posted.php?id=100000056736005#!/video/video.php?v=303620954270 Now may I suggest that you join Lesson One. If you have any problems, questions, advice, etc., do not hesitate to use the comment boxes throughout this site. If I don’t know the answer, I’m sure to know someone who does. I hope you get as much enjoyment as I do from making good letters. Keep watching this space. 0.337141 0.165825 Rate this: i 5 Votes Share this: Email Facebook41 Twitter Press This Print LinkedIn Reddit Google Tumblr Pinterest Like this: Like Loading... Related Luton Calligraphy Workshops Luton Calligraphy Workshops If you have signed up for or are thinking of attending the Calligraphy Workshops at Wardown Park Museum, or would like to follow the progress of the group, this is the place to come for information and support. These sessions will be very informal with the emphasis being on doing,… In &quot;,calligraphy,calligraffiti,lettering, how to&quot; Calligraphy and handwriting for Children Calligraphy and handwriting for Children I am often asked how long I have been doing calligraphy and how I got interested in the first place. As a youngster, the only books in the house were a 10 volume Arthur Mee Childrens Encyclopaedia. The many articles and illustrations of ancient civilisations, carvings and manuscripts that I found there really… In &quot;Beginners&quot; Welcome to Bill's Space. Welcome to Bill's Space. Bill’s Space is aimed at anyone who has a love of calligraphy, or lettering. Especially beginners and those who are having trouble getting started. Featuring videos and worksheets, links and articles, all with a bias toward art, calligraphy, lettering, and teacher's resources, and updated as new material comes to my notice.… In &quot;Art&quot; This entry was posted in ,calligraphy,calligraffiti,lettering, how to, Beginners, Calligraphy Supplies., calligraphy tools, Cola pen, light table and tagged Beginners, calligraphy, Learning, lettering, light table. Bookmark the permalink. ← A Calligraphy Workshop at Jewels. Blowing my own trumpet. → 11 responses to “Getting Started in Calligraphy” Janee | October 31, 2011 at 5:18 pm | Reply 0 0 i Rate This Wow, I’ve never seen a soda can nib, how fun! LikeLike billgrant43 | October 31, 2011 at 5:52 pm | Reply 0 0 i Rate This Hi Janee. Have fun designing a pen that suits you. Be careful of sharp edges though. LikeLike Pingback: About Pointed Pen Calligraphy…Now Posted!!! « billgrant43 | November 4, 2011 at 11:47 am | Reply 0 0 i Rate This Hi Laura. Thanks for joining us here. Your blog will be very useful for our pointed pen beginners. LikeLike Pingback: Luton Calligraphy Workshops | BILL'S SPACE Pingback: Luton Calligraphy Workshops. Week 5 | BILL'S SPACE Mindy Phillips Lawrence | October 12, 2013 at 12:12 am | Reply 0 0 i Rate This Hello Bill. I find the wealth of information here on your site so helpful. Thank you for thinking of other calligraphers…Mindy LikeLike billgrant43 | October 12, 2013 at 12:49 pm | Reply 0 0 i Rate This Hi Mindy. It is my pleasure. I am glad you are finding it interesting. PPP Cheers. Bill LikeLike Pingback: Inspiration Board: Calligraphy | Julie Goodwin | June 6, 2015 at 9:32 pm | Reply 0 0 i Rate This Hi Bill, I enjoyed looking through your posts. I have been a calligrapher for about 35 years (and calligraphic engraver for nine) and was approached to teach a brief class this summer to elementary students. Each class is about 45 minutes long and I’ve been told they want a demonstration followed by time for the kids to practice. Do you have any brilliant ideas? I’ve taught adults before but my challenge this time is that many of these kids have not yet mastered their OWN handwriting skills! Thank you for any light you can shed on this situation! LikeLiked by 1 person billgrant43 | June 9, 2015 at 1:37 pm | Reply 0 0 i Rate This Hi Julie. Heheh! You have found yourself in a very difficult situation. I also have been asked to do something similar for a local Guide / Brownie group but have decided that 45 minutes is just not long enough to do justice to the subject. OK if you are going to have follow up sessions but not a one off. Here is one with 15 / 16 year olds that took twice as long and was still a bit of a rush. https://calligraphybybillgrant.com/2014/05/19/a-calligraphy-workshop-at-the-red-dot-gallery/ For youngsters it might be an idea to draw out a large banner on lining paper then ask them to put on some colour. This seems always to go down very well and for some, it might just stick in the mind and bloom in the years to come. https://calligraphybybillgrant.com/2014/08/25/the-luton-fleadh-fiesta-2014/ Have fun and let me know how you get on. Cheers. Bill. LikeLike Please feel free to comment, make suggestions or ask questions. If I don't know the answer, I'm sure I will know someone who does.......SPAM WILL NOT BE TOLERATED. Cancel reply Fill in your details below or click an icon to log in: Gravatar Email (required) (Address never made public) Name (required) Website Gravatar kinyarwandablog: You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Notify me of new posts via email. Translate this page Powered by Microsoft® Translator To browse WebRing visit Blog Stats 353,803 hits Recent Posts EID MUBARAK Failure. Does it help or hinder? Wishing Season’s Greetings to all my friends and all you lovely scribes out there. Quitting the Evil Weed Precision, Perfection, Practice Top Posts ITALIC WORKSHEETS. With thanks to Richard Crookes. Updated May 11th '11 Getting Started in Calligraphy TIME TO GET TO WORK. Updated March 2013 Welcome to Bill's Space Luton Calligraphy Workshops. Week 1 Calligraphy and handwriting for Children Learn Roman Capitals. Updated March 2013 Look out. The Boss is back! ( Time to learn uncials ) The Foundational or Roundhand Alphabet. With thanks to Richard Crookes. Hints and Tips Archives Archives Archaeology Art arts Beginners Bill's Space Bill Grant Bradwell Abbey Business calligradoodles calligraphy calligraphy practice Child Christmas Christmas greetings cola pen Competition crafts Dunstable. Easter Easter day Easter Sunday eBay Education Edward Johnston exhibition For sale Free Godiva Awakes Good Friday groups Guideline sheets Handwriting He is risen Houghton Regis. Human Rights. Italic Jewels Latin alphabet learn calligraphy Learning left handers lettering light table Lower case Luton luton art '11 exhibition Luton art '12 exhibition Luton Irish Forum Medieval Milton Keynes Namedoodles New Year peace Penmanship Picture resources Richard Crookes Roman Capitals Roundhand roundhand alphabet Statistics St Mary's Chapel St Patrick's Day Swash Capitals uncial Valentine's day video Wall Paintings Wardown Park. Wardown Park Museum Whiteboard William Morris Worksheets workshop Writing NetworkedBlogs Blog: Bill's Space Topics: Lettering, Calligraphy, Teachers Resources Follow my blog Email Subscription Click to subscribe to this blog and receive notifications of new posts by email. Join 1,618 other followers RSS - Posts RSS - Comments Meta Log out Entries RSS Comments RSS WordPress.com Search for: CALLIGRAPHY LESSONS and Worksheets Getting started in calligraphy. LESSON ONE. ROUNDHAND LESSON TWO. ROMAN CAPITALS LESSON THREE. UNCIALS LESSON FOUR ITALICS The roundhand alphabet. Worksheets The Roman alphabet. Worksheets Uncial alphabet. Worksheets All 3 sets of worksheets pdf Bill's Light- table education Calligraphy and handwriting for children Homework Elephant Teacher's web ring Teachers Media. Free Education Videos and Resources Teachers TV TES Teaching Resources The Guardian Teacher's Network The Khan Academy My Links Bill's Art and Calligraphy supplies Bill's Facebook page CALLIGRAPHY at Bill's Space MK II Some Arty Links CATZ Picasso Joan Miro. Gustav Klimt Wassily Kandinsky Calligraphy by Bill Grant Promote your Page tooBill Grant Create your badge Follow Me on Pinterest Flickr Photos A Day in our lives 3 CCF02042015_00002 CCF30082014_00000 More Photos Blogs I Follow Twitter Updates EID MUBARAK calligraphybybillgrant.com/2016/07/07/eid… https://t.co/peE0IvHX1D 3 hours ago Eid Mubarak to all my friends wherever you may be. Please pray for peace in this mad, mad, world.... fb.me/8lJgMlFHs 3 hours ago Will British politics ever recover from this debacle? Have British Politicians lost the respect of the whole... fb.me/3DIzW97vB 6 hours ago Corbyn's response to the Chilcot Inquiry is one of the most moving things you'll see all week... fb.me/HEB0gG5S 23 hours ago At last! Something positive from a #BiasedBBC re #JeremyCorbyn fb.me/8kU30T4Ph 2 days ago Help with the upkeep of Bill’s Space Blog at WordPress.com. The Coraline Theme. Ann Narkeh Media Loudmouth with a laptop, documenting the apocalypse... The Waha Report - a daily insight on the Syria situation the nearest station to the pub meandering around the rail network and drinking beer Richard Crookes - Artist and Writer new home website for artist and writer Richard Crookes the void narking off the state since 2005 Misty Karen ambertale independent researcher interested in visual art, poem and short story writing, nature photo taking, science, paranormal phenomena and politics. Warning - Wicked Sense of Humour! Day One Every journey begins with a single step everyday gurus Everyday, Everywhere We Are Guided Towards Happiness medievalbooks Erik Kwakkel blogging about medieval manuscripts Moya Calligrapher from Melbourne, Australia. Hi! Designtraveler Diary of Design History Field Trips quixotree A wild, visionary idea, an eccentric notion or act - trees: givers of bounty, givers of beauty, givers of life scribescribbling A scadian scribe's experiences Atlanta Penablers Atlanta Penablers::: Helping artists and calligraphers flourish through community and education. Ellen Waldren My blog is all about being creative. I invite you to share my passion - calligraphy and lettering. Yoga World &amp; Pesto The Aspirational Luton Blog life ... places &amp; faces ... photojournalism BILL'S SPACE Learn, teach, or do calligraphy at Bill's Space. medievalfragments Turning Over a New Leaf The Library of Trinity College Dublin News and Events from Ireland's Largest University Library Instant de Calligraphie Quand Calligraphie &amp; Poésie se répondent... Daily Inspiration for daily inspiration and motivation G. E. Gallas Writer and Illustrator Jewels Houghton Regis Whether you need paints, knitting needles, a cup of tea, a space to crochet or person to chat to then Jewels is the place for you. Bobbsta's Blog Striding through this World, using baby steps Bamburgh Research Project's Blog ... bringing the past to life for everyone... Dragonfly Studio Custom Made Graphic Design арт полка Блог с картинками и настроением diariodiviaggioconflavia Just another WordPress.com site Post to Cancel Follow New posts from this site will now appear in your Reader BILL'S SPACE Customize Follow Copy shortlink Report this content View Site in the Reader Manage Sites I Follow Collapse this bar %d bloggers like this: Skip to toolbar My Site kinyarwandablogkinyarwandablog.wordpress.com + Add New WordPress Stats Stats PlanFree Publish Blog PostsAdd PagesAdd Personalize ThemesCustomize Menus Configure Sharing PeopleAdd DomainsAdd Settings Reader Streams Followed SitesManage Discover Recommendations My Likes Notifications Me kinyarwandablog@kinyarwandablog Sign Out Profile My Profile Account Settings Billing History Security Notifications Special Get Apps Next Steps Help Log Out Send to Email Address loading Cancel Post was not sent - check your email addresses! Email check failed, please try again Sorry, your blog cannot share posts by email. :) Portrait image for Type@Cooper Cutting Quills from Type@Cooper pro 00:00 04:19 Vimeo 04:19 Like Add to Watch Later Share Clip ID:68078367 Delivery:progressive Playing:360p@30 Embed size:300×150 CDN:level3 Open link Like All Unread Comments Follows Likes  Older than a week  Your stats are booming! kinyarwandablog is getting lots of traffic. Older than a month  You've made 5 posts on kinyarwandablog. Follow @billgrant43 Reblog Like japhethwg One blogger likes this. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705110227#index"
                   NS1:content=" Advanced Bash-Scripting Guide An in-depth exploration of the art of shell scripting Mendel Cooper &lt;thegrendel.abs@gmail.com&gt; 10 10 Mar 2014 Revision History Revision 6.5 05 Apr 2012 Revised by: mc 'TUNGSTENBERRY' release Revision 6.6 27 Nov 2012 Revised by: mc 'YTTERBIUMBERRY' release Revision 10 10 Mar 2014 Revised by: mc 'PUBLICDOMAIN' release This tutorial assumes no previous knowledge of scripting or programming, yet progresses rapidly toward an intermediate/advanced level of instruction . . . all the while sneaking in little nuggets of UNIX® wisdom and lore. It serves as a textbook, a manual for self-study, and as a reference and source of knowledge on shell scripting techniques. The exercises and heavily-commented examples invite active reader participation, under the premise that the only way to really learn scripting is to write scripts. This book is suitable for classroom use as a general introduction to programming concepts. This document is herewith granted to the Public Domain. No copyright! Dedication For Anita, the source of all the magic Table of Contents Part 1. Introduction 1. Shell Programming! 2. Starting Off With a Sha-Bang Part 2. Basics 3. Special Characters 4. Introduction to Variables and Parameters 5. Quoting 6. Exit and Exit Status 7. Tests 8. Operations and Related Topics Part 3. Beyond the Basics 9. Another Look at Variables 10. Manipulating Variables 11. Loops and Branches 12. Command Substitution 13. Arithmetic Expansion 14. Recess Time Part 4. Commands 15. Internal Commands and Builtins 16. External Filters, Programs and Commands 17. System and Administrative Commands Part 5. Advanced Topics 18. Regular Expressions 19. Here Documents 20. I/O Redirection 21. Subshells 22. Restricted Shells 23. Process Substitution 24. Functions 25. Aliases 26. List Constructs 27. Arrays 28. Indirect References 29. /dev and /proc 30. Network Programming 31. Of Zeros and Nulls 32. Debugging 33. Options 34. Gotchas 35. Scripting With Style 36. Miscellany 37. Bash, versions 2, 3, and 4 38. Endnotes 38.1. Author's Note 38.2. About the Author 38.3. Where to Go For Help 38.4. Tools Used to Produce This Book 38.5. Credits 38.6. Disclaimer Bibliography A. Contributed Scripts B. Reference Cards C. A Sed and Awk Micro-Primer C.1. Sed C.2. Awk D. Parsing and Managing Pathnames E. Exit Codes With Special Meanings F. A Detailed Introduction to I/O and I/O Redirection G. Command-Line Options G.1. Standard Command-Line Options G.2. Bash Command-Line Options H. Important Files I. Important System Directories J. An Introduction to Programmable Completion K. Localization L. History Commands M. Sample .bashrc and .bash_profile Files N. Converting DOS Batch Files to Shell Scripts O. Exercises O.1. Analyzing Scripts O.2. Writing Scripts P. Revision History Q. Download and Mirror Sites R. To Do List S. Copyright T. ASCII Table Index List of Tables 8-1. Operator Precedence 15-1. Job identifiers 33-1. Bash options 36-1. Numbers representing colors in Escape Sequences B-1. Special Shell Variables B-2. TEST Operators: Binary Comparison B-3. TEST Operators: Files B-4. Parameter Substitution and Expansion B-5. String Operations B-6. Miscellaneous Constructs C-1. Basic sed operators C-2. Examples of sed operators E-1. Reserved Exit Codes N-1. Batch file keywords / variables / operators, and their shell equivalents N-2. DOS commands and their UNIX equivalents P-1. Revision History List of Examples 2-1. cleanup: A script to clean up log files in /var/log 2-2. cleanup: An improved clean-up script 2-3. cleanup: An enhanced and generalized version of above scripts. 3-1. Code blocks and I/O redirection 3-2. Saving the output of a code block to a file 3-3. Running a loop in the background 3-4. Backup of all files changed in last day 4-1. Variable assignment and substitution 4-2. Plain Variable Assignment 4-3. Variable Assignment, plain and fancy 4-4. Integer or string? 4-5. Positional Parameters 4-6. wh, whois domain name lookup 4-7. Using shift 5-1. Echoing Weird Variables 5-2. Escaped Characters 5-3. Detecting key-presses 6-1. exit / exit status 6-2. Negating a condition using ! 7-1. What is truth? 7-2. Equivalence of test, /usr/bin/test, [ ], and /usr/bin/[ 7-3. Arithmetic Tests using (( )) 7-4. Testing for broken links 7-5. Arithmetic and string comparisons 7-6. Testing whether a string is null 7-7. zmore 8-1. Greatest common divisor 8-2. Using Arithmetic Operations 8-3. Compound Condition Tests Using &amp;&amp; and || 8-4. Representation of numerical constants 8-5. C-style manipulation of variables 9-1. $IFS and whitespace 9-2. Timed Input 9-3. Once more, timed input 9-4. Timed read 9-5. Am I root? 9-6. arglist: Listing arguments with $* and $@ 9-7. Inconsistent $* and $@ behavior 9-8. $* and $@ when $IFS is empty 9-9. Underscore variable 9-10. Using declare to type variables 9-11. Generating random numbers 9-12. Picking a random card from a deck 9-13. Brownian Motion Simulation 9-14. Random between values 9-15. Rolling a single die with RANDOM 9-16. Reseeding RANDOM 9-17. Pseudorandom numbers, using awk 10-1. Inserting a blank line between paragraphs in a text file 10-2. Generating an 8-character &quot;random&quot; string 10-3. Converting graphic file formats, with filename change 10-4. Converting streaming audio files to ogg 10-5. Emulating getopt 10-6. Alternate ways of extracting and locating substrings 10-7. Using parameter substitution and error messages 10-8. Parameter substitution and &quot;usage&quot; messages 10-9. Length of a variable 10-10. Pattern matching in parameter substitution 10-11. Renaming file extensions: 10-12. Using pattern matching to parse arbitrary strings 10-13. Matching patterns at prefix or suffix of string 11-1. Simple for loops 11-2. for loop with two parameters in each [list] element 11-3. Fileinfo: operating on a file list contained in a variable 11-4. Operating on a parameterized file list 11-5. Operating on files with a for loop 11-6. Missing in [list] in a for loop 11-7. Generating the [list] in a for loop with command substitution 11-8. A grep replacement for binary files 11-9. Listing all users on the system 11-10. Checking all the binaries in a directory for authorship 11-11. Listing the symbolic links in a directory 11-12. Symbolic links in a directory, saved to a file 11-13. A C-style for loop 11-14. Using efax in batch mode 11-15. Simple while loop 11-16. Another while loop 11-17. while loop with multiple conditions 11-18. C-style syntax in a while loop 11-19. until loop 11-20. Nested Loop 11-21. Effects of break and continue in a loop 11-22. Breaking out of multiple loop levels 11-23. Continuing at a higher loop level 11-24. Using continue N in an actual task 11-25. Using case 11-26. Creating menus using case 11-27. Using command substitution to generate the case variable 11-28. Simple string matching 11-29. Checking for alphabetic input 11-30. Creating menus using select 11-31. Creating menus using select in a function 12-1. Stupid script tricks 12-2. Generating a variable from a loop 12-3. Finding anagrams 15-1. A script that spawns multiple instances of itself 15-2. printf in action 15-3. Variable assignment, using read 15-4. What happens when read has no variable 15-5. Multi-line input to read 15-6. Detecting the arrow keys 15-7. Using read with file redirection 15-8. Problems reading from a pipe 15-9. Changing the current working directory 15-10. Letting let do arithmetic. 15-11. Showing the effect of eval 15-12. Using eval to select among variables 15-13. Echoing the command-line parameters 15-14. Forcing a log-off 15-15. A version of rot13 15-16. Using set with positional parameters 15-17. Reversing the positional parameters 15-18. Reassigning the positional parameters 15-19. &quot;Unsetting&quot; a variable 15-20. Using export to pass a variable to an embedded awk script 15-21. Using getopts to read the options/arguments passed to a script 15-22. &quot;Including&quot; a data file 15-23. A (useless) script that sources itself 15-24. Effects of exec 15-25. A script that exec's itself 15-26. Waiting for a process to finish before proceeding 15-27. A script that kills itself 16-1. Using ls to create a table of contents for burning a CDR disk 16-2. Hello or Good-bye 16-3. Badname, eliminate file names in current directory containing bad characters and whitespace. 16-4. Deleting a file by its inode number 16-5. Logfile: Using xargs to monitor system log 16-6. Copying files in current directory to another 16-7. Killing processes by name 16-8. Word frequency analysis using xargs 16-9. Using expr 16-10. Using date 16-11. Date calculations 16-12. Word Frequency Analysis 16-13. Which files are scripts? 16-14. Generating 10-digit random numbers 16-15. Using tail to monitor the system log 16-16. Printing out the From lines in stored e-mail messages 16-17. Emulating grep in a script 16-18. Crossword puzzle solver 16-19. Looking up definitions in Webster's 1913 Dictionary 16-20. Checking words in a list for validity 16-21. toupper: Transforms a file to all uppercase. 16-22. lowercase: Changes all filenames in working directory to lowercase. 16-23. du: DOS to UNIX text file conversion. 16-24. rot13: ultra-weak encryption. 16-25. Generating &quot;Crypto-Quote&quot; Puzzles 16-26. Formatted file listing. 16-27. Using column to format a directory listing 16-28. nl: A self-numbering script. 16-29. manview: Viewing formatted manpages 16-30. Using cpio to move a directory tree 16-31. Unpacking an rpm archive 16-32. Stripping comments from C program files 16-33. Exploring /usr/X11R6/bin 16-34. An &quot;improved&quot; strings command 16-35. Using cmp to compare two files within a script. 16-36. basename and dirname 16-37. A script that copies itself in sections 16-38. Checking file integrity 16-39. Uudecoding encoded files 16-40. Finding out where to report a spammer 16-41. Analyzing a spam domain 16-42. Getting a stock quote 16-43. Updating FC4 16-44. Using ssh 16-45. A script that mails itself 16-46. Generating prime numbers 16-47. Monthly Payment on a Mortgage 16-48. Base Conversion 16-49. Invoking bc using a here document 16-50. Calculating PI 16-51. Converting a decimal number to hexadecimal 16-52. Factoring 16-53. Calculating the hypotenuse of a triangle 16-54. Using seq to generate loop arguments 16-55. Letter Count&quot; 16-56. Using getopt to parse command-line options 16-57. A script that copies itself 16-58. Exercising dd 16-59. Capturing Keystrokes 16-60. Preparing a bootable SD card for the Raspberry Pi 16-61. Securely deleting a file 16-62. Filename generator 16-63. Converting meters to miles 16-64. Using m4 17-1. Setting a new password 17-2. Setting an erase character 17-3. secret password: Turning off terminal echoing 17-4. Keypress detection 17-5. Checking a remote server for identd 17-6. pidof helps kill a process 17-7. Checking a CD image 17-8. Creating a filesystem in a file 17-9. Adding a new hard drive 17-10. Using umask to hide an output file from prying eyes 17-11. Backlight: changes the brightness of the (laptop) screen backlight 17-12. killall, from /etc/rc.d/init.d 19-1. broadcast: Sends message to everyone logged in 19-2. dummyfile: Creates a 2-line dummy file 19-3. Multi-line message using cat 19-4. Multi-line message, with tabs suppressed 19-5. Here document with replaceable parameters 19-6. Upload a file pair to Sunsite incoming directory 19-7. Parameter substitution turned off 19-8. A script that generates another script 19-9. Here documents and functions 19-10. &quot;Anonymous&quot; Here Document 19-11. Commenting out a block of code 19-12. A self-documenting script 19-13. Prepending a line to a file 19-14. Parsing a mailbox 20-1. Redirecting stdin using exec 20-2. Redirecting stdout using exec 20-3. Redirecting both stdin and stdout in the same script with exec 20-4. Avoiding a subshell 20-5. Redirected while loop 20-6. Alternate form of redirected while loop 20-7. Redirected until loop 20-8. Redirected for loop 20-9. Redirected for loop (both stdin and stdout redirected) 20-10. Redirected if/then test 20-11. Data file names.data for above examples 20-12. Logging events 21-1. Variable scope in a subshell 21-2. List User Profiles 21-3. Running parallel processes in subshells 22-1. Running a script in restricted mode 23-1. Code block redirection without forking 23-2. Redirecting the output of process substitution into a loop. 24-1. Simple functions 24-2. Function Taking Parameters 24-3. Functions and command-line args passed to the script 24-4. Passing an indirect reference to a function 24-5. Dereferencing a parameter passed to a function 24-6. Again, dereferencing a parameter passed to a function 24-7. Maximum of two numbers 24-8. Converting numbers to Roman numerals 24-9. Testing large return values in a function 24-10. Comparing two large integers 24-11. Real name from username 24-12. Local variable visibility 24-13. Demonstration of a simple recursive function 24-14. Another simple demonstration 24-15. Recursion, using a local variable 24-16. The Fibonacci Sequence 24-17. The Towers of Hanoi 25-1. Aliases within a script 25-2. unalias: Setting and unsetting an alias 26-1. Using an and list to test for command-line arguments 26-2. Another command-line arg test using an and list 26-3. Using or lists in combination with an and list 27-1. Simple array usage 27-2. Formatting a poem 27-3. Various array operations 27-4. String operations on arrays 27-5. Loading the contents of a script into an array 27-6. Some special properties of arrays 27-7. Of empty arrays and empty elements 27-8. Initializing arrays 27-9. Copying and concatenating arrays 27-10. More on concatenating arrays 27-11. The Bubble Sort 27-12. Embedded arrays and indirect references 27-13. The Sieve of Eratosthenes 27-14. The Sieve of Eratosthenes, Optimized 27-15. Emulating a push-down stack 27-16. Complex array application: Exploring a weird mathematical series 27-17. Simulating a two-dimensional array, then tilting it 28-1. Indirect Variable References 28-2. Passing an indirect reference to awk 29-1. Using /dev/tcp for troubleshooting 29-2. Playing music 29-3. Finding the process associated with a PID 29-4. On-line connect status 30-1. Print the server environment 30-2. IP addresses 31-1. Hiding the cookie jar 31-2. Setting up a swapfile using /dev/zero 31-3. Creating a ramdisk 32-1. A buggy script 32-2. Missing keyword 32-3. test24: another buggy script 32-4. Testing a condition with an assert 32-5. Trapping at exit 32-6. Cleaning up after Control-C 32-7. A Simple Implementation of a Progress Bar 32-8. Tracing a variable 32-9. Running multiple processes (on an SMP box) 34-1. Numerical and string comparison are not equivalent 34-2. Subshell Pitfalls 34-3. Piping the output of echo to a read 36-1. shell wrapper 36-2. A slightly more complex shell wrapper 36-3. A generic shell wrapper that writes to a logfile 36-4. A shell wrapper around an awk script 36-5. A shell wrapper around another awk script 36-6. Perl embedded in a Bash script 36-7. Bash and Perl scripts combined 36-8. Python embedded in a Bash script 36-9. A script that speaks 36-10. A (useless) script that recursively calls itself 36-11. A (useful) script that recursively calls itself 36-12. Another (useful) script that recursively calls itself 36-13. A &quot;colorized&quot; address database 36-14. Drawing a box 36-15. Echoing colored text 36-16. A &quot;horserace&quot; game 36-17. A Progress Bar 36-18. Return value trickery 36-19. Even more return value trickery 36-20. Passing and returning arrays 36-21. Fun with anagrams 36-22. Widgets invoked from a shell script 36-23. Test Suite 37-1. String expansion 37-2. Indirect variable references - the new way 37-3. Simple database application, using indirect variable referencing 37-4. Using arrays and other miscellaneous trickery to deal four random hands from a deck of cards 37-5. A simple address database 37-6. A somewhat more elaborate address database 37-7. Testing characters 37-8. Reading N characters 37-9. Using a here document to set a variable 37-10. Piping input to a read 37-11. Negative array indices 37-12. Negative parameter in string-extraction construct A-1. mailformat: Formatting an e-mail message A-2. rn: A simple-minded file renaming utility A-3. blank-rename: Renames filenames containing blanks A-4. encryptedpw: Uploading to an ftp site, using a locally encrypted password A-5. copy-cd: Copying a data CD A-6. Collatz series A-7. days-between: Days between two dates A-8. Making a dictionary A-9. Soundex conversion A-10. Game of Life A-11. Data file for Game of Life A-12. behead: Removing mail and news message headers A-13. password: Generating random 8-character passwords A-14. fifo: Making daily backups, using named pipes A-15. Generating prime numbers using the modulo operator A-16. tree: Displaying a directory tree A-17. tree2: Alternate directory tree script A-18. string functions: C-style string functions A-19. Directory information A-20. Library of hash functions A-21. Colorizing text using hash functions A-22. More on hash functions A-23. Mounting USB keychain storage devices A-24. Converting to HTML A-25. Preserving weblogs A-26. Protecting literal strings A-27. Unprotecting literal strings A-28. Spammer Identification A-29. Spammer Hunt A-30. Making wget easier to use A-31. A podcasting script A-32. Nightly backup to a firewire HD A-33. An expanded cd command A-34. A soundcard setup script A-35. Locating split paragraphs in a text file A-36. Insertion sort A-37. Standard Deviation A-38. A pad file generator for shareware authors A-39. A man page editor A-40. Petals Around the Rose A-41. Quacky: a Perquackey-type word game A-42. Nim A-43. A command-line stopwatch A-44. An all-purpose shell scripting homework assignment solution A-45. The Knight's Tour A-46. Magic Squares A-47. Fifteen Puzzle A-48. The Towers of Hanoi, graphic version A-49. The Towers of Hanoi, alternate graphic version A-50. An alternate version of the getopt-simple.sh script A-51. The version of the UseGetOpt.sh example used in the Tab Expansion appendix A-52. Cycling through all the possible color backgrounds A-53. Morse Code Practice A-54. Base64 encoding/decoding A-55. Inserting text in a file using sed A-56. The Gronsfeld Cipher A-57. Bingo Number Generator A-58. Basics Reviewed A-59. Testing execution times of various commands A-60. Associative arrays vs. conventional arrays (execution times) C-1. Counting Letter Occurrences J-1. Completion script for UseGetOpt.sh M-1. Sample .bashrc file M-2. .bash_profile file N-1. VIEWDATA.BAT: DOS Batch File N-2. viewdata.sh: Shell Script Conversion of VIEWDATA.BAT T-1. A script that generates an ASCII table T-2. Another ASCII table script T-3. A third ASCII table script, using awk Part 1. Introduction Script: A writing; a written document. [Obs.] --Webster's Dictionary, 1913 ed. The shell is a command interpreter. More than just the insulating layer between the operating system kernel and the user, it's also a fairly powerful programming language. A shell program, called a script, is an easy-to-use tool for building applications by &quot;gluing together&quot; system calls, tools, utilities, and compiled binaries. Virtually the entire repertoire of UNIX commands, utilities, and tools is available for invocation by a shell script. If that were not enough, internal shell commands, such as testing and loop constructs, lend additional power and flexibility to scripts. Shell scripts are especially well suited for administrative system tasks and other routine repetitive tasks not requiring the bells and whistles of a full-blown tightly structured programming language. Table of Contents 1. Shell Programming! 2. Starting Off With a Sha-Bang 2.1. Invoking the script 2.2. Preliminary Exercises Chapter 1. Shell Programming! No programming language is perfect. There is not even a single best language; there are only languages well suited or perhaps poorly suited for particular purposes. --Herbert Mayer A working knowledge of shell scripting is essential to anyone wishing to become reasonably proficient at system administration, even if they do not anticipate ever having to actually write a script. Consider that as a Linux machine boots up, it executes the shell scripts in /etc/rc.d to restore the system configuration and set up services. A detailed understanding of these startup scripts is important for analyzing the behavior of a system, and possibly modifying it. The craft of scripting is not hard to master, since scripts can be built in bite-sized sections and there is only a fairly small set of shell-specific operators and options [1] to learn. The syntax is simple -- even austere -- similar to that of invoking and chaining together utilities at the command line, and there are only a few &quot;rules&quot; governing their use. Most short scripts work right the first time, and debugging even the longer ones is straightforward. In the early days of personal computing, the BASIC language enabled anyone reasonably computer proficient to write programs on an early generation of microcomputers. Decades later, the Bash scripting language enables anyone with a rudimentary knowledge of Linux or UNIX to do the same on modern machines. We now have miniaturized single-board computers with amazing capabilities, such as the Raspberry Pi. Bash scripting provides a way to explore the capabilities of these fascinating devices. A shell script is a quick-and-dirty method of prototyping a complex application. Getting even a limited subset of the functionality to work in a script is often a useful first stage in project development. In this way, the structure of the application can be tested and tinkered with, and the major pitfalls found before proceeding to the final coding in C, C++, Java, Perl, or Python. Shell scripting hearkens back to the classic UNIX philosophy of breaking complex projects into simpler subtasks, of chaining together components and utilities. Many consider this a better, or at least more esthetically pleasing approach to problem solving than using one of the new generation of high-powered all-in-one languages, such as Perl, which attempt to be all things to all people, but at the cost of forcing you to alter your thinking processes to fit the tool. According to Herbert Mayer, &quot;a useful language needs arrays, pointers, and a generic mechanism for building data structures.&quot; By these criteria, shell scripting falls somewhat short of being &quot;useful.&quot; Or, perhaps not. . . . When not to use shell scripts Resource-intensive tasks, especially where speed is a factor (sorting, hashing, recursion [2] ...) Procedures involving heavy-duty math operations, especially floating point arithmetic, arbitrary precision calculations, or complex numbers (use C++ or FORTRAN instead) Cross-platform portability required (use C or Java instead) Complex applications, where structured programming is a necessity (type-checking of variables, function prototypes, etc.) Mission-critical applications upon which you are betting the future of the company Situations where security is important, where you need to guarantee the integrity of your system and protect against intrusion, cracking, and vandalism Project consists of subcomponents with interlocking dependencies Extensive file operations required (Bash is limited to serial file access, and that only in a particularly clumsy and inefficient line-by-line fashion.) Need native support for multi-dimensional arrays Need data structures, such as linked lists or trees Need to generate / manipulate graphics or GUIs Need direct access to system hardware or external peripherals Need port or socket I/O Need to use libraries or interface with legacy code Proprietary, closed-source applications (Shell scripts put the source code right out in the open for all the world to see.) If any of the above applies, consider a more powerful scripting language -- perhaps Perl, Tcl, Python, Ruby -- or possibly a compiled language such as C, C++, or Java. Even then, prototyping the application as a shell script might still be a useful development step. We will be using Bash, an acronym [3] for &quot;Bourne-Again shell&quot; and a pun on Stephen Bourne's now classic Bourne shell. Bash has become a de facto standard for shell scripting on most flavors of UNIX. Most of the principles this book covers apply equally well to scripting with other shells, such as the Korn Shell, from which Bash derives some of its features, [4] and the C Shell and its variants. (Note that C Shell programming is not recommended due to certain inherent problems, as pointed out in an October, 1993 Usenet post by Tom Christiansen.) What follows is a tutorial on shell scripting. It relies heavily on examples to illustrate various features of the shell. The example scripts work -- they've been tested, insofar as possible -- and some of them are even useful in real life. The reader can play with the actual working code of the examples in the source archive (scriptname.sh or scriptname.bash), [5] give them execute permission (chmod u+rx scriptname), then run them to see what happens. Should the source archive not be available, then cut-and-paste from the HTML or pdf rendered versions. Be aware that some of the scripts presented here introduce features before they are explained, and this may require the reader to temporarily skip ahead for enlightenment. Unless otherwise noted, the author of this book wrote the example scripts that follow. His countenance was bold and bashed not. --Edmund Spenser Chapter 2. Starting Off With a Sha-Bang Shell programming is a 1950s juke box . . . --Larry Wall In the simplest case, a script is nothing more than a list of system commands stored in a file. At the very least, this saves the effort of retyping that particular sequence of commands each time it is invoked. Example 2-1. cleanup: A script to clean up log files in /var/log # Cleanup # Run as root, of course. cd /var/log cat /dev/null &gt; messages cat /dev/null &gt; wtmp echo &quot;Log files cleaned up.&quot; There is nothing unusual here, only a set of commands that could just as easily have been invoked one by one from the command-line on the console or in a terminal window. The advantages of placing the commands in a script go far beyond not having to retype them time and again. The script becomes a program -- a tool -- and it can easily be modified or customized for a particular application. Example 2-2. cleanup: An improved clean-up script #!/bin/bash # Proper header for a Bash script. # Cleanup, version 2 # Run as root, of course. # Insert code here to print error message and exit if not root. LOG_DIR=/var/log # Variables are better than hard-coded values. cd $LOG_DIR cat /dev/null &gt; messages cat /dev/null &gt; wtmp echo &quot;Logs cleaned up.&quot; exit # The right and proper method of &quot;exiting&quot; from a script. # A bare &quot;exit&quot; (no parameter) returns the exit status #+ of the preceding command. Now that's beginning to look like a real script. But we can go even farther . . . Example 2-3. cleanup: An enhanced and generalized version of above scripts. #!/bin/bash # Cleanup, version 3 # Warning: # ------- # This script uses quite a number of features that will be explained #+ later on. # By the time you've finished the first half of the book, #+ there should be nothing mysterious about it. LOG_DIR=/var/log ROOT_UID=0 # Only users with $UID 0 have root privileges. LINES=50 # Default number of lines saved. E_XCD=86 # Can't change directory? E_NOTROOT=87 # Non-root exit error. # Run as root, of course. if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo &quot;Must be root to run this script.&quot; exit $E_NOTROOT fi if [ -n &quot;$1&quot; ] # Test whether command-line argument is present (non-empty). then lines=$1 else lines=$LINES # Default, if not specified on command-line. fi # Stephane Chazelas suggests the following, #+ as a better way of checking command-line arguments, #+ but this is still a bit advanced for this stage of the tutorial. # # E_WRONGARGS=85 # Non-numerical argument (bad argument format). # # case &quot;$1&quot; in # &quot;&quot; ) lines=50;; # *[!0-9]*) echo &quot;Usage: `basename $0` lines-to-cleanup&quot;; # exit $E_WRONGARGS;; # * ) lines=$1;; # esac # #* Skip ahead to &quot;Loops&quot; chapter to decipher all this. cd $LOG_DIR if [ `pwd` != &quot;$LOG_DIR&quot; ] # or if [ &quot;$PWD&quot; != &quot;$LOG_DIR&quot; ] # Not in /var/log? then echo &quot;Can't change to $LOG_DIR.&quot; exit $E_XCD fi # Doublecheck if in right directory before messing with log file. # Far more efficient is: # # cd /var/log || { # echo &quot;Cannot change to necessary directory.&quot; &gt;&amp;2 # exit $E_XCD; # } tail -n $lines messages &gt; mesg.temp # Save last section of message log file. mv mesg.temp messages # Rename it as system log file. # cat /dev/null &gt; messages #* No longer needed, as the above method is safer. cat /dev/null &gt; wtmp # ': &gt; wtmp' and '&gt; wtmp' have the same effect. echo &quot;Log files cleaned up.&quot; # Note that there are other log files in /var/log not affected #+ by this script. exit 0 # A zero return value from the script upon exit indicates success #+ to the shell. Since you may not wish to wipe out the entire system log, this version of the script keeps the last section of the message log intact. You will constantly discover ways of fine-tuning previously written scripts for increased effectiveness. * * * The sha-bang ( #!) [6] at the head of a script tells your system that this file is a set of commands to be fed to the command interpreter indicated. The #! is actually a two-byte [7] magic number, a special marker that designates a file type, or in this case an executable shell script (type man magic for more details on this fascinating topic). Immediately following the sha-bang is a path name. This is the path to the program that interprets the commands in the script, whether it be a shell, a programming language, or a utility. This command interpreter then executes the commands in the script, starting at the top (the line following the sha-bang line), and ignoring comments. [8] #!/bin/sh #!/bin/bash #!/usr/bin/perl #!/usr/bin/tcl #!/bin/sed -f #!/bin/awk -f Each of the above script header lines calls a different command interpreter, be it /bin/sh, the default shell (bash in a Linux system) or otherwise. [9] Using #!/bin/sh, the default Bourne shell in most commercial variants of UNIX, makes the script portable to non-Linux machines, though you sacrifice Bash-specific features. The script will, however, conform to the POSIX [10] sh standard. Note that the path given at the &quot;sha-bang&quot; must be correct, otherwise an error message -- usually &quot;Command not found.&quot; -- will be the only result of running the script. [11] #! can be omitted if the script consists only of a set of generic system commands, using no internal shell directives. The second example, above, requires the initial #!, since the variable assignment line, lines=50, uses a shell-specific construct. [12] Note again that #!/bin/sh invokes the default shell interpreter, which defaults to /bin/bash on a Linux machine. Tip This tutorial encourages a modular approach to constructing a script. Make note of and collect &quot;boilerplate&quot; code snippets that might be useful in future scripts. Eventually you will build quite an extensive library of nifty routines. As an example, the following script prolog tests whether the script has been invoked with the correct number of parameters. E_WRONG_ARGS=85 script_parameters=&quot;-a -h -m -z&quot; # -a = all, -h = help, etc. if [ $# -ne $Number_of_expected_args ] then echo &quot;Usage: `basename $0` $script_parameters&quot; # `basename $0` is the script's filename. exit $E_WRONG_ARGS fi Many times, you will write a script that carries out one particular task. The first script in this chapter is an example. Later, it might occur to you to generalize the script to do other, similar tasks. Replacing the literal (&quot;hard-wired&quot;) constants by variables is a step in that direction, as is replacing repetitive code blocks by functions. 2.1. Invoking the script Having written the script, you can invoke it by sh scriptname, [13] or alternatively bash scriptname. (Not recommended is using sh &lt;scriptname, since this effectively disables reading from stdin within the script.) Much more convenient is to make the script itself directly executable with a chmod. Either: chmod 555 scriptname (gives everyone read/execute permission) [14] or chmod +rx scriptname (gives everyone read/execute permission) chmod u+rx scriptname (gives only the script owner read/execute permission) Having made the script executable, you may now test it by ./scriptname. [15] If it begins with a &quot;sha-bang&quot; line, invoking the script calls the correct command interpreter to run it. As a final step, after testing and debugging, you would likely want to move it to /usr/local/bin (as root, of course), to make the script available to yourself and all other users as a systemwide executable. The script could then be invoked by simply typing scriptname [ENTER] from the command-line. 2.2. Preliminary Exercises System administrators often write scripts to automate common tasks. Give several instances where such scripts would be useful. Write a script that upon invocation shows the time and date, lists all logged-in users, and gives the system uptime. The script then saves this information to a logfile. Part 2. Basics Table of Contents 3. Special Characters 4. Introduction to Variables and Parameters 4.1. Variable Substitution 4.2. Variable Assignment 4.3. Bash Variables Are Untyped 4.4. Special Variable Types 5. Quoting 5.1. Quoting Variables 5.2. Escaping 6. Exit and Exit Status 7. Tests 7.1. Test Constructs 7.2. File test operators 7.3. Other Comparison Operators 7.4. Nested if/then Condition Tests 7.5. Testing Your Knowledge of Tests 8. Operations and Related Topics 8.1. Operators 8.2. Numerical Constants 8.3. The Double-Parentheses Construct 8.4. Operator Precedence Chapter 3. Special Characters What makes a character special? If it has a meaning beyond its literal meaning, a meta-meaning, then we refer to it as a special character. Along with commands and keywords, special characters are building blocks of Bash scripts. Special Characters Found In Scripts and Elsewhere # Comments. Lines beginning with a # (with the exception of #!) are comments and will not be executed. # This line is a comment. Comments may also occur following the end of a command. echo &quot;A comment will follow.&quot; # Comment here. # ^ Note whitespace before # Comments may also follow whitespace at the beginning of a line. # A tab precedes this comment. Comments may even be embedded within a pipe. initial=( `cat &quot;$startfile&quot; | sed -e '/#/d' | tr -d '\n' |\ # Delete lines containing '#' comment character. sed -e 's/\./\. /g' -e 's/_/_ /g'` ) # Excerpted from life.sh script Caution A command may not follow a comment on the same line. There is no method of terminating the comment, in order for &quot;live code&quot; to begin on the same line. Use a new line for the next command. Note Of course, a quoted or an escaped # in an echo statement does not begin a comment. Likewise, a # appears in certain parameter-substitution constructs and in numerical constant expressions. echo &quot;The # here does not begin a comment.&quot; echo 'The # here does not begin a comment.' echo The \# here does not begin a comment. echo The # here begins a comment. echo ${PATH#*:} # Parameter substitution, not a comment. echo $(( 2#101011 )) # Base conversion, not a comment. # Thanks, S.C. The standard quoting and escape characters (&quot; ' \) escape the #. Certain pattern matching operations also use the #. ; Command separator [semicolon]. Permits putting two or more commands on the same line. echo hello; echo there if [ -x &quot;$filename&quot; ]; then # Note the space after the semicolon. #+ ^^ echo &quot;File $filename exists.&quot;; cp $filename $filename.bak else # ^^ echo &quot;File $filename not found.&quot;; touch $filename fi; echo &quot;File test complete.&quot; Note that the &quot;;&quot; sometimes needs to be escaped. ;; Terminator in a case option [double semicolon]. case &quot;$variable&quot; in abc) echo &quot;\$variable = abc&quot; ;; xyz) echo &quot;\$variable = xyz&quot; ;; esac ;;&amp;, ;&amp; Terminators in a case option (version 4+ of Bash). . &quot;dot&quot; command [period]. Equivalent to source (see Example 15-22). This is a bash builtin. . &quot;dot&quot;, as a component of a filename. When working with filenames, a leading dot is the prefix of a &quot;hidden&quot; file, a file that an ls will not normally show. bash$ touch .hidden-file bash$ ls -l total 10 -rw-r--r-- 1 bozo 4034 Jul 18 22:04 data1.addressbook -rw-r--r-- 1 bozo 4602 May 25 13:58 data1.addressbook.bak -rw-r--r-- 1 bozo 877 Dec 17 2000 employment.addressbook bash$ ls -al total 14 drwxrwxr-x 2 bozo bozo 1024 Aug 29 20:54 ./ drwx------ 52 bozo bozo 3072 Aug 29 20:51 ../ -rw-r--r-- 1 bozo bozo 4034 Jul 18 22:04 data1.addressbook -rw-r--r-- 1 bozo bozo 4602 May 25 13:58 data1.addressbook.bak -rw-r--r-- 1 bozo bozo 877 Dec 17 2000 employment.addressbook -rw-rw-r-- 1 bozo bozo 0 Aug 29 20:54 .hidden-file When considering directory names, a single dot represents the current working directory, and two dots denote the parent directory. bash$ pwd /home/bozo/projects bash$ cd . bash$ pwd /home/bozo/projects bash$ cd .. bash$ pwd /home/bozo/ The dot often appears as the destination (directory) of a file movement command, in this context meaning current directory. bash$ cp /home/bozo/current_work/junk/* . Copy all the &quot;junk&quot; files to $PWD. . &quot;dot&quot; character match. When matching characters, as part of a regular expression, a &quot;dot&quot; matches a single character. &quot; partial quoting [double quote]. &quot;STRING&quot; preserves (from interpretation) most of the special characters within STRING. See Chapter 5. ' full quoting [single quote]. 'STRING' preserves all special characters within STRING. This is a stronger form of quoting than &quot;STRING&quot;. See Chapter 5. , comma operator. The comma operator [16] links together a series of arithmetic operations. All are evaluated, but only the last one is returned. let &quot;t2 = ((a = 9, 15 / 3))&quot; # Set &quot;a = 9&quot; and &quot;t2 = 15 / 3&quot; The comma operator can also concatenate strings. for file in /{,usr/}bin/*calc # ^ Find all executable files ending in &quot;calc&quot; #+ in /bin and /usr/bin directories. do if [ -x &quot;$file&quot; ] then echo $file fi done # /bin/ipcalc # /usr/bin/kcalc # /usr/bin/oidcalc # /usr/bin/oocalc # Thank you, Rory Winston, for pointing this out. ,, , Lowercase conversion in parameter substitution (added in version 4 of Bash). \ escape [backslash]. A quoting mechanism for single characters. \X escapes the character X. This has the effect of &quot;quoting&quot; X, equivalent to 'X'. The \ may be used to quote &quot; and ', so they are expressed literally. See Chapter 5 for an in-depth explanation of escaped characters. / Filename path separator [forward slash]. Separates the components of a filename (as in /home/bozo/projects/Makefile). This is also the division arithmetic operator. ` command substitution. The `command` construct makes available the output of command for assignment to a variable. This is also known as backquotes or backticks. : null command [colon]. This is the shell equivalent of a &quot;NOP&quot; (no op, a do-nothing operation). It may be considered a synonym for the shell builtin true. The &quot;:&quot; command is itself a Bash builtin, and its exit status is true (0). : echo $? # 0 Endless loop: while : do operation-1 operation-2 ... operation-n done # Same as: # while true # do # ... # done Placeholder in if/then test: if condition then : # Do nothing and branch ahead else # Or else ... take-some-action fi Provide a placeholder where a binary operation is expected, see Example 8-2 and default parameters. : ${username=`whoami`} # ${username=`whoami`} Gives an error without the leading : # unless &quot;username&quot; is a command or builtin... : ${1?&quot;Usage: $0 ARGUMENT&quot;} # From &quot;usage-message.sh example script. Provide a placeholder where a command is expected in a here document. See Example 19-10. Evaluate string of variables using parameter substitution (as in Example 10-7). : ${HOSTNAME?} ${USER?} ${MAIL?} # Prints error message #+ if one or more of essential environmental variables not set. Variable expansion / substring replacement. In combination with the &gt; redirection operator, truncates a file to zero length, without changing its permissions. If the file did not previously exist, creates it. : &gt; data.xxx # File &quot;data.xxx&quot; now empty. # Same effect as cat /dev/null &gt;data.xxx # However, this does not fork a new process, since &quot;:&quot; is a builtin. See also Example 16-15. In combination with the &gt;&gt; redirection operator, has no effect on a pre-existing target file (: &gt;&gt; target_file). If the file did not previously exist, creates it. Note This applies to regular files, not pipes, symlinks, and certain special files. May be used to begin a comment line, although this is not recommended. Using # for a comment turns off error checking for the remainder of that line, so almost anything may appear in a comment. However, this is not the case with :. : This is a comment that generates an error, ( if [ $x -eq 3] ). The &quot;:&quot; serves as a field separator, in /etc/passwd, and in the $PATH variable. bash$ echo $PATH /usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games A colon is acceptable as a function name. :() { echo &quot;The name of this function is &quot;$FUNCNAME&quot; &quot; # Why use a colon as a function name? # It's a way of obfuscating your code. } : # The name of this function is : This is not portable behavior, and therefore not a recommended practice. In fact, more recent releases of Bash do not permit this usage. An underscore _ works, though. A colon can serve as a placeholder in an otherwise empty function. not_empty () { : } # Contains a : (null command), and so is not empty. ! reverse (or negate) the sense of a test or exit status [bang]. The ! operator inverts the exit status of the command to which it is applied (see Example 6-2). It also inverts the meaning of a test operator. This can, for example, change the sense of equal ( = ) to not-equal ( != ). The ! operator is a Bash keyword. In a different context, the ! also appears in indirect variable references. In yet another context, from the command line, the ! invokes the Bash history mechanism (see Appendix L). Note that within a script, the history mechanism is disabled. * wild card [asterisk]. The * character serves as a &quot;wild card&quot; for filename expansion in globbing. By itself, it matches every filename in a given directory. bash$ echo * abs-book.sgml add-drive.sh agram.sh alias.sh The * also represents any number (or zero) characters in a regular expression. * arithmetic operator. In the context of arithmetic operations, the * denotes multiplication. ** A double asterisk can represent the exponentiation operator or extended file-match globbing. ? test operator. Within certain expressions, the ? indicates a test for a condition. In a double-parentheses construct, the ? can serve as an element of a C-style trinary operator. [17] condition?result-if-true:result-if-false (( var0 = var1&lt;98?9:21 )) # ^ ^ # if [ &quot;$var1&quot; -lt 98 ] # then # var0=9 # else # var0=21 # fi In a parameter substitution expression, the ? tests whether a variable has been set. ? wild card. The ? character serves as a single-character &quot;wild card&quot; for filename expansion in globbing, as well as representing one character in an extended regular expression. $ Variable substitution (contents of a variable). var1=5 var2=23skidoo echo $var1 # 5 echo $var2 # 23skidoo A $ prefixing a variable name indicates the value the variable holds. $ end-of-line. In a regular expression, a &quot;$&quot; addresses the end of a line of text. ${} Parameter substitution. $' ... ' Quoted string expansion. This construct expands single or multiple escaped octal or hex values into ASCII [18] or Unicode characters. $*, $@ positional parameters. $? exit status variable. The $? variable holds the exit status of a command, a function, or of the script itself. $$ process ID variable. The $$ variable holds the process ID [19] of the script in which it appears. () command group. (a=hello; echo $a) Important A listing of commands within parentheses starts a subshell. Variables inside parentheses, within the subshell, are not visible to the rest of the script. The parent process, the script, cannot read variables created in the child process, the subshell. a=123 ( a=321; ) echo &quot;a = $a&quot; # a = 123 # &quot;a&quot; within parentheses acts like a local variable. array initialization. Array=(element1 element2 element3) {xxx,yyy,zzz,...} Brace expansion. echo \&quot;{These,words,are,quoted}\&quot; # &quot; prefix and suffix # &quot;These&quot; &quot;words&quot; &quot;are&quot; &quot;quoted&quot; cat {file1,file2,file3} &gt; combined_file # Concatenates the files file1, file2, and file3 into combined_file. cp file22.{txt,backup} # Copies &quot;file22.txt&quot; to &quot;file22.backup&quot; A command may act upon a comma-separated list of file specs within braces. [20] Filename expansion (globbing) applies to the file specs between the braces. Caution No spaces allowed within the braces unless the spaces are quoted or escaped. echo {file1,file2}\ :{\ A,&quot; B&quot;,' C'} file1 : A file1 : B file1 : C file2 : A file2 : B file2 : C {a..z} Extended Brace expansion. echo {a..z} # a b c d e f g h i j k l m n o p q r s t u v w x y z # Echoes characters between a and z. echo {0..3} # 0 1 2 3 # Echoes characters between 0 and 3. base64_charset=( {A..Z} {a..z} {0..9} + / = ) # Initializing an array, using extended brace expansion. # From vladz's &quot;base64.sh&quot; example script. The {a..z} extended brace expansion construction is a feature introduced in version 3 of Bash. {} Block of code [curly brackets]. Also referred to as an inline group, this construct, in effect, creates an anonymous function (a function without a name). However, unlike in a &quot;standard&quot; function, the variables inside a code block remain visible to the remainder of the script. bash$ { local a; a=123; } bash: local: can only be used in a function a=123 { a=321; } echo &quot;a = $a&quot; # a = 321 (value inside code block) # Thanks, S.C. The code block enclosed in braces may have I/O redirected to and from it. Example 3-1. Code blocks and I/O redirection #!/bin/bash # Reading lines in /etc/fstab. File=/etc/fstab { read line1 read line2 } &lt; $File echo &quot;First line in $File is:&quot; echo &quot;$line1&quot; echo echo &quot;Second line in $File is:&quot; echo &quot;$line2&quot; exit 0 # Now, how do you parse the separate fields of each line? # Hint: use awk, or . . . # . . . Hans-Joerg Diers suggests using the &quot;set&quot; Bash builtin. Example 3-2. Saving the output of a code block to a file #!/bin/bash # rpm-check.sh # Queries an rpm file for description, listing, #+ and whether it can be installed. # Saves output to a file. # # This script illustrates using a code block. SUCCESS=0 E_NOARGS=65 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` rpm-file&quot; exit $E_NOARGS fi { # Begin code block. echo echo &quot;Archive Description:&quot; rpm -qpi $1 # Query description. echo echo &quot;Archive Listing:&quot; rpm -qpl $1 # Query listing. echo rpm -i --test $1 # Query whether rpm file can be installed. if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;$1 can be installed.&quot; else echo &quot;$1 cannot be installed.&quot; fi echo # End code block. } &gt; &quot;$1.test&quot; # Redirects output of everything in block to file. echo &quot;Results of rpm test in file $1.test&quot; # See rpm man page for explanation of options. exit 0 Note Unlike a command group within (parentheses), as above, a code block enclosed by {braces} will not normally launch a subshell. [21] It is possible to iterate a code block using a non-standard for-loop. {} placeholder for text. Used after xargs -i (replace strings option). The {} double curly brackets are a placeholder for output text. ls . | xargs -i -t cp ./{} $1 # ^^ ^^ # From &quot;ex42.sh&quot; (copydir.sh) example. {} \; pathname. Mostly used in find constructs. This is not a shell builtin. Definition: A pathname is a filename that includes the complete path. As an example, /home/bozo/Notes/Thursday/schedule.txt. This is sometimes referred to as the absolute path. Note The &quot;;&quot; ends the -exec option of a find command sequence. It needs to be escaped to protect it from interpretation by the shell. [ ] test. Test expression between [ ]. Note that [ is part of the shell builtin test (and a synonym for it), not a link to the external command /usr/bin/test. [[ ]] test. Test expression between [[ ]]. More flexible than the single-bracket [ ] test, this is a shell keyword. See the discussion on the [[ ... ]] construct. [ ] array element. In the context of an array, brackets set off the numbering of each element of that array. Array[1]=slot_1 echo ${Array[1]} [ ] range of characters. As part of a regular expression, brackets delineate a range of characters to match. $[ ... ] integer expansion. Evaluate integer expression between $[ ]. a=3 b=7 echo $[$a+$b] # 10 echo $[$a*$b] # 21 Note that this usage is deprecated, and has been replaced by the (( ... )) construct. (( )) integer expansion. Expand and evaluate integer expression between (( )). See the discussion on the (( ... )) construct. &gt; &amp;&gt; &gt;&amp; &gt;&gt; &lt; &lt;&gt; redirection. scriptname &gt;filename redirects the output of scriptname to file filename. Overwrite filename if it already exists. command &amp;&gt;filename redirects both the stdout and the stderr of command to filename. Note This is useful for suppressing output when testing for a condition. For example, let us test whether a certain command exists. bash$ type bogus_command &amp;&gt;/dev/null bash$ echo $? 1 Or in a script: command_test () { type &quot;$1&quot; &amp;&gt;/dev/null; } # ^ cmd=rmdir # Legitimate command. command_test $cmd; echo $? # 0 cmd=bogus_command # Illegitimate command command_test $cmd; echo $? # 1 command &gt;&amp;2 redirects stdout of command to stderr. scriptname &gt;&gt;filename appends the output of scriptname to file filename. If filename does not already exist, it is created. [i]&lt;&gt;filename opens file filename for reading and writing, and assigns file descriptor i to it. If filename does not exist, it is created. process substitution. (command)&gt; &lt;(command) In a different context, the &quot;&lt;&quot; and &quot;&gt;&quot; characters act as string comparison operators. In yet another context, the &quot;&lt;&quot; and &quot;&gt;&quot; characters act as integer comparison operators. See also Example 16-9. &lt;&lt; redirection used in a here document. &lt;&lt;&lt; redirection used in a here string. &lt;, &gt; ASCII comparison. veg1=carrots veg2=tomatoes if [[ &quot;$veg1&quot; &lt; &quot;$veg2&quot; ]] then echo &quot;Although $veg1 precede $veg2 in the dictionary,&quot; echo -n &quot;this does not necessarily imply anything &quot; echo &quot;about my culinary preferences.&quot; else echo &quot;What kind of dictionary are you using, anyhow?&quot; fi \&lt;, \&gt; word boundary in a regular expression. bash$ grep '\&lt;the\&gt;' textfile | pipe. Passes the output (stdout) of a previous command to the input (stdin) of the next one, or to the shell. This is a method of chaining commands together. echo ls -l | sh # Passes the output of &quot;echo ls -l&quot; to the shell, #+ with the same result as a simple &quot;ls -l&quot;. cat *.lst | sort | uniq # Merges and sorts all &quot;.lst&quot; files, then deletes duplicate lines. A pipe, as a classic method of interprocess communication, sends the stdout of one process to the stdin of another. In a typical case, a command, such as cat or echo, pipes a stream of data to a filter, a command that transforms its input for processing. [22] cat $filename1 $filename2 | grep $search_word For an interesting note on the complexity of using UNIX pipes, see the UNIX FAQ, Part 3. The output of a command or commands may be piped to a script. #!/bin/bash # uppercase.sh : Changes input to uppercase. tr 'a-z' 'A-Z' # Letter ranges must be quoted #+ to prevent filename generation from single-letter filenames. exit 0 Now, let us pipe the output of ls -l to this script. bash$ ls -l | ./uppercase.sh -RW-RW-R-- 1 BOZO BOZO 109 APR 7 19:49 1.TXT -RW-RW-R-- 1 BOZO BOZO 109 APR 14 16:48 2.TXT -RW-R--R-- 1 BOZO BOZO 725 APR 20 20:56 DATA-FILE Note The stdout of each process in a pipe must be read as the stdin of the next. If this is not the case, the data stream will block, and the pipe will not behave as expected. cat file1 file2 | ls -l | sort # The output from &quot;cat file1 file2&quot; disappears. A pipe runs as a child process, and therefore cannot alter script variables. variable=&quot;initial_value&quot; echo &quot;new_value&quot; | read variable echo &quot;variable = $variable&quot; # variable = initial_value If one of the commands in the pipe aborts, this prematurely terminates execution of the pipe. Called a broken pipe, this condition sends a SIGPIPE signal. &gt;| force redirection (even if the noclobber option is set). This will forcibly overwrite an existing file. || OR logical operator. In a test construct, the || operator causes a return of 0 (success) if either of the linked test conditions is true. &amp; Run job in background. A command followed by an &amp; will run in the background. bash$ sleep 10 &amp; [1] 850 [1]+ Done sleep 10 Within a script, commands and even loops may run in the background. Example 3-3. Running a loop in the background #!/bin/bash # background-loop.sh for i in 1 2 3 4 5 6 7 8 9 10 # First loop. do echo -n &quot;$i &quot; done &amp; # Run this loop in background. # Will sometimes execute after second loop. echo # This 'echo' sometimes will not display. for i in 11 12 13 14 15 16 17 18 19 20 # Second loop. do echo -n &quot;$i &quot; done echo # This 'echo' sometimes will not display. # ====================================================== # The expected output from the script: # 1 2 3 4 5 6 7 8 9 10 # 11 12 13 14 15 16 17 18 19 20 # Sometimes, though, you get: # 11 12 13 14 15 16 17 18 19 20 # 1 2 3 4 5 6 7 8 9 10 bozo $ # (The second 'echo' doesn't execute. Why?) # Occasionally also: # 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # (The first 'echo' doesn't execute. Why?) # Very rarely something like: # 11 12 13 1 2 3 4 5 6 7 8 9 10 14 15 16 17 18 19 20 # The foreground loop preempts the background one. exit 0 # Nasimuddin Ansari suggests adding sleep 1 #+ after the echo -n &quot;$i&quot; in lines 6 and 14, #+ for some real fun. Caution A command run in the background within a script may cause the script to hang, waiting for a keystroke. Fortunately, there is a remedy for this. &amp;&amp; AND logical operator. In a test construct, the &amp;&amp; operator causes a return of 0 (success) only if both the linked test conditions are true. - option, prefix. Option flag for a command or filter. Prefix for an operator. Prefix for a default parameter in parameter substitution. COMMAND -[Option1][Option2][...] ls -al sort -dfu $filename if [ $file1 -ot $file2 ] then # ^ echo &quot;File $file1 is older than $file2.&quot; fi if [ &quot;$a&quot; -eq &quot;$b&quot; ] then # ^ echo &quot;$a is equal to $b.&quot; fi if [ &quot;$c&quot; -eq 24 -a &quot;$d&quot; -eq 47 ] then # ^ ^ echo &quot;$c equals 24 and $d equals 47.&quot; fi param2=${param1:-$DEFAULTVAL} # ^ -- The double-dash -- prefixes long (verbatim) options to commands. sort --ignore-leading-blanks Used with a Bash builtin, it means the end of options to that particular command. Tip This provides a handy means of removing files whose names begin with a dash. bash$ ls -l -rw-r--r-- 1 bozo bozo 0 Nov 25 12:29 -badname bash$ rm -- -badname bash$ ls -l total 0 The double-dash is also used in conjunction with set. set -- $variable (as in Example 15-18) - redirection from/to stdin or stdout [dash]. bash$ cat - abc abc ... Ctl-D As expected, cat - echoes stdin, in this case keyboarded user input, to stdout. But, does I/O redirection using - have real-world applications? (cd /source/directory &amp;&amp; tar cf - . ) | (cd /dest/directory &amp;&amp; tar xpvf -) # Move entire file tree from one directory to another # [courtesy Alan Cox &lt;a.cox@swansea.ac.uk&gt;, with a minor change] # 1) cd /source/directory # Source directory, where the files to be moved are. # 2) &amp;&amp; # &quot;And-list&quot;: if the 'cd' operation successful, # then execute the next command. # 3) tar cf - . # The 'c' option 'tar' archiving command creates a new archive, # the 'f' (file) option, followed by '-' designates the target file # as stdout, and do it in current directory tree ('.'). # 4) | # Piped to ... # 5) ( ... ) # a subshell # 6) cd /dest/directory # Change to the destination directory. # 7) &amp;&amp; # &quot;And-list&quot;, as above # 8) tar xpvf - # Unarchive ('x'), preserve ownership and file permissions ('p'), # and send verbose messages to stdout ('v'), # reading data from stdin ('f' followed by '-'). # # Note that 'x' is a command, and 'p', 'v', 'f' are options. # # Whew! # More elegant than, but equivalent to: # cd source/directory # tar cf - . | (cd ../dest/directory; tar xpvf -) # # Also having same effect: # cp -a /source/directory/* /dest/directory # Or: # cp -a /source/directory/* /source/directory/.[^.]* /dest/directory # If there are hidden files in /source/directory. bunzip2 -c linux-2.6.16.tar.bz2 | tar xvf - # --uncompress tar file-- | --then pass it to &quot;tar&quot;-- # If &quot;tar&quot; has not been patched to handle &quot;bunzip2&quot;, #+ this needs to be done in two discrete steps, using a pipe. # The purpose of the exercise is to unarchive &quot;bzipped&quot; kernel source. Note that in this context the &quot;-&quot; is not itself a Bash operator, but rather an option recognized by certain UNIX utilities that write to stdout, such as tar, cat, etc. bash$ echo &quot;whatever&quot; | cat - whatever Where a filename is expected, - redirects output to stdout (sometimes seen with tar cf), or accepts input from stdin, rather than from a file. This is a method of using a file-oriented utility as a filter in a pipe. bash$ file Usage: file [-bciknvzL] [-f namefile] [-m magicfiles] file... By itself on the command-line, file fails with an error message. Add a &quot;-&quot; for a more useful result. This causes the shell to await user input. bash$ file - abc standard input: ASCII text bash$ file - #!/bin/bash standard input: Bourne-Again shell script text executable Now the command accepts input from stdin and analyzes it. The &quot;-&quot; can be used to pipe stdout to other commands. This permits such stunts as prepending lines to a file. Using diff to compare a file with a section of another: grep Linux file1 | diff file2 - Finally, a real-world example using - with tar. Example 3-4. Backup of all files changed in last day #!/bin/bash # Backs up all files in current directory modified within last 24 hours #+ in a &quot;tarball&quot; (tarred and gzipped file). BACKUPFILE=backup-$(date +%m-%d-%Y) # Embeds date in backup filename. # Thanks, Joshua Tschida, for the idea. archive=${1:-$BACKUPFILE} # If no backup-archive filename specified on command-line, #+ it will default to &quot;backup-MM-DD-YYYY.tar.gz.&quot; tar cvf - `find . -mtime -1 -type f -print` &gt; $archive.tar gzip $archive.tar echo &quot;Directory $PWD backed up in archive file \&quot;$archive.tar.gz\&quot;.&quot; # Stephane Chazelas points out that the above code will fail #+ if there are too many files found #+ or if any filenames contain blank characters. # He suggests the following alternatives: # ------------------------------------------------------------------- # find . -mtime -1 -type f -print0 | xargs -0 tar rvf &quot;$archive.tar&quot; # using the GNU version of &quot;find&quot;. # find . -mtime -1 -type f -exec tar rvf &quot;$archive.tar&quot; '{}' \; # portable to other UNIX flavors, but much slower. # ------------------------------------------------------------------- exit 0 Caution Filenames beginning with &quot;-&quot; may cause problems when coupled with the &quot;-&quot; redirection operator. A script should check for this and add an appropriate prefix to such filenames, for example ./-FILENAME, $PWD/-FILENAME, or $PATHNAME/-FILENAME. If the value of a variable begins with a -, this may likewise create problems. var=&quot;-n&quot; echo $var # Has the effect of &quot;echo -n&quot;, and outputs nothing. - previous working directory. A cd - command changes to the previous working directory. This uses the $OLDPWD environmental variable. Caution Do not confuse the &quot;-&quot; used in this sense with the &quot;-&quot; redirection operator just discussed. The interpretation of the &quot;-&quot; depends on the context in which it appears. - Minus. Minus sign in an arithmetic operation. = Equals. Assignment operator a=28 echo $a # 28 In a different context, the &quot;=&quot; is a string comparison operator. + Plus. Addition arithmetic operator. In a different context, the + is a Regular Expression operator. + Option. Option flag for a command or filter. Certain commands and builtins use the + to enable certain options and the - to disable them. In parameter substitution, the + prefixes an alternate value that a variable expands to. % modulo. Modulo (remainder of a division) arithmetic operation. let &quot;z = 5 % 3&quot; echo $z # 2 In a different context, the % is a pattern matching operator. ~ home directory [tilde]. This corresponds to the $HOME internal variable. ~bozo is bozo's home directory, and ls ~bozo lists the contents of it. ~/ is the current user's home directory, and ls ~/ lists the contents of it. bash$ echo ~bozo /home/bozo bash$ echo ~ /home/bozo bash$ echo ~/ /home/bozo/ bash$ echo ~: /home/bozo: bash$ echo ~nonexistent-user ~nonexistent-user ~+ current working directory. This corresponds to the $PWD internal variable. ~- previous working directory. This corresponds to the $OLDPWD internal variable. =~ regular expression match. This operator was introduced with version 3 of Bash. ^ beginning-of-line. In a regular expression, a &quot;^&quot; addresses the beginning of a line of text. ^, ^^ Uppercase conversion in parameter substitution (added in version 4 of Bash). Control Characters change the behavior of the terminal or text display. A control character is a CONTROL + key combination (pressed simultaneously). A control character may also be written in octal or hexadecimal notation, following an escape. Control characters are not normally useful inside a script. Ctl-A Moves cursor to beginning of line of text (on the command-line). Ctl-B Backspace (nondestructive). Ctl-C Break. Terminate a foreground job. Ctl-D Log out from a shell (similar to exit). EOF (end-of-file). This also terminates input from stdin. When typing text on the console or in an xterm window, Ctl-D erases the character under the cursor. When there are no characters present, Ctl-D logs out of the session, as expected. In an xterm window, this has the effect of closing the window. Ctl-E Moves cursor to end of line of text (on the command-line). Ctl-F Moves cursor forward one character position (on the command-line). Ctl-G BEL. On some old-time teletype terminals, this would actually ring a bell. In an xterm it might beep. Ctl-H Rubout (destructive backspace). Erases characters the cursor backs over while backspacing. #!/bin/bash # Embedding Ctl-H in a string. a=&quot;^H^H&quot; # Two Ctl-H's -- backspaces # ctl-V ctl-H, using vi/vim echo &quot;abcdef&quot; # abcdef echo echo -n &quot;abcdef$a &quot; # abcd f # Space at end ^ ^ Backspaces twice. echo echo -n &quot;abcdef$a&quot; # abcdef # No space at end ^ Doesn't backspace (why?). # Results may not be quite as expected. echo; echo # Constantin Hagemeier suggests trying: # a=$'\010\010' # a=$'\b\b' # a=$'\x08\x08' # But, this does not change the results. ######################################## # Now, try this. rubout=&quot;^H^H^H^H^H&quot; # 5 x Ctl-H. echo -n &quot;12345678&quot; sleep 2 echo -n &quot;$rubout&quot; sleep 2 Ctl-I Horizontal tab. Ctl-J Newline (line feed). In a script, may also be expressed in octal notation -- '\012' or in hexadecimal -- '\x0a'. Ctl-K Vertical tab. When typing text on the console or in an xterm window, Ctl-K erases from the character under the cursor to end of line. Within a script, Ctl-K may behave differently, as in Lee Lee Maschmeyer's example, below. Ctl-L Formfeed (clear the terminal screen). In a terminal, this has the same effect as the clear command. When sent to a printer, a Ctl-L causes an advance to end of the paper sheet. Ctl-M Carriage return. #!/bin/bash # Thank you, Lee Maschmeyer, for this example. read -n 1 -s -p \ $'Control-M leaves cursor at beginning of this line. Press Enter. \x0d' # Of course, '0d' is the hex equivalent of Control-M. echo &gt;&amp;2 # The '-s' makes anything typed silent, #+ so it is necessary to go to new line explicitly. read -n 1 -s -p $'Control-J leaves cursor on next line. \x0a' # '0a' is the hex equivalent of Control-J, linefeed. echo &gt;&amp;2 ### read -n 1 -s -p $'And Control-K\x0bgoes straight down.' echo &gt;&amp;2 # Control-K is vertical tab. # A better example of the effect of a vertical tab is: var=$'\x0aThis is the bottom line\x0bThis is the top line\x0a' echo &quot;$var&quot; # This works the same way as the above example. However: echo &quot;$var&quot; | col # This causes the right end of the line to be higher than the left end. # It also explains why we started and ended with a line feed -- #+ to avoid a garbled screen. # As Lee Maschmeyer explains: # -------------------------- # In the [first vertical tab example] . . . the vertical tab #+ makes the printing go straight down without a carriage return. # This is true only on devices, such as the Linux console, #+ that can't go &quot;backward.&quot; # The real purpose of VT is to go straight UP, not down. # It can be used to print superscripts on a printer. # The col utility can be used to emulate the proper behavior of VT. exit 0 Ctl-N Erases a line of text recalled from history buffer [23] (on the command-line). Ctl-O Issues a newline (on the command-line). Ctl-P Recalls last command from history buffer (on the command-line). Ctl-Q Resume (XON). This resumes stdin in a terminal. Ctl-R Backwards search for text in history buffer (on the command-line). Ctl-S Suspend (XOFF). This freezes stdin in a terminal. (Use Ctl-Q to restore input.) Ctl-T Reverses the position of the character the cursor is on with the previous character (on the command-line). Ctl-U Erase a line of input, from the cursor backward to beginning of line. In some settings, Ctl-U erases the entire line of input, regardless of cursor position. Ctl-V When inputting text, Ctl-V permits inserting control characters. For example, the following two are equivalent: echo -e '\x0a' echo &lt;Ctl-V&gt;&lt;Ctl-J&gt; Ctl-V is primarily useful from within a text editor. Ctl-W When typing text on the console or in an xterm window, Ctl-W erases from the character under the cursor backwards to the first instance of whitespace. In some settings, Ctl-W erases backwards to first non-alphanumeric character. Ctl-X In certain word processing programs, Cuts highlighted text and copies to clipboard. Ctl-Y Pastes back text previously erased (with Ctl-U or Ctl-W). Ctl-Z Pauses a foreground job. Substitute operation in certain word processing applications. EOF (end-of-file) character in the MSDOS filesystem. Whitespace functions as a separator between commands and/or variables. Whitespace consists of either spaces, tabs, blank lines, or any combination thereof. [24] In some contexts, such as variable assignment, whitespace is not permitted, and results in a syntax error. Blank lines have no effect on the action of a script, and are therefore useful for visually separating functional sections. $IFS, the special variable separating fields of input to certain commands. It defaults to whitespace. Definition: A field is a discrete chunk of data expressed as a string of consecutive characters. Separating each field from adjacent fields is either whitespace or some other designated character (often determined by the $IFS). In some contexts, a field may be called a record. To preserve whitespace within a string or in a variable, use quoting. UNIX filters can target and operate on whitespace using the POSIX character class [:space:]. Chapter 4. Introduction to Variables and Parameters Variables are how programming and scripting languages represent data. A variable is nothing more than a label, a name assigned to a location or set of locations in computer memory holding an item of data. Variables appear in arithmetic operations and manipulation of quantities, and in string parsing. 4.1. Variable Substitution The name of a variable is a placeholder for its value, the data it holds. Referencing (retrieving) its value is called variable substitution. $ Let us carefully distinguish between the name of a variable and its value. If variable1 is the name of a variable, then $variable1 is a reference to its value, the data item it contains. [25] bash$ variable1=23 bash$ echo variable1 variable1 bash$ echo $variable1 23 The only times a variable appears &quot;naked&quot; -- without the $ prefix -- is when declared or assigned, when unset, when exported, in an arithmetic expression within double parentheses (( ... )), or in the special case of a variable representing a signal (see Example 32-5). Assignment may be with an = (as in var1=27), in a read statement, and at the head of a loop (for var2 in 1 2 3). Enclosing a referenced value in double quotes (&quot; ... &quot;) does not interfere with variable substitution. This is called partial quoting, sometimes referred to as &quot;weak quoting.&quot; Using single quotes (' ... ') causes the variable name to be used literally, and no substitution will take place. This is full quoting, sometimes referred to as 'strong quoting.' See Chapter 5 for a detailed discussion. Note that $variable is actually a simplified form of ${variable}. In contexts where the $variable syntax causes an error, the longer form may work (see Section 10.2, below). Example 4-1. Variable assignment and substitution #!/bin/bash # ex9.sh # Variables: assignment and substitution a=375 hello=$a # ^ ^ #------------------------------------------------------------------------- # No space permitted on either side of = sign when initializing variables. # What happens if there is a space? # &quot;VARIABLE =value&quot; # ^ #% Script tries to run &quot;VARIABLE&quot; command with one argument, &quot;=value&quot;. # &quot;VARIABLE= value&quot; # ^ #% Script tries to run &quot;value&quot; command with #+ the environmental variable &quot;VARIABLE&quot; set to &quot;&quot;. #------------------------------------------------------------------------- echo hello # hello # Not a variable reference, just the string &quot;hello&quot; ... echo $hello # 375 # ^ This *is* a variable reference. echo ${hello} # 375 # Likewise a variable reference, as above. # Quoting . . . echo &quot;$hello&quot; # 375 echo &quot;${hello}&quot; # 375 echo hello=&quot;A B C D&quot; echo $hello # A B C D echo &quot;$hello&quot; # A B C D # As we see, echo $hello and echo &quot;$hello&quot; give different results. # ======================================= # Quoting a variable preserves whitespace. # ======================================= echo echo '$hello' # $hello # ^ ^ # Variable referencing disabled (escaped) by single quotes, #+ which causes the &quot;$&quot; to be interpreted literally. # Notice the effect of different types of quoting. hello= # Setting it to a null value. echo &quot;\$hello (null value) = $hello&quot; # $hello (null value) = # Note that setting a variable to a null value is not the same as #+ unsetting it, although the end result is the same (see below). # -------------------------------------------------------------- # It is permissible to set multiple variables on the same line, #+ if separated by white space. # Caution, this may reduce legibility, and may not be portable. var1=21 var2=22 var3=$V3 echo echo &quot;var1=$var1 var2=$var2 var3=$var3&quot; # May cause problems with legacy versions of &quot;sh&quot; . . . # -------------------------------------------------------------- echo; echo numbers=&quot;one two three&quot; # ^ ^ other_numbers=&quot;1 2 3&quot; # ^ ^ # If there is whitespace embedded within a variable, #+ then quotes are necessary. # other_numbers=1 2 3 # Gives an error message. echo &quot;numbers = $numbers&quot; echo &quot;other_numbers = $other_numbers&quot; # other_numbers = 1 2 3 # Escaping the whitespace also works. mixed_bag=2\ ---\ Whatever # ^ ^ Space after escape (\). echo &quot;$mixed_bag&quot; # 2 --- Whatever echo; echo echo &quot;uninitialized_variable = $uninitialized_variable&quot; # Uninitialized variable has null value (no value at all!). uninitialized_variable= # Declaring, but not initializing it -- #+ same as setting it to a null value, as above. echo &quot;uninitialized_variable = $uninitialized_variable&quot; # It still has a null value. uninitialized_variable=23 # Set it. unset uninitialized_variable # Unset it. echo &quot;uninitialized_variable = $uninitialized_variable&quot; # uninitialized_variable = # It still has a null value. echo exit 0 Caution An uninitialized variable has a &quot;null&quot; value -- no assigned value at all (not zero!). if [ -z &quot;$unassigned&quot; ] then echo &quot;\$unassigned is NULL.&quot; fi # $unassigned is NULL. Using a variable before assigning a value to it may cause problems. It is nevertheless possible to perform arithmetic operations on an uninitialized variable. echo &quot;$uninitialized&quot; # (blank line) let &quot;uninitialized += 5&quot; # Add 5 to it. echo &quot;$uninitialized&quot; # 5 # Conclusion: # An uninitialized variable has no value, #+ however it evaluates as 0 in an arithmetic operation. See also Example 15-23. 4.2. Variable Assignment = the assignment operator (no space before and after) Caution Do not confuse this with = and -eq, which test, rather than assign! Note that = can be either an assignment or a test operator, depending on context. Example 4-2. Plain Variable Assignment #!/bin/bash # Naked variables echo # When is a variable &quot;naked&quot;, i.e., lacking the '$' in front? # When it is being assigned, rather than referenced. # Assignment a=879 echo &quot;The value of \&quot;a\&quot; is $a.&quot; # Assignment using 'let' let a=16+5 echo &quot;The value of \&quot;a\&quot; is now $a.&quot; echo # In a 'for' loop (really, a type of disguised assignment): echo -n &quot;Values of \&quot;a\&quot; in the loop are: &quot; for a in 7 8 9 11 do echo -n &quot;$a &quot; done echo echo # In a 'read' statement (also a type of assignment): echo -n &quot;Enter \&quot;a\&quot; &quot; read a echo &quot;The value of \&quot;a\&quot; is now $a.&quot; echo exit 0 Example 4-3. Variable Assignment, plain and fancy #!/bin/bash a=23 # Simple case echo $a b=$a echo $b # Now, getting a little bit fancier (command substitution). a=`echo Hello!` # Assigns result of 'echo' command to 'a' ... echo $a # Note that including an exclamation mark (!) within a #+ command substitution construct will not work from the command-line, #+ since this triggers the Bash &quot;history mechanism.&quot; # Inside a script, however, the history functions are disabled by default. a=`ls -l` # Assigns result of 'ls -l' command to 'a' echo $a # Unquoted, however, it removes tabs and newlines. echo echo &quot;$a&quot; # The quoted variable preserves whitespace. # (See the chapter on &quot;Quoting.&quot;) exit 0 Variable assignment using the $(...) mechanism (a newer method than backquotes). This is likewise a form of command substitution. # From /etc/rc.d/rc.local R=$(cat /etc/redhat-release) arch=$(uname -m) 4.3. Bash Variables Are Untyped Unlike many other programming languages, Bash does not segregate its variables by &quot;type.&quot; Essentially, Bash variables are character strings, but, depending on context, Bash permits arithmetic operations and comparisons on variables. The determining factor is whether the value of a variable contains only digits. Example 4-4. Integer or string? #!/bin/bash # int-or-string.sh a=2334 # Integer. let &quot;a += 1&quot; echo &quot;a = $a &quot; # a = 2335 echo # Integer, still. b=${a/23/BB} # Substitute &quot;BB&quot; for &quot;23&quot;. # This transforms $b into a string. echo &quot;b = $b&quot; # b = BB35 declare -i b # Declaring it an integer doesn't help. echo &quot;b = $b&quot; # b = BB35 let &quot;b += 1&quot; # BB35 + 1 echo &quot;b = $b&quot; # b = 1 echo # Bash sets the &quot;integer value&quot; of a string to 0. c=BB34 echo &quot;c = $c&quot; # c = BB34 d=${c/BB/23} # Substitute &quot;23&quot; for &quot;BB&quot;. # This makes $d an integer. echo &quot;d = $d&quot; # d = 2334 let &quot;d += 1&quot; # 2334 + 1 echo &quot;d = $d&quot; # d = 2335 echo # What about null variables? e='' # ... Or e=&quot;&quot; ... Or e= echo &quot;e = $e&quot; # e = let &quot;e += 1&quot; # Arithmetic operations allowed on a null variable? echo &quot;e = $e&quot; # e = 1 echo # Null variable transformed into an integer. # What about undeclared variables? echo &quot;f = $f&quot; # f = let &quot;f += 1&quot; # Arithmetic operations allowed? echo &quot;f = $f&quot; # f = 1 echo # Undeclared variable transformed into an integer. # # However ... let &quot;f /= $undecl_var&quot; # Divide by zero? # let: f /= : syntax error: operand expected (error token is &quot; &quot;) # Syntax error! Variable $undecl_var is not set to zero here! # # But still ... let &quot;f /= 0&quot; # let: f /= 0: division by 0 (error token is &quot;0&quot;) # Expected behavior. # Bash (usually) sets the &quot;integer value&quot; of null to zero #+ when performing an arithmetic operation. # But, don't try this at home, folks! # It's undocumented and probably non-portable behavior. # Conclusion: Variables in Bash are untyped, #+ with all attendant consequences. exit $? Untyped variables are both a blessing and a curse. They permit more flexibility in scripting and make it easier to grind out lines of code (and give you enough rope to hang yourself!). However, they likewise permit subtle errors to creep in and encourage sloppy programming habits. To lighten the burden of keeping track of variable types in a script, Bash does permit declaring variables. 4.4. Special Variable Types Local variables Variables visible only within a code block or function (see also local variables in functions) Environmental variables Variables that affect the behavior of the shell and user interface Note In a more general context, each process has an &quot;environment&quot;, that is, a group of variables that the process may reference. In this sense, the shell behaves like any other process. Every time a shell starts, it creates shell variables that correspond to its own environmental variables. Updating or adding new environmental variables causes the shell to update its environment, and all the shell's child processes (the commands it executes) inherit this environment. Caution The space allotted to the environment is limited. Creating too many environmental variables or ones that use up excessive space may cause problems. bash$ eval &quot;`seq 10000 | sed -e 's/.*/export var&amp;=ZZZZZZZZZZZZZZ/'`&quot; bash$ du bash: /usr/bin/du: Argument list too long Note: this &quot;error&quot; has been fixed, as of kernel version 2.6.23. (Thank you, Stéphane Chazelas for the clarification, and for providing the above example.) If a script sets environmental variables, they need to be &quot;exported,&quot; that is, reported to the environment local to the script. This is the function of the export command. Note A script can export variables only to child processes, that is, only to commands or processes which that particular script initiates. A script invoked from the command-line cannot export variables back to the command-line environment. Child processes cannot export variables back to the parent processes that spawned them. Definition: A child process is a subprocess launched by another process, its parent. Positional parameters Arguments passed to the script from the command line [26] : $0, $1, $2, $3 . . . $0 is the name of the script itself, $1 is the first argument, $2 the second, $3 the third, and so forth. [27] After $9, the arguments must be enclosed in brackets, for example, ${10}, ${11}, ${12}. The special variables $* and $@ denote all the positional parameters. Example 4-5. Positional Parameters #!/bin/bash # Call this script with at least 10 parameters, for example # ./scriptname 1 2 3 4 5 6 7 8 9 10 MINPARAMS=10 echo echo &quot;The name of this script is \&quot;$0\&quot;.&quot; # Adds ./ for current directory echo &quot;The name of this script is \&quot;`basename $0`\&quot;.&quot; # Strips out path name info (see 'basename') echo if [ -n &quot;$1&quot; ] # Tested variable is quoted. then echo &quot;Parameter #1 is $1&quot; # Need quotes to escape # fi if [ -n &quot;$2&quot; ] then echo &quot;Parameter #2 is $2&quot; fi if [ -n &quot;$3&quot; ] then echo &quot;Parameter #3 is $3&quot; fi # ... if [ -n &quot;${10}&quot; ] # Parameters &gt; $9 must be enclosed in {brackets}. then echo &quot;Parameter #10 is ${10}&quot; fi echo &quot;-----------------------------------&quot; echo &quot;All the command-line parameters are: &quot;$*&quot;&quot; if [ $# -lt &quot;$MINPARAMS&quot; ] then echo echo &quot;This script needs at least $MINPARAMS command-line arguments!&quot; fi echo exit 0 Bracket notation for positional parameters leads to a fairly simple way of referencing the last argument passed to a script on the command-line. This also requires indirect referencing. args=$# # Number of args passed. lastarg=${!args} # Note: This is an *indirect reference* to $args ... # Or: lastarg=${!#} (Thanks, Chris Monson.) # This is an *indirect reference* to the $# variable. # Note that lastarg=${!$#} doesn't work. Some scripts can perform different operations, depending on which name they are invoked with. For this to work, the script needs to check $0, the name it was invoked by. [28] There must also exist symbolic links to all the alternate names of the script. See Example 16-2. Tip If a script expects a command-line parameter but is invoked without one, this may cause a null variable assignment, generally an undesirable result. One way to prevent this is to append an extra character to both sides of the assignment statement using the expected positional parameter. variable1_=$1_ # Rather than variable1=$1 # This will prevent an error, even if positional parameter is absent. critical_argument01=$variable1_ # The extra character can be stripped off later, like so. variable1=${variable1_/_/} # Side effects only if $variable1_ begins with an underscore. # This uses one of the parameter substitution templates discussed later. # (Leaving out the replacement pattern results in a deletion.) # A more straightforward way of dealing with this is #+ to simply test whether expected positional parameters have been passed. if [ -z $1 ] then exit $E_MISSING_POS_PARAM fi # However, as Fabian Kreutz points out, #+ the above method may have unexpected side-effects. # A better method is parameter substitution: # ${1:-$DefaultVal} # See the &quot;Parameter Substition&quot; section #+ in the &quot;Variables Revisited&quot; chapter. --- Example 4-6. wh, whois domain name lookup #!/bin/bash # ex18.sh # Does a 'whois domain-name' lookup on any of 3 alternate servers: # ripe.net, cw.net, radb.net # Place this script -- renamed 'wh' -- in /usr/local/bin # Requires symbolic links: # ln -s /usr/local/bin/wh /usr/local/bin/wh-ripe # ln -s /usr/local/bin/wh /usr/local/bin/wh-apnic # ln -s /usr/local/bin/wh /usr/local/bin/wh-tucows E_NOARGS=75 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` [domain-name]&quot; exit $E_NOARGS fi # Check script name and call proper server. case `basename $0` in # Or: case ${0##*/} in &quot;wh&quot; ) whois $1@whois.tucows.com;; &quot;wh-ripe&quot; ) whois $1@whois.ripe.net;; &quot;wh-apnic&quot; ) whois $1@whois.apnic.net;; &quot;wh-cw&quot; ) whois $1@whois.cw.net;; * ) echo &quot;Usage: `basename $0` [domain-name]&quot;;; esac exit $? --- The shift command reassigns the positional parameters, in effect shifting them to the left one notch. $1 &lt;--- $2, $2 &lt;--- $3, $3 &lt;--- $4, etc. The old $1 disappears, but $0 (the script name) does not change. If you use a large number of positional parameters to a script, shift lets you access those past 10, although {bracket} notation also permits this. Example 4-7. Using shift #!/bin/bash # shft.sh: Using 'shift' to step through all the positional parameters. # Name this script something like shft.sh, #+ and invoke it with some parameters. #+ For example: # sh shft.sh a b c def 83 barndoor until [ -z &quot;$1&quot; ] # Until all parameters used up . . . do echo -n &quot;$1 &quot; shift done echo # Extra linefeed. # But, what happens to the &quot;used-up&quot; parameters? echo &quot;$2&quot; # Nothing echoes! # When $2 shifts into $1 (and there is no $3 to shift into $2) #+ then $2 remains empty. # So, it is not a parameter *copy*, but a *move*. exit # See also the echo-params.sh script for a &quot;shiftless&quot; #+ alternative method of stepping through the positional params. The shift command can take a numerical parameter indicating how many positions to shift. #!/bin/bash # shift-past.sh shift 3 # Shift 3 positions. # n=3; shift $n # Has the same effect. echo &quot;$1&quot; exit 0 # ======================== # $ sh shift-past.sh 1 2 3 4 5 4 # However, as Eleni Fragkiadaki, points out, #+ attempting a 'shift' past the number of #+ positional parameters ($#) returns an exit status of 1, #+ and the positional parameters themselves do not change. # This means possibly getting stuck in an endless loop. . . . # For example: # until [ -z &quot;$1&quot; ] # do # echo -n &quot;$1 &quot; # shift 20 # If less than 20 pos params, # done #+ then loop never ends! # # When in doubt, add a sanity check. . . . # shift 20 || break # ^^^^^^^^ Note The shift command works in a similar fashion on parameters passed to a function. See Example 36-18. Chapter 5. Quoting Quoting means just that, bracketing a string in quotes. This has the effect of protecting special characters in the string from reinterpretation or expansion by the shell or shell script. (A character is &quot;special&quot; if it has an interpretation other than its literal meaning. For example, the asterisk * represents a wild card character in globbing and Regular Expressions). bash$ ls -l [Vv]* -rw-rw-r-- 1 bozo bozo 324 Apr 2 15:05 VIEWDATA.BAT -rw-rw-r-- 1 bozo bozo 507 May 4 14:25 vartrace.sh -rw-rw-r-- 1 bozo bozo 539 Apr 14 17:11 viewdata.sh bash$ ls -l '[Vv]*' ls: [Vv]*: No such file or directory In everyday speech or writing, when we &quot;quote&quot; a phrase, we set it apart and give it special meaning. In a Bash script, when we quote a string, we set it apart and protect its literal meaning. Certain programs and utilities reinterpret or expand special characters in a quoted string. An important use of quoting is protecting a command-line parameter from the shell, but still letting the calling program expand it. bash$ grep '[Ff]irst' *.txt file1.txt:This is the first line of file1.txt. file2.txt:This is the First line of file2.txt. Note that the unquoted grep [Ff]irst *.txt works under the Bash shell. [29] Quoting can also suppress echo's &quot;appetite&quot; for newlines. bash$ echo $(ls -l) total 8 -rw-rw-r-- 1 bo bo 13 Aug 21 12:57 t.sh -rw-rw-r-- 1 bo bo 78 Aug 21 12:57 u.sh bash$ echo &quot;$(ls -l)&quot; total 8 -rw-rw-r-- 1 bo bo 13 Aug 21 12:57 t.sh -rw-rw-r-- 1 bo bo 78 Aug 21 12:57 u.sh 5.1. Quoting Variables When referencing a variable, it is generally advisable to enclose its name in double quotes. This prevents reinterpretation of all special characters within the quoted string -- except $, ` (backquote), and \ (escape). [30] Keeping $ as a special character within double quotes permits referencing a quoted variable (&quot;$variable&quot;), that is, replacing the variable with its value (see Example 4-1, above). Use double quotes to prevent word splitting. [31] An argument enclosed in double quotes presents itself as a single word, even if it contains whitespace separators. List=&quot;one two three&quot; for a in $List # Splits the variable in parts at whitespace. do echo &quot;$a&quot; done # one # two # three echo &quot;---&quot; for a in &quot;$List&quot; # Preserves whitespace in a single variable. do # ^ ^ echo &quot;$a&quot; done # one two three A more elaborate example: variable1=&quot;a variable containing five words&quot; COMMAND This is $variable1 # Executes COMMAND with 7 arguments: # &quot;This&quot; &quot;is&quot; &quot;a&quot; &quot;variable&quot; &quot;containing&quot; &quot;five&quot; &quot;words&quot; COMMAND &quot;This is $variable1&quot; # Executes COMMAND with 1 argument: # &quot;This is a variable containing five words&quot; variable2=&quot;&quot; # Empty. COMMAND $variable2 $variable2 $variable2 # Executes COMMAND with no arguments. COMMAND &quot;$variable2&quot; &quot;$variable2&quot; &quot;$variable2&quot; # Executes COMMAND with 3 empty arguments. COMMAND &quot;$variable2 $variable2 $variable2&quot; # Executes COMMAND with 1 argument (2 spaces). # Thanks, Stéphane Chazelas. Tip Enclosing the arguments to an echo statement in double quotes is necessary only when word splitting or preservation of whitespace is an issue. Example 5-1. Echoing Weird Variables #!/bin/bash # weirdvars.sh: Echoing weird variables. echo var=&quot;'(]\\{}\$\&quot;&quot; echo $var # '(]\{}$&quot; echo &quot;$var&quot; # '(]\{}$&quot; Doesn't make a difference. echo IFS='\' echo $var # '(] {}$&quot; \ converted to space. Why? echo &quot;$var&quot; # '(]\{}$&quot; # Examples above supplied by Stephane Chazelas. echo var2=&quot;\\\\\&quot;&quot; echo $var2 # &quot; echo &quot;$var2&quot; # \\&quot; echo # But ... var2=&quot;\\\\&quot;&quot; is illegal. Why? var3='\\\\' echo &quot;$var3&quot; # \\\\ # Strong quoting works, though. # ************************************************************ # # As the first example above shows, nesting quotes is permitted. echo &quot;$(echo '&quot;')&quot; # &quot; # ^ ^ # At times this comes in useful. var1=&quot;Two bits&quot; echo &quot;\$var1 = &quot;$var1&quot;&quot; # $var1 = Two bits # ^ ^ # Or, as Chris Hiestand points out ... if [[ &quot;$(du &quot;$My_File1&quot;)&quot; -gt &quot;$(du &quot;$My_File2&quot;)&quot; ]] # ^ ^ ^ ^ ^ ^ ^ ^ then ... fi # ************************************************************ # Single quotes (' ') operate similarly to double quotes, but do not permit referencing variables, since the special meaning of $ is turned off. Within single quotes, every special character except ' gets interpreted literally. Consider single quotes (&quot;full quoting&quot;) to be a stricter method of quoting than double quotes (&quot;partial quoting&quot;). Note Since even the escape character (\) gets a literal interpretation within single quotes, trying to enclose a single quote within single quotes will not yield the expected result. echo &quot;Why can't I write 's between single quotes&quot; echo # The roundabout method. echo 'Why can'\''t I write '&quot;'&quot;'s between single quotes' # |-------| |----------| |-----------------------| # Three single-quoted strings, with escaped and quoted single quotes between. # This example courtesy of Stéphane Chazelas. 5.2. Escaping Escaping is a method of quoting single characters. The escape (\) preceding a character tells the shell to interpret that character literally. Caution With certain commands and utilities, such as echo and sed, escaping a character may have the opposite effect - it can toggle on a special meaning for that character. Special meanings of certain escaped characters used with echo and sed \n means newline \r means return \t means tab \v means vertical tab \b means backspace \a means alert (beep or flash) \0xx translates to the octal ASCII equivalent of 0nn, where nn is a string of digits Important The $' ... ' quoted string-expansion construct is a mechanism that uses escaped octal or hex values to assign ASCII characters to variables, e.g., quote=$'\042'. Example 5-2. Escaped Characters #!/bin/bash # escaped.sh: escaped characters ############################################################# ### First, let's show some basic escaped-character usage. ### ############################################################# # Escaping a newline. # ------------------ echo &quot;&quot; echo &quot;This will print as two lines.&quot; # This will print # as two lines. echo &quot;This will print \ as one line.&quot; # This will print as one line. echo; echo echo &quot;=============&quot; echo &quot;\v\v\v\v&quot; # Prints \v\v\v\v literally. # Use the -e option with 'echo' to print escaped characters. echo &quot;=============&quot; echo &quot;VERTICAL TABS&quot; echo -e &quot;\v\v\v\v&quot; # Prints 4 vertical tabs. echo &quot;==============&quot; echo &quot;QUOTATION MARK&quot; echo -e &quot;\042&quot; # Prints &quot; (quote, octal ASCII character 42). echo &quot;==============&quot; # The $'\X' construct makes the -e option unnecessary. echo; echo &quot;NEWLINE and (maybe) BEEP&quot; echo $'\n' # Newline. echo $'\a' # Alert (beep). # May only flash, not beep, depending on terminal. # We have seen $'\nnn&quot; string expansion, and now . . . # =================================================================== # # Version 2 of Bash introduced the $'\nnn' string expansion construct. # =================================================================== # echo &quot;Introducing the \$\' ... \' string-expansion construct . . . &quot; echo &quot;. . . featuring more quotation marks.&quot; echo $'\t \042 \t' # Quote (&quot;) framed by tabs. # Note that '\nnn' is an octal value. # It also works with hexadecimal values, in an $'\xhhh' construct. echo $'\t \x22 \t' # Quote (&quot;) framed by tabs. # Thank you, Greg Keraunen, for pointing this out. # Earlier Bash versions allowed '\x022'. echo # Assigning ASCII characters to a variable. # ---------------------------------------- quote=$'\042' # &quot; assigned to a variable. echo &quot;$quote Quoted string $quote and this lies outside the quotes.&quot; echo # Concatenating ASCII chars in a variable. triple_underline=$'\137\137\137' # 137 is octal ASCII code for '_'. echo &quot;$triple_underline UNDERLINE $triple_underline&quot; echo ABC=$'\101\102\103\010' # 101, 102, 103 are octal A, B, C. echo $ABC echo escape=$'\033' # 033 is octal for escape. echo &quot;\&quot;escape\&quot; echoes as $escape&quot; # no visible output. echo exit 0 A more elaborate example: Example 5-3. Detecting key-presses #!/bin/bash # Author: Sigurd Solaas, 20 Apr 2011 # Used in ABS Guide with permission. # Requires version 4.2+ of Bash. key=&quot;no value yet&quot; while true; do clear echo &quot;Bash Extra Keys Demo. Keys to try:&quot; echo echo &quot;* Insert, Delete, Home, End, Page_Up and Page_Down&quot; echo &quot;* The four arrow keys&quot; echo &quot;* Tab, enter, escape, and space key&quot; echo &quot;* The letter and number keys, etc.&quot; echo echo &quot; d = show date/time&quot; echo &quot; q = quit&quot; echo &quot;================================&quot; echo # Convert the separate home-key to home-key_num_7: if [ &quot;$key&quot; = $'\x1b\x4f\x48' ]; then key=$'\x1b\x5b\x31\x7e' # Quoted string-expansion construct. fi # Convert the separate end-key to end-key_num_1. if [ &quot;$key&quot; = $'\x1b\x4f\x46' ]; then key=$'\x1b\x5b\x34\x7e' fi case &quot;$key&quot; in $'\x1b\x5b\x32\x7e') # Insert echo Insert Key ;; $'\x1b\x5b\x33\x7e') # Delete echo Delete Key ;; $'\x1b\x5b\x31\x7e') # Home_key_num_7 echo Home Key ;; $'\x1b\x5b\x34\x7e') # End_key_num_1 echo End Key ;; $'\x1b\x5b\x35\x7e') # Page_Up echo Page_Up ;; $'\x1b\x5b\x36\x7e') # Page_Down echo Page_Down ;; $'\x1b\x5b\x41') # Up_arrow echo Up arrow ;; $'\x1b\x5b\x42') # Down_arrow echo Down arrow ;; $'\x1b\x5b\x43') # Right_arrow echo Right arrow ;; $'\x1b\x5b\x44') # Left_arrow echo Left arrow ;; $'\x09') # Tab echo Tab Key ;; $'\x0a') # Enter echo Enter Key ;; $'\x1b') # Escape echo Escape Key ;; $'\x20') # Space echo Space Key ;; d) date ;; q) echo Time to quit... echo exit 0 ;; *) echo You pressed: \'&quot;$key&quot;\' ;; esac echo echo &quot;================================&quot; unset K1 K2 K3 read -s -N1 -p &quot;Press a key: &quot; K1=&quot;$REPLY&quot; read -s -N2 -t 0.001 K2=&quot;$REPLY&quot; read -s -N1 -t 0.001 K3=&quot;$REPLY&quot; key=&quot;$K1$K2$K3&quot; done exit $? See also Example 37-1. \&quot; gives the quote its literal meaning echo &quot;Hello&quot; # Hello echo &quot;\&quot;Hello\&quot; ... he said.&quot; # &quot;Hello&quot; ... he said. \$ gives the dollar sign its literal meaning (variable name following \$ will not be referenced) echo &quot;\$variable01&quot; # $variable01 echo &quot;The book cost \$7.98.&quot; # The book cost $7.98. \\ gives the backslash its literal meaning echo &quot;\\&quot; # Results in \ # Whereas . . . echo &quot;\&quot; # Invokes secondary prompt from the command-line. # In a script, gives an error message. # However . . . echo '\' # Results in \ Note The behavior of \ depends on whether it is escaped, strong-quoted, weak-quoted, or appearing within command substitution or a here document. # Simple escaping and quoting echo \z # z echo \\z # \z echo '\z' # \z echo '\\z' # \\z echo &quot;\z&quot; # \z echo &quot;\\z&quot; # \z # Command substitution echo `echo \z` # z echo `echo \\z` # z echo `echo \\\z` # \z echo `echo \\\\z` # \z echo `echo \\\\\\z` # \z echo `echo \\\\\\\z` # \\z echo `echo &quot;\z&quot;` # \z echo `echo &quot;\\z&quot;` # \z # Here document cat &lt;&lt;EOF \z EOF # \z cat &lt;&lt;EOF \\z EOF # \z # These examples supplied by Stéphane Chazelas. Elements of a string assigned to a variable may be escaped, but the escape character alone may not be assigned to a variable. variable=\ echo &quot;$variable&quot; # Will not work - gives an error message: # test.sh: : command not found # A &quot;naked&quot; escape cannot safely be assigned to a variable. # # What actually happens here is that the &quot;\&quot; escapes the newline and #+ the effect is variable=echo &quot;$variable&quot; #+ invalid variable assignment variable=\ 23skidoo echo &quot;$variable&quot; # 23skidoo # This works, since the second line #+ is a valid variable assignment. variable=\ # \^ escape followed by space echo &quot;$variable&quot; # space variable=\\ echo &quot;$variable&quot; # \ variable=\\\ echo &quot;$variable&quot; # Will not work - gives an error message: # test.sh: \: command not found # # First escape escapes second one, but the third one is left &quot;naked&quot;, #+ with same result as first instance, above. variable=\\\\ echo &quot;$variable&quot; # \\ # Second and fourth escapes escaped. # This is o.k. Escaping a space can prevent word splitting in a command's argument list. file_list=&quot;/bin/cat /bin/gzip /bin/more /usr/bin/less /usr/bin/emacs-20.7&quot; # List of files as argument(s) to a command. # Add two files to the list, and list all. ls -l /usr/X11R6/bin/xsetroot /sbin/dump $file_list echo &quot;-------------------------------------------------------------------------&quot; # What happens if we escape a couple of spaces? ls -l /usr/X11R6/bin/xsetroot\ /sbin/dump\ $file_list # Error: the first three files concatenated into a single argument to 'ls -l' # because the two escaped spaces prevent argument (word) splitting. The escape also provides a means of writing a multi-line command. Normally, each separate line constitutes a different command, but an escape at the end of a line escapes the newline character, and the command sequence continues on to the next line. (cd /source/directory &amp;&amp; tar cf - . ) | \ (cd /dest/directory &amp;&amp; tar xpvf -) # Repeating Alan Cox's directory tree copy command, # but split into two lines for increased legibility. # As an alternative: tar cf - -C /source/directory . | tar xpvf - -C /dest/directory # See note below. # (Thanks, Stéphane Chazelas.) Note If a script line ends with a |, a pipe character, then a \, an escape, is not strictly necessary. It is, however, good programming practice to always escape the end of a line of code that continues to the following line. echo &quot;foo bar&quot; #foo #bar echo echo 'foo bar' # No difference yet. #foo #bar echo echo foo\ bar # Newline escaped. #foobar echo echo &quot;foo\ bar&quot; # Same here, as \ still interpreted as escape within weak quotes. #foobar echo echo 'foo\ bar' # Escape character \ taken literally because of strong quoting. #foo\ #bar # Examples suggested by Stéphane Chazelas. Chapter 6. Exit and Exit Status ... there are dark corners in the Bourne shell, and people use all of them. --Chet Ramey The exit command terminates a script, just as in a C program. It can also return a value, which is available to the script's parent process. Every command returns an exit status (sometimes referred to as a return status or exit code). A successful command returns a 0, while an unsuccessful one returns a non-zero value that usually can be interpreted as an error code. Well-behaved UNIX commands, programs, and utilities return a 0 exit code upon successful completion, though there are some exceptions. Likewise, functions within a script and the script itself return an exit status. The last command executed in the function or script determines the exit status. Within a script, an exit nnn command may be used to deliver an nnn exit status to the shell (nnn must be an integer in the 0 - 255 range). Note When a script ends with an exit that has no parameter, the exit status of the script is the exit status of the last command executed in the script (previous to the exit). #!/bin/bash COMMAND_1 . . . COMMAND_LAST # Will exit with status of last command. exit The equivalent of a bare exit is exit $? or even just omitting the exit. #!/bin/bash COMMAND_1 . . . COMMAND_LAST # Will exit with status of last command. exit $? #!/bin/bash COMMAND1 . . . COMMAND_LAST # Will exit with status of last command. $? reads the exit status of the last command executed. After a function returns, $? gives the exit status of the last command executed in the function. This is Bash's way of giving functions a &quot;return value.&quot; [32] Following the execution of a pipe, a $? gives the exit status of the last command executed. After a script terminates, a $? from the command-line gives the exit status of the script, that is, the last command executed in the script, which is, by convention, 0 on success or an integer in the range 1 - 255 on error. Example 6-1. exit / exit status #!/bin/bash echo hello echo $? # Exit status 0 returned because command executed successfully. lskdf # Unrecognized command. echo $? # Non-zero exit status returned -- command failed to execute. echo exit 113 # Will return 113 to shell. # To verify this, type &quot;echo $?&quot; after script terminates. # By convention, an 'exit 0' indicates success, #+ while a non-zero exit value means an error or anomalous condition. # See the &quot;Exit Codes With Special Meanings&quot; appendix. $? is especially useful for testing the result of a command in a script (see Example 16-35 and Example 16-20). Note The !, the logical not qualifier, reverses the outcome of a test or command, and this affects its exit status. Example 6-2. Negating a condition using ! true # The &quot;true&quot; builtin. echo &quot;exit status of \&quot;true\&quot; = $?&quot; # 0 ! true echo &quot;exit status of \&quot;! true\&quot; = $?&quot; # 1 # Note that the &quot;!&quot; needs a space between it and the command. # !true leads to a &quot;command not found&quot; error # # The '!' operator prefixing a command invokes the Bash history mechanism. true !true # No error this time, but no negation either. # It just repeats the previous command (true). # =========================================================== # # Preceding a _pipe_ with ! inverts the exit status returned. ls | bogus_command # bash: bogus_command: command not found echo $? # 127 ! ls | bogus_command # bash: bogus_command: command not found echo $? # 0 # Note that the ! does not change the execution of the pipe. # Only the exit status changes. # =========================================================== # # Thanks, Stéphane Chazelas and Kristopher Newsome. Caution Certain exit status codes have reserved meanings and should not be user-specified in a script. Chapter 7. Tests Every reasonably complete programming language can test for a condition, then act according to the result of the test. Bash has the test command, various bracket and parenthesis operators, and the if/then construct. 7.1. Test Constructs An if/then construct tests whether the exit status of a list of commands is 0 (since 0 means &quot;success&quot; by UNIX convention), and if so, executes one or more commands. There exists a dedicated command called [ (left bracket special character). It is a synonym for test, and a builtin for efficiency reasons. This command considers its arguments as comparison expressions or file tests and returns an exit status corresponding to the result of the comparison (0 for true, 1 for false). With version 2.02, Bash introduced the [[ ... ]] extended test command, which performs comparisons in a manner more familiar to programmers from other languages. Note that [[ is a keyword, not a command. Bash sees [[ $a -lt $b ]] as a single element, which returns an exit status. The (( ... )) and let ... constructs return an exit status, according to whether the arithmetic expressions they evaluate expand to a non-zero value. These arithmetic-expansion constructs may therefore be used to perform arithmetic comparisons. (( 0 &amp;&amp; 1 )) # Logical AND echo $? # 1 *** # And so ... let &quot;num = (( 0 &amp;&amp; 1 ))&quot; echo $num # 0 # But ... let &quot;num = (( 0 &amp;&amp; 1 ))&quot; echo $? # 1 *** (( 200 || 11 )) # Logical OR echo $? # 0 *** # ... let &quot;num = (( 200 || 11 ))&quot; echo $num # 1 let &quot;num = (( 200 || 11 ))&quot; echo $? # 0 *** (( 200 | 11 )) # Bitwise OR echo $? # 0 *** # ... let &quot;num = (( 200 | 11 ))&quot; echo $num # 203 let &quot;num = (( 200 | 11 ))&quot; echo $? # 0 *** # The &quot;let&quot; construct returns the same exit status #+ as the double-parentheses arithmetic expansion. Caution Again, note that the exit status of an arithmetic expression is not an error value. var=-2 &amp;&amp; (( var+=2 )) echo $? # 1 var=-2 &amp;&amp; (( var+=2 )) &amp;&amp; echo $var # Will not echo $var! An if can test any command, not just conditions enclosed within brackets. if cmp a b &amp;&gt; /dev/null # Suppress output. then echo &quot;Files a and b are identical.&quot; else echo &quot;Files a and b differ.&quot; fi # The very useful &quot;if-grep&quot; construct: # ----------------------------------- if grep -q Bash file then echo &quot;File contains at least one occurrence of Bash.&quot; fi word=Linux letter_sequence=inu if echo &quot;$word&quot; | grep -q &quot;$letter_sequence&quot; # The &quot;-q&quot; option to grep suppresses output. then echo &quot;$letter_sequence found in $word&quot; else echo &quot;$letter_sequence not found in $word&quot; fi if COMMAND_WHOSE_EXIT_STATUS_IS_0_UNLESS_ERROR_OCCURRED then echo &quot;Command succeeded.&quot; else echo &quot;Command failed.&quot; fi These last two examples courtesy of Stéphane Chazelas. Example 7-1. What is truth? #!/bin/bash # Tip: # If you're unsure how a certain condition might evaluate, #+ test it in an if-test. echo echo &quot;Testing \&quot;0\&quot;&quot; if [ 0 ] # zero then echo &quot;0 is true.&quot; else # Or else ... echo &quot;0 is false.&quot; fi # 0 is true. echo echo &quot;Testing \&quot;1\&quot;&quot; if [ 1 ] # one then echo &quot;1 is true.&quot; else echo &quot;1 is false.&quot; fi # 1 is true. echo echo &quot;Testing \&quot;-1\&quot;&quot; if [ -1 ] # minus one then echo &quot;-1 is true.&quot; else echo &quot;-1 is false.&quot; fi # -1 is true. echo echo &quot;Testing \&quot;NULL\&quot;&quot; if [ ] # NULL (empty condition) then echo &quot;NULL is true.&quot; else echo &quot;NULL is false.&quot; fi # NULL is false. echo echo &quot;Testing \&quot;xyz\&quot;&quot; if [ xyz ] # string then echo &quot;Random string is true.&quot; else echo &quot;Random string is false.&quot; fi # Random string is true. echo echo &quot;Testing \&quot;\$xyz\&quot;&quot; if [ $xyz ] # Tests if $xyz is null, but... # it's only an uninitialized variable. then echo &quot;Uninitialized variable is true.&quot; else echo &quot;Uninitialized variable is false.&quot; fi # Uninitialized variable is false. echo echo &quot;Testing \&quot;-n \$xyz\&quot;&quot; if [ -n &quot;$xyz&quot; ] # More pedantically correct. then echo &quot;Uninitialized variable is true.&quot; else echo &quot;Uninitialized variable is false.&quot; fi # Uninitialized variable is false. echo xyz= # Initialized, but set to null value. echo &quot;Testing \&quot;-n \$xyz\&quot;&quot; if [ -n &quot;$xyz&quot; ] then echo &quot;Null variable is true.&quot; else echo &quot;Null variable is false.&quot; fi # Null variable is false. echo # When is &quot;false&quot; true? echo &quot;Testing \&quot;false\&quot;&quot; if [ &quot;false&quot; ] # It seems that &quot;false&quot; is just a string ... then echo &quot;\&quot;false\&quot; is true.&quot; #+ and it tests true. else echo &quot;\&quot;false\&quot; is false.&quot; fi # &quot;false&quot; is true. echo echo &quot;Testing \&quot;\$false\&quot;&quot; # Again, uninitialized variable. if [ &quot;$false&quot; ] then echo &quot;\&quot;\$false\&quot; is true.&quot; else echo &quot;\&quot;\$false\&quot; is false.&quot; fi # &quot;$false&quot; is false. # Now, we get the expected result. # What would happen if we tested the uninitialized variable &quot;$true&quot;? echo exit 0 Exercise. Explain the behavior of Example 7-1, above. if [ condition-true ] then command 1 command 2 ... else # Or else ... # Adds default code block executing if original condition tests false. command 3 command 4 ... fi Note When if and then are on same line in a condition test, a semicolon must terminate the if statement. Both if and then are keywords. Keywords (or commands) begin statements, and before a new statement on the same line begins, the old one must terminate. if [ -x &quot;$filename&quot; ]; then Else if and elif elif elif is a contraction for else if. The effect is to nest an inner if/then construct within an outer one. if [ condition1 ] then command1 command2 command3 elif [ condition2 ] # Same as else if then command4 command5 else default-command fi The if test condition-true construct is the exact equivalent of if [ condition-true ]. As it happens, the left bracket, [ , is a token [33] which invokes the test command. The closing right bracket, ] , in an if/test should not therefore be strictly necessary, however newer versions of Bash require it. Note The test command is a Bash builtin which tests file types and compares strings. Therefore, in a Bash script, test does not call the external /usr/bin/test binary, which is part of the sh-utils package. Likewise, [ does not call /usr/bin/[, which is linked to /usr/bin/test. bash$ type test test is a shell builtin bash$ type '[' [ is a shell builtin bash$ type '[[' [[ is a shell keyword bash$ type ']]' ]] is a shell keyword bash$ type ']' bash: type: ]: not found If, for some reason, you wish to use /usr/bin/test in a Bash script, then specify it by full pathname. Example 7-2. Equivalence of test, /usr/bin/test, [ ], and /usr/bin/[ #!/bin/bash echo if test -z &quot;$1&quot; then echo &quot;No command-line arguments.&quot; else echo &quot;First command-line argument is $1.&quot; fi echo if /usr/bin/test -z &quot;$1&quot; # Equivalent to &quot;test&quot; builtin. # ^^^^^^^^^^^^^ # Specifying full pathname. then echo &quot;No command-line arguments.&quot; else echo &quot;First command-line argument is $1.&quot; fi echo if [ -z &quot;$1&quot; ] # Functionally identical to above code blocks. # if [ -z &quot;$1&quot; should work, but... #+ Bash responds to a missing close-bracket with an error message. then echo &quot;No command-line arguments.&quot; else echo &quot;First command-line argument is $1.&quot; fi echo if /usr/bin/[ -z &quot;$1&quot; ] # Again, functionally identical to above. # if /usr/bin/[ -z &quot;$1&quot; # Works, but gives an error message. # # Note: # This has been fixed in Bash, version 3.x. then echo &quot;No command-line arguments.&quot; else echo &quot;First command-line argument is $1.&quot; fi echo exit 0 The [[ ]] construct is the more versatile Bash version of [ ]. This is the extended test command, adopted from ksh88. * * * No filename expansion or word splitting takes place between [[ and ]], but there is parameter expansion and command substitution. file=/etc/passwd if [[ -e $file ]] then echo &quot;Password file exists.&quot; fi Using the [[ ... ]] test construct, rather than [ ... ] can prevent many logic errors in scripts. For example, the &amp;&amp;, ||, &lt;, and &gt; operators work within a [[ ]] test, despite giving an error within a [ ] construct. Arithmetic evaluation of octal / hexadecimal constants takes place automatically within a [[ ... ]] construct. # [[ Octal and hexadecimal evaluation ]] # Thank you, Moritz Gronbach, for pointing this out. decimal=15 octal=017 # = 15 (decimal) hex=0x0f # = 15 (decimal) if [ &quot;$decimal&quot; -eq &quot;$octal&quot; ] then echo &quot;$decimal equals $octal&quot; else echo &quot;$decimal is not equal to $octal&quot; # 15 is not equal to 017 fi # Doesn't evaluate within [ single brackets ]! if [[ &quot;$decimal&quot; -eq &quot;$octal&quot; ]] then echo &quot;$decimal equals $octal&quot; # 15 equals 017 else echo &quot;$decimal is not equal to $octal&quot; fi # Evaluates within [[ double brackets ]]! if [[ &quot;$decimal&quot; -eq &quot;$hex&quot; ]] then echo &quot;$decimal equals $hex&quot; # 15 equals 0x0f else echo &quot;$decimal is not equal to $hex&quot; fi # [[ $hexadecimal ]] also evaluates! Note Following an if, neither the test command nor the test brackets ( [ ] or [[ ]] ) are strictly necessary. dir=/home/bozo if cd &quot;$dir&quot; 2&gt;/dev/null; then # &quot;2&gt;/dev/null&quot; hides error message. echo &quot;Now in $dir.&quot; else echo &quot;Can't change to $dir.&quot; fi The &quot;if COMMAND&quot; construct returns the exit status of COMMAND. Similarly, a condition within test brackets may stand alone without an if, when used in combination with a list construct. var1=20 var2=22 [ &quot;$var1&quot; -ne &quot;$var2&quot; ] &amp;&amp; echo &quot;$var1 is not equal to $var2&quot; home=/home/bozo [ -d &quot;$home&quot; ] || echo &quot;$home directory does not exist.&quot; The (( )) construct expands and evaluates an arithmetic expression. If the expression evaluates as zero, it returns an exit status of 1, or &quot;false&quot;. A non-zero expression returns an exit status of 0, or &quot;true&quot;. This is in marked contrast to using the test and [ ] constructs previously discussed. Example 7-3. Arithmetic Tests using (( )) #!/bin/bash # arith-tests.sh # Arithmetic tests. # The (( ... )) construct evaluates and tests numerical expressions. # Exit status opposite from [ ... ] construct! (( 0 )) echo &quot;Exit status of \&quot;(( 0 ))\&quot; is $?.&quot; # 1 (( 1 )) echo &quot;Exit status of \&quot;(( 1 ))\&quot; is $?.&quot; # 0 (( 5 &gt; 4 )) # true echo &quot;Exit status of \&quot;(( 5 &gt; 4 ))\&quot; is $?.&quot; # 0 (( 5 &gt; 9 )) # false echo &quot;Exit status of \&quot;(( 5 &gt; 9 ))\&quot; is $?.&quot; # 1 (( 5 == 5 )) # true echo &quot;Exit status of \&quot;(( 5 == 5 ))\&quot; is $?.&quot; # 0 # (( 5 = 5 )) gives an error message. (( 5 - 5 )) # 0 echo &quot;Exit status of \&quot;(( 5 - 5 ))\&quot; is $?.&quot; # 1 (( 5 / 4 )) # Division o.k. echo &quot;Exit status of \&quot;(( 5 / 4 ))\&quot; is $?.&quot; # 0 (( 1 / 2 )) # Division result &lt; 1. echo &quot;Exit status of \&quot;(( 1 / 2 ))\&quot; is $?.&quot; # Rounded off to 0. # 1 (( 1 / 0 )) 2&gt;/dev/null # Illegal division by 0. # ^^^^^^^^^^^ echo &quot;Exit status of \&quot;(( 1 / 0 ))\&quot; is $?.&quot; # 1 # What effect does the &quot;2&gt;/dev/null&quot; have? # What would happen if it were removed? # Try removing it, then rerunning the script. # ======================================= # # (( ... )) also useful in an if-then test. var1=5 var2=4 if (( var1 &gt; var2 )) then #^ ^ Note: Not $var1, $var2. Why? echo &quot;$var1 is greater than $var2&quot; fi # 5 is greater than 4 exit 0 7.2. File test operators Returns true if... -e file exists -a file exists This is identical in effect to -e. It has been &quot;deprecated,&quot; [34] and its use is discouraged. -f file is a regular file (not a directory or device file) -s file is not zero size -d file is a directory -b file is a block device -c file is a character device device0=&quot;/dev/sda2&quot; # / (root directory) if [ -b &quot;$device0&quot; ] then echo &quot;$device0 is a block device.&quot; fi # /dev/sda2 is a block device. device1=&quot;/dev/ttyS1&quot; # PCMCIA modem card. if [ -c &quot;$device1&quot; ] then echo &quot;$device1 is a character device.&quot; fi # /dev/ttyS1 is a character device. -p file is a pipe function show_input_type() { [ -p /dev/fd/0 ] &amp;&amp; echo PIPE || echo STDIN } show_input_type &quot;Input&quot; # STDIN echo &quot;Input&quot; | show_input_type # PIPE # This example courtesy of Carl Anderson. -h file is a symbolic link -L file is a symbolic link -S file is a socket -t file (descriptor) is associated with a terminal device This test option may be used to check whether the stdin [ -t 0 ] or stdout [ -t 1 ] in a given script is a terminal. -r file has read permission (for the user running the test) -w file has write permission (for the user running the test) -x file has execute permission (for the user running the test) -g set-group-id (sgid) flag set on file or directory If a directory has the sgid flag set, then a file created within that directory belongs to the group that owns the directory, not necessarily to the group of the user who created the file. This may be useful for a directory shared by a workgroup. -u set-user-id (suid) flag set on file A binary owned by root with set-user-id flag set runs with root privileges, even when an ordinary user invokes it. [35] This is useful for executables (such as pppd and cdrecord) that need to access system hardware. Lacking the suid flag, these binaries could not be invoked by a non-root user. -rwsr-xr-t 1 root 178236 Oct 2 2000 /usr/sbin/pppd A file with the suid flag set shows an s in its permissions. -k sticky bit set Commonly known as the sticky bit, the save-text-mode flag is a special type of file permission. If a file has this flag set, that file will be kept in cache memory, for quicker access. [36] If set on a directory, it restricts write permission. Setting the sticky bit adds a t to the permissions on the file or directory listing. This restricts altering or deleting specific files in that directory to the owner of those files. drwxrwxrwt 7 root 1024 May 19 21:26 tmp/ If a user does not own a directory that has the sticky bit set, but has write permission in that directory, she can only delete those files that she owns in it. This keeps users from inadvertently overwriting or deleting each other's files in a publicly accessible directory, such as /tmp. (The owner of the directory or root can, of course, delete or rename files there.) -O you are owner of file -G group-id of file same as yours -N file modified since it was last read f1 -nt f2 file f1 is newer than f2 f1 -ot f2 file f1 is older than f2 f1 -ef f2 files f1 and f2 are hard links to the same file ! &quot;not&quot; -- reverses the sense of the tests above (returns true if condition absent). Example 7-4. Testing for broken links #!/bin/bash # broken-link.sh # Written by Lee bigelow &lt;ligelowbee@yahoo.com&gt; # Used in ABS Guide with permission. # A pure shell script to find dead symlinks and output them quoted #+ so they can be fed to xargs and dealt with :) #+ eg. sh broken-link.sh /somedir /someotherdir|xargs rm # # This, however, is a better method: # # find &quot;somedir&quot; -type l -print0|\ # xargs -r0 file|\ # grep &quot;broken symbolic&quot;| # sed -e 's/^\|: *broken symbolic.*$/&quot;/g' # #+ but that wouldn't be pure Bash, now would it. # Caution: beware the /proc file system and any circular links! ################################################################ # If no args are passed to the script set directories-to-search #+ to current directory. Otherwise set the directories-to-search #+ to the args passed. ###################### [ $# -eq 0 ] &amp;&amp; directorys=`pwd` || directorys=$@ # Setup the function linkchk to check the directory it is passed #+ for files that are links and don't exist, then print them quoted. # If one of the elements in the directory is a subdirectory then #+ send that subdirectory to the linkcheck function. ########## linkchk () { for element in $1/*; do [ -h &quot;$element&quot; -a ! -e &quot;$element&quot; ] &amp;&amp; echo \&quot;$element\&quot; [ -d &quot;$element&quot; ] &amp;&amp; linkchk $element # Of course, '-h' tests for symbolic link, '-d' for directory. done } # Send each arg that was passed to the script to the linkchk() function #+ if it is a valid directoy. If not, then print the error message #+ and usage info. ################## for directory in $directorys; do if [ -d $directory ] then linkchk $directory else echo &quot;$directory is not a directory&quot; echo &quot;Usage: $0 dir1 dir2 ...&quot; fi done exit $? Example 31-1, Example 11-8, Example 11-3, Example 31-3, and Example A-1 also illustrate uses of the file test operators. 7.3. Other Comparison Operators A binary comparison operator compares two variables or quantities. Note that integer and string comparison use a different set of operators. integer comparison -eq is equal to if [ &quot;$a&quot; -eq &quot;$b&quot; ] -ne is not equal to if [ &quot;$a&quot; -ne &quot;$b&quot; ] -gt is greater than if [ &quot;$a&quot; -gt &quot;$b&quot; ] -ge is greater than or equal to if [ &quot;$a&quot; -ge &quot;$b&quot; ] -lt is less than if [ &quot;$a&quot; -lt &quot;$b&quot; ] -le is less than or equal to if [ &quot;$a&quot; -le &quot;$b&quot; ] &lt; is less than (within double parentheses) ((&quot;$a&quot; &lt; &quot;$b&quot;)) &lt;= is less than or equal to (within double parentheses) ((&quot;$a&quot; &lt;= &quot;$b&quot;)) &gt; is greater than (within double parentheses) ((&quot;$a&quot; &gt; &quot;$b&quot;)) &gt;= is greater than or equal to (within double parentheses) ((&quot;$a&quot; &gt;= &quot;$b&quot;)) string comparison = is equal to if [ &quot;$a&quot; = &quot;$b&quot; ] Caution Note the whitespace framing the =. if [ &quot;$a&quot;=&quot;$b&quot; ] is not equivalent to the above. == is equal to if [ &quot;$a&quot; == &quot;$b&quot; ] This is a synonym for =. Note The == comparison operator behaves differently within a double-brackets test than within single brackets. [[ $a == z* ]] # True if $a starts with an &quot;z&quot; (pattern matching). [[ $a == &quot;z*&quot; ]] # True if $a is equal to z* (literal matching). [ $a == z* ] # File globbing and word splitting take place. [ &quot;$a&quot; == &quot;z*&quot; ] # True if $a is equal to z* (literal matching). # Thanks, Stéphane Chazelas != is not equal to if [ &quot;$a&quot; != &quot;$b&quot; ] This operator uses pattern matching within a [[ ... ]] construct. &lt; is less than, in ASCII alphabetical order if [[ &quot;$a&quot; &lt; &quot;$b&quot; ]] if [ &quot;$a&quot; \&lt; &quot;$b&quot; ] Note that the &quot;&lt;&quot; needs to be escaped within a [ ] construct. &gt; is greater than, in ASCII alphabetical order if [[ &quot;$a&quot; &gt; &quot;$b&quot; ]] if [ &quot;$a&quot; \&gt; &quot;$b&quot; ] Note that the &quot;&gt;&quot; needs to be escaped within a [ ] construct. See Example 27-11 for an application of this comparison operator. -z string is null, that is, has zero length String='' # Zero-length (&quot;null&quot;) string variable. if [ -z &quot;$String&quot; ] then echo &quot;\$String is null.&quot; else echo &quot;\$String is NOT null.&quot; fi # $String is null. -n string is not null. Caution The -n test requires that the string be quoted within the test brackets. Using an unquoted string with ! -z, or even just the unquoted string alone within test brackets (see Example 7-6) normally works, however, this is an unsafe practice. Always quote a tested string. [37] Example 7-5. Arithmetic and string comparisons #!/bin/bash a=4 b=5 # Here &quot;a&quot; and &quot;b&quot; can be treated either as integers or strings. # There is some blurring between the arithmetic and string comparisons, #+ since Bash variables are not strongly typed. # Bash permits integer operations and comparisons on variables #+ whose value consists of all-integer characters. # Caution advised, however. echo if [ &quot;$a&quot; -ne &quot;$b&quot; ] then echo &quot;$a is not equal to $b&quot; echo &quot;(arithmetic comparison)&quot; fi echo if [ &quot;$a&quot; != &quot;$b&quot; ] then echo &quot;$a is not equal to $b.&quot; echo &quot;(string comparison)&quot; # &quot;4&quot; != &quot;5&quot; # ASCII 52 != ASCII 53 fi # In this particular instance, both &quot;-ne&quot; and &quot;!=&quot; work. echo exit 0 Example 7-6. Testing whether a string is null #!/bin/bash # str-test.sh: Testing null strings and unquoted strings, #+ but not strings and sealing wax, not to mention cabbages and kings . . . # Using if [ ... ] # If a string has not been initialized, it has no defined value. # This state is called &quot;null&quot; (not the same as zero!). if [ -n $string1 ] # string1 has not been declared or initialized. then echo &quot;String \&quot;string1\&quot; is not null.&quot; else echo &quot;String \&quot;string1\&quot; is null.&quot; fi # Wrong result. # Shows $string1 as not null, although it was not initialized. echo # Let's try it again. if [ -n &quot;$string1&quot; ] # This time, $string1 is quoted. then echo &quot;String \&quot;string1\&quot; is not null.&quot; else echo &quot;String \&quot;string1\&quot; is null.&quot; fi # Quote strings within test brackets! echo if [ $string1 ] # This time, $string1 stands naked. then echo &quot;String \&quot;string1\&quot; is not null.&quot; else echo &quot;String \&quot;string1\&quot; is null.&quot; fi # This works fine. # The [ ... ] test operator alone detects whether the string is null. # However it is good practice to quote it (if [ &quot;$string1&quot; ]). # # As Stephane Chazelas points out, # if [ $string1 ] has one argument, &quot;]&quot; # if [ &quot;$string1&quot; ] has two arguments, the empty &quot;$string1&quot; and &quot;]&quot; echo string1=initialized if [ $string1 ] # Again, $string1 stands unquoted. then echo &quot;String \&quot;string1\&quot; is not null.&quot; else echo &quot;String \&quot;string1\&quot; is null.&quot; fi # Again, gives correct result. # Still, it is better to quote it (&quot;$string1&quot;), because . . . string1=&quot;a = b&quot; if [ $string1 ] # Again, $string1 stands unquoted. then echo &quot;String \&quot;string1\&quot; is not null.&quot; else echo &quot;String \&quot;string1\&quot; is null.&quot; fi # Not quoting &quot;$string1&quot; now gives wrong result! exit 0 # Thank you, also, Florian Wisser, for the &quot;heads-up&quot;. Example 7-7. zmore #!/bin/bash # zmore # View gzipped files with 'more' filter. E_NOARGS=85 E_NOTFOUND=86 E_NOTGZIP=87 if [ $# -eq 0 ] # same effect as: if [ -z &quot;$1&quot; ] # $1 can exist, but be empty: zmore &quot;&quot; arg2 arg3 then echo &quot;Usage: `basename $0` filename&quot; &gt;&amp;2 # Error message to stderr. exit $E_NOARGS # Returns 85 as exit status of script (error code). fi filename=$1 if [ ! -f &quot;$filename&quot; ] # Quoting $filename allows for possible spaces. then echo &quot;File $filename not found!&quot; &gt;&amp;2 # Error message to stderr. exit $E_NOTFOUND fi if [ ${filename##*.} != &quot;gz&quot; ] # Using bracket in variable substitution. then echo &quot;File $1 is not a gzipped file!&quot; exit $E_NOTGZIP fi zcat $1 | more # Uses the 'more' filter. # May substitute 'less' if desired. exit $? # Script returns exit status of pipe. # Actually &quot;exit $?&quot; is unnecessary, as the script will, in any case, #+ return the exit status of the last command executed. compound comparison -a logical and exp1 -a exp2 returns true if both exp1 and exp2 are true. -o logical or exp1 -o exp2 returns true if either exp1 or exp2 is true. These are similar to the Bash comparison operators &amp;&amp; and ||, used within double brackets. [[ condition1 &amp;&amp; condition2 ]] The -o and -a operators work with the test command or occur within single test brackets. if [ &quot;$expr1&quot; -a &quot;$expr2&quot; ] then echo &quot;Both expr1 and expr2 are true.&quot; else echo &quot;Either expr1 or expr2 is false.&quot; fi Caution But, as rihad points out: [ 1 -eq 1 ] &amp;&amp; [ -n &quot;`echo true 1&gt;&amp;2`&quot; ] # true [ 1 -eq 2 ] &amp;&amp; [ -n &quot;`echo true 1&gt;&amp;2`&quot; ] # (no output) # ^^^^^^^ False condition. So far, everything as expected. # However ... [ 1 -eq 2 -a -n &quot;`echo true 1&gt;&amp;2`&quot; ] # true # ^^^^^^^ False condition. So, why &quot;true&quot; output? # Is it because both condition clauses within brackets evaluate? [[ 1 -eq 2 &amp;&amp; -n &quot;`echo true 1&gt;&amp;2`&quot; ]] # (no output) # No, that's not it. # Apparently &amp;&amp; and || &quot;short-circuit&quot; while -a and -o do not. Refer to Example 8-3, Example 27-17, and Example A-29 to see compound comparison operators in action. 7.4. Nested if/then Condition Tests Condition tests using the if/then construct may be nested. The net result is equivalent to using the &amp;&amp; compound comparison operator. a=3 if [ &quot;$a&quot; -gt 0 ] then if [ &quot;$a&quot; -lt 5 ] then echo &quot;The value of \&quot;a\&quot; lies somewhere between 0 and 5.&quot; fi fi # Same result as: if [ &quot;$a&quot; -gt 0 ] &amp;&amp; [ &quot;$a&quot; -lt 5 ] then echo &quot;The value of \&quot;a\&quot; lies somewhere between 0 and 5.&quot; fi Example 37-4 and Example 17-11 demonstrate nested if/then condition tests. 7.5. Testing Your Knowledge of Tests The systemwide xinitrc file can be used to launch the X server. This file contains quite a number of if/then tests. The following is excerpted from an &quot;ancient&quot; version of xinitrc (Red Hat 7.1, or thereabouts). if [ -f $HOME/.Xclients ]; then exec $HOME/.Xclients elif [ -f /etc/X11/xinit/Xclients ]; then exec /etc/X11/xinit/Xclients else # failsafe settings. Although we should never get here # (we provide fallbacks in Xclients as well) it can't hurt. xclock -geometry 100x100-5+5 &amp; xterm -geometry 80x50-50+150 &amp; if [ -f /usr/bin/netscape -a -f /usr/share/doc/HTML/index.html ]; then netscape /usr/share/doc/HTML/index.html &amp; fi fi Explain the test constructs in the above snippet, then examine an updated version of the file, /etc/X11/xinit/xinitrc, and analyze the if/then test constructs there. You may need to refer ahead to the discussions of grep, sed, and regular expressions. Chapter 8. Operations and Related Topics 8.1. Operators assignment variable assignment Initializing or changing the value of a variable = All-purpose assignment operator, which works for both arithmetic and string assignments. var=27 category=minerals # No spaces allowed after the &quot;=&quot;. Caution Do not confuse the &quot;=&quot; assignment operator with the = test operator. # = as a test operator if [ &quot;$string1&quot; = &quot;$string2&quot; ] then command fi # if [ &quot;X$string1&quot; = &quot;X$string2&quot; ] is safer, #+ to prevent an error message should one of the variables be empty. # (The prepended &quot;X&quot; characters cancel out.) arithmetic operators + plus - minus * multiplication / division ** exponentiation # Bash, version 2.02, introduced the &quot;**&quot; exponentiation operator. let &quot;z=5**3&quot; # 5 * 5 * 5 echo &quot;z = $z&quot; # z = 125 % modulo, or mod (returns the remainder of an integer division operation) bash$ expr 5 % 3 2 5/3 = 1, with remainder 2 This operator finds use in, among other things, generating numbers within a specific range (see Example 9-11 and Example 9-15) and formatting program output (see Example 27-16 and Example A-6). It can even be used to generate prime numbers, (see Example A-15). Modulo turns up surprisingly often in numerical recipes. Example 8-1. Greatest common divisor #!/bin/bash # gcd.sh: greatest common divisor # Uses Euclid's algorithm # The &quot;greatest common divisor&quot; (gcd) of two integers #+ is the largest integer that will divide both, leaving no remainder. # Euclid's algorithm uses successive division. # In each pass, #+ dividend &lt;--- divisor #+ divisor &lt;--- remainder #+ until remainder = 0. # The gcd = dividend, on the final pass. # # For an excellent discussion of Euclid's algorithm, see #+ Jim Loy's site, http://www.jimloy.com/number/euclids.htm. # ------------------------------------------------------ # Argument check ARGS=2 E_BADARGS=85 if [ $# -ne &quot;$ARGS&quot; ] then echo &quot;Usage: `basename $0` first-number second-number&quot; exit $E_BADARGS fi # ------------------------------------------------------ gcd () { dividend=$1 # Arbitrary assignment. divisor=$2 #! It doesn't matter which of the two is larger. # Why not? remainder=1 # If an uninitialized variable is used inside #+ test brackets, an error message results. until [ &quot;$remainder&quot; -eq 0 ] do # ^^^^^^^^^^ Must be previously initialized! let &quot;remainder = $dividend % $divisor&quot; dividend=$divisor # Now repeat with 2 smallest numbers. divisor=$remainder done # Euclid's algorithm } # Last $dividend is the gcd. gcd $1 $2 echo; echo &quot;GCD of $1 and $2 = $dividend&quot;; echo # Exercises : # --------- # 1) Check command-line arguments to make sure they are integers, #+ and exit the script with an appropriate error message if not. # 2) Rewrite the gcd () function to use local variables. exit 0 += plus-equal (increment variable by a constant) [38] let &quot;var += 5&quot; results in var being incremented by 5. -= minus-equal (decrement variable by a constant) *= times-equal (multiply variable by a constant) let &quot;var *= 4&quot; results in var being multiplied by 4. /= slash-equal (divide variable by a constant) %= mod-equal (remainder of dividing variable by a constant) Arithmetic operators often occur in an expr or let expression. Example 8-2. Using Arithmetic Operations #!/bin/bash # Counting to 11 in 10 different ways. n=1; echo -n &quot;$n &quot; let &quot;n = $n + 1&quot; # let &quot;n = n + 1&quot; also works. echo -n &quot;$n &quot; : $((n = $n + 1)) # &quot;:&quot; necessary because otherwise Bash attempts #+ to interpret &quot;$((n = $n + 1))&quot; as a command. echo -n &quot;$n &quot; (( n = n + 1 )) # A simpler alternative to the method above. # Thanks, David Lombard, for pointing this out. echo -n &quot;$n &quot; n=$(($n + 1)) echo -n &quot;$n &quot; : $[ n = $n + 1 ] # &quot;:&quot; necessary because otherwise Bash attempts #+ to interpret &quot;$[ n = $n + 1 ]&quot; as a command. # Works even if &quot;n&quot; was initialized as a string. echo -n &quot;$n &quot; n=$[ $n + 1 ] # Works even if &quot;n&quot; was initialized as a string. #* Avoid this type of construct, since it is obsolete and nonportable. # Thanks, Stephane Chazelas. echo -n &quot;$n &quot; # Now for C-style increment operators. # Thanks, Frank Wang, for pointing this out. let &quot;n++&quot; # let &quot;++n&quot; also works. echo -n &quot;$n &quot; (( n++ )) # (( ++n )) also works. echo -n &quot;$n &quot; : $(( n++ )) # : $(( ++n )) also works. echo -n &quot;$n &quot; : $[ n++ ] # : $[ ++n ] also works echo -n &quot;$n &quot; echo exit 0 Note Integer variables in older versions of Bash were signed long (32-bit) integers, in the range of -2147483648 to 2147483647. An operation that took a variable outside these limits gave an erroneous result. echo $BASH_VERSION # 1.14 a=2147483646 echo &quot;a = $a&quot; # a = 2147483646 let &quot;a+=1&quot; # Increment &quot;a&quot;. echo &quot;a = $a&quot; # a = 2147483647 let &quot;a+=1&quot; # increment &quot;a&quot; again, past the limit. echo &quot;a = $a&quot; # a = -2147483648 # ERROR: out of range, # + and the leftmost bit, the sign bit, # + has been set, making the result negative. As of version &gt;= 2.05b, Bash supports 64-bit integers. Caution Bash does not understand floating point arithmetic. It treats numbers containing a decimal point as strings. a=1.5 let &quot;b = $a + 1.3&quot; # Error. # t2.sh: let: b = 1.5 + 1.3: syntax error in expression # (error token is &quot;.5 + 1.3&quot;) echo &quot;b = $b&quot; # b=1 Use bc in scripts that that need floating point calculations or math library functions. bitwise operators. The bitwise operators seldom make an appearance in shell scripts. Their chief use seems to be manipulating and testing values read from ports or sockets. &quot;Bit flipping&quot; is more relevant to compiled languages, such as C and C++, which provide direct access to system hardware. However, see vladz's ingenious use of bitwise operators in his base64.sh (Example A-54) script. bitwise operators &lt;&lt; bitwise left shift (multiplies by 2 for each shift position) &lt;&lt;= left-shift-equal let &quot;var &lt;&lt;= 2&quot; results in var left-shifted 2 bits (multiplied by 4) &gt;&gt; bitwise right shift (divides by 2 for each shift position) &gt;&gt;= right-shift-equal (inverse of &lt;&lt;=) &amp; bitwise AND &amp;= bitwise AND-equal | bitwise OR |= bitwise OR-equal ~ bitwise NOT ^ bitwise XOR ^= bitwise XOR-equal logical (boolean) operators ! NOT if [ ! -f $FILENAME ] then ... &amp;&amp; AND if [ $condition1 ] &amp;&amp; [ $condition2 ] # Same as: if [ $condition1 -a $condition2 ] # Returns true if both condition1 and condition2 hold true... if [[ $condition1 &amp;&amp; $condition2 ]] # Also works. # Note that &amp;&amp; operator not permitted inside brackets #+ of [ ... ] construct. Note &amp;&amp; may also be used, depending on context, in an and list to concatenate commands. || OR if [ $condition1 ] || [ $condition2 ] # Same as: if [ $condition1 -o $condition2 ] # Returns true if either condition1 or condition2 holds true... if [[ $condition1 || $condition2 ]] # Also works. # Note that || operator not permitted inside brackets #+ of a [ ... ] construct. Note Bash tests the exit status of each statement linked with a logical operator. Example 8-3. Compound Condition Tests Using &amp;&amp; and || #!/bin/bash a=24 b=47 if [ &quot;$a&quot; -eq 24 ] &amp;&amp; [ &quot;$b&quot; -eq 47 ] then echo &quot;Test #1 succeeds.&quot; else echo &quot;Test #1 fails.&quot; fi # ERROR: if [ &quot;$a&quot; -eq 24 &amp;&amp; &quot;$b&quot; -eq 47 ] #+ attempts to execute ' [ &quot;$a&quot; -eq 24 ' #+ and fails to finding matching ']'. # # Note: if [[ $a -eq 24 &amp;&amp; $b -eq 24 ]] works. # The double-bracket if-test is more flexible #+ than the single-bracket version. # (The &quot;&amp;&amp;&quot; has a different meaning in line 17 than in line 6.) # Thanks, Stephane Chazelas, for pointing this out. if [ &quot;$a&quot; -eq 98 ] || [ &quot;$b&quot; -eq 47 ] then echo &quot;Test #2 succeeds.&quot; else echo &quot;Test #2 fails.&quot; fi # The -a and -o options provide #+ an alternative compound condition test. # Thanks to Patrick Callahan for pointing this out. if [ &quot;$a&quot; -eq 24 -a &quot;$b&quot; -eq 47 ] then echo &quot;Test #3 succeeds.&quot; else echo &quot;Test #3 fails.&quot; fi if [ &quot;$a&quot; -eq 98 -o &quot;$b&quot; -eq 47 ] then echo &quot;Test #4 succeeds.&quot; else echo &quot;Test #4 fails.&quot; fi a=rhino b=crocodile if [ &quot;$a&quot; = rhino ] &amp;&amp; [ &quot;$b&quot; = crocodile ] then echo &quot;Test #5 succeeds.&quot; else echo &quot;Test #5 fails.&quot; fi exit 0 The &amp;&amp; and || operators also find use in an arithmetic context. bash$ echo $(( 1 &amp;&amp; 2 )) $((3 &amp;&amp; 0)) $((4 || 0)) $((0 || 0)) 1 0 1 0 miscellaneous operators , Comma operator The comma operator chains together two or more arithmetic operations. All the operations are evaluated (with possible side effects. [39] let &quot;t1 = ((5 + 3, 7 - 1, 15 - 4))&quot; echo &quot;t1 = $t1&quot; ^^^^^^ # t1 = 11 # Here t1 is set to the result of the last operation. Why? let &quot;t2 = ((a = 9, 15 / 3))&quot; # Set &quot;a&quot; and calculate &quot;t2&quot;. echo &quot;t2 = $t2 a = $a&quot; # t2 = 5 a = 9 The comma operator finds use mainly in for loops. See Example 11-13. 8.2. Numerical Constants A shell script interprets a number as decimal (base 10), unless that number has a special prefix or notation. A number preceded by a 0 is octal (base 8). A number preceded by 0x is hexadecimal (base 16). A number with an embedded # evaluates as BASE#NUMBER (with range and notational restrictions). Example 8-4. Representation of numerical constants #!/bin/bash # numbers.sh: Representation of numbers in different bases. # Decimal: the default let &quot;dec = 32&quot; echo &quot;decimal number = $dec&quot; # 32 # Nothing out of the ordinary here. # Octal: numbers preceded by '0' (zero) let &quot;oct = 032&quot; echo &quot;octal number = $oct&quot; # 26 # Expresses result in decimal. # --------- ------ -- ------- # Hexadecimal: numbers preceded by '0x' or '0X' let &quot;hex = 0x32&quot; echo &quot;hexadecimal number = $hex&quot; # 50 echo $((0x9abc)) # 39612 # ^^ ^^ double-parentheses arithmetic expansion/evaluation # Expresses result in decimal. # Other bases: BASE#NUMBER # BASE between 2 and 64. # NUMBER must use symbols within the BASE range, see below. let &quot;bin = 2#111100111001101&quot; echo &quot;binary number = $bin&quot; # 31181 let &quot;b32 = 32#77&quot; echo &quot;base-32 number = $b32&quot; # 231 let &quot;b64 = 64#@_&quot; echo &quot;base-64 number = $b64&quot; # 4031 # This notation only works for a limited range (2 - 64) of ASCII characters. # 10 digits + 26 lowercase characters + 26 uppercase characters + @ + _ echo echo $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA)) # 1295 170 44822 3375 # Important note: # -------------- # Using a digit out of range of the specified base notation #+ gives an error message. let &quot;bad_oct = 081&quot; # (Partial) error message output: # bad_oct = 081: value too great for base (error token is &quot;081&quot;) # Octal numbers use only digits in the range 0 - 7. exit $? # Exit value = 1 (error) # Thanks, Rich Bartell and Stephane Chazelas, for clarification. 8.3. The Double-Parentheses Construct Similar to the let command, the (( ... )) construct permits arithmetic expansion and evaluation. In its simplest form, a=$(( 5 + 3 )) would set a to 5 + 3, or 8. However, this double-parentheses construct is also a mechanism for allowing C-style manipulation of variables in Bash, for example, (( var++ )). Example 8-5. C-style manipulation of variables #!/bin/bash # c-vars.sh # Manipulating a variable, C-style, using the (( ... )) construct. echo (( a = 23 )) # Setting a value, C-style, #+ with spaces on both sides of the &quot;=&quot;. echo &quot;a (initial value) = $a&quot; # 23 (( a++ )) # Post-increment 'a', C-style. echo &quot;a (after a++) = $a&quot; # 24 (( a-- )) # Post-decrement 'a', C-style. echo &quot;a (after a--) = $a&quot; # 23 (( ++a )) # Pre-increment 'a', C-style. echo &quot;a (after ++a) = $a&quot; # 24 (( --a )) # Pre-decrement 'a', C-style. echo &quot;a (after --a) = $a&quot; # 23 echo ######################################################## # Note that, as in C, pre- and post-decrement operators #+ have different side-effects. n=1; let --n &amp;&amp; echo &quot;True&quot; || echo &quot;False&quot; # False n=1; let n-- &amp;&amp; echo &quot;True&quot; || echo &quot;False&quot; # True # Thanks, Jeroen Domburg. ######################################################## echo (( t = a&lt;45?7:11 )) # C-style trinary operator. # ^ ^ ^ echo &quot;If a &lt; 45, then t = 7, else t = 11.&quot; # a = 23 echo &quot;t = $t &quot; # t = 7 echo # ----------------- # Easter Egg alert! # ----------------- # Chet Ramey seems to have snuck a bunch of undocumented C-style #+ constructs into Bash (actually adapted from ksh, pretty much). # In the Bash docs, Ramey calls (( ... )) shell arithmetic, #+ but it goes far beyond that. # Sorry, Chet, the secret is out. # See also &quot;for&quot; and &quot;while&quot; loops using the (( ... )) construct. # These work only with version 2.04 or later of Bash. exit See also Example 11-13 and Example 8-4. 8.4. Operator Precedence In a script, operations execute in order of precedence: the higher precedence operations execute before the lower precedence ones. [40] Table 8-1. Operator Precedence Operator Meaning Comments HIGHEST PRECEDENCE var++ var-- post-increment, post-decrement C-style operators ++var --var pre-increment, pre-decrement ! ~ negation logical / bitwise, inverts sense of following operator ** exponentiation arithmetic operation * / % multiplication, division, modulo arithmetic operation + - addition, subtraction arithmetic operation &lt;&lt; &gt;&gt; left, right shift bitwise -z -n unary comparison string is/is-not null -e -f -t -x, etc. unary comparison file-test &lt; -lt &gt; -gt &lt;= -le &gt;= -ge compound comparison string and integer -nt -ot -ef compound comparison file-test == -eq != -ne equality / inequality test operators, string and integer &amp; AND bitwise ^ XOR exclusive OR, bitwise | OR bitwise &amp;&amp; -a AND logical, compound comparison || -o OR logical, compound comparison ?: trinary operator C-style = assignment (do not confuse with equality test) *= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;= combination assignment times-equal, divide-equal, mod-equal, etc. , comma links a sequence of operations LOWEST PRECEDENCE In practice, all you really need to remember is the following: The &quot;My Dear Aunt Sally&quot; mantra (multiply, divide, add, subtract) for the familiar arithmetic operations. The compound logical operators, &amp;&amp;, ||, -a, and -o have low precedence. The order of evaluation of equal-precedence operators is usually left-to-right. Now, let's utilize our knowledge of operator precedence to analyze a couple of lines from the /etc/init.d/functions file, as found in the Fedora Core Linux distro. while [ -n &quot;$remaining&quot; -a &quot;$retry&quot; -gt 0 ]; do # This looks rather daunting at first glance. # Separate the conditions: while [ -n &quot;$remaining&quot; -a &quot;$retry&quot; -gt 0 ]; do # --condition 1-- ^^ --condition 2- # If variable &quot;$remaining&quot; is not zero length #+ AND (-a) #+ variable &quot;$retry&quot; is greater-than zero #+ then #+ the [ expresion-within-condition-brackets ] returns success (0) #+ and the while-loop executes an iteration. # ============================================================== # Evaluate &quot;condition 1&quot; and &quot;condition 2&quot; ***before*** #+ ANDing them. Why? Because the AND (-a) has a lower precedence #+ than the -n and -gt operators, #+ and therefore gets evaluated *last*. ################################################################# if [ -f /etc/sysconfig/i18n -a -z &quot;${NOLOCALE:-}&quot; ] ; then # Again, separate the conditions: if [ -f /etc/sysconfig/i18n -a -z &quot;${NOLOCALE:-}&quot; ] ; then # --condition 1--------- ^^ --condition 2----- # If file &quot;/etc/sysconfig/i18n&quot; exists #+ AND (-a) #+ variable $NOLOCALE is zero length #+ then #+ the [ test-expresion-within-condition-brackets ] returns success (0) #+ and the commands following execute. # # As before, the AND (-a) gets evaluated *last* #+ because it has the lowest precedence of the operators within #+ the test brackets. # ============================================================== # Note: # ${NOLOCALE:-} is a parameter expansion that seems redundant. # But, if $NOLOCALE has not been declared, it gets set to *null*, #+ in effect declaring it. # This makes a difference in some contexts. Tip To avoid confusion or error in a complex sequence of test operators, break up the sequence into bracketed sections. if [ &quot;$v1&quot; -gt &quot;$v2&quot; -o &quot;$v1&quot; -lt &quot;$v2&quot; -a -e &quot;$filename&quot; ] # Unclear what's going on here... if [[ &quot;$v1&quot; -gt &quot;$v2&quot; ]] || [[ &quot;$v1&quot; -lt &quot;$v2&quot; ]] &amp;&amp; [[ -e &quot;$filename&quot; ]] # Much better -- the condition tests are grouped in logical sections. Part 3. Beyond the Basics Table of Contents 9. Another Look at Variables 9.1. Internal Variables 9.2. Typing variables: declare or typeset 9.3. $RANDOM: generate random integer 10. Manipulating Variables 10.1. Manipulating Strings 10.2. Parameter Substitution 11. Loops and Branches 11.1. Loops 11.2. Nested Loops 11.3. Loop Control 11.4. Testing and Branching 12. Command Substitution 13. Arithmetic Expansion 14. Recess Time Chapter 9. Another Look at Variables Used properly, variables can add power and flexibility to scripts. This requires learning their subtleties and nuances. 9.1. Internal Variables Builtin variables: variables affecting bash script behavior $BASH The path to the Bash binary itself bash$ echo $BASH /bin/bash $BASH_ENV An environmental variable pointing to a Bash startup file to be read when a script is invoked $BASH_SUBSHELL A variable indicating the subshell level. This is a new addition to Bash, version 3. See Example 21-1 for usage. $BASHPID Process ID of the current instance of Bash. This is not the same as the $$ variable, but it often gives the same result. bash4$ echo $$ 11015 bash4$ echo $BASHPID 11015 bash4$ ps ax | grep bash4 11015 pts/2 R 0:00 bash4 But ... #!/bin/bash4 echo &quot;\$\$ outside of subshell = $$&quot; # 9602 echo &quot;\$BASH_SUBSHELL outside of subshell = $BASH_SUBSHELL&quot; # 0 echo &quot;\$BASHPID outside of subshell = $BASHPID&quot; # 9602 echo ( echo &quot;\$\$ inside of subshell = $$&quot; # 9602 echo &quot;\$BASH_SUBSHELL inside of subshell = $BASH_SUBSHELL&quot; # 1 echo &quot;\$BASHPID inside of subshell = $BASHPID&quot; ) # 9603 # Note that $$ returns PID of parent process. $BASH_VERSINFO[n] A 6-element array containing version information about the installed release of Bash. This is similar to $BASH_VERSION, below, but a bit more detailed. # Bash version info: for n in 0 1 2 3 4 5 do echo &quot;BASH_VERSINFO[$n] = ${BASH_VERSINFO[$n]}&quot; done # BASH_VERSINFO[0] = 3 # Major version no. # BASH_VERSINFO[1] = 00 # Minor version no. # BASH_VERSINFO[2] = 14 # Patch level. # BASH_VERSINFO[3] = 1 # Build version. # BASH_VERSINFO[4] = release # Release status. # BASH_VERSINFO[5] = i386-redhat-linux-gnu # Architecture # (same as $MACHTYPE). $BASH_VERSION The version of Bash installed on the system bash$ echo $BASH_VERSION 3.2.25(1)-release tcsh% echo $BASH_VERSION BASH_VERSION: Undefined variable. Checking $BASH_VERSION is a good method of determining which shell is running. $SHELL does not necessarily give the correct answer. $CDPATH A colon-separated list of search paths available to the cd command, similar in function to the $PATH variable for binaries. The $CDPATH variable may be set in the local ~/.bashrc file. bash$ cd bash-doc bash: cd: bash-doc: No such file or directory bash$ CDPATH=/usr/share/doc bash$ cd bash-doc /usr/share/doc/bash-doc bash$ echo $PWD /usr/share/doc/bash-doc $DIRSTACK The top value in the directory stack [41] (affected by pushd and popd) This builtin variable corresponds to the dirs command, however dirs shows the entire contents of the directory stack. $EDITOR The default editor invoked by a script, usually vi or emacs. $EUID &quot;effective&quot; user ID number Identification number of whatever identity the current user has assumed, perhaps by means of su. Caution The $EUID is not necessarily the same as the $UID. $FUNCNAME Name of the current function xyz23 () { echo &quot;$FUNCNAME now executing.&quot; # xyz23 now executing. } xyz23 echo &quot;FUNCNAME = $FUNCNAME&quot; # FUNCNAME = # Null value outside a function. See also Example A-50. $GLOBIGNORE A list of filename patterns to be excluded from matching in globbing. $GROUPS Groups current user belongs to This is a listing (array) of the group id numbers for current user, as recorded in /etc/passwd and /etc/group. root# echo $GROUPS 0 root# echo ${GROUPS[1]} 1 root# echo ${GROUPS[5]} 6 $HOME Home directory of the user, usually /home/username (see Example 10-7) $HOSTNAME The hostname command assigns the system host name at bootup in an init script. However, the gethostname() function sets the Bash internal variable $HOSTNAME. See also Example 10-7. $HOSTTYPE host type Like $MACHTYPE, identifies the system hardware. bash$ echo $HOSTTYPE i686 $IFS internal field separator This variable determines how Bash recognizes fields, or word boundaries, when it interprets character strings. $IFS defaults to whitespace (space, tab, and newline), but may be changed, for example, to parse a comma-separated data file. Note that $* uses the first character held in $IFS. See Example 5-1. bash$ echo &quot;$IFS&quot; (With $IFS set to default, a blank line displays.) bash$ echo &quot;$IFS&quot; | cat -vte ^I$ $ (Show whitespace: here a single space, ^I [horizontal tab], and newline, and display &quot;$&quot; at end-of-line.) bash$ bash -c 'set w x y z; IFS=&quot;:-;&quot;; echo &quot;$*&quot;' w:x:y:z (Read commands from string and assign any arguments to pos params.) Set $IFS to eliminate whitespace in pathnames. IFS=&quot;$(printf '\n\t')&quot; # Per David Wheeler. Caution $IFS does not handle whitespace the same as it does other characters. Example 9-1. $IFS and whitespace #!/bin/bash # ifs.sh var1=&quot;a+b+c&quot; var2=&quot;d-e-f&quot; var3=&quot;g,h,i&quot; IFS=+ # The plus sign will be interpreted as a separator. echo $var1 # a b c echo $var2 # d-e-f echo $var3 # g,h,i echo IFS=&quot;-&quot; # The plus sign reverts to default interpretation. # The minus sign will be interpreted as a separator. echo $var1 # a+b+c echo $var2 # d e f echo $var3 # g,h,i echo IFS=&quot;,&quot; # The comma will be interpreted as a separator. # The minus sign reverts to default interpretation. echo $var1 # a+b+c echo $var2 # d-e-f echo $var3 # g h i echo IFS=&quot; &quot; # The space character will be interpreted as a separator. # The comma reverts to default interpretation. echo $var1 # a+b+c echo $var2 # d-e-f echo $var3 # g,h,i # ======================================================== # # However ... # $IFS treats whitespace differently than other characters. output_args_one_per_line() { for arg do echo &quot;[$arg]&quot; done # ^ ^ Embed within brackets, for your viewing pleasure. } echo; echo &quot;IFS=\&quot; \&quot;&quot; echo &quot;-------&quot; IFS=&quot; &quot; var=&quot; a b c &quot; # ^ ^^ ^^^ output_args_one_per_line $var # output_args_one_per_line `echo &quot; a b c &quot;` # [a] # [b] # [c] echo; echo &quot;IFS=:&quot; echo &quot;-----&quot; IFS=: var=&quot;:a::b:c:::&quot; # Same pattern as above, # ^ ^^ ^^^ #+ but substituting &quot;:&quot; for &quot; &quot; ... output_args_one_per_line $var # [] # [a] # [] # [b] # [c] # [] # [] # Note &quot;empty&quot; brackets. # The same thing happens with the &quot;FS&quot; field separator in awk. echo exit (Many thanks, Stéphane Chazelas, for clarification and above examples.) See also Example 16-41, Example 11-8, and Example 19-14 for instructive examples of using $IFS. $IGNOREEOF Ignore EOF: how many end-of-files (control-D) the shell will ignore before logging out. $LC_COLLATE Often set in the .bashrc or /etc/profile files, this variable controls collation order in filename expansion and pattern matching. If mishandled, LC_COLLATE can cause unexpected results in filename globbing. Note As of version 2.05 of Bash, filename globbing no longer distinguishes between lowercase and uppercase letters in a character range between brackets. For example, ls [A-M]* would match both File1.txt and file1.txt. To revert to the customary behavior of bracket matching, set LC_COLLATE to C by an export LC_COLLATE=C in /etc/profile and/or ~/.bashrc. $LC_CTYPE This internal variable controls character interpretation in globbing and pattern matching. $LINENO This variable is the line number of the shell script in which this variable appears. It has significance only within the script in which it appears, and is chiefly useful for debugging purposes. # *** BEGIN DEBUG BLOCK *** last_cmd_arg=$_ # Save it. echo &quot;At line number $LINENO, variable \&quot;v1\&quot; = $v1&quot; echo &quot;Last command argument processed = $last_cmd_arg&quot; # *** END DEBUG BLOCK *** $MACHTYPE machine type Identifies the system hardware. bash$ echo $MACHTYPE i686 $OLDPWD Old working directory (&quot;OLD-Print-Working-Directory&quot;, previous directory you were in). $OSTYPE operating system type bash$ echo $OSTYPE linux $PATH Path to binaries, usually /usr/bin/, /usr/X11R6/bin/, /usr/local/bin, etc. When given a command, the shell automatically does a hash table search on the directories listed in the path for the executable. The path is stored in the environmental variable, $PATH, a list of directories, separated by colons. Normally, the system stores the $PATH definition in /etc/profile and/or ~/.bashrc (see Appendix H). bash$ echo $PATH /bin:/usr/bin:/usr/local/bin:/usr/X11R6/bin:/sbin:/usr/sbin PATH=${PATH}:/opt/bin appends the /opt/bin directory to the current path. In a script, it may be expedient to temporarily add a directory to the path in this way. When the script exits, this restores the original $PATH (a child process, such as a script, may not change the environment of the parent process, the shell). Note The current &quot;working directory&quot;, ./, is usually omitted from the $PATH as a security measure. $PIPESTATUS Array variable holding exit status(es) of last executed foreground pipe. bash$ echo $PIPESTATUS 0 bash$ ls -al | bogus_command bash: bogus_command: command not found bash$ echo ${PIPESTATUS[1]} 127 bash$ ls -al | bogus_command bash: bogus_command: command not found bash$ echo $? 127 The members of the $PIPESTATUS array hold the exit status of each respective command executed in a pipe. $PIPESTATUS[0] holds the exit status of the first command in the pipe, $PIPESTATUS[1] the exit status of the second command, and so on. Caution The $PIPESTATUS variable may contain an erroneous 0 value in a login shell (in releases prior to 3.0 of Bash). tcsh% bash bash$ who | grep nobody | sort bash$ echo ${PIPESTATUS[*]} 0 The above lines contained in a script would produce the expected 0 1 0 output. Thank you, Wayne Pollock for pointing this out and supplying the above example. Note The $PIPESTATUS variable gives unexpected results in some contexts. bash$ echo $BASH_VERSION 3.00.14(1)-release bash$ $ ls | bogus_command | wc bash: bogus_command: command not found 0 0 0 bash$ echo ${PIPESTATUS[@]} 141 127 0 Chet Ramey attributes the above output to the behavior of ls. If ls writes to a pipe whose output is not read, then SIGPIPE kills it, and its exit status is 141. Otherwise its exit status is 0, as expected. This likewise is the case for tr. Note $PIPESTATUS is a &quot;volatile&quot; variable. It needs to be captured immediately after the pipe in question, before any other command intervenes. bash$ $ ls | bogus_command | wc bash: bogus_command: command not found 0 0 0 bash$ echo ${PIPESTATUS[@]} 0 127 0 bash$ echo ${PIPESTATUS[@]} 0 Note The pipefail option may be useful in cases where $PIPESTATUS does not give the desired information. $PPID The $PPID of a process is the process ID (pid) of its parent process. [42] Compare this with the pidof command. $PROMPT_COMMAND A variable holding a command to be executed just before the primary prompt, $PS1 is to be displayed. $PS1 This is the main prompt, seen at the command-line. $PS2 The secondary prompt, seen when additional input is expected. It displays as &quot;&gt;&quot;. $PS3 The tertiary prompt, displayed in a select loop (see Example 11-30). $PS4 The quartenary prompt, shown at the beginning of each line of output when invoking a script with the -x [verbose trace] option. It displays as &quot;+&quot;. As a debugging aid, it may be useful to embed diagnostic information in $PS4. P4='$(read time junk &lt; /proc/$$/schedstat; echo &quot;@@@ $time @@@ &quot; )' # Per suggestion by Erik Brandsberg. set -x # Various commands follow ... $PWD Working directory (directory you are in at the time) This is the analog to the pwd builtin command. #!/bin/bash E_WRONG_DIRECTORY=85 clear # Clear the screen. TargetDirectory=/home/bozo/projects/GreatAmericanNovel cd $TargetDirectory echo &quot;Deleting stale files in $TargetDirectory.&quot; if [ &quot;$PWD&quot; != &quot;$TargetDirectory&quot; ] then # Keep from wiping out wrong directory by accident. echo &quot;Wrong directory!&quot; echo &quot;In $PWD, rather than $TargetDirectory!&quot; echo &quot;Bailing out!&quot; exit $E_WRONG_DIRECTORY fi rm -rf * rm .[A-Za-z0-9]* # Delete dotfiles. # rm -f .[^.]* ..?* to remove filenames beginning with multiple dots. # (shopt -s dotglob; rm -f *) will also work. # Thanks, S.C. for pointing this out. # A filename (`basename`) may contain all characters in the 0 - 255 range, #+ except &quot;/&quot;. # Deleting files beginning with weird characters, such as - #+ is left as an exercise. (Hint: rm ./-weirdname or rm -- -weirdname) result=$? # Result of delete operations. If successful = 0. echo ls -al # Any files left? echo &quot;Done.&quot; echo &quot;Old files deleted in $TargetDirectory.&quot; echo # Various other operations here, as necessary. exit $result $REPLY The default value when a variable is not supplied to read. Also applicable to select menus, but only supplies the item number of the variable chosen, not the value of the variable itself. #!/bin/bash # reply.sh # REPLY is the default value for a 'read' command. echo echo -n &quot;What is your favorite vegetable? &quot; read echo &quot;Your favorite vegetable is $REPLY.&quot; # REPLY holds the value of last &quot;read&quot; if and only if #+ no variable supplied. echo echo -n &quot;What is your favorite fruit? &quot; read fruit echo &quot;Your favorite fruit is $fruit.&quot; echo &quot;but...&quot; echo &quot;Value of \$REPLY is still $REPLY.&quot; # $REPLY is still set to its previous value because #+ the variable $fruit absorbed the new &quot;read&quot; value. echo exit 0 $SECONDS The number of seconds the script has been running. #!/bin/bash TIME_LIMIT=10 INTERVAL=1 echo echo &quot;Hit Control-C to exit before $TIME_LIMIT seconds.&quot; echo while [ &quot;$SECONDS&quot; -le &quot;$TIME_LIMIT&quot; ] do # $SECONDS is an internal shell variable. if [ &quot;$SECONDS&quot; -eq 1 ] then units=second else units=seconds fi echo &quot;This script has been running $SECONDS $units.&quot; # On a slow or overburdened machine, the script may skip a count #+ every once in a while. sleep $INTERVAL done echo -e &quot;\a&quot; # Beep! exit 0 $SHELLOPTS The list of enabled shell options, a readonly variable. bash$ echo $SHELLOPTS braceexpand:hashall:histexpand:monitor:history:interactive-comments:emacs $SHLVL Shell level, how deeply Bash is nested. [43] If, at the command-line, $SHLVL is 1, then in a script it will increment to 2. Note This variable is not affected by subshells. Use $BASH_SUBSHELL when you need an indication of subshell nesting. $TMOUT If the $TMOUT environmental variable is set to a non-zero value time, then the shell prompt will time out after $time seconds. This will cause a logout. As of version 2.05b of Bash, it is now possible to use $TMOUT in a script in combination with read. # Works in scripts for Bash, versions 2.05b and later. TMOUT=3 # Prompt times out at three seconds. echo &quot;What is your favorite song?&quot; echo &quot;Quickly now, you only have $TMOUT seconds to answer!&quot; read song if [ -z &quot;$song&quot; ] then song=&quot;(no answer)&quot; # Default response. fi echo &quot;Your favorite song is $song.&quot; There are other, more complex, ways of implementing timed input in a script. One alternative is to set up a timing loop to signal the script when it times out. This also requires a signal handling routine to trap (see Example 32-5) the interrupt generated by the timing loop (whew!). Example 9-2. Timed Input #!/bin/bash # timed-input.sh # TMOUT=3 Also works, as of newer versions of Bash. TIMER_INTERRUPT=14 TIMELIMIT=3 # Three seconds in this instance. # May be set to different value. PrintAnswer() { if [ &quot;$answer&quot; = TIMEOUT ] then echo $answer else # Don't want to mix up the two instances. echo &quot;Your favorite veggie is $answer&quot; kill $! # Kills no-longer-needed TimerOn function #+ running in background. # $! is PID of last job running in background. fi } TimerOn() { sleep $TIMELIMIT &amp;&amp; kill -s 14 $$ &amp; # Waits 3 seconds, then sends sigalarm to script. } Int14Vector() { answer=&quot;TIMEOUT&quot; PrintAnswer exit $TIMER_INTERRUPT } trap Int14Vector $TIMER_INTERRUPT # Timer interrupt (14) subverted for our purposes. echo &quot;What is your favorite vegetable &quot; TimerOn read answer PrintAnswer # Admittedly, this is a kludgy implementation of timed input. # However, the &quot;-t&quot; option to &quot;read&quot; simplifies this task. # See the &quot;t-out.sh&quot; script. # However, what about timing not just single user input, #+ but an entire script? # If you need something really elegant ... #+ consider writing the application in C or C++, #+ using appropriate library functions, such as 'alarm' and 'setitimer.' exit 0 An alternative is using stty. Example 9-3. Once more, timed input #!/bin/bash # timeout.sh # Written by Stephane Chazelas, #+ and modified by the document author. INTERVAL=5 # timeout interval timedout_read() { timeout=$1 varname=$2 old_tty_settings=`stty -g` stty -icanon min 0 time ${timeout}0 eval read $varname # or just read $varname stty &quot;$old_tty_settings&quot; # See man page for &quot;stty.&quot; } echo; echo -n &quot;What's your name? Quick! &quot; timedout_read $INTERVAL your_name # This may not work on every terminal type. # The maximum timeout depends on the terminal. #+ (it is often 25.5 seconds). echo if [ ! -z &quot;$your_name&quot; ] # If name input before timeout ... then echo &quot;Your name is $your_name.&quot; else echo &quot;Timed out.&quot; fi echo # The behavior of this script differs somewhat from &quot;timed-input.sh.&quot; # At each keystroke, the counter resets. exit 0 Perhaps the simplest method is using the -t option to read. Example 9-4. Timed read #!/bin/bash # t-out.sh [time-out] # Inspired by a suggestion from &quot;syngin seven&quot; (thanks). TIMELIMIT=4 # 4 seconds read -t $TIMELIMIT variable &lt;&amp;1 # ^^^ # In this instance, &quot;&lt;&amp;1&quot; is needed for Bash 1.x and 2.x, # but unnecessary for Bash 3+. echo if [ -z &quot;$variable&quot; ] # Is null? then echo &quot;Timed out, variable still unset.&quot; else echo &quot;variable = $variable&quot; fi exit 0 $UID User ID number Current user's user identification number, as recorded in /etc/passwd This is the current user's real id, even if she has temporarily assumed another identity through su. $UID is a readonly variable, not subject to change from the command line or within a script, and is the counterpart to the id builtin. Example 9-5. Am I root? #!/bin/bash # am-i-root.sh: Am I root or not? ROOT_UID=0 # Root has $UID 0. if [ &quot;$UID&quot; -eq &quot;$ROOT_UID&quot; ] # Will the real &quot;root&quot; please stand up? then echo &quot;You are root.&quot; else echo &quot;You are just an ordinary user (but mom loves you just the same).&quot; fi exit 0 # ============================================================= # # Code below will not execute, because the script already exited. # An alternate method of getting to the root of matters: ROOTUSER_NAME=root username=`id -nu` # Or... username=`whoami` if [ &quot;$username&quot; = &quot;$ROOTUSER_NAME&quot; ] then echo &quot;Rooty, toot, toot. You are root.&quot; else echo &quot;You are just a regular fella.&quot; fi See also Example 2-3. Note The variables $ENV, $LOGNAME, $MAIL, $TERM, $USER, and $USERNAME are not Bash builtins. These are, however, often set as environmental variables in one of the Bash or login startup files. $SHELL, the name of the user's login shell, may be set from /etc/passwd or in an &quot;init&quot; script, and it is likewise not a Bash builtin. tcsh% echo $LOGNAME bozo tcsh% echo $SHELL /bin/tcsh tcsh% echo $TERM rxvt bash$ echo $LOGNAME bozo bash$ echo $SHELL /bin/tcsh bash$ echo $TERM rxvt Positional Parameters $0, $1, $2, etc. Positional parameters, passed from command line to script, passed to a function, or set to a variable (see Example 4-5 and Example 15-16) $# Number of command-line arguments [44] or positional parameters (see Example 36-2) $* All of the positional parameters, seen as a single word Note &quot;$*&quot; must be quoted. $@ Same as $*, but each parameter is a quoted string, that is, the parameters are passed on intact, without interpretation or expansion. This means, among other things, that each parameter in the argument list is seen as a separate word. Note Of course, &quot;$@&quot; should be quoted. Example 9-6. arglist: Listing arguments with $* and $@ #!/bin/bash # arglist.sh # Invoke this script with several arguments, such as &quot;one two three&quot; ... E_BADARGS=85 if [ ! -n &quot;$1&quot; ] then echo &quot;Usage: `basename $0` argument1 argument2 etc.&quot; exit $E_BADARGS fi echo index=1 # Initialize count. echo &quot;Listing args with \&quot;\$*\&quot;:&quot; for arg in &quot;$*&quot; # Doesn't work properly if &quot;$*&quot; isn't quoted. do echo &quot;Arg #$index = $arg&quot; let &quot;index+=1&quot; done # $* sees all arguments as single word. echo &quot;Entire arg list seen as single word.&quot; echo index=1 # Reset count. # What happens if you forget to do this? echo &quot;Listing args with \&quot;\$@\&quot;:&quot; for arg in &quot;$@&quot; do echo &quot;Arg #$index = $arg&quot; let &quot;index+=1&quot; done # $@ sees arguments as separate words. echo &quot;Arg list seen as separate words.&quot; echo index=1 # Reset count. echo &quot;Listing args with \$* (unquoted):&quot; for arg in $* do echo &quot;Arg #$index = $arg&quot; let &quot;index+=1&quot; done # Unquoted $* sees arguments as separate words. echo &quot;Arg list seen as separate words.&quot; exit 0 Following a shift, the $@ holds the remaining command-line parameters, lacking the previous $1, which was lost. #!/bin/bash # Invoke with ./scriptname 1 2 3 4 5 echo &quot;$@&quot; # 1 2 3 4 5 shift echo &quot;$@&quot; # 2 3 4 5 shift echo &quot;$@&quot; # 3 4 5 # Each &quot;shift&quot; loses parameter $1. # &quot;$@&quot; then contains the remaining parameters. The $@ special parameter finds use as a tool for filtering input into shell scripts. The cat &quot;$@&quot; construction accepts input to a script either from stdin or from files given as parameters to the script. See Example 16-24 and Example 16-25. Caution The $* and $@ parameters sometimes display inconsistent and puzzling behavior, depending on the setting of $IFS. Example 9-7. Inconsistent $* and $@ behavior #!/bin/bash # Erratic behavior of the &quot;$*&quot; and &quot;$@&quot; internal Bash variables, #+ depending on whether or not they are quoted. # Demonstrates inconsistent handling of word splitting and linefeeds. set -- &quot;First one&quot; &quot;second&quot; &quot;third:one&quot; &quot;&quot; &quot;Fifth: :one&quot; # Setting the script arguments, $1, $2, $3, etc. echo echo 'IFS unchanged, using &quot;$*&quot;' c=0 for i in &quot;$*&quot; # quoted do echo &quot;$((c+=1)): [$i]&quot; # This line remains the same in every instance. # Echo args. done echo --- echo 'IFS unchanged, using $*' c=0 for i in $* # unquoted do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS unchanged, using &quot;$@&quot;' c=0 for i in &quot;$@&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS unchanged, using $@' c=0 for i in $@ do echo &quot;$((c+=1)): [$i]&quot; done echo --- IFS=: echo 'IFS=&quot;:&quot;, using &quot;$*&quot;' c=0 for i in &quot;$*&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using $*' c=0 for i in $* do echo &quot;$((c+=1)): [$i]&quot; done echo --- var=$* echo 'IFS=&quot;:&quot;, using &quot;$var&quot; (var=$*)' c=0 for i in &quot;$var&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using $var (var=$*)' c=0 for i in $var do echo &quot;$((c+=1)): [$i]&quot; done echo --- var=&quot;$*&quot; echo 'IFS=&quot;:&quot;, using $var (var=&quot;$*&quot;)' c=0 for i in $var do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using &quot;$var&quot; (var=&quot;$*&quot;)' c=0 for i in &quot;$var&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using &quot;$@&quot;' c=0 for i in &quot;$@&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using $@' c=0 for i in $@ do echo &quot;$((c+=1)): [$i]&quot; done echo --- var=$@ echo 'IFS=&quot;:&quot;, using $var (var=$@)' c=0 for i in $var do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using &quot;$var&quot; (var=$@)' c=0 for i in &quot;$var&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- var=&quot;$@&quot; echo 'IFS=&quot;:&quot;, using &quot;$var&quot; (var=&quot;$@&quot;)' c=0 for i in &quot;$var&quot; do echo &quot;$((c+=1)): [$i]&quot; done echo --- echo 'IFS=&quot;:&quot;, using $var (var=&quot;$@&quot;)' c=0 for i in $var do echo &quot;$((c+=1)): [$i]&quot; done echo # Try this script with ksh or zsh -y. exit 0 # This example script written by Stephane Chazelas, #+ and slightly modified by the document author. Note The $@ and $* parameters differ only when between double quotes. Example 9-8. $* and $@ when $IFS is empty #!/bin/bash # If $IFS set, but empty, #+ then &quot;$*&quot; and &quot;$@&quot; do not echo positional params as expected. mecho () # Echo positional parameters. { echo &quot;$1,$2,$3&quot;; } IFS=&quot;&quot; # Set, but empty. set a b c # Positional parameters. mecho &quot;$*&quot; # abc,, # ^^ mecho $* # a,b,c mecho $@ # a,b,c mecho &quot;$@&quot; # a,b,c # The behavior of $* and $@ when $IFS is empty depends #+ on which Bash or sh version being run. # It is therefore inadvisable to depend on this &quot;feature&quot; in a script. # Thanks, Stephane Chazelas. exit Other Special Parameters $- Flags passed to script (using set). See Example 15-16. Caution This was originally a ksh construct adopted into Bash, and unfortunately it does not seem to work reliably in Bash scripts. One possible use for it is to have a script self-test whether it is interactive. $! PID (process ID) of last job run in background LOG=$0.log COMMAND1=&quot;sleep 100&quot; echo &quot;Logging PIDs background commands for script: $0&quot; &gt;&gt; &quot;$LOG&quot; # So they can be monitored, and killed as necessary. echo &gt;&gt; &quot;$LOG&quot; # Logging commands. echo -n &quot;PID of \&quot;$COMMAND1\&quot;: &quot; &gt;&gt; &quot;$LOG&quot; ${COMMAND1} &amp; echo $! &gt;&gt; &quot;$LOG&quot; # PID of &quot;sleep 100&quot;: 1506 # Thank you, Jacques Lederer, for suggesting this. Using $! for job control: possibly_hanging_job &amp; { sleep ${TIMEOUT}; eval 'kill -9 $!' &amp;&gt; /dev/null; } # Forces completion of an ill-behaved program. # Useful, for example, in init scripts. # Thank you, Sylvain Fourmanoit, for this creative use of the &quot;!&quot; variable. Or, alternately: # This example by Matthew Sage. # Used with permission. TIMEOUT=30 # Timeout value in seconds count=0 possibly_hanging_job &amp; { while ((count &lt; TIMEOUT )); do eval '[ ! -d &quot;/proc/$!&quot; ] &amp;&amp; ((count = TIMEOUT))' # /proc is where information about running processes is found. # &quot;-d&quot; tests whether it exists (whether directory exists). # So, we're waiting for the job in question to show up. ((count++)) sleep 1 done eval '[ -d &quot;/proc/$!&quot; ] &amp;&amp; kill -15 $!' # If the hanging job is running, kill it. } # -------------------------------------------------------------- # # However, this may not not work as specified if another process #+ begins to run after the &quot;hanging_job&quot; . . . # In such a case, the wrong job may be killed. # Ariel Meragelman suggests the following fix. TIMEOUT=30 count=0 # Timeout value in seconds possibly_hanging_job &amp; { while ((count &lt; TIMEOUT )); do eval '[ ! -d &quot;/proc/$lastjob&quot; ] &amp;&amp; ((count = TIMEOUT))' lastjob=$! ((count++)) sleep 1 done eval '[ -d &quot;/proc/$lastjob&quot; ] &amp;&amp; kill -15 $lastjob' } exit $_ Special variable set to final argument of previous command executed. Example 9-9. Underscore variable #!/bin/bash echo $_ # /bin/bash # Just called /bin/bash to run the script. # Note that this will vary according to #+ how the script is invoked. du &gt;/dev/null # So no output from command. echo $_ # du ls -al &gt;/dev/null # So no output from command. echo $_ # -al (last argument) : echo $_ # : $? Exit status of a command, function, or the script itself (see Example 24-7) $$ Process ID (PID) of the script itself. [45] The $$ variable often finds use in scripts to construct &quot;unique&quot; temp file names (see Example 32-6, Example 16-31, and Example 15-27). This is usually simpler than invoking mktemp. 9.2. Typing variables: declare or typeset The declare or typeset builtins, which are exact synonyms, permit modifying the properties of variables. This is a very weak form of the typing [46] available in certain programming languages. The declare command is specific to version 2 or later of Bash. The typeset command also works in ksh scripts. declare/typeset options -r readonly (declare -r var1 works the same as readonly var1) This is the rough equivalent of the C const type qualifier. An attempt to change the value of a readonly variable fails with an error message. declare -r var1=1 echo &quot;var1 = $var1&quot; # var1 = 1 (( var1++ )) # x.sh: line 4: var1: readonly variable -i integer declare -i number # The script will treat subsequent occurrences of &quot;number&quot; as an integer. number=3 echo &quot;Number = $number&quot; # Number = 3 number=three echo &quot;Number = $number&quot; # Number = 0 # Tries to evaluate the string &quot;three&quot; as an integer. Certain arithmetic operations are permitted for declared integer variables without the need for expr or let. n=6/3 echo &quot;n = $n&quot; # n = 6/3 declare -i n n=6/3 echo &quot;n = $n&quot; # n = 2 -a array declare -a indices The variable indices will be treated as an array. -f function(s) declare -f A declare -f line with no arguments in a script causes a listing of all the functions previously defined in that script. declare -f function_name A declare -f function_name in a script lists just the function named. -x export declare -x var3 This declares a variable as available for exporting outside the environment of the script itself. -x var=$value declare -x var3=373 The declare command permits assigning a value to a variable in the same statement as setting its properties. Example 9-10. Using declare to type variables #!/bin/bash func1 () { echo This is a function. } declare -f # Lists the function above. echo declare -i var1 # var1 is an integer. var1=2367 echo &quot;var1 declared as $var1&quot; var1=var1+1 # Integer declaration eliminates the need for 'let'. echo &quot;var1 incremented by 1 is $var1.&quot; # Attempt to change variable declared as integer. echo &quot;Attempting to change var1 to floating point value, 2367.1.&quot; var1=2367.1 # Results in error message, with no change to variable. echo &quot;var1 is still $var1&quot; echo declare -r var2=13.36 # 'declare' permits setting a variable property #+ and simultaneously assigning it a value. echo &quot;var2 declared as $var2&quot; # Attempt to change readonly variable. var2=13.37 # Generates error message, and exit from script. echo &quot;var2 is still $var2&quot; # This line will not execute. exit 0 # Script will not exit here. Caution Using the declare builtin restricts the scope of a variable. foo () { FOO=&quot;bar&quot; } bar () { foo echo $FOO } bar # Prints bar. However . . . foo (){ declare FOO=&quot;bar&quot; } bar () { foo echo $FOO } bar # Prints nothing. # Thank you, Michael Iatrou, for pointing this out. 9.2.1. Another use for declare The declare command can be helpful in identifying variables, environmental or otherwise. This can be especially useful with arrays. bash$ declare | grep HOME HOME=/home/bozo bash$ zzy=68 bash$ declare | grep zzy zzy=68 bash$ Colors=([0]=&quot;purple&quot; [1]=&quot;reddish-orange&quot; [2]=&quot;light green&quot;) bash$ echo ${Colors[@]} purple reddish-orange light green bash$ declare | grep Colors Colors=([0]=&quot;purple&quot; [1]=&quot;reddish-orange&quot; [2]=&quot;light green&quot;) 9.3. $RANDOM: generate random integer Anyone who attempts to generate random numbers by deterministic means is, of course, living in a state of sin. --John von Neumann $RANDOM is an internal Bash function (not a constant) that returns a pseudorandom [47] integer in the range 0 - 32767. It should not be used to generate an encryption key. Example 9-11. Generating random numbers #!/bin/bash # $RANDOM returns a different random integer at each invocation. # Nominal range: 0 - 32767 (signed 16-bit integer). MAXCOUNT=10 count=1 echo echo &quot;$MAXCOUNT random numbers:&quot; echo &quot;-----------------&quot; while [ &quot;$count&quot; -le $MAXCOUNT ] # Generate 10 ($MAXCOUNT) random integers. do number=$RANDOM echo $number let &quot;count += 1&quot; # Increment count. done echo &quot;-----------------&quot; # If you need a random int within a certain range, use the 'modulo' operator. # This returns the remainder of a division operation. RANGE=500 echo number=$RANDOM let &quot;number %= $RANGE&quot; # ^^ echo &quot;Random number less than $RANGE --- $number&quot; echo # If you need a random integer greater than a lower bound, #+ then set up a test to discard all numbers below that. FLOOR=200 number=0 #initialize while [ &quot;$number&quot; -le $FLOOR ] do number=$RANDOM done echo &quot;Random number greater than $FLOOR --- $number&quot; echo # Let's examine a simple alternative to the above loop, namely # let &quot;number = $RANDOM + $FLOOR&quot; # That would eliminate the while-loop and run faster. # But, there might be a problem with that. What is it? # Combine above two techniques to retrieve random number between two limits. number=0 #initialize while [ &quot;$number&quot; -le $FLOOR ] do number=$RANDOM let &quot;number %= $RANGE&quot; # Scales $number down within $RANGE. done echo &quot;Random number between $FLOOR and $RANGE --- $number&quot; echo # Generate binary choice, that is, &quot;true&quot; or &quot;false&quot; value. BINARY=2 T=1 number=$RANDOM let &quot;number %= $BINARY&quot; # Note that let &quot;number &gt;&gt;= 14&quot; gives a better random distribution #+ (right shifts out everything except last binary digit). if [ &quot;$number&quot; -eq $T ] then echo &quot;TRUE&quot; else echo &quot;FALSE&quot; fi echo # Generate a toss of the dice. SPOTS=6 # Modulo 6 gives range 0 - 5. # Incrementing by 1 gives desired range of 1 - 6. # Thanks, Paulo Marcel Coelho Aragao, for the simplification. die1=0 die2=0 # Would it be better to just set SPOTS=7 and not add 1? Why or why not? # Tosses each die separately, and so gives correct odds. let &quot;die1 = $RANDOM % $SPOTS +1&quot; # Roll first one. let &quot;die2 = $RANDOM % $SPOTS +1&quot; # Roll second one. # Which arithmetic operation, above, has greater precedence -- #+ modulo (%) or addition (+)? let &quot;throw = $die1 + $die2&quot; echo &quot;Throw of the dice = $throw&quot; echo exit 0 Example 9-12. Picking a random card from a deck #!/bin/bash # pick-card.sh # This is an example of choosing random elements of an array. # Pick a card, any card. Suites=&quot;Clubs Diamonds Hearts Spades&quot; Denominations=&quot;2 3 4 5 6 7 8 9 10 Jack Queen King Ace&quot; # Note variables spread over multiple lines. suite=($Suites) # Read into array variable. denomination=($Denominations) num_suites=${#suite[*]} # Count how many elements. num_denominations=${#denomination[*]} echo -n &quot;${denomination[$((RANDOM%num_denominations))]} of &quot; echo ${suite[$((RANDOM%num_suites))]} # $bozo sh pick-cards.sh # Jack of Clubs # Thank you, &quot;jipe,&quot; for pointing out this use of $RANDOM. exit 0 Example 9-13. Brownian Motion Simulation #!/bin/bash # brownian.sh # Author: Mendel Cooper # Reldate: 10/26/07 # License: GPL3 # ---------------------------------------------------------------- # This script models Brownian motion: #+ the random wanderings of tiny particles in a fluid, #+ as they are buffeted by random currents and collisions. #+ This is colloquially known as the &quot;Drunkard's Walk.&quot; # It can also be considered as a stripped-down simulation of a #+ Galton Board, a slanted board with a pattern of pegs, #+ down which rolls a succession of marbles, one at a time. #+ At the bottom is a row of slots or catch basins in which #+ the marbles come to rest at the end of their journey. # Think of it as a kind of bare-bones Pachinko game. # As you see by running the script, #+ most of the marbles cluster around the center slot. #+ This is consistent with the expected binomial distribution. # As a Galton Board simulation, the script #+ disregards such parameters as #+ board tilt-angle, rolling friction of the marbles, #+ angles of impact, and elasticity of the pegs. # To what extent does this affect the accuracy of the simulation? # ---------------------------------------------------------------- PASSES=500 # Number of particle interactions / marbles. ROWS=10 # Number of &quot;collisions&quot; (or horiz. peg rows). RANGE=3 # 0 - 2 output range from $RANDOM. POS=0 # Left/right position. RANDOM=$$ # Seeds the random number generator from PID #+ of script. declare -a Slots # Array holding cumulative results of passes. NUMSLOTS=21 # Number of slots at bottom of board. Initialize_Slots () { # Zero out all elements of the array. for i in $( seq $NUMSLOTS ) do Slots[$i]=0 done echo # Blank line at beginning of run. } Show_Slots () { echo; echo echo -n &quot; &quot; for i in $( seq $NUMSLOTS ) # Pretty-print array elements. do printf &quot;%3d&quot; ${Slots[$i]} # Allot three spaces per result. done echo # Row of slots: echo &quot; |__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|&quot; echo &quot; ||&quot; echo # Note that if the count within any particular slot exceeds 99, #+ it messes up the display. # Running only(!) 500 passes usually avoids this. } Move () { # Move one unit right / left, or stay put. Move=$RANDOM # How random is $RANDOM? Well, let's see ... let &quot;Move %= RANGE&quot; # Normalize into range of 0 - 2. case &quot;$Move&quot; in 0 ) ;; # Do nothing, i.e., stay in place. 1 ) ((POS--));; # Left. 2 ) ((POS++));; # Right. * ) echo -n &quot;Error &quot;;; # Anomaly! (Should never occur.) esac } Play () { # Single pass (inner loop). i=0 while [ &quot;$i&quot; -lt &quot;$ROWS&quot; ] # One event per row. do Move ((i++)); done SHIFT=11 # Why 11, and not 10? let &quot;POS += $SHIFT&quot; # Shift &quot;zero position&quot; to center. (( Slots[$POS]++ )) # DEBUG: echo $POS # echo -n &quot;$POS &quot; } Run () { # Outer loop. p=0 while [ &quot;$p&quot; -lt &quot;$PASSES&quot; ] do Play (( p++ )) POS=0 # Reset to zero. Why? done } # -------------- # main () Initialize_Slots Run Show_Slots # -------------- exit $? # Exercises: # --------- # 1) Show the results in a vertical bar graph, or as an alternative, #+ a scattergram. # 2) Alter the script to use /dev/urandom instead of $RANDOM. # Will this make the results more random? # 3) Provide some sort of &quot;animation&quot; or graphic output # for each marble played. Jipe points out a set of techniques for generating random numbers within a range. # Generate random number between 6 and 30. rnumber=$((RANDOM%25+6)) # Generate random number in the same 6 - 30 range, #+ but the number must be evenly divisible by 3. rnumber=$(((RANDOM%30/3+1)*3)) # Note that this will not work all the time. # It fails if $RANDOM%30 returns 0. # Frank Wang suggests the following alternative: rnumber=$(( RANDOM%27/3*3+6 )) Bill Gradwohl came up with an improved formula that works for positive numbers. rnumber=$(((RANDOM%(max-min+divisibleBy))/divisibleBy*divisibleBy+min)) Here Bill presents a versatile function that returns a random number between two specified values. Example 9-14. Random between values #!/bin/bash # random-between.sh # Random number between two specified values. # Script by Bill Gradwohl, with minor modifications by the document author. # Corrections in lines 187 and 189 by Anthony Le Clezio. # Used with permission. randomBetween() { # Generates a positive or negative random number #+ between $min and $max #+ and divisible by $divisibleBy. # Gives a &quot;reasonably random&quot; distribution of return values. # # Bill Gradwohl - Oct 1, 2003 syntax() { # Function embedded within function. echo echo &quot;Syntax: randomBetween [min] [max] [multiple]&quot; echo echo -n &quot;Expects up to 3 passed parameters, &quot; echo &quot;but all are completely optional.&quot; echo &quot;min is the minimum value&quot; echo &quot;max is the maximum value&quot; echo -n &quot;multiple specifies that the answer must be &quot; echo &quot;a multiple of this value.&quot; echo &quot; i.e. answer must be evenly divisible by this number.&quot; echo echo &quot;If any value is missing, defaults area supplied as: 0 32767 1&quot; echo -n &quot;Successful completion returns 0, &quot; echo &quot;unsuccessful completion returns&quot; echo &quot;function syntax and 1.&quot; echo -n &quot;The answer is returned in the global variable &quot; echo &quot;randomBetweenAnswer&quot; echo -n &quot;Negative values for any passed parameter are &quot; echo &quot;handled correctly.&quot; } local min=${1:-0} local max=${2:-32767} local divisibleBy=${3:-1} # Default values assigned, in case parameters not passed to function. local x local spread # Let's make sure the divisibleBy value is positive. [ ${divisibleBy} -lt 0 ] &amp;&amp; divisibleBy=$((0-divisibleBy)) # Sanity check. if [ $# -gt 3 -o ${divisibleBy} -eq 0 -o ${min} -eq ${max} ]; then syntax return 1 fi # See if the min and max are reversed. if [ ${min} -gt ${max} ]; then # Swap them. x=${min} min=${max} max=${x} fi # If min is itself not evenly divisible by $divisibleBy, #+ then fix the min to be within range. if [ $((min/divisibleBy*divisibleBy)) -ne ${min} ]; then if [ ${min} -lt 0 ]; then min=$((min/divisibleBy*divisibleBy)) else min=$((((min/divisibleBy)+1)*divisibleBy)) fi fi # If max is itself not evenly divisible by $divisibleBy, #+ then fix the max to be within range. if [ $((max/divisibleBy*divisibleBy)) -ne ${max} ]; then if [ ${max} -lt 0 ]; then max=$((((max/divisibleBy)-1)*divisibleBy)) else max=$((max/divisibleBy*divisibleBy)) fi fi # --------------------------------------------------------------------- # Now, to do the real work. # Note that to get a proper distribution for the end points, #+ the range of random values has to be allowed to go between #+ 0 and abs(max-min)+divisibleBy, not just abs(max-min)+1. # The slight increase will produce the proper distribution for the #+ end points. # Changing the formula to use abs(max-min)+1 will still produce #+ correct answers, but the randomness of those answers is faulty in #+ that the number of times the end points ($min and $max) are returned #+ is considerably lower than when the correct formula is used. # --------------------------------------------------------------------- spread=$((max-min)) # Omair Eshkenazi points out that this test is unnecessary, #+ since max and min have already been switched around. [ ${spread} -lt 0 ] &amp;&amp; spread=$((0-spread)) let spread+=divisibleBy randomBetweenAnswer=$(((RANDOM%spread)/divisibleBy*divisibleBy+min)) return 0 # However, Paulo Marcel Coelho Aragao points out that #+ when $max and $min are not divisible by $divisibleBy, #+ the formula fails. # # He suggests instead the following formula: # rnumber = $(((RANDOM%(max-min+1)+min)/divisibleBy*divisibleBy)) } # Let's test the function. min=-14 max=20 divisibleBy=3 # Generate an array of expected answers and check to make sure we get #+ at least one of each answer if we loop long enough. declare -a answer minimum=${min} maximum=${max} if [ $((minimum/divisibleBy*divisibleBy)) -ne ${minimum} ]; then if [ ${minimum} -lt 0 ]; then minimum=$((minimum/divisibleBy*divisibleBy)) else minimum=$((((minimum/divisibleBy)+1)*divisibleBy)) fi fi # If max is itself not evenly divisible by $divisibleBy, #+ then fix the max to be within range. if [ $((maximum/divisibleBy*divisibleBy)) -ne ${maximum} ]; then if [ ${maximum} -lt 0 ]; then maximum=$((((maximum/divisibleBy)-1)*divisibleBy)) else maximum=$((maximum/divisibleBy*divisibleBy)) fi fi # We need to generate only positive array subscripts, #+ so we need a displacement that that will guarantee #+ positive results. disp=$((0-minimum)) for ((i=${minimum}; i&lt;=${maximum}; i+=divisibleBy)); do answer[i+disp]=0 done # Now loop a large number of times to see what we get. loopIt=1000 # The script author suggests 100000, #+ but that takes a good long while. for ((i=0; i&lt;${loopIt}; ++i)); do # Note that we are specifying min and max in reversed order here to #+ make the function correct for this case. randomBetween ${max} ${min} ${divisibleBy} # Report an error if an answer is unexpected. [ ${randomBetweenAnswer} -lt ${min} -o ${randomBetweenAnswer} -gt ${max} ] \ &amp;&amp; echo MIN or MAX error - ${randomBetweenAnswer}! [ $((randomBetweenAnswer%${divisibleBy})) -ne 0 ] \ &amp;&amp; echo DIVISIBLE BY error - ${randomBetweenAnswer}! # Store the answer away statistically. answer[randomBetweenAnswer+disp]=$((answer[randomBetweenAnswer+disp]+1)) done # Let's check the results for ((i=${minimum}; i&lt;=${maximum}; i+=divisibleBy)); do [ ${answer[i+disp]} -eq 0 ] \ &amp;&amp; echo &quot;We never got an answer of $i.&quot; \ || echo &quot;${i} occurred ${answer[i+disp]} times.&quot; done exit 0 Just how random is $RANDOM? The best way to test this is to write a script that tracks the distribution of &quot;random&quot; numbers generated by $RANDOM. Let's roll a $RANDOM die a few times . . . Example 9-15. Rolling a single die with RANDOM #!/bin/bash # How random is RANDOM? RANDOM=$$ # Reseed the random number generator using script process ID. PIPS=6 # A die has 6 pips. MAXTHROWS=600 # Increase this if you have nothing better to do with your time. throw=0 # Number of times the dice have been cast. ones=0 # Must initialize counts to zero, twos=0 #+ since an uninitialized variable is null, NOT zero. threes=0 fours=0 fives=0 sixes=0 print_result () { echo echo &quot;ones = $ones&quot; echo &quot;twos = $twos&quot; echo &quot;threes = $threes&quot; echo &quot;fours = $fours&quot; echo &quot;fives = $fives&quot; echo &quot;sixes = $sixes&quot; echo } update_count() { case &quot;$1&quot; in 0) ((ones++));; # Since a die has no &quot;zero&quot;, this corresponds to 1. 1) ((twos++));; # And this to 2. 2) ((threes++));; # And so forth. 3) ((fours++));; 4) ((fives++));; 5) ((sixes++));; esac } echo while [ &quot;$throw&quot; -lt &quot;$MAXTHROWS&quot; ] do let &quot;die1 = RANDOM % $PIPS&quot; update_count $die1 let &quot;throw += 1&quot; done print_result exit $? # The scores should distribute evenly, assuming RANDOM is random. # With $MAXTHROWS at 600, all should cluster around 100, #+ plus-or-minus 20 or so. # # Keep in mind that RANDOM is a ***pseudorandom*** generator, #+ and not a spectacularly good one at that. # Randomness is a deep and complex subject. # Sufficiently long &quot;random&quot; sequences may exhibit #+ chaotic and other &quot;non-random&quot; behavior. # Exercise (easy): # --------------- # Rewrite this script to flip a coin 1000 times. # Choices are &quot;HEADS&quot; and &quot;TAILS.&quot; As we have seen in the last example, it is best to reseed the RANDOM generator each time it is invoked. Using the same seed for RANDOM repeats the same series of numbers. [48] (This mirrors the behavior of the random() function in C.) Example 9-16. Reseeding RANDOM #!/bin/bash # seeding-random.sh: Seeding the RANDOM variable. # v 1.1, reldate 09 Feb 2013 MAXCOUNT=25 # How many numbers to generate. SEED= random_numbers () { local count=0 local number while [ &quot;$count&quot; -lt &quot;$MAXCOUNT&quot; ] do number=$RANDOM echo -n &quot;$number &quot; let &quot;count++&quot; done } echo; echo SEED=1 RANDOM=$SEED # Setting RANDOM seeds the random number generator. echo &quot;Random seed = $SEED&quot; random_numbers RANDOM=$SEED # Same seed for RANDOM . . . echo; echo &quot;Again, with same random seed ...&quot; echo &quot;Random seed = $SEED&quot; random_numbers # . . . reproduces the exact same number series. # # When is it useful to duplicate a &quot;random&quot; series? echo; echo SEED=2 RANDOM=$SEED # Trying again, but with a different seed . . . echo &quot;Random seed = $SEED&quot; random_numbers # . . . gives a different number series. echo; echo # RANDOM=$$ seeds RANDOM from process id of script. # It is also possible to seed RANDOM from 'time' or 'date' commands. # Getting fancy... SEED=$(head -1 /dev/urandom | od -N 1 | awk '{ print $2 }'| sed s/^0*//) # Pseudo-random output fetched #+ from /dev/urandom (system pseudo-random device-file), #+ then converted to line of printable (octal) numbers by &quot;od&quot;, #+ then &quot;awk&quot; retrieves just one number for SEED, #+ finally &quot;sed&quot; removes any leading zeros. RANDOM=$SEED echo &quot;Random seed = $SEED&quot; random_numbers echo; echo exit 0 Note The /dev/urandom pseudo-device file provides a method of generating much more &quot;random&quot; pseudorandom numbers than the $RANDOM variable. dd if=/dev/urandom of=targetfile bs=1 count=XX creates a file of well-scattered pseudorandom numbers. However, assigning these numbers to a variable in a script requires a workaround, such as filtering through od (as in above example, Example 16-14, and Example A-36), or even piping to md5sum (see Example 36-16). There are also other ways to generate pseudorandom numbers in a script. Awk provides a convenient means of doing this. Example 9-17. Pseudorandom numbers, using awk #!/bin/bash # random2.sh: Returns a pseudorandom number in the range 0 - 1, #+ to 6 decimal places. For example: 0.822725 # Uses the awk rand() function. AWKSCRIPT=' { srand(); print rand() } ' # Command(s)/parameters passed to awk # Note that srand() reseeds awk's random number generator. echo -n &quot;Random number between 0 and 1 = &quot; echo | awk &quot;$AWKSCRIPT&quot; # What happens if you leave out the 'echo'? exit 0 # Exercises: # --------- # 1) Using a loop construct, print out 10 different random numbers. # (Hint: you must reseed the srand() function with a different seed #+ in each pass through the loop. What happens if you omit this?) # 2) Using an integer multiplier as a scaling factor, generate random numbers #+ in the range of 10 to 100. # 3) Same as exercise #2, above, but generate random integers this time. The date command also lends itself to generating pseudorandom integer sequences. Chapter 10. Manipulating Variables 10.1. Manipulating Strings Bash supports a surprising number of string manipulation operations. Unfortunately, these tools lack a unified focus. Some are a subset of parameter substitution, and others fall under the functionality of the UNIX expr command. This results in inconsistent command syntax and overlap of functionality, not to mention confusion. String Length ${#string} expr length $string These are the equivalent of strlen() in C. expr &quot;$string&quot; : '.*' stringZ=abcABC123ABCabc echo ${#stringZ} # 15 echo `expr length $stringZ` # 15 echo `expr &quot;$stringZ&quot; : '.*'` # 15 Example 10-1. Inserting a blank line between paragraphs in a text file #!/bin/bash # paragraph-space.sh # Ver. 2.1, Reldate 29Jul12 [fixup] # Inserts a blank line between paragraphs of a single-spaced text file. # Usage: $0 &lt;FILENAME MINLEN=60 # Change this value? It's a judgment call. # Assume lines shorter than $MINLEN characters ending in a period #+ terminate a paragraph. See exercises below. while read line # For as many lines as the input file has ... do echo &quot;$line&quot; # Output the line itself. len=${#line} if [[ &quot;$len&quot; -lt &quot;$MINLEN&quot; &amp;&amp; &quot;$line&quot; =~ [*{\.}]$ ]] # if [[ &quot;$len&quot; -lt &quot;$MINLEN&quot; &amp;&amp; &quot;$line&quot; =~ \[*\.\] ]] # An update to Bash broke the previous version of this script. Ouch! # Thank you, Halim Srama, for pointing this out and suggesting a fix. then echo # Add a blank line immediately fi #+ after a short line terminated by a period. done exit # Exercises: # --------- # 1) The script usually inserts a blank line at the end #+ of the target file. Fix this. # 2) Line 17 only considers periods as sentence terminators. # Modify this to include other common end-of-sentence characters, #+ such as ?, !, and &quot;. Length of Matching Substring at Beginning of String expr match &quot;$string&quot; '$substring' $substring is a regular expression. expr &quot;$string&quot; : '$substring' $substring is a regular expression. stringZ=abcABC123ABCabc # |------| # 12345678 echo `expr match &quot;$stringZ&quot; 'abc[A-Z]*.2'` # 8 echo `expr &quot;$stringZ&quot; : 'abc[A-Z]*.2'` # 8 Index expr index $string $substring Numerical position in $string of first character in $substring that matches. stringZ=abcABC123ABCabc # 123456 ... echo `expr index &quot;$stringZ&quot; C12` # 6 # C position. echo `expr index &quot;$stringZ&quot; 1c` # 3 # 'c' (in #3 position) matches before '1'. This is the near equivalent of strchr() in C. Substring Extraction ${string:position} Extracts substring from $string at $position. If the $string parameter is &quot;*&quot; or &quot;@&quot;, then this extracts the positional parameters, [49] starting at $position. ${string:position:length} Extracts $length characters of substring from $string at $position. stringZ=abcABC123ABCabc # 0123456789..... # 0-based indexing. echo ${stringZ:0} # abcABC123ABCabc echo ${stringZ:1} # bcABC123ABCabc echo ${stringZ:7} # 23ABCabc echo ${stringZ:7:3} # 23A # Three characters of substring. # Is it possible to index from the right end of the string? echo ${stringZ:-4} # abcABC123ABCabc # Defaults to full string, as in ${parameter:-default}. # However . . . echo ${stringZ:(-4)} # Cabc echo ${stringZ: -4} # Cabc # Now, it works. # Parentheses or added space &quot;escape&quot; the position parameter. # Thank you, Dan Jacobson, for pointing this out. The position and length arguments can be &quot;parameterized,&quot; that is, represented as a variable, rather than as a numerical constant. Example 10-2. Generating an 8-character &quot;random&quot; string #!/bin/bash # rand-string.sh # Generating an 8-character &quot;random&quot; string. if [ -n &quot;$1&quot; ] # If command-line argument present, then #+ then set start-string to it. str0=&quot;$1&quot; else # Else use PID of script as start-string. str0=&quot;$$&quot; fi POS=2 # Starting from position 2 in the string. LEN=8 # Extract eight characters. str1=$( echo &quot;$str0&quot; | md5sum | md5sum ) # Doubly scramble ^^^^^^ ^^^^^^ #+ by piping and repiping to md5sum. randstring=&quot;${str1:$POS:$LEN}&quot; # Can parameterize ^^^^ ^^^^ echo &quot;$randstring&quot; exit $? # bozo$ ./rand-string.sh my-password # 1bdd88c4 # No, this is is not recommended #+ as a method of generating hack-proof passwords. If the $string parameter is &quot;*&quot; or &quot;@&quot;, then this extracts a maximum of $length positional parameters, starting at $position. echo ${*:2} # Echoes second and following positional parameters. echo ${@:2} # Same as above. echo ${*:2:3} # Echoes three positional parameters, starting at second. expr substr $string $position $length Extracts $length characters from $string starting at $position. stringZ=abcABC123ABCabc # 123456789...... # 1-based indexing. echo `expr substr $stringZ 1 2` # ab echo `expr substr $stringZ 4 3` # ABC expr match &quot;$string&quot; '\($substring\)' Extracts $substring at beginning of $string, where $substring is a regular expression. expr &quot;$string&quot; : '\($substring\)' Extracts $substring at beginning of $string, where $substring is a regular expression. stringZ=abcABC123ABCabc # ======= echo `expr match &quot;$stringZ&quot; '\(.[b-c]*[A-Z]..[0-9]\)'` # abcABC1 echo `expr &quot;$stringZ&quot; : '\(.[b-c]*[A-Z]..[0-9]\)'` # abcABC1 echo `expr &quot;$stringZ&quot; : '\(.......\)'` # abcABC1 # All of the above forms give an identical result. expr match &quot;$string&quot; '.*\($substring\)' Extracts $substring at end of $string, where $substring is a regular expression. expr &quot;$string&quot; : '.*\($substring\)' Extracts $substring at end of $string, where $substring is a regular expression. stringZ=abcABC123ABCabc # ====== echo `expr match &quot;$stringZ&quot; '.*\([A-C][A-C][A-C][a-c]*\)'` # ABCabc echo `expr &quot;$stringZ&quot; : '.*\(......\)'` # ABCabc Substring Removal ${string#substring} Deletes shortest match of $substring from front of $string. ${string##substring} Deletes longest match of $substring from front of $string. stringZ=abcABC123ABCabc # |----| shortest # |----------| longest echo ${stringZ#a*C} # 123ABCabc # Strip out shortest match between 'a' and 'C'. echo ${stringZ##a*C} # abc # Strip out longest match between 'a' and 'C'. # You can parameterize the substrings. X='a*C' echo ${stringZ#$X} # 123ABCabc echo ${stringZ##$X} # abc # As above. ${string%substring} Deletes shortest match of $substring from back of $string. For example: # Rename all filenames in $PWD with &quot;TXT&quot; suffix to a &quot;txt&quot; suffix. # For example, &quot;file1.TXT&quot; becomes &quot;file1.txt&quot; . . . SUFF=TXT suff=txt for i in $(ls *.$SUFF) do mv -f $i ${i%.$SUFF}.$suff # Leave unchanged everything *except* the shortest pattern match #+ starting from the right-hand-side of the variable $i . . . done ### This could be condensed into a &quot;one-liner&quot; if desired. # Thank you, Rory Winston. ${string%%substring} Deletes longest match of $substring from back of $string. stringZ=abcABC123ABCabc # || shortest # |------------| longest echo ${stringZ%b*c} # abcABC123ABCa # Strip out shortest match between 'b' and 'c', from back of $stringZ. echo ${stringZ%%b*c} # a # Strip out longest match between 'b' and 'c', from back of $stringZ. This operator is useful for generating filenames. Example 10-3. Converting graphic file formats, with filename change #!/bin/bash # cvt.sh: # Converts all the MacPaint image files in a directory to &quot;pbm&quot; format. # Uses the &quot;macptopbm&quot; binary from the &quot;netpbm&quot; package, #+ which is maintained by Brian Henderson (bryanh@giraffe-data.com). # Netpbm is a standard part of most Linux distros. OPERATION=macptopbm SUFFIX=pbm # New filename suffix. if [ -n &quot;$1&quot; ] then directory=$1 # If directory name given as a script argument... else directory=$PWD # Otherwise use current working directory. fi # Assumes all files in the target directory are MacPaint image files, #+ with a &quot;.mac&quot; filename suffix. for file in $directory/* # Filename globbing. do filename=${file%.*c} # Strip &quot;.mac&quot; suffix off filename #+ ('.*c' matches everything #+ between '.' and 'c', inclusive). $OPERATION $file &gt; &quot;$filename.$SUFFIX&quot; # Redirect conversion to new filename. rm -f $file # Delete original files after converting. echo &quot;$filename.$SUFFIX&quot; # Log what is happening to stdout. done exit 0 # Exercise: # -------- # As it stands, this script converts *all* the files in the current #+ working directory. # Modify it to work *only* on files with a &quot;.mac&quot; suffix. # *** And here's another way to do it. *** # #!/bin/bash # Batch convert into different graphic formats. # Assumes imagemagick installed (standard in most Linux distros). INFMT=png # Can be tif, jpg, gif, etc. OUTFMT=pdf # Can be tif, jpg, gif, pdf, etc. for pic in *&quot;$INFMT&quot; do p2=$(ls &quot;$pic&quot; | sed -e s/\.$INFMT//) # echo $p2 convert &quot;$pic&quot; $p2.$OUTFMT done exit $? Example 10-4. Converting streaming audio files to ogg #!/bin/bash # ra2ogg.sh: Convert streaming audio files (*.ra) to ogg. # Uses the &quot;mplayer&quot; media player program: # http://www.mplayerhq.hu/homepage # Uses the &quot;ogg&quot; library and &quot;oggenc&quot;: # http://www.xiph.org/ # # This script may need appropriate codecs installed, such as sipr.so ... # Possibly also the compat-libstdc++ package. OFILEPREF=${1%%ra} # Strip off the &quot;ra&quot; suffix. OFILESUFF=wav # Suffix for wav file. OUTFILE=&quot;$OFILEPREF&quot;&quot;$OFILESUFF&quot; E_NOARGS=85 if [ -z &quot;$1&quot; ] # Must specify a filename to convert. then echo &quot;Usage: `basename $0` [filename]&quot; exit $E_NOARGS fi ########################################################################## mplayer &quot;$1&quot; -ao pcm:file=$OUTFILE oggenc &quot;$OUTFILE&quot; # Correct file extension automatically added by oggenc. ########################################################################## rm &quot;$OUTFILE&quot; # Delete intermediate *.wav file. # If you want to keep it, comment out above line. exit $? # Note: # ---- # On a Website, simply clicking on a *.ram streaming audio file #+ usually only downloads the URL of the actual *.ra audio file. # You can then use &quot;wget&quot; or something similar #+ to download the *.ra file itself. # Exercises: # --------- # As is, this script converts only *.ra filenames. # Add flexibility by permitting use of *.ram and other filenames. # # If you're really ambitious, expand the script #+ to do automatic downloads and conversions of streaming audio files. # Given a URL, batch download streaming audio files (using &quot;wget&quot;) #+ and convert them on the fly. A simple emulation of getopt using substring-extraction constructs. Example 10-5. Emulating getopt #!/bin/bash # getopt-simple.sh # Author: Chris Morgan # Used in the ABS Guide with permission. getopt_simple() { echo &quot;getopt_simple()&quot; echo &quot;Parameters are '$*'&quot; until [ -z &quot;$1&quot; ] do echo &quot;Processing parameter of: '$1'&quot; if [ ${1:0:1} = '/' ] then tmp=${1:1} # Strip off leading '/' . . . parameter=${tmp%%=*} # Extract name. value=${tmp##*=} # Extract value. echo &quot;Parameter: '$parameter', value: '$value'&quot; eval $parameter=$value fi shift done } # Pass all options to getopt_simple(). getopt_simple $* echo &quot;test is '$test'&quot; echo &quot;test2 is '$test2'&quot; exit 0 # See also, UseGetOpt.sh, a modified version of this script. --- sh getopt_example.sh /test=value1 /test2=value2 Parameters are '/test=value1 /test2=value2' Processing parameter of: '/test=value1' Parameter: 'test', value: 'value1' Processing parameter of: '/test2=value2' Parameter: 'test2', value: 'value2' test is 'value1' test2 is 'value2' Substring Replacement ${string/substring/replacement} Replace first match of $substring with $replacement. [50] ${string//substring/replacement} Replace all matches of $substring with $replacement. stringZ=abcABC123ABCabc echo ${stringZ/abc/xyz} # xyzABC123ABCabc # Replaces first match of 'abc' with 'xyz'. echo ${stringZ//abc/xyz} # xyzABC123ABCxyz # Replaces all matches of 'abc' with # 'xyz'. echo --------------- echo &quot;$stringZ&quot; # abcABC123ABCabc echo --------------- # The string itself is not altered! # Can the match and replacement strings be parameterized? match=abc repl=000 echo ${stringZ/$match/$repl} # 000ABC123ABCabc # ^ ^ ^^^ echo ${stringZ//$match/$repl} # 000ABC123ABC000 # Yes! ^ ^ ^^^ ^^^ echo # What happens if no $replacement string is supplied? echo ${stringZ/abc} # ABC123ABCabc echo ${stringZ//abc} # ABC123ABC # A simple deletion takes place. ${string/#substring/replacement} If $substring matches front end of $string, substitute $replacement for $substring. ${string/%substring/replacement} If $substring matches back end of $string, substitute $replacement for $substring. stringZ=abcABC123ABCabc echo ${stringZ/#abc/XYZ} # XYZABC123ABCabc # Replaces front-end match of 'abc' with 'XYZ'. echo ${stringZ/%abc/XYZ} # abcABC123ABCXYZ # Replaces back-end match of 'abc' with 'XYZ'. 10.1.1. Manipulating strings using awk A Bash script may invoke the string manipulation facilities of awk as an alternative to using its built-in operations. Example 10-6. Alternate ways of extracting and locating substrings #!/bin/bash # substring-extraction.sh String=23skidoo1 # 012345678 Bash # 123456789 awk # Note different string indexing system: # Bash numbers first character of string as 0. # Awk numbers first character of string as 1. echo ${String:2:4} # position 3 (0-1-2), 4 characters long # skid # The awk equivalent of ${string:pos:length} is substr(string,pos,length). echo | awk ' { print substr(&quot;'&quot;${String}&quot;'&quot;,3,4) # skid } ' # Piping an empty &quot;echo&quot; to awk gives it dummy input, #+ and thus makes it unnecessary to supply a filename. echo &quot;----&quot; # And likewise: echo | awk ' { print index(&quot;'&quot;${String}&quot;'&quot;, &quot;skid&quot;) # 3 } # (skid starts at position 3) ' # The awk equivalent of &quot;expr index&quot; ... exit 0 10.1.2. Further Reference For more on string manipulation in scripts, refer to Section 10.2 and the relevant section of the expr command listing. Script examples: Example 16-9 Example 10-9 Example 10-10 Example 10-11 Example 10-13 Example A-36 Example A-41 10.2. Parameter Substitution Manipulating and/or expanding variables ${parameter} Same as $parameter, i.e., value of the variable parameter. In certain contexts, only the less ambiguous ${parameter} form works. May be used for concatenating variables with strings. your_id=${USER}-on-${HOSTNAME} echo &quot;$your_id&quot; # echo &quot;Old \$PATH = $PATH&quot; PATH=${PATH}:/opt/bin # Add /opt/bin to $PATH for duration of script. echo &quot;New \$PATH = $PATH&quot; ${parameter-default}, ${parameter:-default} If parameter not set, use default. var1=1 var2=2 # var3 is unset. echo ${var1-$var2} # 1 echo ${var3-$var2} # 2 # ^ Note the $ prefix. echo ${username-`whoami`} # Echoes the result of `whoami`, if variable $username is still unset. Note ${parameter-default} and ${parameter:-default} are almost equivalent. The extra : makes a difference only when parameter has been declared, but is null. #!/bin/bash # param-sub.sh # Whether a variable has been declared #+ affects triggering of the default option #+ even if the variable is null. username0= echo &quot;username0 has been declared, but is set to null.&quot; echo &quot;username0 = ${username0-`whoami`}&quot; # Will not echo. echo echo username1 has not been declared. echo &quot;username1 = ${username1-`whoami`}&quot; # Will echo. username2= echo &quot;username2 has been declared, but is set to null.&quot; echo &quot;username2 = ${username2:-`whoami`}&quot; # ^ # Will echo because of :- rather than just - in condition test. # Compare to first instance, above. # # Once again: variable= # variable has been declared, but is set to null. echo &quot;${variable-0}&quot; # (no output) echo &quot;${variable:-1}&quot; # 1 # ^ unset variable echo &quot;${variable-2}&quot; # 2 echo &quot;${variable:-3}&quot; # 3 exit 0 The default parameter construct finds use in providing &quot;missing&quot; command-line arguments in scripts. DEFAULT_FILENAME=generic.data filename=${1:-$DEFAULT_FILENAME} # If not otherwise specified, the following command block operates #+ on the file &quot;generic.data&quot;. # Begin-Command-Block # ... # ... # ... # End-Command-Block # From &quot;hanoi2.bash&quot; example: DISKS=${1:-E_NOPARAM} # Must specify how many disks. # Set $DISKS to $1 command-line-parameter, #+ or to $E_NOPARAM if that is unset. See also Example 3-4, Example 31-2, and Example A-6. Compare this method with using an and list to supply a default command-line argument. ${parameter=default}, ${parameter:=default} If parameter not set, set it to default. Both forms nearly equivalent. The : makes a difference only when $parameter has been declared and is null, [51] as above. echo ${var=abc} # abc echo ${var=xyz} # abc # $var had already been set to abc, so it did not change. ${parameter+alt_value}, ${parameter:+alt_value} If parameter set, use alt_value, else use null string. Both forms nearly equivalent. The : makes a difference only when parameter has been declared and is null, see below. echo &quot;###### \${parameter+alt_value} ########&quot; echo a=${param1+xyz} echo &quot;a = $a&quot; # a = param2= a=${param2+xyz} echo &quot;a = $a&quot; # a = xyz param3=123 a=${param3+xyz} echo &quot;a = $a&quot; # a = xyz echo echo &quot;###### \${parameter:+alt_value} ########&quot; echo a=${param4:+xyz} echo &quot;a = $a&quot; # a = param5= a=${param5:+xyz} echo &quot;a = $a&quot; # a = # Different result from a=${param5+xyz} param6=123 a=${param6:+xyz} echo &quot;a = $a&quot; # a = xyz ${parameter?err_msg}, ${parameter:?err_msg} If parameter set, use it, else print err_msg and abort the script with an exit status of 1. Both forms nearly equivalent. The : makes a difference only when parameter has been declared and is null, as above. Example 10-7. Using parameter substitution and error messages #!/bin/bash # Check some of the system's environmental variables. # This is good preventative maintenance. # If, for example, $USER, the name of the person at the console, is not set, #+ the machine will not recognize you. : ${HOSTNAME?} ${USER?} ${HOME?} ${MAIL?} echo echo &quot;Name of the machine is $HOSTNAME.&quot; echo &quot;You are $USER.&quot; echo &quot;Your home directory is $HOME.&quot; echo &quot;Your mail INBOX is located in $MAIL.&quot; echo echo &quot;If you are reading this message,&quot; echo &quot;critical environmental variables have been set.&quot; echo echo # ------------------------------------------------------ # The ${variablename?} construction can also check #+ for variables set within the script. ThisVariable=Value-of-ThisVariable # Note, by the way, that string variables may be set #+ to characters disallowed in their names. : ${ThisVariable?} echo &quot;Value of ThisVariable is $ThisVariable&quot;. echo; echo : ${ZZXy23AB?&quot;ZZXy23AB has not been set.&quot;} # Since ZZXy23AB has not been set, #+ then the script terminates with an error message. # You can specify the error message. # : ${variablename?&quot;ERROR MESSAGE&quot;} # Same result with: dummy_variable=${ZZXy23AB?} # dummy_variable=${ZZXy23AB?&quot;ZXy23AB has not been set.&quot;} # # echo ${ZZXy23AB?} &gt;/dev/null # Compare these methods of checking whether a variable has been set #+ with &quot;set -u&quot; . . . echo &quot;You will not see this message, because script already terminated.&quot; HERE=0 exit $HERE # Will NOT exit here. # In fact, this script will return an exit status (echo $?) of 1. Example 10-8. Parameter substitution and &quot;usage&quot; messages #!/bin/bash # usage-message.sh : ${1?&quot;Usage: $0 ARGUMENT&quot;} # Script exits here if command-line parameter absent, #+ with following error message. # usage-message.sh: 1: Usage: usage-message.sh ARGUMENT echo &quot;These two lines echo only if command-line parameter given.&quot; echo &quot;command-line parameter = \&quot;$1\&quot;&quot; exit 0 # Will exit here only if command-line parameter present. # Check the exit status, both with and without command-line parameter. # If command-line parameter present, then &quot;$?&quot; is 0. # If not, then &quot;$?&quot; is 1. Parameter substitution and/or expansion. The following expressions are the complement to the match in expr string operations (see Example 16-9). These particular ones are used mostly in parsing file path names. Variable length / Substring removal ${#var} String length (number of characters in $var). For an array, ${#array} is the length of the first element in the array. Note Exceptions: ${#*} and ${#@} give the number of positional parameters. For an array, ${#array[*]} and ${#array[@]} give the number of elements in the array. Example 10-9. Length of a variable #!/bin/bash # length.sh E_NO_ARGS=65 if [ $# -eq 0 ] # Must have command-line args to demo script. then echo &quot;Please invoke this script with one or more command-line arguments.&quot; exit $E_NO_ARGS fi var01=abcdEFGH28ij echo &quot;var01 = ${var01}&quot; echo &quot;Length of var01 = ${#var01}&quot; # Now, let's try embedding a space. var02=&quot;abcd EFGH28ij&quot; echo &quot;var02 = ${var02}&quot; echo &quot;Length of var02 = ${#var02}&quot; echo &quot;Number of command-line arguments passed to script = ${#@}&quot; echo &quot;Number of command-line arguments passed to script = ${#*}&quot; exit 0 ${var#Pattern}, ${var##Pattern} ${var#Pattern} Remove from $var the shortest part of $Pattern that matches the front end of $var. ${var##Pattern} Remove from $var the longest part of $Pattern that matches the front end of $var. A usage illustration from Example A-7: # Function from &quot;days-between.sh&quot; example. # Strips leading zero(s) from argument passed. strip_leading_zero () # Strip possible leading zero(s) { #+ from argument passed. return=${1#0} # The &quot;1&quot; refers to &quot;$1&quot; -- passed arg. } # The &quot;0&quot; is what to remove from &quot;$1&quot; -- strips zeros. Manfred Schwarb's more elaborate variation of the above: strip_leading_zero2 () # Strip possible leading zero(s), since otherwise { # Bash will interpret such numbers as octal values. shopt -s extglob # Turn on extended globbing. local val=${1##+(0)} # Use local variable, longest matching series of 0's. shopt -u extglob # Turn off extended globbing. _strip_leading_zero2=${val:-0} # If input was 0, return 0 instead of &quot;&quot;. } Another usage illustration: echo `basename $PWD` # Basename of current working directory. echo &quot;${PWD##*/}&quot; # Basename of current working directory. echo echo `basename $0` # Name of script. echo $0 # Name of script. echo &quot;${0##*/}&quot; # Name of script. echo filename=test.data echo &quot;${filename##*.}&quot; # data # Extension of filename. ${var%Pattern}, ${var%%Pattern} ${var%Pattern} Remove from $var the shortest part of $Pattern that matches the back end of $var. ${var%%Pattern} Remove from $var the longest part of $Pattern that matches the back end of $var. Version 2 of Bash added additional options. Example 10-10. Pattern matching in parameter substitution #!/bin/bash # patt-matching.sh # Pattern matching using the # ## % %% parameter substitution operators. var1=abcd12345abc6789 pattern1=a*c # * (wild card) matches everything between a - c. echo echo &quot;var1 = $var1&quot; # abcd12345abc6789 echo &quot;var1 = ${var1}&quot; # abcd12345abc6789 # (alternate form) echo &quot;Number of characters in ${var1} = ${#var1}&quot; echo echo &quot;pattern1 = $pattern1&quot; # a*c (everything between 'a' and 'c') echo &quot;--------------&quot; echo '${var1#$pattern1} =' &quot;${var1#$pattern1}&quot; # d12345abc6789 # Shortest possible match, strips out first 3 characters abcd12345abc6789 # ^^^^^ |-| echo '${var1##$pattern1} =' &quot;${var1##$pattern1}&quot; # 6789 # Longest possible match, strips out first 12 characters abcd12345abc6789 # ^^^^^ |----------| echo; echo; echo pattern2=b*9 # everything between 'b' and '9' echo &quot;var1 = $var1&quot; # Still abcd12345abc6789 echo echo &quot;pattern2 = $pattern2&quot; echo &quot;--------------&quot; echo '${var1%pattern2} =' &quot;${var1%$pattern2}&quot; # abcd12345a # Shortest possible match, strips out last 6 characters abcd12345abc6789 # ^^^^ |----| echo '${var1%%pattern2} =' &quot;${var1%%$pattern2}&quot; # a # Longest possible match, strips out last 12 characters abcd12345abc6789 # ^^^^ |-------------| # Remember, # and ## work from the left end (beginning) of string, # % and %% work from the right end. echo exit 0 Example 10-11. Renaming file extensions: #!/bin/bash # rfe.sh: Renaming file extensions. # # rfe old_extension new_extension # # Example: # To rename all *.gif files in working directory to *.jpg, # rfe gif jpg E_BADARGS=65 case $# in 0|1) # The vertical bar means &quot;or&quot; in this context. echo &quot;Usage: `basename $0` old_file_suffix new_file_suffix&quot; exit $E_BADARGS # If 0 or 1 arg, then bail out. ;; esac for filename in *.$1 # Traverse list of files ending with 1st argument. do mv $filename ${filename%$1}$2 # Strip off part of filename matching 1st argument, #+ then append 2nd argument. done exit 0 Variable expansion / Substring replacement These constructs have been adopted from ksh. ${var:pos} Variable var expanded, starting from offset pos. ${var:pos:len} Expansion to a max of len characters of variable var, from offset pos. See Example A-13 for an example of the creative use of this operator. ${var/Pattern/Replacement} First match of Pattern, within var replaced with Replacement. If Replacement is omitted, then the first match of Pattern is replaced by nothing, that is, deleted. ${var//Pattern/Replacement} Global replacement. All matches of Pattern, within var replaced with Replacement. As above, if Replacement is omitted, then all occurrences of Pattern are replaced by nothing, that is, deleted. Example 10-12. Using pattern matching to parse arbitrary strings #!/bin/bash var1=abcd-1234-defg echo &quot;var1 = $var1&quot; t=${var1#*-*} echo &quot;var1 (with everything, up to and including first - stripped out) = $t&quot; # t=${var1#*-} works just the same, #+ since # matches the shortest string, #+ and * matches everything preceding, including an empty string. # (Thanks, Stephane Chazelas, for pointing this out.) t=${var1##*-*} echo &quot;If var1 contains a \&quot;-\&quot;, returns empty string... var1 = $t&quot; t=${var1%*-*} echo &quot;var1 (with everything from the last - on stripped out) = $t&quot; echo # ------------------------------------------- path_name=/home/bozo/ideas/thoughts.for.today # ------------------------------------------- echo &quot;path_name = $path_name&quot; t=${path_name##/*/} echo &quot;path_name, stripped of prefixes = $t&quot; # Same effect as t=`basename $path_name` in this particular case. # t=${path_name%/}; t=${t##*/} is a more general solution, #+ but still fails sometimes. # If $path_name ends with a newline, then `basename $path_name` will not work, #+ but the above expression will. # (Thanks, S.C.) t=${path_name%/*.*} # Same effect as t=`dirname $path_name` echo &quot;path_name, stripped of suffixes = $t&quot; # These will fail in some cases, such as &quot;../&quot;, &quot;/foo////&quot;, # &quot;foo/&quot;, &quot;/&quot;. # Removing suffixes, especially when the basename has no suffix, #+ but the dirname does, also complicates matters. # (Thanks, S.C.) echo t=${path_name:11} echo &quot;$path_name, with first 11 chars stripped off = $t&quot; t=${path_name:11:5} echo &quot;$path_name, with first 11 chars stripped off, length 5 = $t&quot; echo t=${path_name/bozo/clown} echo &quot;$path_name with \&quot;bozo\&quot; replaced by \&quot;clown\&quot; = $t&quot; t=${path_name/today/} echo &quot;$path_name with \&quot;today\&quot; deleted = $t&quot; t=${path_name//o/O} echo &quot;$path_name with all o's capitalized = $t&quot; t=${path_name//o/} echo &quot;$path_name with all o's deleted = $t&quot; exit 0 ${var/#Pattern/Replacement} If prefix of var matches Pattern, then substitute Replacement for Pattern. ${var/%Pattern/Replacement} If suffix of var matches Pattern, then substitute Replacement for Pattern. Example 10-13. Matching patterns at prefix or suffix of string #!/bin/bash # var-match.sh: # Demo of pattern replacement at prefix / suffix of string. v0=abc1234zip1234abc # Original variable. echo &quot;v0 = $v0&quot; # abc1234zip1234abc echo # Match at prefix (beginning) of string. v1=${v0/#abc/ABCDEF} # abc1234zip1234abc # |-| echo &quot;v1 = $v1&quot; # ABCDEF1234zip1234abc # |----| # Match at suffix (end) of string. v2=${v0/%abc/ABCDEF} # abc1234zip123abc # |-| echo &quot;v2 = $v2&quot; # abc1234zip1234ABCDEF # |----| echo # ---------------------------------------------------- # Must match at beginning / end of string, #+ otherwise no replacement results. # ---------------------------------------------------- v3=${v0/#123/000} # Matches, but not at beginning. echo &quot;v3 = $v3&quot; # abc1234zip1234abc # NO REPLACEMENT. v4=${v0/%123/000} # Matches, but not at end. echo &quot;v4 = $v4&quot; # abc1234zip1234abc # NO REPLACEMENT. exit 0 ${!varprefix*}, ${!varprefix@} Matches names of all previously declared variables beginning with varprefix. # This is a variation on indirect reference, but with a * or @. # Bash, version 2.04, adds this feature. xyz23=whatever xyz24= a=${!xyz*} # Expands to *names* of declared variables # ^ ^ ^ + beginning with &quot;xyz&quot;. echo &quot;a = $a&quot; # a = xyz23 xyz24 a=${!xyz@} # Same as above. echo &quot;a = $a&quot; # a = xyz23 xyz24 echo &quot;---&quot; abc23=something_else b=${!abc*} echo &quot;b = $b&quot; # b = abc23 c=${!b} # Now, the more familiar type of indirect reference. echo $c # something_else Chapter 11. Loops and Branches What needs this iteration, woman? --Shakespeare, Othello Operations on code blocks are the key to structured and organized shell scripts. Looping and branching constructs provide the tools for accomplishing this. 11.1. Loops A loop is a block of code that iterates [52] a list of commands as long as the loop control condition is true. for loops for arg in [list] This is the basic looping construct. It differs significantly from its C counterpart. for arg in [list] do command(s)... done Note During each pass through the loop, arg takes on the value of each successive variable in the list. for arg in &quot;$var1&quot; &quot;$var2&quot; &quot;$var3&quot; ... &quot;$varN&quot; # In pass 1 of the loop, arg = $var1 # In pass 2 of the loop, arg = $var2 # In pass 3 of the loop, arg = $var3 # ... # In pass N of the loop, arg = $varN # Arguments in [list] quoted to prevent possible word splitting. The argument list may contain wild cards. If do is on same line as for, there needs to be a semicolon after list. for arg in [list] ; do Example 11-1. Simple for loops #!/bin/bash # Listing the planets. for planet in Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto do echo $planet # Each planet on a separate line. done echo; echo for planet in &quot;Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto&quot; # All planets on same line. # Entire 'list' enclosed in quotes creates a single variable. # Why? Whitespace incorporated into the variable. do echo $planet done echo; echo &quot;Whoops! Pluto is no longer a planet!&quot; exit 0 Each [list] element may contain multiple parameters. This is useful when processing parameters in groups. In such cases, use the set command (see Example 15-16) to force parsing of each [list] element and assignment of each component to the positional parameters. Example 11-2. for loop with two parameters in each [list] element #!/bin/bash # Planets revisited. # Associate the name of each planet with its distance from the sun. for planet in &quot;Mercury 36&quot; &quot;Venus 67&quot; &quot;Earth 93&quot; &quot;Mars 142&quot; &quot;Jupiter 483&quot; do set -- $planet # Parses variable &quot;planet&quot; #+ and sets positional parameters. # The &quot;--&quot; prevents nasty surprises if $planet is null or #+ begins with a dash. # May need to save original positional parameters, #+ since they get overwritten. # One way of doing this is to use an array, # original_params=(&quot;$@&quot;) echo &quot;$1 $2,000,000 miles from the sun&quot; #-------two tabs---concatenate zeroes onto parameter $2 done # (Thanks, S.C., for additional clarification.) exit 0 A variable may supply the [list] in a for loop. Example 11-3. Fileinfo: operating on a file list contained in a variable #!/bin/bash # fileinfo.sh FILES=&quot;/usr/sbin/accept /usr/sbin/pwck /usr/sbin/chroot /usr/bin/fakefile /sbin/badblocks /sbin/ypbind&quot; # List of files you are curious about. # Threw in a dummy file, /usr/bin/fakefile. echo for file in $FILES do if [ ! -e &quot;$file&quot; ] # Check if file exists. then echo &quot;$file does not exist.&quot;; echo continue # On to next. fi ls -l $file | awk '{ print $8 &quot; file size: &quot; $5 }' # Print 2 fields. whatis `basename $file` # File info. # Note that the whatis database needs to have been set up for this to work. # To do this, as root run /usr/bin/makewhatis. echo done exit 0 The [list] in a for loop may be parameterized. Example 11-4. Operating on a parameterized file list #!/bin/bash filename=&quot;*txt&quot; for file in $filename do echo &quot;Contents of $file&quot; echo &quot;---&quot; cat &quot;$file&quot; echo done If the [list] in a for loop contains wild cards (* and ?) used in filename expansion, then globbing takes place. Example 11-5. Operating on files with a for loop #!/bin/bash # list-glob.sh: Generating [list] in a for-loop, using &quot;globbing&quot; ... # Globbing = filename expansion. echo for file in * # ^ Bash performs filename expansion #+ on expressions that globbing recognizes. do ls -l &quot;$file&quot; # Lists all files in $PWD (current directory). # Recall that the wild card character &quot;*&quot; matches every filename, #+ however, in &quot;globbing,&quot; it doesn't match dot-files. # If the pattern matches no file, it is expanded to itself. # To prevent this, set the nullglob option #+ (shopt -s nullglob). # Thanks, S.C. done echo; echo for file in [jx]* do rm -f $file # Removes only files beginning with &quot;j&quot; or &quot;x&quot; in $PWD. echo &quot;Removed file \&quot;$file\&quot;&quot;. done echo exit 0 Omitting the in [list] part of a for loop causes the loop to operate on $@ -- the positional parameters. A particularly clever illustration of this is Example A-15. See also Example 15-17. Example 11-6. Missing in [list] in a for loop #!/bin/bash # Invoke this script both with and without arguments, #+ and see what happens. for a do echo -n &quot;$a &quot; done # The 'in list' missing, therefore the loop operates on '$@' #+ (command-line argument list, including whitespace). echo exit 0 It is possible to use command substitution to generate the [list] in a for loop. See also Example 16-54, Example 11-11 and Example 16-48. Example 11-7. Generating the [list] in a for loop with command substitution #!/bin/bash # for-loopcmd.sh: for-loop with [list] #+ generated by command substitution. NUMBERS=&quot;9 7 3 8 37.53&quot; for number in `echo $NUMBERS` # for number in 9 7 3 8 37.53 do echo -n &quot;$number &quot; done echo exit 0 Here is a somewhat more complex example of using command substitution to create the [list]. Example 11-8. A grep replacement for binary files #!/bin/bash # bin-grep.sh: Locates matching strings in a binary file. # A &quot;grep&quot; replacement for binary files. # Similar effect to &quot;grep -a&quot; E_BADARGS=65 E_NOFILE=66 if [ $# -ne 2 ] then echo &quot;Usage: `basename $0` search_string filename&quot; exit $E_BADARGS fi if [ ! -f &quot;$2&quot; ] then echo &quot;File \&quot;$2\&quot; does not exist.&quot; exit $E_NOFILE fi IFS=$'\012' # Per suggestion of Anton Filippov. # was: IFS=&quot;\n&quot; for word in $( strings &quot;$2&quot; | grep &quot;$1&quot; ) # The &quot;strings&quot; command lists strings in binary files. # Output then piped to &quot;grep&quot;, which tests for desired string. do echo $word done # As S.C. points out, lines 23 - 30 could be replaced with the simpler # strings &quot;$2&quot; | grep &quot;$1&quot; | tr -s &quot;$IFS&quot; '[\n*]' # Try something like &quot;./bin-grep.sh mem /bin/ls&quot; #+ to exercise this script. exit 0 More of the same. Example 11-9. Listing all users on the system #!/bin/bash # userlist.sh PASSWORD_FILE=/etc/passwd n=1 # User number for name in $(awk 'BEGIN{FS=&quot;:&quot;}{print $1}' &lt; &quot;$PASSWORD_FILE&quot; ) # Field separator = : ^^^^^^ # Print first field ^^^^^^^^ # Get input from password file /etc/passwd ^^^^^^^^^^^^^^^^^ do echo &quot;USER #$n = $name&quot; let &quot;n += 1&quot; done # USER #1 = root # USER #2 = bin # USER #3 = daemon # ... # USER #33 = bozo exit $? # Discussion: # ---------- # How is it that an ordinary user, or a script run by same, #+ can read /etc/passwd? (Hint: Check the /etc/passwd file permissions.) # Is this a security hole? Why or why not? Yet another example of the [list] resulting from command substitution. Example 11-10. Checking all the binaries in a directory for authorship #!/bin/bash # findstring.sh: # Find a particular string in the binaries in a specified directory. directory=/usr/bin/ fstring=&quot;Free Software Foundation&quot; # See which files come from the FSF. for file in $( find $directory -type f -name '*' | sort ) do strings -f $file | grep &quot;$fstring&quot; | sed -e &quot;s%$directory%%&quot; # In the &quot;sed&quot; expression, #+ it is necessary to substitute for the normal &quot;/&quot; delimiter #+ because &quot;/&quot; happens to be one of the characters filtered out. # Failure to do so gives an error message. (Try it.) done exit $? # Exercise (easy): # --------------- # Convert this script to take command-line parameters #+ for $directory and $fstring. A final example of [list] / command substitution, but this time the &quot;command&quot; is a function. generate_list () { echo &quot;one two three&quot; } for word in $(generate_list) # Let &quot;word&quot; grab output of function. do echo &quot;$word&quot; done # one # two # three The output of a for loop may be piped to a command or commands. Example 11-11. Listing the symbolic links in a directory #!/bin/bash # symlinks.sh: Lists symbolic links in a directory. directory=${1-`pwd`} # Defaults to current working directory, #+ if not otherwise specified. # Equivalent to code block below. # ---------------------------------------------------------- # ARGS=1 # Expect one command-line argument. # # if [ $# -ne &quot;$ARGS&quot; ] # If not 1 arg... # then # directory=`pwd` # current working directory # else # directory=$1 # fi # ---------------------------------------------------------- echo &quot;symbolic links in directory \&quot;$directory\&quot;&quot; for file in &quot;$( find $directory -type l )&quot; # -type l = symbolic links do echo &quot;$file&quot; done | sort # Otherwise file list is unsorted. # Strictly speaking, a loop isn't really necessary here, #+ since the output of the &quot;find&quot; command is expanded into a single word. # However, it's easy to understand and illustrative this way. # As Dominik 'Aeneas' Schnitzer points out, #+ failing to quote $( find $directory -type l ) #+ will choke on filenames with embedded whitespace. # containing whitespace. exit 0 # -------------------------------------------------------- # Jean Helou proposes the following alternative: echo &quot;symbolic links in directory \&quot;$directory\&quot;&quot; # Backup of the current IFS. One can never be too cautious. OLDIFS=$IFS IFS=: for file in $(find $directory -type l -printf &quot;%p$IFS&quot;) do # ^^^^^^^^^^^^^^^^ echo &quot;$file&quot; done|sort # And, James &quot;Mike&quot; Conley suggests modifying Helou's code thusly: OLDIFS=$IFS IFS='' # Null IFS means no word breaks for file in $( find $directory -type l ) do echo $file done | sort # This works in the &quot;pathological&quot; case of a directory name having #+ an embedded colon. # &quot;This also fixes the pathological case of the directory name having #+ a colon (or space in earlier example) as well.&quot; The stdout of a loop may be redirected to a file, as this slight modification to the previous example shows. Example 11-12. Symbolic links in a directory, saved to a file #!/bin/bash # symlinks.sh: Lists symbolic links in a directory. OUTFILE=symlinks.list # save-file directory=${1-`pwd`} # Defaults to current working directory, #+ if not otherwise specified. echo &quot;symbolic links in directory \&quot;$directory\&quot;&quot; &gt; &quot;$OUTFILE&quot; echo &quot;---------------------------&quot; &gt;&gt; &quot;$OUTFILE&quot; for file in &quot;$( find $directory -type l )&quot; # -type l = symbolic links do echo &quot;$file&quot; done | sort &gt;&gt; &quot;$OUTFILE&quot; # stdout of loop # ^^^^^^^^^^^^^ redirected to save file. # echo &quot;Output file = $OUTFILE&quot; exit $? There is an alternative syntax to a for loop that will look very familiar to C programmers. This requires double parentheses. Example 11-13. A C-style for loop #!/bin/bash # Multiple ways to count up to 10. echo # Standard syntax. for a in 1 2 3 4 5 6 7 8 9 10 do echo -n &quot;$a &quot; done echo; echo # +==========================================+ # Using &quot;seq&quot; ... for a in `seq 10` do echo -n &quot;$a &quot; done echo; echo # +==========================================+ # Using brace expansion ... # Bash, version 3+. for a in {1..10} do echo -n &quot;$a &quot; done echo; echo # +==========================================+ # Now, let's do the same, using C-like syntax. LIMIT=10 for ((a=1; a &lt;= LIMIT ; a++)) # Double parentheses, and naked &quot;LIMIT&quot; do echo -n &quot;$a &quot; done # A construct borrowed from ksh93. echo; echo # +=========================================================================+ # Let's use the C &quot;comma operator&quot; to increment two variables simultaneously. for ((a=1, b=1; a &lt;= LIMIT ; a++, b++)) do # The comma concatenates operations. echo -n &quot;$a-$b &quot; done echo; echo exit 0 See also Example 27-16, Example 27-17, and Example A-6. --- Now, a for loop used in a &quot;real-life&quot; context. Example 11-14. Using efax in batch mode #!/bin/bash # Faxing (must have 'efax' package installed). EXPECTED_ARGS=2 E_BADARGS=85 MODEM_PORT=&quot;/dev/ttyS2&quot; # May be different on your machine. # ^^^^^ PCMCIA modem card default port. if [ $# -ne $EXPECTED_ARGS ] # Check for proper number of command-line args. then echo &quot;Usage: `basename $0` phone# text-file&quot; exit $E_BADARGS fi if [ ! -f &quot;$2&quot; ] then echo &quot;File $2 is not a text file.&quot; # File is not a regular file, or does not exist. exit $E_BADARGS fi fax make $2 # Create fax-formatted files from text files. for file in $(ls $2.0*) # Concatenate the converted files. # Uses wild card (filename &quot;globbing&quot;) #+ in variable list. do fil=&quot;$fil $file&quot; done efax -d &quot;$MODEM_PORT&quot; -t &quot;T$1&quot; $fil # Finally, do the work. # Trying adding -o1 if above line fails. # As S.C. points out, the for-loop can be eliminated with # efax -d /dev/ttyS2 -o1 -t &quot;T$1&quot; $2.0* #+ but it's not quite as instructive [grin]. exit $? # Also, efax sends diagnostic messages to stdout. Note The keywords do and done delineate the for-loop command block. However, these may, in certain contexts, be omitted by framing the command block within curly brackets for((n=1; n&lt;=10; n++)) # No do! { echo -n &quot;* $n *&quot; } # No done! # Outputs: # * 1 ** 2 ** 3 ** 4 ** 5 ** 6 ** 7 ** 8 ** 9 ** 10 * # And, echo $? returns 0, so Bash does not register an error. echo # But, note that in a classic for-loop: for n in [list] ... #+ a terminal semicolon is required. for n in 1 2 3 { echo -n &quot;$n &quot;; } # ^ # Thank you, YongYe, for pointing this out. while This construct tests for a condition at the top of a loop, and keeps looping as long as that condition is true (returns a 0 exit status). In contrast to a for loop, a while loop finds use in situations where the number of loop repetitions is not known beforehand. while [ condition ] do command(s)... done The bracket construct in a while loop is nothing more than our old friend, the test brackets used in an if/then test. In fact, a while loop can legally use the more versatile double-brackets construct (while [[ condition ]]). As is the case with for loops, placing the do on the same line as the condition test requires a semicolon. while [ condition ] ; do Note that the test brackets are not mandatory in a while loop. See, for example, the getopts construct. Example 11-15. Simple while loop #!/bin/bash var0=0 LIMIT=10 while [ &quot;$var0&quot; -lt &quot;$LIMIT&quot; ] # ^ ^ # Spaces, because these are &quot;test-brackets&quot; . . . do echo -n &quot;$var0 &quot; # -n suppresses newline. # ^ Space, to separate printed out numbers. var0=`expr $var0 + 1` # var0=$(($var0+1)) also works. # var0=$((var0 + 1)) also works. # let &quot;var0 += 1&quot; also works. done # Various other methods also work. echo exit 0 Example 11-16. Another while loop #!/bin/bash echo # Equivalent to: while [ &quot;$var1&quot; != &quot;end&quot; ] # while test &quot;$var1&quot; != &quot;end&quot; do echo &quot;Input variable #1 (end to exit) &quot; read var1 # Not 'read $var1' (why?). echo &quot;variable #1 = $var1&quot; # Need quotes because of &quot;#&quot; . . . # If input is 'end', echoes it here. # Does not test for termination condition until top of loop. echo done exit 0 A while loop may have multiple conditions. Only the final condition determines when the loop terminates. This necessitates a slightly different loop syntax, however. Example 11-17. while loop with multiple conditions #!/bin/bash var1=unset previous=$var1 while echo &quot;previous-variable = $previous&quot; echo previous=$var1 [ &quot;$var1&quot; != end ] # Keeps track of what $var1 was previously. # Four conditions on *while*, but only the final one controls loop. # The *last* exit status is the one that counts. do echo &quot;Input variable #1 (end to exit) &quot; read var1 echo &quot;variable #1 = $var1&quot; done # Try to figure out how this all works. # It's a wee bit tricky. exit 0 As with a for loop, a while loop may employ C-style syntax by using the double-parentheses construct (see also Example 8-5). Example 11-18. C-style syntax in a while loop #!/bin/bash # wh-loopc.sh: Count to 10 in a &quot;while&quot; loop. LIMIT=10 # 10 iterations. a=1 while [ &quot;$a&quot; -le $LIMIT ] do echo -n &quot;$a &quot; let &quot;a+=1&quot; done # No surprises, so far. echo; echo # +=================================================================+ # Now, we'll repeat with C-like syntax. ((a = 1)) # a=1 # Double parentheses permit space when setting a variable, as in C. while (( a &lt;= LIMIT )) # Double parentheses, do #+ and no &quot;$&quot; preceding variables. echo -n &quot;$a &quot; ((a += 1)) # let &quot;a+=1&quot; # Yes, indeed. # Double parentheses permit incrementing a variable with C-like syntax. done echo # C and Java programmers can feel right at home in Bash. exit 0 Inside its test brackets, a while loop can call a function. t=0 condition () { ((t++)) if [ $t -lt 5 ] then return 0 # true else return 1 # false fi } while condition # ^^^^^^^^^ # Function call -- four loop iterations. do echo &quot;Still going: t = $t&quot; done # Still going: t = 1 # Still going: t = 2 # Still going: t = 3 # Still going: t = 4 Similar to the if-test construct, a while loop can omit the test brackets. while condition do command(s) ... done By coupling the power of the read command with a while loop, we get the handy while read construct, useful for reading and parsing files. cat $filename | # Supply input from a file. while read line # As long as there is another line to read ... do ... done # =========== Snippet from &quot;sd.sh&quot; example script ========== # while read value # Read one data point at a time. do rt=$(echo &quot;scale=$SC; $rt + $value&quot; | bc) (( ct++ )) done am=$(echo &quot;scale=$SC; $rt / $ct&quot; | bc) echo $am; return $ct # This function &quot;returns&quot; TWO values! # Caution: This little trick will not work if $ct &gt; 255! # To handle a larger number of data points, #+ simply comment out the &quot;return $ct&quot; above. } &lt;&quot;$datafile&quot; # Feed in data file. Note A while loop may have its stdin redirected to a file by a &lt; at its end. A while loop may have its stdin supplied by a pipe. until This construct tests for a condition at the top of a loop, and keeps looping as long as that condition is false (opposite of while loop). until [ condition-is-true ] do command(s)... done Note that an until loop tests for the terminating condition at the top of the loop, differing from a similar construct in some programming languages. As is the case with for loops, placing the do on the same line as the condition test requires a semicolon. until [ condition-is-true ] ; do Example 11-19. until loop #!/bin/bash END_CONDITION=end until [ &quot;$var1&quot; = &quot;$END_CONDITION&quot; ] # Tests condition here, at top of loop. do echo &quot;Input variable #1 &quot; echo &quot;($END_CONDITION to exit)&quot; read var1 echo &quot;variable #1 = $var1&quot; echo done # --- # # As with &quot;for&quot; and &quot;while&quot; loops, #+ an &quot;until&quot; loop permits C-like test constructs. LIMIT=10 var=0 until (( var &gt; LIMIT )) do # ^^ ^ ^ ^^ No brackets, no $ prefixing variables. echo -n &quot;$var &quot; (( var++ )) done # 0 1 2 3 4 5 6 7 8 9 10 exit 0 How to choose between a for loop or a while loop or until loop? In C, you would typically use a for loop when the number of loop iterations is known beforehand. With Bash, however, the situation is fuzzier. The Bash for loop is more loosely structured and more flexible than its equivalent in other languages. Therefore, feel free to use whatever type of loop gets the job done in the simplest way. 11.2. Nested Loops A nested loop is a loop within a loop, an inner loop within the body of an outer one. How this works is that the first pass of the outer loop triggers the inner loop, which executes to completion. Then the second pass of the outer loop triggers the inner loop again. This repeats until the outer loop finishes. Of course, a break within either the inner or outer loop would interrupt this process. Example 11-20. Nested Loop #!/bin/bash # nested-loop.sh: Nested &quot;for&quot; loops. outer=1 # Set outer loop counter. # Beginning of outer loop. for a in 1 2 3 4 5 do echo &quot;Pass $outer in outer loop.&quot; echo &quot;---------------------&quot; inner=1 # Reset inner loop counter. # =============================================== # Beginning of inner loop. for b in 1 2 3 4 5 do echo &quot;Pass $inner in inner loop.&quot; let &quot;inner+=1&quot; # Increment inner loop counter. done # End of inner loop. # =============================================== let &quot;outer+=1&quot; # Increment outer loop counter. echo # Space between output blocks in pass of outer loop. done # End of outer loop. exit 0 See Example 27-11 for an illustration of nested while loops, and Example 27-13 to see a while loop nested inside an until loop. 11.3. Loop Control Tournez cent tours, tournez mille tours, Tournez souvent et tournez toujours . . . --Verlaine, &quot;Chevaux de bois&quot; Commands affecting loop behavior break, continue The break and continue loop control commands [53] correspond exactly to their counterparts in other programming languages. The break command terminates the loop (breaks out of it), while continue causes a jump to the next iteration of the loop, skipping all the remaining commands in that particular loop cycle. Example 11-21. Effects of break and continue in a loop #!/bin/bash LIMIT=19 # Upper limit echo echo &quot;Printing Numbers 1 through 20 (but not 3 and 11).&quot; a=0 while [ $a -le &quot;$LIMIT&quot; ] do a=$(($a+1)) if [ &quot;$a&quot; -eq 3 ] || [ &quot;$a&quot; -eq 11 ] # Excludes 3 and 11. then continue # Skip rest of this particular loop iteration. fi echo -n &quot;$a &quot; # This will not execute for 3 and 11. done # Exercise: # Why does the loop print up to 20? echo; echo echo Printing Numbers 1 through 20, but something happens after 2. ################################################################## # Same loop, but substituting 'break' for 'continue'. a=0 while [ &quot;$a&quot; -le &quot;$LIMIT&quot; ] do a=$(($a+1)) if [ &quot;$a&quot; -gt 2 ] then break # Skip entire rest of loop. fi echo -n &quot;$a &quot; done echo; echo; echo exit 0 The break command may optionally take a parameter. A plain break terminates only the innermost loop in which it is embedded, but a break N breaks out of N levels of loop. Example 11-22. Breaking out of multiple loop levels #!/bin/bash # break-levels.sh: Breaking out of loops. # &quot;break N&quot; breaks out of N level loops. for outerloop in 1 2 3 4 5 do echo -n &quot;Group $outerloop: &quot; # -------------------------------------------------------- for innerloop in 1 2 3 4 5 do echo -n &quot;$innerloop &quot; if [ &quot;$innerloop&quot; -eq 3 ] then break # Try break 2 to see what happens. # (&quot;Breaks&quot; out of both inner and outer loops.) fi done # -------------------------------------------------------- echo done echo exit 0 The continue command, similar to break, optionally takes a parameter. A plain continue cuts short the current iteration within its loop and begins the next. A continue N terminates all remaining iterations at its loop level and continues with the next iteration at the loop, N levels above. Example 11-23. Continuing at a higher loop level #!/bin/bash # The &quot;continue N&quot; command, continuing at the Nth level loop. for outer in I II III IV V # outer loop do echo; echo -n &quot;Group $outer: &quot; # -------------------------------------------------------------------- for inner in 1 2 3 4 5 6 7 8 9 10 # inner loop do if [[ &quot;$inner&quot; -eq 7 &amp;&amp; &quot;$outer&quot; = &quot;III&quot; ]] then continue 2 # Continue at loop on 2nd level, that is &quot;outer loop&quot;. # Replace above line with a simple &quot;continue&quot; # to see normal loop behavior. fi echo -n &quot;$inner &quot; # 7 8 9 10 will not echo on &quot;Group III.&quot; done # -------------------------------------------------------------------- done echo; echo # Exercise: # Come up with a meaningful use for &quot;continue N&quot; in a script. exit 0 Example 11-24. Using continue N in an actual task # Albert Reiner gives an example of how to use &quot;continue N&quot;: # --------------------------------------------------------- # Suppose I have a large number of jobs that need to be run, with #+ any data that is to be treated in files of a given name pattern #+ in a directory. There are several machines that access #+ this directory, and I want to distribute the work over these #+ different boxen. # Then I usually nohup something like the following on every box: while true do for n in .iso.* do [ &quot;$n&quot; = &quot;.iso.opts&quot; ] &amp;&amp; continue beta=${n#.iso.} [ -r .Iso.$beta ] &amp;&amp; continue [ -r .lock.$beta ] &amp;&amp; sleep 10 &amp;&amp; continue lockfile -r0 .lock.$beta || continue echo -n &quot;$beta: &quot; `date` run-isotherm $beta date ls -alF .Iso.$beta [ -r .Iso.$beta ] &amp;&amp; rm -f .lock.$beta continue 2 done break done exit 0 # The details, in particular the sleep N, are particular to my #+ application, but the general pattern is: while true do for job in {pattern} do {job already done or running} &amp;&amp; continue {mark job as running, do job, mark job as done} continue 2 done break # Or something like `sleep 600' to avoid termination. done # This way the script will stop only when there are no more jobs to do #+ (including jobs that were added during runtime). Through the use #+ of appropriate lockfiles it can be run on several machines #+ concurrently without duplication of calculations [which run a couple #+ of hours in my case, so I really want to avoid this]. Also, as search #+ always starts again from the beginning, one can encode priorities in #+ the file names. Of course, one could also do this without `continue 2', #+ but then one would have to actually check whether or not some job #+ was done (so that we should immediately look for the next job) or not #+ (in which case we terminate or sleep for a long time before checking #+ for a new job). Caution The continue N construct is difficult to understand and tricky to use in any meaningful context. It is probably best avoided. 11.4. Testing and Branching The case and select constructs are technically not loops, since they do not iterate the execution of a code block. Like loops, however, they direct program flow according to conditions at the top or bottom of the block. Controlling program flow in a code block case (in) / esac The case construct is the shell scripting analog to switch in C/C++. It permits branching to one of a number of code blocks, depending on condition tests. It serves as a kind of shorthand for multiple if/then/else statements and is an appropriate tool for creating menus. case &quot;$variable&quot; in &quot;$condition1&quot; ) command... ;; &quot;$condition2&quot; ) command... ;; esac Note Quoting the variables is not mandatory, since word splitting does not take place. Each test line ends with a right paren ). [54] Each condition block ends with a double semicolon ;;. If a condition tests true, then the associated commands execute and the case block terminates. The entire case block ends with an esac (case spelled backwards). Example 11-25. Using case #!/bin/bash # Testing ranges of characters. echo; echo &quot;Hit a key, then hit return.&quot; read Keypress case &quot;$Keypress&quot; in [[:lower:]] ) echo &quot;Lowercase letter&quot;;; [[:upper:]] ) echo &quot;Uppercase letter&quot;;; [0-9] ) echo &quot;Digit&quot;;; * ) echo &quot;Punctuation, whitespace, or other&quot;;; esac # Allows ranges of characters in [square brackets], #+ or POSIX ranges in [[double square brackets. # In the first version of this example, #+ the tests for lowercase and uppercase characters were #+ [a-z] and [A-Z]. # This no longer works in certain locales and/or Linux distros. # POSIX is more portable. # Thanks to Frank Wang for pointing this out. # Exercise: # -------- # As the script stands, it accepts a single keystroke, then terminates. # Change the script so it accepts repeated input, #+ reports on each keystroke, and terminates only when &quot;X&quot; is hit. # Hint: enclose everything in a &quot;while&quot; loop. exit 0 Example 11-26. Creating menus using case #!/bin/bash # Crude address database clear # Clear the screen. echo &quot; Contact List&quot; echo &quot; ------- ----&quot; echo &quot;Choose one of the following persons:&quot; echo echo &quot;[E]vans, Roland&quot; echo &quot;[J]ones, Mildred&quot; echo &quot;[S]mith, Julie&quot; echo &quot;[Z]ane, Morris&quot; echo read person case &quot;$person&quot; in # Note variable is quoted. &quot;E&quot; | &quot;e&quot; ) # Accept upper or lowercase input. echo echo &quot;Roland Evans&quot; echo &quot;4321 Flash Dr.&quot; echo &quot;Hardscrabble, CO 80753&quot; echo &quot;(303) 734-9874&quot; echo &quot;(303) 734-9892 fax&quot; echo &quot;revans@zzy.net&quot; echo &quot;Business partner &amp; old friend&quot; ;; # Note double semicolon to terminate each option. &quot;J&quot; | &quot;j&quot; ) echo echo &quot;Mildred Jones&quot; echo &quot;249 E. 7th St., Apt. 19&quot; echo &quot;New York, NY 10009&quot; echo &quot;(212) 533-2814&quot; echo &quot;(212) 533-9972 fax&quot; echo &quot;milliej@loisaida.com&quot; echo &quot;Ex-girlfriend&quot; echo &quot;Birthday: Feb. 11&quot; ;; # Add info for Smith &amp; Zane later. * ) # Default option. # Empty input (hitting RETURN) fits here, too. echo echo &quot;Not yet in database.&quot; ;; esac echo # Exercise: # -------- # Change the script so it accepts multiple inputs, #+ instead of terminating after displaying just one address. exit 0 An exceptionally clever use of case involves testing for command-line parameters. #! /bin/bash case &quot;$1&quot; in &quot;&quot;) echo &quot;Usage: ${0##*/} &lt;filename&gt;&quot;; exit $E_PARAM;; # No command-line parameters, # or first parameter empty. # Note that ${0##*/} is ${var##pattern} param substitution. # Net result is $0. -*) FILENAME=./$1;; # If filename passed as argument ($1) #+ starts with a dash, #+ replace it with ./$1 #+ so further commands don't interpret it #+ as an option. * ) FILENAME=$1;; # Otherwise, $1. esac Here is a more straightforward example of command-line parameter handling: #! /bin/bash while [ $# -gt 0 ]; do # Until you run out of parameters . . . case &quot;$1&quot; in -d|--debug) # &quot;-d&quot; or &quot;--debug&quot; parameter? DEBUG=1 ;; -c|--conf) CONFFILE=&quot;$2&quot; shift if [ ! -f $CONFFILE ]; then echo &quot;Error: Supplied file doesn't exist!&quot; exit $E_CONFFILE # File not found error. fi ;; esac shift # Check next set of parameters. done # From Stefano Falsetto's &quot;Log2Rot&quot; script, #+ part of his &quot;rottlog&quot; package. # Used with permission. Example 11-27. Using command substitution to generate the case variable #!/bin/bash # case-cmd.sh: Using command substitution to generate a &quot;case&quot; variable. case $( arch ) in # $( arch ) returns machine architecture. # Equivalent to 'uname -m' ... i386 ) echo &quot;80386-based machine&quot;;; i486 ) echo &quot;80486-based machine&quot;;; i586 ) echo &quot;Pentium-based machine&quot;;; i686 ) echo &quot;Pentium2+-based machine&quot;;; * ) echo &quot;Other type of machine&quot;;; esac exit 0 A case construct can filter strings for globbing patterns. Example 11-28. Simple string matching #!/bin/bash # match-string.sh: Simple string matching # using a 'case' construct. match_string () { # Exact string match. MATCH=0 E_NOMATCH=90 PARAMS=2 # Function requires 2 arguments. E_BAD_PARAMS=91 [ $# -eq $PARAMS ] || return $E_BAD_PARAMS case &quot;$1&quot; in &quot;$2&quot;) return $MATCH;; * ) return $E_NOMATCH;; esac } a=one b=two c=three d=two match_string $a # wrong number of parameters echo $? # 91 match_string $a $b # no match echo $? # 90 match_string $b $d # match echo $? # 0 exit 0 Example 11-29. Checking for alphabetic input #!/bin/bash # isalpha.sh: Using a &quot;case&quot; structure to filter a string. SUCCESS=0 FAILURE=1 # Was FAILURE=-1, #+ but Bash no longer allows negative return value. isalpha () # Tests whether *first character* of input string is alphabetic. { if [ -z &quot;$1&quot; ] # No argument passed? then return $FAILURE fi case &quot;$1&quot; in [a-zA-Z]*) return $SUCCESS;; # Begins with a letter? * ) return $FAILURE;; esac } # Compare this with &quot;isalpha ()&quot; function in C. isalpha2 () # Tests whether *entire string* is alphabetic. { [ $# -eq 1 ] || return $FAILURE case $1 in *[!a-zA-Z]*|&quot;&quot;) return $FAILURE;; *) return $SUCCESS;; esac } isdigit () # Tests whether *entire string* is numerical. { # In other words, tests for integer variable. [ $# -eq 1 ] || return $FAILURE case $1 in *[!0-9]*|&quot;&quot;) return $FAILURE;; *) return $SUCCESS;; esac } check_var () # Front-end to isalpha (). { if isalpha &quot;$@&quot; then echo &quot;\&quot;$*\&quot; begins with an alpha character.&quot; if isalpha2 &quot;$@&quot; then # No point in testing if first char is non-alpha. echo &quot;\&quot;$*\&quot; contains only alpha characters.&quot; else echo &quot;\&quot;$*\&quot; contains at least one non-alpha character.&quot; fi else echo &quot;\&quot;$*\&quot; begins with a non-alpha character.&quot; # Also &quot;non-alpha&quot; if no argument passed. fi echo } digit_check () # Front-end to isdigit (). { if isdigit &quot;$@&quot; then echo &quot;\&quot;$*\&quot; contains only digits [0 - 9].&quot; else echo &quot;\&quot;$*\&quot; has at least one non-digit character.&quot; fi echo } a=23skidoo b=H3llo c=-What? d=What? e=$(echo $b) # Command substitution. f=AbcDef g=27234 h=27a34 i=27.34 check_var $a check_var $b check_var $c check_var $d check_var $e check_var $f check_var # No argument passed, so what happens? # digit_check $g digit_check $h digit_check $i exit 0 # Script improved by S.C. # Exercise: # -------- # Write an 'isfloat ()' function that tests for floating point numbers. # Hint: The function duplicates 'isdigit ()', #+ but adds a test for a mandatory decimal point. select The select construct, adopted from the Korn Shell, is yet another tool for building menus. select variable [in list] do command... break done This prompts the user to enter one of the choices presented in the variable list. Note that select uses the $PS3 prompt (#? ) by default, but this may be changed. Example 11-30. Creating menus using select #!/bin/bash PS3='Choose your favorite vegetable: ' # Sets the prompt string. # Otherwise it defaults to #? . echo select vegetable in &quot;beans&quot; &quot;carrots&quot; &quot;potatoes&quot; &quot;onions&quot; &quot;rutabagas&quot; do echo echo &quot;Your favorite veggie is $vegetable.&quot; echo &quot;Yuck!&quot; echo break # What happens if there is no 'break' here? done exit # Exercise: # -------- # Fix this script to accept user input not specified in #+ the &quot;select&quot; statement. # For example, if the user inputs &quot;peas,&quot; #+ the script would respond &quot;Sorry. That is not on the menu.&quot; If in list is omitted, then select uses the list of command line arguments ($@) passed to the script or the function containing the select construct. Compare this to the behavior of a for variable [in list] construct with the in list omitted. Example 11-31. Creating menus using select in a function #!/bin/bash PS3='Choose your favorite vegetable: ' echo choice_of() { select vegetable # [in list] omitted, so 'select' uses arguments passed to function. do echo echo &quot;Your favorite veggie is $vegetable.&quot; echo &quot;Yuck!&quot; echo break done } choice_of beans rice carrots radishes rutabaga spinach # $1 $2 $3 $4 $5 $6 # passed to choice_of() function exit 0 See also Example 37-3. Chapter 12. Command Substitution Command substitution reassigns the output of a command [55] or even multiple commands; it literally plugs the command output into another context. [56] The classic form of command substitution uses backquotes (`...`). Commands within backquotes (backticks) generate command-line text. script_name=`basename $0` echo &quot;The name of this script is $script_name.&quot; The output of commands can be used as arguments to another command, to set a variable, and even for generating the argument list in a for loop. rm `cat filename` # &quot;filename&quot; contains a list of files to delete. # # S. C. points out that &quot;arg list too long&quot; error might result. # Better is xargs rm -- &lt; filename # ( -- covers those cases where &quot;filename&quot; begins with a &quot;-&quot; ) textfile_listing=`ls *.txt` # Variable contains names of all *.txt files in current working directory. echo $textfile_listing textfile_listing2=$(ls *.txt) # The alternative form of command substitution. echo $textfile_listing2 # Same result. # A possible problem with putting a list of files into a single string # is that a newline may creep in. # # A safer way to assign a list of files to a parameter is with an array. # shopt -s nullglob # If no match, filename expands to nothing. # textfile_listing=( *.txt ) # # Thanks, S.C. Note Command substitution invokes a subshell. Caution Command substitution may result in word splitting. COMMAND `echo a b` # 2 args: a and b COMMAND &quot;`echo a b`&quot; # 1 arg: &quot;a b&quot; COMMAND `echo` # no arg COMMAND &quot;`echo`&quot; # one empty arg # Thanks, S.C. Even when there is no word splitting, command substitution can remove trailing newlines. # cd &quot;`pwd`&quot; # This should always work. # However... mkdir 'dir with trailing newline ' cd 'dir with trailing newline ' cd &quot;`pwd`&quot; # Error message: # bash: cd: /tmp/file with trailing newline: No such file or directory cd &quot;$PWD&quot; # Works fine. old_tty_setting=$(stty -g) # Save old terminal setting. echo &quot;Hit a key &quot; stty -icanon -echo # Disable &quot;canonical&quot; mode for terminal. # Also, disable *local* echo. key=$(dd bs=1 count=1 2&gt; /dev/null) # Using 'dd' to get a keypress. stty &quot;$old_tty_setting&quot; # Restore old setting. echo &quot;You hit ${#key} key.&quot; # ${#variable} = number of characters in $variable # # Hit any key except RETURN, and the output is &quot;You hit 1 key.&quot; # Hit RETURN, and it's &quot;You hit 0 key.&quot; # The newline gets eaten in the command substitution. #Code snippet by Stéphane Chazelas. Caution Using echo to output an unquoted variable set with command substitution removes trailing newlines characters from the output of the reassigned command(s). This can cause unpleasant surprises. dir_listing=`ls -l` echo $dir_listing # unquoted # Expecting a nicely ordered directory listing. # However, what you get is: # total 3 -rw-rw-r-- 1 bozo bozo 30 May 13 17:15 1.txt -rw-rw-r-- 1 bozo # bozo 51 May 15 20:57 t2.sh -rwxr-xr-x 1 bozo bozo 217 Mar 5 21:13 wi.sh # The newlines disappeared. echo &quot;$dir_listing&quot; # quoted # -rw-rw-r-- 1 bozo 30 May 13 17:15 1.txt # -rw-rw-r-- 1 bozo 51 May 15 20:57 t2.sh # -rwxr-xr-x 1 bozo 217 Mar 5 21:13 wi.sh Command substitution even permits setting a variable to the contents of a file, using either redirection or the cat command. variable1=`&lt;file1` # Set &quot;variable1&quot; to contents of &quot;file1&quot;. variable2=`cat file2` # Set &quot;variable2&quot; to contents of &quot;file2&quot;. # This, however, forks a new process, #+ so the line of code executes slower than the above version. # Note that the variables may contain embedded whitespace, #+ or even (horrors), control characters. # It is not necessary to explicitly assign a variable. echo &quot;` &lt;$0`&quot; # Echoes the script itself to stdout. # Excerpts from system file, /etc/rc.d/rc.sysinit #+ (on a Red Hat Linux installation) if [ -f /fsckoptions ]; then fsckoptions=`cat /fsckoptions` ... fi # # if [ -e &quot;/proc/ide/${disk[$device]}/media&quot; ] ; then hdmedia=`cat /proc/ide/${disk[$device]}/media` ... fi # # if [ ! -n &quot;`uname -r | grep -- &quot;-&quot;`&quot; ]; then ktag=&quot;`cat /proc/version`&quot; ... fi # # if [ $usb = &quot;1&quot; ]; then sleep 5 mouseoutput=`cat /proc/bus/usb/devices 2&gt;/dev/null|grep -E &quot;^I.*Cls=03.*Prot=02&quot;` kbdoutput=`cat /proc/bus/usb/devices 2&gt;/dev/null|grep -E &quot;^I.*Cls=03.*Prot=01&quot;` ... fi Caution Do not set a variable to the contents of a long text file unless you have a very good reason for doing so. Do not set a variable to the contents of a binary file, even as a joke. Example 12-1. Stupid script tricks #!/bin/bash # stupid-script-tricks.sh: Don't try this at home, folks. # From &quot;Stupid Script Tricks,&quot; Volume I. exit 99 ### Comment out this line if you dare. dangerous_variable=`cat /boot/vmlinuz` # The compressed Linux kernel itself. echo &quot;string-length of \$dangerous_variable = ${#dangerous_variable}&quot; # string-length of $dangerous_variable = 794151 # (Newer kernels are bigger.) # Does not give same count as 'wc -c /boot/vmlinuz'. # echo &quot;$dangerous_variable&quot; # Don't try this! It would hang the script. # The document author is aware of no useful applications for #+ setting a variable to the contents of a binary file. exit 0 Notice that a buffer overrun does not occur. This is one instance where an interpreted language, such as Bash, provides more protection from programmer mistakes than a compiled language. Command substitution permits setting a variable to the output of a loop. The key to this is grabbing the output of an echo command within the loop. Example 12-2. Generating a variable from a loop #!/bin/bash # csubloop.sh: Setting a variable to the output of a loop. variable1=`for i in 1 2 3 4 5 do echo -n &quot;$i&quot; # The 'echo' command is critical done` #+ to command substitution here. echo &quot;variable1 = $variable1&quot; # variable1 = 12345 i=0 variable2=`while [ &quot;$i&quot; -lt 10 ] do echo -n &quot;$i&quot; # Again, the necessary 'echo'. let &quot;i += 1&quot; # Increment. done` echo &quot;variable2 = $variable2&quot; # variable2 = 0123456789 # Demonstrates that it's possible to embed a loop #+ inside a variable declaration. exit 0 Command substitution makes it possible to extend the toolset available to Bash. It is simply a matter of writing a program or script that outputs to stdout (like a well-behaved UNIX tool should) and assigning that output to a variable. #include &lt;stdio.h&gt; /* &quot;Hello, world.&quot; C program */ int main() { printf( &quot;Hello, world.\n&quot; ); return (0); } bash$ gcc -o hello hello.c #!/bin/bash # hello.sh greeting=`./hello` echo $greeting bash$ sh hello.sh Hello, world. Note The $(...) form has superseded backticks for command substitution. output=$(sed -n /&quot;$1&quot;/p $file) # From &quot;grp.sh&quot; example. # Setting a variable to the contents of a text file. File_contents1=$(cat $file1) File_contents2=$(&lt;$file2) # Bash permits this also. The $(...) form of command substitution treats a double backslash in a different way than `...`. bash$ echo `echo \\` bash$ echo $(echo \\) \ The $(...) form of command substitution permits nesting. [57] word_count=$( wc -w $(echo * | awk '{print $8}') ) Or, for something a bit more elaborate . . . Example 12-3. Finding anagrams #!/bin/bash # agram2.sh # Example of nested command substitution. # Uses &quot;anagram&quot; utility #+ that is part of the author's &quot;yawl&quot; word list package. # http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz # http://bash.deta.in/yawl-0.3.2.tar.gz E_NOARGS=86 E_BADARG=87 MINLEN=7 if [ -z &quot;$1&quot; ] then echo &quot;Usage $0 LETTERSET&quot; exit $E_NOARGS # Script needs a command-line argument. elif [ ${#1} -lt $MINLEN ] then echo &quot;Argument must have at least $MINLEN letters.&quot; exit $E_BADARG fi FILTER='.......' # Must have at least 7 letters. # 1234567 Anagrams=( $(echo $(anagram $1 | grep $FILTER) ) ) # $( $( nested command sub. ) ) # ( array assignment ) echo echo &quot;${#Anagrams[*]} 7+ letter anagrams found&quot; echo echo ${Anagrams[0]} # First anagram. echo ${Anagrams[1]} # Second anagram. # Etc. # echo &quot;${Anagrams[*]}&quot; # To list all the anagrams in a single line . . . # Look ahead to the Arrays chapter for enlightenment on #+ what's going on here. # See also the agram.sh script for an exercise in anagram finding. exit $? Examples of command substitution in shell scripts: Example 11-8 Example 11-27 Example 9-16 Example 16-3 Example 16-22 Example 16-17 Example 16-54 Example 11-14 Example 11-11 Example 16-32 Example 20-8 Example A-16 Example 29-3 Example 16-47 Example 16-48 Example 16-49 Chapter 13. Arithmetic Expansion Arithmetic expansion provides a powerful tool for performing (integer) arithmetic operations in scripts. Translating a string into a numerical expression is relatively straightforward using backticks, double parentheses, or let. Variations Arithmetic expansion with backticks (often used in conjunction with expr) z=`expr $z + 3` # The 'expr' command performs the expansion. Arithmetic expansion with double parentheses, and using let The use of backticks (backquotes) in arithmetic expansion has been superseded by double parentheses -- ((...)) and $((...)) -- and also by the very convenient let construction. z=$(($z+3)) z=$((z+3)) # Also correct. # Within double parentheses, #+ parameter dereferencing #+ is optional. # $((EXPRESSION)) is arithmetic expansion. # Not to be confused with #+ command substitution. # You may also use operations within double parentheses without assignment. n=0 echo &quot;n = $n&quot; # n = 0 (( n += 1 )) # Increment. # (( $n += 1 )) is incorrect! echo &quot;n = $n&quot; # n = 1 let z=z+3 let &quot;z += 3&quot; # Quotes permit the use of spaces in variable assignment. # The 'let' operator actually performs arithmetic evaluation, #+ rather than expansion. Examples of arithmetic expansion in scripts: Example 16-9 Example 11-15 Example 27-1 Example 27-11 Example A-16 Chapter 14. Recess Time This bizarre little intermission gives the reader a chance to relax and maybe laugh a bit. Fellow Linux user, greetings! You are reading something which will bring you luck and good fortune. Just e-mail a copy of this document to 10 of your friends. Before making the copies, send a 100-line Bash script to the first person on the list at the bottom of this letter. Then delete their name and add yours to the bottom of the list. Don't break the chain! Make the copies within 48 hours. Wilfred P. of Brooklyn failed to send out his ten copies and woke the next morning to find his job description changed to &quot;COBOL programmer.&quot; Howard L. of Newport News sent out his ten copies and within a month had enough hardware to build a 100-node Beowulf cluster dedicated to playing Tuxracer. Amelia V. of Chicago laughed at this letter and broke the chain. Shortly thereafter, a fire broke out in her terminal and she now spends her days writing documentation for MS Windows. Don't break the chain! Send out your ten copies today! Courtesy 'NIX &quot;fortune cookies&quot;, with some alterations and many apologies Part 4. Commands Mastering the commands on your Linux machine is an indispensable prelude to writing effective shell scripts. This section covers the following commands: . (See also source) ac adduser agetty agrep ar arch at autoload awk (See also Using awk for math operations) badblocks banner basename batch bc bg bind bison builtin bzgrep bzip2 cal caller cat cd chattr chfn chgrp chkconfig chmod chown chroot cksum clear clock cmp col colrm column comm command compgen complete compress coproc cp cpio cron crypt csplit cu cut date dc dd debugfs declare depmod df dialog diff diff3 diffstat dig dirname dirs disown dmesg doexec dos2unix du dump dumpe2fs e2fsck echo egrep enable enscript env eqn eval exec exit (Related topic: exit status) expand export expr factor false fdformat fdisk fg fgrep file find finger flex flock fmt fold free fsck ftp fuser getfacl getopt getopts gettext getty gnome-mount grep groff groupmod groups (Related topic: the $GROUPS variable) gs gzip halt hash hdparm head help hexdump host hostid hostname (Related topic: the $HOSTNAME variable) hwclock iconv id (Related topic: the $UID variable) ifconfig info infocmp init insmod install ip ipcalc iptables iwconfig jobs join jot kill killall last lastcomm lastlog ldd less let lex lid ln locate lockfile logger logname logout logrotate look losetup lp ls lsdev lsmod lsof lspci lsusb ltrace lynx lzcat lzma m4 mail mailstats mailto make MAKEDEV man mapfile mcookie md5sum merge mesg mimencode mkbootdisk mkdir mkdosfs mke2fs mkfifo mkisofs mknod mkswap mktemp mmencode modinfo modprobe more mount msgfmt mv nc netconfig netstat newgrp nice nl nm nmap nohup nslookup objdump od openssl passwd paste patch (Related topic: diff) pathchk pax pgrep pidof ping pkill popd pr printenv printf procinfo ps pstree ptx pushd pwd (Related topic: the $PWD variable) quota rcp rdev rdist read readelf readlink readonly reboot recode renice reset resize restore rev rlogin rm rmdir rmmod route rpm rpm2cpio rsh rsync runlevel run-parts rx rz sar scp script sdiff sed seq service set setfacl setquota setserial setterm sha1sum shar shopt shred shutdown size skill sleep slocate snice sort source sox split sq ssh stat strace strings strip stty su sudo sum suspend swapoff swapon sx sync sz tac tail tar tbl tcpdump tee telinit telnet Tex texexec time times tmpwatch top touch tput tr traceroute true tset tsort tty tune2fs type typeset ulimit umask umount uname unarc unarj uncompress unexpand uniq units unlzma unrar unset unsq unzip uptime usbmodules useradd userdel usermod users usleep uucp uudecode uuencode uux vacation vdir vmstat vrfy w wait wall watch wc wget whatis whereis which who whoami whois write xargs xrandr xz yacc yes zcat zdiff zdump zegrep zfgrep zgrep zip Table of Contents 15. Internal Commands and Builtins 15.1. Job Control Commands 16. External Filters, Programs and Commands 16.1. Basic Commands 16.2. Complex Commands 16.3. Time / Date Commands 16.4. Text Processing Commands 16.5. File and Archiving Commands 16.6. Communications Commands 16.7. Terminal Control Commands 16.8. Math Commands 16.9. Miscellaneous Commands 17. System and Administrative Commands 17.1. Analyzing a System Script Chapter 15. Internal Commands and Builtins A builtin is a command contained within the Bash tool set, literally built in. This is either for performance reasons -- builtins execute faster than external commands, which usually require forking off [58] a separate process -- or because a particular builtin needs direct access to the shell internals. When a command or the shell itself initiates (or spawns) a new subprocess to carry out a task, this is called forking. This new process is the child, and the process that forked it off is the parent. While the child process is doing its work, the parent process is still executing. Note that while a parent process gets the process ID of the child process, and can thus pass arguments to it, the reverse is not true. This can create problems that are subtle and hard to track down. Example 15-1. A script that spawns multiple instances of itself #!/bin/bash # spawn.sh PIDS=$(pidof sh $0) # Process IDs of the various instances of this script. P_array=( $PIDS ) # Put them in an array (why?). echo $PIDS # Show process IDs of parent and child processes. let &quot;instances = ${#P_array[*]} - 1&quot; # Count elements, less 1. # Why subtract 1? echo &quot;$instances instance(s) of this script running.&quot; echo &quot;[Hit Ctl-C to exit.]&quot;; echo sleep 1 # Wait. sh $0 # Play it again, Sam. exit 0 # Not necessary; script will never get to here. # Why not? # After exiting with a Ctl-C, #+ do all the spawned instances of the script die? # If so, why? # Note: # ---- # Be careful not to run this script too long. # It will eventually eat up too many system resources. # Is having a script spawn multiple instances of itself #+ an advisable scripting technique. # Why or why not? Generally, a Bash builtin does not fork a subprocess when it executes within a script. An external system command or filter in a script usually will fork a subprocess. A builtin may be a synonym to a system command of the same name, but Bash reimplements it internally. For example, the Bash echo command is not the same as /bin/echo, although their behavior is almost identical. #!/bin/bash echo &quot;This line uses the \&quot;echo\&quot; builtin.&quot; /bin/echo &quot;This line uses the /bin/echo system command.&quot; A keyword is a reserved word, token or operator. Keywords have a special meaning to the shell, and indeed are the building blocks of the shell's syntax. As examples, for, while, do, and ! are keywords. Similar to a builtin, a keyword is hard-coded into Bash, but unlike a builtin, a keyword is not in itself a command, but a subunit of a command construct. [59] I/O echo prints (to stdout) an expression or variable (see Example 4-1). echo Hello echo $a An echo requires the -e option to print escaped characters. See Example 5-2. Normally, each echo command prints a terminal newline, but the -n option suppresses this. Note An echo can be used to feed a sequence of commands down a pipe. if echo &quot;$VAR&quot; | grep -q txt # if [[ $VAR = *txt* ]] then echo &quot;$VAR contains the substring sequence \&quot;txt\&quot;&quot; fi Note An echo, in combination with command substitution can set a variable. a=`echo &quot;HELLO&quot; | tr A-Z a-z` See also Example 16-22, Example 16-3, Example 16-47, and Example 16-48. Be aware that echo `command` deletes any linefeeds that the output of command generates. The $IFS (internal field separator) variable normally contains \n (linefeed) as one of its set of whitespace characters. Bash therefore splits the output of command at linefeeds into arguments to echo. Then echo outputs these arguments, separated by spaces. bash$ ls -l /usr/share/apps/kjezz/sounds -rw-r--r-- 1 root root 1407 Nov 7 2000 reflect.au -rw-r--r-- 1 root root 362 Nov 7 2000 seconds.au bash$ echo `ls -l /usr/share/apps/kjezz/sounds` total 40 -rw-r--r-- 1 root root 716 Nov 7 2000 reflect.au -rw-r--r-- 1 root root ... So, how can we embed a linefeed within an echoed character string? # Embedding a linefeed? echo &quot;Why doesn't this string \n split on two lines?&quot; # Doesn't split. # Let's try something else. echo echo $&quot;A line of text containing a linefeed.&quot; # Prints as two distinct lines (embedded linefeed). # But, is the &quot;$&quot; variable prefix really necessary? echo echo &quot;This string splits on two lines.&quot; # No, the &quot;$&quot; is not needed. echo echo &quot;---------------&quot; echo echo -n $&quot;Another line of text containing a linefeed.&quot; # Prints as two distinct lines (embedded linefeed). # Even the -n option fails to suppress the linefeed here. echo echo echo &quot;---------------&quot; echo echo # However, the following doesn't work as expected. # Why not? Hint: Assignment to a variable. string1=$&quot;Yet another line of text containing a linefeed (maybe).&quot; echo $string1 # Yet another line of text containing a linefeed (maybe). # ^ # Linefeed becomes a space. # Thanks, Steve Parker, for pointing this out. Note This command is a shell builtin, and not the same as /bin/echo, although its behavior is similar. bash$ type -a echo echo is a shell builtin echo is /bin/echo printf The printf, formatted print, command is an enhanced echo. It is a limited variant of the C language printf() library function, and its syntax is somewhat different. printf format-string... parameter... This is the Bash builtin version of the /bin/printf or /usr/bin/printf command. See the printf manpage (of the system command) for in-depth coverage. Caution Older versions of Bash may not support printf. Example 15-2. printf in action #!/bin/bash # printf demo declare -r PI=3.14159265358979 # Read-only variable, i.e., a constant. declare -r DecimalConstant=31373 Message1=&quot;Greetings,&quot; Message2=&quot;Earthling.&quot; echo printf &quot;Pi to 2 decimal places = %1.2f&quot; $PI echo printf &quot;Pi to 9 decimal places = %1.9f&quot; $PI # It even rounds off correctly. printf &quot;\n&quot; # Prints a line feed, # Equivalent to 'echo' . . . printf &quot;Constant = \t%d\n&quot; $DecimalConstant # Inserts tab (\t). printf &quot;%s %s \n&quot; $Message1 $Message2 echo # ==========================================# # Simulation of C function, sprintf(). # Loading a variable with a formatted string. echo Pi12=$(printf &quot;%1.12f&quot; $PI) echo &quot;Pi to 12 decimal places = $Pi12&quot; # Roundoff error! Msg=`printf &quot;%s %s \n&quot; $Message1 $Message2` echo $Msg; echo $Msg # As it happens, the 'sprintf' function can now be accessed #+ as a loadable module to Bash, #+ but this is not portable. exit 0 Formatting error messages is a useful application of printf E_BADDIR=85 var=nonexistent_directory error() { printf &quot;$@&quot; &gt;&amp;2 # Formats positional params passed, and sends them to stderr. echo exit $E_BADDIR } cd $var || error $&quot;Can't cd to %s.&quot; &quot;$var&quot; # Thanks, S.C. See also Example 36-17. read &quot;Reads&quot; the value of a variable from stdin, that is, interactively fetches input from the keyboard. The -a option lets read get array variables (see Example 27-6). Example 15-3. Variable assignment, using read #!/bin/bash # &quot;Reading&quot; variables. echo -n &quot;Enter the value of variable 'var1': &quot; # The -n option to echo suppresses newline. read var1 # Note no '$' in front of var1, since it is being set. echo &quot;var1 = $var1&quot; echo # A single 'read' statement can set multiple variables. echo -n &quot;Enter the values of variables 'var2' and 'var3' &quot; echo =n &quot;(separated by a space or tab): &quot; read var2 var3 echo &quot;var2 = $var2 var3 = $var3&quot; # If you input only one value, #+ the other variable(s) will remain unset (null). exit 0 A read without an associated variable assigns its input to the dedicated variable $REPLY. Example 15-4. What happens when read has no variable #!/bin/bash # read-novar.sh echo # -------------------------- # echo -n &quot;Enter a value: &quot; read var echo &quot;\&quot;var\&quot; = &quot;$var&quot;&quot; # Everything as expected here. # -------------------------- # echo # ------------------------------------------------------------------- # echo -n &quot;Enter another value: &quot; read # No variable supplied for 'read', therefore... #+ Input to 'read' assigned to default variable, $REPLY. var=&quot;$REPLY&quot; echo &quot;\&quot;var\&quot; = &quot;$var&quot;&quot; # This is equivalent to the first code block. # ------------------------------------------------------------------- # echo echo &quot;=========================&quot; echo # This example is similar to the &quot;reply.sh&quot; script. # However, this one shows that $REPLY is available #+ even after a 'read' to a variable in the conventional way. # ================================================================= # # In some instances, you might wish to discard the first value read. # In such cases, simply ignore the $REPLY variable. { # Code block. read # Line 1, to be discarded. read line2 # Line 2, saved in variable. } &lt;$0 echo &quot;Line 2 of this script is:&quot; echo &quot;$line2&quot; # # read-novar.sh echo # #!/bin/bash line discarded. # See also the soundcard-on.sh script. exit 0 Normally, inputting a \ suppresses a newline during input to a read. The -r option causes an inputted \ to be interpreted literally. Example 15-5. Multi-line input to read #!/bin/bash echo echo &quot;Enter a string terminated by a \\, then press &lt;ENTER&gt;.&quot; echo &quot;Then, enter a second string (no \\ this time), and again press &lt;ENTER&gt;.&quot; read var1 # The &quot;\&quot; suppresses the newline, when reading $var1. # first line \ # second line echo &quot;var1 = $var1&quot; # var1 = first line second line # For each line terminated by a &quot;\&quot; #+ you get a prompt on the next line to continue feeding characters into var1. echo; echo echo &quot;Enter another string terminated by a \\ , then press &lt;ENTER&gt;.&quot; read -r var2 # The -r option causes the &quot;\&quot; to be read literally. # first line \ echo &quot;var2 = $var2&quot; # var2 = first line \ # Data entry terminates with the first &lt;ENTER&gt;. echo exit 0 The read command has some interesting options that permit echoing a prompt and even reading keystrokes without hitting ENTER. # Read a keypress without hitting ENTER. read -s -n1 -p &quot;Hit a key &quot; keypress echo; echo &quot;Keypress was &quot;\&quot;$keypress\&quot;&quot;.&quot; # -s option means do not echo input. # -n N option means accept only N characters of input. # -p option means echo the following prompt before reading input. # Using these options is tricky, since they need to be in the correct order. The -n option to read also allows detection of the arrow keys and certain of the other unusual keys. Example 15-6. Detecting the arrow keys #!/bin/bash # arrow-detect.sh: Detects the arrow keys, and a few more. # Thank you, Sandro Magi, for showing me how. # -------------------------------------------- # Character codes generated by the keypresses. arrowup='\[A' arrowdown='\[B' arrowrt='\[C' arrowleft='\[D' insert='\[2' delete='\[3' # -------------------------------------------- SUCCESS=0 OTHER=65 echo -n &quot;Press a key... &quot; # May need to also press ENTER if a key not listed above pressed. read -n3 key # Read 3 characters. echo -n &quot;$key&quot; | grep &quot;$arrowup&quot; #Check if character code detected. if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;Up-arrow key pressed.&quot; exit $SUCCESS fi echo -n &quot;$key&quot; | grep &quot;$arrowdown&quot; if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;Down-arrow key pressed.&quot; exit $SUCCESS fi echo -n &quot;$key&quot; | grep &quot;$arrowrt&quot; if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;Right-arrow key pressed.&quot; exit $SUCCESS fi echo -n &quot;$key&quot; | grep &quot;$arrowleft&quot; if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;Left-arrow key pressed.&quot; exit $SUCCESS fi echo -n &quot;$key&quot; | grep &quot;$insert&quot; if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;\&quot;Insert\&quot; key pressed.&quot; exit $SUCCESS fi echo -n &quot;$key&quot; | grep &quot;$delete&quot; if [ &quot;$?&quot; -eq $SUCCESS ] then echo &quot;\&quot;Delete\&quot; key pressed.&quot; exit $SUCCESS fi echo &quot; Some other key pressed.&quot; exit $OTHER # ========================================= # # Mark Alexander came up with a simplified #+ version of the above script (Thank you!). # It eliminates the need for grep. #!/bin/bash uparrow=$'\x1b[A' downarrow=$'\x1b[B' leftarrow=$'\x1b[D' rightarrow=$'\x1b[C' read -s -n3 -p &quot;Hit an arrow key: &quot; x case &quot;$x&quot; in $uparrow) echo &quot;You pressed up-arrow&quot; ;; $downarrow) echo &quot;You pressed down-arrow&quot; ;; $leftarrow) echo &quot;You pressed left-arrow&quot; ;; $rightarrow) echo &quot;You pressed right-arrow&quot; ;; esac exit $? # ========================================= # # Antonio Macchi has a simpler alternative. #!/bin/bash while true do read -sn1 a test &quot;$a&quot; == `echo -en &quot;\e&quot;` || continue read -sn1 a test &quot;$a&quot; == &quot;[&quot; || continue read -sn1 a case &quot;$a&quot; in A) echo &quot;up&quot;;; B) echo &quot;down&quot;;; C) echo &quot;right&quot;;; D) echo &quot;left&quot;;; esac done # ========================================= # # Exercise: # -------- # 1) Add detection of the &quot;Home,&quot; &quot;End,&quot; &quot;PgUp,&quot; and &quot;PgDn&quot; keys. Note The -n option to read will not detect the ENTER (newline) key. The -t option to read permits timed input (see Example 9-4 and Example A-41). The -u option takes the file descriptor of the target file. The read command may also &quot;read&quot; its variable value from a file redirected to stdin. If the file contains more than one line, only the first line is assigned to the variable. If read has more than one parameter, then each of these variables gets assigned a successive whitespace-delineated string. Caution! Example 15-7. Using read with file redirection #!/bin/bash read var1 &lt;data-file echo &quot;var1 = $var1&quot; # var1 set to the entire first line of the input file &quot;data-file&quot; read var2 var3 &lt;data-file echo &quot;var2 = $var2 var3 = $var3&quot; # Note non-intuitive behavior of &quot;read&quot; here. # 1) Rewinds back to the beginning of input file. # 2) Each variable is now set to a corresponding string, # separated by whitespace, rather than to an entire line of text. # 3) The final variable gets the remainder of the line. # 4) If there are more variables to be set than whitespace-terminated strings # on the first line of the file, then the excess variables remain empty. echo &quot;------------------------------------------------&quot; # How to resolve the above problem with a loop: while read line do echo &quot;$line&quot; done &lt;data-file # Thanks, Heiner Steven for pointing this out. echo &quot;------------------------------------------------&quot; # Use $IFS (Internal Field Separator variable) to split a line of input to # &quot;read&quot;, if you do not want the default to be whitespace. echo &quot;List of all users:&quot; OIFS=$IFS; IFS=: # /etc/passwd uses &quot;:&quot; for field separator. while read name passwd uid gid fullname ignore do echo &quot;$name ($fullname)&quot; done &lt;/etc/passwd # I/O redirection. IFS=$OIFS # Restore original $IFS. # This code snippet also by Heiner Steven. # Setting the $IFS variable within the loop itself #+ eliminates the need for storing the original $IFS #+ in a temporary variable. # Thanks, Dim Segebart, for pointing this out. echo &quot;------------------------------------------------&quot; echo &quot;List of all users:&quot; while IFS=: read name passwd uid gid fullname ignore do echo &quot;$name ($fullname)&quot; done &lt;/etc/passwd # I/O redirection. echo echo &quot;\$IFS still $IFS&quot; exit 0 Note Piping output to a read, using echo to set variables will fail. Yet, piping the output of cat seems to work. cat file1 file2 | while read line do echo $line done However, as Bjön Eriksson shows: Example 15-8. Problems reading from a pipe #!/bin/sh # readpipe.sh # This example contributed by Bjon Eriksson. ### shopt -s lastpipe last=&quot;(null)&quot; cat $0 | while read line do echo &quot;{$line}&quot; last=$line done echo echo &quot;++++++++++++++++++++++&quot; printf &quot;\nAll done, last: $last\n&quot; # The output of this line #+ changes if you uncomment line 5. # (Bash, version -ge 4.2 required.) exit 0 # End of code. # (Partial) output of script follows. # The 'echo' supplies extra brackets. ############################################# ./readpipe.sh {#!/bin/sh} {last=&quot;(null)&quot;} {cat $0 |} {while read line} {do} {echo &quot;{$line}&quot;} {last=$line} {done} {printf &quot;nAll done, last: $lastn&quot;} All done, last: (null) The variable (last) is set within the loop/subshell but its value does not persist outside the loop. The gendiff script, usually found in /usr/bin on many Linux distros, pipes the output of find to a while read construct. find $1 \( -name &quot;*$2&quot; -o -name &quot;.*$2&quot; \) -print | while read f; do . . . Tip It is possible to paste text into the input field of a read (but not multiple lines!). See Example A-38. Filesystem cd The familiar cd change directory command finds use in scripts where execution of a command requires being in a specified directory. (cd /source/directory &amp;&amp; tar cf - . ) | (cd /dest/directory &amp;&amp; tar xpvf -) [from the previously cited example by Alan Cox] The -P (physical) option to cd causes it to ignore symbolic links. cd - changes to $OLDPWD, the previous working directory. Caution The cd command does not function as expected when presented with two forward slashes. bash$ cd // bash$ pwd // The output should, of course, be /. This is a problem both from the command-line and in a script. pwd Print Working Directory. This gives the user's (or script's) current directory (see Example 15-9). The effect is identical to reading the value of the builtin variable $PWD. pushd, popd, dirs This command set is a mechanism for bookmarking working directories, a means of moving back and forth through directories in an orderly manner. A pushdown stack is used to keep track of directory names. Options allow various manipulations of the directory stack. pushd dir-name pushes the path dir-name onto the directory stack (to the top of the stack) and simultaneously changes the current working directory to dir-name popd removes (pops) the top directory path name off the directory stack and simultaneously changes the current working directory to the directory now at the top of the stack. dirs lists the contents of the directory stack (compare this with the $DIRSTACK variable). A successful pushd or popd will automatically invoke dirs. Scripts that require various changes to the current working directory without hard-coding the directory name changes can make good use of these commands. Note that the implicit $DIRSTACK array variable, accessible from within a script, holds the contents of the directory stack. Example 15-9. Changing the current working directory #!/bin/bash dir1=/usr/local dir2=/var/spool pushd $dir1 # Will do an automatic 'dirs' (list directory stack to stdout). echo &quot;Now in directory `pwd`.&quot; # Uses back-quoted 'pwd'. # Now, do some stuff in directory 'dir1'. pushd $dir2 echo &quot;Now in directory `pwd`.&quot; # Now, do some stuff in directory 'dir2'. echo &quot;The top entry in the DIRSTACK array is $DIRSTACK.&quot; popd echo &quot;Now back in directory `pwd`.&quot; # Now, do some more stuff in directory 'dir1'. popd echo &quot;Now back in original working directory `pwd`.&quot; exit 0 # What happens if you don't 'popd' -- then exit the script? # Which directory do you end up in? Why? Variables let The let command carries out arithmetic operations on variables. [60] In many cases, it functions as a less complex version of expr. Example 15-10. Letting let do arithmetic. #!/bin/bash echo let a=11 # Same as 'a=11' let a=a+5 # Equivalent to let &quot;a = a + 5&quot; # (Double quotes and spaces make it more readable.) echo &quot;11 + 5 = $a&quot; # 16 let &quot;a &lt;&lt;= 3&quot; # Equivalent to let &quot;a = a &lt;&lt; 3&quot; echo &quot;\&quot;\$a\&quot; (=16) left-shifted 3 places = $a&quot; # 128 let &quot;a /= 4&quot; # Equivalent to let &quot;a = a / 4&quot; echo &quot;128 / 4 = $a&quot; # 32 let &quot;a -= 5&quot; # Equivalent to let &quot;a = a - 5&quot; echo &quot;32 - 5 = $a&quot; # 27 let &quot;a *= 10&quot; # Equivalent to let &quot;a = a * 10&quot; echo &quot;27 * 10 = $a&quot; # 270 let &quot;a %= 8&quot; # Equivalent to let &quot;a = a % 8&quot; echo &quot;270 modulo 8 = $a (270 / 8 = 33, remainder $a)&quot; # 6 # Does &quot;let&quot; permit C-style operators? # Yes, just as the (( ... )) double-parentheses construct does. let a++ # C-style (post) increment. echo &quot;6++ = $a&quot; # 6++ = 7 let a-- # C-style decrement. echo &quot;7-- = $a&quot; # 7-- = 6 # Of course, ++a, etc., also allowed . . . echo # Trinary operator. # Note that $a is 6, see above. let &quot;t = a&lt;7?7:11&quot; # True echo $t # 7 let a++ let &quot;t = a&lt;7?7:11&quot; # False echo $t # 11 exit Caution The let command can, in certain contexts, return a surprising exit status. # Evgeniy Ivanov points out: var=0 echo $? # 0 # As expected. let var++ echo $? # 1 # The command was successful, so why isn't $?=0 ??? # Anomaly! let var++ echo $? # 0 # As expected. # Likewise . . . let var=0 echo $? # 1 # The command was successful, so why isn't $?=0 ??? # However, as Jeff Gorak points out, #+ this is part of the design spec for 'let' . . . # &quot;If the last ARG evaluates to 0, let returns 1; # let returns 0 otherwise.&quot; ['help let'] eval eval arg1 [arg2] ... [argN] Combines the arguments in an expression or list of expressions and evaluates them. Any variables within the expression are expanded. The net result is to convert a string into a command. Tip The eval command can be used for code generation from the command-line or within a script. bash$ command_string=&quot;ps ax&quot; bash$ process=&quot;ps ax&quot; bash$ eval &quot;$command_string&quot; | grep &quot;$process&quot; 26973 pts/3 R+ 0:00 grep --color ps ax 26974 pts/3 R+ 0:00 ps ax Each invocation of eval forces a re-evaluation of its arguments. a='$b' b='$c' c=d echo $a # $b # First level. eval echo $a # $c # Second level. eval eval echo $a # d # Third level. # Thank you, E. Choroba. Example 15-11. Showing the effect of eval #!/bin/bash # Exercising &quot;eval&quot; ... y=`eval ls -l` # Similar to y=`ls -l` echo $y #+ but linefeeds removed because &quot;echoed&quot; variable is unquoted. echo echo &quot;$y&quot; # Linefeeds preserved when variable is quoted. echo; echo y=`eval df` # Similar to y=`df` echo $y #+ but linefeeds removed. # When LF's not preserved, it may make it easier to parse output, #+ using utilities such as &quot;awk&quot;. echo echo &quot;===========================================================&quot; echo eval &quot;`seq 3 | sed -e 's/.*/echo var&amp;=ABCDEFGHIJ/'`&quot; # var1=ABCDEFGHIJ # var2=ABCDEFGHIJ # var3=ABCDEFGHIJ echo echo &quot;===========================================================&quot; echo # Now, showing how to do something useful with &quot;eval&quot; . . . # (Thank you, E. Choroba!) version=3.4 # Can we split the version into major and minor #+ part in one command? echo &quot;version = $version&quot; eval major=${version/./;minor=} # Replaces '.' in version by ';minor=' # The substitution yields '3; minor=4' #+ so eval does minor=4, major=3 echo Major: $major, minor: $minor # Major: 3, minor: 4 Example 15-12. Using eval to select among variables #!/bin/bash # arr-choice.sh # Passing arguments to a function to select #+ one particular variable out of a group. arr0=( 10 11 12 13 14 15 ) arr1=( 20 21 22 23 24 25 ) arr2=( 30 31 32 33 34 35 ) # 0 1 2 3 4 5 Element number (zero-indexed) choose_array () { eval array_member=\${arr${array_number}[element_number]} # ^ ^^^^^^^^^^^^ # Using eval to construct the name of a variable, #+ in this particular case, an array name. echo &quot;Element $element_number of array $array_number is $array_member&quot; } # Function can be rewritten to take parameters. array_number=0 # First array. element_number=3 choose_array # 13 array_number=2 # Third array. element_number=4 choose_array # 34 array_number=3 # Null array (arr3 not allocated). element_number=4 choose_array # (null) # Thank you, Antonio Macchi, for pointing this out. Example 15-13. Echoing the command-line parameters #!/bin/bash # echo-params.sh # Call this script with a few command-line parameters. # For example: # sh echo-params.sh first second third fourth fifth params=$# # Number of command-line parameters. param=1 # Start at first command-line param. while [ &quot;$param&quot; -le &quot;$params&quot; ] do echo -n &quot;Command-line parameter &quot; echo -n \$$param # Gives only the *name* of variable. # ^^^ # $1, $2, $3, etc. # Why? # \$ escapes the first &quot;$&quot; #+ so it echoes literally, #+ and $param dereferences &quot;$param&quot; . . . #+ . . . as expected. echo -n &quot; = &quot; eval echo \$$param # Gives the *value* of variable. # ^^^^ ^^^ # The &quot;eval&quot; forces the *evaluation* #+ of \$$ #+ as an indirect variable reference. (( param ++ )) # On to the next. done exit $? # ================================================= $ sh echo-params.sh first second third fourth fifth Command-line parameter $1 = first Command-line parameter $2 = second Command-line parameter $3 = third Command-line parameter $4 = fourth Command-line parameter $5 = fifth Example 15-14. Forcing a log-off #!/bin/bash # Killing ppp to force a log-off. # For dialup connection, of course. # Script should be run as root user. SERPORT=ttyS3 # Depending on the hardware and even the kernel version, #+ the modem port on your machine may be different -- #+ /dev/ttyS1 or /dev/ttyS2. killppp=&quot;eval kill -9 `ps ax | awk '/ppp/ { print $1 }'`&quot; # -------- process ID of ppp ------- $killppp # This variable is now a command. # The following operations must be done as root user. chmod 666 /dev/$SERPORT # Restore r+w permissions, or else what? # Since doing a SIGKILL on ppp changed the permissions on the serial port, #+ we restore permissions to previous state. rm /var/lock/LCK..$SERPORT # Remove the serial port lock file. Why? exit $? # Exercises: # --------- # 1) Have script check whether root user is invoking it. # 2) Do a check on whether the process to be killed #+ is actually running before attempting to kill it. # 3) Write an alternate version of this script based on 'fuser': #+ if [ fuser -s /dev/modem ]; then . . . Example 15-15. A version of rot13 #!/bin/bash # A version of &quot;rot13&quot; using 'eval'. # Compare to &quot;rot13.sh&quot; example. setvar_rot_13() # &quot;rot13&quot; scrambling { local varname=$1 varvalue=$2 eval $varname='$(echo &quot;$varvalue&quot; | tr a-z n-za-m)' } setvar_rot_13 var &quot;foobar&quot; # Run &quot;foobar&quot; through rot13. echo $var # sbbone setvar_rot_13 var &quot;$var&quot; # Run &quot;sbbone&quot; through rot13. # Back to original variable. echo $var # foobar # This example by Stephane Chazelas. # Modified by document author. exit 0 Here is another example of using eval to evaluate a complex expression, this one from an earlier version of YongYe's Tetris game script. eval ${1}+=\&quot;${x} ${y} \&quot; Example A-53 uses eval to convert array elements into a command list. The eval command occurs in the older version of indirect referencing. eval var=\$$var Tip The eval command can be used to parameterize brace expansion. Caution The eval command can be risky, and normally should be avoided when there exists a reasonable alternative. An eval $COMMANDS executes the contents of COMMANDS, which may contain such unpleasant surprises as rm -rf *. Running an eval on unfamiliar code written by persons unknown is living dangerously. set The set command changes the value of internal script variables/options. One use for this is to toggle option flags which help determine the behavior of the script. Another application for it is to reset the positional parameters that a script sees as the result of a command (set `command`). The script can then parse the fields of the command output. Example 15-16. Using set with positional parameters #!/bin/bash # ex34.sh # Script &quot;set-test&quot; # Invoke this script with three command-line parameters, # for example, &quot;sh ex34.sh one two three&quot;. echo echo &quot;Positional parameters before set \`uname -a\` :&quot; echo &quot;Command-line argument #1 = $1&quot; echo &quot;Command-line argument #2 = $2&quot; echo &quot;Command-line argument #3 = $3&quot; set `uname -a` # Sets the positional parameters to the output # of the command `uname -a` echo echo +++++ echo $_ # +++++ # Flags set in script. echo $- # hB # Anomalous behavior? echo echo &quot;Positional parameters after set \`uname -a\` :&quot; # $1, $2, $3, etc. reinitialized to result of `uname -a` echo &quot;Field #1 of 'uname -a' = $1&quot; echo &quot;Field #2 of 'uname -a' = $2&quot; echo &quot;Field #3 of 'uname -a' = $3&quot; echo \#\#\# echo $_ # ### echo exit 0 More fun with positional parameters. Example 15-17. Reversing the positional parameters #!/bin/bash # revposparams.sh: Reverse positional parameters. # Script by Dan Jacobson, with stylistic revisions by document author. set a\ b c d\ e; # ^ ^ Spaces escaped # ^ ^ Spaces not escaped OIFS=$IFS; IFS=:; # ^ Saving old IFS and setting new one. echo until [ $# -eq 0 ] do # Step through positional parameters. echo &quot;### k0 = &quot;$k&quot;&quot; # Before k=$1:$k; # Append each pos param to loop variable. # ^ echo &quot;### k = &quot;$k&quot;&quot; # After echo shift; done set $k # Set new positional parameters. echo - echo $# # Count of positional parameters. echo - echo for i # Omitting the &quot;in list&quot; sets the variable -- i -- #+ to the positional parameters. do echo $i # Display new positional parameters. done IFS=$OIFS # Restore IFS. # Question: # Is it necessary to set an new IFS, internal field separator, #+ in order for this script to work properly? # What happens if you don't? Try it. # And, why use the new IFS -- a colon -- in line 17, #+ to append to the loop variable? # What is the purpose of this? exit 0 $ ./revposparams.sh ### k0 = ### k = a b ### k0 = a b ### k = c a b ### k0 = c a b ### k = d e c a b - 3 - d e c a b Invoking set without any options or arguments simply lists all the environmental and other variables that have been initialized. bash$ set AUTHORCOPY=/home/bozo/posts BASH=/bin/bash BASH_VERSION=$'2.05.8(1)-release' ... XAUTHORITY=/home/bozo/.Xauthority _=/etc/bashrc variable22=abc variable23=xzy Using set with the -- option explicitly assigns the contents of a variable to the positional parameters. If no variable follows the -- it unsets the positional parameters. Example 15-18. Reassigning the positional parameters #!/bin/bash variable=&quot;one two three four five&quot; set -- $variable # Sets positional parameters to the contents of &quot;$variable&quot;. first_param=$1 second_param=$2 shift; shift # Shift past first two positional params. # shift 2 also works. remaining_params=&quot;$*&quot; echo echo &quot;first parameter = $first_param&quot; # one echo &quot;second parameter = $second_param&quot; # two echo &quot;remaining parameters = $remaining_params&quot; # three four five echo; echo # Again. set -- $variable first_param=$1 second_param=$2 echo &quot;first parameter = $first_param&quot; # one echo &quot;second parameter = $second_param&quot; # two # ====================================================== set -- # Unsets positional parameters if no variable specified. first_param=$1 second_param=$2 echo &quot;first parameter = $first_param&quot; # (null value) echo &quot;second parameter = $second_param&quot; # (null value) exit 0 See also Example 11-2 and Example 16-56. unset The unset command deletes a shell variable, effectively setting it to null. Note that this command does not affect positional parameters. bash$ unset PATH bash$ echo $PATH bash$ Example 15-19. &quot;Unsetting&quot; a variable #!/bin/bash # unset.sh: Unsetting a variable. variable=hello # Initialized. echo &quot;variable = $variable&quot; unset variable # Unset. # In this particular context, #+ same effect as: variable= echo &quot;(unset) variable = $variable&quot; # $variable is null. if [ -z &quot;$variable&quot; ] # Try a string-length test. then echo &quot;\$variable has zero length.&quot; fi exit 0 Note In most contexts, an undeclared variable and one that has been unset are equivalent. However, the ${parameter:-default} parameter substitution construct can distinguish between the two. export The export [61] command makes available variables to all child processes of the running script or shell. One important use of the export command is in startup files, to initialize and make accessible environmental variables to subsequent user processes. Caution Unfortunately, there is no way to export variables back to the parent process, to the process that called or invoked the script or shell. Example 15-20. Using export to pass a variable to an embedded awk script #!/bin/bash # Yet another version of the &quot;column totaler&quot; script (col-totaler.sh) #+ that adds up a specified column (of numbers) in the target file. # This uses the environment to pass a script variable to 'awk' . . . #+ and places the awk script in a variable. ARGS=2 E_WRONGARGS=85 if [ $# -ne &quot;$ARGS&quot; ] # Check for proper number of command-line args. then echo &quot;Usage: `basename $0` filename column-number&quot; exit $E_WRONGARGS fi filename=$1 column_number=$2 #===== Same as original script, up to this point =====# export column_number # Export column number to environment, so it's available for retrieval. # ----------------------------------------------- awkscript='{ total += $ENVIRON[&quot;column_number&quot;] } END { print total }' # Yes, a variable can hold an awk script. # ----------------------------------------------- # Now, run the awk script. awk &quot;$awkscript&quot; &quot;$filename&quot; # Thanks, Stephane Chazelas. exit 0 Tip It is possible to initialize and export variables in the same operation, as in export var1=xxx. However, as Greg Keraunen points out, in certain situations this may have a different effect than setting a variable, then exporting it. bash$ export var=(a b); echo ${var[0]} (a b) bash$ var=(a b); export var; echo ${var[0]} a Note A variable to be exported may require special treatment. See Example M-2. declare, typeset The declare and typeset commands specify and/or restrict properties of variables. readonly Same as declare -r, sets a variable as read-only, or, in effect, as a constant. Attempts to change the variable fail with an error message. This is the shell analog of the C language const type qualifier. getopts This powerful tool parses command-line arguments passed to the script. This is the Bash analog of the getopt external command and the getopt library function familiar to C programmers. It permits passing and concatenating multiple options [62] and associated arguments to a script (for example scriptname -abc -e /usr/local). The getopts construct uses two implicit variables. $OPTIND is the argument pointer (OPTion INDex) and $OPTARG (OPTion ARGument) the (optional) argument attached to an option. A colon following the option name in the declaration tags that option as having an associated argument. A getopts construct usually comes packaged in a while loop, which processes the options and arguments one at a time, then increments the implicit $OPTIND variable to point to the next. Note The arguments passed from the command-line to the script must be preceded by a dash (-). It is the prefixed - that lets getopts recognize command-line arguments as options. In fact, getopts will not process arguments without the prefixed -, and will terminate option processing at the first argument encountered lacking them. The getopts template differs slightly from the standard while loop, in that it lacks condition brackets. The getopts construct is a highly functional replacement for the traditional getopt external command. while getopts &quot;:abcde:fg&quot; Option # Initial declaration. # a, b, c, d, e, f, and g are the options (flags) expected. # The : after option 'e' shows it will have an argument passed with it. do case $Option in a ) # Do something with variable 'a'. b ) # Do something with variable 'b'. ... e) # Do something with 'e', and also with $OPTARG, # which is the associated argument passed with option 'e'. ... g ) # Do something with variable 'g'. esac done shift $(($OPTIND - 1)) # Move argument pointer to next. # All this is not nearly as complicated as it looks &lt;grin&gt;. Example 15-21. Using getopts to read the options/arguments passed to a script #!/bin/bash # ex33.sh: Exercising getopts and OPTIND # Script modified 10/09/03 at the suggestion of Bill Gradwohl. # Here we observe how 'getopts' processes command-line arguments to script. # The arguments are parsed as &quot;options&quot; (flags) and associated arguments. # Try invoking this script with: # 'scriptname -mn' # 'scriptname -oq qOption' (qOption can be some arbitrary string.) # 'scriptname -qXXX -r' # # 'scriptname -qr' #+ - Unexpected result, takes &quot;r&quot; as the argument to option &quot;q&quot; # 'scriptname -q -r' #+ - Unexpected result, same as above # 'scriptname -mnop -mnop' - Unexpected result # (OPTIND is unreliable at stating where an option came from.) # # If an option expects an argument (&quot;flag:&quot;), then it will grab #+ whatever is next on the command-line. NO_ARGS=0 E_OPTERROR=85 if [ $# -eq &quot;$NO_ARGS&quot; ] # Script invoked with no command-line args? then echo &quot;Usage: `basename $0` options (-mnopqrs)&quot; exit $E_OPTERROR # Exit and explain usage. # Usage: scriptname -options # Note: dash (-) necessary fi while getopts &quot;:mnopq:rs&quot; Option do case $Option in m ) echo &quot;Scenario #1: option -m- [OPTIND=${OPTIND}]&quot;;; n | o ) echo &quot;Scenario #2: option -$Option- [OPTIND=${OPTIND}]&quot;;; p ) echo &quot;Scenario #3: option -p- [OPTIND=${OPTIND}]&quot;;; q ) echo &quot;Scenario #4: option -q-\ with argument \&quot;$OPTARG\&quot; [OPTIND=${OPTIND}]&quot;;; # Note that option 'q' must have an associated argument, #+ otherwise it falls through to the default. r | s ) echo &quot;Scenario #5: option -$Option-&quot;;; * ) echo &quot;Unimplemented option chosen.&quot;;; # Default. esac done shift $(($OPTIND - 1)) # Decrements the argument pointer so it points to next argument. # $1 now references the first non-option item supplied on the command-line #+ if one exists. exit $? # As Bill Gradwohl states, # &quot;The getopts mechanism allows one to specify: scriptname -mnop -mnop #+ but there is no reliable way to differentiate what came #+ from where by using OPTIND.&quot; # There are, however, workarounds. Script Behavior source, . (dot command) This command, when invoked from the command-line, executes a script. Within a script, a source file-name loads the file file-name. Sourcing a file (dot-command) imports code into the script, appending to the script (same effect as the #include directive in a C program). The net result is the same as if the &quot;sourced&quot; lines of code were physically present in the body of the script. This is useful in situations when multiple scripts use a common data file or function library. Example 15-22. &quot;Including&quot; a data file #!/bin/bash # Note that this example must be invoked with bash, i.e., bash ex38.sh #+ not sh ex38.sh ! . data-file # Load a data file. # Same effect as &quot;source data-file&quot;, but more portable. # The file &quot;data-file&quot; must be present in current working directory, #+ since it is referred to by its basename. # Now, let's reference some data from that file. echo &quot;variable1 (from data-file) = $variable1&quot; echo &quot;variable3 (from data-file) = $variable3&quot; let &quot;sum = $variable2 + $variable4&quot; echo &quot;Sum of variable2 + variable4 (from data-file) = $sum&quot; echo &quot;message1 (from data-file) is \&quot;$message1\&quot;&quot; # Escaped quotes echo &quot;message2 (from data-file) is \&quot;$message2\&quot;&quot; print_message This is the message-print function in the data-file. exit $? File data-file for Example 15-22, above. Must be present in same directory. # This is a data file loaded by a script. # Files of this type may contain variables, functions, etc. # It loads with a 'source' or '.' command from a shell script. # Let's initialize some variables. variable1=23 variable2=474 variable3=5 variable4=97 message1=&quot;Greetings from *** line $LINENO *** of the data file!&quot; message2=&quot;Enough for now. Goodbye.&quot; print_message () { # Echoes any message passed to it. if [ -z &quot;$1&quot; ] then return 1 # Error, if argument missing. fi echo until [ -z &quot;$1&quot; ] do # Step through arguments passed to function. echo -n &quot;$1&quot; # Echo args one at a time, suppressing line feeds. echo -n &quot; &quot; # Insert spaces between words. shift # Next one. done echo return 0 } If the sourced file is itself an executable script, then it will run, then return control to the script that called it. A sourced executable script may use a return for this purpose. Arguments may be (optionally) passed to the sourced file as positional parameters. source $filename $arg1 arg2 It is even possible for a script to source itself, though this does not seem to have any practical applications. Example 15-23. A (useless) script that sources itself #!/bin/bash # self-source.sh: a script sourcing itself &quot;recursively.&quot; # From &quot;Stupid Script Tricks,&quot; Volume II. MAXPASSCNT=100 # Maximum number of execution passes. echo -n &quot;$pass_count &quot; # At first execution pass, this just echoes two blank spaces, #+ since $pass_count still uninitialized. let &quot;pass_count += 1&quot; # Assumes the uninitialized variable $pass_count #+ can be incremented the first time around. # This works with Bash and pdksh, but #+ it relies on non-portable (and possibly dangerous) behavior. # Better would be to initialize $pass_count to 0 before incrementing. while [ &quot;$pass_count&quot; -le $MAXPASSCNT ] do . $0 # Script &quot;sources&quot; itself, rather than calling itself. # ./$0 (which would be true recursion) doesn't work here. Why? done # What occurs here is not actually recursion, #+ since the script effectively &quot;expands&quot; itself, i.e., #+ generates a new section of code #+ with each pass through the 'while' loop', # with each 'source' in line 20. # # Of course, the script interprets each newly 'sourced' &quot;#!&quot; line #+ as a comment, and not as the start of a new script. echo exit 0 # The net effect is counting from 1 to 100. # Very impressive. # Exercise: # -------- # Write a script that uses this trick to actually do something useful. exit Unconditionally terminates a script. [63] The exit command may optionally take an integer argument, which is returned to the shell as the exit status of the script. It is good practice to end all but the simplest scripts with an exit 0, indicating a successful run. Note If a script terminates with an exit lacking an argument, the exit status of the script is the exit status of the last command executed in the script, not counting the exit. This is equivalent to an exit $?. Note An exit command may also be used to terminate a subshell. exec This shell builtin replaces the current process with a specified command. Normally, when the shell encounters a command, it forks off a child process to actually execute the command. Using the exec builtin, the shell does not fork, and the command exec'ed replaces the shell. When used in a script, therefore, it forces an exit from the script when the exec'ed command terminates. [64] Example 15-24. Effects of exec #!/bin/bash exec echo &quot;Exiting \&quot;$0\&quot; at line $LINENO.&quot; # Exit from script here. # $LINENO is an internal Bash variable set to the line number it's on. # ---------------------------------- # The following lines never execute. echo &quot;This echo fails to echo.&quot; exit 99 # This script will not exit here. # Check exit value after script terminates #+ with an 'echo $?'. # It will *not* be 99. Example 15-25. A script that exec's itself #!/bin/bash # self-exec.sh # Note: Set permissions on this script to 555 or 755, # then call it with ./self-exec.sh or sh ./self-exec.sh. echo echo &quot;This line appears ONCE in the script, yet it keeps echoing.&quot; echo &quot;The PID of this instance of the script is still $$.&quot; # Demonstrates that a subshell is not forked off. echo &quot;==================== Hit Ctl-C to exit ====================&quot; sleep 1 exec $0 # Spawns another instance of this same script #+ that replaces the previous one. echo &quot;This line will never echo!&quot; # Why not? exit 99 # Will not exit here! # Exit code will not be 99! An exec also serves to reassign file descriptors. For example, exec &lt;zzz-file replaces stdin with the file zzz-file. Note The -exec option to find is not the same as the exec shell builtin. shopt This command permits changing shell options on the fly (see Example 25-1 and Example 25-2). It often appears in the Bash startup files, but also has its uses in scripts. Needs version 2 or later of Bash. shopt -s cdspell # Allows minor misspelling of directory names with 'cd' # Option -s sets, -u unsets. cd /hpme # Oops! Mistyped '/home'. pwd # /home # The shell corrected the misspelling. caller Putting a caller command inside a function echoes to stdout information about the caller of that function. #!/bin/bash function1 () { # Inside function1 (). caller 0 # Tell me about it. } function1 # Line 9 of script. # 9 main test.sh # ^ Line number that the function was called from. # ^^^^ Invoked from &quot;main&quot; part of script. # ^^^^^^^ Name of calling script. caller 0 # Has no effect because it's not inside a function. A caller command can also return caller information from a script sourced within another script. Analogous to a function, this is a &quot;subroutine call.&quot; You may find this command useful in debugging. Commands true A command that returns a successful (zero) exit status, but does nothing else. bash$ true bash$ echo $? 0 # Endless loop while true # alias for &quot;:&quot; do operation-1 operation-2 ... operation-n # Need a way to break out of loop or script will hang. done false A command that returns an unsuccessful exit status, but does nothing else. bash$ false bash$ echo $? 1 # Testing &quot;false&quot; if false then echo &quot;false evaluates \&quot;true\&quot;&quot; else echo &quot;false evaluates \&quot;false\&quot;&quot; fi # false evaluates &quot;false&quot; # Looping while &quot;false&quot; (null loop) while false do # The following code will not execute. operation-1 operation-2 ... operation-n # Nothing happens! done type [cmd] Similar to the which external command, type cmd identifies &quot;cmd.&quot; Unlike which, type is a Bash builtin. The useful -a option to type identifies keywords and builtins, and also locates system commands with identical names. bash$ type '[' [ is a shell builtin bash$ type -a '[' [ is a shell builtin [ is /usr/bin/[ bash$ type type type is a shell builtin The type command can be useful for testing whether a certain command exists. hash [cmds] Records the path name of specified commands -- in the shell hash table [65] -- so the shell or script will not need to search the $PATH on subsequent calls to those commands. When hash is called with no arguments, it simply lists the commands that have been hashed. The -r option resets the hash table. bind The bind builtin displays or modifies readline [66] key bindings. help Gets a short usage summary of a shell builtin. This is the counterpart to whatis, but for builtins. The display of help information got a much-needed update in the version 4 release of Bash. bash$ help exit exit: exit [n] Exit the shell with a status of N. If N is omitted, the exit status is that of the last command executed. 15.1. Job Control Commands Certain of the following job control commands take a job identifier as an argument. See the table at end of the chapter. jobs Lists the jobs running in the background, giving the job number. Not as useful as ps. Note It is all too easy to confuse jobs and processes. Certain builtins, such as kill, disown, and wait accept either a job number or a process number as an argument. The fg, bg and jobs commands accept only a job number. bash$ sleep 100 &amp; [1] 1384 bash $ jobs [1]+ Running sleep 100 &amp; &quot;1&quot; is the job number (jobs are maintained by the current shell). &quot;1384&quot; is the PID or process ID number (processes are maintained by the system). To kill this job/process, either a kill %1 or a kill 1384 works. Thanks, S.C. disown Remove job(s) from the shell's table of active jobs. fg, bg The fg command switches a job running in the background into the foreground. The bg command restarts a suspended job, and runs it in the background. If no job number is specified, then the fg or bg command acts upon the currently running job. wait Suspend script execution until all jobs running in background have terminated, or until the job number or process ID specified as an option terminates. Returns the exit status of waited-for command. You may use the wait command to prevent a script from exiting before a background job finishes executing (this would create a dreaded orphan process). Example 15-26. Waiting for a process to finish before proceeding #!/bin/bash ROOT_UID=0 # Only users with $UID 0 have root privileges. E_NOTROOT=65 E_NOPARAMS=66 if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo &quot;Must be root to run this script.&quot; # &quot;Run along kid, it's past your bedtime.&quot; exit $E_NOTROOT fi if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` find-string&quot; exit $E_NOPARAMS fi echo &quot;Updating 'locate' database...&quot; echo &quot;This may take a while.&quot; updatedb /usr &amp; # Must be run as root. wait # Don't run the rest of the script until 'updatedb' finished. # You want the the database updated before looking up the file name. locate $1 # Without the 'wait' command, in the worse case scenario, #+ the script would exit while 'updatedb' was still running, #+ leaving it as an orphan process. exit 0 Optionally, wait can take a job identifier as an argument, for example, wait%1 or wait $PPID. [67] See the job id table. Tip Within a script, running a command in the background with an ampersand (&amp;) may cause the script to hang until ENTER is hit. This seems to occur with commands that write to stdout. It can be a major annoyance. #!/bin/bash # test.sh ls -l &amp; echo &quot;Done.&quot; bash$ ./test.sh Done. [bozo@localhost test-scripts]$ total 1 -rwxr-xr-x 1 bozo bozo 34 Oct 11 15:09 test.sh _ As Walter Brameld IV explains it: As far as I can tell, such scripts don't actually hang. It just seems that they do because the background command writes text to the console after the prompt. The user gets the impression that the prompt was never displayed. Here's the sequence of events: 1. Script launches background command. 2. Script exits. 3. Shell displays the prompt. 4. Background command continues running and writing text to the console. 5. Background command finishes. 6. User doesn't see a prompt at the bottom of the output, thinks script is hanging. Placing a wait after the background command seems to remedy this. #!/bin/bash # test.sh ls -l &amp; echo &quot;Done.&quot; wait bash$ ./test.sh Done. [bozo@localhost test-scripts]$ total 1 -rwxr-xr-x 1 bozo bozo 34 Oct 11 15:09 test.sh Redirecting the output of the command to a file or even to /dev/null also takes care of this problem. suspend This has a similar effect to Control-Z, but it suspends the shell (the shell's parent process should resume it at an appropriate time). logout Exit a login shell, optionally specifying an exit status. times Gives statistics on the system time elapsed when executing commands, in the following form: 0m0.020s 0m0.020s This capability is of relatively limited value, since it is not common to profile and benchmark shell scripts. kill Forcibly terminate a process by sending it an appropriate terminate signal (see Example 17-6). Example 15-27. A script that kills itself #!/bin/bash # self-destruct.sh kill $$ # Script kills its own process here. # Recall that &quot;$$&quot; is the script's PID. echo &quot;This line will not echo.&quot; # Instead, the shell sends a &quot;Terminated&quot; message to stdout. exit 0 # Normal exit? No! # After this script terminates prematurely, #+ what exit status does it return? # # sh self-destruct.sh # echo $? # 143 # # 143 = 128 + 15 # TERM signal Note kill -l lists all the signals (as does the file /usr/include/asm/signal.h). A kill -9 is a sure kill, which will usually terminate a process that stubbornly refuses to die with a plain kill. Sometimes, a kill -15 works. A zombie process, that is, a child process that has terminated, but that the parent process has not (yet) killed, cannot be killed by a logged-on user -- you can't kill something that is already dead -- but init will generally clean it up sooner or later. killall The killall command kills a running process by name, rather than by process ID. If there are multiple instances of a particular command running, then doing a killall on that command will terminate them all. Note This refers to the killall command in /usr/bin, not the killall script in /etc/rc.d/init.d. command The command directive disables aliases and functions for the command immediately following it. bash$ command ls Note This is one of three shell directives that effect script command processing. The others are builtin and enable. builtin Invoking builtin BUILTIN_COMMAND runs the command BUILTIN_COMMAND as a shell builtin, temporarily disabling both functions and external system commands with the same name. enable This either enables or disables a shell builtin command. As an example, enable -n kill disables the shell builtin kill, so that when Bash subsequently encounters kill, it invokes the external command /bin/kill. The -a option to enable lists all the shell builtins, indicating whether or not they are enabled. The -f filename option lets enable load a builtin as a shared library (DLL) module from a properly compiled object file. [68]. autoload This is a port to Bash of the ksh autoloader. With autoload in place, a function with an autoload declaration will load from an external file at its first invocation. [69] This saves system resources. Note that autoload is not a part of the core Bash installation. It needs to be loaded in with enable -f (see above). Table 15-1. Job identifiers Notation Meaning %N Job number [N] %S Invocation (command-line) of job begins with string S %?S Invocation (command-line) of job contains within it string S %% &quot;current&quot; job (last job stopped in foreground or started in background) %+ &quot;current&quot; job (last job stopped in foreground or started in background) %- Last job $! Last background process Chapter 16. External Filters, Programs and Commands Standard UNIX commands make shell scripts more versatile. The power of scripts comes from coupling system commands and shell directives with simple programming constructs. 16.1. Basic Commands The first commands a novice learns ls The basic file &quot;list&quot; command. It is all too easy to underestimate the power of this humble command. For example, using the -R, recursive option, ls provides a tree-like listing of a directory structure. Other useful options are -S, sort listing by file size, -t, sort by file modification time, -v, sort by (numerical) version numbers embedded in the filenames, [70] -b, show escape characters, and -i, show file inodes (see Example 16-4). bash$ ls -l -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter10.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter11.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter12.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter1.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter2.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter3.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:49 Chapter_headings.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:49 Preface.txt bash$ ls -lv total 0 -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:49 Chapter_headings.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:49 Preface.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter1.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter2.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter3.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter10.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter11.txt -rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter12.txt Tip The ls command returns a non-zero exit status when attempting to list a non-existent file. bash$ ls abc ls: abc: No such file or directory bash$ echo $? 2 Example 16-1. Using ls to create a table of contents for burning a CDR disk #!/bin/bash # ex40.sh (burn-cd.sh) # Script to automate burning a CDR. SPEED=10 # May use higher speed if your hardware supports it. IMAGEFILE=cdimage.iso CONTENTSFILE=contents # DEVICE=/dev/cdrom For older versions of cdrecord DEVICE=&quot;1,0,0&quot; DEFAULTDIR=/opt # This is the directory containing the data to be burned. # Make sure it exists. # Exercise: Add a test for this. # Uses Joerg Schilling's &quot;cdrecord&quot; package: # http://www.fokus.fhg.de/usr/schilling/cdrecord.html # If this script invoked as an ordinary user, may need to suid cdrecord #+ chmod u+s /usr/bin/cdrecord, as root. # Of course, this creates a security hole, though a relatively minor one. if [ -z &quot;$1&quot; ] then IMAGE_DIRECTORY=$DEFAULTDIR # Default directory, if not specified on command-line. else IMAGE_DIRECTORY=$1 fi # Create a &quot;table of contents&quot; file. ls -lRF $IMAGE_DIRECTORY &gt; $IMAGE_DIRECTORY/$CONTENTSFILE # The &quot;l&quot; option gives a &quot;long&quot; file listing. # The &quot;R&quot; option makes the listing recursive. # The &quot;F&quot; option marks the file types (directories get a trailing /). echo &quot;Creating table of contents.&quot; # Create an image file preparatory to burning it onto the CDR. mkisofs -r -o $IMAGEFILE $IMAGE_DIRECTORY echo &quot;Creating ISO9660 file system image ($IMAGEFILE).&quot; # Burn the CDR. echo &quot;Burning the disk.&quot; echo &quot;Please be patient, this will take a while.&quot; wodim -v -isosize dev=$DEVICE $IMAGEFILE # In newer Linux distros, the &quot;wodim&quot; utility assumes the #+ functionality of &quot;cdrecord.&quot; exitcode=$? echo &quot;Exit code = $exitcode&quot; exit $exitcode cat, tac cat, an acronym for concatenate, lists a file to stdout. When combined with redirection (&gt; or &gt;&gt;), it is commonly used to concatenate files. # Uses of 'cat' cat filename # Lists the file. cat file.1 file.2 file.3 &gt; file.123 # Combines three files into one. The -n option to cat inserts consecutive numbers before all lines of the target file(s). The -b option numbers only the non-blank lines. The -v option echoes nonprintable characters, using ^ notation. The -s option squeezes multiple consecutive blank lines into a single blank line. See also Example 16-28 and Example 16-24. Note In a pipe, it may be more efficient to redirect the stdin to a file, rather than to cat the file. cat filename | tr a-z A-Z tr a-z A-Z &lt; filename # Same effect, but starts one less process, #+ and also dispenses with the pipe. tac, is the inverse of cat, listing a file backwards from its end. rev reverses each line of a file, and outputs to stdout. This does not have the same effect as tac, as it preserves the order of the lines, but flips each one around (mirror image). bash$ cat file1.txt This is line 1. This is line 2. bash$ tac file1.txt This is line 2. This is line 1. bash$ rev file1.txt .1 enil si sihT .2 enil si sihT cp This is the file copy command. cp file1 file2 copies file1 to file2, overwriting file2 if it already exists (see Example 16-6). Tip Particularly useful are the -a archive flag (for copying an entire directory tree), the -u update flag (which prevents overwriting identically-named newer files), and the -r and -R recursive flags. cp -u source_dir/* dest_dir # &quot;Synchronize&quot; dest_dir to source_dir #+ by copying over all newer and not previously existing files. mv This is the file move command. It is equivalent to a combination of cp and rm. It may be used to move multiple files to a directory, or even to rename a directory. For some examples of using mv in a script, see Example 10-11 and Example A-2. Note When used in a non-interactive script, mv takes the -f (force) option to bypass user input. When a directory is moved to a preexisting directory, it becomes a subdirectory of the destination directory. bash$ mv source_directory target_directory bash$ ls -lF target_directory total 1 drwxrwxr-x 2 bozo bozo 1024 May 28 19:20 source_directory/ rm Delete (remove) a file or files. The -f option forces removal of even readonly files, and is useful for bypassing user input in a script. Note The rm command will, by itself, fail to remove filenames beginning with a dash. Why? Because rm sees a dash-prefixed filename as an option. bash$ rm -badname rm: invalid option -- b Try `rm --help' for more information. One clever workaround is to precede the filename with a &quot; -- &quot; (the end-of-options flag). bash$ rm -- -badname Another method to is to preface the filename to be removed with a dot-slash . bash$ rm ./-badname Warning When used with the recursive flag -r, this command removes files all the way down the directory tree from the current directory. A careless rm -rf * can wipe out a big chunk of a directory structure. rmdir Remove directory. The directory must be empty of all files -- including &quot;invisible&quot; dotfiles [71] -- for this command to succeed. mkdir Make directory, creates a new directory. For example, mkdir -p project/programs/December creates the named directory. The -p option automatically creates any necessary parent directories. chmod Changes the attributes of an existing file or directory (see Example 15-14). chmod +x filename # Makes &quot;filename&quot; executable for all users. chmod u+s filename # Sets &quot;suid&quot; bit on &quot;filename&quot; permissions. # An ordinary user may execute &quot;filename&quot; with same privileges as the file's owner. # (This does not apply to shell scripts.) chmod 644 filename # Makes &quot;filename&quot; readable/writable to owner, readable to others #+ (octal mode). chmod 444 filename # Makes &quot;filename&quot; read-only for all. # Modifying the file (for example, with a text editor) #+ not allowed for a user who does not own the file (except for root), #+ and even the file owner must force a file-save #+ if she modifies the file. # Same restrictions apply for deleting the file. chmod 1777 directory-name # Gives everyone read, write, and execute permission in directory, #+ however also sets the &quot;sticky bit&quot;. # This means that only the owner of the directory, #+ owner of the file, and, of course, root #+ can delete any particular file in that directory. chmod 111 directory-name # Gives everyone execute-only permission in a directory. # This means that you can execute and READ the files in that directory #+ (execute permission necessarily includes read permission #+ because you can't execute a file without being able to read it). # But you can't list the files or search for them with the &quot;find&quot; command. # These restrictions do not apply to root. chmod 000 directory-name # No permissions at all for that directory. # Can't read, write, or execute files in it. # Can't even list files in it or &quot;cd&quot; to it. # But, you can rename (mv) the directory #+ or delete it (rmdir) if it is empty. # You can even symlink to files in the directory, #+ but you can't read, write, or execute the symlinks. # These restrictions do not apply to root. chattr Change file attributes. This is analogous to chmod above, but with different options and a different invocation syntax, and it works only on ext2/ext3 filesystems. One particularly interesting chattr option is i. A chattr +i filename marks the file as immutable. The file cannot be modified, linked to, or deleted, not even by root. This file attribute can be set or removed only by root. In a similar fashion, the a option marks the file as append only. root# chattr +i file1.txt root# rm file1.txt rm: remove write-protected regular file `file1.txt'? y rm: cannot remove `file1.txt': Operation not permitted If a file has the s (secure) attribute set, then when it is deleted its block is overwritten with binary zeroes. [72] If a file has the u (undelete) attribute set, then when it is deleted, its contents can still be retrieved (undeleted). If a file has the c (compress) attribute set, then it will automatically be compressed on writes to disk, and uncompressed on reads. Note The file attributes set with chattr do not show in a file listing (ls -l). ln Creates links to pre-existings files. A &quot;link&quot; is a reference to a file, an alternate name for it. The ln command permits referencing the linked file by more than one name and is a superior alternative to aliasing (see Example 4-6). The ln creates only a reference, a pointer to the file only a few bytes in size. The ln command is most often used with the -s, symbolic or &quot;soft&quot; link flag. Advantages of using the -s flag are that it permits linking across file systems or to directories. The syntax of the command is a bit tricky. For example: ln -s oldfile newfile links the previously existing oldfile to the newly created link, newfile. Caution If a file named newfile has previously existed, an error message will result. Which type of link to use? As John Macdonald explains it: Both of these [types of links] provide a certain measure of dual reference -- if you edit the contents of the file using any name, your changes will affect both the original name and either a hard or soft new name. The differences between them occurs when you work at a higher level. The advantage of a hard link is that the new name is totally independent of the old name -- if you remove or rename the old name, that does not affect the hard link, which continues to point to the data while it would leave a soft link hanging pointing to the old name which is no longer there. The advantage of a soft link is that it can refer to a different file system (since it is just a reference to a file name, not to actual data). And, unlike a hard link, a symbolic link can refer to a directory. Links give the ability to invoke a script (or any other type of executable) with multiple names, and having that script behave according to how it was invoked. Example 16-2. Hello or Good-bye #!/bin/bash # hello.sh: Saying &quot;hello&quot; or &quot;goodbye&quot; #+ depending on how script is invoked. # Make a link in current working directory ($PWD) to this script: # ln -s hello.sh goodbye # Now, try invoking this script both ways: # ./hello.sh # ./goodbye HELLO_CALL=65 GOODBYE_CALL=66 if [ $0 = &quot;./goodbye&quot; ] then echo &quot;Good-bye!&quot; # Some other goodbye-type commands, as appropriate. exit $GOODBYE_CALL fi echo &quot;Hello!&quot; # Some other hello-type commands, as appropriate. exit $HELLO_CALL man, info These commands access the manual and information pages on system commands and installed utilities. When available, the info pages usually contain more detailed descriptions than do the man pages. There have been various attempts at &quot;automating&quot; the writing of man pages. For a script that makes a tentative first step in that direction, see Example A-39. 16.2. Complex Commands Commands for more advanced users find -exec COMMAND \; Carries out COMMAND on each file that find matches. The command sequence terminates with ; (the &quot;;&quot; is escaped to make certain the shell passes it to find literally, without interpreting it as a special character). bash$ find ~/ -name '*.txt' /home/bozo/.kde/share/apps/karm/karmdata.txt /home/bozo/misc/irmeyc.txt /home/bozo/test-scripts/1.txt If COMMAND contains {}, then find substitutes the full path name of the selected file for &quot;{}&quot;. find ~/ -name 'core*' -exec rm {} \; # Removes all core dump files from user's home directory. find /home/bozo/projects -mtime -1 # ^ Note minus sign! # Lists all files in /home/bozo/projects directory tree #+ that were modified within the last day (current_day - 1). # find /home/bozo/projects -mtime 1 # Same as above, but modified *exactly* one day ago. # # mtime = last modification time of the target file # ctime = last status change time (via 'chmod' or otherwise) # atime = last access time DIR=/home/bozo/junk_files find &quot;$DIR&quot; -type f -atime +5 -exec rm {} \; # ^ ^^ # Curly brackets are placeholder for the path name output by &quot;find.&quot; # # Deletes all files in &quot;/home/bozo/junk_files&quot; #+ that have not been accessed in *at least* 5 days (plus sign ... +5). # # &quot;-type filetype&quot;, where # f = regular file # d = directory # l = symbolic link, etc. # # (The 'find' manpage and info page have complete option listings.) find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \; # Finds all IP addresses (xxx.xxx.xxx.xxx) in /etc directory files. # There a few extraneous hits. Can they be filtered out? # Possibly by: find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n' \ | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$' # # [:digit:] is one of the character classes #+ introduced with the POSIX 1003.2 standard. # Thanks, Stéphane Chazelas. Note The -exec option to find should not be confused with the exec shell builtin. Example 16-3. Badname, eliminate file names in current directory containing bad characters and whitespace. #!/bin/bash # badname.sh # Delete filenames in current directory containing bad characters. for filename in * do badname=`echo &quot;$filename&quot; | sed -n /[\+\{\;\&quot;\\\=\?~\(\)\&lt;\&gt;\&amp;\*\|\$]/p` # badname=`echo &quot;$filename&quot; | sed -n '/[+{;&quot;\=?~()&lt;&gt;&amp;*|$]/p'` also works. # Deletes files containing these nasties: + { ; &quot; \ = ? ~ ( ) &lt; &gt; &amp; * | $ # rm $badname 2&gt;/dev/null # ^^^^^^^^^^^ Error messages deep-sixed. done # Now, take care of files containing all manner of whitespace. find . -name &quot;* *&quot; -exec rm -f {} \; # The path name of the file that _find_ finds replaces the &quot;{}&quot;. # The '\' ensures that the ';' is interpreted literally, as end of command. exit 0 #--------------------------------------------------------------------- # Commands below this line will not execute because of _exit_ command. # An alternative to the above script: find . -name '*[+{;&quot;\\=?~()&lt;&gt;&amp;*|$ ]*' -maxdepth 0 \ -exec rm -f '{}' \; # The &quot;-maxdepth 0&quot; option ensures that _find_ will not search #+ subdirectories below $PWD. # (Thanks, S.C.) Example 16-4. Deleting a file by its inode number #!/bin/bash # idelete.sh: Deleting a file by its inode number. # This is useful when a filename starts with an illegal character, #+ such as ? or -. ARGCOUNT=1 # Filename arg must be passed to script. E_WRONGARGS=70 E_FILE_NOT_EXIST=71 E_CHANGED_MIND=72 if [ $# -ne &quot;$ARGCOUNT&quot; ] then echo &quot;Usage: `basename $0` filename&quot; exit $E_WRONGARGS fi if [ ! -e &quot;$1&quot; ] then echo &quot;File \&quot;&quot;$1&quot;\&quot; does not exist.&quot; exit $E_FILE_NOT_EXIST fi inum=`ls -i | grep &quot;$1&quot; | awk '{print $1}'` # inum = inode (index node) number of file # ----------------------------------------------------------------------- # Every file has an inode, a record that holds its physical address info. # ----------------------------------------------------------------------- echo; echo -n &quot;Are you absolutely sure you want to delete \&quot;$1\&quot; (y/n)? &quot; # The '-v' option to 'rm' also asks this. read answer case &quot;$answer&quot; in [nN]) echo &quot;Changed your mind, huh?&quot; exit $E_CHANGED_MIND ;; *) echo &quot;Deleting file \&quot;$1\&quot;.&quot;;; esac find . -inum $inum -exec rm {} \; # ^^ # Curly brackets are placeholder #+ for text output by &quot;find.&quot; echo &quot;File &quot;\&quot;$1&quot;\&quot; deleted!&quot; exit 0 The find command also works without the -exec option. #!/bin/bash # Find suid root files. # A strange suid file might indicate a security hole, #+ or even a system intrusion. directory=&quot;/usr/sbin&quot; # Might also try /sbin, /bin, /usr/bin, /usr/local/bin, etc. permissions=&quot;+4000&quot; # suid root (dangerous!) for file in $( find &quot;$directory&quot; -perm &quot;$permissions&quot; ) do ls -ltF --author &quot;$file&quot; done See Example 16-30, Example 3-4, and Example 11-10 for scripts using find. Its manpage provides more detail on this complex and powerful command. xargs A filter for feeding arguments to a command, and also a tool for assembling the commands themselves. It breaks a data stream into small enough chunks for filters and commands to process. Consider it as a powerful replacement for backquotes. In situations where command substitution fails with a too many arguments error, substituting xargs often works. [73] Normally, xargs reads from stdin or from a pipe, but it can also be given the output of a file. The default command for xargs is echo. This means that input piped to xargs may have linefeeds and other whitespace characters stripped out. bash$ ls -l total 0 -rw-rw-r-- 1 bozo bozo 0 Jan 29 23:58 file1 -rw-rw-r-- 1 bozo bozo 0 Jan 29 23:58 file2 bash$ ls -l | xargs total 0 -rw-rw-r-- 1 bozo bozo 0 Jan 29 23:58 file1 -rw-rw-r-- 1 bozo bozo 0 Jan... bash$ find ~/mail -type f | xargs grep &quot;Linux&quot; ./misc:User-Agent: slrn/0.9.8.1 (Linux) ./sent-mail-jul-2005: hosted by the Linux Documentation Project. ./sent-mail-jul-2005: (Linux Documentation Project Site, rtf version) ./sent-mail-jul-2005: Subject: Criticism of Bozo's Windows/Linux article ./sent-mail-jul-2005: while mentioning that the Linux ext2/ext3 filesystem . . . ls | xargs -p -l gzip gzips every file in current directory, one at a time, prompting before each operation. Note Note that xargs processes the arguments passed to it sequentially, one at a time. bash$ find /usr/bin | xargs file /usr/bin: directory /usr/bin/foomatic-ppd-options: perl script text executable . . . Tip An interesting xargs option is -n NN, which limits to NN the number of arguments passed. ls | xargs -n 8 echo lists the files in the current directory in 8 columns. Tip Another useful option is -0, in combination with find -print0 or grep -lZ. This allows handling arguments containing whitespace or quotes. find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f grep -rliwZ GUI / | xargs -0 rm -f Either of the above will remove any file containing &quot;GUI&quot;. (Thanks, S.C.) Or: cat /proc/&quot;$pid&quot;/&quot;$OPTION&quot; | xargs -0 echo # Formats output: ^^^^^^^^^^^^^^^ # From Han Holl's fixup of &quot;get-commandline.sh&quot; #+ script in &quot;/dev and /proc&quot; chapter. Tip The -P option to xargs permits running processes in parallel. This speeds up execution in a machine with a multicore CPU. #!/bin/bash ls *gif | xargs -t -n1 -P2 gif2png # Converts all the gif images in current directory to png. # Options: # ======= # -t Print command to stderr. # -n1 At most 1 argument per command line. # -P2 Run up to 2 processes simultaneously. # Thank you, Roberto Polli, for the inspiration. Example 16-5. Logfile: Using xargs to monitor system log #!/bin/bash # Generates a log file in current directory # from the tail end of /var/log/messages. # Note: /var/log/messages must be world readable # if this script invoked by an ordinary user. # #root chmod 644 /var/log/messages LINES=5 ( date; uname -a ) &gt;&gt;logfile # Time and machine name echo ---------------------------------------------------------- &gt;&gt;logfile tail -n $LINES /var/log/messages | xargs | fmt -s &gt;&gt;logfile echo &gt;&gt;logfile echo &gt;&gt;logfile exit 0 # Note: # ---- # As Frank Wang points out, #+ unmatched quotes (either single or double quotes) in the source file #+ may give xargs indigestion. # # He suggests the following substitution for line 15: # tail -n $LINES /var/log/messages | tr -d &quot;\&quot;'&quot; | xargs | fmt -s &gt;&gt;logfile # Exercise: # -------- # Modify this script to track changes in /var/log/messages at intervals #+ of 20 minutes. # Hint: Use the &quot;watch&quot; command. As in find, a curly bracket pair serves as a placeholder for replacement text. Example 16-6. Copying files in current directory to another #!/bin/bash # copydir.sh # Copy (verbose) all files in current directory ($PWD) #+ to directory specified on command-line. E_NOARGS=85 if [ -z &quot;$1&quot; ] # Exit if no argument given. then echo &quot;Usage: `basename $0` directory-to-copy-to&quot; exit $E_NOARGS fi ls . | xargs -i -t cp ./{} $1 # ^^ ^^ ^^ # -t is &quot;verbose&quot; (output command-line to stderr) option. # -i is &quot;replace strings&quot; option. # {} is a placeholder for output text. # This is similar to the use of a curly-bracket pair in &quot;find.&quot; # # List the files in current directory (ls .), #+ pass the output of &quot;ls&quot; as arguments to &quot;xargs&quot; (-i -t options), #+ then copy (cp) these arguments ({}) to new directory ($1). # # The net result is the exact equivalent of #+ cp * $1 #+ unless any of the filenames has embedded &quot;whitespace&quot; characters. exit 0 Example 16-7. Killing processes by name #!/bin/bash # kill-byname.sh: Killing processes by name. # Compare this script with kill-process.sh. # For instance, #+ try &quot;./kill-byname.sh xterm&quot; -- #+ and watch all the xterms on your desktop disappear. # Warning: # ------- # This is a fairly dangerous script. # Running it carelessly (especially as root) #+ can cause data loss and other undesirable effects. E_BADARGS=66 if test -z &quot;$1&quot; # No command-line arg supplied? then echo &quot;Usage: `basename $0` Process(es)_to_kill&quot; exit $E_BADARGS fi PROCESS_NAME=&quot;$1&quot; ps ax | grep &quot;$PROCESS_NAME&quot; | awk '{print $1}' | xargs -i kill {} 2&amp;&gt;/dev/null # ^^ ^^ # --------------------------------------------------------------- # Notes: # -i is the &quot;replace strings&quot; option to xargs. # The curly brackets are the placeholder for the replacement. # 2&amp;&gt;/dev/null suppresses unwanted error messages. # # Can grep &quot;$PROCESS_NAME&quot; be replaced by pidof &quot;$PROCESS_NAME&quot;? # --------------------------------------------------------------- exit $? # The &quot;killall&quot; command has the same effect as this script, #+ but using it is not quite as educational. Example 16-8. Word frequency analysis using xargs #!/bin/bash # wf2.sh: Crude word frequency analysis on a text file. # Uses 'xargs' to decompose lines of text into single words. # Compare this example to the &quot;wf.sh&quot; script later on. # Check for input file on command-line. ARGS=1 E_BADARGS=85 E_NOFILE=86 if [ $# -ne &quot;$ARGS&quot; ] # Correct number of arguments passed to script? then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi if [ ! -f &quot;$1&quot; ] # Does file exist? then echo &quot;File \&quot;$1\&quot; does not exist.&quot; exit $E_NOFILE fi ##################################################### cat &quot;$1&quot; | xargs -n1 | \ # List the file, one word per line. tr A-Z a-z | \ # Shift characters to lowercase. sed -e 's/\.//g' -e 's/\,//g' -e 's/ /\ /g' | \ # Filter out periods and commas, and #+ change space between words to linefeed, sort | uniq -c | sort -nr # Finally remove duplicates, prefix occurrence count #+ and sort numerically. ##################################################### # This does the same job as the &quot;wf.sh&quot; example, #+ but a bit more ponderously, and it runs more slowly (why?). exit $? expr All-purpose expression evaluator: Concatenates and evaluates the arguments according to the operation given (arguments must be separated by spaces). Operations may be arithmetic, comparison, string, or logical. expr 3 + 5 returns 8 expr 5 % 3 returns 2 expr 1 / 0 returns the error message, expr: division by zero Illegal arithmetic operations not allowed. expr 5 \* 3 returns 15 The multiplication operator must be escaped when used in an arithmetic expression with expr. y=`expr $y + 1` Increment a variable, with the same effect as let y=y+1 and y=$(($y+1)). This is an example of arithmetic expansion. z=`expr substr $string $position $length` Extract substring of $length characters, starting at $position. Example 16-9. Using expr #!/bin/bash # Demonstrating some of the uses of 'expr' # ======================================= echo # Arithmetic Operators # ---------- --------- echo &quot;Arithmetic Operators&quot; echo a=`expr 5 + 3` echo &quot;5 + 3 = $a&quot; a=`expr $a + 1` echo echo &quot;a + 1 = $a&quot; echo &quot;(incrementing a variable)&quot; a=`expr 5 % 3` # modulo echo echo &quot;5 mod 3 = $a&quot; echo echo # Logical Operators # ------- --------- # Returns 1 if true, 0 if false, #+ opposite of normal Bash convention. echo &quot;Logical Operators&quot; echo x=24 y=25 b=`expr $x = $y` # Test equality. echo &quot;b = $b&quot; # 0 ( $x -ne $y ) echo a=3 b=`expr $a \&gt; 10` echo 'b=`expr $a \&gt; 10`, therefore...' echo &quot;If a &gt; 10, b = 0 (false)&quot; echo &quot;b = $b&quot; # 0 ( 3 ! -gt 10 ) echo b=`expr $a \&lt; 10` echo &quot;If a &lt; 10, b = 1 (true)&quot; echo &quot;b = $b&quot; # 1 ( 3 -lt 10 ) echo # Note escaping of operators. b=`expr $a \&lt;= 3` echo &quot;If a &lt;= 3, b = 1 (true)&quot; echo &quot;b = $b&quot; # 1 ( 3 -le 3 ) # There is also a &quot;\&gt;=&quot; operator (greater than or equal to). echo echo # String Operators # ------ --------- echo &quot;String Operators&quot; echo a=1234zipper43231 echo &quot;The string being operated upon is \&quot;$a\&quot;.&quot; # length: length of string b=`expr length $a` echo &quot;Length of \&quot;$a\&quot; is $b.&quot; # index: position of first character in substring # that matches a character in string b=`expr index $a 23` echo &quot;Numerical position of first \&quot;2\&quot; in \&quot;$a\&quot; is \&quot;$b\&quot;.&quot; # substr: extract substring, starting position &amp; length specified b=`expr substr $a 2 6` echo &quot;Substring of \&quot;$a\&quot;, starting at position 2,\ and 6 chars long is \&quot;$b\&quot;.&quot; # The default behavior of the 'match' operations is to #+ search for the specified match at the BEGINNING of the string. # # Using Regular Expressions ... b=`expr match &quot;$a&quot; '[0-9]*'` # Numerical count. echo Number of digits at the beginning of \&quot;$a\&quot; is $b. b=`expr match &quot;$a&quot; '\([0-9]*\)'` # Note that escaped parentheses # == == #+ trigger substring match. echo &quot;The digits at the beginning of \&quot;$a\&quot; are \&quot;$b\&quot;.&quot; echo exit 0 Important The : (null) operator can substitute for match. For example, b=`expr $a : [0-9]*` is the exact equivalent of b=`expr match $a [0-9]*` in the above listing. #!/bin/bash echo echo &quot;String operations using \&quot;expr \$string : \&quot; construct&quot; echo &quot;===================================================&quot; echo a=1234zipper5FLIPPER43231 echo &quot;The string being operated upon is \&quot;`expr &quot;$a&quot; : '\(.*\)'`\&quot;.&quot; # Escaped parentheses grouping operator. == == # *************************** #+ Escaped parentheses #+ match a substring # *************************** # If no escaped parentheses ... #+ then 'expr' converts the string operand to an integer. echo &quot;Length of \&quot;$a\&quot; is `expr &quot;$a&quot; : '.*'`.&quot; # Length of string echo &quot;Number of digits at the beginning of \&quot;$a\&quot; is `expr &quot;$a&quot; : '[0-9]*'`.&quot; # ------------------------------------------------------------------------- # echo echo &quot;The digits at the beginning of \&quot;$a\&quot; are `expr &quot;$a&quot; : '\([0-9]*\)'`.&quot; # == == echo &quot;The first 7 characters of \&quot;$a\&quot; are `expr &quot;$a&quot; : '\(.......\)'`.&quot; # ===== == == # Again, escaped parentheses force a substring match. # echo &quot;The last 7 characters of \&quot;$a\&quot; are `expr &quot;$a&quot; : '.*\(.......\)'`.&quot; # ==== end of string operator ^^ # (In fact, means skip over one or more of any characters until specified #+ substring found.) echo exit 0 The above script illustrates how expr uses the escaped parentheses -- \( ... \) -- grouping operator in tandem with regular expression parsing to match a substring. Here is a another example, this time from &quot;real life.&quot; # Strip the whitespace from the beginning and end. LRFDATE=`expr &quot;$LRFDATE&quot; : '[[:space:]]*\(.*\)[[:space:]]*$'` # From Peter Knowles' &quot;booklistgen.sh&quot; script #+ for converting files to Sony Librie/PRS-50X format. # (http://booklistgensh.peterknowles.com) Perl, sed, and awk have far superior string parsing facilities. A short sed or awk &quot;subroutine&quot; within a script (see Section 36.2) is an attractive alternative to expr. See Section 10.1 for more on using expr in string operations. 16.3. Time / Date Commands Time/date and timing date Simply invoked, date prints the date and time to stdout. Where this command gets interesting is in its formatting and parsing options. Example 16-10. Using date #!/bin/bash # Exercising the 'date' command echo &quot;The number of days since the year's beginning is `date +%j`.&quot; # Needs a leading '+' to invoke formatting. # %j gives day of year. echo &quot;The number of seconds elapsed since 01/01/1970 is `date +%s`.&quot; # %s yields number of seconds since &quot;UNIX epoch&quot; began, #+ but how is this useful? prefix=temp suffix=$(date +%s) # The &quot;+%s&quot; option to 'date' is GNU-specific. filename=$prefix.$suffix echo &quot;Temporary filename = $filename&quot; # It's great for creating &quot;unique and random&quot; temp filenames, #+ even better than using $$. # Read the 'date' man page for more formatting options. exit 0 The -u option gives the UTC (Universal Coordinated Time). bash$ date Fri Mar 29 21:07:39 MST 2002 bash$ date -u Sat Mar 30 04:07:42 UTC 2002 This option facilitates calculating the time between different dates. Example 16-11. Date calculations #!/bin/bash # date-calc.sh # Author: Nathan Coulter # Used in ABS Guide with permission (thanks!). MPHR=60 # Minutes per hour. HPD=24 # Hours per day. diff () { printf '%s' $(( $(date -u -d&quot;$TARGET&quot; +%s) - $(date -u -d&quot;$CURRENT&quot; +%s))) # %d = day of month. } CURRENT=$(date -u -d '2007-09-01 17:30:24' '+%F %T.%N %Z') TARGET=$(date -u -d'2007-12-25 12:30:00' '+%F %T.%N %Z') # %F = full date, %T = %H:%M:%S, %N = nanoseconds, %Z = time zone. printf '\nIn 2007, %s ' \ &quot;$(date -d&quot;$CURRENT + $(( $(diff) /$MPHR /$MPHR /$HPD / 2 )) days&quot; '+%d %B')&quot; # %B = name of month ^ halfway printf 'was halfway between %s ' &quot;$(date -d&quot;$CURRENT&quot; '+%d %B')&quot; printf 'and %s\n' &quot;$(date -d&quot;$TARGET&quot; '+%d %B')&quot; printf '\nOn %s at %s, there were\n' \ $(date -u -d&quot;$CURRENT&quot; +%F) $(date -u -d&quot;$CURRENT&quot; +%T) DAYS=$(( $(diff) / $MPHR / $MPHR / $HPD )) CURRENT=$(date -d&quot;$CURRENT +$DAYS days&quot; '+%F %T.%N %Z') HOURS=$(( $(diff) / $MPHR / $MPHR )) CURRENT=$(date -d&quot;$CURRENT +$HOURS hours&quot; '+%F %T.%N %Z') MINUTES=$(( $(diff) / $MPHR )) CURRENT=$(date -d&quot;$CURRENT +$MINUTES minutes&quot; '+%F %T.%N %Z') printf '%s days, %s hours, ' &quot;$DAYS&quot; &quot;$HOURS&quot; printf '%s minutes, and %s seconds ' &quot;$MINUTES&quot; &quot;$(diff)&quot; printf 'until Christmas Dinner!\n\n' # Exercise: # -------- # Rewrite the diff () function to accept passed parameters, #+ rather than using global variables. The date command has quite a number of output options. For example %N gives the nanosecond portion of the current time. One interesting use for this is to generate random integers. date +%N | sed -e 's/000$//' -e 's/^0//' ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # Strip off leading and trailing zeroes, if present. # Length of generated integer depends on #+ how many zeroes stripped off. # 115281032 # 63408725 # 394504284 There are many more options (try man date). date +%j # Echoes day of the year (days elapsed since January 1). date +%k%M # Echoes hour and minute in 24-hour format, as a single digit string. # The 'TZ' parameter permits overriding the default time zone. date # Mon Mar 28 21:42:16 MST 2005 TZ=EST date # Mon Mar 28 23:42:16 EST 2005 # Thanks, Frank Kannemann and Pete Sjoberg, for the tip. SixDaysAgo=$(date --date='6 days ago') OneMonthAgo=$(date --date='1 month ago') # Four weeks back (not a month!) OneYearAgo=$(date --date='1 year ago') See also Example 3-4 and Example A-43. zdump Time zone dump: echoes the time in a specified time zone. bash$ zdump EST EST Tue Sep 18 22:09:22 2001 EST time Outputs verbose timing statistics for executing a command. time ls -l / gives something like this: real 0m0.067s user 0m0.004s sys 0m0.005s See also the very similar times command in the previous section. Note As of version 2.0 of Bash, time became a shell reserved word, with slightly altered behavior in a pipeline. touch Utility for updating access/modification times of a file to current system time or other specified time, but also useful for creating a new file. The command touch zzz will create a new file of zero length, named zzz, assuming that zzz did not previously exist. Time-stamping empty files in this way is useful for storing date information, for example in keeping track of modification times on a project. Note The touch command is equivalent to : &gt;&gt; newfile or &gt;&gt; newfile (for ordinary files). Tip Before doing a cp -u (copy/update), use touch to update the time stamp of files you don't wish overwritten. As an example, if the directory /home/bozo/tax_audit contains the files spreadsheet-051606.data, spreadsheet-051706.data, and spreadsheet-051806.data, then doing a touch spreadsheet*.data will protect these files from being overwritten by files with the same names during a cp -u /home/bozo/financial_info/spreadsheet*data /home/bozo/tax_audit. at The at job control command executes a given set of commands at a specified time. Superficially, it resembles cron, however, at is chiefly useful for one-time execution of a command set. at 2pm January 15 prompts for a set of commands to execute at that time. These commands should be shell-script compatible, since, for all practical purposes, the user is typing in an executable shell script a line at a time. Input terminates with a Ctl-D. Using either the -f option or input redirection (&lt;), at reads a command list from a file. This file is an executable shell script, though it should, of course, be non-interactive. Particularly clever is including the run-parts command in the file to execute a different set of scripts. bash$ at 2:30 am Friday &lt; at-jobs.list job 2 at 2000-10-27 02:30 batch The batch job control command is similar to at, but it runs a command list when the system load drops below .8. Like at, it can read commands from a file with the -f option. The concept of batch processing dates back to the era of mainframe computers. It means running a set of commands without user intervention. cal Prints a neatly formatted monthly calendar to stdout. Will do current year or a large range of past and future years. sleep This is the shell equivalent of a wait loop. It pauses for a specified number of seconds, doing nothing. It can be useful for timing or in processes running in the background, checking for a specific event every so often (polling), as in Example 32-6. sleep 3 # Pauses 3 seconds. Note The sleep command defaults to seconds, but minute, hours, or days may also be specified. sleep 3 h # Pauses 3 hours! Note The watch command may be a better choice than sleep for running commands at timed intervals. usleep Microsleep (the u may be read as the Greek mu, or micro- prefix). This is the same as sleep, above, but &quot;sleeps&quot; in microsecond intervals. It can be used for fine-grained timing, or for polling an ongoing process at very frequent intervals. usleep 30 # Pauses 30 microseconds. This command is part of the Red Hat initscripts / rc-scripts package. Caution The usleep command does not provide particularly accurate timing, and is therefore unsuitable for critical timing loops. hwclock, clock The hwclock command accesses or adjusts the machine's hardware clock. Some options require root privileges. The /etc/rc.d/rc.sysinit startup file uses hwclock to set the system time from the hardware clock at bootup. The clock command is a synonym for hwclock. 16.4. Text Processing Commands Commands affecting text and text files sort File sort utility, often used as a filter in a pipe. This command sorts a text stream or file forwards or backwards, or according to various keys or character positions. Using the -m option, it merges presorted input files. The info page lists its many capabilities and options. See Example 11-10, Example 11-11, and Example A-8. tsort Topological sort, reading in pairs of whitespace-separated strings and sorting according to input patterns. The original purpose of tsort was to sort a list of dependencies for an obsolete version of the ld linker in an &quot;ancient&quot; version of UNIX. The results of a tsort will usually differ markedly from those of the standard sort command, above. uniq This filter removes duplicate lines from a sorted file. It is often seen in a pipe coupled with sort. cat list-1 list-2 list-3 | sort | uniq &gt; final.list # Concatenates the list files, # sorts them, # removes duplicate lines, # and finally writes the result to an output file. The useful -c option prefixes each line of the input file with its number of occurrences. bash$ cat testfile This line occurs only once. This line occurs twice. This line occurs twice. This line occurs three times. This line occurs three times. This line occurs three times. bash$ uniq -c testfile 1 This line occurs only once. 2 This line occurs twice. 3 This line occurs three times. bash$ sort testfile | uniq -c | sort -nr 3 This line occurs three times. 2 This line occurs twice. 1 This line occurs only once. The sort INPUTFILE | uniq -c | sort -nr command string produces a frequency of occurrence listing on the INPUTFILE file (the -nr options to sort cause a reverse numerical sort). This template finds use in analysis of log files and dictionary lists, and wherever the lexical structure of a document needs to be examined. Example 16-12. Word Frequency Analysis #!/bin/bash # wf.sh: Crude word frequency analysis on a text file. # This is a more efficient version of the &quot;wf2.sh&quot; script. # Check for input file on command-line. ARGS=1 E_BADARGS=85 E_NOFILE=86 if [ $# -ne &quot;$ARGS&quot; ] # Correct number of arguments passed to script? then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi if [ ! -f &quot;$1&quot; ] # Check if file exists. then echo &quot;File \&quot;$1\&quot; does not exist.&quot; exit $E_NOFILE fi ######################################################## # main () sed -e 's/\.//g' -e 's/\,//g' -e 's/ /\ /g' &quot;$1&quot; | tr 'A-Z' 'a-z' | sort | uniq -c | sort -nr # ========================= # Frequency of occurrence # Filter out periods and commas, and #+ change space between words to linefeed, #+ then shift characters to lowercase, and #+ finally prefix occurrence count and sort numerically. # Arun Giridhar suggests modifying the above to: # . . . | sort | uniq -c | sort +1 [-f] | sort +0 -nr # This adds a secondary sort key, so instances of #+ equal occurrence are sorted alphabetically. # As he explains it: # &quot;This is effectively a radix sort, first on the #+ least significant column #+ (word or string, optionally case-insensitive) #+ and last on the most significant column (frequency).&quot; # # As Frank Wang explains, the above is equivalent to #+ . . . | sort | uniq -c | sort +0 -nr #+ and the following also works: #+ . . . | sort | uniq -c | sort -k1nr -k ######################################################## exit 0 # Exercises: # --------- # 1) Add 'sed' commands to filter out other punctuation, #+ such as semicolons. # 2) Modify the script to also filter out multiple spaces and #+ other whitespace. bash$ cat testfile This line occurs only once. This line occurs twice. This line occurs twice. This line occurs three times. This line occurs three times. This line occurs three times. bash$ ./wf.sh testfile 6 this 6 occurs 6 line 3 times 3 three 2 twice 1 only 1 once expand, unexpand The expand filter converts tabs to spaces. It is often used in a pipe. The unexpand filter converts spaces to tabs. This reverses the effect of expand. cut A tool for extracting fields from files. It is similar to the print $N command set in awk, but more limited. It may be simpler to use cut in a script than awk. Particularly important are the -d (delimiter) and -f (field specifier) options. Using cut to obtain a listing of the mounted filesystems: cut -d ' ' -f1,2 /etc/mtab Using cut to list the OS and kernel version: uname -a | cut -d&quot; &quot; -f1,3,11,12 Using cut to extract message headers from an e-mail folder: bash$ grep '^Subject:' read-messages | cut -c10-80 Re: Linux suitable for mission-critical apps? MAKE MILLIONS WORKING AT HOME!!! Spam complaint Re: Spam complaint Using cut to parse a file: # List all the users in /etc/passwd. FILENAME=/etc/passwd for user in $(cut -d: -f1 $FILENAME) do echo $user done # Thanks, Oleg Philon for suggesting this. cut -d ' ' -f2,3 filename is equivalent to awk -F'[ ]' '{ print $2, $3 }' filename Note It is even possible to specify a linefeed as a delimiter. The trick is to actually embed a linefeed (RETURN) in the command sequence. bash$ cut -d' ' -f3,7,19 testfile This is line 3 of testfile. This is line 7 of testfile. This is line 19 of testfile. Thank you, Jaka Kranjc, for pointing this out. See also Example 16-48. paste Tool for merging together different files into a single, multi-column file. In combination with cut, useful for creating system log files. bash$ cat items alphabet blocks building blocks cables bash$ cat prices $1.00/dozen $2.50 ea. $3.75 bash$ paste items prices alphabet blocks $1.00/dozen building blocks $2.50 ea. cables $3.75 join Consider this a special-purpose cousin of paste. This powerful utility allows merging two files in a meaningful fashion, which essentially creates a simple version of a relational database. The join command operates on exactly two files, but pastes together only those lines with a common tagged field (usually a numerical label), and writes the result to stdout. The files to be joined should be sorted according to the tagged field for the matchups to work properly. File: 1.data 100 Shoes 200 Laces 300 Socks File: 2.data 100 $40.00 200 $1.00 300 $2.00 bash$ join 1.data 2.data File: 1.data 2.data 100 Shoes $40.00 200 Laces $1.00 300 Socks $2.00 Note The tagged field appears only once in the output. head lists the beginning of a file to stdout. The default is 10 lines, but a different number can be specified. The command has a number of interesting options. Example 16-13. Which files are scripts? #!/bin/bash # script-detector.sh: Detects scripts within a directory. TESTCHARS=2 # Test first 2 characters. SHABANG='#!' # Scripts begin with a &quot;sha-bang.&quot; for file in * # Traverse all the files in current directory. do if [[ `head -c$TESTCHARS &quot;$file&quot;` = &quot;$SHABANG&quot; ]] # head -c2 #! # The '-c' option to &quot;head&quot; outputs a specified #+ number of characters, rather than lines (the default). then echo &quot;File \&quot;$file\&quot; is a script.&quot; else echo &quot;File \&quot;$file\&quot; is *not* a script.&quot; fi done exit 0 # Exercises: # --------- # 1) Modify this script to take as an optional argument #+ the directory to scan for scripts #+ (rather than just the current working directory). # # 2) As it stands, this script gives &quot;false positives&quot; for #+ Perl, awk, and other scripting language scripts. # Correct this. Example 16-14. Generating 10-digit random numbers #!/bin/bash # rnd.sh: Outputs a 10-digit random number # Script by Stephane Chazelas. head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p' # =================================================================== # # Analysis # -------- # head: # -c4 option takes first 4 bytes. # od: # -N4 option limits output to 4 bytes. # -tu4 option selects unsigned decimal format for output. # sed: # -n option, in combination with &quot;p&quot; flag to the &quot;s&quot; command, # outputs only matched lines. # The author of this script explains the action of 'sed', as follows. # head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p' # ----------------------------------&gt; | # Assume output up to &quot;sed&quot; --------&gt; | # is 0000000 1198195154\n # sed begins reading characters: 0000000 1198195154\n. # Here it finds a newline character, #+ so it is ready to process the first line (0000000 1198195154). # It looks at its &lt;range&gt;&lt;action&gt;s. The first and only one is # range action # 1 s/.* //p # The line number is in the range, so it executes the action: #+ tries to substitute the longest string ending with a space in the line # (&quot;0000000 &quot;) with nothing (//), and if it succeeds, prints the result # (&quot;p&quot; is a flag to the &quot;s&quot; command here, this is different #+ from the &quot;p&quot; command). # sed is now ready to continue reading its input. (Note that before #+ continuing, if -n option had not been passed, sed would have printed #+ the line once again). # Now, sed reads the remainder of the characters, and finds the #+ end of the file. # It is now ready to process its 2nd line (which is also numbered '$' as #+ it's the last one). # It sees it is not matched by any &lt;range&gt;, so its job is done. # In few word this sed commmand means: # &quot;On the first line only, remove any character up to the right-most space, #+ then print it.&quot; # A better way to do this would have been: # sed -e 's/.* //;q' # Here, two &lt;range&gt;&lt;action&gt;s (could have been written # sed -e 's/.* //' -e q): # range action # nothing (matches line) s/.* // # nothing (matches line) q (quit) # Here, sed only reads its first line of input. # It performs both actions, and prints the line (substituted) before #+ quitting (because of the &quot;q&quot; action) since the &quot;-n&quot; option is not passed. # =================================================================== # # An even simpler altenative to the above one-line script would be: # head -c4 /dev/urandom| od -An -tu4 exit See also Example 16-39. tail lists the (tail) end of a file to stdout. The default is 10 lines, but this can be changed with the -n option. Commonly used to keep track of changes to a system logfile, using the -f option, which outputs lines appended to the file. Example 16-15. Using tail to monitor the system log #!/bin/bash filename=sys.log cat /dev/null &gt; $filename; echo &quot;Creating / cleaning out file.&quot; # Creates the file if it does not already exist, #+ and truncates it to zero length if it does. # : &gt; filename and &gt; filename also work. tail /var/log/messages &gt; $filename # /var/log/messages must have world read permission for this to work. echo &quot;$filename contains tail end of system log.&quot; exit 0 Tip To list a specific line of a text file, pipe the output of head to tail -n 1. For example head -n 8 database.txt | tail -n 1 lists the 8th line of the file database.txt. To set a variable to a given block of a text file: var=$(head -n $m $filename | tail -n $n) # filename = name of file # m = from beginning of file, number of lines to end of block # n = number of lines to set variable to (trim from end of block) Note Newer implementations of tail deprecate the older tail -$LINES filename usage. The standard tail -n $LINES filename is correct. See also Example 16-5, Example 16-39 and Example 32-6. grep A multi-purpose file search tool that uses Regular Expressions. It was originally a command/filter in the venerable ed line editor: g/re/p -- global - regular expression - print. grep pattern [file...] Search the target file(s) for occurrences of pattern, where pattern may be literal text or a Regular Expression. bash$ grep '[rst]ystem.$' osinfo.txt The GPL governs the distribution of the Linux operating system. If no target file(s) specified, grep works as a filter on stdout, as in a pipe. bash$ ps ax | grep clock 765 tty1 S 0:00 xclock 901 pts/1 S 0:00 grep clock The -i option causes a case-insensitive search. The -w option matches only whole words. The -l option lists only the files in which matches were found, but not the matching lines. The -r (recursive) option searches files in the current working directory and all subdirectories below it. The -n option lists the matching lines, together with line numbers. bash$ grep -n Linux osinfo.txt 2:This is a file containing information about Linux. 6:The GPL governs the distribution of the Linux operating system. The -v (or --invert-match) option filters out matches. grep pattern1 *.txt | grep -v pattern2 # Matches all lines in &quot;*.txt&quot; files containing &quot;pattern1&quot;, # but ***not*** &quot;pattern2&quot;. The -c (--count) option gives a numerical count of matches, rather than actually listing the matches. grep -c txt *.sgml # (number of occurrences of &quot;txt&quot; in &quot;*.sgml&quot; files) # grep -cz . # ^ dot # means count (-c) zero-separated (-z) items matching &quot;.&quot; # that is, non-empty ones (containing at least 1 character). # printf 'a b\nc d\n\n\n\n\n\000\n\000e\000\000\nf' | grep -cz . # 3 printf 'a b\nc d\n\n\n\n\n\000\n\000e\000\000\nf' | grep -cz '$' # 5 printf 'a b\nc d\n\n\n\n\n\000\n\000e\000\000\nf' | grep -cz '^' # 5 # printf 'a b\nc d\n\n\n\n\n\000\n\000e\000\000\nf' | grep -c '$' # 9 # By default, newline chars (\n) separate items to match. # Note that the -z option is GNU &quot;grep&quot; specific. # Thanks, S.C. The --color (or --colour) option marks the matching string in color (on the console or in an xterm window). Since grep prints out each entire line containing the matching pattern, this lets you see exactly what is being matched. See also the -o option, which shows only the matching portion of the line(s). Example 16-16. Printing out the From lines in stored e-mail messages #!/bin/bash # from.sh # Emulates the useful 'from' utility in Solaris, BSD, etc. # Echoes the &quot;From&quot; header line in all messages #+ in your e-mail directory. MAILDIR=~/mail/* # No quoting of variable. Why? # Maybe check if-exists $MAILDIR: if [ -d $MAILDIR ] . . . GREP_OPTS=&quot;-H -A 5 --color&quot; # Show file, plus extra context lines #+ and display &quot;From&quot; in color. TARGETSTR=&quot;^From&quot; # &quot;From&quot; at beginning of line. for file in $MAILDIR # No quoting of variable. do grep $GREP_OPTS &quot;$TARGETSTR&quot; &quot;$file&quot; # ^^^^^^^^^^ # Again, do not quote this variable. echo done exit $? # You might wish to pipe the output of this script to 'more' #+ or redirect it to a file . . . When invoked with more than one target file given, grep specifies which file contains matches. bash$ grep Linux osinfo.txt misc.txt osinfo.txt:This is a file containing information about Linux. osinfo.txt:The GPL governs the distribution of the Linux operating system. misc.txt:The Linux operating system is steadily gaining in popularity. Tip To force grep to show the filename when searching only one target file, simply give /dev/null as the second file. bash$ grep Linux osinfo.txt /dev/null osinfo.txt:This is a file containing information about Linux. osinfo.txt:The GPL governs the distribution of the Linux operating system. If there is a successful match, grep returns an exit status of 0, which makes it useful in a condition test in a script, especially in combination with the -q option to suppress output. SUCCESS=0 # if grep lookup succeeds word=Linux filename=data.file grep -q &quot;$word&quot; &quot;$filename&quot; # The &quot;-q&quot; option #+ causes nothing to echo to stdout. if [ $? -eq $SUCCESS ] # if grep -q &quot;$word&quot; &quot;$filename&quot; can replace lines 5 - 7. then echo &quot;$word found in $filename&quot; else echo &quot;$word not found in $filename&quot; fi Example 32-6 demonstrates how to use grep to search for a word pattern in a system logfile. Example 16-17. Emulating grep in a script #!/bin/bash # grp.sh: Rudimentary reimplementation of grep. E_BADARGS=85 if [ -z &quot;$1&quot; ] # Check for argument to script. then echo &quot;Usage: `basename $0` pattern&quot; exit $E_BADARGS fi echo for file in * # Traverse all files in $PWD. do output=$(sed -n /&quot;$1&quot;/p $file) # Command substitution. if [ ! -z &quot;$output&quot; ] # What happens if &quot;$output&quot; is not quoted? then echo -n &quot;$file: &quot; echo &quot;$output&quot; fi # sed -ne &quot;/$1/s|^|${file}: |p&quot; is equivalent to above. echo done echo exit 0 # Exercises: # --------- # 1) Add newlines to output, if more than one match in any given file. # 2) Add features. How can grep search for two (or more) separate patterns? What if you want grep to display all lines in a file or files that contain both &quot;pattern1&quot; and &quot;pattern2&quot;? One method is to pipe the result of grep pattern1 to grep pattern2. For example, given the following file: # Filename: tstfile This is a sample file. This is an ordinary text file. This file does not contain any unusual text. This file is not unusual. Here is some text. Now, let's search this file for lines containing both &quot;file&quot; and &quot;text&quot; . . . bash$ grep file tstfile # Filename: tstfile This is a sample file. This is an ordinary text file. This file does not contain any unusual text. This file is not unusual. bash$ grep file tstfile | grep text This is an ordinary text file. This file does not contain any unusual text. Now, for an interesting recreational use of grep . . . Example 16-18. Crossword puzzle solver #!/bin/bash # cw-solver.sh # This is actually a wrapper around a one-liner (line 46). # Crossword puzzle and anagramming word game solver. # You know *some* of the letters in the word you're looking for, #+ so you need a list of all valid words #+ with the known letters in given positions. # For example: w...i....n # 1???5????10 # w in position 1, 3 unknowns, i in the 5th, 4 unknowns, n at the end. # (See comments at end of script.) E_NOPATT=71 DICT=/usr/share/dict/word.lst # ^^^^^^^^ Looks for word list here. # ASCII word list, one word per line. # If you happen to need an appropriate list, #+ download the author's &quot;yawl&quot; word list package. # http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz # or # http://bash.deta.in/yawl-0.3.2.tar.gz if [ -z &quot;$1&quot; ] # If no word pattern specified then #+ as a command-line argument . . . echo #+ . . . then . . . echo &quot;Usage:&quot; #+ Usage message. echo echo &quot;&quot;$0&quot; \&quot;pattern,\&quot;&quot; echo &quot;where \&quot;pattern\&quot; is in the form&quot; echo &quot;xxx..x.x...&quot; echo echo &quot;The x's represent known letters,&quot; echo &quot;and the periods are unknown letters (blanks).&quot; echo &quot;Letters and periods can be in any position.&quot; echo &quot;For example, try: sh cw-solver.sh w...i....n&quot; echo exit $E_NOPATT fi echo # =============================================== # This is where all the work gets done. grep ^&quot;$1&quot;$ &quot;$DICT&quot; # Yes, only one line! # | | # ^ is start-of-word regex anchor. # $ is end-of-word regex anchor. # From _Stupid Grep Tricks_, vol. 1, #+ a book the ABS Guide author may yet get around #+ to writing . . . one of these days . . . # =============================================== echo exit $? # Script terminates here. # If there are too many words generated, #+ redirect the output to a file. $ sh cw-solver.sh w...i....n wellington workingman workingmen egrep -- extended grep -- is the same as grep -E. This uses a somewhat different, extended set of Regular Expressions, which can make the search a bit more flexible. It also allows the boolean | (or) operator. bash $ egrep 'matches|Matches' file.txt Line 1 matches. Line 3 Matches. Line 4 contains matches, but also Matches fgrep -- fast grep -- is the same as grep -F. It does a literal string search (no Regular Expressions), which generally speeds things up a bit. Note On some Linux distros, egrep and fgrep are symbolic links to, or aliases for grep, but invoked with the -E and -F options, respectively. Example 16-19. Looking up definitions in Webster's 1913 Dictionary #!/bin/bash # dict-lookup.sh # This script looks up definitions in the 1913 Webster's Dictionary. # This Public Domain dictionary is available for download #+ from various sites, including #+ Project Gutenberg (http://www.gutenberg.org/etext/247). # # Convert it from DOS to UNIX format (with only LF at end of line) #+ before using it with this script. # Store the file in plain, uncompressed ASCII text. # Set DEFAULT_DICTFILE variable below to path/filename. E_BADARGS=85 MAXCONTEXTLINES=50 # Maximum number of lines to show. DEFAULT_DICTFILE=&quot;/usr/share/dict/webster1913-dict.txt&quot; # Default dictionary file pathname. # Change this as necessary. # Note: # ---- # This particular edition of the 1913 Webster's #+ begins each entry with an uppercase letter #+ (lowercase for the remaining characters). # Only the *very first line* of an entry begins this way, #+ and that's why the search algorithm below works. if [[ -z $(echo &quot;$1&quot; | sed -n '/^[A-Z]/p') ]] # Must at least specify word to look up, and #+ it must start with an uppercase letter. then echo &quot;Usage: `basename $0` Word-to-define [dictionary-file]&quot; echo echo &quot;Note: Word to look up must start with capital letter,&quot; echo &quot;with the rest of the word in lowercase.&quot; echo &quot;--------------------------------------------&quot; echo &quot;Examples: Abandon, Dictionary, Marking, etc.&quot; exit $E_BADARGS fi if [ -z &quot;$2&quot; ] # May specify different dictionary #+ as an argument to this script. then dictfile=$DEFAULT_DICTFILE else dictfile=&quot;$2&quot; fi # --------------------------------------------------------- Definition=$(fgrep -A $MAXCONTEXTLINES &quot;$1 \\&quot; &quot;$dictfile&quot;) # Definitions in form &quot;Word \...&quot; # # And, yes, &quot;fgrep&quot; is fast enough #+ to search even a very large text file. # Now, snip out just the definition block. echo &quot;$Definition&quot; | sed -n '1,/^[A-Z]/p' | # Print from first line of output #+ to the first line of the next entry. sed '$d' | sed '$d' # Delete last two lines of output #+ (blank line and first line of next entry). # --------------------------------------------------------- exit $? # Exercises: # --------- # 1) Modify the script to accept any type of alphabetic input # + (uppercase, lowercase, mixed case), and convert it # + to an acceptable format for processing. # # 2) Convert the script to a GUI application, # + using something like 'gdialog' or 'zenity' . . . # The script will then no longer take its argument(s) # + from the command-line. # # 3) Modify the script to parse one of the other available # + Public Domain Dictionaries, such as the U.S. Census Bureau Gazetteer. Note See also Example A-41 for an example of speedy fgrep lookup on a large text file. agrep (approximate grep) extends the capabilities of grep to approximate matching. The search string may differ by a specified number of characters from the resulting matches. This utility is not part of the core Linux distribution. Tip To search compressed files, use zgrep, zegrep, or zfgrep. These also work on non-compressed files, though slower than plain grep, egrep, fgrep. They are handy for searching through a mixed set of files, some compressed, some not. To search bzipped files, use bzgrep. look The command look works like grep, but does a lookup on a &quot;dictionary,&quot; a sorted word list. By default, look searches for a match in /usr/dict/words, but a different dictionary file may be specified. Example 16-20. Checking words in a list for validity #!/bin/bash # lookup: Does a dictionary lookup on each word in a data file. file=words.data # Data file from which to read words to test. echo echo &quot;Testing file $file&quot; echo while [ &quot;$word&quot; != end ] # Last word in data file. do # ^^^ read word # From data file, because of redirection at end of loop. look $word &gt; /dev/null # Don't want to display lines in dictionary file. # Searches for words in the file /usr/share/dict/words #+ (usually a link to linux.words). lookup=$? # Exit status of 'look' command. if [ &quot;$lookup&quot; -eq 0 ] then echo &quot;\&quot;$word\&quot; is valid.&quot; else echo &quot;\&quot;$word\&quot; is invalid.&quot; fi done &lt;&quot;$file&quot; # Redirects stdin to $file, so &quot;reads&quot; come from there. echo exit 0 # ---------------------------------------------------------------- # Code below line will not execute because of &quot;exit&quot; command above. # Stephane Chazelas proposes the following, more concise alternative: while read word &amp;&amp; [[ $word != end ]] do if look &quot;$word&quot; &gt; /dev/null then echo &quot;\&quot;$word\&quot; is valid.&quot; else echo &quot;\&quot;$word\&quot; is invalid.&quot; fi done &lt;&quot;$file&quot; exit 0 sed, awk Scripting languages especially suited for parsing text files and command output. May be embedded singly or in combination in pipes and shell scripts. sed Non-interactive &quot;stream editor&quot;, permits using many ex commands in batch mode. It finds many uses in shell scripts. awk Programmable file extractor and formatter, good for manipulating and/or extracting fields (columns) in structured text files. Its syntax is similar to C. wc wc gives a &quot;word count&quot; on a file or I/O stream: bash $ wc /usr/share/doc/sed-4.1.2/README 13 70 447 README [13 lines 70 words 447 characters] wc -w gives only the word count. wc -l gives only the line count. wc -c gives only the byte count. wc -m gives only the character count. wc -L gives only the length of the longest line. Using wc to count how many .txt files are in current working directory: $ ls *.txt | wc -l # Will work as long as none of the &quot;*.txt&quot; files #+ have a linefeed embedded in their name. # Alternative ways of doing this are: # find . -maxdepth 1 -name \*.txt -print0 | grep -cz . # (shopt -s nullglob; set -- *.txt; echo $#) # Thanks, S.C. Using wc to total up the size of all the files whose names begin with letters in the range d - h bash$ wc [d-h]* | grep total | awk '{print $3}' 71832 Using wc to count the instances of the word &quot;Linux&quot; in the main source file for this book. bash$ grep Linux abs-book.sgml | wc -l 138 See also Example 16-39 and Example 20-8. Certain commands include some of the functionality of wc as options. ... | grep foo | wc -l # This frequently used construct can be more concisely rendered. ... | grep -c foo # Just use the &quot;-c&quot; (or &quot;--count&quot;) option of grep. # Thanks, S.C. tr character translation filter. Caution Must use quoting and/or brackets, as appropriate. Quotes prevent the shell from reinterpreting the special characters in tr command sequences. Brackets should be quoted to prevent expansion by the shell. Either tr &quot;A-Z&quot; &quot;*&quot; &lt;filename or tr A-Z \* &lt;filename changes all the uppercase letters in filename to asterisks (writes to stdout). On some systems this may not work, but tr A-Z '[**]' will. The -d option deletes a range of characters. echo &quot;abcdef&quot; # abcdef echo &quot;abcdef&quot; | tr -d b-d # aef tr -d 0-9 &lt;filename # Deletes all digits from the file &quot;filename&quot;. The --squeeze-repeats (or -s) option deletes all but the first instance of a string of consecutive characters. This option is useful for removing excess whitespace. bash$ echo &quot;XXXXX&quot; | tr --squeeze-repeats 'X' X The -c &quot;complement&quot; option inverts the character set to match. With this option, tr acts only upon those characters not matching the specified set. bash$ echo &quot;acfdeb123&quot; | tr -c b-d + +c+d+b++++ Note that tr recognizes POSIX character classes. [74] bash$ echo &quot;abcd2ef1&quot; | tr '[:alpha:]' - ----2--1 Example 16-21. toupper: Transforms a file to all uppercase. #!/bin/bash # Changes a file to all uppercase. E_BADARGS=85 if [ -z &quot;$1&quot; ] # Standard check for command-line arg. then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi tr a-z A-Z &lt;&quot;$1&quot; # Same effect as above, but using POSIX character set notation: # tr '[:lower:]' '[:upper:]' &lt;&quot;$1&quot; # Thanks, S.C. # Or even . . . # cat &quot;$1&quot; | tr a-z A-Z # Or dozens of other ways . . . exit 0 # Exercise: # Rewrite this script to give the option of changing a file #+ to *either* upper or lowercase. # Hint: Use either the &quot;case&quot; or &quot;select&quot; command. Example 16-22. lowercase: Changes all filenames in working directory to lowercase. #!/bin/bash # # Changes every filename in working directory to all lowercase. # # Inspired by a script of John Dubois, #+ which was translated into Bash by Chet Ramey, #+ and considerably simplified by the author of the ABS Guide. for filename in * # Traverse all files in directory. do fname=`basename $filename` n=`echo $fname | tr A-Z a-z` # Change name to lowercase. if [ &quot;$fname&quot; != &quot;$n&quot; ] # Rename only files not already lowercase. then mv $fname $n fi done exit $? # Code below this line will not execute because of &quot;exit&quot;. #--------------------------------------------------------# # To run it, delete script above line. # The above script will not work on filenames containing blanks or newlines. # Stephane Chazelas therefore suggests the following alternative: for filename in * # Not necessary to use basename, # since &quot;*&quot; won't return any file containing &quot;/&quot;. do n=`echo &quot;$filename/&quot; | tr '[:upper:]' '[:lower:]'` # POSIX char set notation. # Slash added so that trailing newlines are not # removed by command substitution. # Variable substitution: n=${n%/} # Removes trailing slash, added above, from filename. [[ $filename == $n ]] || mv &quot;$filename&quot; &quot;$n&quot; # Checks if filename already lowercase. done exit $? Example 16-23. du: DOS to UNIX text file conversion. #!/bin/bash # Du.sh: DOS to UNIX text file converter. E_WRONGARGS=85 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` filename-to-convert&quot; exit $E_WRONGARGS fi NEWFILENAME=$1.unx CR='\015' # Carriage return. # 015 is octal ASCII code for CR. # Lines in a DOS text file end in CR-LF. # Lines in a UNIX text file end in LF only. tr -d $CR &lt; $1 &gt; $NEWFILENAME # Delete CR's and write to new file. echo &quot;Original DOS text file is \&quot;$1\&quot;.&quot; echo &quot;Converted UNIX text file is \&quot;$NEWFILENAME\&quot;.&quot; exit 0 # Exercise: # -------- # Change the above script to convert from UNIX to DOS. Example 16-24. rot13: ultra-weak encryption. #!/bin/bash # rot13.sh: Classic rot13 algorithm, # encryption that might fool a 3-year old # for about 10 minutes. # Usage: ./rot13.sh filename # or ./rot13.sh &lt;filename # or ./rot13.sh and supply keyboard input (stdin) cat &quot;$@&quot; | tr 'a-zA-Z' 'n-za-mN-ZA-M' # &quot;a&quot; goes to &quot;n&quot;, &quot;b&quot; to &quot;o&quot; ... # The cat &quot;$@&quot; construct #+ permits input either from stdin or from files. exit 0 Example 16-25. Generating &quot;Crypto-Quote&quot; Puzzles #!/bin/bash # crypto-quote.sh: Encrypt quotes # Will encrypt famous quotes in a simple monoalphabetic substitution. # The result is similar to the &quot;Crypto Quote&quot; puzzles #+ seen in the Op Ed pages of the Sunday paper. key=ETAOINSHRDLUBCFGJMQPVWZYXK # The &quot;key&quot; is nothing more than a scrambled alphabet. # Changing the &quot;key&quot; changes the encryption. # The 'cat &quot;$@&quot;' construction gets input either from stdin or from files. # If using stdin, terminate input with a Control-D. # Otherwise, specify filename as command-line parameter. cat &quot;$@&quot; | tr &quot;a-z&quot; &quot;A-Z&quot; | tr &quot;A-Z&quot; &quot;$key&quot; # | to uppercase | encrypt # Will work on lowercase, uppercase, or mixed-case quotes. # Passes non-alphabetic characters through unchanged. # Try this script with something like: # &quot;Nothing so needs reforming as other people's habits.&quot; # --Mark Twain # # Output is: # &quot;CFPHRCS QF CIIOQ MINFMBRCS EQ FPHIM GIFGUI'Q HETRPQ.&quot; # --BEML PZERC # To reverse the encryption: # cat &quot;$@&quot; | tr &quot;$key&quot; &quot;A-Z&quot; # This simple-minded cipher can be broken by an average 12-year old #+ using only pencil and paper. exit 0 # Exercise: # -------- # Modify the script so that it will either encrypt or decrypt, #+ depending on command-line argument(s). Of course, tr lends itself to code obfuscation. #!/bin/bash # jabh.sh x=&quot;wftedskaebjgdBstbdbsmnjgz&quot; echo $x | tr &quot;a-z&quot; 'oh, turtleneck Phrase Jar!' # Based on the Wikipedia &quot;Just another Perl hacker&quot; article. tr variants The tr utility has two historic variants. The BSD version does not use brackets (tr a-z A-Z), but the SysV one does (tr '[a-z]' '[A-Z]'). The GNU version of tr resembles the BSD one. fold A filter that wraps lines of input to a specified width. This is especially useful with the -s option, which breaks lines at word spaces (see Example 16-26 and Example A-1). fmt Simple-minded file formatter, used as a filter in a pipe to &quot;wrap&quot; long lines of text output. Example 16-26. Formatted file listing. #!/bin/bash WIDTH=40 # 40 columns wide. b=`ls /usr/local/bin` # Get a file listing... echo $b | fmt -w $WIDTH # Could also have been done by # echo $b | fold - -s -w $WIDTH exit 0 See also Example 16-5. Tip A powerful alternative to fmt is Kamil Toman's par utility, available from http://www.cs.berkeley.edu/~amc/Par/. col This deceptively named filter removes reverse line feeds from an input stream. It also attempts to replace whitespace with equivalent tabs. The chief use of col is in filtering the output from certain text processing utilities, such as groff and tbl. column Column formatter. This filter transforms list-type text output into a &quot;pretty-printed&quot; table by inserting tabs at appropriate places. Example 16-27. Using column to format a directory listing #!/bin/bash # colms.sh # A minor modification of the example file in the &quot;column&quot; man page. (printf &quot;PERMISSIONS LINKS OWNER GROUP SIZE MONTH DAY HH:MM PROG-NAME\n&quot; \ ; ls -l | sed 1d) | column -t # ^^^^^^ ^^ # The &quot;sed 1d&quot; in the pipe deletes the first line of output, #+ which would be &quot;total N&quot;, #+ where &quot;N&quot; is the total number of files found by &quot;ls -l&quot;. # The -t option to &quot;column&quot; pretty-prints a table. exit 0 colrm Column removal filter. This removes columns (characters) from a file and writes the file, lacking the range of specified columns, back to stdout. colrm 2 4 &lt;filename removes the second through fourth characters from each line of the text file filename. Caution If the file contains tabs or nonprintable characters, this may cause unpredictable behavior. In such cases, consider using expand and unexpand in a pipe preceding colrm. nl Line numbering filter: nl filename lists filename to stdout, but inserts consecutive numbers at the beginning of each non-blank line. If filename omitted, operates on stdin. The output of nl is very similar to cat -b, since, by default nl does not list blank lines. Example 16-28. nl: A self-numbering script. #!/bin/bash # line-number.sh # This script echoes itself twice to stdout with its lines numbered. echo &quot; line number = $LINENO&quot; # 'nl' sees this as line 4 # (nl does not number blank lines). # 'cat -n' sees it correctly as line #6. nl `basename $0` echo; echo # Now, let's try it with 'cat -n' cat -n `basename $0` # The difference is that 'cat -n' numbers the blank lines. # Note that 'nl -ba' will also do so. exit 0 # ----------------------------------------------------------------- pr Print formatting filter. This will paginate files (or stdout) into sections suitable for hard copy printing or viewing on screen. Various options permit row and column manipulation, joining lines, setting margins, numbering lines, adding page headers, and merging files, among other things. The pr command combines much of the functionality of nl, paste, fold, column, and expand. pr -o 5 --width=65 fileZZZ | more gives a nice paginated listing to screen of fileZZZ with margins set at 5 and 65. A particularly useful option is -d, forcing double-spacing (same effect as sed -G). gettext The GNU gettext package is a set of utilities for localizing and translating the text output of programs into foreign languages. While originally intended for C programs, it now supports quite a number of programming and scripting languages. The gettext program works on shell scripts. See the info page. msgfmt A program for generating binary message catalogs. It is used for localization. iconv A utility for converting file(s) to a different encoding (character set). Its chief use is for localization. # Convert a string from UTF-8 to UTF-16 and print to the BookList function write_utf8_string { STRING=$1 BOOKLIST=$2 echo -n &quot;$STRING&quot; | iconv -f UTF8 -t UTF16 | \ cut -b 3- | tr -d \\n &gt;&gt; &quot;$BOOKLIST&quot; } # From Peter Knowles' &quot;booklistgen.sh&quot; script #+ for converting files to Sony Librie/PRS-50X format. # (http://booklistgensh.peterknowles.com) recode Consider this a fancier version of iconv, above. This very versatile utility for converting a file to a different encoding scheme. Note that recode is not part of the standard Linux installation. TeX, gs TeX and Postscript are text markup languages used for preparing copy for printing or formatted video display. TeX is Donald Knuth's elaborate typsetting system. It is often convenient to write a shell script encapsulating all the options and arguments passed to one of these markup languages. Ghostscript (gs) is a GPL-ed Postscript interpreter. texexec Utility for processing TeX and pdf files. Found in /usr/bin on many Linux distros, it is actually a shell wrapper that calls Perl to invoke Tex. texexec --pdfarrange --result=Concatenated.pdf *pdf # Concatenates all the pdf files in the current working directory #+ into the merged file, Concatenated.pdf . . . # (The --pdfarrange option repaginates a pdf file. See also --pdfcombine.) # The above command-line could be parameterized and put into a shell script. enscript Utility for converting plain text file to PostScript For example, enscript filename.txt -p filename.ps produces the PostScript output file filename.ps. groff, tbl, eqn Yet another text markup and display formatting language is groff. This is the enhanced GNU version of the venerable UNIX roff/troff display and typesetting package. Manpages use groff. The tbl table processing utility is considered part of groff, as its function is to convert table markup into groff commands. The eqn equation processing utility is likewise part of groff, and its function is to convert equation markup into groff commands. Example 16-29. manview: Viewing formatted manpages #!/bin/bash # manview.sh: Formats the source of a man page for viewing. # This script is useful when writing man page source. # It lets you look at the intermediate results on the fly #+ while working on it. E_WRONGARGS=85 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` filename&quot; exit $E_WRONGARGS fi # --------------------------- groff -Tascii -man $1 | less # From the man page for groff. # --------------------------- # If the man page includes tables and/or equations, #+ then the above code will barf. # The following line can handle such cases. # # gtbl &lt; &quot;$1&quot; | geqn -Tlatin1 | groff -Tlatin1 -mtty-char -man # # Thanks, S.C. exit $? # See also the &quot;maned.sh&quot; script. See also Example A-39. lex, yacc The lex lexical analyzer produces programs for pattern matching. This has been replaced by the nonproprietary flex on Linux systems. The yacc utility creates a parser based on a set of specifications. This has been replaced by the nonproprietary bison on Linux systems. 16.5. File and Archiving Commands Archiving tar The standard UNIX archiving utility. [75] Originally a Tape ARchiving program, it has developed into a general purpose package that can handle all manner of archiving with all types of destination devices, ranging from tape drives to regular files to even stdout (see Example 3-4). GNU tar has been patched to accept various compression filters, for example: tar czvf archive_name.tar.gz *, which recursively archives and gzips all files in a directory tree except dotfiles in the current working directory ($PWD). [76] Some useful tar options: -c create (a new archive) -x extract (files from existing archive) --delete delete (files from existing archive) Caution This option will not work on magnetic tape devices. -r append (files to existing archive) -A append (tar files to existing archive) -t list (contents of existing archive) -u update archive -d compare archive with specified filesystem --after-date only process files with a date stamp after specified date -z gzip the archive (compress or uncompress, depending on whether combined with the -c or -x) option -j bzip2 the archive Caution It may be difficult to recover data from a corrupted gzipped tar archive. When archiving important files, make multiple backups. shar Shell archiving utility. The text and/or binary files in a shell archive are concatenated without compression, and the resultant archive is essentially a shell script, complete with #!/bin/sh header, containing all the necessary unarchiving commands, as well as the files themselves. Unprintable binary characters in the target file(s) are converted to printable ASCII characters in the output shar file. Shar archives still show up in Usenet newsgroups, but otherwise shar has been replaced by tar/gzip. The unshar command unpacks shar archives. The mailshar command is a Bash script that uses shar to concatenate multiple files into a single one for e-mailing. This script supports compression and uuencoding. ar Creation and manipulation utility for archives, mainly used for binary object file libraries. rpm The Red Hat Package Manager, or rpm utility provides a wrapper for source or binary archives. It includes commands for installing and checking the integrity of packages, among other things. A simple rpm -i package_name.rpm usually suffices to install a package, though there are many more options available. Tip rpm -qf identifies which package a file originates from. bash$ rpm -qf /bin/ls coreutils-5.2.1-31 Tip rpm -qa gives a complete list of all installed rpm packages on a given system. An rpm -qa package_name lists only the package(s) corresponding to package_name. bash$ rpm -qa redhat-logos-1.1.3-1 glibc-2.2.4-13 cracklib-2.7-12 dosfstools-2.7-1 gdbm-1.8.0-10 ksymoops-2.4.1-1 mktemp-1.5-11 perl-5.6.0-17 reiserfs-utils-3.x.0j-2 ... bash$ rpm -qa docbook-utils docbook-utils-0.6.9-2 bash$ rpm -qa docbook | grep docbook docbook-dtd31-sgml-1.0-10 docbook-style-dsssl-1.64-3 docbook-dtd30-sgml-1.0-10 docbook-dtd40-sgml-1.0-11 docbook-utils-pdf-0.6.9-2 docbook-dtd41-sgml-1.0-10 docbook-utils-0.6.9-2 cpio This specialized archiving copy command (copy input and output) is rarely seen any more, having been supplanted by tar/gzip. It still has its uses, such as moving a directory tree. With an appropriate block size (for copying) specified, it can be appreciably faster than tar. Example 16-30. Using cpio to move a directory tree #!/bin/bash # Copying a directory tree using cpio. # Advantages of using 'cpio': # Speed of copying. It's faster than 'tar' with pipes. # Well suited for copying special files (named pipes, etc.) #+ that 'cp' may choke on. ARGS=2 E_BADARGS=65 if [ $# -ne &quot;$ARGS&quot; ] then echo &quot;Usage: `basename $0` source destination&quot; exit $E_BADARGS fi source=&quot;$1&quot; destination=&quot;$2&quot; ################################################################### find &quot;$source&quot; -depth | cpio -admvp &quot;$destination&quot; # ^^^^^ ^^^^^ # Read the 'find' and 'cpio' info pages to decipher these options. # The above works only relative to $PWD (current directory) . . . #+ full pathnames are specified. ################################################################### # Exercise: # -------- # Add code to check the exit status ($?) of the 'find | cpio' pipe #+ and output appropriate error messages if anything went wrong. exit $? rpm2cpio This command extracts a cpio archive from an rpm one. Example 16-31. Unpacking an rpm archive #!/bin/bash # de-rpm.sh: Unpack an 'rpm' archive : ${1?&quot;Usage: `basename $0` target-file&quot;} # Must specify 'rpm' archive name as an argument. TEMPFILE=$$.cpio # Tempfile with &quot;unique&quot; name. # $$ is process ID of script. rpm2cpio &lt; $1 &gt; $TEMPFILE # Converts rpm archive into #+ cpio archive. cpio --make-directories -F $TEMPFILE -i # Unpacks cpio archive. rm -f $TEMPFILE # Deletes cpio archive. exit 0 # Exercise: # Add check for whether 1) &quot;target-file&quot; exists and #+ 2) it is an rpm archive. # Hint: Parse output of 'file' command. pax The pax portable archive exchange toolkit facilitates periodic file backups and is designed to be cross-compatible between various flavors of UNIX. It was designed to replace tar and cpio. pax -wf daily_backup.pax ~/linux-server/files # Creates a tar archive of all files in the target directory. # Note that the options to pax must be in the correct order -- #+ pax -fw has an entirely different effect. pax -f daily_backup.pax # Lists the files in the archive. pax -rf daily_backup.pax ~/bsd-server/files # Restores the backed-up files from the Linux machine #+ onto a BSD one. Note that pax handles many of the standard archiving and compression commands. Compression gzip The standard GNU/UNIX compression utility, replacing the inferior and proprietary compress. The corresponding decompression command is gunzip, which is the equivalent of gzip -d. Note The -c option sends the output of gzip to stdout. This is useful when piping to other commands. The zcat filter decompresses a gzipped file to stdout, as possible input to a pipe or redirection. This is, in effect, a cat command that works on compressed files (including files processed with the older compress utility). The zcat command is equivalent to gzip -dc. Caution On some commercial UNIX systems, zcat is a synonym for uncompress -c, and will not work on gzipped files. See also Example 7-7. bzip2 An alternate compression utility, usually more efficient (but slower) than gzip, especially on large files. The corresponding decompression command is bunzip2. Similar to the zcat command, bzcat decompresses a bzipped2-ed file to stdout. Note Newer versions of tar have been patched with bzip2 support. compress, uncompress This is an older, proprietary compression utility found in commercial UNIX distributions. The more efficient gzip has largely replaced it. Linux distributions generally include a compress workalike for compatibility, although gunzip can unarchive files treated with compress. Tip The znew command transforms compressed files into gzipped ones. sq Yet another compression (squeeze) utility, a filter that works only on sorted ASCII word lists. It uses the standard invocation syntax for a filter, sq &lt; input-file &gt; output-file. Fast, but not nearly as efficient as gzip. The corresponding uncompression filter is unsq, invoked like sq. Tip The output of sq may be piped to gzip for further compression. zip, unzip Cross-platform file archiving and compression utility compatible with DOS pkzip.exe. &quot;Zipped&quot; archives seem to be a more common medium of file exchange on the Internet than &quot;tarballs.&quot; unarc, unarj, unrar These Linux utilities permit unpacking archives compressed with the DOS arc.exe, arj.exe, and rar.exe programs. lzma, unlzma, lzcat Highly efficient Lempel-Ziv-Markov compression. The syntax of lzma is similar to that of gzip. The 7-zip Website has more information. xz, unxz, xzcat A new high-efficiency compression tool, backward compatible with lzma, and with an invocation syntax similar to gzip. For more information, see the Wikipedia entry. File Information file A utility for identifying file types. The command file file-name will return a file specification for file-name, such as ascii text or data. It references the magic numbers found in /usr/share/magic, /etc/magic, or /usr/lib/magic, depending on the Linux/UNIX distribution. The -f option causes file to run in batch mode, to read from a designated file a list of filenames to analyze. The -z option, when used on a compressed target file, forces an attempt to analyze the uncompressed file type. bash$ file test.tar.gz test.tar.gz: gzip compressed data, deflated, last modified: Sun Sep 16 13:34:51 2001, os: Unix bash file -z test.tar.gz test.tar.gz: GNU tar archive (gzip compressed data, deflated, last modified: Sun Sep 16 13:34:51 2001, os: Unix) # Find sh and Bash scripts in a given directory: DIRECTORY=/usr/local/bin KEYWORD=Bourne # Bourne and Bourne-Again shell scripts file $DIRECTORY/* | fgrep $KEYWORD # Output: # /usr/local/bin/burn-cd: Bourne-Again shell script text executable # /usr/local/bin/burnit: Bourne-Again shell script text executable # /usr/local/bin/cassette.sh: Bourne shell script text executable # /usr/local/bin/copy-cd: Bourne-Again shell script text executable # . . . Example 16-32. Stripping comments from C program files #!/bin/bash # strip-comment.sh: Strips out the comments (/* COMMENT */) in a C program. E_NOARGS=0 E_ARGERROR=66 E_WRONG_FILE_TYPE=67 if [ $# -eq &quot;$E_NOARGS&quot; ] then echo &quot;Usage: `basename $0` C-program-file&quot; &gt;&amp;2 # Error message to stderr. exit $E_ARGERROR fi # Test for correct file type. type=`file $1 | awk '{ print $2, $3, $4, $5 }'` # &quot;file $1&quot; echoes file type . . . # Then awk removes the first field, the filename . . . # Then the result is fed into the variable &quot;type.&quot; correct_type=&quot;ASCII C program text&quot; if [ &quot;$type&quot; != &quot;$correct_type&quot; ] then echo echo &quot;This script works on C program files only.&quot; echo exit $E_WRONG_FILE_TYPE fi # Rather cryptic sed script: #-------- sed ' /^\/\*/d /.*\*\//d ' $1 #-------- # Easy to understand if you take several hours to learn sed fundamentals. # Need to add one more line to the sed script to deal with #+ case where line of code has a comment following it on same line. # This is left as a non-trivial exercise. # Also, the above code deletes non-comment lines with a &quot;*/&quot; . . . #+ not a desirable result. exit 0 # ---------------------------------------------------------------- # Code below this line will not execute because of 'exit 0' above. # Stephane Chazelas suggests the following alternative: usage() { echo &quot;Usage: `basename $0` C-program-file&quot; &gt;&amp;2 exit 1 } WEIRD=`echo -n -e '\377'` # or WEIRD=$'\377' [[ $# -eq 1 ]] || usage case `file &quot;$1&quot;` in *&quot;C program text&quot;*) sed -e &quot;s%/\*%${WEIRD}%g;s%\*/%${WEIRD}%g&quot; &quot;$1&quot; \ | tr '\377\n' '\n\377' \ | sed -ne 'p;n' \ | tr -d '\n' | tr '\377' '\n';; *) usage;; esac # This is still fooled by things like: # printf(&quot;/*&quot;); # or # /* /* buggy embedded comment */ # # To handle all special cases (comments in strings, comments in string #+ where there is a \&quot;, \\&quot; ...), #+ the only way is to write a C parser (using lex or yacc perhaps?). exit 0 which which command gives the full path to &quot;command.&quot; This is useful for finding out whether a particular command or utility is installed on the system. $bash which rm /usr/bin/rm For an interesting use of this command, see Example 36-16. whereis Similar to which, above, whereis command gives the full path to &quot;command,&quot; but also to its manpage. $bash whereis rm rm: /bin/rm /usr/share/man/man1/rm.1.bz2 whatis whatis command looks up &quot;command&quot; in the whatis database. This is useful for identifying system commands and important configuration files. Consider it a simplified man command. $bash whatis whatis whatis (1) - search the whatis database for complete words Example 16-33. Exploring /usr/X11R6/bin #!/bin/bash # What are all those mysterious binaries in /usr/X11R6/bin? DIRECTORY=&quot;/usr/X11R6/bin&quot; # Try also &quot;/bin&quot;, &quot;/usr/bin&quot;, &quot;/usr/local/bin&quot;, etc. for file in $DIRECTORY/* do whatis `basename $file` # Echoes info about the binary. done exit 0 # Note: For this to work, you must create a &quot;whatis&quot; database #+ with /usr/sbin/makewhatis. # You may wish to redirect output of this script, like so: # ./what.sh &gt;&gt;whatis.db # or view it a page at a time on stdout, # ./what.sh | less See also Example 11-3. vdir Show a detailed directory listing. The effect is similar to ls -lb. This is one of the GNU fileutils. bash$ vdir total 10 -rw-r--r-- 1 bozo bozo 4034 Jul 18 22:04 data1.xrolo -rw-r--r-- 1 bozo bozo 4602 May 25 13:58 data1.xrolo.bak -rw-r--r-- 1 bozo bozo 877 Dec 17 2000 employment.xrolo bash ls -l total 10 -rw-r--r-- 1 bozo bozo 4034 Jul 18 22:04 data1.xrolo -rw-r--r-- 1 bozo bozo 4602 May 25 13:58 data1.xrolo.bak -rw-r--r-- 1 bozo bozo 877 Dec 17 2000 employment.xrolo locate, slocate The locate command searches for files using a database stored for just that purpose. The slocate command is the secure version of locate (which may be aliased to slocate). $bash locate hickson /usr/lib/xephem/catalogs/hickson.edb getfacl, setfacl These commands retrieve or set the file access control list -- the owner, group, and file permissions. bash$ getfacl * # file: test1.txt # owner: bozo # group: bozgrp user::rw- group::rw- other::r-- # file: test2.txt # owner: bozo # group: bozgrp user::rw- group::rw- other::r-- bash$ setfacl -m u:bozo:rw yearly_budget.csv bash$ getfacl yearly_budget.csv # file: yearly_budget.csv # owner: accountant # group: budgetgrp user::rw- user:bozo:rw- user:accountant:rw- group::rw- mask::rw- other::r-- readlink Disclose the file that a symbolic link points to. bash$ readlink /usr/bin/awk ../../bin/gawk strings Use the strings command to find printable strings in a binary or data file. It will list sequences of printable characters found in the target file. This might be handy for a quick 'n dirty examination of a core dump or for looking at an unknown graphic image file (strings image-file | more might show something like JFIF, which would identify the file as a jpeg graphic). In a script, you would probably parse the output of strings with grep or sed. See Example 11-8 and Example 11-10. Example 16-34. An &quot;improved&quot; strings command #!/bin/bash # wstrings.sh: &quot;word-strings&quot; (enhanced &quot;strings&quot; command) # # This script filters the output of &quot;strings&quot; by checking it #+ against a standard word list file. # This effectively eliminates gibberish and noise, #+ and outputs only recognized words. # =========================================================== # Standard Check for Script Argument(s) ARGS=1 E_BADARGS=85 E_NOFILE=86 if [ $# -ne $ARGS ] then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi if [ ! -f &quot;$1&quot; ] # Check if file exists. then echo &quot;File \&quot;$1\&quot; does not exist.&quot; exit $E_NOFILE fi # =========================================================== MINSTRLEN=3 # Minimum string length. WORDFILE=/usr/share/dict/linux.words # Dictionary file. # May specify a different word list file #+ of one-word-per-line format. # For example, the &quot;yawl&quot; word-list package, # http://bash.deta.in/yawl-0.3.2.tar.gz wlist=`strings &quot;$1&quot; | tr A-Z a-z | tr '[:space:]' Z | \ tr -cs '[:alpha:]' Z | tr -s '\173-\377' Z | tr Z ' '` # Translate output of 'strings' command with multiple passes of 'tr'. # &quot;tr A-Z a-z&quot; converts to lowercase. # &quot;tr '[:space:]'&quot; converts whitespace characters to Z's. # &quot;tr -cs '[:alpha:]' Z&quot; converts non-alphabetic characters to Z's, #+ and squeezes multiple consecutive Z's. # &quot;tr -s '\173-\377' Z&quot; converts all characters past 'z' to Z's #+ and squeezes multiple consecutive Z's, #+ which gets rid of all the weird characters that the previous #+ translation failed to deal with. # Finally, &quot;tr Z ' '&quot; converts all those Z's to whitespace, #+ which will be seen as word separators in the loop below. # *********************************************************************** # Note the technique of feeding/piping the output of 'tr' back to itself, #+ but with different arguments and/or options on each successive pass. # *********************************************************************** for word in $wlist # Important: # $wlist must not be quoted here. # &quot;$wlist&quot; does not work. # Why not? do strlen=${#word} # String length. if [ &quot;$strlen&quot; -lt &quot;$MINSTRLEN&quot; ] # Skip over short strings. then continue fi grep -Fw $word &quot;$WORDFILE&quot; # Match whole words only. # ^^^ # &quot;Fixed strings&quot; and #+ &quot;whole words&quot; options. done exit $? Comparison diff, patch diff: flexible file comparison utility. It compares the target files line-by-line sequentially. In some applications, such as comparing word dictionaries, it may be helpful to filter the files through sort and uniq before piping them to diff. diff file-1 file-2 outputs the lines in the files that differ, with carets showing which file each particular line belongs to. The --side-by-side option to diff outputs each compared file, line by line, in separate columns, with non-matching lines marked. The -c and -u options likewise make the output of the command easier to interpret. There are available various fancy frontends for diff, such as sdiff, wdiff, xdiff, and mgdiff. Tip The diff command returns an exit status of 0 if the compared files are identical, and 1 if they differ (or 2 when binary files are being compared). This permits use of diff in a test construct within a shell script (see below). A common use for diff is generating difference files to be used with patch The -e option outputs files suitable for ed or ex scripts. patch: flexible versioning utility. Given a difference file generated by diff, patch can upgrade a previous version of a package to a newer version. It is much more convenient to distribute a relatively small &quot;diff&quot; file than the entire body of a newly revised package. Kernel &quot;patches&quot; have become the preferred method of distributing the frequent releases of the Linux kernel. patch -p1 &lt;patch-file # Takes all the changes listed in 'patch-file' # and applies them to the files referenced therein. # This upgrades to a newer version of the package. Patching the kernel: cd /usr/src gzip -cd patchXX.gz | patch -p0 # Upgrading kernel source using 'patch'. # From the Linux kernel docs &quot;README&quot;, # by anonymous author (Alan Cox?). Note The diff command can also recursively compare directories (for the filenames present). bash$ diff -r ~/notes1 ~/notes2 Only in /home/bozo/notes1: file02 Only in /home/bozo/notes1: file03 Only in /home/bozo/notes2: file04 Tip Use zdiff to compare gzipped files. Tip Use diffstat to create a histogram (point-distribution graph) of output from diff. diff3, merge An extended version of diff that compares three files at a time. This command returns an exit value of 0 upon successful execution, but unfortunately this gives no information about the results of the comparison. bash$ diff3 file-1 file-2 file-3 ==== 1:1c This is line 1 of &quot;file-1&quot;. 2:1c This is line 1 of &quot;file-2&quot;. 3:1c This is line 1 of &quot;file-3&quot; The merge (3-way file merge) command is an interesting adjunct to diff3. Its syntax is merge Mergefile file1 file2. The result is to output to Mergefile the changes that lead from file1 to file2. Consider this command a stripped-down version of patch. sdiff Compare and/or edit two files in order to merge them into an output file. Because of its interactive nature, this command would find little use in a script. cmp The cmp command is a simpler version of diff, above. Whereas diff reports the differences between two files, cmp merely shows at what point they differ. Note Like diff, cmp returns an exit status of 0 if the compared files are identical, and 1 if they differ. This permits use in a test construct within a shell script. Example 16-35. Using cmp to compare two files within a script. #!/bin/bash # file-comparison.sh ARGS=2 # Two args to script expected. E_BADARGS=85 E_UNREADABLE=86 if [ $# -ne &quot;$ARGS&quot; ] then echo &quot;Usage: `basename $0` file1 file2&quot; exit $E_BADARGS fi if [[ ! -r &quot;$1&quot; || ! -r &quot;$2&quot; ]] then echo &quot;Both files to be compared must exist and be readable.&quot; exit $E_UNREADABLE fi cmp $1 $2 &amp;&gt; /dev/null # Redirection to /dev/null buries the output of the &quot;cmp&quot; command. # cmp -s $1 $2 has same result (&quot;-s&quot; silent flag to &quot;cmp&quot;) # Thank you Anders Gustavsson for pointing this out. # # Also works with 'diff', i.e., #+ diff $1 $2 &amp;&gt; /dev/null if [ $? -eq 0 ] # Test exit status of &quot;cmp&quot; command. then echo &quot;File \&quot;$1\&quot; is identical to file \&quot;$2\&quot;.&quot; else echo &quot;File \&quot;$1\&quot; differs from file \&quot;$2\&quot;.&quot; fi exit 0 Tip Use zcmp on gzipped files. comm Versatile file comparison utility. The files must be sorted for this to be useful. comm -options first-file second-file comm file-1 file-2 outputs three columns: column 1 = lines unique to file-1 column 2 = lines unique to file-2 column 3 = lines common to both. The options allow suppressing output of one or more columns. -1 suppresses column 1 -2 suppresses column 2 -3 suppresses column 3 -12 suppresses both columns 1 and 2, etc. This command is useful for comparing &quot;dictionaries&quot; or word lists -- sorted text files with one word per line. Utilities basename Strips the path information from a file name, printing only the file name. The construction basename $0 lets the script know its name, that is, the name it was invoked by. This can be used for &quot;usage&quot; messages if, for example a script is called with missing arguments: echo &quot;Usage: `basename $0` arg1 arg2 ... argn&quot; dirname Strips the basename from a filename, printing only the path information. Note basename and dirname can operate on any arbitrary string. The argument does not need to refer to an existing file, or even be a filename for that matter (see Example A-7). Example 16-36. basename and dirname #!/bin/bash address=/home/bozo/daily-journal.txt echo &quot;Basename of /home/bozo/daily-journal.txt = `basename $address`&quot; echo &quot;Dirname of /home/bozo/daily-journal.txt = `dirname $address`&quot; echo echo &quot;My own home is `basename ~/`.&quot; # `basename ~` also works. echo &quot;The home of my home is `dirname ~/`.&quot; # `dirname ~` also works. exit 0 split, csplit These are utilities for splitting a file into smaller chunks. Their usual use is for splitting up large files in order to back them up on floppies or preparatory to e-mailing or uploading them. The csplit command splits a file according to context, the split occuring where patterns are matched. Example 16-37. A script that copies itself in sections #!/bin/bash # splitcopy.sh # A script that splits itself into chunks, #+ then reassembles the chunks into an exact copy #+ of the original script. CHUNKSIZE=4 # Size of first chunk of split files. OUTPREFIX=xx # csplit prefixes, by default, #+ files with &quot;xx&quot; ... csplit &quot;$0&quot; &quot;$CHUNKSIZE&quot; # Some comment lines for padding . . . # Line 15 # Line 16 # Line 17 # Line 18 # Line 19 # Line 20 cat &quot;$OUTPREFIX&quot;* &gt; &quot;$0.copy&quot; # Concatenate the chunks. rm &quot;$OUTPREFIX&quot;* # Get rid of the chunks. exit $? Encoding and Encryption sum, cksum, md5sum, sha1sum These are utilities for generating checksums. A checksum is a number [77] mathematically calculated from the contents of a file, for the purpose of checking its integrity. A script might refer to a list of checksums for security purposes, such as ensuring that the contents of key system files have not been altered or corrupted. For security applications, use the md5sum (message digest 5 checksum) command, or better yet, the newer sha1sum (Secure Hash Algorithm). [78] bash$ cksum /boot/vmlinuz 1670054224 804083 /boot/vmlinuz bash$ echo -n &quot;Top Secret&quot; | cksum 3391003827 10 bash$ md5sum /boot/vmlinuz 0f43eccea8f09e0a0b2b5cf1dcf333ba /boot/vmlinuz bash$ echo -n &quot;Top Secret&quot; | md5sum 8babc97a6f62a4649716f4df8d61728f - Note The cksum command shows the size, in bytes, of its target, whether file or stdout. The md5sum and sha1sum commands display a dash when they receive their input from stdout. Example 16-38. Checking file integrity #!/bin/bash # file-integrity.sh: Checking whether files in a given directory # have been tampered with. E_DIR_NOMATCH=80 E_BAD_DBFILE=81 dbfile=File_record.md5 # Filename for storing records (database file). set_up_database () { echo &quot;&quot;$directory&quot;&quot; &gt; &quot;$dbfile&quot; # Write directory name to first line of file. md5sum &quot;$directory&quot;/* &gt;&gt; &quot;$dbfile&quot; # Append md5 checksums and filenames. } check_database () { local n=0 local filename local checksum # ------------------------------------------- # # This file check should be unnecessary, #+ but better safe than sorry. if [ ! -r &quot;$dbfile&quot; ] then echo &quot;Unable to read checksum database file!&quot; exit $E_BAD_DBFILE fi # ------------------------------------------- # while read record[n] do directory_checked=&quot;${record[0]}&quot; if [ &quot;$directory_checked&quot; != &quot;$directory&quot; ] then echo &quot;Directories do not match up!&quot; # Tried to use file for a different directory. exit $E_DIR_NOMATCH fi if [ &quot;$n&quot; -gt 0 ] # Not directory name. then filename[n]=$( echo ${record[$n]} | awk '{ print $2 }' ) # md5sum writes records backwards, #+ checksum first, then filename. checksum[n]=$( md5sum &quot;${filename[n]}&quot; ) if [ &quot;${record[n]}&quot; = &quot;${checksum[n]}&quot; ] then echo &quot;${filename[n]} unchanged.&quot; elif [ &quot;`basename ${filename[n]}`&quot; != &quot;$dbfile&quot; ] # Skip over checksum database file, #+ as it will change with each invocation of script. # --- # This unfortunately means that when running #+ this script on $PWD, tampering with the #+ checksum database file will not be detected. # Exercise: Fix this. then echo &quot;${filename[n]} : CHECKSUM ERROR!&quot; # File has been changed since last checked. fi fi let &quot;n+=1&quot; done &lt;&quot;$dbfile&quot; # Read from checksum database file. } # =================================================== # # main () if [ -z &quot;$1&quot; ] then directory=&quot;$PWD&quot; # If not specified, else #+ use current working directory. directory=&quot;$1&quot; fi clear # Clear screen. echo &quot; Running file integrity check on $directory&quot; echo # ------------------------------------------------------------------ # if [ ! -r &quot;$dbfile&quot; ] # Need to create database file? then echo &quot;Setting up database file, \&quot;&quot;$directory&quot;/&quot;$dbfile&quot;\&quot;.&quot;; echo set_up_database fi # ------------------------------------------------------------------ # check_database # Do the actual work. echo # You may wish to redirect the stdout of this script to a file, #+ especially if the directory checked has many files in it. exit 0 # For a much more thorough file integrity check, #+ consider the &quot;Tripwire&quot; package, #+ http://sourceforge.net/projects/tripwire/. Also see Example A-19, Example 36-16, and Example 10-2 for creative uses of the md5sum command. Note There have been reports that the 128-bit md5sum can be cracked, so the more secure 160-bit sha1sum is a welcome new addition to the checksum toolkit. bash$ md5sum testfile e181e2c8720c60522c4c4c981108e367 testfile bash$ sha1sum testfile 5d7425a9c08a66c3177f1e31286fa40986ffc996 testfile Security consultants have demonstrated that even sha1sum can be compromised. Fortunately, newer Linux distros include longer bit-length sha224sum, sha256sum, sha384sum, and sha512sum commands. uuencode This utility encodes binary files (images, sound files, compressed files, etc.) into ASCII characters, making them suitable for transmission in the body of an e-mail message or in a newsgroup posting. This is especially useful where MIME (multimedia) encoding is not available. uudecode This reverses the encoding, decoding uuencoded files back into the original binaries. Example 16-39. Uudecoding encoded files #!/bin/bash # Uudecodes all uuencoded files in current working directory. lines=35 # Allow 35 lines for the header (very generous). for File in * # Test all the files in $PWD. do search1=`head -n $lines $File | grep begin | wc -w` search2=`tail -n $lines $File | grep end | wc -w` # Uuencoded files have a &quot;begin&quot; near the beginning, #+ and an &quot;end&quot; near the end. if [ &quot;$search1&quot; -gt 0 ] then if [ &quot;$search2&quot; -gt 0 ] then echo &quot;uudecoding - $File -&quot; uudecode $File fi fi done # Note that running this script upon itself fools it #+ into thinking it is a uuencoded file, #+ because it contains both &quot;begin&quot; and &quot;end&quot;. # Exercise: # -------- # Modify this script to check each file for a newsgroup header, #+ and skip to next if not found. exit 0 Tip The fold -s command may be useful (possibly in a pipe) to process long uudecoded text messages downloaded from Usenet newsgroups. mimencode, mmencode The mimencode and mmencode commands process multimedia-encoded e-mail attachments. Although mail user agents (such as pine or kmail) normally handle this automatically, these particular utilities permit manipulating such attachments manually from the command-line or in batch processing mode by means of a shell script. crypt At one time, this was the standard UNIX file encryption utility. [79] Politically-motivated government regulations prohibiting the export of encryption software resulted in the disappearance of crypt from much of the UNIX world, and it is still missing from most Linux distributions. Fortunately, programmers have come up with a number of decent alternatives to it, among them the author's very own cruft (see Example A-4). openssl This is an Open Source implementation of Secure Sockets Layer encryption. # To encrypt a file: openssl aes-128-ecb -salt -in file.txt -out file.encrypted \ -pass pass:my_password # ^^^^^^^^^^^ User-selected password. # aes-128-ecb is the encryption method chosen. # To decrypt an openssl-encrypted file: openssl aes-128-ecb -d -salt -in file.encrypted -out file.txt \ -pass pass:my_password # ^^^^^^^^^^^ User-selected password. Piping openssl to/from tar makes it possible to encrypt an entire directory tree. # To encrypt a directory: sourcedir=&quot;/home/bozo/testfiles&quot; encrfile=&quot;encr-dir.tar.gz&quot; password=my_secret_password tar czvf - &quot;$sourcedir&quot; | openssl des3 -salt -out &quot;$encrfile&quot; -pass pass:&quot;$password&quot; # ^^^^ Uses des3 encryption. # Writes encrypted file &quot;encr-dir.tar.gz&quot; in current working directory. # To decrypt the resulting tarball: openssl des3 -d -salt -in &quot;$encrfile&quot; -pass pass:&quot;$password&quot; | tar -xzv # Decrypts and unpacks into current working directory. Of course, openssl has many other uses, such as obtaining signed certificates for Web sites. See the info page. shred Securely erase a file by overwriting it multiple times with random bit patterns before deleting it. This command has the same effect as Example 16-61, but does it in a more thorough and elegant manner. This is one of the GNU fileutils. Caution Advanced forensic technology may still be able to recover the contents of a file, even after application of shred. Miscellaneous mktemp Create a temporary file [80] with a &quot;unique&quot; filename. When invoked from the command-line without additional arguments, it creates a zero-length file in the /tmp directory. bash$ mktemp /tmp/tmp.zzsvql3154 PREFIX=filename tempfile=`mktemp $PREFIX.XXXXXX` # ^^^^^^ Need at least 6 placeholders #+ in the filename template. # If no filename template supplied, #+ &quot;tmp.XXXXXXXXXX&quot; is the default. echo &quot;tempfile name = $tempfile&quot; # tempfile name = filename.QA2ZpY # or something similar... # Creates a file of that name in the current working directory #+ with 600 file permissions. # A &quot;umask 177&quot; is therefore unnecessary, #+ but it's good programming practice nevertheless. make Utility for building and compiling binary packages. This can also be used for any set of operations triggered by incremental changes in source files. The make command checks a Makefile, a list of file dependencies and operations to be carried out. The make utility is, in effect, a powerful scripting language similar in many ways to Bash, but with the capability of recognizing dependencies. For in-depth coverage of this useful tool set, see the GNU software documentation site. install Special purpose file copying command, similar to cp, but capable of setting permissions and attributes of the copied files. This command seems tailormade for installing software packages, and as such it shows up frequently in Makefiles (in the make install : section). It could likewise prove useful in installation scripts. dos2unix This utility, written by Benjamin Lin and collaborators, converts DOS-formatted text files (lines terminated by CR-LF) to UNIX format (lines terminated by LF only), and vice-versa. ptx The ptx [targetfile] command outputs a permuted index (cross-reference list) of the targetfile. This may be further filtered and formatted in a pipe, if necessary. more, less Pagers that display a text file or stream to stdout, one screenful at a time. These may be used to filter the output of stdout . . . or of a script. An interesting application of more is to &quot;test drive&quot; a command sequence, to forestall potentially unpleasant consequences. ls /home/bozo | awk '{print &quot;rm -rf &quot; $1}' | more # ^^^^ # Testing the effect of the following (disastrous) command-line: # ls /home/bozo | awk '{print &quot;rm -rf &quot; $1}' | sh # Hand off to the shell to execute . . . ^^ The less pager has the interesting property of doing a formatted display of man page source. See Example A-39. 16.6. Communications Commands Certain of the following commands find use in network data transfer and analysis, as well as in chasing spammers. Information and Statistics host Searches for information about an Internet host by name or IP address, using DNS. bash$ host surfacemail.com surfacemail.com. has address 202.92.42.236 ipcalc Displays IP information for a host. With the -h option, ipcalc does a reverse DNS lookup, finding the name of the host (server) from the IP address. bash$ ipcalc -h 202.92.42.236 HOSTNAME=surfacemail.com nslookup Do an Internet &quot;name server lookup&quot; on a host by IP address. This is essentially equivalent to ipcalc -h or dig -x . The command may be run either interactively or noninteractively, i.e., from within a script. The nslookup command has allegedly been &quot;deprecated,&quot; but it is still useful. bash$ nslookup -sil 66.97.104.180 nslookup kuhleersparnis.ch Server: 135.116.137.2 Address: 135.116.137.2#53 Non-authoritative answer: Name: kuhleersparnis.ch dig Domain Information Groper. Similar to nslookup, dig does an Internet name server lookup on a host. May be run from the command-line or from within a script. Some interesting options to dig are +time=N for setting a query timeout to N seconds, +nofail for continuing to query servers until a reply is received, and -x for doing a reverse address lookup. Compare the output of dig -x with ipcalc -h and nslookup. bash$ dig -x 81.9.6.2 ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 11649 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0 ;; QUESTION SECTION: ;2.6.9.81.in-addr.arpa. IN PTR ;; AUTHORITY SECTION: 6.9.81.in-addr.arpa. 3600 IN SOA ns.eltel.net. noc.eltel.net. 2002031705 900 600 86400 3600 ;; Query time: 537 msec ;; SERVER: 135.116.137.2#53(135.116.137.2) ;; WHEN: Wed Jun 26 08:35:24 2002 ;; MSG SIZE rcvd: 91 Example 16-40. Finding out where to report a spammer #!/bin/bash # spam-lookup.sh: Look up abuse contact to report a spammer. # Thanks, Michael Zick. # Check for command-line arg. ARGCOUNT=1 E_WRONGARGS=85 if [ $# -ne &quot;$ARGCOUNT&quot; ] then echo &quot;Usage: `basename $0` domain-name&quot; exit $E_WRONGARGS fi dig +short $1.contacts.abuse.net -c in -t txt # Also try: # dig +nssearch $1 # Tries to find &quot;authoritative name servers&quot; and display SOA records. # The following also works: # whois -h whois.abuse.net $1 # ^^ ^^^^^^^^^^^^^^^ Specify host. # Can even lookup multiple spammers with this, i.e.&quot; # whois -h whois.abuse.net $spamdomain1 $spamdomain2 . . . # Exercise: # -------- # Expand the functionality of this script #+ so that it automatically e-mails a notification #+ to the responsible ISP's contact address(es). # Hint: use the &quot;mail&quot; command. exit $? # spam-lookup.sh chinatietong.com # A known spam domain. # &quot;crnet_mgr@chinatietong.com&quot; # &quot;crnet_tec@chinatietong.com&quot; # &quot;postmaster@chinatietong.com&quot; # For a more elaborate version of this script, #+ see the SpamViz home page, http://www.spamviz.net/index.html. Example 16-41. Analyzing a spam domain #! /bin/bash # is-spammer.sh: Identifying spam domains # $Id: is-spammer, v 1.4 2004/09/01 19:37:52 mszick Exp $ # Above line is RCS ID info. # # This is a simplified version of the &quot;is_spammer.bash #+ script in the Contributed Scripts appendix. # is-spammer &lt;domain.name&gt; # Uses an external program: 'dig' # Tested with version: 9.2.4rc5 # Uses functions. # Uses IFS to parse strings by assignment into arrays. # And even does something useful: checks e-mail blacklists. # Use the domain.name(s) from the text body: # http://www.good_stuff.spammer.biz/just_ignore_everything_else # ^^^^^^^^^^^ # Or the domain.name(s) from any e-mail address: # Really_Good_Offer@spammer.biz # # as the only argument to this script. #(PS: have your Inet connection running) # # So, to invoke this script in the above two instances: # is-spammer.sh spammer.biz # Whitespace == :Space:Tab:Line Feed:Carriage Return: WSP_IFS=$'\x20'$'\x09'$'\x0A'$'\x0D' # No Whitespace == Line Feed:Carriage Return No_WSP=$'\x0A'$'\x0D' # Field separator for dotted decimal ip addresses ADR_IFS=${No_WSP}'.' # Get the dns text resource record. # get_txt &lt;error_code&gt; &lt;list_query&gt; get_txt() { # Parse $1 by assignment at the dots. local -a dns IFS=$ADR_IFS dns=( $1 ) IFS=$WSP_IFS if [ &quot;${dns[0]}&quot; == '127' ] then # See if there is a reason. echo $(dig +short $2 -t txt) fi } # Get the dns address resource record. # chk_adr &lt;rev_dns&gt; &lt;list_server&gt; chk_adr() { local reply local server local reason server=${1}${2} reply=$( dig +short ${server} ) # If reply might be an error code . . . if [ ${#reply} -gt 6 ] then reason=$(get_txt ${reply} ${server} ) reason=${reason:-${reply}} fi echo ${reason:-' not blacklisted.'} } # Need to get the IP address from the name. echo 'Get address of: '$1 ip_adr=$(dig +short $1) dns_reply=${ip_adr:-' no answer '} echo ' Found address: '${dns_reply} # A valid reply is at least 4 digits plus 3 dots. if [ ${#ip_adr} -gt 6 ] then echo declare query # Parse by assignment at the dots. declare -a dns IFS=$ADR_IFS dns=( ${ip_adr} ) IFS=$WSP_IFS # Reorder octets into dns query order. rev_dns=&quot;${dns[3]}&quot;'.'&quot;${dns[2]}&quot;'.'&quot;${dns[1]}&quot;'.'&quot;${dns[0]}&quot;'.' # See: http://www.spamhaus.org (Conservative, well maintained) echo -n 'spamhaus.org says: ' echo $(chk_adr ${rev_dns} 'sbl-xbl.spamhaus.org') # See: http://ordb.org (Open mail relays) echo -n ' ordb.org says: ' echo $(chk_adr ${rev_dns} 'relays.ordb.org') # See: http://www.spamcop.net/ (You can report spammers here) echo -n ' spamcop.net says: ' echo $(chk_adr ${rev_dns} 'bl.spamcop.net') # # # other blacklist operations # # # # See: http://cbl.abuseat.org. echo -n ' abuseat.org says: ' echo $(chk_adr ${rev_dns} 'cbl.abuseat.org') # See: http://dsbl.org/usage (Various mail relays) echo echo 'Distributed Server Listings' echo -n ' list.dsbl.org says: ' echo $(chk_adr ${rev_dns} 'list.dsbl.org') echo -n ' multihop.dsbl.org says: ' echo $(chk_adr ${rev_dns} 'multihop.dsbl.org') echo -n 'unconfirmed.dsbl.org says: ' echo $(chk_adr ${rev_dns} 'unconfirmed.dsbl.org') else echo echo 'Could not use that address.' fi exit 0 # Exercises: # -------- # 1) Check arguments to script, # and exit with appropriate error message if necessary. # 2) Check if on-line at invocation of script, # and exit with appropriate error message if necessary. # 3) Substitute generic variables for &quot;hard-coded&quot; BHL domains. # 4) Set a time-out for the script using the &quot;+time=&quot; option to the 'dig' command. For a much more elaborate version of the above script, see Example A-28. traceroute Trace the route taken by packets sent to a remote host. This command works within a LAN, WAN, or over the Internet. The remote host may be specified by an IP address. The output of this command may be filtered by grep or sed in a pipe. bash$ traceroute 81.9.6.2 traceroute to 81.9.6.2 (81.9.6.2), 30 hops max, 38 byte packets 1 tc43.xjbnnbrb.com (136.30.178.8) 191.303 ms 179.400 ms 179.767 ms 2 or0.xjbnnbrb.com (136.30.178.1) 179.536 ms 179.534 ms 169.685 ms 3 192.168.11.101 (192.168.11.101) 189.471 ms 189.556 ms * ... ping Broadcast an ICMP ECHO_REQUEST packet to another machine, either on a local or remote network. This is a diagnostic tool for testing network connections, and it should be used with caution. bash$ ping localhost PING localhost.localdomain (127.0.0.1) from 127.0.0.1 : 56(84) bytes of data. 64 bytes from localhost.localdomain (127.0.0.1): icmp_seq=0 ttl=255 time=709 usec 64 bytes from localhost.localdomain (127.0.0.1): icmp_seq=1 ttl=255 time=286 usec --- localhost.localdomain ping statistics --- 2 packets transmitted, 2 packets received, 0% packet loss round-trip min/avg/max/mdev = 0.286/0.497/0.709/0.212 ms A successful ping returns an exit status of 0. This can be tested for in a script. HNAME=news-15.net # Notorious spammer. # HNAME=$HOST # Debug: test for localhost. count=2 # Send only two pings. if [[ `ping -c $count &quot;$HNAME&quot;` ]] then echo &quot;&quot;$HNAME&quot; still up and broadcasting spam your way.&quot; else echo &quot;&quot;$HNAME&quot; seems to be down. Pity.&quot; fi whois Perform a DNS (Domain Name System) lookup. The -h option permits specifying which particular whois server to query. See Example 4-6 and Example 16-40. finger Retrieve information about users on a network. Optionally, this command can display a user's ~/.plan, ~/.project, and ~/.forward files, if present. bash$ finger Login Name Tty Idle Login Time Office Office Phone bozo Bozo Bozeman tty1 8 Jun 25 16:59 (:0) bozo Bozo Bozeman ttyp0 Jun 25 16:59 (:0.0) bozo Bozo Bozeman ttyp1 Jun 25 17:07 (:0.0) bash$ finger bozo Login: bozo Name: Bozo Bozeman Directory: /home/bozo Shell: /bin/bash Office: 2355 Clown St., 543-1234 On since Fri Aug 31 20:13 (MST) on tty1 1 hour 38 minutes idle On since Fri Aug 31 20:13 (MST) on pts/0 12 seconds idle On since Fri Aug 31 20:13 (MST) on pts/1 On since Fri Aug 31 20:31 (MST) on pts/2 1 hour 16 minutes idle Mail last read Tue Jul 3 10:08 2007 (MST) No Plan. Out of security considerations, many networks disable finger and its associated daemon. [81] chfn Change information disclosed by the finger command. vrfy Verify an Internet e-mail address. This command seems to be missing from newer Linux distros. Remote Host Access sx, rx The sx and rx command set serves to transfer files to and from a remote host using the xmodem protocol. These are generally part of a communications package, such as minicom. sz, rz The sz and rz command set serves to transfer files to and from a remote host using the zmodem protocol. Zmodem has certain advantages over xmodem, such as faster transmission rate and resumption of interrupted file transfers. Like sx and rx, these are generally part of a communications package. ftp Utility and protocol for uploading / downloading files to or from a remote host. An ftp session can be automated in a script (see Example 19-6 and Example A-4). uucp, uux, cu uucp: UNIX to UNIX copy. This is a communications package for transferring files between UNIX servers. A shell script is an effective way to handle a uucp command sequence. Since the advent of the Internet and e-mail, uucp seems to have faded into obscurity, but it still exists and remains perfectly workable in situations where an Internet connection is not available or appropriate. The advantage of uucp is that it is fault-tolerant, so even if there is a service interruption the copy operation will resume where it left off when the connection is restored. --- uux: UNIX to UNIX execute. Execute a command on a remote system. This command is part of the uucp package. --- cu: Call Up a remote system and connect as a simple terminal. It is a sort of dumbed-down version of telnet. This command is part of the uucp package. telnet Utility and protocol for connecting to a remote host. Caution The telnet protocol contains security holes and should therefore probably be avoided. Its use within a shell script is not recommended. wget The wget utility noninteractively retrieves or downloads files from a Web or ftp site. It works well in a script. wget -p http://www.xyz23.com/file01.html # The -p or --page-requisite option causes wget to fetch all files #+ required to display the specified page. wget -r ftp://ftp.xyz24.net/~bozo/project_files/ -O $SAVEFILE # The -r option recursively follows and retrieves all links #+ on the specified site. wget -c ftp://ftp.xyz25.net/bozofiles/filename.tar.bz2 # The -c option lets wget resume an interrupted download. # This works with ftp servers and many HTTP sites. Example 16-42. Getting a stock quote #!/bin/bash # quote-fetch.sh: Download a stock quote. E_NOPARAMS=86 if [ -z &quot;$1&quot; ] # Must specify a stock (symbol) to fetch. then echo &quot;Usage: `basename $0` stock-symbol&quot; exit $E_NOPARAMS fi stock_symbol=$1 file_suffix=.html # Fetches an HTML file, so name it appropriately. URL='http://finance.yahoo.com/q?s=' # Yahoo finance board, with stock query suffix. # ----------------------------------------------------------- wget -O ${stock_symbol}${file_suffix} &quot;${URL}${stock_symbol}&quot; # ----------------------------------------------------------- # To look up stuff on http://search.yahoo.com: # ----------------------------------------------------------- # URL=&quot;http://search.yahoo.com/search?fr=ush-news&amp;p=${query}&quot; # wget -O &quot;$savefilename&quot; &quot;${URL}&quot; # ----------------------------------------------------------- # Saves a list of relevant URLs. exit $? # Exercises: # --------- # # 1) Add a test to ensure the user running the script is on-line. # (Hint: parse the output of 'ps -ax' for &quot;ppp&quot; or &quot;connect.&quot; # # 2) Modify this script to fetch the local weather report, #+ taking the user's zip code as an argument. See also Example A-30 and Example A-31. lynx The lynx Web and file browser can be used inside a script (with the -dump option) to retrieve a file from a Web or ftp site noninteractively. lynx -dump http://www.xyz23.com/file01.html &gt;$SAVEFILE With the -traversal option, lynx starts at the HTTP URL specified as an argument, then &quot;crawls&quot; through all links located on that particular server. Used together with the -crawl option, outputs page text to a log file. rlogin Remote login, initates a session on a remote host. This command has security issues, so use ssh instead. rsh Remote shell, executes command(s) on a remote host. This has security issues, so use ssh instead. rcp Remote copy, copies files between two different networked machines. rsync Remote synchronize, updates (synchronizes) files between two different networked machines. bash$ rsync -a ~/sourcedir/*txt /node1/subdirectory/ Example 16-43. Updating FC4 #!/bin/bash # fc4upd.sh # Script author: Frank Wang. # Slight stylistic modifications by ABS Guide author. # Used in ABS Guide with permission. # Download Fedora Core 4 update from mirror site using rsync. # Should also work for newer Fedora Cores -- 5, 6, . . . # Only download latest package if multiple versions exist, #+ to save space. URL=rsync://distro.ibiblio.org/fedora-linux-core/updates/ # URL=rsync://ftp.kddilabs.jp/fedora/core/updates/ # URL=rsync://rsync.planetmirror.com/fedora-linux-core/updates/ DEST=${1:-/var/www/html/fedora/updates/} LOG=/tmp/repo-update-$(/bin/date +%Y-%m-%d).txt PID_FILE=/var/run/${0##*/}.pid E_RETURN=85 # Something unexpected happened. # General rsync options # -r: recursive download # -t: reserve time # -v: verbose OPTS=&quot;-rtv --delete-excluded --delete-after --partial&quot; # rsync include pattern # Leading slash causes absolute path name match. INCLUDE=( &quot;/4/i386/kde-i18n-Chinese*&quot; # ^ ^ # Quoting is necessary to prevent globbing. ) # rsync exclude pattern # Temporarily comment out unwanted pkgs using &quot;#&quot; . . . EXCLUDE=( /1 /2 /3 /testing /4/SRPMS /4/ppc /4/x86_64 /4/i386/debug &quot;/4/i386/kde-i18n-*&quot; &quot;/4/i386/openoffice.org-langpack-*&quot; &quot;/4/i386/*i586.rpm&quot; &quot;/4/i386/GFS-*&quot; &quot;/4/i386/cman-*&quot; &quot;/4/i386/dlm-*&quot; &quot;/4/i386/gnbd-*&quot; &quot;/4/i386/kernel-smp*&quot; # &quot;/4/i386/kernel-xen*&quot; # &quot;/4/i386/xen-*&quot; ) init () { # Let pipe command return possible rsync error, e.g., stalled network. set -o pipefail # Newly introduced in Bash, version 3. TMP=${TMPDIR:-/tmp}/${0##*/}.$$ # Store refined download list. trap &quot;{ rm -f $TMP 2&gt;/dev/null }&quot; EXIT # Clear temporary file on exit. } check_pid () { # Check if process exists. if [ -s &quot;$PID_FILE&quot; ]; then echo &quot;PID file exists. Checking ...&quot; PID=$(/bin/egrep -o &quot;^[[:digit:]]+&quot; $PID_FILE) if /bin/ps --pid $PID &amp;&gt;/dev/null; then echo &quot;Process $PID found. ${0##*/} seems to be running!&quot; /usr/bin/logger -t ${0##*/} \ &quot;Process $PID found. ${0##*/} seems to be running!&quot; exit $E_RETURN fi echo &quot;Process $PID not found. Start new process . . .&quot; fi } # Set overall file update range starting from root or $URL, #+ according to above patterns. set_range () { include= exclude= for p in &quot;${INCLUDE[@]}&quot;; do include=&quot;$include --include \&quot;$p\&quot;&quot; done for p in &quot;${EXCLUDE[@]}&quot;; do exclude=&quot;$exclude --exclude \&quot;$p\&quot;&quot; done } # Retrieve and refine rsync update list. get_list () { echo $$ &gt; $PID_FILE || { echo &quot;Can't write to pid file $PID_FILE&quot; exit $E_RETURN } echo -n &quot;Retrieving and refining update list . . .&quot; # Retrieve list -- 'eval' is needed to run rsync as a single command. # $3 and $4 is the date and time of file creation. # $5 is the full package name. previous= pre_file= pre_date=0 eval /bin/nice /usr/bin/rsync \ -r $include $exclude $URL | \ egrep '^dr.x|^-r' | \ awk '{print $3, $4, $5}' | \ sort -k3 | \ { while read line; do # Get seconds since epoch, to filter out obsolete pkgs. cur_date=$(date -d &quot;$(echo $line | awk '{print $1, $2}')&quot; +%s) # echo $cur_date # Get file name. cur_file=$(echo $line | awk '{print $3}') # echo $cur_file # Get rpm pkg name from file name, if possible. if [[ $cur_file == *rpm ]]; then pkg_name=$(echo $cur_file | sed -r -e \ 's/(^([^_-]+[_-])+)[[:digit:]]+\..*[_-].*$/\1/') else pkg_name= fi # echo $pkg_name if [ -z &quot;$pkg_name&quot; ]; then # If not a rpm file, echo $cur_file &gt;&gt; $TMP #+ then append to download list. elif [ &quot;$pkg_name&quot; != &quot;$previous&quot; ]; then # A new pkg found. echo $pre_file &gt;&gt; $TMP # Output latest file. previous=$pkg_name # Save current. pre_date=$cur_date pre_file=$cur_file elif [ &quot;$cur_date&quot; -gt &quot;$pre_date&quot; ]; then # If same pkg, but newer, pre_date=$cur_date #+ then update latest pointer. pre_file=$cur_file fi done echo $pre_file &gt;&gt; $TMP # TMP contains ALL #+ of refined list now. # echo &quot;subshell=$BASH_SUBSHELL&quot; } # Bracket required here to let final &quot;echo $pre_file &gt;&gt; $TMP&quot; # Remained in the same subshell ( 1 ) with the entire loop. RET=$? # Get return code of the pipe command. [ &quot;$RET&quot; -ne 0 ] &amp;&amp; { echo &quot;List retrieving failed with code $RET&quot; exit $E_RETURN } echo &quot;done&quot;; echo } # Real rsync download part. get_file () { echo &quot;Downloading...&quot; /bin/nice /usr/bin/rsync \ $OPTS \ --filter &quot;merge,+/ $TMP&quot; \ --exclude '*' \ $URL $DEST \ | /usr/bin/tee $LOG RET=$? # --filter merge,+/ is crucial for the intention. # + modifier means include and / means absolute path. # Then sorted list in $TMP will contain ascending dir name and #+ prevent the following --exclude '*' from &quot;shortcutting the circuit.&quot; echo &quot;Done&quot; rm -f $PID_FILE 2&gt;/dev/null return $RET } # ------- # Main init check_pid set_range get_list get_file RET=$? # ------- if [ &quot;$RET&quot; -eq 0 ]; then /usr/bin/logger -t ${0##*/} &quot;Fedora update mirrored successfully.&quot; else /usr/bin/logger -t ${0##*/} \ &quot;Fedora update mirrored with failure code: $RET&quot; fi exit $RET See also Example A-32. Note Using rcp, rsync, and similar utilities with security implications in a shell script may not be advisable. Consider, instead, using ssh, scp, or an expect script. ssh Secure shell, logs onto a remote host and executes commands there. This secure replacement for telnet, rlogin, rcp, and rsh uses identity authentication and encryption. See its manpage for details. Example 16-44. Using ssh #!/bin/bash # remote.bash: Using ssh. # This example by Michael Zick. # Used with permission. # Presumptions: # ------------ # fd-2 isn't being captured ( '2&gt;/dev/null' ). # ssh/sshd presumes stderr ('2') will display to user. # # sshd is running on your machine. # For any 'standard' distribution, it probably is, #+ and without any funky ssh-keygen having been done. # Try ssh to your machine from the command-line: # # $ ssh $HOSTNAME # Without extra set-up you'll be asked for your password. # enter password # when done, $ exit # # Did that work? If so, you're ready for more fun. # Try ssh to your machine as 'root': # # $ ssh -l root $HOSTNAME # When asked for password, enter root's, not yours. # Last login: Tue Aug 10 20:25:49 2004 from localhost.localdomain # Enter 'exit' when done. # The above gives you an interactive shell. # It is possible for sshd to be set up in a 'single command' mode, #+ but that is beyond the scope of this example. # The only thing to note is that the following will work in #+ 'single command' mode. # A basic, write stdout (local) command. ls -l # Now the same basic command on a remote machine. # Pass a different 'USERNAME' 'HOSTNAME' if desired: USER=${USERNAME:-$(whoami)} HOST=${HOSTNAME:-$(hostname)} # Now excute the above command-line on the remote host, #+ with all transmissions encrypted. ssh -l ${USER} ${HOST} &quot; ls -l &quot; # The expected result is a listing of your username's home #+ directory on the remote machine. # To see any difference, run this script from somewhere #+ other than your home directory. # In other words, the Bash command is passed as a quoted line #+ to the remote shell, which executes it on the remote machine. # In this case, sshd does ' bash -c &quot;ls -l&quot; ' on your behalf. # For information on topics such as not having to enter a #+ password/passphrase for every command-line, see #+ man ssh #+ man ssh-keygen #+ man sshd_config. exit 0 Caution Within a loop, ssh may cause unexpected behavior. According to a Usenet post in the comp.unix shell archives, ssh inherits the loop's stdin. To remedy this, pass ssh either the -n or -f option. Thanks, Jason Bechtel, for pointing this out. scp Secure copy, similar in function to rcp, copies files between two different networked machines, but does so using authentication, and with a security level similar to ssh. Local Network write This is a utility for terminal-to-terminal communication. It allows sending lines from your terminal (console or xterm) to that of another user. The mesg command may, of course, be used to disable write access to a terminal Since write is interactive, it would not normally find use in a script. netconfig A command-line utility for configuring a network adapter (using DHCP). This command is native to Red Hat centric Linux distros. Mail mail Send or read e-mail messages. This stripped-down command-line mail client works fine as a command embedded in a script. Example 16-45. A script that mails itself #!/bin/sh # self-mailer.sh: Self-mailing script adr=${1:-`whoami`} # Default to current user, if not specified. # Typing 'self-mailer.sh wiseguy@superdupergenius.com' #+ sends this script to that addressee. # Just 'self-mailer.sh' (no argument) sends the script #+ to the person invoking it, for example, bozo@localhost.localdomain. # # For more on the ${parameter:-default} construct, #+ see the &quot;Parameter Substitution&quot; section #+ of the &quot;Variables Revisited&quot; chapter. # ============================================================================ cat $0 | mail -s &quot;Script \&quot;`basename $0`\&quot; has mailed itself to you.&quot; &quot;$adr&quot; # ============================================================================ # -------------------------------------------- # Greetings from the self-mailing script. # A mischievous person has run this script, #+ which has caused it to mail itself to you. # Apparently, some people have nothing better #+ to do with their time. # -------------------------------------------- echo &quot;At `date`, script \&quot;`basename $0`\&quot; mailed to &quot;$adr&quot;.&quot; exit 0 # Note that the &quot;mailx&quot; command (in &quot;send&quot; mode) may be substituted #+ for &quot;mail&quot; ... but with somewhat different options. mailto Similar to the mail command, mailto sends e-mail messages from the command-line or in a script. However, mailto also permits sending MIME (multimedia) messages. mailstats Show mail statistics. This command may be invoked only by root. root# mailstats Statistics from Tue Jan 1 20:32:08 2008 M msgsfr bytes_from msgsto bytes_to msgsrej msgsdis msgsqur Mailer 4 1682 24118K 0 0K 0 0 0 esmtp 9 212 640K 1894 25131K 0 0 0 local ===================================================================== T 1894 24758K 1894 25131K 0 0 0 C 414 0 vacation This utility automatically replies to e-mails that the intended recipient is on vacation and temporarily unavailable. It runs on a network, in conjunction with sendmail, and is not applicable to a dial-up POPmail account. 16.7. Terminal Control Commands Command affecting the console or terminal tput Initialize terminal and/or fetch information about it from terminfo data. Various options permit certain terminal operations: tput clear is the equivalent of clear; tput reset is the equivalent of reset. bash$ tput longname xterm terminal emulator (X Window System) Issuing a tput cup X Y moves the cursor to the (X,Y) coordinates in the current terminal. A clear to erase the terminal screen would normally precede this. Some interesting options to tput are: bold, for high-intensity text smul, to underline text in the terminal smso, to render text in reverse sgr0, to reset the terminal parameters (to normal), without clearing the screen Example scripts using tput: Example 36-15 Example 36-13 Example A-44 Example A-42 Example 27-2 Note that stty offers a more powerful command set for controlling a terminal. infocmp This command prints out extensive information about the current terminal. It references the terminfo database. bash$ infocmp # Reconstructed via infocmp from file: /usr/share/terminfo/r/rxvt rxvt|rxvt terminal emulator (X Window System), am, bce, eo, km, mir, msgr, xenl, xon, colors#8, cols#80, it#8, lines#24, pairs#64, acsc=``aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~, bel=^G, blink=\E[5m, bold=\E[1m, civis=\E[?25l, clear=\E[H\E[2J, cnorm=\E[?25h, cr=^M, ... reset Reset terminal parameters and clear text screen. As with clear, the cursor and prompt reappear in the upper lefthand corner of the terminal. clear The clear command simply clears the text screen at the console or in an xterm. The prompt and cursor reappear at the upper lefthand corner of the screen or xterm window. This command may be used either at the command line or in a script. See Example 11-26. resize Echoes commands necessary to set $TERM and $TERMCAP to duplicate the size (dimensions) of the current terminal. bash$ resize set noglob; setenv COLUMNS '80'; setenv LINES '24'; unset noglob; script This utility records (saves to a file) all the user keystrokes at the command-line in a console or an xterm window. This, in effect, creates a record of a session. 16.8. Math Commands &quot;Doing the numbers&quot; factor Decompose an integer into prime factors. bash$ factor 27417 27417: 3 13 19 37 Example 16-46. Generating prime numbers #!/bin/bash # primes2.sh # Generating prime numbers the quick-and-easy way, #+ without resorting to fancy algorithms. CEILING=10000 # 1 to 10000 PRIME=0 E_NOTPRIME= is_prime () { local factors factors=( $(factor $1) ) # Load output of `factor` into array. if [ -z &quot;${factors[2]}&quot; ] # Third element of &quot;factors&quot; array: #+ ${factors[2]} is 2nd factor of argument. # If it is blank, then there is no 2nd factor, #+ and the argument is therefore prime. then return $PRIME # 0 else return $E_NOTPRIME # null fi } echo for n in $(seq $CEILING) do if is_prime $n then printf %5d $n fi # ^ Five positions per number suffices. done # For a higher $CEILING, adjust upward, as necessary. echo exit bc Bash can't handle floating point calculations, and it lacks operators for certain important mathematical functions. Fortunately, bc gallops to the rescue. Not just a versatile, arbitrary precision calculation utility, bc offers many of the facilities of a programming language. It has a syntax vaguely resembling C. Since it is a fairly well-behaved UNIX utility, and may therefore be used in a pipe, bc comes in handy in scripts. Here is a simple template for using bc to calculate a script variable. This uses command substitution. variable=$(echo &quot;OPTIONS; OPERATIONS&quot; | bc) Example 16-47. Monthly Payment on a Mortgage #!/bin/bash # monthlypmt.sh: Calculates monthly payment on a mortgage. # This is a modification of code in the #+ &quot;mcalc&quot; (mortgage calculator) package, #+ by Jeff Schmidt #+ and #+ Mendel Cooper (yours truly, the ABS Guide author). # http://www.ibiblio.org/pub/Linux/apps/financial/mcalc-1.6.tar.gz echo echo &quot;Given the principal, interest rate, and term of a mortgage,&quot; echo &quot;calculate the monthly payment.&quot; bottom=1.0 echo echo -n &quot;Enter principal (no commas) &quot; read principal echo -n &quot;Enter interest rate (percent) &quot; # If 12%, enter &quot;12&quot;, not &quot;.12&quot;. read interest_r echo -n &quot;Enter term (months) &quot; read term interest_r=$(echo &quot;scale=9; $interest_r/100.0&quot; | bc) # Convert to decimal. # ^^^^^^^^^^^^^^^^^ Divide by 100. # &quot;scale&quot; determines how many decimal places. interest_rate=$(echo &quot;scale=9; $interest_r/12 + 1.0&quot; | bc) top=$(echo &quot;scale=9; $principal*$interest_rate^$term&quot; | bc) # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # Standard formula for figuring interest. echo; echo &quot;Please be patient. This may take a while.&quot; let &quot;months = $term - 1&quot; # ==================================================================== for ((x=$months; x &gt; 0; x--)) do bot=$(echo &quot;scale=9; $interest_rate^$x&quot; | bc) bottom=$(echo &quot;scale=9; $bottom+$bot&quot; | bc) # bottom = $(($bottom + $bot&quot;)) done # ==================================================================== # -------------------------------------------------------------------- # Rick Boivie pointed out a more efficient implementation #+ of the above loop, which decreases computation time by 2/3. # for ((x=1; x &lt;= $months; x++)) # do # bottom=$(echo &quot;scale=9; $bottom * $interest_rate + 1&quot; | bc) # done # And then he came up with an even more efficient alternative, #+ one that cuts down the run time by about 95%! # bottom=`{ # echo &quot;scale=9; bottom=$bottom; interest_rate=$interest_rate&quot; # for ((x=1; x &lt;= $months; x++)) # do # echo 'bottom = bottom * interest_rate + 1' # done # echo 'bottom' # } | bc` # Embeds a 'for loop' within command substitution. # -------------------------------------------------------------------------- # On the other hand, Frank Wang suggests: # bottom=$(echo &quot;scale=9; ($interest_rate^$term-1)/($interest_rate-1)&quot; | bc) # Because . . . # The algorithm behind the loop #+ is actually a sum of geometric proportion series. # The sum formula is e0(1-q^n)/(1-q), #+ where e0 is the first element and q=e(n+1)/e(n) #+ and n is the number of elements. # -------------------------------------------------------------------------- # let &quot;payment = $top/$bottom&quot; payment=$(echo &quot;scale=2; $top/$bottom&quot; | bc) # Use two decimal places for dollars and cents. echo echo &quot;monthly payment = \$$payment&quot; # Echo a dollar sign in front of amount. echo exit 0 # Exercises: # 1) Filter input to permit commas in principal amount. # 2) Filter input to permit interest to be entered as percent or decimal. # 3) If you are really ambitious, #+ expand this script to print complete amortization tables. Example 16-48. Base Conversion #!/bin/bash ########################################################################### # Shellscript: base.sh - print number to different bases (Bourne Shell) # Author : Heiner Steven (heiner.steven@odn.de) # Date : 07-03-95 # Category : Desktop # $Id: base.sh,v 1.2 2000/02/06 19:55:35 heiner Exp $ # ==&gt; Above line is RCS ID info. ########################################################################### # Description # # Changes # 21-03-95 stv fixed error occuring with 0xb as input (0.2) ########################################################################### # ==&gt; Used in ABS Guide with the script author's permission. # ==&gt; Comments added by ABS Guide author. NOARGS=85 PN=`basename &quot;$0&quot;` # Program name VER=`echo '$Revision: 1.2 $' | cut -d' ' -f2` # ==&gt; VER=1.2 Usage () { echo &quot;$PN - print number to different bases, $VER (stv '95) usage: $PN [number ...] If no number is given, the numbers are read from standard input. A number may be binary (base 2) starting with 0b (i.e. 0b1100) octal (base 8) starting with 0 (i.e. 014) hexadecimal (base 16) starting with 0x (i.e. 0xc) decimal otherwise (i.e. 12)&quot; &gt;&amp;2 exit $NOARGS } # ==&gt; Prints usage message. Msg () { for i # ==&gt; in [list] missing. Why? do echo &quot;$PN: $i&quot; &gt;&amp;2 done } Fatal () { Msg &quot;$@&quot;; exit 66; } PrintBases () { # Determine base of the number for i # ==&gt; in [list] missing... do # ==&gt; so operates on command-line arg(s). case &quot;$i&quot; in 0b*) ibase=2;; # binary 0x*|[a-f]*|[A-F]*) ibase=16;; # hexadecimal 0*) ibase=8;; # octal [1-9]*) ibase=10;; # decimal *) Msg &quot;illegal number $i - ignored&quot; continue;; esac # Remove prefix, convert hex digits to uppercase (bc needs this). number=`echo &quot;$i&quot; | sed -e 's:^0[bBxX]::' | tr '[a-f]' '[A-F]'` # ==&gt; Uses &quot;:&quot; as sed separator, rather than &quot;/&quot;. # Convert number to decimal dec=`echo &quot;ibase=$ibase; $number&quot; | bc` # ==&gt; 'bc' is calculator utility. case &quot;$dec&quot; in [0-9]*) ;; # number ok *) continue;; # error: ignore esac # Print all conversions in one line. # ==&gt; 'here document' feeds command list to 'bc'. echo `bc &lt;&lt;! obase=16; &quot;hex=&quot;; $dec obase=10; &quot;dec=&quot;; $dec obase=8; &quot;oct=&quot;; $dec obase=2; &quot;bin=&quot;; $dec ! ` | sed -e 's: : :g' done } while [ $# -gt 0 ] # ==&gt; Is a &quot;while loop&quot; really necessary here, # ==&gt;+ since all the cases either break out of the loop # ==&gt;+ or terminate the script. # ==&gt; (Above comment by Paulo Marcel Coelho Aragao.) do case &quot;$1&quot; in --) shift; break;; -h) Usage;; # ==&gt; Help message. -*) Usage;; *) break;; # First number esac # ==&gt; Error checking for illegal input might be appropriate. shift done if [ $# -gt 0 ] then PrintBases &quot;$@&quot; else # Read from stdin. while read line do PrintBases $line done fi exit An alternate method of invoking bc involves using a here document embedded within a command substitution block. This is especially appropriate when a script needs to pass a list of options and commands to bc. variable=`bc &lt;&lt; LIMIT_STRING options statements operations LIMIT_STRING ` ...or... variable=$(bc &lt;&lt; LIMIT_STRING options statements operations LIMIT_STRING ) Example 16-49. Invoking bc using a here document #!/bin/bash # Invoking 'bc' using command substitution # in combination with a 'here document'. var1=`bc &lt;&lt; EOF 18.33 * 19.78 EOF ` echo $var1 # 362.56 # $( ... ) notation also works. v1=23.53 v2=17.881 v3=83.501 v4=171.63 var2=$(bc &lt;&lt; EOF scale = 4 a = ( $v1 + $v2 ) b = ( $v3 * $v4 ) a * b + 15.35 EOF ) echo $var2 # 593487.8452 var3=$(bc -l &lt;&lt; EOF scale = 9 s ( 1.7 ) EOF ) # Returns the sine of 1.7 radians. # The &quot;-l&quot; option calls the 'bc' math library. echo $var3 # .991664810 # Now, try it in a function... hypotenuse () # Calculate hypotenuse of a right triangle. { # c = sqrt( a^2 + b^2 ) hyp=$(bc -l &lt;&lt; EOF scale = 9 sqrt ( $1 * $1 + $2 * $2 ) EOF ) # Can't directly return floating point values from a Bash function. # But, can echo-and-capture: echo &quot;$hyp&quot; } hyp=$(hypotenuse 3.68 7.31) echo &quot;hypotenuse = $hyp&quot; # 8.184039344 exit 0 Example 16-50. Calculating PI #!/bin/bash # cannon.sh: Approximating PI by firing cannonballs. # Author: Mendel Cooper # License: Public Domain # Version 2.2, reldate 13oct08. # This is a very simple instance of a &quot;Monte Carlo&quot; simulation: #+ a mathematical model of a real-life event, #+ using pseudorandom numbers to emulate random chance. # Consider a perfectly square plot of land, 10000 units on a side. # This land has a perfectly circular lake in its center, #+ with a diameter of 10000 units. # The plot is actually mostly water, except for land in the four corners. # (Think of it as a square with an inscribed circle.) # # We will fire iron cannonballs from an old-style cannon #+ at the square. # All the shots impact somewhere on the square, #+ either in the lake or on the dry corners. # Since the lake takes up most of the area, #+ most of the shots will SPLASH! into the water. # Just a few shots will THUD! into solid ground #+ in the four corners of the square. # # If we take enough random, unaimed shots at the square, #+ Then the ratio of SPLASHES to total shots will approximate #+ the value of PI/4. # # The simplified explanation is that the cannon is actually #+ shooting only at the upper right-hand quadrant of the square, #+ i.e., Quadrant I of the Cartesian coordinate plane. # # # Theoretically, the more shots taken, the better the fit. # However, a shell script, as opposed to a compiled language #+ with floating-point math built in, requires some compromises. # This decreases the accuracy of the simulation. DIMENSION=10000 # Length of each side of the plot. # Also sets ceiling for random integers generated. MAXSHOTS=1000 # Fire this many shots. # 10000 or more would be better, but would take too long. PMULTIPLIER=4.0 # Scaling factor. declare -r M_PI=3.141592654 # Actual 9-place value of PI, for comparison purposes. get_random () { SEED=$(head -n 1 /dev/urandom | od -N 1 | awk '{ print $2 }') RANDOM=$SEED # From &quot;seeding-random.sh&quot; #+ example script. let &quot;rnum = $RANDOM % $DIMENSION&quot; # Range less than 10000. echo $rnum } distance= # Declare global variable. hypotenuse () # Calculate hypotenuse of a right triangle. { # From &quot;alt-bc.sh&quot; example. distance=$(bc -l &lt;&lt; EOF scale = 0 sqrt ( $1 * $1 + $2 * $2 ) EOF ) # Setting &quot;scale&quot; to zero rounds down result to integer value, #+ a necessary compromise in this script. # It decreases the accuracy of this simulation. } # ========================================================== # main() { # &quot;Main&quot; code block, mimicking a C-language main() function. # Initialize variables. shots=0 splashes=0 thuds=0 Pi=0 error=0 while [ &quot;$shots&quot; -lt &quot;$MAXSHOTS&quot; ] # Main loop. do xCoord=$(get_random) # Get random X and Y coords. yCoord=$(get_random) hypotenuse $xCoord $yCoord # Hypotenuse of #+ right-triangle = distance. ((shots++)) printf &quot;#%4d &quot; $shots printf &quot;Xc = %4d &quot; $xCoord printf &quot;Yc = %4d &quot; $yCoord printf &quot;Distance = %5d &quot; $distance # Distance from #+ center of lake #+ -- the &quot;origin&quot; -- #+ coordinate (0,0). if [ &quot;$distance&quot; -le &quot;$DIMENSION&quot; ] then echo -n &quot;SPLASH! &quot; ((splashes++)) else echo -n &quot;THUD! &quot; ((thuds++)) fi Pi=$(echo &quot;scale=9; $PMULTIPLIER*$splashes/$shots&quot; | bc) # Multiply ratio by 4.0. echo -n &quot;PI ~ $Pi&quot; echo done echo echo &quot;After $shots shots, PI looks like approximately $Pi&quot; # Tends to run a bit high, #+ possibly due to round-off error and imperfect randomness of $RANDOM. # But still usually within plus-or-minus 5% . . . #+ a pretty fair rough approximation. error=$(echo &quot;scale=9; $Pi - $M_PI&quot; | bc) pct_error=$(echo &quot;scale=2; 100.0 * $error / $M_PI&quot; | bc) echo -n &quot;Deviation from mathematical value of PI = $error&quot; echo &quot; ($pct_error% error)&quot; echo # End of &quot;main&quot; code block. # } # ========================================================== exit 0 # One might well wonder whether a shell script is appropriate for #+ an application as complex and computation-intensive as a simulation. # # There are at least two justifications. # 1) As a proof of concept: to show it can be done. # 2) To prototype and test the algorithms before rewriting #+ it in a compiled high-level language. See also Example A-37. dc The dc (desk calculator) utility is stack-oriented and uses RPN (Reverse Polish Notation). Like bc, it has much of the power of a programming language. Similar to the procedure with bc, echo a command-string to dc. echo &quot;[Printing a string ... ]P&quot; | dc # The P command prints the string between the preceding brackets. # And now for some simple arithmetic. echo &quot;7 8 * p&quot; | dc # 56 # Pushes 7, then 8 onto the stack, #+ multiplies (&quot;*&quot; operator), then prints the result (&quot;p&quot; operator). Most persons avoid dc, because of its non-intuitive input and rather cryptic operators. Yet, it has its uses. Example 16-51. Converting a decimal number to hexadecimal #!/bin/bash # hexconvert.sh: Convert a decimal number to hexadecimal. E_NOARGS=85 # Command-line arg missing. BASE=16 # Hexadecimal. if [ -z &quot;$1&quot; ] then # Need a command-line argument. echo &quot;Usage: $0 number&quot; exit $E_NOARGS fi # Exercise: add argument validity checking. hexcvt () { if [ -z &quot;$1&quot; ] then echo 0 return # &quot;Return&quot; 0 if no arg passed to function. fi echo &quot;&quot;$1&quot; &quot;$BASE&quot; o p&quot; | dc # o sets radix (numerical base) of output. # p prints the top of stack. # For other options: 'man dc' ... return } hexcvt &quot;$1&quot; exit Studying the info page for dc is a painful path to understanding its intricacies. There seems to be a small, select group of dc wizards who delight in showing off their mastery of this powerful, but arcane utility. bash$ echo &quot;16i[q]sa[ln0=aln100%Pln100/snlbx]sbA0D68736142snlbxq&quot; | dc Bash dc &lt;&lt;&lt; 10k5v1+2/p # 1.6180339887 # ^^^ Feed operations to dc using a Here String. # ^^^ Pushes 10 and sets that as the precision (10k). # ^^ Pushes 5 and takes its square root # (5v, v = square root). # ^^ Pushes 1 and adds it to the running total (1+). # ^^ Pushes 2 and divides the running total by that (2/). # ^ Pops and prints the result (p) # The result is 1.6180339887 ... # ... which happens to be the Pythagorean Golden Ratio, to 10 places. Example 16-52. Factoring #!/bin/bash # factr.sh: Factor a number MIN=2 # Will not work for number smaller than this. E_NOARGS=85 E_TOOSMALL=86 if [ -z $1 ] then echo &quot;Usage: $0 number&quot; exit $E_NOARGS fi if [ &quot;$1&quot; -lt &quot;$MIN&quot; ] then echo &quot;Number to factor must be $MIN or greater.&quot; exit $E_TOOSMALL fi # Exercise: Add type checking (to reject non-integer arg). echo &quot;Factors of $1:&quot; # ------------------------------------------------------- echo &quot;$1[p]s2[lip/dli%0=1dvsr]s12sid2%0=13sidvsr[dli%0=\ 1lrli2+dsi!&gt;.]ds.xd1&lt;2&quot; | dc # ------------------------------------------------------- # Above code written by Michel Charpentier &lt;charpov@cs.unh.edu&gt; # (as a one-liner, here broken into two lines for display purposes). # Used in ABS Guide with permission (thanks!). exit # $ sh factr.sh 270138 # 2 # 3 # 11 # 4093 awk Yet another way of doing floating point math in a script is using awk's built-in math functions in a shell wrapper. Example 16-53. Calculating the hypotenuse of a triangle #!/bin/bash # hypotenuse.sh: Returns the &quot;hypotenuse&quot; of a right triangle. # (square root of sum of squares of the &quot;legs&quot;) ARGS=2 # Script needs sides of triangle passed. E_BADARGS=85 # Wrong number of arguments. if [ $# -ne &quot;$ARGS&quot; ] # Test number of arguments to script. then echo &quot;Usage: `basename $0` side_1 side_2&quot; exit $E_BADARGS fi AWKSCRIPT=' { printf( &quot;%3.7f\n&quot;, sqrt($1*$1 + $2*$2) ) } ' # command(s) / parameters passed to awk # Now, pipe the parameters to awk. echo -n &quot;Hypotenuse of $1 and $2 = &quot; echo $1 $2 | awk &quot;$AWKSCRIPT&quot; # ^^^^^^^^^^^^ # An echo-and-pipe is an easy way of passing shell parameters to awk. exit # Exercise: Rewrite this script using 'bc' rather than awk. # Which method is more intuitive? 16.9. Miscellaneous Commands Command that fit in no special category jot, seq These utilities emit a sequence of integers, with a user-selectable increment. The default separator character between each integer is a newline, but this can be changed with the -s option. bash$ seq 5 1 2 3 4 5 bash$ seq -s : 5 1:2:3:4:5 Both jot and seq come in handy in a for loop. Example 16-54. Using seq to generate loop arguments #!/bin/bash # Using &quot;seq&quot; echo for a in `seq 80` # or for a in $( seq 80 ) # Same as for a in 1 2 3 4 5 ... 80 (saves much typing!). # May also use 'jot' (if present on system). do echo -n &quot;$a &quot; done # 1 2 3 4 5 ... 80 # Example of using the output of a command to generate # the [list] in a &quot;for&quot; loop. echo; echo COUNT=80 # Yes, 'seq' also accepts a replaceable parameter. for a in `seq $COUNT` # or for a in $( seq $COUNT ) do echo -n &quot;$a &quot; done # 1 2 3 4 5 ... 80 echo; echo BEGIN=75 END=80 for a in `seq $BEGIN $END` # Giving &quot;seq&quot; two arguments starts the count at the first one, #+ and continues until it reaches the second. do echo -n &quot;$a &quot; done # 75 76 77 78 79 80 echo; echo BEGIN=45 INTERVAL=5 END=80 for a in `seq $BEGIN $INTERVAL $END` # Giving &quot;seq&quot; three arguments starts the count at the first one, #+ uses the second for a step interval, #+ and continues until it reaches the third. do echo -n &quot;$a &quot; done # 45 50 55 60 65 70 75 80 echo; echo exit 0 A simpler example: # Create a set of 10 files, #+ named file.1, file.2 . . . file.10. COUNT=10 PREFIX=file for filename in `seq $COUNT` do touch $PREFIX.$filename # Or, can do other operations, #+ such as rm, grep, etc. done Example 16-55. Letter Count&quot; #!/bin/bash # letter-count.sh: Counting letter occurrences in a text file. # Written by Stefano Palmeri. # Used in ABS Guide with permission. # Slightly modified by document author. MINARGS=2 # Script requires at least two arguments. E_BADARGS=65 FILE=$1 let LETTERS=$#-1 # How many letters specified (as command-line args). # (Subtract 1 from number of command-line args.) show_help(){ echo echo Usage: `basename $0` file letters echo Note: `basename $0` arguments are case sensitive. echo Example: `basename $0` foobar.txt G n U L i N U x. echo } # Checks number of arguments. if [ $# -lt $MINARGS ]; then echo echo &quot;Not enough arguments.&quot; echo show_help exit $E_BADARGS fi # Checks if file exists. if [ ! -f $FILE ]; then echo &quot;File \&quot;$FILE\&quot; does not exist.&quot; exit $E_BADARGS fi # Counts letter occurrences . for n in `seq $LETTERS`; do shift if [[ `echo -n &quot;$1&quot; | wc -c` -eq 1 ]]; then # Checks arg. echo &quot;$1&quot; -\&gt; `cat $FILE | tr -cd &quot;$1&quot; | wc -c` # Counting. else echo &quot;$1 is not a single char.&quot; fi done exit $? # This script has exactly the same functionality as letter-count2.sh, #+ but executes faster. # Why? Note Somewhat more capable than seq, jot is a classic UNIX utility that is not normally included in a standard Linux distro. However, the source rpm is available for download from the MIT repository. Unlike seq, jot can generate a sequence of random numbers, using the -r option. bash$ jot -r 3 999 1069 1272 1428 getopt The getopt command parses command-line options preceded by a dash. This external command corresponds to the getopts Bash builtin. Using getopt permits handling long options by means of the -l flag, and this also allows parameter reshuffling. Example 16-56. Using getopt to parse command-line options #!/bin/bash # Using getopt # Try the following when invoking this script: # sh ex33a.sh -a # sh ex33a.sh -abc # sh ex33a.sh -a -b -c # sh ex33a.sh -d # sh ex33a.sh -dXYZ # sh ex33a.sh -d XYZ # sh ex33a.sh -abcd # sh ex33a.sh -abcdZ # sh ex33a.sh -z # sh ex33a.sh a # Explain the results of each of the above. E_OPTERR=65 if [ &quot;$#&quot; -eq 0 ] then # Script needs at least one command-line argument. echo &quot;Usage $0 -[options a,b,c]&quot; exit $E_OPTERR fi set -- `getopt &quot;abcd:&quot; &quot;$@&quot;` # Sets positional parameters to command-line arguments. # What happens if you use &quot;$*&quot; instead of &quot;$@&quot;? while [ ! -z &quot;$1&quot; ] do case &quot;$1&quot; in -a) echo &quot;Option \&quot;a\&quot;&quot;;; -b) echo &quot;Option \&quot;b\&quot;&quot;;; -c) echo &quot;Option \&quot;c\&quot;&quot;;; -d) echo &quot;Option \&quot;d\&quot; $2&quot;;; *) break;; esac shift done # It is usually better to use the 'getopts' builtin in a script. # See &quot;ex33.sh.&quot; exit 0 Note As Peggy Russell points out: It is often necessary to include an eval to correctly process whitespace and quotes. args=$(getopt -o a:bc:d -- &quot;$@&quot;) eval set -- &quot;$args&quot; See Example 10-5 for a simplified emulation of getopt. run-parts The run-parts command [82] executes all the scripts in a target directory, sequentially in ASCII-sorted filename order. Of course, the scripts need to have execute permission. The cron daemon invokes run-parts to run the scripts in the /etc/cron.* directories. yes In its default behavior the yes command feeds a continuous string of the character y followed by a line feed to stdout. A control-C terminates the run. A different output string may be specified, as in yes different string, which would continually output different string to stdout. One might well ask the purpose of this. From the command-line or in a script, the output of yes can be redirected or piped into a program expecting user input. In effect, this becomes a sort of poor man's version of expect. yes | fsck /dev/hda1 runs fsck non-interactively (careful!). yes | rm -r dirname has same effect as rm -rf dirname (careful!). Warning Caution advised when piping yes to a potentially dangerous system command, such as fsck or fdisk. It might have unintended consequences. Note The yes command parses variables, or more accurately, it echoes parsed variables. For example: bash$ yes $BASH_VERSION 3.1.17(1)-release 3.1.17(1)-release 3.1.17(1)-release 3.1.17(1)-release 3.1.17(1)-release . . . This particular &quot;feature&quot; may be used to create a very large ASCII file on the fly: bash$ yes $PATH &gt; huge_file.txt Ctl-C Hit Ctl-C very quickly, or you just might get more than you bargained for. . . . The yes command may be emulated in a very simple script function. yes () { # Trivial emulation of &quot;yes&quot; ... local DEFAULT_TEXT=&quot;y&quot; while [ true ] # Endless loop. do if [ -z &quot;$1&quot; ] then echo &quot;$DEFAULT_TEXT&quot; else # If argument ... echo &quot;$1&quot; # ... expand and echo it. fi done # The only things missing are the } #+ --help and --version options. banner Prints arguments as a large vertical banner to stdout, using an ASCII character (default '#'). This may be redirected to a printer for hardcopy. Note that banner has been dropped from many Linux distros, presumably because it is no longer considered useful. printenv Show all the environmental variables set for a particular user. bash$ printenv | grep HOME HOME=/home/bozo lp The lp and lpr commands send file(s) to the print queue, to be printed as hard copy. [83] These commands trace the origin of their names to the line printers of another era. [84] bash$ lp file1.txt or bash lp &lt;file1.txt It is often useful to pipe the formatted output from pr to lp. bash$ pr -options file1.txt | lp Formatting packages, such as groff and Ghostscript may send their output directly to lp. bash$ groff -Tascii file.tr | lp bash$ gs -options | lp file.ps Related commands are lpq, for viewing the print queue, and lprm, for removing jobs from the print queue. tee [UNIX borrows an idea from the plumbing trade.] This is a redirection operator, but with a difference. Like the plumber's tee, it permits &quot;siphoning off&quot; to a file the output of a command or commands within a pipe, but without affecting the result. This is useful for printing an ongoing process to a file or paper, perhaps to keep track of it for debugging purposes. (redirection) |----&gt; to file | ==========================|==================== command ---&gt; command ---&gt; |tee ---&gt; command ---&gt; ---&gt; output of pipe =============================================== cat listfile* | sort | tee check.file | uniq &gt; result.file # ^^^^^^^^^^^^^^ ^^^^ # The file &quot;check.file&quot; contains the concatenated sorted &quot;listfiles,&quot; #+ before the duplicate lines are removed by 'uniq.' mkfifo This obscure command creates a named pipe, a temporary first-in-first-out buffer for transferring data between processes. [85] Typically, one process writes to the FIFO, and the other reads from it. See Example A-14. #!/bin/bash # This short script by Omair Eshkenazi. # Used in ABS Guide with permission (thanks!). mkfifo pipe1 # Yes, pipes can be given names. mkfifo pipe2 # Hence the designation &quot;named pipe.&quot; (cut -d' ' -f1 | tr &quot;a-z&quot; &quot;A-Z&quot;) &gt;pipe2 &lt;pipe1 &amp; ls -l | tr -s ' ' | cut -d' ' -f3,9- | tee pipe1 | cut -d' ' -f2 | paste - pipe2 rm -f pipe1 rm -f pipe2 # No need to kill background processes when script terminates (why not?). exit $? Now, invoke the script and explain the output: sh mkfifo-example.sh 4830.tar.gz BOZO pipe1 BOZO pipe2 BOZO mkfifo-example.sh BOZO Mixed.msg BOZO pathchk This command checks the validity of a filename. If the filename exceeds the maximum allowable length (255 characters) or one or more of the directories in its path is not searchable, then an error message results. Unfortunately, pathchk does not return a recognizable error code, and it is therefore pretty much useless in a script. Consider instead the file test operators. dd Though this somewhat obscure and much feared data duplicator command originated as a utility for exchanging data on magnetic tapes between UNIX minicomputers and IBM mainframes, it still has its uses. The dd command simply copies a file (or stdin/stdout), but with conversions. Possible conversions include ASCII/EBCDIC, [86] upper/lower case, swapping of byte pairs between input and output, and skipping and/or truncating the head or tail of the input file. # Converting a file to all uppercase: dd if=$filename conv=ucase &gt; $filename.uppercase # lcase # For lower case conversion Some basic options to dd are: if=INFILE INFILE is the source file. of=OUTFILE OUTFILE is the target file, the file that will have the data written to it. bs=BLOCKSIZE This is the size of each block of data being read and written, usually a power of 2. skip=BLOCKS How many blocks of data to skip in INFILE before starting to copy. This is useful when the INFILE has &quot;garbage&quot; or garbled data in its header or when it is desirable to copy only a portion of the INFILE. seek=BLOCKS How many blocks of data to skip in OUTFILE before starting to copy, leaving blank data at beginning of OUTFILE. count=BLOCKS Copy only this many blocks of data, rather than the entire INFILE. conv=CONVERSION Type of conversion to be applied to INFILE data before copying operation. A dd --help lists all the options this powerful utility takes. Example 16-57. A script that copies itself #!/bin/bash # self-copy.sh # This script copies itself. file_subscript=copy dd if=$0 of=$0.$file_subscript 2&gt;/dev/null # Suppress messages from dd: ^^^^^^^^^^^ exit $? # A program whose only output is its own source code #+ is called a &quot;quine&quot; per Willard Quine. # Does this script qualify as a quine? Example 16-58. Exercising dd #!/bin/bash # exercising-dd.sh # Script by Stephane Chazelas. # Somewhat modified by ABS Guide author. infile=$0 # This script. outfile=log.txt # Output file left behind. n=8 p=11 dd if=$infile of=$outfile bs=1 skip=$((n-1)) count=$((p-n+1)) 2&gt; /dev/null # Extracts characters n to p (8 to 11) from this script (&quot;bash&quot;). # ---------------------------------------------------------------- echo -n &quot;hello vertical world&quot; | dd cbs=1 conv=unblock 2&gt; /dev/null # Echoes &quot;hello vertical world&quot; vertically downward. # Why? A newline follows each character dd emits. exit $? To demonstrate just how versatile dd is, let's use it to capture keystrokes. Example 16-59. Capturing Keystrokes #!/bin/bash # dd-keypress.sh: Capture keystrokes without needing to press ENTER. keypresses=4 # Number of keypresses to capture. old_tty_setting=$(stty -g) # Save old terminal settings. echo &quot;Press $keypresses keys.&quot; stty -icanon -echo # Disable canonical mode. # Disable local echo. keys=$(dd bs=1 count=$keypresses 2&gt; /dev/null) # 'dd' uses stdin, if &quot;if&quot; (input file) not specified. stty &quot;$old_tty_setting&quot; # Restore old terminal settings. echo &quot;You pressed the \&quot;$keys\&quot; keys.&quot; # Thanks, Stephane Chazelas, for showing the way. exit 0 The dd command can do random access on a data stream. echo -n . | dd bs=1 seek=4 of=file conv=notrunc # The &quot;conv=notrunc&quot; option means that the output file #+ will not be truncated. # Thanks, S.C. The dd command can copy raw data and disk images to and from devices, such as floppies and tape drives (Example A-5). A common use is creating boot floppies. dd if=kernel-image of=/dev/fd0H1440 Similarly, dd can copy the entire contents of a floppy, even one formatted with a &quot;foreign&quot; OS, to the hard drive as an image file. dd if=/dev/fd0 of=/home/bozo/projects/floppy.img Likewise, dd can create bootable flash drives and SD cards. dd if=image.iso of=/dev/sdb Example 16-60. Preparing a bootable SD card for the Raspberry Pi #!/bin/bash # rp.sdcard.sh # Preparing an SD card with a bootable image for the Raspberry Pi. # $1 = imagefile name # $2 = sdcard (device file) # Otherwise defaults to the defaults, see below. DEFAULTbs=4M # Block size, 4 mb default. DEFAULTif=&quot;2013-07-26-wheezy-raspbian.img&quot; # Commonly used distro. DEFAULTsdcard=&quot;/dev/mmcblk0&quot; # May be different. Check! ROOTUSER_NAME=root # Must run as root! E_NOTROOT=81 E_NOIMAGE=82 username=$(id -nu) # Who is running this script? if [ &quot;$username&quot; != &quot;$ROOTUSER_NAME&quot; ] then echo &quot;This script must run as root or with root privileges.&quot; exit $E_NOTROOT fi if [ -n &quot;$1&quot; ] then imagefile=&quot;$1&quot; else imagefile=&quot;$DEFAULTif&quot; fi if [ -n &quot;$2&quot; ] then sdcard=&quot;$2&quot; else sdcard=&quot;$DEFAULTsdcard&quot; fi if [ ! -e $imagefile ] then echo &quot;Image file \&quot;$imagefile\&quot; not found!&quot; exit $E_NOIMAGE fi echo &quot;Last chance to change your mind!&quot;; echo read -s -n1 -p &quot;Hit a key to write $imagefile to $sdcard [Ctl-c to exit].&quot; echo; echo echo &quot;Writing $imagefile to $sdcard ...&quot; dd bs=$DEFAULTbs if=$imagefile of=$sdcard exit $? # Exercises: # --------- # 1) Provide additional error checking. # 2) Have script autodetect device file for SD card (difficult!). # 3) Have script sutodetect image file (*img) in $PWD. Other applications of dd include initializing temporary swap files (Example 31-2) and ramdisks (Example 31-3). It can even do a low-level copy of an entire hard drive partition, although this is not necessarily recommended. People (with presumably nothing better to do with their time) are constantly thinking of interesting applications of dd. Example 16-61. Securely deleting a file #!/bin/bash # blot-out.sh: Erase &quot;all&quot; traces of a file. # This script overwrites a target file alternately #+ with random bytes, then zeros before finally deleting it. # After that, even examining the raw disk sectors by conventional methods #+ will not reveal the original file data. PASSES=7 # Number of file-shredding passes. # Increasing this slows script execution, #+ especially on large target files. BLOCKSIZE=1 # I/O with /dev/urandom requires unit block size, #+ otherwise you get weird results. E_BADARGS=70 # Various error exit codes. E_NOT_FOUND=71 E_CHANGED_MIND=72 if [ -z &quot;$1&quot; ] # No filename specified. then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi file=$1 if [ ! -e &quot;$file&quot; ] then echo &quot;File \&quot;$file\&quot; not found.&quot; exit $E_NOT_FOUND fi echo; echo -n &quot;Are you absolutely sure you want to blot out \&quot;$file\&quot; (y/n)? &quot; read answer case &quot;$answer&quot; in [nN]) echo &quot;Changed your mind, huh?&quot; exit $E_CHANGED_MIND ;; *) echo &quot;Blotting out file \&quot;$file\&quot;.&quot;;; esac flength=$(ls -l &quot;$file&quot; | awk '{print $5}') # Field 5 is file length. pass_count=1 chmod u+w &quot;$file&quot; # Allow overwriting/deleting the file. echo while [ &quot;$pass_count&quot; -le &quot;$PASSES&quot; ] do echo &quot;Pass #$pass_count&quot; sync # Flush buffers. dd if=/dev/urandom of=$file bs=$BLOCKSIZE count=$flength # Fill with random bytes. sync # Flush buffers again. dd if=/dev/zero of=$file bs=$BLOCKSIZE count=$flength # Fill with zeros. sync # Flush buffers yet again. let &quot;pass_count += 1&quot; echo done rm -f $file # Finally, delete scrambled and shredded file. sync # Flush buffers a final time. echo &quot;File \&quot;$file\&quot; blotted out and deleted.&quot;; echo exit 0 # This is a fairly secure, if inefficient and slow method #+ of thoroughly &quot;shredding&quot; a file. # The &quot;shred&quot; command, part of the GNU &quot;fileutils&quot; package, #+ does the same thing, although more efficiently. # The file cannot not be &quot;undeleted&quot; or retrieved by normal methods. # However . . . #+ this simple method would *not* likely withstand #+ sophisticated forensic analysis. # This script may not play well with a journaled file system. # Exercise (difficult): Fix it so it does. # Tom Vier's &quot;wipe&quot; file-deletion package does a much more thorough job #+ of file shredding than this simple script. # http://www.ibiblio.org/pub/Linux/utils/file/wipe-2.0.0.tar.bz2 # For an in-depth analysis on the topic of file deletion and security, #+ see Peter Gutmann's paper, #+ &quot;Secure Deletion of Data From Magnetic and Solid-State Memory&quot;. # http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html See also the dd thread entry in the bibliography. od The od, or octal dump filter converts input (or files) to octal (base-8) or other bases. This is useful for viewing or processing binary data files or otherwise unreadable system device files, such as /dev/urandom, and as a filter for binary data. head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p' # Sample output: 1324725719, 3918166450, 2989231420, etc. # From rnd.sh example script, by Stéphane Chazelas See also Example 9-16 and Example A-36. hexdump Performs a hexadecimal, octal, decimal, or ASCII dump of a binary file. This command is the rough equivalent of od, above, but not nearly as useful. May be used to view the contents of a binary file, in combination with dd and less. dd if=/bin/ls | hexdump -C | less # The -C option nicely formats the output in tabular form. objdump Displays information about an object file or binary executable in either hexadecimal form or as a disassembled listing (with the -d option). bash$ objdump -d /bin/ls /bin/ls: file format elf32-i386 Disassembly of section .init: 080490bc &lt;.init&gt;: 80490bc: 55 push %ebp 80490bd: 89 e5 mov %esp,%ebp . . . mcookie This command generates a &quot;magic cookie,&quot; a 128-bit (32-character) pseudorandom hexadecimal number, normally used as an authorization &quot;signature&quot; by the X server. This also available for use in a script as a &quot;quick 'n dirty&quot; random number. random000=$(mcookie) Of course, a script could use md5sum for the same purpose. # Generate md5 checksum on the script itself. random001=`md5sum $0 | awk '{print $1}'` # Uses 'awk' to strip off the filename. The mcookie command gives yet another way to generate a &quot;unique&quot; filename. Example 16-62. Filename generator #!/bin/bash # tempfile-name.sh: temp filename generator BASE_STR=`mcookie` # 32-character magic cookie. POS=11 # Arbitrary position in magic cookie string. LEN=5 # Get $LEN consecutive characters. prefix=temp # This is, after all, a &quot;temp&quot; file. # For more &quot;uniqueness,&quot; generate the #+ filename prefix using the same method #+ as the suffix, below. suffix=${BASE_STR:POS:LEN} # Extract a 5-character string, #+ starting at position 11. temp_filename=$prefix.$suffix # Construct the filename. echo &quot;Temp filename = &quot;$temp_filename&quot;&quot; # sh tempfile-name.sh # Temp filename = temp.e19ea # Compare this method of generating &quot;unique&quot; filenames #+ with the 'date' method in ex51.sh. exit 0 units This utility converts between different units of measure. While normally invoked in interactive mode, units may find use in a script. Example 16-63. Converting meters to miles #!/bin/bash # unit-conversion.sh # Must have 'units' utility installed. convert_units () # Takes as arguments the units to convert. { cf=$(units &quot;$1&quot; &quot;$2&quot; | sed --silent -e '1p' | awk '{print $2}') # Strip off everything except the actual conversion factor. echo &quot;$cf&quot; } Unit1=miles Unit2=meters cfactor=`convert_units $Unit1 $Unit2` quantity=3.73 result=$(echo $quantity*$cfactor | bc) echo &quot;There are $result $Unit2 in $quantity $Unit1.&quot; # What happens if you pass incompatible units, #+ such as &quot;acres&quot; and &quot;miles&quot; to the function? exit 0 # Exercise: Edit this script to accept command-line parameters, # with appropriate error checking, of course. m4 A hidden treasure, m4 is a powerful macro [87] processing filter, virtually a complete language. Although originally written as a pre-processor for RatFor, m4 turned out to be useful as a stand-alone utility. In fact, m4 combines some of the functionality of eval, tr, and awk, in addition to its extensive macro expansion facilities. The April, 2002 issue of Linux Journal has a very nice article on m4 and its uses. Example 16-64. Using m4 #!/bin/bash # m4.sh: Using the m4 macro processor # Strings string=abcdA01 echo &quot;len($string)&quot; | m4 # 7 echo &quot;substr($string,4)&quot; | m4 # A01 echo &quot;regexp($string,[0-1][0-1],\&amp;Z)&quot; | m4 # 01Z # Arithmetic var=99 echo &quot;incr($var)&quot; | m4 # 100 echo &quot;eval($var / 3)&quot; | m4 # 33 exit xmessage This X-based variant of echo pops up a message/query window on the desktop. xmessage Left click to continue -button okay zenity The zenity utility is adept at displaying GTK+ dialog widgets and very suitable for scripting purposes. doexec The doexec command enables passing an arbitrary list of arguments to a binary executable. In particular, passing argv[0] (which corresponds to $0 in a script) lets the executable be invoked by various names, and it can then carry out different sets of actions, according to the name by which it was called. What this amounts to is roundabout way of passing options to an executable. For example, the /usr/local/bin directory might contain a binary called &quot;aaa&quot;. Invoking doexec /usr/local/bin/aaa list would list all those files in the current working directory beginning with an &quot;a&quot;, while invoking (the same executable with) doexec /usr/local/bin/aaa delete would delete those files. Note The various behaviors of the executable must be defined within the code of the executable itself, analogous to something like the following in a shell script: case `basename $0` in &quot;name1&quot; ) do_something;; &quot;name2&quot; ) do_something_else;; &quot;name3&quot; ) do_yet_another_thing;; * ) bail_out;; esac dialog The dialog family of tools provide a method of calling interactive &quot;dialog&quot; boxes from a script. The more elaborate variations of dialog -- gdialog, Xdialog, and kdialog -- actually invoke X-Windows widgets. sox The sox, or &quot;sound exchange&quot; command plays and performs transformations on sound files. In fact, the /usr/bin/play executable (now deprecated) is nothing but a shell wrapper for sox. For example, sox soundfile.wav soundfile.au changes a WAV sound file into a (Sun audio format) AU sound file. Shell scripts are ideally suited for batch-processing sox operations on sound files. For examples, see the Linux Radio Timeshift HOWTO and the MP3do Project. Chapter 17. System and Administrative Commands The startup and shutdown scripts in /etc/rc.d illustrate the uses (and usefulness) of many of these comands. These are usually invoked by root and used for system maintenance or emergency filesystem repairs. Use with caution, as some of these commands may damage your system if misused. Users and Groups users Show all logged on users. This is the approximate equivalent of who -q. groups Lists the current user and the groups she belongs to. This corresponds to the $GROUPS internal variable, but gives the group names, rather than the numbers. bash$ groups bozita cdrom cdwriter audio xgrp bash$ echo $GROUPS 501 chown, chgrp The chown command changes the ownership of a file or files. This command is a useful method that root can use to shift file ownership from one user to another. An ordinary user may not change the ownership of files, not even her own files. [88] root# chown bozo *.txt The chgrp command changes the group ownership of a file or files. You must be owner of the file(s) as well as a member of the destination group (or root) to use this operation. chgrp --recursive dunderheads *.data # The &quot;dunderheads&quot; group will now own all the &quot;*.data&quot; files #+ all the way down the $PWD directory tree (that's what &quot;recursive&quot; means). useradd, userdel The useradd administrative command adds a user account to the system and creates a home directory for that particular user, if so specified. The corresponding userdel command removes a user account from the system [89] and deletes associated files. Note The adduser command is a synonym for useradd and is usually a symbolic link to it. usermod Modify a user account. Changes may be made to the password, group membership, expiration date, and other attributes of a given user's account. With this command, a user's password may be locked, which has the effect of disabling the account. groupmod Modify a given group. The group name and/or ID number may be changed using this command. id The id command lists the real and effective user IDs and the group IDs of the user associated with the current process. This is the counterpart to the $UID, $EUID, and $GROUPS internal Bash variables. bash$ id uid=501(bozo) gid=501(bozo) groups=501(bozo),22(cdrom),80(cdwriter),81(audio) bash$ echo $UID 501 Note The id command shows the effective IDs only when they differ from the real ones. Also see Example 9-5. lid The lid (list ID) command shows the group(s) that a given user belongs to, or alternately, the users belonging to a given group. May be invoked only by root. root# lid bozo bozo(gid=500) root# lid daemon bin(gid=1) daemon(gid=2) adm(gid=4) lp(gid=7) who Show all users logged on to the system. bash$ who bozo tty1 Apr 27 17:45 bozo pts/0 Apr 27 17:46 bozo pts/1 Apr 27 17:47 bozo pts/2 Apr 27 17:49 The -m gives detailed information about only the current user. Passing any two arguments to who is the equivalent of who -m, as in who am i or who The Man. bash$ who -m localhost.localdomain!bozo pts/2 Apr 27 17:49 whoami is similar to who -m, but only lists the user name. bash$ whoami bozo w Show all logged on users and the processes belonging to them. This is an extended version of who. The output of w may be piped to grep to find a specific user and/or process. bash$ w | grep startx bozo tty1 - 4:22pm 6:41 4.47s 0.45s startx logname Show current user's login name (as found in /var/run/utmp). This is a near-equivalent to whoami, above. bash$ logname bozo bash$ whoami bozo However . . . bash$ su Password: ...... bash# whoami root bash# logname bozo Note While logname prints the name of the logged in user, whoami gives the name of the user attached to the current process. As we have just seen, sometimes these are not the same. su Runs a program or script as a substitute user. su rjones starts a shell as user rjones. A naked su defaults to root. See Example A-14. sudo Runs a command as root (or another user). This may be used in a script, thus permitting a regular user to run the script. #!/bin/bash # Some commands. sudo cp /root/secretfile /home/bozo/secret # Some more commands. The file /etc/sudoers holds the names of users permitted to invoke sudo. passwd Sets, changes, or manages a user's password. The passwd command can be used in a script, but probably should not be. Example 17-1. Setting a new password #!/bin/bash # setnew-password.sh: For demonstration purposes only. # Not a good idea to actually run this script. # This script must be run as root. ROOT_UID=0 # Root has $UID 0. E_WRONG_USER=65 # Not root? E_NOSUCHUSER=70 SUCCESS=0 if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo; echo &quot;Only root can run this script.&quot;; echo exit $E_WRONG_USER else echo echo &quot;You should know better than to run this script, root.&quot; echo &quot;Even root users get the blues... &quot; echo fi username=bozo NEWPASSWORD=security_violation # Check if bozo lives here. grep -q &quot;$username&quot; /etc/passwd if [ $? -ne $SUCCESS ] then echo &quot;User $username does not exist.&quot; echo &quot;No password changed.&quot; exit $E_NOSUCHUSER fi echo &quot;$NEWPASSWORD&quot; | passwd --stdin &quot;$username&quot; # The '--stdin' option to 'passwd' permits #+ getting a new password from stdin (or a pipe). echo; echo &quot;User $username's password changed!&quot; # Using the 'passwd' command in a script is dangerous. exit 0 The passwd command's -l, -u, and -d options permit locking, unlocking, and deleting a user's password. Only root may use these options. ac Show users' logged in time, as read from /var/log/wtmp. This is one of the GNU accounting utilities. bash$ ac total 68.08 last List last logged in users, as read from /var/log/wtmp. This command can also show remote logins. For example, to show the last few times the system rebooted: bash$ last reboot reboot system boot 2.6.9-1.667 Fri Feb 4 18:18 (00:02) reboot system boot 2.6.9-1.667 Fri Feb 4 15:20 (01:27) reboot system boot 2.6.9-1.667 Fri Feb 4 12:56 (00:49) reboot system boot 2.6.9-1.667 Thu Feb 3 21:08 (02:17) . . . wtmp begins Tue Feb 1 12:50:09 2005 newgrp Change user's group ID without logging out. This permits access to the new group's files. Since users may be members of multiple groups simultaneously, this command finds only limited use. Note Kurt Glaesemann points out that the newgrp command could prove helpful in setting the default group permissions for files a user writes. However, the chgrp command might be more convenient for this purpose. Terminals tty Echoes the name (filename) of the current user's terminal. Note that each separate xterm window counts as a different terminal. bash$ tty /dev/pts/1 stty Shows and/or changes terminal settings. This complex command, used in a script, can control terminal behavior and the way output displays. See the info page, and study it carefully. Example 17-2. Setting an erase character #!/bin/bash # erase.sh: Using &quot;stty&quot; to set an erase character when reading input. echo -n &quot;What is your name? &quot; read name # Try to backspace #+ to erase characters of input. # Problems? echo &quot;Your name is $name.&quot; stty erase '#' # Set &quot;hashmark&quot; (#) as erase character. echo -n &quot;What is your name? &quot; read name # Use # to erase last character typed. echo &quot;Your name is $name.&quot; exit 0 # Even after the script exits, the new key value remains set. # Exercise: How would you reset the erase character to the default value? Example 17-3. secret password: Turning off terminal echoing #!/bin/bash # secret-pw.sh: secret password echo echo -n &quot;Enter password &quot; read passwd echo &quot;password is $passwd&quot; echo -n &quot;If someone had been looking over your shoulder, &quot; echo &quot;your password would have been compromised.&quot; echo &amp;&amp; echo # Two line-feeds in an &quot;and list.&quot; stty -echo # Turns off screen echo. # May also be done with # read -sp passwd # A big Thank You to Leigh James for pointing this out. echo -n &quot;Enter password again &quot; read passwd echo echo &quot;password is $passwd&quot; echo stty echo # Restores screen echo. exit 0 # Do an 'info stty' for more on this useful-but-tricky command. A creative use of stty is detecting a user keypress (without hitting ENTER). Example 17-4. Keypress detection #!/bin/bash # keypress.sh: Detect a user keypress (&quot;hot keys&quot;). echo old_tty_settings=$(stty -g) # Save old settings (why?). stty -icanon Keypress=$(head -c1) # or $(dd bs=1 count=1 2&gt; /dev/null) # on non-GNU systems echo echo &quot;Key pressed was \&quot;&quot;$Keypress&quot;\&quot;.&quot; echo stty &quot;$old_tty_settings&quot; # Restore old settings. # Thanks, Stephane Chazelas. exit 0 Also see Example 9-3 and Example A-43. terminals and modes Normally, a terminal works in the canonical mode. When a user hits a key, the resulting character does not immediately go to the program actually running in this terminal. A buffer local to the terminal stores keystrokes. When the user hits the ENTER key, this sends all the stored keystrokes to the program running. There is even a basic line editor inside the terminal. bash$ stty -a speed 9600 baud; rows 36; columns 96; line = 0; intr = ^C; quit = ^\; erase = ^H; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; ... isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt Using canonical mode, it is possible to redefine the special keys for the local terminal line editor. bash$ cat &gt; filexxx wha&lt;ctl-W&gt;I&lt;ctl-H&gt;foo bar&lt;ctl-U&gt;hello world&lt;ENTER&gt; &lt;ctl-D&gt; bash$ cat filexxx hello world bash$ wc -c &lt; filexxx 12 The process controlling the terminal receives only 12 characters (11 alphabetic ones, plus a newline), although the user hit 26 keys. In non-canonical (&quot;raw&quot;) mode, every key hit (including special editing keys such as ctl-H) sends a character immediately to the controlling process. The Bash prompt disables both icanon and echo, since it replaces the basic terminal line editor with its own more elaborate one. For example, when you hit ctl-A at the Bash prompt, there's no ^A echoed by the terminal, but Bash gets a \1 character, interprets it, and moves the cursor to the begining of the line. Stéphane Chazelas setterm Set certain terminal attributes. This command writes to its terminal's stdout a string that changes the behavior of that terminal. bash$ setterm -cursor off bash$ The setterm command can be used within a script to change the appearance of text written to stdout, although there are certainly better tools available for this purpose. setterm -bold on echo bold hello setterm -bold off echo normal hello tset Show or initialize terminal settings. This is a less capable version of stty. bash$ tset -r Terminal type is xterm-xfree86. Kill is control-U (^U). Interrupt is control-C (^C). setserial Set or display serial port parameters. This command must be run by root and is usually found in a system setup script. # From /etc/pcmcia/serial script: IRQ=`setserial /dev/$DEVICE | sed -e 's/.*IRQ: //'` setserial /dev/$DEVICE irq 0 ; setserial /dev/$DEVICE irq $IRQ getty, agetty The initialization process for a terminal uses getty or agetty to set it up for login by a user. These commands are not used within user shell scripts. Their scripting counterpart is stty. mesg Enables or disables write access to the current user's terminal. Disabling access would prevent another user on the network to write to the terminal. Tip It can be quite annoying to have a message about ordering pizza suddenly appear in the middle of the text file you are editing. On a multi-user network, you might therefore wish to disable write access to your terminal when you need to avoid interruptions. wall This is an acronym for &quot;write all,&quot; i.e., sending a message to all users at every terminal logged into the network. It is primarily a system administrator's tool, useful, for example, when warning everyone that the system will shortly go down due to a problem (see Example 19-1). bash$ wall System going down for maintenance in 5 minutes! Broadcast message from bozo (pts/1) Sun Jul 8 13:53:27 2001... System going down for maintenance in 5 minutes! Note If write access to a particular terminal has been disabled with mesg, then wall cannot send a message to that terminal. Information and Statistics uname Output system specifications (OS, kernel version, etc.) to stdout. Invoked with the -a option, gives verbose system info (see Example 16-5). The -s option shows only the OS type. bash$ uname Linux bash$ uname -s Linux bash$ uname -a Linux iron.bozo 2.6.15-1.2054_FC5 #1 Tue Mar 14 15:48:33 EST 2006 i686 i686 i386 GNU/Linux arch Show system architecture. Equivalent to uname -m. See Example 11-27. bash$ arch i686 bash$ uname -m i686 lastcomm Gives information about previous commands, as stored in the /var/account/pacct file. Command name and user name can be specified by options. This is one of the GNU accounting utilities. lastlog List the last login time of all system users. This references the /var/log/lastlog file. bash$ lastlog root tty1 Fri Dec 7 18:43:21 -0700 2001 bin **Never logged in** daemon **Never logged in** ... bozo tty1 Sat Dec 8 21:14:29 -0700 2001 bash$ lastlog | grep root root tty1 Fri Dec 7 18:43:21 -0700 2001 Caution This command will fail if the user invoking it does not have read permission for the /var/log/lastlog file. lsof List open files. This command outputs a detailed table of all currently open files and gives information about their owner, size, the processes associated with them, and more. Of course, lsof may be piped to grep and/or awk to parse and analyze its results. bash$ lsof COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME init 1 root mem REG 3,5 30748 30303 /sbin/init init 1 root mem REG 3,5 73120 8069 /lib/ld-2.1.3.so init 1 root mem REG 3,5 931668 8075 /lib/libc-2.1.3.so cardmgr 213 root mem REG 3,5 36956 30357 /sbin/cardmgr ... The lsof command is a useful, if complex administrative tool. If you are unable to dismount a filesystem and get an error message that it is still in use, then running lsof helps determine which files are still open on that filesystem. The -i option lists open network socket files, and this can help trace intrusion or hack attempts. bash$ lsof -an -i tcp COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME firefox 2330 bozo 32u IPv4 9956 TCP 66.0.118.137:57596-&gt;67.112.7.104:http ... firefox 2330 bozo 38u IPv4 10535 TCP 66.0.118.137:57708-&gt;216.79.48.24:http ... See Example 30-2 for an effective use of lsof. strace System trace: diagnostic and debugging tool for tracing system calls and signals. This command and ltrace, following, are useful for diagnosing why a given program or package fails to run . . . perhaps due to missing libraries or related causes. bash$ strace df execve(&quot;/bin/df&quot;, [&quot;df&quot;], [/* 45 vars */]) = 0 uname({sys=&quot;Linux&quot;, node=&quot;bozo.localdomain&quot;, ...}) = 0 brk(0) = 0x804f5e4 ... This is the Linux equivalent of the Solaris truss command. ltrace Library trace: diagnostic and debugging tool that traces library calls invoked by a given command. bash$ ltrace df __libc_start_main(0x804a910, 1, 0xbfb589a4, 0x804fb70, 0x804fb68 &lt;unfinished ...&gt;: setlocale(6, &quot;&quot;) = &quot;en_US.UTF-8&quot; bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;) = &quot;/usr/share/locale&quot; textdomain(&quot;coreutils&quot;) = &quot;coreutils&quot; __cxa_atexit(0x804b650, 0, 0, 0x8052bf0, 0xbfb58908) = 0 getenv(&quot;DF_BLOCK_SIZE&quot;) = NULL ... nc The nc (netcat) utility is a complete toolkit for connecting to and listening to TCP and UDP ports. It is useful as a diagnostic and testing tool and as a component in simple script-based HTTP clients and servers. bash$ nc localhost.localdomain 25 220 localhost.localdomain ESMTP Sendmail 8.13.1/8.13.1; Thu, 31 Mar 2005 15:41:35 -0700 A real-life usage example. Example 17-5. Checking a remote server for identd #! /bin/sh ## Duplicate DaveG's ident-scan thingie using netcat. Oooh, he'll be p*ssed. ## Args: target port [port port port ...] ## Hose stdout _and_ stderr together. ## ## Advantages: runs slower than ident-scan, giving remote inetd less cause ##+ for alarm, and only hits the few known daemon ports you specify. ## Disadvantages: requires numeric-only port args, the output sleazitude, ##+ and won't work for r-services when coming from high source ports. # Script author: Hobbit &lt;hobbit@avian.org&gt; # Used in ABS Guide with permission. # --------------------------------------------------- E_BADARGS=65 # Need at least two args. TWO_WINKS=2 # How long to sleep. THREE_WINKS=3 IDPORT=113 # Authentication &quot;tap ident&quot; port. RAND1=999 RAND2=31337 TIMEOUT0=9 TIMEOUT1=8 TIMEOUT2=4 # --------------------------------------------------- case &quot;${2}&quot; in &quot;&quot; ) echo &quot;Need HOST and at least one PORT.&quot; ; exit $E_BADARGS ;; esac # Ping 'em once and see if they *are* running identd. nc -z -w $TIMEOUT0 &quot;$1&quot; $IDPORT || \ { echo &quot;Oops, $1 isn't running identd.&quot; ; exit 0 ; } # -z scans for listening daemons. # -w $TIMEOUT = How long to try to connect. # Generate a randomish base port. RP=`expr $$ % $RAND1 + $RAND2` TRG=&quot;$1&quot; shift while test &quot;$1&quot; ; do nc -v -w $TIMEOUT1 -p ${RP} &quot;$TRG&quot; ${1} &lt; /dev/null &gt; /dev/null &amp; PROC=$! sleep $THREE_WINKS echo &quot;${1},${RP}&quot; | nc -w $TIMEOUT2 -r &quot;$TRG&quot; $IDPORT 2&gt;&amp;1 sleep $TWO_WINKS # Does this look like a lamer script or what . . . ? # ABS Guide author comments: &quot;Ain't really all that bad . . . #+ kinda clever, actually.&quot; kill -HUP $PROC RP=`expr ${RP} + 1` shift done exit $? # Notes: # ----- # Try commenting out line 30 and running this script #+ with &quot;localhost.localdomain 25&quot; as arguments. # For more of Hobbit's 'nc' example scripts, #+ look in the documentation: #+ the /usr/share/doc/nc-X.XX/scripts directory. And, of course, there's Dr. Andrew Tridgell's notorious one-line script in the BitKeeper Affair: echo clone | nc thunk.org 5000 &gt; e2fsprogs.dat free Shows memory and cache usage in tabular form. The output of this command lends itself to parsing, using grep, awk or Perl. The procinfo command shows all the information that free does, and much more. bash$ free total used free shared buffers cached Mem: 30504 28624 1880 15820 1608 16376 -/+ buffers/cache: 10640 19864 Swap: 68540 3128 65412 To show unused RAM memory: bash$ free | grep Mem | awk '{ print $4 }' 1880 procinfo Extract and list information and statistics from the /proc pseudo-filesystem. This gives a very extensive and detailed listing. bash$ procinfo | grep Bootup Bootup: Wed Mar 21 15:15:50 2001 Load average: 0.04 0.21 0.34 3/47 6829 lsdev List devices, that is, show installed hardware. bash$ lsdev Device DMA IRQ I/O Ports ------------------------------------------------ cascade 4 2 dma 0080-008f dma1 0000-001f dma2 00c0-00df fpu 00f0-00ff ide0 14 01f0-01f7 03f6-03f6 ... du Show (disk) file usage, recursively. Defaults to current working directory, unless otherwise specified. bash$ du -ach 1.0k ./wi.sh 1.0k ./tst.sh 1.0k ./random.file 6.0k . 6.0k total df Shows filesystem usage in tabular form. bash$ df Filesystem 1k-blocks Used Available Use% Mounted on /dev/hda5 273262 92607 166547 36% / /dev/hda8 222525 123951 87085 59% /home /dev/hda7 1408796 1075744 261488 80% /usr dmesg Lists all system bootup messages to stdout. Handy for debugging and ascertaining which device drivers were installed and which system interrupts in use. The output of dmesg may, of course, be parsed with grep, sed, or awk from within a script. bash$ dmesg | grep hda Kernel command line: ro root=/dev/hda2 hda: IBM-DLGA-23080, ATA DISK drive hda: 6015744 sectors (3080 MB) w/96KiB Cache, CHS=746/128/63 hda: hda1 hda2 hda3 &lt; hda5 hda6 hda7 &gt; hda4 stat Gives detailed and verbose statistics on a given file (even a directory or device file) or set of files. bash$ stat test.cru File: &quot;test.cru&quot; Size: 49970 Allocated Blocks: 100 Filetype: Regular File Mode: (0664/-rw-rw-r--) Uid: ( 501/ bozo) Gid: ( 501/ bozo) Device: 3,8 Inode: 18185 Links: 1 Access: Sat Jun 2 16:40:24 2001 Modify: Sat Jun 2 16:40:24 2001 Change: Sat Jun 2 16:40:24 2001 If the target file does not exist, stat returns an error message. bash$ stat nonexistent-file nonexistent-file: No such file or directory In a script, you can use stat to extract information about files (and filesystems) and set variables accordingly. #!/bin/bash # fileinfo2.sh # Per suggestion of Joël Bourquard and . . . # http://www.linuxquestions.org/questions/showthread.php?t=410766 FILENAME=testfile.txt file_name=$(stat -c%n &quot;$FILENAME&quot;) # Same as &quot;$FILENAME&quot; of course. file_owner=$(stat -c%U &quot;$FILENAME&quot;) file_size=$(stat -c%s &quot;$FILENAME&quot;) # Certainly easier than using &quot;ls -l $FILENAME&quot; #+ and then parsing with sed. file_inode=$(stat -c%i &quot;$FILENAME&quot;) file_type=$(stat -c%F &quot;$FILENAME&quot;) file_access_rights=$(stat -c%A &quot;$FILENAME&quot;) echo &quot;File name: $file_name&quot; echo &quot;File owner: $file_owner&quot; echo &quot;File size: $file_size&quot; echo &quot;File inode: $file_inode&quot; echo &quot;File type: $file_type&quot; echo &quot;File access rights: $file_access_rights&quot; exit 0 sh fileinfo2.sh File name: testfile.txt File owner: bozo File size: 418 File inode: 1730378 File type: regular file File access rights: -rw-rw-r-- vmstat Display virtual memory statistics. bash$ vmstat procs memory swap io system cpu r b w swpd free buff cache si so bi bo in cs us sy id 0 0 0 0 11040 2636 38952 0 0 33 7 271 88 8 3 89 uptime Shows how long the system has been running, along with associated statistics. bash$ uptime 10:28pm up 1:57, 3 users, load average: 0.17, 0.34, 0.27 Note A load average of 1 or less indicates that the system handles processes immediately. A load average greater than 1 means that processes are being queued. When the load average gets above 3 (on a single-core processor), then system performance is significantly degraded. hostname Lists the system's host name. This command sets the host name in an /etc/rc.d setup script (/etc/rc.d/rc.sysinit or similar). It is equivalent to uname -n, and a counterpart to the $HOSTNAME internal variable. bash$ hostname localhost.localdomain bash$ echo $HOSTNAME localhost.localdomain Similar to the hostname command are the domainname, dnsdomainname, nisdomainname, and ypdomainname commands. Use these to display or set the system DNS or NIS/YP domain name. Various options to hostname also perform these functions. hostid Echo a 32-bit hexadecimal numerical identifier for the host machine. bash$ hostid 7f0100 Note This command allegedly fetches a &quot;unique&quot; serial number for a particular system. Certain product registration procedures use this number to brand a particular user license. Unfortunately, hostid only returns the machine network address in hexadecimal, with pairs of bytes transposed. The network address of a typical non-networked Linux machine, is found in /etc/hosts. bash$ cat /etc/hosts 127.0.0.1 localhost.localdomain localhost As it happens, transposing the bytes of 127.0.0.1, we get 0.127.1.0, which translates in hex to 007f0100, the exact equivalent of what hostid returns, above. There exist only a few million other Linux machines with this identical hostid. sar Invoking sar (System Activity Reporter) gives a very detailed rundown on system statistics. The Santa Cruz Operation (&quot;Old&quot; SCO) released sar as Open Source in June, 1999. This command is not part of the base Linux distribution, but may be obtained as part of the sysstat utilities package, written by Sebastien Godard. bash$ sar Linux 2.4.9 (brooks.seringas.fr) 09/26/03 10:30:00 CPU %user %nice %system %iowait %idle 10:40:00 all 2.21 10.90 65.48 0.00 21.41 10:50:00 all 3.36 0.00 72.36 0.00 24.28 11:00:00 all 1.12 0.00 80.77 0.00 18.11 Average: all 2.23 3.63 72.87 0.00 21.27 14:32:30 LINUX RESTART 15:00:00 CPU %user %nice %system %iowait %idle 15:10:00 all 8.59 2.40 17.47 0.00 71.54 15:20:00 all 4.07 1.00 11.95 0.00 82.98 15:30:00 all 0.79 2.94 7.56 0.00 88.71 Average: all 6.33 1.70 14.71 0.00 77.26 readelf Show information and statistics about a designated elf binary. This is part of the binutils package. bash$ readelf -h /bin/bash ELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) . . . size The size [/path/to/binary] command gives the segment sizes of a binary executable or archive file. This is mainly of use to programmers. bash$ size /bin/bash text data bss dec hex filename 495971 22496 17392 535859 82d33 /bin/bash System Logs logger Appends a user-generated message to the system log (/var/log/messages). You do not have to be root to invoke logger. logger Experiencing instability in network connection at 23:10, 05/21. # Now, do a 'tail /var/log/messages'. By embedding a logger command in a script, it is possible to write debugging information to /var/log/messages. logger -t $0 -i Logging at line &quot;$LINENO&quot;. # The &quot;-t&quot; option specifies the tag for the logger entry. # The &quot;-i&quot; option records the process ID. # tail /var/log/message # ... # Jul 7 20:48:58 localhost ./test.sh[1712]: Logging at line 3. logrotate This utility manages the system log files, rotating, compressing, deleting, and/or e-mailing them, as appropriate. This keeps the /var/log from getting cluttered with old log files. Usually cron runs logrotate on a daily basis. Adding an appropriate entry to /etc/logrotate.conf makes it possible to manage personal log files, as well as system-wide ones. Note Stefano Falsetto has created rottlog, which he considers to be an improved version of logrotate. Job Control ps Process Statistics: lists currently executing processes by owner and PID (process ID). This is usually invoked with ax or aux options, and may be piped to grep or sed to search for a specific process (see Example 15-14 and Example 29-3). bash$ ps ax | grep sendmail 295 ? S 0:00 sendmail: accepting connections on port 25 To display system processes in graphical &quot;tree&quot; format: ps afjx or ps ax --forest. pgrep, pkill Combining the ps command with grep or kill. bash$ ps a | grep mingetty 2212 tty2 Ss+ 0:00 /sbin/mingetty tty2 2213 tty3 Ss+ 0:00 /sbin/mingetty tty3 2214 tty4 Ss+ 0:00 /sbin/mingetty tty4 2215 tty5 Ss+ 0:00 /sbin/mingetty tty5 2216 tty6 Ss+ 0:00 /sbin/mingetty tty6 4849 pts/2 S+ 0:00 grep mingetty bash$ pgrep mingetty 2212 mingetty 2213 mingetty 2214 mingetty 2215 mingetty 2216 mingetty Compare the action of pkill with killall. pstree Lists currently executing processes in &quot;tree&quot; format. The -p option shows the PIDs, as well as the process names. top Continuously updated display of most cpu-intensive processes. The -b option displays in text mode, so that the output may be parsed or accessed from a script. bash$ top -b 8:30pm up 3 min, 3 users, load average: 0.49, 0.32, 0.13 45 processes: 44 sleeping, 1 running, 0 zombie, 0 stopped CPU states: 13.6% user, 7.3% system, 0.0% nice, 78.9% idle Mem: 78396K av, 65468K used, 12928K free, 0K shrd, 2352K buff Swap: 157208K av, 0K used, 157208K free 37244K cached PID USER PRI NI SIZE RSS SHARE STAT %CPU %MEM TIME COMMAND 848 bozo 17 0 996 996 800 R 5.6 1.2 0:00 top 1 root 8 0 512 512 444 S 0.0 0.6 0:04 init 2 root 9 0 0 0 0 SW 0.0 0.0 0:00 keventd ... nice Run a background job with an altered priority. Priorities run from 19 (lowest) to -20 (highest). Only root may set the negative (higher) priorities. Related commands are renice and snice, which change the priority of a running process or processes, and skill, which sends a kill signal to a process or processes. nohup Keeps a command running even after user logs off. The command will run as a foreground process unless followed by &amp;. If you use nohup within a script, consider coupling it with a wait to avoid creating an orphan or zombie process. pidof Identifies process ID (PID) of a running job. Since job control commands, such as kill and renice act on the PID of a process (not its name), it is sometimes necessary to identify that PID. The pidof command is the approximate counterpart to the $PPID internal variable. bash$ pidof xclock 880 Example 17-6. pidof helps kill a process #!/bin/bash # kill-process.sh NOPROCESS=2 process=xxxyyyzzz # Use nonexistent process. # For demo purposes only... # ... don't want to actually kill any actual process with this script. # # If, for example, you wanted to use this script to logoff the Internet, # process=pppd t=`pidof $process` # Find pid (process id) of $process. # The pid is needed by 'kill' (can't 'kill' by program name). if [ -z &quot;$t&quot; ] # If process not present, 'pidof' returns null. then echo &quot;Process $process was not running.&quot; echo &quot;Nothing killed.&quot; exit $NOPROCESS fi kill $t # May need 'kill -9' for stubborn process. # Need a check here to see if process allowed itself to be killed. # Perhaps another &quot; t=`pidof $process` &quot; or ... # This entire script could be replaced by # kill $(pidof -x process_name) # or # killall process_name # but it would not be as instructive. exit 0 fuser Identifies the processes (by PID) that are accessing a given file, set of files, or directory. May also be invoked with the -k option, which kills those processes. This has interesting implications for system security, especially in scripts preventing unauthorized users from accessing system services. bash$ fuser -u /usr/bin/vim /usr/bin/vim: 3207e(bozo) bash$ fuser -u /dev/null /dev/null: 3009(bozo) 3010(bozo) 3197(bozo) 3199(bozo) One important application for fuser is when physically inserting or removing storage media, such as CD ROM disks or USB flash drives. Sometimes trying a umount fails with a device is busy error message. This means that some user(s) and/or process(es) are accessing the device. An fuser -um /dev/device_name will clear up the mystery, so you can kill any relevant processes. bash$ umount /mnt/usbdrive umount: /mnt/usbdrive: device is busy bash$ fuser -um /dev/usbdrive /mnt/usbdrive: 1772c(bozo) bash$ kill -9 1772 bash$ umount /mnt/usbdrive The fuser command, invoked with the -n option identifies the processes accessing a port. This is especially useful in combination with nmap. root# nmap localhost.localdomain PORT STATE SERVICE 25/tcp open smtp root# fuser -un tcp 25 25/tcp: 2095(root) root# ps ax | grep 2095 | grep -v grep 2095 ? Ss 0:00 sendmail: accepting connections cron Administrative program scheduler, performing such duties as cleaning up and deleting system log files and updating the slocate database. This is the superuser version of at (although each user may have their own crontab file which can be changed with the crontab command). It runs as a daemon and executes scheduled entries from /etc/crontab. Note Some flavors of Linux run crond, Matthew Dillon's version of cron. Process Control and Booting init The init command is the parent of all processes. Called in the final step of a bootup, init determines the runlevel of the system from /etc/inittab. Invoked by its alias telinit, and by root only. telinit Symlinked to init, this is a means of changing the system runlevel, usually done for system maintenance or emergency filesystem repairs. Invoked only by root. This command can be dangerous -- be certain you understand it well before using! runlevel Shows the current and last runlevel, that is, whether the system is halted (runlevel 0), in single-user mode (1), in multi-user mode (2 or 3), in X Windows (5), or rebooting (6). This command accesses the /var/run/utmp file. halt, shutdown, reboot Command set to shut the system down, usually just prior to a power down. Warning On some Linux distros, the halt command has 755 permissions, so it can be invoked by a non-root user. A careless halt in a terminal or a script may shut down the system! service Starts or stops a system service. The startup scripts in /etc/init.d and /etc/rc.d use this command to start services at bootup. root# /sbin/service iptables stop Flushing firewall rules: [ OK ] Setting chains to policy ACCEPT: filter [ OK ] Unloading iptables modules: [ OK ] Network nmap Network mapper and port scanner. This command scans a server to locate open ports and the services associated with those ports. It can also report information about packet filters and firewalls. This is an important security tool for locking down a network against hacking attempts. #!/bin/bash SERVER=$HOST # localhost.localdomain (127.0.0.1). PORT_NUMBER=25 # SMTP port. nmap $SERVER | grep -w &quot;$PORT_NUMBER&quot; # Is that particular port open? # grep -w matches whole words only, #+ so this wouldn't match port 1025, for example. exit 0 # 25/tcp open smtp ifconfig Network interface configuration and tuning utility. bash$ ifconfig -a lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:10 errors:0 dropped:0 overruns:0 frame:0 TX packets:10 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:700 (700.0 b) TX bytes:700 (700.0 b) The ifconfig command is most often used at bootup to set up the interfaces, or to shut them down when rebooting. # Code snippets from /etc/rc.d/init.d/network # ... # Check that networking is up. [ ${NETWORKING} = &quot;no&quot; ] &amp;&amp; exit 0 [ -x /sbin/ifconfig ] || exit 0 # ... for i in $interfaces ; do if ifconfig $i 2&gt;/dev/null | grep -q &quot;UP&quot; &gt;/dev/null 2&gt;&amp;1 ; then action &quot;Shutting down interface $i: &quot; ./ifdown $i boot fi # The GNU-specific &quot;-q&quot; option to &quot;grep&quot; means &quot;quiet&quot;, i.e., #+ producing no output. # Redirecting output to /dev/null is therefore not strictly necessary. # ... echo &quot;Currently active devices:&quot; echo `/sbin/ifconfig | grep ^[a-z] | awk '{print $1}'` # ^^^^^ should be quoted to prevent globbing. # The following also work. # echo $(/sbin/ifconfig | awk '/^[a-z]/ { print $1 })' # echo $(/sbin/ifconfig | sed -e 's/ .*//') # Thanks, S.C., for additional comments. See also Example 32-6. netstat Show current network statistics and information, such as routing tables and active connections. This utility accesses information in /proc/net (Chapter 29). See Example 29-4. netstat -r is equivalent to route. bash$ netstat Active Internet connections (w/o servers) Proto Recv-Q Send-Q Local Address Foreign Address State Active UNIX domain sockets (w/o servers) Proto RefCnt Flags Type State I-Node Path unix 11 [ ] DGRAM 906 /dev/log unix 3 [ ] STREAM CONNECTED 4514 /tmp/.X11-unix/X0 unix 3 [ ] STREAM CONNECTED 4513 . . . Note A netstat -lptu shows sockets that are listening to ports, and the associated processes. This can be useful for determining whether a computer has been hacked or compromised. iwconfig This is the command set for configuring a wireless network. It is the wireless equivalent of ifconfig, above. ip General purpose utility for setting up, changing, and analyzing IP (Internet Protocol) networks and attached devices. This command is part of the iproute2 package. bash$ ip link show 1: lo: &lt;LOOPBACK,UP&gt; mtu 16436 qdisc noqueue link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: eth0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast qlen 1000 link/ether 00:d0:59:ce:af:da brd ff:ff:ff:ff:ff:ff 3: sit0: &lt;NOARP&gt; mtu 1480 qdisc noop link/sit 0.0.0.0 brd 0.0.0.0 bash$ ip route list 169.254.0.0/16 dev lo scope link Or, in a script: #!/bin/bash # Script by Juan Nicolas Ruiz # Used with his kind permission. # Setting up (and stopping) a GRE tunnel. # --- start-tunnel.sh --- LOCAL_IP=&quot;192.168.1.17&quot; REMOTE_IP=&quot;10.0.5.33&quot; OTHER_IFACE=&quot;192.168.0.100&quot; REMOTE_NET=&quot;192.168.3.0/24&quot; /sbin/ip tunnel add netb mode gre remote $REMOTE_IP \ local $LOCAL_IP ttl 255 /sbin/ip addr add $OTHER_IFACE dev netb /sbin/ip link set netb up /sbin/ip route add $REMOTE_NET dev netb exit 0 ############################################# # --- stop-tunnel.sh --- REMOTE_NET=&quot;192.168.3.0/24&quot; /sbin/ip route del $REMOTE_NET dev netb /sbin/ip link set netb down /sbin/ip tunnel del netb exit 0 route Show info about or make changes to the kernel routing table. bash$ route Destination Gateway Genmask Flags MSS Window irtt Iface pm3-67.bozosisp * 255.255.255.255 UH 40 0 0 ppp0 127.0.0.0 * 255.0.0.0 U 40 0 0 lo default pm3-67.bozosisp 0.0.0.0 UG 40 0 0 ppp0 iptables The iptables command set is a packet filtering tool used mainly for such security purposes as setting up network firewalls. This is a complex tool, and a detailed explanation of its use is beyond the scope of this document. Oskar Andreasson's tutorial is a reasonable starting point. See also shutting down iptables and Example 30-2. chkconfig Check network and system configuration. This command lists and manages the network and system services started at bootup in the /etc/rc?.d directory. Originally a port from IRIX to Red Hat Linux, chkconfig may not be part of the core installation of some Linux flavors. bash$ chkconfig --list atd 0:off 1:off 2:off 3:on 4:on 5:on 6:off rwhod 0:off 1:off 2:off 3:off 4:off 5:off 6:off ... tcpdump Network packet &quot;sniffer.&quot; This is a tool for analyzing and troubleshooting traffic on a network by dumping packet headers that match specified criteria. Dump ip packet traffic between hosts bozoville and caduceus: bash$ tcpdump ip host bozoville and caduceus Of course, the output of tcpdump can be parsed with certain of the previously discussed text processing utilities. Filesystem mount Mount a filesystem, usually on an external device, such as a floppy or CDROM. The file /etc/fstab provides a handy listing of available filesystems, partitions, and devices, including options, that may be automatically or manually mounted. The file /etc/mtab shows the currently mounted filesystems and partitions (including the virtual ones, such as /proc). mount -a mounts all filesystems and partitions listed in /etc/fstab, except those with a noauto option. At bootup, a startup script in /etc/rc.d (rc.sysinit or something similar) invokes this to get everything mounted. mount -t iso9660 /dev/cdrom /mnt/cdrom # Mounts CD ROM. ISO 9660 is a standard CD ROM filesystem. mount /mnt/cdrom # Shortcut, if /mnt/cdrom listed in /etc/fstab The versatile mount command can even mount an ordinary file on a block device, and the file will act as if it were a filesystem. Mount accomplishes that by associating the file with a loopback device. One application of this is to mount and examine an ISO9660 filesystem image before burning it onto a CDR. [90] Example 17-7. Checking a CD image # As root... mkdir /mnt/cdtest # Prepare a mount point, if not already there. mount -r -t iso9660 -o loop cd-image.iso /mnt/cdtest # Mount the image. # &quot;-o loop&quot; option equivalent to &quot;losetup /dev/loop0&quot; cd /mnt/cdtest # Now, check the image. ls -alR # List the files in the directory tree there. # And so forth. umount Unmount a currently mounted filesystem. Before physically removing a previously mounted floppy or CDROM disk, the device must be umounted, else filesystem corruption may result. umount /mnt/cdrom # You may now press the eject button and safely remove the disk. Note The automount utility, if properly installed, can mount and unmount floppies or CDROM disks as they are accessed or removed. On &quot;multispindle&quot; laptops with swappable floppy and optical drives, this can cause problems, however. gnome-mount The newer Linux distros have deprecated mount and umount. The successor, for command-line mounting of removable storage devices, is gnome-mount. It can take the -d option to mount a device file by its listing in /dev. For example, to mount a USB flash drive: bash$ gnome-mount -d /dev/sda1 gnome-mount 0.4 bash$ df . . . /dev/sda1 63584 12034 51550 19% /media/disk sync Forces an immediate write of all updated data from buffers to hard drive (synchronize drive with buffers). While not strictly necessary, a sync assures the sys admin or user that the data just changed will survive a sudden power failure. In the olden days, a sync; sync (twice, just to make absolutely sure) was a useful precautionary measure before a system reboot. At times, you may wish to force an immediate buffer flush, as when securely deleting a file (see Example 16-61) or when the lights begin to flicker. losetup Sets up and configures loopback devices. Example 17-8. Creating a filesystem in a file SIZE=1000000 # 1 meg head -c $SIZE &lt; /dev/zero &gt; file # Set up file of designated size. losetup /dev/loop0 file # Set it up as loopback device. mke2fs /dev/loop0 # Create filesystem. mount -o loop /dev/loop0 /mnt # Mount it. # Thanks, S.C. mkswap Creates a swap partition or file. The swap area must subsequently be enabled with swapon. swapon, swapoff Enable / disable swap partitition or file. These commands usually take effect at bootup and shutdown. mke2fs Create a Linux ext2 filesystem. This command must be invoked as root. Example 17-9. Adding a new hard drive #!/bin/bash # Adding a second hard drive to system. # Software configuration. Assumes hardware already mounted. # From an article by the author of the ABS Guide. # In issue #38 of _Linux Gazette_, http://www.linuxgazette.com. ROOT_UID=0 # This script must be run as root. E_NOTROOT=67 # Non-root exit error. if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo &quot;Must be root to run this script.&quot; exit $E_NOTROOT fi # Use with extreme caution! # If something goes wrong, you may wipe out your current filesystem. NEWDISK=/dev/hdb # Assumes /dev/hdb vacant. Check! MOUNTPOINT=/mnt/newdisk # Or choose another mount point. fdisk $NEWDISK mke2fs -cv $NEWDISK1 # Check for bad blocks (verbose output). # Note: ^ /dev/hdb1, *not* /dev/hdb! mkdir $MOUNTPOINT chmod 777 $MOUNTPOINT # Makes new drive accessible to all users. # Now, test ... # mount -t ext2 /dev/hdb1 /mnt/newdisk # Try creating a directory. # If it works, umount it, and proceed. # Final step: # Add the following line to /etc/fstab. # /dev/hdb1 /mnt/newdisk ext2 defaults 1 1 exit See also Example 17-8 and Example 31-3. mkdosfs Create a DOS FAT filesystem. tune2fs Tune ext2 filesystem. May be used to change filesystem parameters, such as maximum mount count. This must be invoked as root. Warning This is an extremely dangerous command. Use it at your own risk, as you may inadvertently destroy your filesystem. dumpe2fs Dump (list to stdout) very verbose filesystem info. This must be invoked as root. root# dumpe2fs /dev/hda7 | grep 'ount count' dumpe2fs 1.19, 13-Jul-2000 for EXT2 FS 0.5b, 95/08/09 Mount count: 6 Maximum mount count: 20 hdparm List or change hard disk parameters. This command must be invoked as root, and it may be dangerous if misused. fdisk Create or change a partition table on a storage device, usually a hard drive. This command must be invoked as root. Warning Use this command with extreme caution. If something goes wrong, you may destroy an existing filesystem. fsck, e2fsck, debugfs Filesystem check, repair, and debug command set. fsck: a front end for checking a UNIX filesystem (may invoke other utilities). The actual filesystem type generally defaults to ext2. e2fsck: ext2 filesystem checker. debugfs: ext2 filesystem debugger. One of the uses of this versatile, but dangerous command is to (attempt to) recover deleted files. For advanced users only! Caution All of these should be invoked as root, and they can damage or destroy a filesystem if misused. badblocks Checks for bad blocks (physical media flaws) on a storage device. This command finds use when formatting a newly installed hard drive or testing the integrity of backup media. [91] As an example, badblocks /dev/fd0 tests a floppy disk. The badblocks command may be invoked destructively (overwrite all data) or in non-destructive read-only mode. If root user owns the device to be tested, as is generally the case, then root must invoke this command. lsusb, usbmodules The lsusb command lists all USB (Universal Serial Bus) buses and the devices hooked up to them. The usbmodules command outputs information about the driver modules for connected USB devices. bash$ lsusb Bus 001 Device 001: ID 0000:0000 Device Descriptor: bLength 18 bDescriptorType 1 bcdUSB 1.00 bDeviceClass 9 Hub bDeviceSubClass 0 bDeviceProtocol 0 bMaxPacketSize0 8 idVendor 0x0000 idProduct 0x0000 . . . lspci Lists pci busses present. bash$ lspci 00:00.0 Host bridge: Intel Corporation 82845 845 (Brookdale) Chipset Host Bridge (rev 04) 00:01.0 PCI bridge: Intel Corporation 82845 845 (Brookdale) Chipset AGP Bridge (rev 04) 00:1d.0 USB Controller: Intel Corporation 82801CA/CAM USB (Hub #1) (rev 02) 00:1d.1 USB Controller: Intel Corporation 82801CA/CAM USB (Hub #2) (rev 02) 00:1d.2 USB Controller: Intel Corporation 82801CA/CAM USB (Hub #3) (rev 02) 00:1e.0 PCI bridge: Intel Corporation 82801 Mobile PCI Bridge (rev 42) . . . mkbootdisk Creates a boot floppy which can be used to bring up the system if, for example, the MBR (master boot record) becomes corrupted. Of special interest is the --iso option, which uses mkisofs to create a bootable ISO9660 filesystem image suitable for burning a bootable CDR. The mkbootdisk command is actually a Bash script, written by Erik Troan, in the /sbin directory. mkisofs Creates an ISO9660 filesystem suitable for a CDR image. chroot CHange ROOT directory. Normally commands are fetched from $PATH, relative to /, the default root directory. This changes the root directory to a different one (and also changes the working directory to there). This is useful for security purposes, for instance when the system administrator wishes to restrict certain users, such as those telnetting in, to a secured portion of the filesystem (this is sometimes referred to as confining a guest user to a &quot;chroot jail&quot;). Note that after a chroot, the execution path for system binaries is no longer valid. A chroot /opt would cause references to /usr/bin to be translated to /opt/usr/bin. Likewise, chroot /aaa/bbb /bin/ls would redirect future instances of ls to /aaa/bbb as the base directory, rather than / as is normally the case. An alias XX 'chroot /aaa/bbb ls' in a user's ~/.bashrc effectively restricts which portion of the filesystem she may run command &quot;XX&quot; on. The chroot command is also handy when running from an emergency boot floppy (chroot to /dev/fd0), or as an option to lilo when recovering from a system crash. Other uses include installation from a different filesystem (an rpm option) or running a readonly filesystem from a CD ROM. Invoke only as root, and use with care. Caution It might be necessary to copy certain system files to a chrooted directory, since the normal $PATH can no longer be relied upon. lockfile This utility is part of the procmail package (www.procmail.org). It creates a lock file, a semaphore that controls access to a file, device, or resource. Definition: A semaphore is a flag or signal. (The usage originated in railroading, where a colored flag, lantern, or striped movable arm semaphore indicated whether a particular track was in use and therefore unavailable for another train.) A UNIX process can check the appropriate semaphore to determine whether a particular resource is available/accessible. The lock file serves as a flag that this particular file, device, or resource is in use by a process (and is therefore &quot;busy&quot;). The presence of a lock file permits only restricted access (or no access) to other processes. lockfile /home/bozo/lockfiles/$0.lock # Creates a write-protected lockfile prefixed with the name of the script. lockfile /home/bozo/lockfiles/${0##*/}.lock # A safer version of the above, as pointed out by E. Choroba. Lock files are used in such applications as protecting system mail folders from simultaneously being changed by multiple users, indicating that a modem port is being accessed, and showing that an instance of Firefox is using its cache. Scripts may check for the existence of a lock file created by a certain process to check if that process is running. Note that if a script attempts to create a lock file that already exists, the script will likely hang. Normally, applications create and check for lock files in the /var/lock directory. [92] A script can test for the presence of a lock file by something like the following. appname=xyzip # Application &quot;xyzip&quot; created lock file &quot;/var/lock/xyzip.lock&quot;. if [ -e &quot;/var/lock/$appname.lock&quot; ] then #+ Prevent other programs &amp; scripts # from accessing files/resources used by xyzip. ... flock Much less useful than the lockfile command is flock. It sets an &quot;advisory&quot; lock on a file and then executes a command while the lock is on. This is to prevent any other process from setting a lock on that file until completion of the specified command. flock $0 cat $0 &gt; lockfile__$0 # Set a lock on the script the above line appears in, #+ while listing the script to stdout. Note Unlike lockfile, flock does not automatically create a lock file. mknod Creates block or character device files (may be necessary when installing new hardware on the system). The MAKEDEV utility has virtually all of the functionality of mknod, and is easier to use. MAKEDEV Utility for creating device files. It must be run as root, and in the /dev directory. It is a sort of advanced version of mknod. tmpwatch Automatically deletes files which have not been accessed within a specified period of time. Usually invoked by cron to remove stale log files. Backup dump, restore The dump command is an elaborate filesystem backup utility, generally used on larger installations and networks. [93] It reads raw disk partitions and writes a backup file in a binary format. Files to be backed up may be saved to a variety of storage media, including disks and tape drives. The restore command restores backups made with dump. fdformat Perform a low-level format on a floppy disk (/dev/fd0*). System Resources ulimit Sets an upper limit on use of system resources. Usually invoked with the -f option, which sets a limit on file size (ulimit -f 1000 limits files to 1 meg maximum). [94] The -t option limits the coredump size (ulimit -c 0 eliminates coredumps). Normally, the value of ulimit would be set in /etc/profile and/or ~/.bash_profile (see Appendix H). Important Judicious use of ulimit can protect a system against the dreaded fork bomb. #!/bin/bash # This script is for illustrative purposes only. # Run it at your own peril -- it WILL freeze your system. while true # Endless loop. do $0 &amp; # This script invokes itself . . . #+ forks an infinite number of times . . . #+ until the system freezes up because all resources exhausted. done # This is the notorious &quot;sorcerer's appentice&quot; scenario. exit 0 # Will not exit here, because this script will never terminate. A ulimit -Hu XX (where XX is the user process limit) in /etc/profile would abort this script when it exceeded the preset limit. quota Display user or group disk quotas. setquota Set user or group disk quotas from the command-line. umask User file creation permissions mask. Limit the default file attributes for a particular user. All files created by that user take on the attributes specified by umask. The (octal) value passed to umask defines the file permissions disabled. For example, umask 022 ensures that new files will have at most 755 permissions (777 NAND 022). [95] Of course, the user may later change the attributes of particular files with chmod. The usual practice is to set the value of umask in /etc/profile and/or ~/.bash_profile (see Appendix H). Example 17-10. Using umask to hide an output file from prying eyes #!/bin/bash # rot13a.sh: Same as &quot;rot13.sh&quot; script, but writes output to &quot;secure&quot; file. # Usage: ./rot13a.sh filename # or ./rot13a.sh &lt;filename # or ./rot13a.sh and supply keyboard input (stdin) umask 177 # File creation mask. # Files created by this script #+ will have 600 permissions. OUTFILE=decrypted.txt # Results output to file &quot;decrypted.txt&quot; #+ which can only be read/written # by invoker of script (or root). cat &quot;$@&quot; | tr 'a-zA-Z' 'n-za-mN-ZA-M' &gt; $OUTFILE # ^^ Input from stdin or a file. ^^^^^^^^^^ Output redirected to file. exit 0 rdev Get info about or make changes to root device, swap space, or video mode. The functionality of rdev has generally been taken over by lilo, but rdev remains useful for setting up a ram disk. This is a dangerous command, if misused. Modules lsmod List installed kernel modules. bash$ lsmod Module Size Used by autofs 9456 2 (autoclean) opl3 11376 0 serial_cs 5456 0 (unused) sb 34752 0 uart401 6384 0 [sb] sound 58368 0 [opl3 sb uart401] soundlow 464 0 [sound] soundcore 2800 6 [sb sound] ds 6448 2 [serial_cs] i82365 22928 2 pcmcia_core 45984 0 [serial_cs ds i82365] Note Doing a cat /proc/modules gives the same information. insmod Force installation of a kernel module (use modprobe instead, when possible). Must be invoked as root. rmmod Force unloading of a kernel module. Must be invoked as root. modprobe Module loader that is normally invoked automatically in a startup script. Must be invoked as root. depmod Creates module dependency file. Usually invoked from a startup script. modinfo Output information about a loadable module. bash$ modinfo hid filename: /lib/modules/2.4.20-6/kernel/drivers/usb/hid.o description: &quot;USB HID support drivers&quot; author: &quot;Andreas Gal, Vojtech Pavlik &lt;vojtech@suse.cz&gt;&quot; license: &quot;GPL&quot; Miscellaneous env Runs a program or script with certain environmental variables set or changed (without changing the overall system environment). The [varname=xxx] permits changing the environmental variable varname for the duration of the script. With no options specified, this command lists all the environmental variable settings. [96] Note The first line of a script (the &quot;sha-bang&quot; line) may use env when the path to the shell or interpreter is unknown. #! /usr/bin/env perl print &quot;This Perl script will run,\n&quot;; print &quot;even when I don't know where to find Perl.\n&quot;; # Good for portable cross-platform scripts, # where the Perl binaries may not be in the expected place. # Thanks, S.C. Or even ... #!/bin/env bash # Queries the $PATH enviromental variable for the location of bash. # Therefore ... # This script will run where Bash is not in its usual place, in /bin. ... ldd Show shared lib dependencies for an executable file. bash$ ldd /bin/ls libc.so.6 =&gt; /lib/libc.so.6 (0x4000c000) /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x80000000) watch Run a command repeatedly, at specified time intervals. The default is two-second intervals, but this may be changed with the -n option. watch -n 5 tail /var/log/messages # Shows tail end of system log, /var/log/messages, every five seconds. Note Unfortunately, piping the output of watch command to grep does not work. strip Remove the debugging symbolic references from an executable binary. This decreases its size, but makes debugging it impossible. This command often occurs in a Makefile, but rarely in a shell script. nm List symbols in an unstripped compiled binary. xrandr Command-line tool for manipulating the root window of the screen. Example 17-11. Backlight: changes the brightness of the (laptop) screen backlight #!/bin/bash # backlight.sh # reldate 02dec2011 # A bug in Fedora Core 16/17 messes up the keyboard backlight controls. # This script is a quick-n-dirty workaround, essentially a shell wrapper #+ for xrandr. It gives more control than on-screen sliders and widgets. OUTPUT=$(xrandr | grep LV | awk '{print $1}') # Get display name! INCR=.05 # For finer-grained control, set INCR to .03 or .02. old_brightness=$(xrandr --verbose | grep rightness | awk '{ print $2 }') if [ -z &quot;$1&quot; ] then bright=1 # If no command-line arg, set brightness to 1.0 (default). else if [ &quot;$1&quot; = &quot;+&quot; ] then bright=$(echo &quot;scale=2; $old_brightness + $INCR&quot; | bc) # +.05 else if [ &quot;$1&quot; = &quot;-&quot; ] then bright=$(echo &quot;scale=2; $old_brightness - $INCR&quot; | bc) # -.05 else if [ &quot;$1&quot; = &quot;#&quot; ] # Echoes current brightness; does not change it. then bright=$old_brightness else if [[ &quot;$1&quot; = &quot;h&quot; || &quot;$1&quot; = &quot;H&quot; ]] then echo echo &quot;Usage:&quot; echo &quot;$0 [No args] Sets/resets brightness to default (1.0).&quot; echo &quot;$0 + Increments brightness by 0.5.&quot; echo &quot;$0 - Decrements brightness by 0.5.&quot; echo &quot;$0 # Echoes current brightness without changing it.&quot; echo &quot;$0 N (number) Sets brightness to N (useful range .7 - 1.2).&quot; echo &quot;$0 h [H] Echoes this help message.&quot; echo &quot;$0 any-other Gives xrandr usage message.&quot; bright=$old_brightness else bright=&quot;$1&quot; fi fi fi fi fi xrandr --output &quot;$OUTPUT&quot; --brightness &quot;$bright&quot; # See xrandr manpage. # As root! E_CHANGE0=$? echo &quot;Current brightness = $bright&quot; exit $E_CHANGE0 # =========== Or, alternately . . . ==================== # #!/bin/bash # backlight2.sh # reldate 20jun2012 # A bug in Fedora Core 16/17 messes up the keyboard backlight controls. # This is a quick-n-dirty workaround, an alternate to backlight.sh. target_dir=\ /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0/backlight/acpi_video0 # Hardware directory. actual_brightness=$(cat $target_dir/actual_brightness) max_brightness=$(cat $target_dir/max_brightness) Brightness=$target_dir/brightness let &quot;req_brightness = actual_brightness&quot; # Requested brightness. if [ &quot;$1&quot; = &quot;-&quot; ] then # Decrement brightness 1 notch. let &quot;req_brightness = $actual_brightness - 1&quot; else if [ &quot;$1&quot; = &quot;+&quot; ] then # Increment brightness 1 notch. let &quot;req_brightness = $actual_brightness + 1&quot; fi fi if [ $req_brightness -gt $max_brightness ] then req_brightness=$max_brightness fi # Do not exceed max. hardware design brightness. echo echo &quot;Old brightness = $actual_brightness&quot; echo &quot;Max brightness = $max_brightness&quot; echo &quot;Requested brightness = $req_brightness&quot; echo # ===================================== echo $req_brightness &gt; $Brightness # Must be root for this to take effect. E_CHANGE1=$? # Successful? # ===================================== if [ &quot;$?&quot; -eq 0 ] then echo &quot;Changed brightness!&quot; else echo &quot;Failed to change brightness!&quot; fi act_brightness=$(cat $Brightness) echo &quot;Actual brightness = $act_brightness&quot; scale0=2 sf=100 # Scale factor. pct=$(echo &quot;scale=$scale0; $act_brightness / $max_brightness * $sf&quot; | bc) echo &quot;Percentage brightness = $pct%&quot; exit $E_CHANGE1 rdist Remote distribution client: synchronizes, clones, or backs up a file system on a remote server. 17.1. Analyzing a System Script Using our knowledge of administrative commands, let us examine a system script. One of the shortest and simplest to understand scripts is &quot;killall,&quot; [97] used to suspend running processes at system shutdown. Example 17-12. killall, from /etc/rc.d/init.d #!/bin/sh # --&gt; Comments added by the author of this document marked by &quot;# --&gt;&quot;. # --&gt; This is part of the 'rc' script package # --&gt; by Miquel van Smoorenburg, &lt;miquels@drinkel.nl.mugnet.org&gt;. # --&gt; This particular script seems to be Red Hat / FC specific # --&gt; (may not be present in other distributions). # Bring down all unneeded services that are still running #+ (there shouldn't be any, so this is just a sanity check) for i in /var/lock/subsys/*; do # --&gt; Standard for/in loop, but since &quot;do&quot; is on same line, # --&gt; it is necessary to add &quot;;&quot;. # Check if the script is there. [ ! -f $i ] &amp;&amp; continue # --&gt; This is a clever use of an &quot;and list&quot;, equivalent to: # --&gt; if [ ! -f &quot;$i&quot; ]; then continue # Get the subsystem name. subsys=${i#/var/lock/subsys/} # --&gt; Match variable name, which, in this case, is the file name. # --&gt; This is the exact equivalent of subsys=`basename $i`. # --&gt; It gets it from the lock file name # --&gt;+ (if there is a lock file, # --&gt;+ that's proof the process has been running). # --&gt; See the &quot;lockfile&quot; entry, above. # Bring the subsystem down. if [ -f /etc/rc.d/init.d/$subsys.init ]; then /etc/rc.d/init.d/$subsys.init stop else /etc/rc.d/init.d/$subsys stop # --&gt; Suspend running jobs and daemons. # --&gt; Note that &quot;stop&quot; is a positional parameter, # --&gt;+ not a shell builtin. fi done That wasn't so bad. Aside from a little fancy footwork with variable matching, there is no new material there. Exercise 1. In /etc/rc.d/init.d, analyze the halt script. It is a bit longer than killall, but similar in concept. Make a copy of this script somewhere in your home directory and experiment with it (do not run it as root). Do a simulated run with the -vn flags (sh -vn scriptname). Add extensive comments. Change the commands to echos. Exercise 2. Look at some of the more complex scripts in /etc/rc.d/init.d. Try to understand at least portions of them. Follow the above procedure to analyze them. For some additional insight, you might also examine the file sysvinitfiles in /usr/share/doc/initscripts-?.??, which is part of the &quot;initscripts&quot; documentation. Part 5. Advanced Topics At this point, we are ready to delve into certain of the difficult and unusual aspects of scripting. Along the way, we will attempt to &quot;push the envelope&quot; in various ways and examine boundary conditions (what happens when we move into uncharted territory?). Table of Contents 18. Regular Expressions 18.1. A Brief Introduction to Regular Expressions 18.2. Globbing 19. Here Documents 19.1. Here Strings 20. I/O Redirection 20.1. Using exec 20.2. Redirecting Code Blocks 20.3. Applications 21. Subshells 22. Restricted Shells 23. Process Substitution 24. Functions 24.1. Complex Functions and Function Complexities 24.2. Local Variables 24.3. Recursion Without Local Variables 25. Aliases 26. List Constructs 27. Arrays 28. Indirect References 29. /dev and /proc 29.1. /dev 29.2. /proc 30. Network Programming 31. Of Zeros and Nulls 32. Debugging 33. Options 34. Gotchas 35. Scripting With Style 35.1. Unofficial Shell Scripting Stylesheet 36. Miscellany 36.1. Interactive and non-interactive shells and scripts 36.2. Shell Wrappers 36.3. Tests and Comparisons: Alternatives 36.4. Recursion: a script calling itself 36.5. &quot;Colorizing&quot; Scripts 36.6. Optimizations 36.7. Assorted Tips 36.8. Security Issues 36.9. Portability Issues 36.10. Shell Scripting Under Windows 37. Bash, versions 2, 3, and 4 37.1. Bash, version 2 37.2. Bash, version 3 37.3. Bash, version 4 Chapter 18. Regular Expressions . . . the intellectual activity associated with software development is largely one of gaining insight. --Stowe Boyd To fully utilize the power of shell scripting, you need to master Regular Expressions. Certain commands and utilities commonly used in scripts, such as grep, expr, sed and awk, interpret and use REs. As of version 3, Bash has acquired its own RE-match operator: =~. 18.1. A Brief Introduction to Regular Expressions An expression is a string of characters. Those characters having an interpretation above and beyond their literal meaning are called metacharacters. A quote symbol, for example, may denote speech by a person, ditto, or a meta-meaning [98] for the symbols that follow. Regular Expressions are sets of characters and/or metacharacters that match (or specify) patterns. A Regular Expression contains one or more of the following: A character set. These are the characters retaining their literal meaning. The simplest type of Regular Expression consists only of a character set, with no metacharacters. An anchor. These designate (anchor) the position in the line of text that the RE is to match. For example, ^, and $ are anchors. Modifiers. These expand or narrow (modify) the range of text the RE is to match. Modifiers include the asterisk, brackets, and the backslash. The main uses for Regular Expressions (REs) are text searches and string manipulation. An RE matches a single character or a set of characters -- a string or a part of a string. The asterisk -- * -- matches any number of repeats of the character string or RE preceding it, including zero instances. &quot;1133*&quot; matches 11 + one or more 3's: 113, 1133, 1133333, and so forth. The dot -- . -- matches any one character, except a newline. [99] &quot;13.&quot; matches 13 + at least one of any character (including a space): 1133, 11333, but not 13 (additional character missing). See Example 16-18 for a demonstration of dot single-character matching. The caret -- ^ -- matches the beginning of a line, but sometimes, depending on context, negates the meaning of a set of characters in an RE. The dollar sign -- $ -- at the end of an RE matches the end of a line. &quot;XXX$&quot; matches XXX at the end of a line. &quot;^$&quot; matches blank lines. Brackets -- [...] -- enclose a set of characters to match in a single RE. &quot;[xyz]&quot; matches any one of the characters x, y, or z. &quot;[c-n]&quot; matches any one of the characters in the range c to n. &quot;[B-Pk-y]&quot; matches any one of the characters in the ranges B to P and k to y. &quot;[a-z0-9]&quot; matches any single lowercase letter or any digit. &quot;[^b-d]&quot; matches any character except those in the range b to d. This is an instance of ^ negating or inverting the meaning of the following RE (taking on a role similar to ! in a different context). Combined sequences of bracketed characters match common word patterns. &quot;[Yy][Ee][Ss]&quot; matches yes, Yes, YES, yEs, and so forth. &quot;[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]&quot; matches any Social Security number. The backslash -- \ -- escapes a special character, which means that character gets interpreted literally (and is therefore no longer special). A &quot;\$&quot; reverts back to its literal meaning of &quot;$&quot;, rather than its RE meaning of end-of-line. Likewise a &quot;\\&quot; has the literal meaning of &quot;\&quot;. Escaped &quot;angle brackets&quot; -- \&lt;...\&gt; -- mark word boundaries. The angle brackets must be escaped, since otherwise they have only their literal character meaning. &quot;\&lt;the\&gt;&quot; matches the word &quot;the,&quot; but not the words &quot;them,&quot; &quot;there,&quot; &quot;other,&quot; etc. bash$ cat textfile This is line 1, of which there is only one instance. This is the only instance of line 2. This is line 3, another line. This is line 4. bash$ grep 'the' textfile This is line 1, of which there is only one instance. This is the only instance of line 2. This is line 3, another line. bash$ grep '\&lt;the\&gt;' textfile This is the only instance of line 2. The only way to be certain that a particular RE works is to test it. TEST FILE: tstfile # No match. # No match. Run grep &quot;1133*&quot; on this file. # Match. # No match. # No match. This line contains the number 113. # Match. This line contains the number 13. # No match. This line contains the number 133. # No match. This line contains the number 1133. # Match. This line contains the number 113312. # Match. This line contains the number 1112. # No match. This line contains the number 113312312. # Match. This line contains no numbers at all. # No match. bash$ grep &quot;1133*&quot; tstfile Run grep &quot;1133*&quot; on this file. # Match. This line contains the number 113. # Match. This line contains the number 1133. # Match. This line contains the number 113312. # Match. This line contains the number 113312312. # Match. Extended REs. Additional metacharacters added to the basic set. Used in egrep, awk, and Perl. The question mark -- ? -- matches zero or one of the previous RE. It is generally used for matching single characters. The plus -- + -- matches one or more of the previous RE. It serves a role similar to the *, but does not match zero occurrences. # GNU versions of sed and awk can use &quot;+&quot;, # but it needs to be escaped. echo a111b | sed -ne '/a1\+b/p' echo a111b | grep 'a1\+b' echo a111b | gawk '/a1+b/' # All of above are equivalent. # Thanks, S.C. Escaped &quot;curly brackets&quot; -- \{ \} -- indicate the number of occurrences of a preceding RE to match. It is necessary to escape the curly brackets since they have only their literal character meaning otherwise. This usage is technically not part of the basic RE set. &quot;[0-9]\{5\}&quot; matches exactly five digits (characters in the range of 0 to 9). Note Curly brackets are not available as an RE in the &quot;classic&quot; (non-POSIX compliant) version of awk. However, the GNU extended version of awk, gawk, has the --re-interval option that permits them (without being escaped). bash$ echo 2222 | gawk --re-interval '/2{3}/' 2222 Perl and some egrep versions do not require escaping the curly brackets. Parentheses -- ( ) -- enclose a group of REs. They are useful with the following &quot;|&quot; operator and in substring extraction using expr. The -- | -- &quot;or&quot; RE operator matches any of a set of alternate characters. bash$ egrep 're(a|e)d' misc.txt People who read seem to be better informed than those who do not. The clarinet produces sound by the vibration of its reed. Note Some versions of sed, ed, and ex support escaped versions of the extended Regular Expressions described above, as do the GNU utilities. POSIX Character Classes. [:class:] This is an alternate method of specifying a range of characters to match. [:alnum:] matches alphabetic or numeric characters. This is equivalent to A-Za-z0-9. [:alpha:] matches alphabetic characters. This is equivalent to A-Za-z. [:blank:] matches a space or a tab. [:cntrl:] matches control characters. [:digit:] matches (decimal) digits. This is equivalent to 0-9. [:graph:] (graphic printable characters). Matches characters in the range of ASCII 33 - 126. This is the same as [:print:], below, but excluding the space character. [:lower:] matches lowercase alphabetic characters. This is equivalent to a-z. [:print:] (printable characters). Matches characters in the range of ASCII 32 - 126. This is the same as [:graph:], above, but adding the space character. [:space:] matches whitespace characters (space and horizontal tab). [:upper:] matches uppercase alphabetic characters. This is equivalent to A-Z. [:xdigit:] matches hexadecimal digits. This is equivalent to 0-9A-Fa-f. Important POSIX character classes generally require quoting or double brackets ([[ ]]). bash$ grep [[:digit:]] test.file abc=723 # ... if [[ $arow =~ [[:digit:]] ]] # Numerical input? then # POSIX char class if [[ $acol =~ [[:alpha:]] ]] # Number followed by a letter? Illegal! # ... # From ktour.sh example script. These character classes may even be used with globbing, to a limited extent. bash$ ls -l ?[[:digit:]][[:digit:]]? -rw-rw-r-- 1 bozo bozo 0 Aug 21 14:47 a33b POSIX character classes are used in Example 16-21 and Example 16-22. Sed, awk, and Perl, used as filters in scripts, take REs as arguments when &quot;sifting&quot; or transforming files or I/O streams. See Example A-12 and Example A-16 for illustrations of this. The standard reference on this complex topic is Friedl's Mastering Regular Expressions. Sed &amp; Awk, by Dougherty and Robbins, also gives a very lucid treatment of REs. See the Bibliography for more information on these books. 18.2. Globbing Bash itself cannot recognize Regular Expressions. Inside scripts, it is commands and utilities -- such as sed and awk -- that interpret RE's. Bash does carry out filename expansion [100] -- a process known as globbing -- but this does not use the standard RE set. Instead, globbing recognizes and expands wild cards. Globbing interprets the standard wild card characters [101] -- * and ?, character lists in square brackets, and certain other special characters (such as ^ for negating the sense of a match). There are important limitations on wild card characters in globbing, however. Strings containing * will not match filenames that start with a dot, as, for example, .bashrc. [102] Likewise, the ? has a different meaning in globbing than as part of an RE. bash$ ls -l total 2 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 a.1 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 b.1 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 c.1 -rw-rw-r-- 1 bozo bozo 466 Aug 6 17:48 t2.sh -rw-rw-r-- 1 bozo bozo 758 Jul 30 09:02 test1.txt bash$ ls -l t?.sh -rw-rw-r-- 1 bozo bozo 466 Aug 6 17:48 t2.sh bash$ ls -l [ab]* -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 a.1 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 b.1 bash$ ls -l [a-c]* -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 a.1 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 b.1 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 c.1 bash$ ls -l [^ab]* -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 c.1 -rw-rw-r-- 1 bozo bozo 466 Aug 6 17:48 t2.sh -rw-rw-r-- 1 bozo bozo 758 Jul 30 09:02 test1.txt bash$ ls -l {b*,c*,*est*} -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 b.1 -rw-rw-r-- 1 bozo bozo 0 Aug 6 18:42 c.1 -rw-rw-r-- 1 bozo bozo 758 Jul 30 09:02 test1.txt Bash performs filename expansion on unquoted command-line arguments. The echo command demonstrates this. bash$ echo * a.1 b.1 c.1 t2.sh test1.txt bash$ echo t* t2.sh test1.txt bash$ echo t?.sh t2.sh Note It is possible to modify the way Bash interprets special characters in globbing. A set -f command disables globbing, and the nocaseglob and nullglob options to shopt change globbing behavior. See also Example 11-5. Caution Filenames with embedded whitespace can cause globbing to choke. David Wheeler shows how to avoid many such pitfalls. IFS=&quot;$(printf '\n\t')&quot; # Remove space. # Correct glob use: # Always use for-loop, prefix glob, check if exists file. for file in ./* ; do # Use ./* ... NEVER bare * if [ -e &quot;$file&quot; ] ; then # Check whether file exists. COMMAND ... &quot;$file&quot; ... fi done # This example taken from David Wheeler's site, with permission. Chapter 19. Here Documents Here and now, boys. --Aldous Huxley, Island A here document is a special-purpose code block. It uses a form of I/O redirection to feed a command list to an interactive program or a command, such as ftp, cat, or the ex text editor. COMMAND &lt;&lt;InputComesFromHERE ... ... ... InputComesFromHERE A limit string delineates (frames) the command list. The special symbol &lt;&lt; precedes the limit string. This has the effect of redirecting the output of a command block into the stdin of the program or command. It is similar to interactive-program &lt; command-file, where command-file contains command #1 command #2 ... The here document equivalent looks like this: interactive-program &lt;&lt;LimitString command #1 command #2 ... LimitString Choose a limit string sufficiently unusual that it will not occur anywhere in the command list and confuse matters. Note that here documents may sometimes be used to good effect with non-interactive utilities and commands, such as, for example, wall. Example 19-1. broadcast: Sends message to everyone logged in #!/bin/bash wall &lt;&lt;zzz23EndOfMessagezzz23 E-mail your noontime orders for pizza to the system administrator. (Add an extra dollar for anchovy or mushroom topping.) # Additional message text goes here. # Note: 'wall' prints comment lines. zzz23EndOfMessagezzz23 # Could have been done more efficiently by # wall &lt;message-file # However, embedding the message template in a script #+ is a quick-and-dirty one-off solution. exit Even such unlikely candidates as the vi text editor lend themselves to here documents. Example 19-2. dummyfile: Creates a 2-line dummy file #!/bin/bash # Noninteractive use of 'vi' to edit a file. # Emulates 'sed'. E_BADARGS=85 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi TARGETFILE=$1 # Insert 2 lines in file, then save. #--------Begin here document-----------# vi $TARGETFILE &lt;&lt;x23LimitStringx23 i This is line 1 of the example file. This is line 2 of the example file. ^[ ZZ x23LimitStringx23 #----------End here document-----------# # Note that ^[ above is a literal escape #+ typed by Control-V &lt;Esc&gt;. # Bram Moolenaar points out that this may not work with 'vim' #+ because of possible problems with terminal interaction. exit The above script could just as effectively have been implemented with ex, rather than vi. Here documents containing a list of ex commands are common enough to form their own category, known as ex scripts. #!/bin/bash # Replace all instances of &quot;Smith&quot; with &quot;Jones&quot; #+ in files with a &quot;.txt&quot; filename suffix. ORIGINAL=Smith REPLACEMENT=Jones for word in $(fgrep -l $ORIGINAL *.txt) do # ------------------------------------- ex $word &lt;&lt;EOF :%s/$ORIGINAL/$REPLACEMENT/g :wq EOF # :%s is the &quot;ex&quot; substitution command. # :wq is write-and-quit. # ------------------------------------- done Analogous to &quot;ex scripts&quot; are cat scripts. Example 19-3. Multi-line message using cat #!/bin/bash # 'echo' is fine for printing single line messages, #+ but somewhat problematic for for message blocks. # A 'cat' here document overcomes this limitation. cat &lt;&lt;End-of-message ------------------------------------- This is line 1 of the message. This is line 2 of the message. This is line 3 of the message. This is line 4 of the message. This is the last line of the message. ------------------------------------- End-of-message # Replacing line 7, above, with #+ cat &gt; $Newfile &lt;&lt;End-of-message #+ ^^^^^^^^^^ #+ writes the output to the file $Newfile, rather than to stdout. exit 0 #-------------------------------------------- # Code below disabled, due to &quot;exit 0&quot; above. # S.C. points out that the following also works. echo &quot;------------------------------------- This is line 1 of the message. This is line 2 of the message. This is line 3 of the message. This is line 4 of the message. This is the last line of the message. -------------------------------------&quot; # However, text may not include double quotes unless they are escaped. The - option to mark a here document limit string (&lt;&lt;-LimitString) suppresses leading tabs (but not spaces) in the output. This may be useful in making a script more readable. Example 19-4. Multi-line message, with tabs suppressed #!/bin/bash # Same as previous example, but... # The - option to a here document &lt;&lt;- #+ suppresses leading tabs in the body of the document, #+ but *not* spaces. cat &lt;&lt;-ENDOFMESSAGE This is line 1 of the message. This is line 2 of the message. This is line 3 of the message. This is line 4 of the message. This is the last line of the message. ENDOFMESSAGE # The output of the script will be flush left. # Leading tab in each line will not show. # Above 5 lines of &quot;message&quot; prefaced by a tab, not spaces. # Spaces not affected by &lt;&lt;- . # Note that this option has no effect on *embedded* tabs. exit 0 A here document supports parameter and command substitution. It is therefore possible to pass different parameters to the body of the here document, changing its output accordingly. Example 19-5. Here document with replaceable parameters #!/bin/bash # Another 'cat' here document, using parameter substitution. # Try it with no command-line parameters, ./scriptname # Try it with one command-line parameter, ./scriptname Mortimer # Try it with one two-word quoted command-line parameter, # ./scriptname &quot;Mortimer Jones&quot; CMDLINEPARAM=1 # Expect at least command-line parameter. if [ $# -ge $CMDLINEPARAM ] then NAME=$1 # If more than one command-line param, #+ then just take the first. else NAME=&quot;John Doe&quot; # Default, if no command-line parameter. fi RESPONDENT=&quot;the author of this fine script&quot; cat &lt;&lt;Endofmessage Hello, there, $NAME. Greetings to you, $NAME, from $RESPONDENT. # This comment shows up in the output (why?). Endofmessage # Note that the blank lines show up in the output. # So does the comment. exit This is a useful script containing a here document with parameter substitution. Example 19-6. Upload a file pair to Sunsite incoming directory #!/bin/bash # upload.sh # Upload file pair (Filename.lsm, Filename.tar.gz) #+ to incoming directory at Sunsite/UNC (ibiblio.org). # Filename.tar.gz is the tarball itself. # Filename.lsm is the descriptor file. # Sunsite requires &quot;lsm&quot; file, otherwise will bounce contributions. E_ARGERROR=85 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` Filename-to-upload&quot; exit $E_ARGERROR fi Filename=`basename $1` # Strips pathname out of file name. Server=&quot;ibiblio.org&quot; Directory=&quot;/incoming/Linux&quot; # These need not be hard-coded into script, #+ but may instead be changed to command-line argument. Password=&quot;your.e-mail.address&quot; # Change above to suit. ftp -n $Server &lt;&lt;End-Of-Session # -n option disables auto-logon user anonymous &quot;$Password&quot; # If this doesn't work, then try: # quote user anonymous &quot;$Password&quot; binary bell # Ring 'bell' after each file transfer. cd $Directory put &quot;$Filename.lsm&quot; put &quot;$Filename.tar.gz&quot; bye End-Of-Session exit 0 Quoting or escaping the &quot;limit string&quot; at the head of a here document disables parameter substitution within its body. The reason for this is that quoting/escaping the limit string effectively escapes the $, `, and \ special characters, and causes them to be interpreted literally. (Thank you, Allen Halsey, for pointing this out.) Example 19-7. Parameter substitution turned off #!/bin/bash # A 'cat' here-document, but with parameter substitution disabled. NAME=&quot;John Doe&quot; RESPONDENT=&quot;the author of this fine script&quot; cat &lt;&lt;'Endofmessage' Hello, there, $NAME. Greetings to you, $NAME, from $RESPONDENT. Endofmessage # No parameter substitution when the &quot;limit string&quot; is quoted or escaped. # Either of the following at the head of the here document would have #+ the same effect. # cat &lt;&lt;&quot;Endofmessage&quot; # cat &lt;&lt;\Endofmessage # And, likewise: cat &lt;&lt;&quot;SpecialCharTest&quot; Directory listing would follow if limit string were not quoted. `ls -l` Arithmetic expansion would take place if limit string were not quoted. $((5 + 3)) A a single backslash would echo if limit string were not quoted. \\ SpecialCharTest exit Disabling parameter substitution permits outputting literal text. Generating scripts or even program code is one use for this. Example 19-8. A script that generates another script #!/bin/bash # generate-script.sh # Based on an idea by Albert Reiner. OUTFILE=generated.sh # Name of the file to generate. # ----------------------------------------------------------- # 'Here document containing the body of the generated script. ( cat &lt;&lt;'EOF' #!/bin/bash echo &quot;This is a generated shell script.&quot; # Note that since we are inside a subshell, #+ we can't access variables in the &quot;outside&quot; script. echo &quot;Generated file will be named: $OUTFILE&quot; # Above line will not work as normally expected #+ because parameter expansion has been disabled. # Instead, the result is literal output. a=7 b=3 let &quot;c = $a * $b&quot; echo &quot;c = $c&quot; exit 0 EOF ) &gt; $OUTFILE # ----------------------------------------------------------- # Quoting the 'limit string' prevents variable expansion #+ within the body of the above 'here document.' # This permits outputting literal strings in the output file. if [ -f &quot;$OUTFILE&quot; ] then chmod 755 $OUTFILE # Make the generated file executable. else echo &quot;Problem in creating file: \&quot;$OUTFILE\&quot;&quot; fi # This method also works for generating #+ C programs, Perl programs, Python programs, Makefiles, #+ and the like. exit 0 It is possible to set a variable from the output of a here document. This is actually a devious form of command substitution. variable=$(cat &lt;&lt;SETVAR This variable runs over multiple lines. SETVAR ) echo &quot;$variable&quot; A here document can supply input to a function in the same script. Example 19-9. Here documents and functions #!/bin/bash # here-function.sh GetPersonalData () { read firstname read lastname read address read city read state read zipcode } # This certainly appears to be an interactive function, but . . . # Supply input to the above function. GetPersonalData &lt;&lt;RECORD001 Bozo Bozeman 2726 Nondescript Dr. Bozeman MT 21226 RECORD001 echo echo &quot;$firstname $lastname&quot; echo &quot;$address&quot; echo &quot;$city, $state $zipcode&quot; echo exit 0 It is possible to use : as a dummy command accepting output from a here document. This, in effect, creates an &quot;anonymous&quot; here document. Example 19-10. &quot;Anonymous&quot; Here Document #!/bin/bash : &lt;&lt;TESTVARIABLES ${HOSTNAME?}${USER?}${MAIL?} # Print error message if one of the variables not set. TESTVARIABLES exit $? Tip A variation of the above technique permits &quot;commenting out&quot; blocks of code. Example 19-11. Commenting out a block of code #!/bin/bash # commentblock.sh : &lt;&lt;COMMENTBLOCK echo &quot;This line will not echo.&quot; This is a comment line missing the &quot;#&quot; prefix. This is another comment line missing the &quot;#&quot; prefix. &amp;*@!!++= The above line will cause no error message, because the Bash interpreter will ignore it. COMMENTBLOCK echo &quot;Exit value of above \&quot;COMMENTBLOCK\&quot; is $?.&quot; # 0 # No error shown. echo # The above technique also comes in useful for commenting out #+ a block of working code for debugging purposes. # This saves having to put a &quot;#&quot; at the beginning of each line, #+ then having to go back and delete each &quot;#&quot; later. # Note that the use of of colon, above, is optional. echo &quot;Just before commented-out code block.&quot; # The lines of code between the double-dashed lines will not execute. # =================================================================== : &lt;&lt;DEBUGXXX for file in * do cat &quot;$file&quot; done DEBUGXXX # =================================================================== echo &quot;Just after commented-out code block.&quot; exit 0 ###################################################################### # Note, however, that if a bracketed variable is contained within #+ the commented-out code block, #+ then this could cause problems. # for example: #/!/bin/bash : &lt;&lt;COMMENTBLOCK echo &quot;This line will not echo.&quot; &amp;*@!!++= ${foo_bar_bazz?} $(rm -rf /tmp/foobar/) $(touch my_build_directory/cups/Makefile) COMMENTBLOCK $ sh commented-bad.sh commented-bad.sh: line 3: foo_bar_bazz: parameter null or not set # The remedy for this is to strong-quote the 'COMMENTBLOCK' in line 49, above. : &lt;&lt;'COMMENTBLOCK' # Thank you, Kurt Pfeifle, for pointing this out. Tip Yet another twist of this nifty trick makes &quot;self-documenting&quot; scripts possible. Example 19-12. A self-documenting script #!/bin/bash # self-document.sh: self-documenting script # Modification of &quot;colm.sh&quot;. DOC_REQUEST=70 if [ &quot;$1&quot; = &quot;-h&quot; -o &quot;$1&quot; = &quot;--help&quot; ] # Request help. then echo; echo &quot;Usage: $0 [directory-name]&quot;; echo sed --silent -e '/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p' &quot;$0&quot; | sed -e '/DOCUMENTATIONXX$/d'; exit $DOC_REQUEST; fi : &lt;&lt;DOCUMENTATIONXX List the statistics of a specified directory in tabular format. --------------------------------------------------------------- The command-line parameter gives the directory to be listed. If no directory specified or directory specified cannot be read, then list the current working directory. DOCUMENTATIONXX if [ -z &quot;$1&quot; -o ! -r &quot;$1&quot; ] then directory=. else directory=&quot;$1&quot; fi echo &quot;Listing of &quot;$directory&quot;:&quot;; echo (printf &quot;PERMISSIONS LINKS OWNER GROUP SIZE MONTH DAY HH:MM PROG-NAME\n&quot; \ ; ls -l &quot;$directory&quot; | sed 1d) | column -t exit 0 Using a cat script is an alternate way of accomplishing this. DOC_REQUEST=70 if [ &quot;$1&quot; = &quot;-h&quot; -o &quot;$1&quot; = &quot;--help&quot; ] # Request help. then # Use a &quot;cat script&quot; . . . cat &lt;&lt;DOCUMENTATIONXX List the statistics of a specified directory in tabular format. --------------------------------------------------------------- The command-line parameter gives the directory to be listed. If no directory specified or directory specified cannot be read, then list the current working directory. DOCUMENTATIONXX exit $DOC_REQUEST fi See also Example A-28, Example A-40, Example A-41, and Example A-42 for more examples of self-documenting scripts. Note Here documents create temporary files, but these files are deleted after opening and are not accessible to any other process. bash$ bash -c 'lsof -a -p $$ -d0' &lt;&lt; EOF &gt; EOF lsof 1213 bozo 0r REG 3,5 0 30386 /tmp/t1213-0-sh (deleted) Caution Some utilities will not work inside a here document. Warning The closing limit string, on the final line of a here document, must start in the first character position. There can be no leading whitespace. Trailing whitespace after the limit string likewise causes unexpected behavior. The whitespace prevents the limit string from being recognized. [103] #!/bin/bash echo &quot;----------------------------------------------------------------------&quot; cat &lt;&lt;LimitString echo &quot;This is line 1 of the message inside the here document.&quot; echo &quot;This is line 2 of the message inside the here document.&quot; echo &quot;This is the final line of the message inside the here document.&quot; LimitString #^^^^Indented limit string. Error! This script will not behave as expected. echo &quot;----------------------------------------------------------------------&quot; # These comments are outside the 'here document', #+ and should not echo. echo &quot;Outside the here document.&quot; exit 0 echo &quot;This line had better not echo.&quot; # Follows an 'exit' command. Caution Some people very cleverly use a single ! as a limit string. But, that's not necessarily a good idea. # This works. cat &lt;&lt;! Hello! ! Three more exclamations !!! ! # But . . . cat &lt;&lt;! Hello! Single exclamation point follows! ! ! # Crashes with an error message. # However, the following will work. cat &lt;&lt;EOF Hello! Single exclamation point follows! ! EOF # It's safer to use a multi-character limit string. For those tasks too complex for a here document, consider using the expect scripting language, which was specifically designed for feeding input into interactive programs. 19.1. Here Strings A here string can be considered as a stripped-down form of a here document. It consists of nothing more than COMMAND &lt;&lt;&lt; $WORD, where $WORD is expanded and fed to the stdin of COMMAND. As a simple example, consider this alternative to the echo-grep construction. # Instead of: if echo &quot;$VAR&quot; | grep -q txt # if [[ $VAR = *txt* ]] # etc. # Try: if grep -q &quot;txt&quot; &lt;&lt;&lt; &quot;$VAR&quot; then # ^^^ echo &quot;$VAR contains the substring sequence \&quot;txt\&quot;&quot; fi # Thank you, Sebastian Kaminski, for the suggestion. Or, in combination with read: String=&quot;This is a string of words.&quot; read -r -a Words &lt;&lt;&lt; &quot;$String&quot; # The -a option to &quot;read&quot; #+ assigns the resulting values to successive members of an array. echo &quot;First word in String is: ${Words[0]}&quot; # This echo &quot;Second word in String is: ${Words[1]}&quot; # is echo &quot;Third word in String is: ${Words[2]}&quot; # a echo &quot;Fourth word in String is: ${Words[3]}&quot; # string echo &quot;Fifth word in String is: ${Words[4]}&quot; # of echo &quot;Sixth word in String is: ${Words[5]}&quot; # words. echo &quot;Seventh word in String is: ${Words[6]}&quot; # (null) # Past end of $String. # Thank you, Francisco Lobo, for the suggestion. It is, of course, possible to feed the output of a here string into the stdin of a loop. # As Seamus points out . . . ArrayVar=( element0 element1 element2 {A..D} ) while read element ; do echo &quot;$element&quot; 1&gt;&amp;2 done &lt;&lt;&lt; $(echo ${ArrayVar[*]}) # element0 element1 element2 A B C D Example 19-13. Prepending a line to a file #!/bin/bash # prepend.sh: Add text at beginning of file. # # Example contributed by Kenny Stauffer, #+ and slightly modified by document author. E_NOSUCHFILE=85 read -p &quot;File: &quot; file # -p arg to 'read' displays prompt. if [ ! -e &quot;$file&quot; ] then # Bail out if no such file. echo &quot;File $file not found.&quot; exit $E_NOSUCHFILE fi read -p &quot;Title: &quot; title cat - $file &lt;&lt;&lt;$title &gt; $file.new echo &quot;Modified file is $file.new&quot; exit # Ends script execution. from 'man bash': Here Strings A variant of here documents, the format is: &lt;&lt;&lt;word The word is expanded and supplied to the command on its standard input. Of course, the following also works: sed -e '1i\ Title: ' $file Example 19-14. Parsing a mailbox #!/bin/bash # Script by Francisco Lobo, #+ and slightly modified and commented by ABS Guide author. # Used in ABS Guide with permission. (Thank you!) # This script will not run under Bash versions -lt 3.0. E_MISSING_ARG=87 if [ -z &quot;$1&quot; ] then echo &quot;Usage: $0 mailbox-file&quot; exit $E_MISSING_ARG fi mbox_grep() # Parse mailbox file. { declare -i body=0 match=0 declare -a date sender declare mail header value while IFS= read -r mail # ^^^^ Reset $IFS. # Otherwise &quot;read&quot; will strip leading &amp; trailing space from its input. do if [[ $mail =~ ^From ]] # Match &quot;From&quot; field in message. then (( body = 0 )) # &quot;Zero out&quot; variables. (( match = 0 )) unset date elif (( body )) then (( match )) # echo &quot;$mail&quot; # Uncomment above line if you want entire body #+ of message to display. elif [[ $mail ]]; then IFS=: read -r header value &lt;&lt;&lt; &quot;$mail&quot; # ^^^ &quot;here string&quot; case &quot;$header&quot; in [Ff][Rr][Oo][Mm] ) [[ $value =~ &quot;$2&quot; ]] &amp;&amp; (( match++ )) ;; # Match &quot;From&quot; line. [Dd][Aa][Tt][Ee] ) read -r -a date &lt;&lt;&lt; &quot;$value&quot; ;; # ^^^ # Match &quot;Date&quot; line. [Rr][Ee][Cc][Ee][Ii][Vv][Ee][Dd] ) read -r -a sender &lt;&lt;&lt; &quot;$value&quot; ;; # ^^^ # Match IP Address (may be spoofed). esac else (( body++ )) (( match )) &amp;&amp; echo &quot;MESSAGE ${date:+of: ${date[*]} }&quot; # Entire $date array ^ echo &quot;IP address of sender: ${sender[1]}&quot; # Second field of &quot;Received&quot; line ^ fi done &lt; &quot;$1&quot; # Redirect stdout of file into loop. } mbox_grep &quot;$1&quot; # Send mailbox file to function. exit $? # Exercises: # --------- # 1) Break the single function, above, into multiple functions, #+ for the sake of readability. # 2) Add additional parsing to the script, checking for various keywords. $ mailbox_grep.sh scam_mail MESSAGE of Thu, 5 Jan 2006 08:00:56 -0500 (EST) IP address of sender: 196.3.62.4 Exercise: Find other uses for here strings, such as, for example, feeding input to dc. Chapter 20. I/O Redirection There are always three default files [104] open, stdin (the keyboard), stdout (the screen), and stderr (error messages output to the screen). These, and any other open files, can be redirected. Redirection simply means capturing output from a file, command, program, script, or even code block within a script (see Example 3-1 and Example 3-2) and sending it as input to another file, command, program, or script. Each open file gets assigned a file descriptor. [105] The file descriptors for stdin, stdout, and stderr are 0, 1, and 2, respectively. For opening additional files, there remain descriptors 3 to 9. It is sometimes useful to assign one of these additional file descriptors to stdin, stdout, or stderr as a temporary duplicate link. [106] This simplifies restoration to normal after complex redirection and reshuffling (see Example 20-1). COMMAND_OUTPUT &gt; # Redirect stdout to a file. # Creates the file if not present, otherwise overwrites it. ls -lR &gt; dir-tree.list # Creates a file containing a listing of the directory tree. : &gt; filename # The &gt; truncates file &quot;filename&quot; to zero length. # If file not present, creates zero-length file (same effect as 'touch'). # The : serves as a dummy placeholder, producing no output. &gt; filename # The &gt; truncates file &quot;filename&quot; to zero length. # If file not present, creates zero-length file (same effect as 'touch'). # (Same result as &quot;: &gt;&quot;, above, but this does not work with some shells.) COMMAND_OUTPUT &gt;&gt; # Redirect stdout to a file. # Creates the file if not present, otherwise appends to it. # Single-line redirection commands (affect only the line they are on): # -------------------------------------------------------------------- 1&gt;filename # Redirect stdout to file &quot;filename.&quot; 1&gt;&gt;filename # Redirect and append stdout to file &quot;filename.&quot; 2&gt;filename # Redirect stderr to file &quot;filename.&quot; 2&gt;&gt;filename # Redirect and append stderr to file &quot;filename.&quot; &amp;&gt;filename # Redirect both stdout and stderr to file &quot;filename.&quot; # This operator is now functional, as of Bash 4, final release. M&gt;N # &quot;M&quot; is a file descriptor, which defaults to 1, if not explicitly set. # &quot;N&quot; is a filename. # File descriptor &quot;M&quot; is redirect to file &quot;N.&quot; M&gt;&amp;N # &quot;M&quot; is a file descriptor, which defaults to 1, if not set. # &quot;N&quot; is another file descriptor. #============================================================================== # Redirecting stdout, one line at a time. LOGFILE=script.log echo &quot;This statement is sent to the log file, \&quot;$LOGFILE\&quot;.&quot; 1&gt;$LOGFILE echo &quot;This statement is appended to \&quot;$LOGFILE\&quot;.&quot; 1&gt;&gt;$LOGFILE echo &quot;This statement is also appended to \&quot;$LOGFILE\&quot;.&quot; 1&gt;&gt;$LOGFILE echo &quot;This statement is echoed to stdout, and will not appear in \&quot;$LOGFILE\&quot;.&quot; # These redirection commands automatically &quot;reset&quot; after each line. # Redirecting stderr, one line at a time. ERRORFILE=script.errors bad_command1 2&gt;$ERRORFILE # Error message sent to $ERRORFILE. bad_command2 2&gt;&gt;$ERRORFILE # Error message appended to $ERRORFILE. bad_command3 # Error message echoed to stderr, #+ and does not appear in $ERRORFILE. # These redirection commands also automatically &quot;reset&quot; after each line. #======================================================================= 2&gt;&amp;1 # Redirects stderr to stdout. # Error messages get sent to same place as standard output. &gt;&gt;filename 2&gt;&amp;1 bad_command &gt;&gt;filename 2&gt;&amp;1 # Appends both stdout and stderr to the file &quot;filename&quot; ... 2&gt;&amp;1 | [command(s)] bad_command 2&gt;&amp;1 | awk '{print $5}' # found # Sends stderr through a pipe. # |&amp; was added to Bash 4 as an abbreviation for 2&gt;&amp;1 |. i&gt;&amp;j # Redirects file descriptor i to j. # All output of file pointed to by i gets sent to file pointed to by j. &gt;&amp;j # Redirects, by default, file descriptor 1 (stdout) to j. # All stdout gets sent to file pointed to by j. 0&lt; FILENAME &lt; FILENAME # Accept input from a file. # Companion command to &quot;&gt;&quot;, and often used in combination with it. # # grep search-word &lt;filename [j]&lt;&gt;filename # Open file &quot;filename&quot; for reading and writing, #+ and assign file descriptor &quot;j&quot; to it. # If &quot;filename&quot; does not exist, create it. # If file descriptor &quot;j&quot; is not specified, default to fd 0, stdin. # # An application of this is writing at a specified place in a file. echo 1234567890 &gt; File # Write string to &quot;File&quot;. exec 3&lt;&gt; File # Open &quot;File&quot; and assign fd 3 to it. read -n 4 &lt;&amp;3 # Read only 4 characters. echo -n . &gt;&amp;3 # Write a decimal point there. exec 3&gt;&amp;- # Close fd 3. cat File # ==&gt; 1234.67890 # Random access, by golly. | # Pipe. # General purpose process and command chaining tool. # Similar to &quot;&gt;&quot;, but more general in effect. # Useful for chaining commands, scripts, files, and programs together. cat *.txt | sort | uniq &gt; result-file # Sorts the output of all the .txt files and deletes duplicate lines, # finally saves results to &quot;result-file&quot;. Multiple instances of input and output redirection and/or pipes can be combined in a single command line. command &lt; input-file &gt; output-file # Or the equivalent: &lt; input-file command &gt; output-file # Although this is non-standard. command1 | command2 | command3 &gt; output-file See Example 16-31 and Example A-14. Multiple output streams may be redirected to one file. ls -yz &gt;&gt; command.log 2&gt;&amp;1 # Capture result of illegal options &quot;yz&quot; in file &quot;command.log.&quot; # Because stderr is redirected to the file, #+ any error messages will also be there. # Note, however, that the following does *not* give the same result. ls -yz 2&gt;&amp;1 &gt;&gt; command.log # Outputs an error message, but does not write to file. # More precisely, the command output (in this case, null) #+ writes to the file, but the error message goes only to stdout. # If redirecting both stdout and stderr, #+ the order of the commands makes a difference. Closing File Descriptors n&lt;&amp;- Close input file descriptor n. 0&lt;&amp;-, &lt;&amp;- Close stdin. n&gt;&amp;- Close output file descriptor n. 1&gt;&amp;-, &gt;&amp;- Close stdout. Child processes inherit open file descriptors. This is why pipes work. To prevent an fd from being inherited, close it. # Redirecting only stderr to a pipe. exec 3&gt;&amp;1 # Save current &quot;value&quot; of stdout. ls -l 2&gt;&amp;1 &gt;&amp;3 3&gt;&amp;- | grep bad 3&gt;&amp;- # Close fd 3 for 'grep' (but not 'ls'). # ^^^^ ^^^^ exec 3&gt;&amp;- # Now close it for the remainder of the script. # Thanks, S.C. For a more detailed introduction to I/O redirection see Appendix F. 20.1. Using exec An exec &lt;filename command redirects stdin to a file. From that point on, all stdin comes from that file, rather than its normal source (usually keyboard input). This provides a method of reading a file line by line and possibly parsing each line of input using sed and/or awk. Example 20-1. Redirecting stdin using exec #!/bin/bash # Redirecting stdin using 'exec'. exec 6&lt;&amp;0 # Link file descriptor #6 with stdin. # Saves stdin. exec &lt; data-file # stdin replaced by file &quot;data-file&quot; read a1 # Reads first line of file &quot;data-file&quot;. read a2 # Reads second line of file &quot;data-file.&quot; echo echo &quot;Following lines read from file.&quot; echo &quot;-------------------------------&quot; echo $a1 echo $a2 echo; echo; echo exec 0&lt;&amp;6 6&lt;&amp;- # Now restore stdin from fd #6, where it had been saved, #+ and close fd #6 ( 6&lt;&amp;- ) to free it for other processes to use. # # &lt;&amp;6 6&lt;&amp;- also works. echo -n &quot;Enter data &quot; read b1 # Now &quot;read&quot; functions as expected, reading from normal stdin. echo &quot;Input read from stdin.&quot; echo &quot;----------------------&quot; echo &quot;b1 = $b1&quot; echo exit 0 Similarly, an exec &gt;filename command redirects stdout to a designated file. This sends all command output that would normally go to stdout to that file. Important exec N &gt; filename affects the entire script or current shell. Redirection in the PID of the script or shell from that point on has changed. However . . . N &gt; filename affects only the newly-forked process, not the entire script or shell. Thank you, Ahmed Darwish, for pointing this out. Example 20-2. Redirecting stdout using exec #!/bin/bash # reassign-stdout.sh LOGFILE=logfile.txt exec 6&gt;&amp;1 # Link file descriptor #6 with stdout. # Saves stdout. exec &gt; $LOGFILE # stdout replaced with file &quot;logfile.txt&quot;. # ----------------------------------------------------------- # # All output from commands in this block sent to file $LOGFILE. echo -n &quot;Logfile: &quot; date echo &quot;-------------------------------------&quot; echo echo &quot;Output of \&quot;ls -al\&quot; command&quot; echo ls -al echo; echo echo &quot;Output of \&quot;df\&quot; command&quot; echo df # ----------------------------------------------------------- # exec 1&gt;&amp;6 6&gt;&amp;- # Restore stdout and close file descriptor #6. echo echo &quot;== stdout now restored to default == &quot; echo ls -al echo exit 0 Example 20-3. Redirecting both stdin and stdout in the same script with exec #!/bin/bash # upperconv.sh # Converts a specified input file to uppercase. E_FILE_ACCESS=70 E_WRONG_ARGS=71 if [ ! -r &quot;$1&quot; ] # Is specified input file readable? then echo &quot;Can't read from input file!&quot; echo &quot;Usage: $0 input-file output-file&quot; exit $E_FILE_ACCESS fi # Will exit with same error #+ even if input file ($1) not specified (why?). if [ -z &quot;$2&quot; ] then echo &quot;Need to specify output file.&quot; echo &quot;Usage: $0 input-file output-file&quot; exit $E_WRONG_ARGS fi exec 4&lt;&amp;0 exec &lt; $1 # Will read from input file. exec 7&gt;&amp;1 exec &gt; $2 # Will write to output file. # Assumes output file writable (add check?). # ----------------------------------------------- cat - | tr a-z A-Z # Uppercase conversion. # ^^^^^ # Reads from stdin. # ^^^^^^^^^^ # Writes to stdout. # However, both stdin and stdout were redirected. # Note that the 'cat' can be omitted. # ----------------------------------------------- exec 1&gt;&amp;7 7&gt;&amp;- # Restore stout. exec 0&lt;&amp;4 4&lt;&amp;- # Restore stdin. # After restoration, the following line prints to stdout as expected. echo &quot;File \&quot;$1\&quot; written to \&quot;$2\&quot; as uppercase conversion.&quot; exit 0 I/O redirection is a clever way of avoiding the dreaded inaccessible variables within a subshell problem. Example 20-4. Avoiding a subshell #!/bin/bash # avoid-subshell.sh # Suggested by Matthew Walker. Lines=0 echo cat myfile.txt | while read line; do { echo $line (( Lines++ )); # Incremented values of this variable #+ inaccessible outside loop. # Subshell problem. } done echo &quot;Number of lines read = $Lines&quot; # 0 # Wrong! echo &quot;------------------------&quot; exec 3&lt;&gt; myfile.txt while read line &lt;&amp;3 do { echo &quot;$line&quot; (( Lines++ )); # Incremented values of this variable #+ accessible outside loop. # No subshell, no problem. } done exec 3&gt;&amp;- echo &quot;Number of lines read = $Lines&quot; # 8 echo exit 0 # Lines below not seen by script. $ cat myfile.txt Line 1. Line 2. Line 3. Line 4. Line 5. Line 6. Line 7. Line 8. 20.2. Redirecting Code Blocks Blocks of code, such as while, until, and for loops, even if/then test blocks can also incorporate redirection of stdin. Even a function may use this form of redirection (see Example 24-11). The &lt; operator at the end of the code block accomplishes this. Example 20-5. Redirected while loop #!/bin/bash # redir2.sh if [ -z &quot;$1&quot; ] then Filename=names.data # Default, if no filename specified. else Filename=$1 fi #+ Filename=${1:-names.data} # can replace the above test (parameter substitution). count=0 echo while [ &quot;$name&quot; != Smith ] # Why is variable $name in quotes? do read name # Reads from $Filename, rather than stdin. echo $name let &quot;count += 1&quot; done &lt;&quot;$Filename&quot; # Redirects stdin to file $Filename. # ^^^^^^^^^^^^ echo; echo &quot;$count names read&quot;; echo exit 0 # Note that in some older shell scripting languages, #+ the redirected loop would run as a subshell. # Therefore, $count would return 0, the initialized value outside the loop. # Bash and ksh avoid starting a subshell *whenever possible*, #+ so that this script, for example, runs correctly. # (Thanks to Heiner Steven for pointing this out.) # However . . . # Bash *can* sometimes start a subshell in a PIPED &quot;while-read&quot; loop, #+ as distinct from a REDIRECTED &quot;while&quot; loop. abc=hi echo -e &quot;1\n2\n3&quot; | while read l do abc=&quot;$l&quot; echo $abc done echo $abc # Thanks, Bruno de Oliveira Schneider, for demonstrating this #+ with the above snippet of code. # And, thanks, Brian Onn, for correcting an annotation error. Example 20-6. Alternate form of redirected while loop #!/bin/bash # This is an alternate form of the preceding script. # Suggested by Heiner Steven #+ as a workaround in those situations when a redirect loop #+ runs as a subshell, and therefore variables inside the loop # +do not keep their values upon loop termination. if [ -z &quot;$1&quot; ] then Filename=names.data # Default, if no filename specified. else Filename=$1 fi exec 3&lt;&amp;0 # Save stdin to file descriptor 3. exec 0&lt;&quot;$Filename&quot; # Redirect standard input. count=0 echo while [ &quot;$name&quot; != Smith ] do read name # Reads from redirected stdin ($Filename). echo $name let &quot;count += 1&quot; done # Loop reads from file $Filename #+ because of line 20. # The original version of this script terminated the &quot;while&quot; loop with #+ done &lt;&quot;$Filename&quot; # Exercise: # Why is this unnecessary? exec 0&lt;&amp;3 # Restore old stdin. exec 3&lt;&amp;- # Close temporary fd 3. echo; echo &quot;$count names read&quot;; echo exit 0 Example 20-7. Redirected until loop #!/bin/bash # Same as previous example, but with &quot;until&quot; loop. if [ -z &quot;$1&quot; ] then Filename=names.data # Default, if no filename specified. else Filename=$1 fi # while [ &quot;$name&quot; != Smith ] until [ &quot;$name&quot; = Smith ] # Change != to =. do read name # Reads from $Filename, rather than stdin. echo $name done &lt;&quot;$Filename&quot; # Redirects stdin to file $Filename. # ^^^^^^^^^^^^ # Same results as with &quot;while&quot; loop in previous example. exit 0 Example 20-8. Redirected for loop #!/bin/bash if [ -z &quot;$1&quot; ] then Filename=names.data # Default, if no filename specified. else Filename=$1 fi line_count=`wc $Filename | awk '{ print $1 }'` # Number of lines in target file. # # Very contrived and kludgy, nevertheless shows that #+ it's possible to redirect stdin within a &quot;for&quot; loop... #+ if you're clever enough. # # More concise is line_count=$(wc -l &lt; &quot;$Filename&quot;) for name in `seq $line_count` # Recall that &quot;seq&quot; prints sequence of numbers. # while [ &quot;$name&quot; != Smith ] -- more complicated than a &quot;while&quot; loop -- do read name # Reads from $Filename, rather than stdin. echo $name if [ &quot;$name&quot; = Smith ] # Need all this extra baggage here. then break fi done &lt;&quot;$Filename&quot; # Redirects stdin to file $Filename. # ^^^^^^^^^^^^ exit 0 We can modify the previous example to also redirect the output of the loop. Example 20-9. Redirected for loop (both stdin and stdout redirected) #!/bin/bash if [ -z &quot;$1&quot; ] then Filename=names.data # Default, if no filename specified. else Filename=$1 fi Savefile=$Filename.new # Filename to save results in. FinalName=Jonah # Name to terminate &quot;read&quot; on. line_count=`wc $Filename | awk '{ print $1 }'` # Number of lines in target file. for name in `seq $line_count` do read name echo &quot;$name&quot; if [ &quot;$name&quot; = &quot;$FinalName&quot; ] then break fi done &lt; &quot;$Filename&quot; &gt; &quot;$Savefile&quot; # Redirects stdin to file $Filename, # ^^^^^^^^^^^^^^^^^^^^^^^^^^^ and saves it to backup file. exit 0 Example 20-10. Redirected if/then test #!/bin/bash if [ -z &quot;$1&quot; ] then Filename=names.data # Default, if no filename specified. else Filename=$1 fi TRUE=1 if [ &quot;$TRUE&quot; ] # if true and if : also work. then read name echo $name fi &lt;&quot;$Filename&quot; # ^^^^^^^^^^^^ # Reads only first line of file. # An &quot;if/then&quot; test has no way of iterating unless embedded in a loop. exit 0 Example 20-11. Data file names.data for above examples Aristotle Arrhenius Belisarius Capablanca Dickens Euler Goethe Hegel Jonah Laplace Maroczy Purcell Schmidt Schopenhauer Semmelweiss Smith Steinmetz Tukhashevsky Turing Venn Warshawski Znosko-Borowski # This is a data file for #+ &quot;redir2.sh&quot;, &quot;redir3.sh&quot;, &quot;redir4.sh&quot;, &quot;redir4a.sh&quot;, &quot;redir5.sh&quot;. Redirecting the stdout of a code block has the effect of saving its output to a file. See Example 3-2. Here documents are a special case of redirected code blocks. That being the case, it should be possible to feed the output of a here document into the stdin for a while loop. # This example by Albert Siersema # Used with permission (thanks!). function doesOutput() # Could be an external command too, of course. # Here we show you can use a function as well. { ls -al *.jpg | awk '{print $5,$9}' } nr=0 # We want the while loop to be able to manipulate these and totalSize=0 #+ to be able to see the changes after the 'while' finished. while read fileSize fileName ; do echo &quot;$fileName is $fileSize bytes&quot; let nr++ totalSize=$((totalSize+fileSize)) # Or: &quot;let totalSize+=fileSize&quot; done&lt;&lt;EOF $(doesOutput) EOF echo &quot;$nr files totaling $totalSize bytes&quot; 20.3. Applications Clever use of I/O redirection permits parsing and stitching together snippets of command output (see Example 15-7). This permits generating report and log files. Example 20-12. Logging events #!/bin/bash # logevents.sh # Author: Stephane Chazelas. # Used in ABS Guide with permission. # Event logging to a file. # Must be run as root (for write access in /var/log). ROOT_UID=0 # Only users with $UID 0 have root privileges. E_NOTROOT=67 # Non-root exit error. if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo &quot;Must be root to run this script.&quot; exit $E_NOTROOT fi FD_DEBUG1=3 FD_DEBUG2=4 FD_DEBUG3=5 # === Uncomment one of the two lines below to activate script. === # LOG_EVENTS=1 # LOG_VARS=1 log() # Writes time and date to log file. { echo &quot;$(date) $*&quot; &gt;&amp;7 # This *appends* the date to the file. # ^^^^^^^ command substitution # See below. } case $LOG_LEVEL in 1) exec 3&gt;&amp;2 4&gt; /dev/null 5&gt; /dev/null;; 2) exec 3&gt;&amp;2 4&gt;&amp;2 5&gt; /dev/null;; 3) exec 3&gt;&amp;2 4&gt;&amp;2 5&gt;&amp;2;; *) exec 3&gt; /dev/null 4&gt; /dev/null 5&gt; /dev/null;; esac FD_LOGVARS=6 if [[ $LOG_VARS ]] then exec 6&gt;&gt; /var/log/vars.log else exec 6&gt; /dev/null # Bury output. fi FD_LOGEVENTS=7 if [[ $LOG_EVENTS ]] then # exec 7 &gt;(exec gawk '{print strftime(), $0}' &gt;&gt; /var/log/event.log) # Above line fails in versions of Bash more recent than 2.04. Why? exec 7&gt;&gt; /var/log/event.log # Append to &quot;event.log&quot;. log # Write time and date. else exec 7&gt; /dev/null # Bury output. fi echo &quot;DEBUG3: beginning&quot; &gt;&amp;${FD_DEBUG3} ls -l &gt;&amp;5 2&gt;&amp;4 # command1 &gt;&amp;5 2&gt;&amp;4 echo &quot;Done&quot; # command2 echo &quot;sending mail&quot; &gt;&amp;${FD_LOGEVENTS} # Writes &quot;sending mail&quot; to file descriptor #7. exit 0 Chapter 21. Subshells Running a shell script launches a new process, a subshell. Definition: A subshell is a child process launched by a shell (or shell script). A subshell is a separate instance of the command processor -- the shell that gives you the prompt at the console or in an xterm window. Just as your commands are interpreted at the command-line prompt, similarly does a script batch-process a list of commands. Each shell script running is, in effect, a subprocess (child process) of the parent shell. A shell script can itself launch subprocesses. These subshells let the script do parallel processing, in effect executing multiple subtasks simultaneously. #!/bin/bash # subshell-test.sh ( # Inside parentheses, and therefore a subshell . . . while [ 1 ] # Endless loop. do echo &quot;Subshell running . . .&quot; done ) # Script will run forever, #+ or at least until terminated by a Ctl-C. exit $? # End of script (but will never get here). Now, run the script: sh subshell-test.sh And, while the script is running, from a different xterm: ps -ef | grep subshell-test.sh UID PID PPID C STIME TTY TIME CMD 500 2698 2502 0 14:26 pts/4 00:00:00 sh subshell-test.sh 500 2699 2698 21 14:26 pts/4 00:00:24 sh subshell-test.sh ^^^^ Analysis: PID 2698, the script, launched PID 2699, the subshell. Note: The &quot;UID ...&quot; line would be filtered out by the &quot;grep&quot; command, but is shown here for illustrative purposes. In general, an external command in a script forks off a subprocess, [107] whereas a Bash builtin does not. For this reason, builtins execute more quickly and use fewer system resources than their external command equivalents. Command List within Parentheses ( command1; command2; command3; ... ) A command list embedded between parentheses runs as a subshell. Variables in a subshell are not visible outside the block of code in the subshell. They are not accessible to the parent process, to the shell that launched the subshell. These are, in effect, variables local to the child process. Example 21-1. Variable scope in a subshell #!/bin/bash # subshell.sh echo echo &quot;We are outside the subshell.&quot; echo &quot;Subshell level OUTSIDE subshell = $BASH_SUBSHELL&quot; # Bash, version 3, adds the new $BASH_SUBSHELL variable. echo; echo outer_variable=Outer global_variable= # Define global variable for &quot;storage&quot; of #+ value of subshell variable. ( echo &quot;We are inside the subshell.&quot; echo &quot;Subshell level INSIDE subshell = $BASH_SUBSHELL&quot; inner_variable=Inner echo &quot;From inside subshell, \&quot;inner_variable\&quot; = $inner_variable&quot; echo &quot;From inside subshell, \&quot;outer\&quot; = $outer_variable&quot; global_variable=&quot;$inner_variable&quot; # Will this allow &quot;exporting&quot; #+ a subshell variable? ) echo; echo echo &quot;We are outside the subshell.&quot; echo &quot;Subshell level OUTSIDE subshell = $BASH_SUBSHELL&quot; echo if [ -z &quot;$inner_variable&quot; ] then echo &quot;inner_variable undefined in main body of shell&quot; else echo &quot;inner_variable defined in main body of shell&quot; fi echo &quot;From main body of shell, \&quot;inner_variable\&quot; = $inner_variable&quot; # $inner_variable will show as blank (uninitialized) #+ because variables defined in a subshell are &quot;local variables&quot;. # Is there a remedy for this? echo &quot;global_variable = &quot;$global_variable&quot;&quot; # Why doesn't this work? echo # ======================================================================= # Additionally ... echo &quot;-----------------&quot;; echo var=41 # Global variable. ( let &quot;var+=1&quot;; echo &quot;\$var INSIDE subshell = $var&quot; ) # 42 echo &quot;\$var OUTSIDE subshell = $var&quot; # 41 # Variable operations inside a subshell, even to a GLOBAL variable #+ do not affect the value of the variable outside the subshell! exit 0 # Question: # -------- # Once having exited a subshell, #+ is there any way to reenter that very same subshell #+ to modify or access the subshell variables? See also $BASHPID and Example 34-2. Definition: The scope of a variable is the context in which it has meaning, in which it has a value that can be referenced. For example, the scope of a local variable lies only within the function, block of code, or subshell within which it is defined, while the scope of a global variable is the entire script in which it appears. Note While the $BASH_SUBSHELL internal variable indicates the nesting level of a subshell, the $SHLVL variable shows no change within a subshell. echo &quot; \$BASH_SUBSHELL outside subshell = $BASH_SUBSHELL&quot; # 0 ( echo &quot; \$BASH_SUBSHELL inside subshell = $BASH_SUBSHELL&quot; ) # 1 ( ( echo &quot; \$BASH_SUBSHELL inside nested subshell = $BASH_SUBSHELL&quot; ) ) # 2 # ^ ^ *** nested *** ^ ^ echo echo &quot; \$SHLVL outside subshell = $SHLVL&quot; # 3 ( echo &quot; \$SHLVL inside subshell = $SHLVL&quot; ) # 3 (No change!) Directory changes made in a subshell do not carry over to the parent shell. Example 21-2. List User Profiles #!/bin/bash # allprofs.sh: Print all user profiles. # This script written by Heiner Steven, and modified by the document author. FILE=.bashrc # File containing user profile, #+ was &quot;.profile&quot; in original script. for home in `awk -F: '{print $6}' /etc/passwd` do [ -d &quot;$home&quot; ] || continue # If no home directory, go to next. [ -r &quot;$home&quot; ] || continue # If not readable, go to next. (cd $home; [ -e $FILE ] &amp;&amp; less $FILE) done # When script terminates, there is no need to 'cd' back to original directory, #+ because 'cd $home' takes place in a subshell. exit 0 A subshell may be used to set up a &quot;dedicated environment&quot; for a command group. COMMAND1 COMMAND2 COMMAND3 ( IFS=: PATH=/bin unset TERMINFO set -C shift 5 COMMAND4 COMMAND5 exit 3 # Only exits the subshell! ) # The parent shell has not been affected, and the environment is preserved. COMMAND6 COMMAND7 As seen here, the exit command only terminates the subshell in which it is running, not the parent shell or script. One application of such a &quot;dedicated environment&quot; is testing whether a variable is defined. if (set -u; : $variable) 2&gt; /dev/null then echo &quot;Variable is set.&quot; fi # Variable has been set in current script, #+ or is an an internal Bash variable, #+ or is present in environment (has been exported). # Could also be written [[ ${variable-x} != x || ${variable-y} != y ]] # or [[ ${variable-x} != x$variable ]] # or [[ ${variable+x} = x ]] # or [[ ${variable-x} != x ]] Another application is checking for a lock file: if (set -C; : &gt; lock_file) 2&gt; /dev/null then : # lock_file didn't exist: no user running the script else echo &quot;Another user is already running that script.&quot; exit 65 fi # Code snippet by Stéphane Chazelas, #+ with modifications by Paulo Marcel Coelho Aragao. + Processes may execute in parallel within different subshells. This permits breaking a complex task into subcomponents processed concurrently. Example 21-3. Running parallel processes in subshells (cat list1 list2 list3 | sort | uniq &gt; list123) &amp; (cat list4 list5 list6 | sort | uniq &gt; list456) &amp; # Merges and sorts both sets of lists simultaneously. # Running in background ensures parallel execution. # # Same effect as # cat list1 list2 list3 | sort | uniq &gt; list123 &amp; # cat list4 list5 list6 | sort | uniq &gt; list456 &amp; wait # Don't execute the next command until subshells finish. diff list123 list456 Redirecting I/O to a subshell uses the &quot;|&quot; pipe operator, as in ls -al | (command). Note A code block between curly brackets does not launch a subshell. { command1; command2; command3; . . . commandN; } var1=23 echo &quot;$var1&quot; # 23 { var1=76; } echo &quot;$var1&quot; # 76 Chapter 22. Restricted Shells Disabled commands in restricted shells . Running a script or portion of a script in restricted mode disables certain commands that would otherwise be available. This is a security measure intended to limit the privileges of the script user and to minimize possible damage from running the script. The following commands and actions are disabled: Using cd to change the working directory. Changing the values of the $PATH, $SHELL, $BASH_ENV, or $ENV environmental variables. Reading or changing the $SHELLOPTS, shell environmental options. Output redirection. Invoking commands containing one or more /'s. Invoking exec to substitute a different process for the shell. Various other commands that would enable monkeying with or attempting to subvert the script for an unintended purpose. Getting out of restricted mode within the script. Example 22-1. Running a script in restricted mode #!/bin/bash # Starting the script with &quot;#!/bin/bash -r&quot; #+ runs entire script in restricted mode. echo echo &quot;Changing directory.&quot; cd /usr/local echo &quot;Now in `pwd`&quot; echo &quot;Coming back home.&quot; cd echo &quot;Now in `pwd`&quot; echo # Everything up to here in normal, unrestricted mode. set -r # set --restricted has same effect. echo &quot;==&gt; Now in restricted mode. &lt;==&quot; echo echo echo &quot;Attempting directory change in restricted mode.&quot; cd .. echo &quot;Still in `pwd`&quot; echo echo echo &quot;\$SHELL = $SHELL&quot; echo &quot;Attempting to change shell in restricted mode.&quot; SHELL=&quot;/bin/ash&quot; echo echo &quot;\$SHELL= $SHELL&quot; echo echo echo &quot;Attempting to redirect output in restricted mode.&quot; ls -l /usr/bin &gt; bin.files ls -l bin.files # Try to list attempted file creation effort. echo exit 0 Chapter 23. Process Substitution Piping the stdout of a command into the stdin of another is a powerful technique. But, what if you need to pipe the stdout of multiple commands? This is where process substitution comes in. Process substitution feeds the output of a process (or processes) into the stdin of another process. Template Command list enclosed within parentheses &gt;(command_list) &lt;(command_list) Process substitution uses /dev/fd/&lt;n&gt; files to send the results of the process(es) within parentheses to another process. [108] Caution There is no space between the the &quot;&lt;&quot; or &quot;&gt;&quot; and the parentheses. Space there would give an error message. bash$ echo &gt;(true) /dev/fd/63 bash$ echo &lt;(true) /dev/fd/63 bash$ echo &gt;(true) &lt;(true) /dev/fd/63 /dev/fd/62 bash$ wc &lt;(cat /usr/share/dict/linux.words) 483523 483523 4992010 /dev/fd/63 bash$ grep script /usr/share/dict/linux.words | wc 262 262 3601 bash$ wc &lt;(grep script /usr/share/dict/linux.words) 262 262 3601 /dev/fd/63 Note Bash creates a pipe with two file descriptors, --fIn and fOut--. The stdin of true connects to fOut (dup2(fOut, 0)), then Bash passes a /dev/fd/fIn argument to echo. On systems lacking /dev/fd/&lt;n&gt; files, Bash may use temporary files. (Thanks, S.C.) Process substitution can compare the output of two different commands, or even the output of different options to the same command. bash$ comm &lt;(ls -l) &lt;(ls -al) total 12 -rw-rw-r-- 1 bozo bozo 78 Mar 10 12:58 File0 -rw-rw-r-- 1 bozo bozo 42 Mar 10 12:58 File2 -rw-rw-r-- 1 bozo bozo 103 Mar 10 12:58 t2.sh total 20 drwxrwxrwx 2 bozo bozo 4096 Mar 10 18:10 . drwx------ 72 bozo bozo 4096 Mar 10 17:58 .. -rw-rw-r-- 1 bozo bozo 78 Mar 10 12:58 File0 -rw-rw-r-- 1 bozo bozo 42 Mar 10 12:58 File2 -rw-rw-r-- 1 bozo bozo 103 Mar 10 12:58 t2.sh Process substitution can compare the contents of two directories -- to see which filenames are in one, but not the other. diff &lt;(ls $first_directory) &lt;(ls $second_directory) Some other usages and uses of process substitution: read -a list &lt; &lt;( od -Ad -w24 -t u2 /dev/urandom ) # Read a list of random numbers from /dev/urandom, #+ process with &quot;od&quot; #+ and feed into stdin of &quot;read&quot; . . . # From &quot;insertion-sort.bash&quot; example script. # Courtesy of JuanJo Ciarlante. PORT=6881 # bittorrent # Scan the port to make sure nothing nefarious is going on. netcat -l $PORT | tee&gt;(md5sum -&gt;mydata-orig.md5) | gzip | tee&gt;(md5sum - | sed 's/-$/mydata.lz2/'&gt;mydata-gz.md5)&gt;mydata.gz # Check the decompression: gzip -d&lt;mydata.gz | md5sum -c mydata-orig.md5) # The MD5sum of the original checks stdin and detects compression issues. # Bill Davidsen contributed this example #+ (with light edits by the ABS Guide author). cat &lt;(ls -l) # Same as ls -l | cat sort -k 9 &lt;(ls -l /bin) &lt;(ls -l /usr/bin) &lt;(ls -l /usr/X11R6/bin) # Lists all the files in the 3 main 'bin' directories, and sorts by filename. # Note that three (count 'em) distinct commands are fed to 'sort'. diff &lt;(command1) &lt;(command2) # Gives difference in command output. tar cf &gt;(bzip2 -c &gt; file.tar.bz2) $directory_name # Calls &quot;tar cf /dev/fd/?? $directory_name&quot;, and &quot;bzip2 -c &gt; file.tar.bz2&quot;. # # Because of the /dev/fd/&lt;n&gt; system feature, # the pipe between both commands does not need to be named. # # This can be emulated. # bzip2 -c &lt; pipe &gt; file.tar.bz2&amp; tar cf pipe $directory_name rm pipe # or exec 3&gt;&amp;1 tar cf /dev/fd/4 $directory_name 4&gt;&amp;1 &gt;&amp;3 3&gt;&amp;- | bzip2 -c &gt; file.tar.bz2 3&gt;&amp;- exec 3&gt;&amp;- # Thanks, Stéphane Chazelas Here is a method of circumventing the problem of an echo piped to a while-read loop running in a subshell. Example 23-1. Code block redirection without forking #!/bin/bash # wr-ps.bash: while-read loop with process substitution. # This example contributed by Tomas Pospisek. # (Heavily edited by the ABS Guide author.) echo echo &quot;random input&quot; | while read i do global=3D&quot;: Not available outside the loop.&quot; # ... because it runs in a subshell. done echo &quot;\$global (from outside the subprocess) = $global&quot; # $global (from outside the subprocess) = echo; echo &quot;--&quot;; echo while read i do echo $i global=3D&quot;: Available outside the loop.&quot; # ... because it does NOT run in a subshell. done &lt; &lt;( echo &quot;random input&quot; ) # ^ ^ echo &quot;\$global (using process substitution) = $global&quot; # Random input # $global (using process substitution) = 3D: Available outside the loop. echo; echo &quot;##########&quot;; echo # And likewise . . . declare -a inloop index=0 cat $0 | while read line do inloop[$index]=&quot;$line&quot; ((index++)) # It runs in a subshell, so ... done echo &quot;OUTPUT = &quot; echo ${inloop[*]} # ... nothing echoes. echo; echo &quot;--&quot;; echo declare -a outloop index=0 while read line do outloop[$index]=&quot;$line&quot; ((index++)) # It does NOT run in a subshell, so ... done &lt; &lt;( cat $0 ) echo &quot;OUTPUT = &quot; echo ${outloop[*]} # ... the entire script echoes. exit $? This is a similar example. Example 23-2. Redirecting the output of process substitution into a loop. #!/bin/bash # psub.bash # As inspired by Diego Molina (thanks!). declare -a array0 while read do array0[${#array0[@]}]=&quot;$REPLY&quot; done &lt; &lt;( sed -e 's/bash/CRASH-BANG!/' $0 | grep bin | awk '{print $1}' ) # Sets the default 'read' variable, $REPLY, by process substitution, #+ then copies it into an array. echo &quot;${array0[@]}&quot; exit $? # ====================================== # bash psub.bash #!/bin/CRASH-BANG! done #!/bin/CRASH-BANG! A reader sent in the following interesting example of process substitution. # Script fragment taken from SuSE distribution: # --------------------------------------------------------------# while read des what mask iface; do # Some commands ... done &lt; &lt;(route -n) # ^ ^ First &lt; is redirection, second is process substitution. # To test it, let's make it do something. while read des what mask iface; do echo $des $what $mask $iface done &lt; &lt;(route -n) # Output: # Kernel IP routing table # Destination Gateway Genmask Flags Metric Ref Use Iface # 127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo # --------------------------------------------------------------# # As Stéphane Chazelas points out, #+ an easier-to-understand equivalent is: route -n | while read des what mask iface; do # Variables set from output of pipe. echo $des $what $mask $iface done # This yields the same output as above. # However, as Ulrich Gayer points out . . . #+ this simplified equivalent uses a subshell for the while loop, #+ and therefore the variables disappear when the pipe terminates. # --------------------------------------------------------------# # However, Filip Moritz comments that there is a subtle difference #+ between the above two examples, as the following shows. ( route -n | while read x; do ((y++)); done echo $y # $y is still unset while read x; do ((y++)); done &lt; &lt;(route -n) echo $y # $y has the number of lines of output of route -n ) More generally spoken ( : | x=x # seems to start a subshell like : | ( x=x ) # while x=x &lt; &lt;(:) # does not ) # This is useful, when parsing csv and the like. # That is, in effect, what the original SuSE code fragment does. Chapter 24. Functions Like &quot;real&quot; programming languages, Bash has functions, though in a somewhat limited implementation. A function is a subroutine, a code block that implements a set of operations, a &quot;black box&quot; that performs a specified task. Wherever there is repetitive code, when a task repeats with only slight variations in procedure, then consider using a function. function function_name { command... } or function_name () { command... } This second form will cheer the hearts of C programmers (and is more portable). As in C, the function's opening bracket may optionally appear on the second line. function_name () { command... } Note A function may be &quot;compacted&quot; into a single line. fun () { echo &quot;This is a function&quot;; echo; } # ^ ^ In this case, however, a semicolon must follow the final command in the function. fun () { echo &quot;This is a function&quot;; echo } # Error! # ^ fun2 () { echo &quot;Even a single-command function? Yes!&quot;; } # ^ Functions are called, triggered, simply by invoking their names. A function call is equivalent to a command. Example 24-1. Simple functions #!/bin/bash # ex59.sh: Exercising functions (simple). JUST_A_SECOND=1 funky () { # This is about as simple as functions get. echo &quot;This is a funky function.&quot; echo &quot;Now exiting funky function.&quot; } # Function declaration must precede call. fun () { # A somewhat more complex function. i=0 REPEATS=30 echo echo &quot;And now the fun really begins.&quot; echo sleep $JUST_A_SECOND # Hey, wait a second! while [ $i -lt $REPEATS ] do echo &quot;----------FUNCTIONS----------&gt;&quot; echo &quot;&lt;------------ARE-------------&quot; echo &quot;&lt;------------FUN------------&gt;&quot; echo let &quot;i+=1&quot; done } # Now, call the functions. funky fun exit $? The function definition must precede the first call to it. There is no method of &quot;declaring&quot; the function, as, for example, in C. f1 # Will give an error message, since function &quot;f1&quot; not yet defined. declare -f f1 # This doesn't help either. f1 # Still an error message. # However... f1 () { echo &quot;Calling function \&quot;f2\&quot; from within function \&quot;f1\&quot;.&quot; f2 } f2 () { echo &quot;Function \&quot;f2\&quot;.&quot; } f1 # Function &quot;f2&quot; is not actually called until this point, #+ although it is referenced before its definition. # This is permissible. # Thanks, S.C. Note Functions may not be empty! #!/bin/bash # empty-function.sh empty () { } exit 0 # Will not exit here! # $ sh empty-function.sh # empty-function.sh: line 6: syntax error near unexpected token `}' # empty-function.sh: line 6: `}' # $ echo $? # 2 # Note that a function containing only comments is empty. func () { # Comment 1. # Comment 2. # This is still an empty function. # Thank you, Mark Bova, for pointing this out. } # Results in same error message as above. # However ... not_quite_empty () { illegal_command } # A script containing this function will *not* bomb #+ as long as the function is not called. not_empty () { : } # Contains a : (null command), and this is okay. # Thank you, Dominick Geyer and Thiemo Kellner. It is even possible to nest a function within another function, although this is not very useful. f1 () { f2 () # nested { echo &quot;Function \&quot;f2\&quot;, inside \&quot;f1\&quot;.&quot; } } f2 # Gives an error message. # Even a preceding &quot;declare -f f2&quot; wouldn't help. echo f1 # Does nothing, since calling &quot;f1&quot; does not automatically call &quot;f2&quot;. f2 # Now, it's all right to call &quot;f2&quot;, #+ since its definition has been made visible by calling &quot;f1&quot;. # Thanks, S.C. Function declarations can appear in unlikely places, even where a command would otherwise go. ls -l | foo() { echo &quot;foo&quot;; } # Permissible, but useless. if [ &quot;$USER&quot; = bozo ] then bozo_greet () # Function definition embedded in an if/then construct. { echo &quot;Hello, Bozo.&quot; } fi bozo_greet # Works only for Bozo, and other users get an error. # Something like this might be useful in some contexts. NO_EXIT=1 # Will enable function definition below. [[ $NO_EXIT -eq 1 ]] &amp;&amp; exit() { true; } # Function definition in an &quot;and-list&quot;. # If $NO_EXIT is 1, declares &quot;exit ()&quot;. # This disables the &quot;exit&quot; builtin by aliasing it to &quot;true&quot;. exit # Invokes &quot;exit ()&quot; function, not &quot;exit&quot; builtin. # Or, similarly: filename=file1 [ -f &quot;$filename&quot; ] &amp;&amp; foo () { rm -f &quot;$filename&quot;; echo &quot;File &quot;$filename&quot; deleted.&quot;; } || foo () { echo &quot;File &quot;$filename&quot; not found.&quot;; touch bar; } foo # Thanks, S.C. and Christopher Head Function names can take strange forms. _(){ for i in {1..10}; do echo -n &quot;$FUNCNAME&quot;; done; echo; } # ^^^ No space between function name and parentheses. # This doesn't always work. Why not? # Now, let's invoke the function. _ # __________ # ^^^^^^^^^^ 10 underscores (10 x function name)! # A &quot;naked&quot; underscore is an acceptable function name. # In fact, a colon is likewise an acceptable function name. :(){ echo &quot;:&quot;; }; : # Of what use is this? # It's a devious way to obfuscate the code in a script. See also Example A-56 Note What happens when different versions of the same function appear in a script? # As Yan Chen points out, # when a function is defined multiple times, # the final version is what is invoked. # This is not, however, particularly useful. func () { echo &quot;First version of func ().&quot; } func () { echo &quot;Second version of func ().&quot; } func # Second version of func (). exit $? # It is even possible to use functions to override #+ or preempt system commands. # Of course, this is *not* advisable. 24.1. Complex Functions and Function Complexities Functions may process arguments passed to them and return an exit status to the script for further processing. function_name $arg1 $arg2 The function refers to the passed arguments by position (as if they were positional parameters), that is, $1, $2, and so forth. Example 24-2. Function Taking Parameters #!/bin/bash # Functions and parameters DEFAULT=default # Default param value. func2 () { if [ -z &quot;$1&quot; ] # Is parameter #1 zero length? then echo &quot;-Parameter #1 is zero length.-&quot; # Or no parameter passed. else echo &quot;-Parameter #1 is \&quot;$1\&quot;.-&quot; fi variable=${1-$DEFAULT} # What does echo &quot;variable = $variable&quot; #+ parameter substitution show? # --------------------------- # It distinguishes between #+ no param and a null param. if [ &quot;$2&quot; ] then echo &quot;-Parameter #2 is \&quot;$2\&quot;.-&quot; fi return 0 } echo echo &quot;Nothing passed.&quot; func2 # Called with no params echo echo &quot;Zero-length parameter passed.&quot; func2 &quot;&quot; # Called with zero-length param echo echo &quot;Null parameter passed.&quot; func2 &quot;$uninitialized_param&quot; # Called with uninitialized param echo echo &quot;One parameter passed.&quot; func2 first # Called with one param echo echo &quot;Two parameters passed.&quot; func2 first second # Called with two params echo echo &quot;\&quot;\&quot; \&quot;second\&quot; passed.&quot; func2 &quot;&quot; second # Called with zero-length first parameter echo # and ASCII string as a second one. exit 0 Important The shift command works on arguments passed to functions (see Example 36-18). But, what about command-line arguments passed to the script? Does a function see them? Well, let's clear up the confusion. Example 24-3. Functions and command-line args passed to the script #!/bin/bash # func-cmdlinearg.sh # Call this script with a command-line argument, #+ something like $0 arg1. func () { echo &quot;$1&quot; # Echoes first arg passed to the function. } # Does a command-line arg qualify? echo &quot;First call to function: no arg passed.&quot; echo &quot;See if command-line arg is seen.&quot; func # No! Command-line arg not seen. echo &quot;============================================================&quot; echo echo &quot;Second call to function: command-line arg passed explicitly.&quot; func $1 # Now it's seen! exit 0 In contrast to certain other programming languages, shell scripts normally pass only value parameters to functions. Variable names (which are actually pointers), if passed as parameters to functions, will be treated as string literals. Functions interpret their arguments literally. Indirect variable references (see Example 37-2) provide a clumsy sort of mechanism for passing variable pointers to functions. Example 24-4. Passing an indirect reference to a function #!/bin/bash # ind-func.sh: Passing an indirect reference to a function. echo_var () { echo &quot;$1&quot; } message=Hello Hello=Goodbye echo_var &quot;$message&quot; # Hello # Now, let's pass an indirect reference to the function. echo_var &quot;${!message}&quot; # Goodbye echo &quot;-------------&quot; # What happens if we change the contents of &quot;hello&quot; variable? Hello=&quot;Hello, again!&quot; echo_var &quot;$message&quot; # Hello echo_var &quot;${!message}&quot; # Hello, again! exit 0 The next logical question is whether parameters can be dereferenced after being passed to a function. Example 24-5. Dereferencing a parameter passed to a function #!/bin/bash # dereference.sh # Dereferencing parameter passed to a function. # Script by Bruce W. Clare. dereference () { y=\$&quot;$1&quot; # Name of variable (not value!). echo $y # $Junk x=`eval &quot;expr \&quot;$y\&quot; &quot;` echo $1=$x eval &quot;$1=\&quot;Some Different Text \&quot;&quot; # Assign new value. } Junk=&quot;Some Text&quot; echo $Junk &quot;before&quot; # Some Text before dereference Junk echo $Junk &quot;after&quot; # Some Different Text after exit 0 Example 24-6. Again, dereferencing a parameter passed to a function #!/bin/bash # ref-params.sh: Dereferencing a parameter passed to a function. # (Complex Example) ITERATIONS=3 # How many times to get input. icount=1 my_read () { # Called with my_read varname, #+ outputs the previous value between brackets as the default value, #+ then asks for a new value. local local_var echo -n &quot;Enter a value &quot; eval 'echo -n &quot;[$'$1'] &quot;' # Previous value. # eval echo -n &quot;[\$$1] &quot; # Easier to understand, #+ but loses trailing space in user prompt. read local_var [ -n &quot;$local_var&quot; ] &amp;&amp; eval $1=\$local_var # &quot;And-list&quot;: if &quot;local_var&quot; then set &quot;$1&quot; to its value. } echo while [ &quot;$icount&quot; -le &quot;$ITERATIONS&quot; ] do my_read var echo &quot;Entry #$icount = $var&quot; let &quot;icount += 1&quot; echo done # Thanks to Stephane Chazelas for providing this instructive example. exit 0 Exit and Return exit status Functions return a value, called an exit status. This is analogous to the exit status returned by a command. The exit status may be explicitly specified by a return statement, otherwise it is the exit status of the last command in the function (0 if successful, and a non-zero error code if not). This exit status may be used in the script by referencing it as $?. This mechanism effectively permits script functions to have a &quot;return value&quot; similar to C functions. return Terminates a function. A return command [109] optionally takes an integer argument, which is returned to the calling script as the &quot;exit status&quot; of the function, and this exit status is assigned to the variable $?. Example 24-7. Maximum of two numbers #!/bin/bash # max.sh: Maximum of two integers. E_PARAM_ERR=250 # If less than 2 params passed to function. EQUAL=251 # Return value if both params equal. # Error values out of range of any #+ params that might be fed to the function. max2 () # Returns larger of two numbers. { # Note: numbers compared must be less than 250. if [ -z &quot;$2&quot; ] then return $E_PARAM_ERR fi if [ &quot;$1&quot; -eq &quot;$2&quot; ] then return $EQUAL else if [ &quot;$1&quot; -gt &quot;$2&quot; ] then return $1 else return $2 fi fi } max2 33 34 return_val=$? if [ &quot;$return_val&quot; -eq $E_PARAM_ERR ] then echo &quot;Need to pass two parameters to the function.&quot; elif [ &quot;$return_val&quot; -eq $EQUAL ] then echo &quot;The two numbers are equal.&quot; else echo &quot;The larger of the two numbers is $return_val.&quot; fi exit 0 # Exercise (easy): # --------------- # Convert this to an interactive script, #+ that is, have the script ask for input (two numbers). Tip For a function to return a string or array, use a dedicated variable. count_lines_in_etc_passwd() { [[ -r /etc/passwd ]] &amp;&amp; REPLY=$(echo $(wc -l &lt; /etc/passwd)) # If /etc/passwd is readable, set REPLY to line count. # Returns both a parameter value and status information. # The 'echo' seems unnecessary, but . . . #+ it removes excess whitespace from the output. } if count_lines_in_etc_passwd then echo &quot;There are $REPLY lines in /etc/passwd.&quot; else echo &quot;Cannot count lines in /etc/passwd.&quot; fi # Thanks, S.C. Example 24-8. Converting numbers to Roman numerals #!/bin/bash # Arabic number to Roman numeral conversion # Range: 0 - 200 # It's crude, but it works. # Extending the range and otherwise improving the script is left as an exercise. # Usage: roman number-to-convert LIMIT=200 E_ARG_ERR=65 E_OUT_OF_RANGE=66 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` number-to-convert&quot; exit $E_ARG_ERR fi num=$1 if [ &quot;$num&quot; -gt $LIMIT ] then echo &quot;Out of range!&quot; exit $E_OUT_OF_RANGE fi to_roman () # Must declare function before first call to it. { number=$1 factor=$2 rchar=$3 let &quot;remainder = number - factor&quot; while [ &quot;$remainder&quot; -ge 0 ] do echo -n $rchar let &quot;number -= factor&quot; let &quot;remainder = number - factor&quot; done return $number # Exercises: # --------- # 1) Explain how this function works. # Hint: division by successive subtraction. # 2) Extend to range of the function. # Hint: use &quot;echo&quot; and command-substitution capture. } to_roman $num 100 C num=$? to_roman $num 90 LXXXX num=$? to_roman $num 50 L num=$? to_roman $num 40 XL num=$? to_roman $num 10 X num=$? to_roman $num 9 IX num=$? to_roman $num 5 V num=$? to_roman $num 4 IV num=$? to_roman $num 1 I # Successive calls to conversion function! # Is this really necessary??? Can it be simplified? echo exit See also Example 11-29. Important The largest positive integer a function can return is 255. The return command is closely tied to the concept of exit status, which accounts for this particular limitation. Fortunately, there are various workarounds for those situations requiring a large integer return value from a function. Example 24-9. Testing large return values in a function #!/bin/bash # return-test.sh # The largest positive value a function can return is 255. return_test () # Returns whatever passed to it. { return $1 } return_test 27 # o.k. echo $? # Returns 27. return_test 255 # Still o.k. echo $? # Returns 255. return_test 257 # Error! echo $? # Returns 1 (return code for miscellaneous error). # ========================================================= return_test -151896 # Do large negative numbers work? echo $? # Will this return -151896? # No! It returns 168. # Version of Bash before 2.05b permitted #+ large negative integer return values. # It happened to be a useful feature. # Newer versions of Bash unfortunately plug this loophole. # This may break older scripts. # Caution! # ========================================================= exit 0 A workaround for obtaining large integer &quot;return values&quot; is to simply assign the &quot;return value&quot; to a global variable. Return_Val= # Global variable to hold oversize return value of function. alt_return_test () { fvar=$1 Return_Val=$fvar return # Returns 0 (success). } alt_return_test 1 echo $? # 0 echo &quot;return value = $Return_Val&quot; # 1 alt_return_test 256 echo &quot;return value = $Return_Val&quot; # 256 alt_return_test 257 echo &quot;return value = $Return_Val&quot; # 257 alt_return_test 25701 echo &quot;return value = $Return_Val&quot; #25701 A more elegant method is to have the function echo its &quot;return value to stdout,&quot; and then capture it by command substitution. See the discussion of this in Section 36.7. Example 24-10. Comparing two large integers #!/bin/bash # max2.sh: Maximum of two LARGE integers. # This is the previous &quot;max.sh&quot; example, #+ modified to permit comparing large integers. EQUAL=0 # Return value if both params equal. E_PARAM_ERR=-99999 # Not enough params passed to function. # ^^^^^^ Out of range of any params that might be passed. max2 () # &quot;Returns&quot; larger of two numbers. { if [ -z &quot;$2&quot; ] then echo $E_PARAM_ERR return fi if [ &quot;$1&quot; -eq &quot;$2&quot; ] then echo $EQUAL return else if [ &quot;$1&quot; -gt &quot;$2&quot; ] then retval=$1 else retval=$2 fi fi echo $retval # Echoes (to stdout), rather than returning value. # Why? } return_val=$(max2 33001 33997) # ^^^^ Function name # ^^^^^ ^^^^^ Params passed # This is actually a form of command substitution: #+ treating a function as if it were a command, #+ and assigning the stdout of the function to the variable &quot;return_val.&quot; # ========================= OUTPUT ======================== if [ &quot;$return_val&quot; -eq &quot;$E_PARAM_ERR&quot; ] then echo &quot;Error in parameters passed to comparison function!&quot; elif [ &quot;$return_val&quot; -eq &quot;$EQUAL&quot; ] then echo &quot;The two numbers are equal.&quot; else echo &quot;The larger of the two numbers is $return_val.&quot; fi # ========================================================= exit 0 # Exercises: # --------- # 1) Find a more elegant way of testing #+ the parameters passed to the function. # 2) Simplify the if/then structure at &quot;OUTPUT.&quot; # 3) Rewrite the script to take input from command-line parameters. Here is another example of capturing a function &quot;return value.&quot; Understanding it requires some knowledge of awk. month_length () # Takes month number as an argument. { # Returns number of days in month. monthD=&quot;31 28 31 30 31 30 31 31 30 31 30 31&quot; # Declare as local? echo &quot;$monthD&quot; | awk '{ print $'&quot;${1}&quot;' }' # Tricky. # ^^^^^^^^^ # Parameter passed to function ($1 -- month number), then to awk. # Awk sees this as &quot;print $1 . . . print $12&quot; (depending on month number) # Template for passing a parameter to embedded awk script: # $'&quot;${script_parameter}&quot;' # Here's a slightly simpler awk construct: # echo $monthD | awk -v month=$1 '{print $(month)}' # Uses the -v awk option, which assigns a variable value #+ prior to execution of the awk program block. # Thank you, Rich. # Needs error checking for correct parameter range (1-12) #+ and for February in leap year. } # ---------------------------------------------- # Usage example: month=4 # April, for example (4th month). days_in=$(month_length $month) echo $days_in # 30 # ---------------------------------------------- See also Example A-7 and Example A-37. Exercise: Using what we have just learned, extend the previous Roman numerals example to accept arbitrarily large input. Redirection Redirecting the stdin of a function A function is essentially a code block, which means its stdin can be redirected (as in Example 3-1). Example 24-11. Real name from username #!/bin/bash # realname.sh # # From username, gets &quot;real name&quot; from /etc/passwd. ARGCOUNT=1 # Expect one arg. E_WRONGARGS=85 file=/etc/passwd pattern=$1 if [ $# -ne &quot;$ARGCOUNT&quot; ] then echo &quot;Usage: `basename $0` USERNAME&quot; exit $E_WRONGARGS fi file_excerpt () # Scan file for pattern, { #+ then print relevant portion of line. while read line # &quot;while&quot; does not necessarily need [ condition ] do echo &quot;$line&quot; | grep $1 | awk -F&quot;:&quot; '{ print $5 }' # Have awk use &quot;:&quot; delimiter. done } &lt;$file # Redirect into function's stdin. file_excerpt $pattern # Yes, this entire script could be reduced to # grep PATTERN /etc/passwd | awk -F&quot;:&quot; '{ print $5 }' # or # awk -F: '/PATTERN/ {print $5}' # or # awk -F: '($1 == &quot;username&quot;) { print $5 }' # real name from username # However, it might not be as instructive. exit 0 There is an alternate, and perhaps less confusing method of redirecting a function's stdin. This involves redirecting the stdin to an embedded bracketed code block within the function. # Instead of: Function () { ... } &lt; file # Try this: Function () { { ... } &lt; file } # Similarly, Function () # This works. { { echo $* } | tr a b } Function () # This doesn't work. { echo $* } | tr a b # A nested code block is mandatory here. # Thanks, S.C. Note Emmanuel Rouat's sample bashrc file contains some instructive examples of functions. 24.2. Local Variables What makes a variable local? local variables A variable declared as local is one that is visible only within the block of code in which it appears. It has local scope. In a function, a local variable has meaning only within that function block. [110] Example 24-12. Local variable visibility #!/bin/bash # ex62.sh: Global and local variables inside a function. func () { local loc_var=23 # Declared as local variable. echo # Uses the 'local' builtin. echo &quot;\&quot;loc_var\&quot; in function = $loc_var&quot; global_var=999 # Not declared as local. # Therefore, defaults to global. echo &quot;\&quot;global_var\&quot; in function = $global_var&quot; } func # Now, to see if local variable &quot;loc_var&quot; exists outside the function. echo echo &quot;\&quot;loc_var\&quot; outside function = $loc_var&quot; # $loc_var outside function = # No, $loc_var not visible globally. echo &quot;\&quot;global_var\&quot; outside function = $global_var&quot; # $global_var outside function = 999 # $global_var is visible globally. echo exit 0 # In contrast to C, a Bash variable declared inside a function #+ is local ONLY if declared as such. Caution Before a function is called, all variables declared within the function are invisible outside the body of the function, not just those explicitly declared as local. #!/bin/bash func () { global_var=37 # Visible only within the function block #+ before the function has been called. } # END OF FUNCTION echo &quot;global_var = $global_var&quot; # global_var = # Function &quot;func&quot; has not yet been called, #+ so $global_var is not visible here. func echo &quot;global_var = $global_var&quot; # global_var = 37 # Has been set by function call. Note As Evgeniy Ivanov points out, when declaring and setting a local variable in a single command, apparently the order of operations is to first set the variable, and only afterwards restrict it to local scope. This is reflected in the return value. #!/bin/bash echo &quot;==OUTSIDE Function (global)==&quot; t=$(exit 1) echo $? # 1 # As expected. echo function0 () { echo &quot;==INSIDE Function==&quot; echo &quot;Global&quot; t0=$(exit 1) echo $? # 1 # As expected. echo echo &quot;Local declared &amp; assigned in same command.&quot; local t1=$(exit 1) echo $? # 0 # Unexpected! # Apparently, the variable assignment takes place before #+ the local declaration. #+ The return value is for the latter. echo echo &quot;Local declared, then assigned (separate commands).&quot; local t2 t2=$(exit 1) echo $? # 1 # As expected. } function0 24.2.1. Local variables and recursion. Recursion is an interesting and sometimes useful form of self-reference. Herbert Mayer defines it as &quot;. . . expressing an algorithm by using a simpler version of that same algorithm . . .&quot; Consider a definition defined in terms of itself, [111] an expression implicit in its own expression, [112] a snake swallowing its own tail, [113] or . . . a function that calls itself. [114] Example 24-13. Demonstration of a simple recursive function #!/bin/bash # recursion-demo.sh # Demonstration of recursion. RECURSIONS=9 # How many times to recurse. r_count=0 # Must be global. Why? recurse () { var=&quot;$1&quot; while [ &quot;$var&quot; -ge 0 ] do echo &quot;Recursion count = &quot;$r_count&quot; +-+ \$var = &quot;$var&quot;&quot; (( var-- )); (( r_count++ )) recurse &quot;$var&quot; # Function calls itself (recurses) done #+ until what condition is met? } recurse $RECURSIONS exit $? Example 24-14. Another simple demonstration #!/bin/bash # recursion-def.sh # A script that defines &quot;recursion&quot; in a rather graphic way. RECURSIONS=10 r_count=0 sp=&quot; &quot; define_recursion () { ((r_count++)) sp=&quot;$sp&quot;&quot; &quot; echo -n &quot;$sp&quot; echo &quot;\&quot;The act of recurring ... \&quot;&quot; # Per 1913 Webster's dictionary. while [ $r_count -le $RECURSIONS ] do define_recursion done } echo echo &quot;Recursion: &quot; define_recursion echo exit $? Local variables are a useful tool for writing recursive code, but this practice generally involves a great deal of computational overhead and is definitely not recommended in a shell script. [115] Example 24-15. Recursion, using a local variable #!/bin/bash # factorial # --------- # Does bash permit recursion? # Well, yes, but... # It's so slow that you gotta have rocks in your head to try it. MAX_ARG=5 E_WRONG_ARGS=85 E_RANGE_ERR=86 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` number&quot; exit $E_WRONG_ARGS fi if [ &quot;$1&quot; -gt $MAX_ARG ] then echo &quot;Out of range ($MAX_ARG is maximum).&quot; # Let's get real now. # If you want greater range than this, #+ rewrite it in a Real Programming Language. exit $E_RANGE_ERR fi fact () { local number=$1 # Variable &quot;number&quot; must be declared as local, #+ otherwise this doesn't work. if [ &quot;$number&quot; -eq 0 ] then factorial=1 # Factorial of 0 = 1. else let &quot;decrnum = number - 1&quot; fact $decrnum # Recursive function call (the function calls itself). let &quot;factorial = $number * $?&quot; fi return $factorial } fact $1 echo &quot;Factorial of $1 is $?.&quot; exit 0 Also see Example A-15 for an example of recursion in a script. Be aware that recursion is resource-intensive and executes slowly, and is therefore generally not appropriate in a script. 24.3. Recursion Without Local Variables A function may recursively call itself even without use of local variables. Example 24-16. The Fibonacci Sequence #!/bin/bash # fibo.sh : Fibonacci sequence (recursive) # Author: M. Cooper # License: GPL3 # ----------algorithm-------------- # Fibo(0) = 0 # Fibo(1) = 1 # else # Fibo(j) = Fibo(j-1) + Fibo(j-2) # --------------------------------- MAXTERM=15 # Number of terms (+1) to generate. MINIDX=2 # If idx is less than 2, then Fibo(idx) = idx. Fibonacci () { idx=$1 # Doesn't need to be local. Why not? if [ &quot;$idx&quot; -lt &quot;$MINIDX&quot; ] then echo &quot;$idx&quot; # First two terms are 0 1 ... see above. else (( --idx )) # j-1 term1=$( Fibonacci $idx ) # Fibo(j-1) (( --idx )) # j-2 term2=$( Fibonacci $idx ) # Fibo(j-2) echo $(( term1 + term2 )) fi # An ugly, ugly kludge. # The more elegant implementation of recursive fibo in C #+ is a straightforward translation of the algorithm in lines 7 - 10. } for i in $(seq 0 $MAXTERM) do # Calculate $MAXTERM+1 terms. FIBO=$(Fibonacci $i) echo -n &quot;$FIBO &quot; done # 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 # Takes a while, doesn't it? Recursion in a script is slow. echo exit 0 Example 24-17. The Towers of Hanoi #! /bin/bash # # The Towers Of Hanoi # Bash script # Copyright (C) 2000 Amit Singh. All Rights Reserved. # http://hanoi.kernelthread.com # # Tested under Bash version 2.05b.0(13)-release. # Also works under Bash version 3.x. # # Used in &quot;Advanced Bash Scripting Guide&quot; #+ with permission of script author. # Slightly modified and commented by ABS author. #=================================================================# # The Tower of Hanoi is a mathematical puzzle attributed to #+ Edouard Lucas, a nineteenth-century French mathematician. # # There are three vertical posts set in a base. # The first post has a set of annular rings stacked on it. # These rings are disks with a hole drilled out of the center, #+ so they can slip over the posts and rest flat. # The rings have different diameters, and they stack in ascending #+ order, according to size. # The smallest ring is on top, and the largest on the bottom. # # The task is to transfer the stack of rings #+ to one of the other posts. # You can move only one ring at a time to another post. # You are permitted to move rings back to the original post. # You may place a smaller ring atop a larger one, #+ but *not* vice versa. # Again, it is forbidden to place a larger ring atop a smaller one. # # For a small number of rings, only a few moves are required. #+ For each additional ring, #+ the required number of moves approximately doubles, #+ and the &quot;strategy&quot; becomes increasingly complicated. # # For more information, see http://hanoi.kernelthread.com #+ or pp. 186-92 of _The Armchair Universe_ by A.K. Dewdney. # # # ... ... ... # | | | | | | # _|_|_ | | | | # |_____| | | | | # |_______| | | | | # |_________| | | | | # |___________| | | | | # | | | | | | # .--------------------------------------------------------------. # |**************************************************************| # #1 #2 #3 # #=================================================================# E_NOPARAM=66 # No parameter passed to script. E_BADPARAM=67 # Illegal number of disks passed to script. Moves= # Global variable holding number of moves. # Modification to original script. dohanoi() { # Recursive function. case $1 in 0) ;; *) dohanoi &quot;$(($1-1))&quot; $2 $4 $3 echo move $2 &quot;--&gt;&quot; $3 ((Moves++)) # Modification to original script. dohanoi &quot;$(($1-1))&quot; $4 $3 $2 ;; esac } case $# in 1) case $(($1&gt;0)) in # Must have at least one disk. 1) # Nested case statement. dohanoi $1 1 3 2 echo &quot;Total moves = $Moves&quot; # 2^n - 1, where n = # of disks. exit 0; ;; *) echo &quot;$0: illegal value for number of disks&quot;; exit $E_BADPARAM; ;; esac ;; *) echo &quot;usage: $0 N&quot; echo &quot; Where \&quot;N\&quot; is the number of disks.&quot; exit $E_NOPARAM; ;; esac # Exercises: # --------- # 1) Would commands beyond this point ever be executed? # Why not? (Easy) # 2) Explain the workings of the workings of the &quot;dohanoi&quot; function. # (Difficult -- see the Dewdney reference, above.) Chapter 25. Aliases A Bash alias is essentially nothing more than a keyboard shortcut, an abbreviation, a means of avoiding typing a long command sequence. If, for example, we include alias lm=&quot;ls -l | more&quot; in the ~/.bashrc file, then each lm [116] typed at the command-line will automatically be replaced by a ls -l | more. This can save a great deal of typing at the command-line and avoid having to remember complex combinations of commands and options. Setting alias rm=&quot;rm -i&quot; (interactive mode delete) may save a good deal of grief, since it can prevent inadvertently deleting important files. In a script, aliases have very limited usefulness. It would be nice if aliases could assume some of the functionality of the C preprocessor, such as macro expansion, but unfortunately Bash does not expand arguments within the alias body. [117] Moreover, a script fails to expand an alias itself within &quot;compound constructs,&quot; such as if/then statements, loops, and functions. An added limitation is that an alias will not expand recursively. Almost invariably, whatever we would like an alias to do could be accomplished much more effectively with a function. Example 25-1. Aliases within a script #!/bin/bash # alias.sh shopt -s expand_aliases # Must set this option, else script will not expand aliases. # First, some fun. alias Jesse_James='echo &quot;\&quot;Alias Jesse James\&quot; was a 1959 comedy starring Bob Hope.&quot;' Jesse_James echo; echo; echo; alias ll=&quot;ls -l&quot; # May use either single (') or double (&quot;) quotes to define an alias. echo &quot;Trying aliased \&quot;ll\&quot;:&quot; ll /usr/X11R6/bin/mk* #* Alias works. echo directory=/usr/X11R6/bin/ prefix=mk* # See if wild card causes problems. echo &quot;Variables \&quot;directory\&quot; + \&quot;prefix\&quot; = $directory$prefix&quot; echo alias lll=&quot;ls -l $directory$prefix&quot; echo &quot;Trying aliased \&quot;lll\&quot;:&quot; lll # Long listing of all files in /usr/X11R6/bin stating with mk. # An alias can handle concatenated variables -- including wild card -- o.k. TRUE=1 echo if [ TRUE ] then alias rr=&quot;ls -l&quot; echo &quot;Trying aliased \&quot;rr\&quot; within if/then statement:&quot; rr /usr/X11R6/bin/mk* #* Error message results! # Aliases not expanded within compound statements. echo &quot;However, previously expanded alias still recognized:&quot; ll /usr/X11R6/bin/mk* fi echo count=0 while [ $count -lt 3 ] do alias rrr=&quot;ls -l&quot; echo &quot;Trying aliased \&quot;rrr\&quot; within \&quot;while\&quot; loop:&quot; rrr /usr/X11R6/bin/mk* #* Alias will not expand here either. # alias.sh: line 57: rrr: command not found let count+=1 done echo; echo alias xyz='cat $0' # Script lists itself. # Note strong quotes. xyz # This seems to work, #+ although the Bash documentation suggests that it shouldn't. # # However, as Steve Jacobson points out, #+ the &quot;$0&quot; parameter expands immediately upon declaration of the alias. exit 0 The unalias command removes a previously set alias. Example 25-2. unalias: Setting and unsetting an alias #!/bin/bash # unalias.sh shopt -s expand_aliases # Enables alias expansion. alias llm='ls -al | more' llm echo unalias llm # Unset alias. llm # Error message results, since 'llm' no longer recognized. exit 0 bash$ ./unalias.sh total 6 drwxrwxr-x 2 bozo bozo 3072 Feb 6 14:04 . drwxr-xr-x 40 bozo bozo 2048 Feb 6 14:04 .. -rwxr-xr-x 1 bozo bozo 199 Feb 6 14:04 unalias.sh ./unalias.sh: llm: command not found Chapter 26. List Constructs The and list and or list constructs provide a means of processing a number of commands consecutively. These can effectively replace complex nested if/then or even case statements. Chaining together commands and list command-1 &amp;&amp; command-2 &amp;&amp; command-3 &amp;&amp; ... command-n Each command executes in turn, provided that the previous command has given a return value of true (zero). At the first false (non-zero) return, the command chain terminates (the first command returning false is the last one to execute). An interesting use of a two-condition and list from an early version of YongYe's Tetris game script: equation() { # core algorithm used for doubling and halving the coordinates [[ ${cdx} ]] &amp;&amp; ((y=cy+(ccy-cdy)${2}2)) eval ${1}+=\&quot;${x} ${y} \&quot; } Example 26-1. Using an and list to test for command-line arguments #!/bin/bash # and list if [ ! -z &quot;$1&quot; ] &amp;&amp; echo &quot;Argument #1 = $1&quot; &amp;&amp; [ ! -z &quot;$2&quot; ] &amp;&amp; \ # ^^ ^^ ^^ echo &quot;Argument #2 = $2&quot; then echo &quot;At least 2 arguments passed to script.&quot; # All the chained commands return true. else echo &quot;Fewer than 2 arguments passed to script.&quot; # At least one of the chained commands returns false. fi # Note that &quot;if [ ! -z $1 ]&quot; works, but its alleged equivalent, # &quot;if [ -n $1 ]&quot; does not. # However, quoting fixes this. # if &quot;[ -n &quot;$1&quot; ]&quot; works. # ^ ^ Careful! # It is always best to QUOTE the variables being tested. # This accomplishes the same thing, using &quot;pure&quot; if/then statements. if [ ! -z &quot;$1&quot; ] then echo &quot;Argument #1 = $1&quot; fi if [ ! -z &quot;$2&quot; ] then echo &quot;Argument #2 = $2&quot; echo &quot;At least 2 arguments passed to script.&quot; else echo &quot;Fewer than 2 arguments passed to script.&quot; fi # It's longer and more ponderous than using an &quot;and list&quot;. exit $? Example 26-2. Another command-line arg test using an and list #!/bin/bash ARGS=1 # Number of arguments expected. E_BADARGS=85 # Exit value if incorrect number of args passed. test $# -ne $ARGS &amp;&amp; \ # ^^^^^^^^^^^^ condition #1 echo &quot;Usage: `basename $0` $ARGS argument(s)&quot; &amp;&amp; exit $E_BADARGS # ^^ # If condition #1 tests true (wrong number of args passed to script), #+ then the rest of the line executes, and script terminates. # Line below executes only if the above test fails. echo &quot;Correct number of arguments passed to this script.&quot; exit 0 # To check exit value, do a &quot;echo $?&quot; after script termination. Of course, an and list can also set variables to a default value. arg1=$@ &amp;&amp; [ -z &quot;$arg1&quot; ] &amp;&amp; arg1=DEFAULT # Set $arg1 to command-line arguments, if any. # But . . . set to DEFAULT if not specified on command-line. or list command-1 || command-2 || command-3 || ... command-n Each command executes in turn for as long as the previous command returns false. At the first true return, the command chain terminates (the first command returning true is the last one to execute). This is obviously the inverse of the &quot;and list&quot;. Example 26-3. Using or lists in combination with an and list #!/bin/bash # delete.sh, a not-so-cunning file deletion utility. # Usage: delete filename E_BADARGS=85 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS # No arg? Bail out. else file=$1 # Set filename. fi [ ! -f &quot;$file&quot; ] &amp;&amp; echo &quot;File \&quot;$file\&quot; not found. \ Cowardly refusing to delete a nonexistent file.&quot; # AND LIST, to give error message if file not present. # Note echo message continuing on to a second line after an escape. [ ! -f &quot;$file&quot; ] || (rm -f $file; echo &quot;File \&quot;$file\&quot; deleted.&quot;) # OR LIST, to delete file if present. # Note logic inversion above. # AND LIST executes on true, OR LIST on false. exit $? Caution If the first command in an or list returns true, it will execute. # ==&gt; The following snippets from the /etc/rc.d/init.d/single #+==&gt; script by Miquel van Smoorenburg #+==&gt; illustrate use of &quot;and&quot; and &quot;or&quot; lists. # ==&gt; &quot;Arrowed&quot; comments added by document author. [ -x /usr/bin/clear ] &amp;&amp; /usr/bin/clear # ==&gt; If /usr/bin/clear exists, then invoke it. # ==&gt; Checking for the existence of a command before calling it #+==&gt; avoids error messages and other awkward consequences. # ==&gt; . . . # If they want to run something in single user mode, might as well run it... for i in /etc/rc1.d/S[0-9][0-9]* ; do # Check if the script is there. [ -x &quot;$i&quot; ] || continue # ==&gt; If corresponding file in $PWD *not* found, #+==&gt; then &quot;continue&quot; by jumping to the top of the loop. # Reject backup files and files generated by rpm. case &quot;$1&quot; in *.rpmsave|*.rpmorig|*.rpmnew|*~|*.orig) continue;; esac [ &quot;$i&quot; = &quot;/etc/rc1.d/S00single&quot; ] &amp;&amp; continue # ==&gt; Set script name, but don't execute it yet. $i start done # ==&gt; . . . Important The exit status of an and list or an or list is the exit status of the last command executed. Clever combinations of and and or lists are possible, but the logic may easily become convoluted and require close attention to operator precedence rules, and possibly extensive debugging. false &amp;&amp; true || echo false # false # Same result as ( false &amp;&amp; true ) || echo false # false # But NOT false &amp;&amp; ( true || echo false ) # (nothing echoed) # Note left-to-right grouping and evaluation of statements. # It's usually best to avoid such complexities. # Thanks, S.C. See Example A-7 and Example 7-4 for illustrations of using and / or list constructs to test variables. Chapter 27. Arrays Newer versions of Bash support one-dimensional arrays. Array elements may be initialized with the variable[xx] notation. Alternatively, a script may introduce the entire array by an explicit declare -a variable statement. To dereference (retrieve the contents of) an array element, use curly bracket notation, that is, ${element[xx]}. Example 27-1. Simple array usage #!/bin/bash area[11]=23 area[13]=37 area[51]=UFOs # Array members need not be consecutive or contiguous. # Some members of the array can be left uninitialized. # Gaps in the array are okay. # In fact, arrays with sparse data (&quot;sparse arrays&quot;) #+ are useful in spreadsheet-processing software. echo -n &quot;area[11] = &quot; echo ${area[11]} # {curly brackets} needed. echo -n &quot;area[13] = &quot; echo ${area[13]} echo &quot;Contents of area[51] are ${area[51]}.&quot; # Contents of uninitialized array variable print blank (null variable). echo -n &quot;area[43] = &quot; echo ${area[43]} echo &quot;(area[43] unassigned)&quot; echo # Sum of two array variables assigned to third area[5]=`expr ${area[11]} + ${area[13]}` echo &quot;area[5] = area[11] + area[13]&quot; echo -n &quot;area[5] = &quot; echo ${area[5]} area[6]=`expr ${area[11]} + ${area[51]}` echo &quot;area[6] = area[11] + area[51]&quot; echo -n &quot;area[6] = &quot; echo ${area[6]} # This fails because adding an integer to a string is not permitted. echo; echo; echo # ----------------------------------------------------------------- # Another array, &quot;area2&quot;. # Another way of assigning array variables... # array_name=( XXX YYY ZZZ ... ) area2=( zero one two three four ) echo -n &quot;area2[0] = &quot; echo ${area2[0]} # Aha, zero-based indexing (first element of array is [0], not [1]). echo -n &quot;area2[1] = &quot; echo ${area2[1]} # [1] is second element of array. # ----------------------------------------------------------------- echo; echo; echo # ----------------------------------------------- # Yet another array, &quot;area3&quot;. # Yet another way of assigning array variables... # array_name=([xx]=XXX [yy]=YYY ...) area3=([17]=seventeen [24]=twenty-four) echo -n &quot;area3[17] = &quot; echo ${area3[17]} echo -n &quot;area3[24] = &quot; echo ${area3[24]} # ----------------------------------------------- exit 0 As we have seen, a convenient way of initializing an entire array is the array=( element1 element2 ... elementN ) notation. base64_charset=( {A..Z} {a..z} {0..9} + / = ) # Using extended brace expansion #+ to initialize the elements of the array. # Excerpted from vladz's &quot;base64.sh&quot; script #+ in the &quot;Contributed Scripts&quot; appendix. Bash permits array operations on variables, even if the variables are not explicitly declared as arrays. string=abcABC123ABCabc echo ${string[@]} # abcABC123ABCabc echo ${string[*]} # abcABC123ABCabc echo ${string[0]} # abcABC123ABCabc echo ${string[1]} # No output! # Why? echo ${#string[@]} # 1 # One element in the array. # The string itself. # Thank you, Michael Zick, for pointing this out. Once again this demonstrates that Bash variables are untyped. Example 27-2. Formatting a poem #!/bin/bash # poem.sh: Pretty-prints one of the ABS Guide author's favorite poems. # Lines of the poem (single stanza). Line[1]=&quot;I do not know which to prefer,&quot; Line[2]=&quot;The beauty of inflections&quot; Line[3]=&quot;Or the beauty of innuendoes,&quot; Line[4]=&quot;The blackbird whistling&quot; Line[5]=&quot;Or just after.&quot; # Note that quoting permits embedding whitespace. # Attribution. Attrib[1]=&quot; Wallace Stevens&quot; Attrib[2]=&quot;\&quot;Thirteen Ways of Looking at a Blackbird\&quot;&quot; # This poem is in the Public Domain (copyright expired). echo tput bold # Bold print. for index in 1 2 3 4 5 # Five lines. do printf &quot; %s\n&quot; &quot;${Line[index]}&quot; done for index in 1 2 # Two attribution lines. do printf &quot; %s\n&quot; &quot;${Attrib[index]}&quot; done tput sgr0 # Reset terminal. # See 'tput' docs. echo exit 0 # Exercise: # -------- # Modify this script to pretty-print a poem from a text data file. Array variables have a syntax all their own, and even standard Bash commands and operators have special options adapted for array use. Example 27-3. Various array operations #!/bin/bash # array-ops.sh: More fun with arrays. array=( zero one two three four five ) # Element 0 1 2 3 4 5 echo ${array[0]} # zero echo ${array:0} # zero # Parameter expansion of first element, #+ starting at position # 0 (1st character). echo ${array:1} # ero # Parameter expansion of first element, #+ starting at position # 1 (2nd character). echo &quot;--------------&quot; echo ${#array[0]} # 4 # Length of first element of array. echo ${#array} # 4 # Length of first element of array. # (Alternate notation) echo ${#array[1]} # 3 # Length of second element of array. # Arrays in Bash have zero-based indexing. echo ${#array[*]} # 6 # Number of elements in array. echo ${#array[@]} # 6 # Number of elements in array. echo &quot;--------------&quot; array2=( [0]=&quot;first element&quot; [1]=&quot;second element&quot; [3]=&quot;fourth element&quot; ) # ^ ^ ^ ^ ^ ^ ^ ^ ^ # Quoting permits embedding whitespace within individual array elements. echo ${array2[0]} # first element echo ${array2[1]} # second element echo ${array2[2]} # # Skipped in initialization, and therefore null. echo ${array2[3]} # fourth element echo ${#array2[0]} # 13 (length of first element) echo ${#array2[*]} # 3 (number of elements in array) exit Many of the standard string operations work on arrays. Example 27-4. String operations on arrays #!/bin/bash # array-strops.sh: String operations on arrays. # Script by Michael Zick. # Used in ABS Guide with permission. # Fixups: 05 May 08, 04 Aug 08. # In general, any string operation using the ${name ... } notation #+ can be applied to all string elements in an array, #+ with the ${name[@] ... } or ${name[*] ...} notation. arrayZ=( one two three four five five ) echo # Trailing Substring Extraction echo ${arrayZ[@]:0} # one two three four five five # ^ All elements. echo ${arrayZ[@]:1} # two three four five five # ^ All elements following element[0]. echo ${arrayZ[@]:1:2} # two three # ^ Only the two elements after element[0]. echo &quot;---------&quot; # Substring Removal # Removes shortest match from front of string(s). echo ${arrayZ[@]#f*r} # one two three five five # ^ # Applied to all elements of the array. # Matches &quot;four&quot; and removes it. # Longest match from front of string(s) echo ${arrayZ[@]##t*e} # one two four five five # ^^ # Applied to all elements of the array. # Matches &quot;three&quot; and removes it. # Shortest match from back of string(s) echo ${arrayZ[@]%h*e} # one two t four five five # ^ # Applied to all elements of the array. # Matches &quot;hree&quot; and removes it. # Longest match from back of string(s) echo ${arrayZ[@]%%t*e} # one two four five five # ^^ # Applied to all elements of the array. # Matches &quot;three&quot; and removes it. echo &quot;----------------------&quot; # Substring Replacement # Replace first occurrence of substring with replacement. echo ${arrayZ[@]/fiv/XYZ} # one two three four XYZe XYZe # ^ # Applied to all elements of the array. # Replace all occurrences of substring. echo ${arrayZ[@]//iv/YY} # one two three four fYYe fYYe # Applied to all elements of the array. # Delete all occurrences of substring. # Not specifing a replacement defaults to 'delete' ... echo ${arrayZ[@]//fi/} # one two three four ve ve # ^^ # Applied to all elements of the array. # Replace front-end occurrences of substring. echo ${arrayZ[@]/#fi/XY} # one two three four XYve XYve # ^ # Applied to all elements of the array. # Replace back-end occurrences of substring. echo ${arrayZ[@]/%ve/ZZ} # one two three four fiZZ fiZZ # ^ # Applied to all elements of the array. echo ${arrayZ[@]/%o/XX} # one twXX three four five five # ^ # Why? echo &quot;-----------------------------&quot; replacement() { echo -n &quot;!!!&quot; } echo ${arrayZ[@]/%e/$(replacement)} # ^ ^^^^^^^^^^^^^^ # on!!! two thre!!! four fiv!!! fiv!!! # The stdout of replacement() is the replacement string. # Q.E.D: The replacement action is, in effect, an 'assignment.' echo &quot;------------------------------------&quot; # Accessing the &quot;for-each&quot;: echo ${arrayZ[@]//*/$(replacement optional_arguments)} # ^^ ^^^^^^^^^^^^^ # !!! !!! !!! !!! !!! !!! # Now, if Bash would only pass the matched string #+ to the function being called . . . echo exit 0 # Before reaching for a Big Hammer -- Perl, Python, or all the rest -- # recall: # $( ... ) is command substitution. # A function runs as a sub-process. # A function writes its output (if echo-ed) to stdout. # Assignment, in conjunction with &quot;echo&quot; and command substitution, #+ can read a function's stdout. # The name[@] notation specifies (the equivalent of) a &quot;for-each&quot; #+ operation. # Bash is more powerful than you think! Command substitution can construct the individual elements of an array. Example 27-5. Loading the contents of a script into an array #!/bin/bash # script-array.sh: Loads this script into an array. # Inspired by an e-mail from Chris Martin (thanks!). script_contents=( $(cat &quot;$0&quot;) ) # Stores contents of this script ($0) #+ in an array. for element in $(seq 0 $((${#script_contents[@]} - 1))) do # ${#script_contents[@]} #+ gives number of elements in the array. # # Question: # Why is seq 0 necessary? # Try changing it to seq 1. echo -n &quot;${script_contents[$element]}&quot; # List each field of this script on a single line. # echo -n &quot;${script_contents[element]}&quot; also works because of ${ ... }. echo -n &quot; -- &quot; # Use &quot; -- &quot; as a field separator. done echo exit 0 # Exercise: # -------- # Modify this script so it lists itself #+ in its original format, #+ complete with whitespace, line breaks, etc. In an array context, some Bash builtins have a slightly altered meaning. For example, unset deletes array elements, or even an entire array. Example 27-6. Some special properties of arrays #!/bin/bash declare -a colors # All subsequent commands in this script will treat #+ the variable &quot;colors&quot; as an array. echo &quot;Enter your favorite colors (separated from each other by a space).&quot; read -a colors # Enter at least 3 colors to demonstrate features below. # Special option to 'read' command, #+ allowing assignment of elements in an array. echo element_count=${#colors[@]} # Special syntax to extract number of elements in array. # element_count=${#colors[*]} works also. # # The &quot;@&quot; variable allows word splitting within quotes #+ (extracts variables separated by whitespace). # # This corresponds to the behavior of &quot;$@&quot; and &quot;$*&quot; #+ in positional parameters. index=0 while [ &quot;$index&quot; -lt &quot;$element_count&quot; ] do # List all the elements in the array. echo ${colors[$index]} # ${colors[index]} also works because it's within ${ ... } brackets. let &quot;index = $index + 1&quot; # Or: # ((index++)) done # Each array element listed on a separate line. # If this is not desired, use echo -n &quot;${colors[$index]} &quot; # # Doing it with a &quot;for&quot; loop instead: # for i in &quot;${colors[@]}&quot; # do # echo &quot;$i&quot; # done # (Thanks, S.C.) echo # Again, list all the elements in the array, but using a more elegant method. echo ${colors[@]} # echo ${colors[*]} also works. echo # The &quot;unset&quot; command deletes elements of an array, or entire array. unset colors[1] # Remove 2nd element of array. # Same effect as colors[1]= echo ${colors[@]} # List array again, missing 2nd element. unset colors # Delete entire array. # unset colors[*] and #+ unset colors[@] also work. echo; echo -n &quot;Colors gone.&quot; echo ${colors[@]} # List array again, now empty. exit 0 As seen in the previous example, either ${array_name[@]} or ${array_name[*]} refers to all the elements of the array. Similarly, to get a count of the number of elements in an array, use either ${#array_name[@]} or ${#array_name[*]}. ${#array_name} is the length (number of characters) of ${array_name[0]}, the first element of the array. Example 27-7. Of empty arrays and empty elements #!/bin/bash # empty-array.sh # Thanks to Stephane Chazelas for the original example, #+ and to Michael Zick and Omair Eshkenazi, for extending it. # And to Nathan Coulter for clarifications and corrections. # An empty array is not the same as an array with empty elements. array0=( first second third ) array1=( '' ) # &quot;array1&quot; consists of one empty element. array2=( ) # No elements . . . &quot;array2&quot; is empty. array3=( ) # What about this array? echo ListArray() { echo echo &quot;Elements in array0: ${array0[@]}&quot; echo &quot;Elements in array1: ${array1[@]}&quot; echo &quot;Elements in array2: ${array2[@]}&quot; echo &quot;Elements in array3: ${array3[@]}&quot; echo echo &quot;Length of first element in array0 = ${#array0}&quot; echo &quot;Length of first element in array1 = ${#array1}&quot; echo &quot;Length of first element in array2 = ${#array2}&quot; echo &quot;Length of first element in array3 = ${#array3}&quot; echo echo &quot;Number of elements in array0 = ${#array0[*]}&quot; # 3 echo &quot;Number of elements in array1 = ${#array1[*]}&quot; # 1 (Surprise!) echo &quot;Number of elements in array2 = ${#array2[*]}&quot; # 0 echo &quot;Number of elements in array3 = ${#array3[*]}&quot; # 0 } # =================================================================== ListArray # Try extending those arrays. # Adding an element to an array. array0=( &quot;${array0[@]}&quot; &quot;new1&quot; ) array1=( &quot;${array1[@]}&quot; &quot;new1&quot; ) array2=( &quot;${array2[@]}&quot; &quot;new1&quot; ) array3=( &quot;${array3[@]}&quot; &quot;new1&quot; ) ListArray # or array0[${#array0[*]}]=&quot;new2&quot; array1[${#array1[*]}]=&quot;new2&quot; array2[${#array2[*]}]=&quot;new2&quot; array3[${#array3[*]}]=&quot;new2&quot; ListArray # When extended as above, arrays are 'stacks' ... # Above is the 'push' ... # The stack 'height' is: height=${#array2[@]} echo echo &quot;Stack height for array2 = $height&quot; # The 'pop' is: unset array2[${#array2[@]}-1] # Arrays are zero-based, height=${#array2[@]} #+ which means first element has index 0. echo echo &quot;POP&quot; echo &quot;New stack height for array2 = $height&quot; ListArray # List only 2nd and 3rd elements of array0. from=1 # Zero-based numbering. to=2 array3=( ${array0[@]:1:2} ) echo echo &quot;Elements in array3: ${array3[@]}&quot; # Works like a string (array of characters). # Try some other &quot;string&quot; forms. # Replacement: array4=( ${array0[@]/second/2nd} ) echo echo &quot;Elements in array4: ${array4[@]}&quot; # Replace all matching wildcarded string. array5=( ${array0[@]//new?/old} ) echo echo &quot;Elements in array5: ${array5[@]}&quot; # Just when you are getting the feel for this . . . array6=( ${array0[@]#*new} ) echo # This one might surprise you. echo &quot;Elements in array6: ${array6[@]}&quot; array7=( ${array0[@]#new1} ) echo # After array6 this should not be a surprise. echo &quot;Elements in array7: ${array7[@]}&quot; # Which looks a lot like . . . array8=( ${array0[@]/new1/} ) echo echo &quot;Elements in array8: ${array8[@]}&quot; # So what can one say about this? # The string operations are performed on #+ each of the elements in var[@] in succession. # Therefore : Bash supports string vector operations. # If the result is a zero length string, #+ that element disappears in the resulting assignment. # However, if the expansion is in quotes, the null elements remain. # Michael Zick: Question, are those strings hard or soft quotes? # Nathan Coulter: There is no such thing as &quot;soft quotes.&quot; #! What's really happening is that #!+ the pattern matching happens after #!+ all the other expansions of [word] #!+ in cases like ${parameter#word}. zap='new*' array9=( ${array0[@]/$zap/} ) echo echo &quot;Number of elements in array9: ${#array9[@]}&quot; array9=( &quot;${array0[@]/$zap/}&quot; ) echo &quot;Elements in array9: ${array9[@]}&quot; # This time the null elements remain. echo &quot;Number of elements in array9: ${#array9[@]}&quot; # Just when you thought you were still in Kansas . . . array10=( ${array0[@]#$zap} ) echo echo &quot;Elements in array10: ${array10[@]}&quot; # But, the asterisk in zap won't be interpreted if quoted. array10=( ${array0[@]#&quot;$zap&quot;} ) echo echo &quot;Elements in array10: ${array10[@]}&quot; # Well, maybe we _are_ still in Kansas . . . # (Revisions to above code block by Nathan Coulter.) # Compare array7 with array10. # Compare array8 with array9. # Reiterating: No such thing as soft quotes! # Nathan Coulter explains: # Pattern matching of 'word' in ${parameter#word} is done after #+ parameter expansion and *before* quote removal. # In the normal case, pattern matching is done *after* quote removal. exit The relationship of ${array_name[@]} and ${array_name[*]} is analogous to that between $@ and $*. This powerful array notation has a number of uses. # Copying an array. array2=( &quot;${array1[@]}&quot; ) # or array2=&quot;${array1[@]}&quot; # # However, this fails with &quot;sparse&quot; arrays, #+ arrays with holes (missing elements) in them, #+ as Jochen DeSmet points out. # ------------------------------------------ array1[0]=0 # array1[1] not assigned array1[2]=2 array2=( &quot;${array1[@]}&quot; ) # Copy it? echo ${array2[0]} # 0 echo ${array2[2]} # (null), should be 2 # ------------------------------------------ # Adding an element to an array. array=( &quot;${array[@]}&quot; &quot;new element&quot; ) # or array[${#array[*]}]=&quot;new element&quot; # Thanks, S.C. Tip The array=( element1 element2 ... elementN ) initialization operation, with the help of command substitution, makes it possible to load the contents of a text file into an array. #!/bin/bash filename=sample_file # cat sample_file # # 1 a b c # 2 d e fg declare -a array1 array1=( `cat &quot;$filename&quot;`) # Loads contents # List file to stdout #+ of $filename into array1. # # array1=( `cat &quot;$filename&quot; | tr '\n' ' '`) # change linefeeds in file to spaces. # Not necessary because Bash does word splitting, #+ changing linefeeds to spaces. echo ${array1[@]} # List the array. # 1 a b c 2 d e fg # # Each whitespace-separated &quot;word&quot; in the file #+ has been assigned to an element of the array. element_count=${#array1[*]} echo $element_count # 8 Clever scripting makes it possible to add array operations. Example 27-8. Initializing arrays #! /bin/bash # array-assign.bash # Array operations are Bash-specific, #+ hence the &quot;.bash&quot; in the script name. # Copyright (c) Michael S. Zick, 2003, All rights reserved. # License: Unrestricted reuse in any form, for any purpose. # Version: $ID$ # # Clarification and additional comments by William Park. # Based on an example provided by Stephane Chazelas #+ which appeared in an earlier version of the #+ Advanced Bash Scripting Guide. # Output format of the 'times' command: # User CPU &lt;space&gt; System CPU # User CPU of dead children &lt;space&gt; System CPU of dead children # Bash has two versions of assigning all elements of an array #+ to a new array variable. # Both drop 'null reference' elements #+ in Bash versions 2.04 and later. # An additional array assignment that maintains the relationship of #+ [subscript]=value for arrays may be added to newer versions. # Constructs a large array using an internal command, #+ but anything creating an array of several thousand elements #+ will do just fine. declare -a bigOne=( /dev/* ) # All the files in /dev . . . echo echo 'Conditions: Unquoted, default IFS, All-Elements-Of' echo &quot;Number of elements in array is ${#bigOne[@]}&quot; # set -vx echo echo '- - testing: =( ${array[@]} ) - -' times declare -a bigTwo=( ${bigOne[@]} ) # Note parens: ^ ^ times echo echo '- - testing: =${array[@]} - -' times declare -a bigThree=${bigOne[@]} # No parentheses this time. times # Comparing the numbers shows that the second form, pointed out #+ by Stephane Chazelas, is faster. # # As William Park explains: #+ The bigTwo array assigned element by element (because of parentheses), #+ whereas bigThree assigned as a single string. # So, in essence, you have: # bigTwo=( [0]=&quot;...&quot; [1]=&quot;...&quot; [2]=&quot;...&quot; ... ) # bigThree=( [0]=&quot;... ... ...&quot; ) # # Verify this by: echo ${bigTwo[0]} # echo ${bigThree[0]} # I will continue to use the first form in my example descriptions #+ because I think it is a better illustration of what is happening. # The reusable portions of my examples will actual contain #+ the second form where appropriate because of the speedup. # MSZ: Sorry about that earlier oversight folks. # Note: # ---- # The &quot;declare -a&quot; statements in lines 32 and 44 #+ are not strictly necessary, since it is implicit #+ in the Array=( ... ) assignment form. # However, eliminating these declarations slows down #+ the execution of the following sections of the script. # Try it, and see. exit 0 Note Adding a superfluous declare -a statement to an array declaration may speed up execution of subsequent operations on the array. Example 27-9. Copying and concatenating arrays #! /bin/bash # CopyArray.sh # # This script written by Michael Zick. # Used here with permission. # How-To &quot;Pass by Name &amp; Return by Name&quot; #+ or &quot;Building your own assignment statement&quot;. CpArray_Mac() { # Assignment Command Statement Builder echo -n 'eval ' echo -n &quot;$2&quot; # Destination name echo -n '=( ${' echo -n &quot;$1&quot; # Source name echo -n '[@]} )' # That could all be a single command. # Matter of style only. } declare -f CopyArray # Function &quot;Pointer&quot; CopyArray=CpArray_Mac # Statement Builder Hype() { # Hype the array named $1. # (Splice it together with array containing &quot;Really Rocks&quot;.) # Return in array named $2. local -a TMP local -a hype=( Really Rocks ) $($CopyArray $1 TMP) TMP=( ${TMP[@]} ${hype[@]} ) $($CopyArray TMP $2) } declare -a before=( Advanced Bash Scripting ) declare -a after echo &quot;Array Before = ${before[@]}&quot; Hype before after echo &quot;Array After = ${after[@]}&quot; # Too much hype? echo &quot;What ${after[@]:3:2}?&quot; declare -a modest=( ${after[@]:2:1} ${after[@]:3:2} ) # ---- substring extraction ---- echo &quot;Array Modest = ${modest[@]}&quot; # What happened to 'before' ? echo &quot;Array Before = ${before[@]}&quot; exit 0 Example 27-10. More on concatenating arrays #! /bin/bash # array-append.bash # Copyright (c) Michael S. Zick, 2003, All rights reserved. # License: Unrestricted reuse in any form, for any purpose. # Version: $ID$ # # Slightly modified in formatting by M.C. # Array operations are Bash-specific. # Legacy UNIX /bin/sh lacks equivalents. # Pipe the output of this script to 'more' #+ so it doesn't scroll off the terminal. # Or, redirect output to a file. declare -a array1=( zero1 one1 two1 ) # Subscript packed. declare -a array2=( [0]=zero2 [2]=two2 [3]=three2 ) # Subscript sparse -- [1] is not defined. echo echo '- Confirm that the array is really subscript sparse. -' echo &quot;Number of elements: 4&quot; # Hard-coded for illustration. for (( i = 0 ; i &lt; 4 ; i++ )) do echo &quot;Element [$i]: ${array2[$i]}&quot; done # See also the more general code example in basics-reviewed.bash. declare -a dest # Combine (append) two arrays into a third array. echo echo 'Conditions: Unquoted, default IFS, All-Elements-Of operator' echo '- Undefined elements not present, subscripts not maintained. -' # # The undefined elements do not exist; they are not being dropped. dest=( ${array1[@]} ${array2[@]} ) # dest=${array1[@]}${array2[@]} # Strange results, possibly a bug. # Now, list the result. echo echo '- - Testing Array Append - -' cnt=${#dest[@]} echo &quot;Number of elements: $cnt&quot; for (( i = 0 ; i &lt; cnt ; i++ )) do echo &quot;Element [$i]: ${dest[$i]}&quot; done # Assign an array to a single array element (twice). dest[0]=${array1[@]} dest[1]=${array2[@]} # List the result. echo echo '- - Testing modified array - -' cnt=${#dest[@]} echo &quot;Number of elements: $cnt&quot; for (( i = 0 ; i &lt; cnt ; i++ )) do echo &quot;Element [$i]: ${dest[$i]}&quot; done # Examine the modified second element. echo echo '- - Reassign and list second element - -' declare -a subArray=${dest[1]} cnt=${#subArray[@]} echo &quot;Number of elements: $cnt&quot; for (( i = 0 ; i &lt; cnt ; i++ )) do echo &quot;Element [$i]: ${subArray[$i]}&quot; done # The assignment of an entire array to a single element #+ of another array using the '=${ ... }' array assignment #+ has converted the array being assigned into a string, #+ with the elements separated by a space (the first character of IFS). # If the original elements didn't contain whitespace . . . # If the original array isn't subscript sparse . . . # Then we could get the original array structure back again. # Restore from the modified second element. echo echo '- - Listing restored element - -' declare -a subArray=( ${dest[1]} ) cnt=${#subArray[@]} echo &quot;Number of elements: $cnt&quot; for (( i = 0 ; i &lt; cnt ; i++ )) do echo &quot;Element [$i]: ${subArray[$i]}&quot; done echo '- - Do not depend on this behavior. - -' echo '- - This behavior is subject to change - -' echo '- - in versions of Bash newer than version 2.05b - -' # MSZ: Sorry about any earlier confusion folks. exit 0 -- Arrays permit deploying old familiar algorithms as shell scripts. Whether this is necessarily a good idea is left for the reader to decide. Example 27-11. The Bubble Sort #!/bin/bash # bubble.sh: Bubble sort, of sorts. # Recall the algorithm for a bubble sort. In this particular version... # With each successive pass through the array to be sorted, #+ compare two adjacent elements, and swap them if out of order. # At the end of the first pass, the &quot;heaviest&quot; element has sunk to bottom. # At the end of the second pass, the next &quot;heaviest&quot; one has sunk next to bottom. # And so forth. # This means that each successive pass needs to traverse less of the array. # You will therefore notice a speeding up in the printing of the later passes. exchange() { # Swaps two members of the array. local temp=${Countries[$1]} # Temporary storage #+ for element getting swapped out. Countries[$1]=${Countries[$2]} Countries[$2]=$temp return } declare -a Countries # Declare array, #+ optional here since it's initialized below. # Is it permissable to split an array variable over multiple lines #+ using an escape (\)? # Yes. Countries=(Netherlands Ukraine Zaire Turkey Russia Yemen Syria \ Brazil Argentina Nicaragua Japan Mexico Venezuela Greece England \ Israel Peru Canada Oman Denmark Wales France Kenya \ Xanadu Qatar Liechtenstein Hungary) # &quot;Xanadu&quot; is the mythical place where, according to Coleridge, #+ Kubla Khan did a pleasure dome decree. clear # Clear the screen to start with. echo &quot;0: ${Countries[*]}&quot; # List entire array at pass 0. number_of_elements=${#Countries[@]} let &quot;comparisons = $number_of_elements - 1&quot; count=1 # Pass number. while [ &quot;$comparisons&quot; -gt 0 ] # Beginning of outer loop do index=0 # Reset index to start of array after each pass. while [ &quot;$index&quot; -lt &quot;$comparisons&quot; ] # Beginning of inner loop do if [ ${Countries[$index]} \&gt; ${Countries[`expr $index + 1`]} ] # If out of order... # Recalling that \&gt; is ASCII comparison operator #+ within single brackets. # if [[ ${Countries[$index]} &gt; ${Countries[`expr $index + 1`]} ]] #+ also works. then exchange $index `expr $index + 1` # Swap. fi let &quot;index += 1&quot; # Or, index+=1 on Bash, ver. 3.1 or newer. done # End of inner loop # ---------------------------------------------------------------------- # Paulo Marcel Coelho Aragao suggests for-loops as a simpler altenative. # # for (( last = $number_of_elements - 1 ; last &gt; 0 ; last-- )) ## Fix by C.Y. Hunt ^ (Thanks!) # do # for (( i = 0 ; i &lt; last ; i++ )) # do # [[ &quot;${Countries[$i]}&quot; &gt; &quot;${Countries[$((i+1))]}&quot; ]] \ # &amp;&amp; exchange $i $((i+1)) # done # done # ---------------------------------------------------------------------- let &quot;comparisons -= 1&quot; # Since &quot;heaviest&quot; element bubbles to bottom, #+ we need do one less comparison each pass. echo echo &quot;$count: ${Countries[@]}&quot; # Print resultant array at end of each pass. echo let &quot;count += 1&quot; # Increment pass count. done # End of outer loop # All done. exit 0 -- Is it possible to nest arrays within arrays? #!/bin/bash # &quot;Nested&quot; array. # Michael Zick provided this example, #+ with corrections and clarifications by William Park. AnArray=( $(ls --inode --ignore-backups --almost-all \ --directory --full-time --color=none --time=status \ --sort=time -l ${PWD} ) ) # Commands and options. # Spaces are significant . . . and don't quote anything in the above. SubArray=( ${AnArray[@]:11:1} ${AnArray[@]:6:5} ) # This array has six elements: #+ SubArray=( [0]=${AnArray[11]} [1]=${AnArray[6]} [2]=${AnArray[7]} # [3]=${AnArray[8]} [4]=${AnArray[9]} [5]=${AnArray[10]} ) # # Arrays in Bash are (circularly) linked lists #+ of type string (char *). # So, this isn't actually a nested array, #+ but it's functionally similar. echo &quot;Current directory and date of last status change:&quot; echo &quot;${SubArray[@]}&quot; exit 0 -- Embedded arrays in combination with indirect references create some fascinating possibilities Example 27-12. Embedded arrays and indirect references #!/bin/bash # embedded-arrays.sh # Embedded arrays and indirect references. # This script by Dennis Leeuw. # Used with permission. # Modified by document author. ARRAY1=( VAR1_1=value11 VAR1_2=value12 VAR1_3=value13 ) ARRAY2=( VARIABLE=&quot;test&quot; STRING=&quot;VAR1=value1 VAR2=value2 VAR3=value3&quot; ARRAY21=${ARRAY1[*]} ) # Embed ARRAY1 within this second array. function print () { OLD_IFS=&quot;$IFS&quot; IFS=$'\n' # To print each array element #+ on a separate line. TEST1=&quot;ARRAY2[*]&quot; local ${!TEST1} # See what happens if you delete this line. # Indirect reference. # This makes the components of $TEST1 #+ accessible to this function. # Let's see what we've got so far. echo echo &quot;\$TEST1 = $TEST1&quot; # Just the name of the variable. echo; echo echo &quot;{\$TEST1} = ${!TEST1}&quot; # Contents of the variable. # That's what an indirect #+ reference does. echo echo &quot;-------------------------------------------&quot;; echo echo # Print variable echo &quot;Variable VARIABLE: $VARIABLE&quot; # Print a string element IFS=&quot;$OLD_IFS&quot; TEST2=&quot;STRING[*]&quot; local ${!TEST2} # Indirect reference (as above). echo &quot;String element VAR2: $VAR2 from STRING&quot; # Print an array element TEST2=&quot;ARRAY21[*]&quot; local ${!TEST2} # Indirect reference (as above). echo &quot;Array element VAR1_1: $VAR1_1 from ARRAY21&quot; } print echo exit 0 # As the author of the script notes, #+ &quot;you can easily expand it to create named-hashes in bash.&quot; # (Difficult) exercise for the reader: implement this. -- Arrays enable implementing a shell script version of the Sieve of Eratosthenes. Of course, a resource-intensive application of this nature should really be written in a compiled language, such as C. It runs excruciatingly slowly as a script. Example 27-13. The Sieve of Eratosthenes #!/bin/bash # sieve.sh (ex68.sh) # Sieve of Eratosthenes # Ancient algorithm for finding prime numbers. # This runs a couple of orders of magnitude slower #+ than the equivalent program written in C. LOWER_LIMIT=1 # Starting with 1. UPPER_LIMIT=1000 # Up to 1000. # (You may set this higher . . . if you have time on your hands.) PRIME=1 NON_PRIME=0 let SPLIT=UPPER_LIMIT/2 # Optimization: # Need to test numbers only halfway to upper limit. Why? declare -a Primes # Primes[] is an array. initialize () { # Initialize the array. i=$LOWER_LIMIT until [ &quot;$i&quot; -gt &quot;$UPPER_LIMIT&quot; ] do Primes[i]=$PRIME let &quot;i += 1&quot; done # Assume all array members guilty (prime) #+ until proven innocent. } print_primes () { # Print out the members of the Primes[] array tagged as prime. i=$LOWER_LIMIT until [ &quot;$i&quot; -gt &quot;$UPPER_LIMIT&quot; ] do if [ &quot;${Primes[i]}&quot; -eq &quot;$PRIME&quot; ] then printf &quot;%8d&quot; $i # 8 spaces per number gives nice, even columns. fi let &quot;i += 1&quot; done } sift () # Sift out the non-primes. { let i=$LOWER_LIMIT+1 # Let's start with 2. until [ &quot;$i&quot; -gt &quot;$UPPER_LIMIT&quot; ] do if [ &quot;${Primes[i]}&quot; -eq &quot;$PRIME&quot; ] # Don't bother sieving numbers already sieved (tagged as non-prime). then t=$i while [ &quot;$t&quot; -le &quot;$UPPER_LIMIT&quot; ] do let &quot;t += $i &quot; Primes[t]=$NON_PRIME # Tag as non-prime all multiples. done fi let &quot;i += 1&quot; done } # ============================================== # main () # Invoke the functions sequentially. initialize sift print_primes # This is what they call structured programming. # ============================================== echo exit 0 # -------------------------------------------------------- # # Code below line will not execute, because of 'exit.' # This improved version of the Sieve, by Stephane Chazelas, #+ executes somewhat faster. # Must invoke with command-line argument (limit of primes). UPPER_LIMIT=$1 # From command-line. let SPLIT=UPPER_LIMIT/2 # Halfway to max number. Primes=( '' $(seq $UPPER_LIMIT) ) i=1 until (( ( i += 1 ) &gt; SPLIT )) # Need check only halfway. do if [[ -n ${Primes[i]} ]] then t=$i until (( ( t += i ) &gt; UPPER_LIMIT )) do Primes[t]= done fi done echo ${Primes[*]} exit $? Example 27-14. The Sieve of Eratosthenes, Optimized #!/bin/bash # Optimized Sieve of Eratosthenes # Script by Jared Martin, with very minor changes by ABS Guide author. # Used in ABS Guide with permission (thanks!). # Based on script in Advanced Bash Scripting Guide. # http://tldp.org/LDP/abs/html/arrays.html#PRIMES0 (ex68.sh). # http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf (reference) # Check results against http://primes.utm.edu/lists/small/1000.txt # Necessary but not sufficient would be, e.g., # (($(sieve 7919 | wc -w) == 1000)) &amp;&amp; echo &quot;7919 is the 1000th prime&quot; UPPER_LIMIT=${1:?&quot;Need an upper limit of primes to search.&quot;} Primes=( '' $(seq ${UPPER_LIMIT}) ) typeset -i i t Primes[i=1]='' # 1 is not a prime. until (( ( i += 1 ) &gt; (${UPPER_LIMIT}/i) )) # Need check only ith-way. do # Why? if ((${Primes[t=i*(i-1), i]})) # Obscure, but instructive, use of arithmetic expansion in subscript. then until (( ( t += i ) &gt; ${UPPER_LIMIT} )) do Primes[t]=; done fi done # echo ${Primes[*]} echo # Change to original script for pretty-printing (80-col. display). printf &quot;%8d&quot; ${Primes[*]} echo; echo exit $? Compare these array-based prime number generators with alternatives that do not use arrays, Example A-15, and Example 16-46. -- Arrays lend themselves, to some extent, to emulating data structures for which Bash has no native support. Example 27-15. Emulating a push-down stack #!/bin/bash # stack.sh: push-down stack simulation # Similar to the CPU stack, a push-down stack stores data items #+ sequentially, but releases them in reverse order, last-in first-out. BP=100 # Base Pointer of stack array. # Begin at element 100. SP=$BP # Stack Pointer. # Initialize it to &quot;base&quot; (bottom) of stack. Data= # Contents of stack location. # Must use global variable, #+ because of limitation on function return range. # 100 Base pointer &lt;-- Base Pointer # 99 First data item # 98 Second data item # ... More data # Last data item &lt;-- Stack pointer declare -a stack push() # Push item on stack. { if [ -z &quot;$1&quot; ] # Nothing to push? then return fi let &quot;SP -= 1&quot; # Bump stack pointer. stack[$SP]=$1 return } pop() # Pop item off stack. { Data= # Empty out data item. if [ &quot;$SP&quot; -eq &quot;$BP&quot; ] # Stack empty? then return fi # This also keeps SP from getting past 100, #+ i.e., prevents a runaway stack. Data=${stack[$SP]} let &quot;SP += 1&quot; # Bump stack pointer. return } status_report() # Find out what's happening. { echo &quot;-------------------------------------&quot; echo &quot;REPORT&quot; echo &quot;Stack Pointer = $SP&quot; echo &quot;Just popped \&quot;&quot;$Data&quot;\&quot; off the stack.&quot; echo &quot;-------------------------------------&quot; echo } # ======================================================= # Now, for some fun. echo # See if you can pop anything off empty stack. pop status_report echo push garbage pop status_report # Garbage in, garbage out. value1=23; push $value1 value2=skidoo; push $value2 value3=LAST; push $value3 pop # LAST status_report pop # skidoo status_report pop # 23 status_report # Last-in, first-out! # Notice how the stack pointer decrements with each push, #+ and increments with each pop. echo exit 0 # ======================================================= # Exercises: # --------- # 1) Modify the &quot;push()&quot; function to permit pushing # + multiple element on the stack with a single function call. # 2) Modify the &quot;pop()&quot; function to permit popping # + multiple element from the stack with a single function call. # 3) Add error checking to the critical functions. # That is, return an error code, depending on # + successful or unsuccessful completion of the operation, # + and take appropriate action. # 4) Using this script as a starting point, # + write a stack-based 4-function calculator. -- Fancy manipulation of array &quot;subscripts&quot; may require intermediate variables. For projects involving this, again consider using a more powerful programming language, such as Perl or C. Example 27-16. Complex array application: Exploring a weird mathematical series #!/bin/bash # Douglas Hofstadter's notorious &quot;Q-series&quot;: # Q(1) = Q(2) = 1 # Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2)), for n&gt;2 # This is a &quot;chaotic&quot; integer series with strange #+ and unpredictable behavior. # The first 20 terms of the series are: # 1 1 2 3 3 4 5 5 6 6 6 8 8 8 10 9 10 11 11 12 # See Hofstadter's book, _Goedel, Escher, Bach: An Eternal Golden Braid_, #+ p. 137, ff. LIMIT=100 # Number of terms to calculate. LINEWIDTH=20 # Number of terms printed per line. Q[1]=1 # First two terms of series are 1. Q[2]=1 echo echo &quot;Q-series [$LIMIT terms]:&quot; echo -n &quot;${Q[1]} &quot; # Output first two terms. echo -n &quot;${Q[2]} &quot; for ((n=3; n &lt;= $LIMIT; n++)) # C-like loop expression. do # Q[n] = Q[n - Q[n-1]] + Q[n - Q[n-2]] for n&gt;2 # Need to break the expression into intermediate terms, #+ since Bash doesn't handle complex array arithmetic very well. let &quot;n1 = $n - 1&quot; # n-1 let &quot;n2 = $n - 2&quot; # n-2 t0=`expr $n - ${Q[n1]}` # n - Q[n-1] t1=`expr $n - ${Q[n2]}` # n - Q[n-2] T0=${Q[t0]} # Q[n - Q[n-1]] T1=${Q[t1]} # Q[n - Q[n-2]] Q[n]=`expr $T0 + $T1` # Q[n - Q[n-1]] + Q[n - Q[n-2]] echo -n &quot;${Q[n]} &quot; if [ `expr $n % $LINEWIDTH` -eq 0 ] # Format output. then # ^ modulo echo # Break lines into neat chunks. fi done echo exit 0 # This is an iterative implementation of the Q-series. # The more intuitive recursive implementation is left as an exercise. # Warning: calculating this series recursively takes a VERY long time #+ via a script. C/C++ would be orders of magnitude faster. -- Bash supports only one-dimensional arrays, though a little trickery permits simulating multi-dimensional ones. Example 27-17. Simulating a two-dimensional array, then tilting it #!/bin/bash # twodim.sh: Simulating a two-dimensional array. # A one-dimensional array consists of a single row. # A two-dimensional array stores rows sequentially. Rows=5 Columns=5 # 5 X 5 Array. declare -a alpha # char alpha [Rows] [Columns]; # Unnecessary declaration. Why? load_alpha () { local rc=0 local index for i in A B C D E F G H I J K L M N O P Q R S T U V W X Y do # Use different symbols if you like. local row=`expr $rc / $Columns` local column=`expr $rc % $Rows` let &quot;index = $row * $Rows + $column&quot; alpha[$index]=$i # alpha[$row][$column] let &quot;rc += 1&quot; done # Simpler would be #+ declare -a alpha=( A B C D E F G H I J K L M N O P Q R S T U V W X Y ) #+ but this somehow lacks the &quot;flavor&quot; of a two-dimensional array. } print_alpha () { local row=0 local index echo while [ &quot;$row&quot; -lt &quot;$Rows&quot; ] # Print out in &quot;row major&quot; order: do #+ columns vary, #+ while row (outer loop) remains the same. local column=0 echo -n &quot; &quot; # Lines up &quot;square&quot; array with rotated one. while [ &quot;$column&quot; -lt &quot;$Columns&quot; ] do let &quot;index = $row * $Rows + $column&quot; echo -n &quot;${alpha[index]} &quot; # alpha[$row][$column] let &quot;column += 1&quot; done let &quot;row += 1&quot; echo done # The simpler equivalent is # echo ${alpha[*]} | xargs -n $Columns echo } filter () # Filter out negative array indices. { echo -n &quot; &quot; # Provides the tilt. # Explain how. if [[ &quot;$1&quot; -ge 0 &amp;&amp; &quot;$1&quot; -lt &quot;$Rows&quot; &amp;&amp; &quot;$2&quot; -ge 0 &amp;&amp; &quot;$2&quot; -lt &quot;$Columns&quot; ]] then let &quot;index = $1 * $Rows + $2&quot; # Now, print it rotated. echo -n &quot; ${alpha[index]}&quot; # alpha[$row][$column] fi } rotate () # Rotate the array 45 degrees -- { #+ &quot;balance&quot; it on its lower lefthand corner. local row local column for (( row = Rows; row &gt; -Rows; row-- )) do # Step through the array backwards. Why? for (( column = 0; column &lt; Columns; column++ )) do if [ &quot;$row&quot; -ge 0 ] then let &quot;t1 = $column - $row&quot; let &quot;t2 = $column&quot; else let &quot;t1 = $column&quot; let &quot;t2 = $column + $row&quot; fi filter $t1 $t2 # Filter out negative array indices. # What happens if you don't do this? done echo; echo done # Array rotation inspired by examples (pp. 143-146) in #+ &quot;Advanced C Programming on the IBM PC,&quot; by Herbert Mayer #+ (see bibliography). # This just goes to show that much of what can be done in C #+ can also be done in shell scripting. } #--------------- Now, let the show begin. ------------# load_alpha # Load the array. print_alpha # Print it out. rotate # Rotate it 45 degrees counterclockwise. #-----------------------------------------------------# exit 0 # This is a rather contrived, not to mention inelegant simulation. # Exercises: # --------- # 1) Rewrite the array loading and printing functions # in a more intuitive and less kludgy fashion. # # 2) Figure out how the array rotation functions work. # Hint: think about the implications of backwards-indexing an array. # # 3) Rewrite this script to handle a non-square array, # such as a 6 X 4 one. # Try to minimize &quot;distortion&quot; when the array is rotated. A two-dimensional array is essentially equivalent to a one-dimensional one, but with additional addressing modes for referencing and manipulating the individual elements by row and column position. For an even more elaborate example of simulating a two-dimensional array, see Example A-10. -- For more interesting scripts using arrays, see: Example 12-3 Example 16-46 Example A-22 Example A-44 Example A-41 Example A-42 Chapter 28. Indirect References We have seen that referencing a variable, $var, fetches its value. But, what about the value of a value? What about $$var? The actual notation is \$$var, usually preceded by an eval (and sometimes an echo). This is called an indirect reference. Example 28-1. Indirect Variable References #!/bin/bash # ind-ref.sh: Indirect variable referencing. # Accessing the contents of the contents of a variable. # First, let's fool around a little. var=23 echo &quot;\$var = $var&quot; # $var = 23 # So far, everything as expected. But ... echo &quot;\$\$var = $$var&quot; # $$var = 4570var # Not useful ... # \$\$ expanded to PID of the script # -- refer to the entry on the $$ variable -- #+ and &quot;var&quot; is echoed as plain text. # (Thank you, Jakob Bohm, for pointing this out.) echo &quot;\\\$\$var = \$$var&quot; # \$$var = $23 # As expected. The first $ is escaped and pasted on to #+ the value of var ($var = 23 ). # Meaningful, but still not useful. # Now, let's start over and do it the right way. # ============================================== # a=letter_of_alphabet # Variable &quot;a&quot; holds the name of another variable. letter_of_alphabet=z echo # Direct reference. echo &quot;a = $a&quot; # a = letter_of_alphabet # Indirect reference. eval a=\$$a # ^^^ Forcing an eval(uation), and ... # ^ Escaping the first $ ... # ------------------------------------------------------------------------ # The 'eval' forces an update of $a, sets it to the updated value of \$$a. # So, we see why 'eval' so often shows up in indirect reference notation. # ------------------------------------------------------------------------ echo &quot;Now a = $a&quot; # Now a = z echo # Now, let's try changing the second-order reference. t=table_cell_3 table_cell_3=24 echo &quot;\&quot;table_cell_3\&quot; = $table_cell_3&quot; # &quot;table_cell_3&quot; = 24 echo -n &quot;dereferenced \&quot;t\&quot; = &quot;; eval echo \$$t # dereferenced &quot;t&quot; = 24 # In this simple case, the following also works (why?). # eval t=\$$t; echo &quot;\&quot;t\&quot; = $t&quot; echo t=table_cell_3 NEW_VAL=387 table_cell_3=$NEW_VAL echo &quot;Changing value of \&quot;table_cell_3\&quot; to $NEW_VAL.&quot; echo &quot;\&quot;table_cell_3\&quot; now $table_cell_3&quot; echo -n &quot;dereferenced \&quot;t\&quot; now &quot;; eval echo \$$t # &quot;eval&quot; takes the two arguments &quot;echo&quot; and &quot;\$$t&quot; (set equal to $table_cell_3) echo # (Thanks, Stephane Chazelas, for clearing up the above behavior.) # A more straightforward method is the ${!t} notation, discussed in the #+ &quot;Bash, version 2&quot; section. # See also ex78.sh. exit 0 Indirect referencing in Bash is a multi-step process. First, take the name of a variable: varname. Then, reference it: $varname. Then, reference the reference: $$varname. Then, escape the first $: \$$varname. Finally, force a reevaluation of the expression and assign it: eval newvar=\$$varname. Of what practical use is indirect referencing of variables? It gives Bash a little of the functionality of pointers in C, for instance, in table lookup. And, it also has some other very interesting applications. . . . Nils Radtke shows how to build &quot;dynamic&quot; variable names and evaluate their contents. This can be useful when sourcing configuration files. #!/bin/bash # --------------------------------------------- # This could be &quot;sourced&quot; from a separate file. isdnMyProviderRemoteNet=172.16.0.100 isdnYourProviderRemoteNet=10.0.0.10 isdnOnlineService=&quot;MyProvider&quot; # --------------------------------------------- remoteNet=$(eval &quot;echo \$$(echo isdn${isdnOnlineService}RemoteNet)&quot;) remoteNet=$(eval &quot;echo \$$(echo isdnMyProviderRemoteNet)&quot;) remoteNet=$(eval &quot;echo \$isdnMyProviderRemoteNet&quot;) remoteNet=$(eval &quot;echo $isdnMyProviderRemoteNet&quot;) echo &quot;$remoteNet&quot; # 172.16.0.100 # ================================================================ # And, it gets even better. # Consider the following snippet given a variable named getSparc, #+ but no such variable getIa64: chkMirrorArchs () { arch=&quot;$1&quot;; if [ &quot;$(eval &quot;echo \${$(echo get$(echo -ne $arch | sed 's/^\(.\).*/\1/g' | tr 'a-z' 'A-Z'; echo $arch | sed 's/^.\(.*\)/\1/g')):-false}&quot;)&quot; = true ] then return 0; else return 1; fi; } getSparc=&quot;true&quot; unset getIa64 chkMirrorArchs sparc echo $? # 0 # True chkMirrorArchs Ia64 echo $? # 1 # False # Notes: # ----- # Even the to-be-substituted variable name part is built explicitly. # The parameters to the chkMirrorArchs calls are all lower case. # The variable name is composed of two parts: &quot;get&quot; and &quot;Sparc&quot; . . . Example 28-2. Passing an indirect reference to awk #!/bin/bash # Another version of the &quot;column totaler&quot; script #+ that adds up a specified column (of numbers) in the target file. # This one uses indirect references. ARGS=2 E_WRONGARGS=85 if [ $# -ne &quot;$ARGS&quot; ] # Check for proper number of command-line args. then echo &quot;Usage: `basename $0` filename column-number&quot; exit $E_WRONGARGS fi filename=$1 # Name of file to operate on. column_number=$2 # Which column to total up. #===== Same as original script, up to this point =====# # A multi-line awk script is invoked by # awk &quot; # ... # ... # ... # &quot; # Begin awk script. # ------------------------------------------------- awk &quot; { total += \$${column_number} # Indirect reference } END { print total } &quot; &quot;$filename&quot; # Note that awk doesn't need an eval preceding \$$. # ------------------------------------------------- # End awk script. # Indirect variable reference avoids the hassles #+ of referencing a shell variable within the embedded awk script. # Thanks, Stephane Chazelas. exit $? Caution This method of indirect referencing is a bit tricky. If the second order variable changes its value, then the first order variable must be properly dereferenced (as in the above example). Fortunately, the ${!variable} notation introduced with version 2 of Bash (see Example 37-2 and Example A-22) makes indirect referencing more intuitive. Bash does not support pointer arithmetic, and this severely limits the usefulness of indirect referencing. In fact, indirect referencing in a scripting language is, at best, something of an afterthought. Chapter 29. /dev and /proc A Linux or UNIX filesystem typically has the /dev and /proc special-purpose directories. 29.1. /dev The /dev directory contains entries for the physical devices that may or may not be present in the hardware. [118] Appropriately enough, these are called device files. As an example, the hard drive partitions containing the mounted filesystem(s) have entries in /dev, as df shows. bash$ df Filesystem 1k-blocks Used Available Use% Mounted on /dev/hda6 495876 222748 247527 48% / /dev/hda1 50755 3887 44248 9% /boot /dev/hda8 367013 13262 334803 4% /home /dev/hda5 1714416 1123624 503704 70% /usr Among other things, the /dev directory contains loopback devices, such as /dev/loop0. A loopback device is a gimmick that allows an ordinary file to be accessed as if it were a block device. [119] This permits mounting an entire filesystem within a single large file. See Example 17-8 and Example 17-7. A few of the pseudo-devices in /dev have other specialized uses, such as /dev/null, /dev/zero, /dev/urandom, /dev/sda1 (hard drive partition), /dev/udp (User Datagram Packet port), and /dev/tcp. For instance: To manually mount a USB flash drive, append the following line to /etc/fstab. [120] /dev/sda1 /mnt/flashdrive auto noauto,user,noatime 0 0 (See also Example A-23.) Checking whether a disk is in the CD-burner (soft-linked to /dev/hdc): head -1 /dev/hdc # head: cannot open '/dev/hdc' for reading: No medium found # (No disc in the drive.) # head: error reading '/dev/hdc': Input/output error # (There is a disk in the drive, but it can't be read; #+ possibly it's an unrecorded CDR blank.) # Stream of characters and assorted gibberish # (There is a pre-recorded disk in the drive, #+ and this is raw output -- a stream of ASCII and binary data.) # Here we see the wisdom of using 'head' to limit the output #+ to manageable proportions, rather than 'cat' or something similar. # Now, it's just a matter of checking/parsing the output and taking #+ appropriate action. When executing a command on a /dev/tcp/$host/$port pseudo-device file, Bash opens a TCP connection to the associated socket. A socket is a communications node associated with a specific I/O port. (This is analogous to a hardware socket, or receptacle, for a connecting cable.) It permits data transfer between hardware devices on the same machine, between machines on the same network, between machines across different networks, and, of course, between machines at different locations on the Internet. The following examples assume an active Internet connection. Getting the time from nist.gov: bash$ cat &lt;/dev/tcp/time.nist.gov/13 53082 04-03-18 04:26:54 68 0 0 502.3 UTC(NIST) * [Mark contributed this example.] Generalizing the above into a script: #!/bin/bash # This script must run with root permissions. URL=&quot;time.nist.gov/13&quot; Time=$(cat &lt;/dev/tcp/&quot;$URL&quot;) UTC=$(echo &quot;$Time&quot; | awk '{print$3}') # Third field is UTC (GMT) time. # Exercise: modify this for different time zones. echo &quot;UTC Time = &quot;$UTC&quot;&quot; Downloading a URL: bash$ exec 5&lt;&gt;/dev/tcp/www.net.cn/80 bash$ echo -e &quot;GET / HTTP/1.0\n&quot; &gt;&amp;5 bash$ cat &lt;&amp;5 [Thanks, Mark and Mihai Maties.] Example 29-1. Using /dev/tcp for troubleshooting #!/bin/bash # dev-tcp.sh: /dev/tcp redirection to check Internet connection. # Script by Troy Engel. # Used with permission. TCP_HOST=news-15.net # A known spam-friendly ISP. TCP_PORT=80 # Port 80 is http. # Try to connect. (Somewhat similar to a 'ping' . . .) echo &quot;HEAD / HTTP/1.0&quot; &gt;/dev/tcp/${TCP_HOST}/${TCP_PORT} MYEXIT=$? : &lt;&lt;EXPLANATION If bash was compiled with --enable-net-redirections, it has the capability of using a special character device for both TCP and UDP redirections. These redirections are used identically as STDIN/STDOUT/STDERR. The device entries are 30,36 for /dev/tcp: mknod /dev/tcp c 30 36 &gt;From the bash reference: /dev/tcp/host/port If host is a valid hostname or Internet address, and port is an integer port number or service name, Bash attempts to open a TCP connection to the corresponding socket. EXPLANATION if [ &quot;X$MYEXIT&quot; = &quot;X0&quot; ]; then echo &quot;Connection successful. Exit code: $MYEXIT&quot; else echo &quot;Connection unsuccessful. Exit code: $MYEXIT&quot; fi exit $MYEXIT Example 29-2. Playing music #!/bin/bash # music.sh # Music without external files # Author: Antonio Macchi # Used in ABS Guide with permission. # /dev/dsp default = 8000 frames per second, 8 bits per frame (1 byte), #+ 1 channel (mono) duration=2000 # If 8000 bytes = 1 second, then 2000 = 1/4 second. volume=$'\xc0' # Max volume = \xff (or \x00). mute=$'\x80' # No volume = \x80 (the middle). function mknote () # $1=Note Hz in bytes (e.g. A = 440Hz :: { #+ 8000 fps / 440 = 16 :: A = 16 bytes per second) for t in `seq 0 $duration` do test $(( $t % $1 )) = 0 &amp;&amp; echo -n $volume || echo -n $mute done } e=`mknote 49` g=`mknote 41` a=`mknote 36` b=`mknote 32` c=`mknote 30` cis=`mknote 29` d=`mknote 27` e2=`mknote 24` n=`mknote 32767` # European notation. echo -n &quot;$g$e2$d$c$d$c$a$g$n$g$e$n$g$e2$d$c$c$b$c$cis$n$cis$d \ $n$g$e2$d$c$d$c$a$g$n$g$e$n$g$a$d$c$b$a$b$c&quot; &gt; /dev/dsp # dsp = Digital Signal Processor exit # A &quot;bonny&quot; example of an elegant shell script! 29.2. /proc The /proc directory is actually a pseudo-filesystem. The files in /proc mirror currently running system and kernel processes and contain information and statistics about them. bash$ cat /proc/devices Character devices: 1 mem 2 pty 3 ttyp 4 ttyS 5 cua 7 vcs 10 misc 14 sound 29 fb 36 netlink 128 ptm 136 pts 162 raw 254 pcmcia Block devices: 1 ramdisk 2 fd 3 ide0 9 md bash$ cat /proc/interrupts CPU0 0: 84505 XT-PIC timer 1: 3375 XT-PIC keyboard 2: 0 XT-PIC cascade 5: 1 XT-PIC soundblaster 8: 1 XT-PIC rtc 12: 4231 XT-PIC PS/2 Mouse 14: 109373 XT-PIC ide0 NMI: 0 ERR: 0 bash$ cat /proc/partitions major minor #blocks name rio rmerge rsect ruse wio wmerge wsect wuse running use aveq 3 0 3007872 hda 4472 22260 114520 94240 3551 18703 50384 549710 0 111550 644030 3 1 52416 hda1 27 395 844 960 4 2 14 180 0 800 1140 3 2 1 hda2 0 0 0 0 0 0 0 0 0 0 0 3 4 165280 hda4 10 0 20 210 0 0 0 0 0 210 210 ... bash$ cat /proc/loadavg 0.13 0.42 0.27 2/44 1119 bash$ cat /proc/apm 1.16 1.2 0x03 0x01 0xff 0x80 -1% -1 ? bash$ cat /proc/acpi/battery/BAT0/info present: yes design capacity: 43200 mWh last full capacity: 36640 mWh battery technology: rechargeable design voltage: 10800 mV design capacity warning: 1832 mWh design capacity low: 200 mWh capacity granularity 1: 1 mWh capacity granularity 2: 1 mWh model number: IBM-02K6897 serial number: 1133 battery type: LION OEM info: Panasonic bash$ fgrep Mem /proc/meminfo MemTotal: 515216 kB MemFree: 266248 kB Shell scripts may extract data from certain of the files in /proc. [121] FS=iso # ISO filesystem support in kernel? grep $FS /proc/filesystems # iso9660 kernel_version=$( awk '{ print $3 }' /proc/version ) CPU=$( awk '/model name/ {print $5}' &lt; /proc/cpuinfo ) if [ &quot;$CPU&quot; = &quot;Pentium(R)&quot; ] then run_some_commands ... else run_other_commands ... fi cpu_speed=$( fgrep &quot;cpu MHz&quot; /proc/cpuinfo | awk '{print $4}' ) # Current operating speed (in MHz) of the cpu on your machine. # On a laptop this may vary, depending on use of battery #+ or AC power. #!/bin/bash # get-commandline.sh # Get the command-line parameters of a process. OPTION=cmdline # Identify PID. pid=$( echo $(pidof &quot;$1&quot;) | awk '{ print $1 }' ) # Get only first ^^^^^^^^^^^^^^^^^^ of multiple instances. echo echo &quot;Process ID of (first instance of) &quot;$1&quot; = $pid&quot; echo -n &quot;Command-line arguments: &quot; cat /proc/&quot;$pid&quot;/&quot;$OPTION&quot; | xargs -0 echo # Formats output: ^^^^^^^^^^^^^^^ # (Thanks, Han Holl, for the fixup!) echo; echo # For example: # sh get-commandline.sh xterm + devfile=&quot;/proc/bus/usb/devices&quot; text=&quot;Spd&quot; USB1=&quot;Spd=12&quot; USB2=&quot;Spd=480&quot; bus_speed=$(fgrep -m 1 &quot;$text&quot; $devfile | awk '{print $9}') # ^^^^ Stop after first match. if [ &quot;$bus_speed&quot; = &quot;$USB1&quot; ] then echo &quot;USB 1.1 port found.&quot; # Do something appropriate for USB 1.1. fi Note It is even possible to control certain peripherals with commands sent to the /proc directory. root# echo on &gt; /proc/acpi/ibm/light This turns on the Thinklight in certain models of IBM/Lenovo Thinkpads. (May not work on all Linux distros.) Of course, caution is advised when writing to /proc. The /proc directory contains subdirectories with unusual numerical names. Every one of these names maps to the process ID of a currently running process. Within each of these subdirectories, there are a number of files that hold useful information about the corresponding process. The stat and status files keep running statistics on the process, the cmdline file holds the command-line arguments the process was invoked with, and the exe file is a symbolic link to the complete path name of the invoking process. There are a few more such files, but these seem to be the most interesting from a scripting standpoint. Example 29-3. Finding the process associated with a PID #!/bin/bash # pid-identifier.sh: # Gives complete path name to process associated with pid. ARGNO=1 # Number of arguments the script expects. E_WRONGARGS=65 E_BADPID=66 E_NOSUCHPROCESS=67 E_NOPERMISSION=68 PROCFILE=exe if [ $# -ne $ARGNO ] then echo &quot;Usage: `basename $0` PID-number&quot; &gt;&amp;2 # Error message &gt;stderr. exit $E_WRONGARGS fi pidno=$( ps ax | grep $1 | awk '{ print $1 }' | grep $1 ) # Checks for pid in &quot;ps&quot; listing, field #1. # Then makes sure it is the actual process, not the process invoked by this script. # The last &quot;grep $1&quot; filters out this possibility. # # pidno=$( ps ax | awk '{ print $1 }' | grep $1 ) # also works, as Teemu Huovila, points out. if [ -z &quot;$pidno&quot; ] # If, after all the filtering, the result is a zero-length string, then #+ no running process corresponds to the pid given. echo &quot;No such process running.&quot; exit $E_NOSUCHPROCESS fi # Alternatively: # if ! ps $1 &gt; /dev/null 2&gt;&amp;1 # then # no running process corresponds to the pid given. # echo &quot;No such process running.&quot; # exit $E_NOSUCHPROCESS # fi # To simplify the entire process, use &quot;pidof&quot;. if [ ! -r &quot;/proc/$1/$PROCFILE&quot; ] # Check for read permission. then echo &quot;Process $1 running, but...&quot; echo &quot;Can't get read permission on /proc/$1/$PROCFILE.&quot; exit $E_NOPERMISSION # Ordinary user can't access some files in /proc. fi # The last two tests may be replaced by: # if ! kill -0 $1 &gt; /dev/null 2&gt;&amp;1 # '0' is not a signal, but # this will test whether it is possible # to send a signal to the process. # then echo &quot;PID doesn't exist or you're not its owner&quot; &gt;&amp;2 # exit $E_BADPID # fi exe_file=$( ls -l /proc/$1 | grep &quot;exe&quot; | awk '{ print $11 }' ) # Or exe_file=$( ls -l /proc/$1/exe | awk '{print $11}' ) # # /proc/pid-number/exe is a symbolic link #+ to the complete path name of the invoking process. if [ -e &quot;$exe_file&quot; ] # If /proc/pid-number/exe exists, then #+ then the corresponding process exists. echo &quot;Process #$1 invoked by $exe_file.&quot; else echo &quot;No such process running.&quot; fi # This elaborate script can *almost* be replaced by # ps ax | grep $1 | awk '{ print $5 }' # However, this will not work... #+ because the fifth field of 'ps' is argv[0] of the process, #+ not the executable file path. # # However, either of the following would work. # find /proc/$1/exe -printf '%l\n' # lsof -aFn -p $1 -d txt | sed -ne 's/^n//p' # Additional commentary by Stephane Chazelas. exit 0 Example 29-4. On-line connect status #!/bin/bash # connect-stat.sh # Note that this script may need modification #+ to work with a wireless connection. PROCNAME=pppd # ppp daemon PROCFILENAME=status # Where to look. NOTCONNECTED=85 INTERVAL=2 # Update every 2 seconds. pidno=$( ps ax | grep -v &quot;ps ax&quot; | grep -v grep | grep $PROCNAME | awk '{ print $1 }' ) # Finding the process number of 'pppd', the 'ppp daemon'. # Have to filter out the process lines generated by the search itself. # # However, as Oleg Philon points out, #+ this could have been considerably simplified by using &quot;pidof&quot;. # pidno=$( pidof $PROCNAME ) # # Moral of the story: #+ When a command sequence gets too complex, look for a shortcut. if [ -z &quot;$pidno&quot; ] # If no pid, then process is not running. then echo &quot;Not connected.&quot; # exit $NOTCONNECTED else echo &quot;Connected.&quot;; echo fi while [ true ] # Endless loop, script can be improved here. do if [ ! -e &quot;/proc/$pidno/$PROCFILENAME&quot; ] # While process running, then &quot;status&quot; file exists. then echo &quot;Disconnected.&quot; # exit $NOTCONNECTED fi netstat -s | grep &quot;packets received&quot; # Get some connect statistics. netstat -s | grep &quot;packets delivered&quot; sleep $INTERVAL echo; echo done exit 0 # As it stands, this script must be terminated with a Control-C. # Exercises: # --------- # Improve the script so it exits on a &quot;q&quot; keystroke. # Make the script more user-friendly in other ways. # Fix the script to work with wireless/DSL connections. Warning In general, it is dangerous to write to the files in /proc, as this can corrupt the filesystem or crash the machine. Chapter 30. Network Programming The Net's a cross between an elephant and a white elephant sale: it never forgets, and it's always crap. --Nemo A Linux system has quite a number of tools for accessing, manipulating, and troubleshooting network connections. We can incorporate some of these tools into scripts -- scripts that expand our knowledge of networking, useful scripts that can facilitate the administration of a network. Here is a simple CGI script that demonstrates connecting to a remote server. Example 30-1. Print the server environment #!/bin/bash # test-cgi.sh # by Michael Zick # Used with permission # May have to change the location for your site. # (At the ISP's servers, Bash may not be in the usual place.) # Other places: /usr/bin or /usr/local/bin # Might even try it without any path in sha-bang. # Disable filename globbing. set -f # Header tells browser what to expect. echo Content-type: text/plain echo echo CGI/1.0 test script report: echo echo environment settings: set echo echo whereis bash? whereis bash echo echo who are we? echo ${BASH_VERSINFO[*]} echo echo argc is $#. argv is &quot;$*&quot;. echo # CGI/1.0 expected environment variables. echo SERVER_SOFTWARE = $SERVER_SOFTWARE echo SERVER_NAME = $SERVER_NAME echo GATEWAY_INTERFACE = $GATEWAY_INTERFACE echo SERVER_PROTOCOL = $SERVER_PROTOCOL echo SERVER_PORT = $SERVER_PORT echo REQUEST_METHOD = $REQUEST_METHOD echo HTTP_ACCEPT = &quot;$HTTP_ACCEPT&quot; echo PATH_INFO = &quot;$PATH_INFO&quot; echo PATH_TRANSLATED = &quot;$PATH_TRANSLATED&quot; echo SCRIPT_NAME = &quot;$SCRIPT_NAME&quot; echo QUERY_STRING = &quot;$QUERY_STRING&quot; echo REMOTE_HOST = $REMOTE_HOST echo REMOTE_ADDR = $REMOTE_ADDR echo REMOTE_USER = $REMOTE_USER echo AUTH_TYPE = $AUTH_TYPE echo CONTENT_TYPE = $CONTENT_TYPE echo CONTENT_LENGTH = $CONTENT_LENGTH exit 0 # Here document to give short instructions. :&lt;&lt;-'_test_CGI_' 1) Drop this in your http://domain.name/cgi-bin directory. 2) Then, open http://domain.name/cgi-bin/test-cgi.sh. _test_CGI_ For security purposes, it may be helpful to identify the IP addresses a computer is accessing. Example 30-2. IP addresses #!/bin/bash # ip-addresses.sh # List the IP addresses your computer is connected to. # Inspired by Greg Bledsoe's ddos.sh script, # Linux Journal, 09 March 2011. # URL: # http://www.linuxjournal.com/content/back-dead-simple-bash-complex-ddos # Greg licensed his script under the GPL2, #+ and as a derivative, this script is likewise GPL2. connection_type=TCP # Also try UDP. field=2 # Which field of the output we're interested in. no_match=LISTEN # Filter out records containing this. Why? lsof_args=-ni # -i lists Internet-associated files. # -n preserves numerical IP addresses. # What happens without the -n option? Try it. router=&quot;[0-9][0-9][0-9][0-9][0-9]-&gt;&quot; # Delete the router info. lsof &quot;$lsof_args&quot; | grep $connection_type | grep -v &quot;$no_match&quot; | awk '{print $9}' | cut -d : -f $field | sort | uniq | sed s/&quot;^$router&quot;// # Bledsoe's script assigns the output of a filtered IP list, # (similar to lines 19-22, above) to a variable. # He checks for multiple connections to a single IP address, # then uses: # # iptables -I INPUT -s $ip -p tcp -j REJECT --reject-with tcp-reset # # ... within a 60-second delay loop to bounce packets from DDOS attacks. # Exercise: # -------- # Use the 'iptables' command to extend this script #+ to reject connection attempts from well-known spammer IP domains. More examples of network programming: Getting the time from nist.gov Downloading a URL A GRE tunnel Checking if an Internet server is up Example 16-41 Example A-28 Example A-29 Example 29-1 See also the networking commands in the System and Administrative Commands chapter and the communications commands in the External Filters, Programs and Commands chapter. Chapter 31. Of Zeros and Nulls Faultily faultless, icily regular, splendidly null Dead perfection; no more. --Alfred Lord Tennyson /dev/zero ... /dev/null Uses of /dev/null Think of /dev/null as a black hole. It is essentially the equivalent of a write-only file. Everything written to it disappears. Attempts to read or output from it result in nothing. All the same, /dev/null can be quite useful from both the command-line and in scripts. Suppressing stdout. cat $filename &gt;/dev/null # Contents of the file will not list to stdout. Suppressing stderr (from Example 16-3). rm $badname 2&gt;/dev/null # So error messages [stderr] deep-sixed. Suppressing output from both stdout and stderr. cat $filename 2&gt;/dev/null &gt;/dev/null # If &quot;$filename&quot; does not exist, there will be no error message output. # If &quot;$filename&quot; does exist, the contents of the file will not list to stdout. # Therefore, no output at all will result from the above line of code. # # This can be useful in situations where the return code from a command #+ needs to be tested, but no output is desired. # # cat $filename &amp;&gt;/dev/null # also works, as Baris Cicek points out. Deleting contents of a file, but preserving the file itself, with all attendant permissions (from Example 2-1 and Example 2-3): cat /dev/null &gt; /var/log/messages # : &gt; /var/log/messages has same effect, but does not spawn a new process. cat /dev/null &gt; /var/log/wtmp Automatically emptying the contents of a logfile (especially good for dealing with those nasty &quot;cookies&quot; sent by commercial Web sites): Example 31-1. Hiding the cookie jar # Obsolete Netscape browser. # Same principle applies to newer browsers. if [ -f ~/.netscape/cookies ] # Remove, if exists. then rm -f ~/.netscape/cookies fi ln -s /dev/null ~/.netscape/cookies # All cookies now get sent to a black hole, rather than saved to disk. Uses of /dev/zero Like /dev/null, /dev/zero is a pseudo-device file, but it actually produces a stream of nulls (binary zeros, not the ASCII kind). Output written to /dev/zero disappears, and it is fairly difficult to actually read the nulls emitted there, though it can be done with od or a hex editor. The chief use of /dev/zero is creating an initialized dummy file of predetermined length intended as a temporary swap file. Example 31-2. Setting up a swapfile using /dev/zero #!/bin/bash # Creating a swap file. # A swap file provides a temporary storage cache #+ which helps speed up certain filesystem operations. ROOT_UID=0 # Root has $UID 0. E_WRONG_USER=85 # Not root? FILE=/swap BLOCKSIZE=1024 MINBLOCKS=40 SUCCESS=0 # This script must be run as root. if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo; echo &quot;You must be root to run this script.&quot;; echo exit $E_WRONG_USER fi blocks=${1:-$MINBLOCKS} # Set to default of 40 blocks, #+ if nothing specified on command-line. # This is the equivalent of the command block below. # -------------------------------------------------- # if [ -n &quot;$1&quot; ] # then # blocks=$1 # else # blocks=$MINBLOCKS # fi # -------------------------------------------------- if [ &quot;$blocks&quot; -lt $MINBLOCKS ] then blocks=$MINBLOCKS # Must be at least 40 blocks long. fi ###################################################################### echo &quot;Creating swap file of size $blocks blocks (KB).&quot; dd if=/dev/zero of=$FILE bs=$BLOCKSIZE count=$blocks # Zero out file. mkswap $FILE $blocks # Designate it a swap file. swapon $FILE # Activate swap file. retcode=$? # Everything worked? # Note that if one or more of these commands fails, #+ then it could cause nasty problems. ###################################################################### # Exercise: # Rewrite the above block of code so that if it does not execute #+ successfully, then: # 1) an error message is echoed to stderr, # 2) all temporary files are cleaned up, and # 3) the script exits in an orderly fashion with an #+ appropriate error code. echo &quot;Swap file created and activated.&quot; exit $retcode Another application of /dev/zero is to &quot;zero out&quot; a file of a designated size for a special purpose, such as mounting a filesystem on a loopback device (see Example 17-8) or &quot;securely&quot; deleting a file (see Example 16-61). Example 31-3. Creating a ramdisk #!/bin/bash # ramdisk.sh # A &quot;ramdisk&quot; is a segment of system RAM memory #+ which acts as if it were a filesystem. # Its advantage is very fast access (read/write time). # Disadvantages: volatility, loss of data on reboot or powerdown, #+ less RAM available to system. # # Of what use is a ramdisk? # Keeping a large dataset, such as a table or dictionary on ramdisk, #+ speeds up data lookup, since memory access is much faster than disk access. E_NON_ROOT_USER=70 # Must run as root. ROOTUSER_NAME=root MOUNTPT=/mnt/ramdisk # Create with mkdir /mnt/ramdisk. SIZE=2000 # 2K blocks (change as appropriate) BLOCKSIZE=1024 # 1K (1024 byte) block size DEVICE=/dev/ram0 # First ram device username=`id -nu` if [ &quot;$username&quot; != &quot;$ROOTUSER_NAME&quot; ] then echo &quot;Must be root to run \&quot;`basename $0`\&quot;.&quot; exit $E_NON_ROOT_USER fi if [ ! -d &quot;$MOUNTPT&quot; ] # Test whether mount point already there, then #+ so no error if this script is run mkdir $MOUNTPT #+ multiple times. fi ############################################################################## dd if=/dev/zero of=$DEVICE count=$SIZE bs=$BLOCKSIZE # Zero out RAM device. # Why is this necessary? mke2fs $DEVICE # Create an ext2 filesystem on it. mount $DEVICE $MOUNTPT # Mount it. chmod 777 $MOUNTPT # Enables ordinary user to access ramdisk. # However, must be root to unmount it. ############################################################################## # Need to test whether above commands succeed. Could cause problems otherwise. # Exercise: modify this script to make it safer. echo &quot;\&quot;$MOUNTPT\&quot; now available for use.&quot; # The ramdisk is now accessible for storing files, even by an ordinary user. # Caution, the ramdisk is volatile, and its contents will disappear #+ on reboot or power loss. # Copy anything you want saved to a regular directory. # After reboot, run this script to again set up ramdisk. # Remounting /mnt/ramdisk without the other steps will not work. # Suitably modified, this script can by invoked in /etc/rc.d/rc.local, #+ to set up ramdisk automatically at bootup. # That may be appropriate on, for example, a database server. exit 0 In addition to all the above, /dev/zero is needed by ELF (Executable and Linking Format) UNIX/Linux binaries. Chapter 32. Debugging Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it. --Brian Kernighan The Bash shell contains no built-in debugger, and only bare-bones debugging-specific commands and constructs. Syntax errors or outright typos in the script generate cryptic error messages that are often of no help in debugging a non-functional script. Example 32-1. A buggy script #!/bin/bash # ex74.sh # This is a buggy script. # Where, oh where is the error? a=37 if [$a -gt 27 ] then echo $a fi exit $? # 0! Why? Output from script: ./ex74.sh: [37: command not found What's wrong with the above script? Hint: after the if. Example 32-2. Missing keyword #!/bin/bash # missing-keyword.sh # What error message will this script generate? And why? for a in 1 2 3 do echo &quot;$a&quot; # done # Required keyword 'done' commented out in line 8. exit 0 # Will not exit here! # === # # From command line, after script terminates: echo $? # 2 Output from script: missing-keyword.sh: line 10: syntax error: unexpected end of file Note that the error message does not necessarily reference the line in which the error occurs, but the line where the Bash interpreter finally becomes aware of the error. Error messages may disregard comment lines in a script when reporting the line number of a syntax error. What if the script executes, but does not work as expected? This is the all too familiar logic error. Example 32-3. test24: another buggy script #!/bin/bash # This script is supposed to delete all filenames in current directory #+ containing embedded spaces. # It doesn't work. # Why not? badname=`ls | grep ' '` # Try this: # echo &quot;$badname&quot; rm &quot;$badname&quot; exit 0 Try to find out what's wrong with Example 32-3 by uncommenting the echo &quot;$badname&quot; line. Echo statements are useful for seeing whether what you expect is actually what you get. In this particular case, rm &quot;$badname&quot; will not give the desired results because $badname should not be quoted. Placing it in quotes ensures that rm has only one argument (it will match only one filename). A partial fix is to remove to quotes from $badname and to reset $IFS to contain only a newline, IFS=$'\n'. However, there are simpler ways of going about it. # Correct methods of deleting filenames containing spaces. rm *\ * rm *&quot; &quot;* rm *' '* # Thank you. S.C. Summarizing the symptoms of a buggy script, It bombs with a &quot;syntax error&quot; message, or It runs, but does not work as expected (logic error). It runs, works as expected, but has nasty side effects (logic bomb). Tools for debugging non-working scripts include Inserting echo statements at critical points in the script to trace the variables, and otherwise give a snapshot of what is going on. Tip Even better is an echo that echoes only when debug is on. ### debecho (debug-echo), by Stefano Falsetto ### ### Will echo passed parameters only if DEBUG is set to a value. ### debecho () { if [ ! -z &quot;$DEBUG&quot; ]; then echo &quot;$1&quot; &gt;&amp;2 # ^^^ to stderr fi } DEBUG=on Whatever=whatnot debecho $Whatever # whatnot DEBUG= Whatever=notwhat debecho $Whatever # (Will not echo.) Using the tee filter to check processes or data flows at critical points. Setting option flags -n -v -x sh -n scriptname checks for syntax errors without actually running the script. This is the equivalent of inserting set -n or set -o noexec into the script. Note that certain types of syntax errors can slip past this check. sh -v scriptname echoes each command before executing it. This is the equivalent of inserting set -v or set -o verbose in the script. The -n and -v flags work well together. sh -nv scriptname gives a verbose syntax check. sh -x scriptname echoes the result each command, but in an abbreviated manner. This is the equivalent of inserting set -x or set -o xtrace in the script. Inserting set -u or set -o nounset in the script runs it, but gives an unbound variable error message and aborts the script. set -u # Or set -o nounset # Setting a variable to null will not trigger the error/abort. # unset_var= echo $unset_var # Unset (and undeclared) variable. echo &quot;Should not echo!&quot; # sh t2.sh # t2.sh: line 6: unset_var: unbound variable Using an &quot;assert&quot; function to test a variable or condition at critical points in a script. (This is an idea borrowed from C.) Example 32-4. Testing a condition with an assert #!/bin/bash # assert.sh ####################################################################### assert () # If condition false, { #+ exit from script #+ with appropriate error message. E_PARAM_ERR=98 E_ASSERT_FAILED=99 if [ -z &quot;$2&quot; ] # Not enough parameters passed then #+ to assert() function. return $E_PARAM_ERR # No damage done. fi lineno=$2 if [ ! $1 ] then echo &quot;Assertion failed: \&quot;$1\&quot;&quot; echo &quot;File \&quot;$0\&quot;, line $lineno&quot; # Give name of file and line number. exit $E_ASSERT_FAILED # else # return # and continue executing the script. fi } # Insert a similar assert() function into a script you need to debug. ####################################################################### a=5 b=4 condition=&quot;$a -lt $b&quot; # Error message and exit from script. # Try setting &quot;condition&quot; to something else #+ and see what happens. assert &quot;$condition&quot; $LINENO # The remainder of the script executes only if the &quot;assert&quot; does not fail. # Some commands. # Some more commands . . . echo &quot;This statement echoes only if the \&quot;assert\&quot; does not fail.&quot; # . . . # More commands . . . exit $? Using the $LINENO variable and the caller builtin. Trapping at exit. The exit command in a script triggers a signal 0, terminating the process, that is, the script itself. [122] It is often useful to trap the exit, forcing a &quot;printout&quot; of variables, for example. The trap must be the first command in the script. Trapping signals trap Specifies an action on receipt of a signal; also useful for debugging. A signal is a message sent to a process, either by the kernel or another process, telling it to take some specified action (usually to terminate). For example, hitting a Control-C sends a user interrupt, an INT signal, to a running program. A simple instance: trap '' 2 # Ignore interrupt 2 (Control-C), with no action specified. trap 'echo &quot;Control-C disabled.&quot;' 2 # Message when Control-C pressed. Example 32-5. Trapping at exit #!/bin/bash # Hunting variables with a trap. trap 'echo Variable Listing --- a = $a b = $b' EXIT # EXIT is the name of the signal generated upon exit from a script. # # The command specified by the &quot;trap&quot; doesn't execute until #+ the appropriate signal is sent. echo &quot;This prints before the \&quot;trap\&quot; --&quot; echo &quot;even though the script sees the \&quot;trap\&quot; first.&quot; echo a=39 b=36 exit 0 # Note that commenting out the 'exit' command makes no difference, #+ since the script exits in any case after running out of commands. Example 32-6. Cleaning up after Control-C #!/bin/bash # logon.sh: A quick 'n dirty script to check whether you are on-line yet. umask 177 # Make sure temp files are not world readable. TRUE=1 LOGFILE=/var/log/messages # Note that $LOGFILE must be readable #+ (as root, chmod 644 /var/log/messages). TEMPFILE=temp.$$ # Create a &quot;unique&quot; temp file name, using process id of the script. # Using 'mktemp' is an alternative. # For example: # TEMPFILE=`mktemp temp.XXXXXX` KEYWORD=address # At logon, the line &quot;remote IP address xxx.xxx.xxx.xxx&quot; # appended to /var/log/messages. ONLINE=22 USER_INTERRUPT=13 CHECK_LINES=100 # How many lines in log file to check. trap 'rm -f $TEMPFILE; exit $USER_INTERRUPT' TERM INT # Cleans up the temp file if script interrupted by control-c. echo while [ $TRUE ] #Endless loop. do tail -n $CHECK_LINES $LOGFILE&gt; $TEMPFILE # Saves last 100 lines of system log file as temp file. # Necessary, since newer kernels generate many log messages at log on. search=`grep $KEYWORD $TEMPFILE` # Checks for presence of the &quot;IP address&quot; phrase, #+ indicating a successful logon. if [ ! -z &quot;$search&quot; ] # Quotes necessary because of possible spaces. then echo &quot;On-line&quot; rm -f $TEMPFILE # Clean up temp file. exit $ONLINE else echo -n &quot;.&quot; # The -n option to echo suppresses newline, #+ so you get continuous rows of dots. fi sleep 1 done # Note: if you change the KEYWORD variable to &quot;Exit&quot;, #+ this script can be used while on-line #+ to check for an unexpected logoff. # Exercise: Change the script, per the above note, # and prettify it. exit 0 # Nick Drage suggests an alternate method: while true do ifconfig ppp0 | grep UP 1&gt; /dev/null &amp;&amp; echo &quot;connected&quot; &amp;&amp; exit 0 echo -n &quot;.&quot; # Prints dots (.....) until connected. sleep 2 done # Problem: Hitting Control-C to terminate this process may be insufficient. #+ (Dots may keep on echoing.) # Exercise: Fix this. # Stephane Chazelas has yet another alternative: CHECK_INTERVAL=1 while ! tail -n 1 &quot;$LOGFILE&quot; | grep -q &quot;$KEYWORD&quot; do echo -n . sleep $CHECK_INTERVAL done echo &quot;On-line&quot; # Exercise: Discuss the relative strengths and weaknesses # of each of these various approaches. Example 32-7. A Simple Implementation of a Progress Bar #! /bin/bash # progress-bar2.sh # Author: Graham Ewart (with reformatting by ABS Guide author). # Used in ABS Guide with permission (thanks!). # Invoke this script with bash. It doesn't work with sh. interval=1 long_interval=10 { trap &quot;exit&quot; SIGUSR1 sleep $interval; sleep $interval while true do echo -n '.' # Use dots. sleep $interval done; } &amp; # Start a progress bar as a background process. pid=$! trap &quot;echo !; kill -USR1 $pid; wait $pid&quot; EXIT # To handle ^C. echo -n 'Long-running process ' sleep $long_interval echo ' Finished!' kill -USR1 $pid wait $pid # Stop the progress bar. trap EXIT exit $? Note The DEBUG argument to trap causes a specified action to execute after every command in a script. This permits tracing variables, for example. Example 32-8. Tracing a variable #!/bin/bash trap 'echo &quot;VARIABLE-TRACE&gt; \$variable = \&quot;$variable\&quot;&quot;' DEBUG # Echoes the value of $variable after every command. variable=29; line=$LINENO echo &quot; Just initialized \$variable to $variable in line number $line.&quot; let &quot;variable *= 3&quot;; line=$LINENO echo &quot; Just multiplied \$variable by 3 in line number $line.&quot; exit 0 # The &quot;trap 'command1 . . . command2 . . .' DEBUG&quot; construct is #+ more appropriate in the context of a complex script, #+ where inserting multiple &quot;echo $variable&quot; statements might be #+ awkward and time-consuming. # Thanks, Stephane Chazelas for the pointer. Output of script: VARIABLE-TRACE&gt; $variable = &quot;&quot; VARIABLE-TRACE&gt; $variable = &quot;29&quot; Just initialized $variable to 29. VARIABLE-TRACE&gt; $variable = &quot;29&quot; VARIABLE-TRACE&gt; $variable = &quot;87&quot; Just multiplied $variable by 3. VARIABLE-TRACE&gt; $variable = &quot;87&quot; Of course, the trap command has other uses aside from debugging, such as disabling certain keystrokes within a script (see Example A-43). Example 32-9. Running multiple processes (on an SMP box) #!/bin/bash # parent.sh # Running multiple processes on an SMP box. # Author: Tedman Eng # This is the first of two scripts, #+ both of which must be present in the current working directory. LIMIT=$1 # Total number of process to start NUMPROC=4 # Number of concurrent threads (forks?) PROCID=1 # Starting Process ID echo &quot;My PID is $$&quot; function start_thread() { if [ $PROCID -le $LIMIT ] ; then ./child.sh $PROCID&amp; let &quot;PROCID++&quot; else echo &quot;Limit reached.&quot; wait exit fi } while [ &quot;$NUMPROC&quot; -gt 0 ]; do start_thread; let &quot;NUMPROC--&quot; done while true do trap &quot;start_thread&quot; SIGRTMIN done exit 0 # ======== Second script follows ======== #!/bin/bash # child.sh # Running multiple processes on an SMP box. # This script is called by parent.sh. # Author: Tedman Eng temp=$RANDOM index=$1 shift let &quot;temp %= 5&quot; let &quot;temp += 4&quot; echo &quot;Starting $index Time:$temp&quot; &quot;$@&quot; sleep ${temp} echo &quot;Ending $index&quot; kill -s SIGRTMIN $PPID exit 0 # ======================= SCRIPT AUTHOR'S NOTES ======================= # # It's not completely bug free. # I ran it with limit = 500 and after the first few hundred iterations, #+ one of the concurrent threads disappeared! # Not sure if this is collisions from trap signals or something else. # Once the trap is received, there's a brief moment while executing the #+ trap handler but before the next trap is set. During this time, it may #+ be possible to miss a trap signal, thus miss spawning a child process. # No doubt someone may spot the bug and will be writing #+ . . . in the future. # ===================================================================== # # ----------------------------------------------------------------------# ################################################################# # The following is the original script written by Vernia Damiano. # Unfortunately, it doesn't work properly. ################################################################# #!/bin/bash # Must call script with at least one integer parameter #+ (number of concurrent processes). # All other parameters are passed through to the processes started. INDICE=8 # Total number of process to start TEMPO=5 # Maximum sleep time per process E_BADARGS=65 # No arg(s) passed to script. if [ $# -eq 0 ] # Check for at least one argument passed to script. then echo &quot;Usage: `basename $0` number_of_processes [passed params]&quot; exit $E_BADARGS fi NUMPROC=$1 # Number of concurrent process shift PARAMETRI=( &quot;$@&quot; ) # Parameters of each process function avvia() { local temp local index temp=$RANDOM index=$1 shift let &quot;temp %= $TEMPO&quot; let &quot;temp += 1&quot; echo &quot;Starting $index Time:$temp&quot; &quot;$@&quot; sleep ${temp} echo &quot;Ending $index&quot; kill -s SIGRTMIN $$ } function parti() { if [ $INDICE -gt 0 ] ; then avvia $INDICE &quot;${PARAMETRI[@]}&quot; &amp; let &quot;INDICE--&quot; else trap : SIGRTMIN fi } trap parti SIGRTMIN while [ &quot;$NUMPROC&quot; -gt 0 ]; do parti; let &quot;NUMPROC--&quot; done wait trap - SIGRTMIN exit $? : &lt;&lt;SCRIPT_AUTHOR_COMMENTS I had the need to run a program, with specified options, on a number of different files, using a SMP machine. So I thought [I'd] keep running a specified number of processes and start a new one each time . . . one of these terminates. The &quot;wait&quot; instruction does not help, since it waits for a given process or *all* process started in background. So I wrote [this] bash script that can do the job, using the &quot;trap&quot; instruction. --Vernia Damiano SCRIPT_AUTHOR_COMMENTS Note trap '' SIGNAL (two adjacent apostrophes) disables SIGNAL for the remainder of the script. trap SIGNAL restores the functioning of SIGNAL once more. This is useful to protect a critical portion of a script from an undesirable interrupt. trap '' 2 # Signal 2 is Control-C, now disabled. command command command trap 2 # Reenables Control-C Version 3 of Bash adds the following internal variables for use by the debugger. $BASH_ARGC Number of command-line arguments passed to script, similar to $#. $BASH_ARGV Final command-line parameter passed to script, equivalent ${!#}. $BASH_COMMAND Command currently executing. $BASH_EXECUTION_STRING The option string following the -c option to Bash. $BASH_LINENO In a function, indicates the line number of the function call. $BASH_REMATCH Array variable associated with =~ conditional regex matching. $BASH_SOURCE This is the name of the script, usually the same as $0. $BASH_SUBSHELL Chapter 33. Options Options are settings that change shell and/or script behavior. The set command enables options within a script. At the point in the script where you want the options to take effect, use set -o option-name or, in short form, set -option-abbrev. These two forms are equivalent. #!/bin/bash set -o verbose # Echoes all commands before executing. #!/bin/bash set -v # Exact same effect as above. Note To disable an option within a script, use set +o option-name or set +option-abbrev. #!/bin/bash set -o verbose # Command echoing on. command ... command set +o verbose # Command echoing off. command # Not echoed. set -v # Command echoing on. command ... command set +v # Command echoing off. command exit 0 An alternate method of enabling options in a script is to specify them immediately following the #! script header. #!/bin/bash -x # # Body of script follows. It is also possible to enable script options from the command line. Some options that will not work with set are available this way. Among these are -i, force script to run interactive. bash -v script-name bash -o verbose script-name The following is a listing of some useful options. They may be specified in either abbreviated form (preceded by a single dash) or by complete name (preceded by a double dash or by -o). Table 33-1. Bash options Abbreviation Name Effect -B brace expansion Enable brace expansion (default setting = on) +B brace expansion Disable brace expansion -C noclobber Prevent overwriting of files by redirection (may be overridden by &gt;|) -D (none) List double-quoted strings prefixed by $, but do not execute commands in script -a allexport Export all defined variables -b notify Notify when jobs running in background terminate (not of much use in a script) -c ... (none) Read commands from ... checkjobs Informs user of any open jobs upon shell exit. Introduced in version 4 of Bash, and still &quot;experimental.&quot; Usage: shopt -s checkjobs (Caution: may hang!) -e errexit Abort script at first error, when a command exits with non-zero status (except in until or while loops, if-tests, list constructs) -f noglob Filename expansion (globbing) disabled globstar globbing star-match Enables the ** globbing operator (version 4+ of Bash). Usage: shopt -s globstar -i interactive Script runs in interactive mode -n noexec Read commands in script, but do not execute them (syntax check) -o Option-Name (none) Invoke the Option-Name option -o posix POSIX Change the behavior of Bash, or invoked script, to conform to POSIX standard. -o pipefail pipe failure Causes a pipeline to return the exit status of the last command in the pipe that returned a non-zero return value. -p privileged Script runs as &quot;suid&quot; (caution!) -r restricted Script runs in restricted mode (see Chapter 22). -s stdin Read commands from stdin -t (none) Exit after first command -u nounset Attempt to use undefined variable outputs error message, and forces an exit -v verbose Print each command to stdout before executing it -x xtrace Similar to -v, but expands commands - (none) End of options flag. All other arguments are positional parameters. -- (none) Unset positional parameters. If arguments given (-- arg1 arg2), positional parameters set to arguments. Chapter 34. Gotchas Turandot: Gli enigmi sono tre, la morte una! Caleph: No, no! Gli enigmi sono tre, una la vita! --Puccini Here are some (non-recommended!) scripting practices that will bring excitement into an otherwise dull life. Assigning reserved words or characters to variable names. case=value0 # Causes problems. 23skidoo=value1 # Also problems. # Variable names starting with a digit are reserved by the shell. # Try _23skidoo=value1. Starting variables with an underscore is okay. # However . . . using just an underscore will not work. _=25 echo $_ # $_ is a special variable set to last arg of last command. # But . . . _ is a valid function name! xyz((!*=value2 # Causes severe problems. # As of version 3 of Bash, periods are not allowed within variable names. Using a hyphen or other reserved characters in a variable name (or function name). var-1=23 # Use 'var_1' instead. function-whatever () # Error # Use 'function_whatever ()' instead. # As of version 3 of Bash, periods are not allowed within function names. function.whatever () # Error # Use 'functionWhatever ()' instead. Using the same name for a variable and a function. This can make a script difficult to understand. do_something () { echo &quot;This function does something with \&quot;$1\&quot;.&quot; } do_something=do_something do_something do_something # All this is legal, but highly confusing. Using whitespace inappropriately. In contrast to other programming languages, Bash can be quite finicky about whitespace. var1 = 23 # 'var1=23' is correct. # On line above, Bash attempts to execute command &quot;var1&quot; # with the arguments &quot;=&quot; and &quot;23&quot;. let c = $a - $b # Instead: let c=$a-$b or let &quot;c = $a - $b&quot; if [ $a -le 5] # if [ $a -le 5 ] is correct. # ^^ if [ &quot;$a&quot; -le 5 ] is even better. # [[ $a -le 5 ]] also works. Not terminating with a semicolon the final command in a code block within curly brackets. { ls -l; df; echo &quot;Done.&quot; } # bash: syntax error: unexpected end of file { ls -l; df; echo &quot;Done.&quot;; } # ^ ### Final command needs semicolon. Assuming uninitialized variables (variables before a value is assigned to them) are &quot;zeroed out&quot;. An uninitialized variable has a value of null, not zero. #!/bin/bash echo &quot;uninitialized_var = $uninitialized_var&quot; # uninitialized_var = # However . . . # if $BASH_VERSION ≥ 4.2; then if [[ ! -v uninitialized_var ]] then uninitialized_var=0 # Initialize it to zero! fi Mixing up = and -eq in a test. Remember, = is for comparing literal variables and -eq for integers. if [ &quot;$a&quot; = 273 ] # Is $a an integer or string? if [ &quot;$a&quot; -eq 273 ] # If $a is an integer. # Sometimes you can interchange -eq and = without adverse consequences. # However . . . a=273.0 # Not an integer. if [ &quot;$a&quot; = 273 ] then echo &quot;Comparison works.&quot; else echo &quot;Comparison does not work.&quot; fi # Comparison does not work. # Same with a=&quot; 273&quot; and a=&quot;0273&quot;. # Likewise, problems trying to use &quot;-eq&quot; with non-integer values. if [ &quot;$a&quot; -eq 273.0 ] then echo &quot;a = $a&quot; fi # Aborts with an error message. # test.sh: [: 273.0: integer expression expected Misusing string comparison operators. Example 34-1. Numerical and string comparison are not equivalent #!/bin/bash # bad-op.sh: Trying to use a string comparison on integers. echo number=1 # The following while-loop has two errors: #+ one blatant, and the other subtle. while [ &quot;$number&quot; &lt; 5 ] # Wrong! Should be: while [ &quot;$number&quot; -lt 5 ] do echo -n &quot;$number &quot; let &quot;number += 1&quot; done # Attempt to run this bombs with the error message: #+ bad-op.sh: line 10: 5: No such file or directory # Within single brackets, &quot;&lt;&quot; must be escaped, #+ and even then, it's still wrong for comparing integers. echo &quot;---------------------&quot; while [ &quot;$number&quot; \&lt; 5 ] # 1 2 3 4 do # echo -n &quot;$number &quot; # It *seems* to work, but . . . let &quot;number += 1&quot; #+ it actually does an ASCII comparison, done #+ rather than a numerical one. echo; echo &quot;---------------------&quot; # This can cause problems. For example: lesser=5 greater=105 if [ &quot;$greater&quot; \&lt; &quot;$lesser&quot; ] then echo &quot;$greater is less than $lesser&quot; fi # 105 is less than 5 # In fact, &quot;105&quot; actually is less than &quot;5&quot; #+ in a string comparison (ASCII sort order). echo exit 0 Attempting to use let to set string variables. let &quot;a = hello, you&quot; echo &quot;$a&quot; # 0 Sometimes variables within &quot;test&quot; brackets ([ ]) need to be quoted (double quotes). Failure to do so may cause unexpected behavior. See Example 7-6, Example 20-5, and Example 9-6. Quoting a variable containing whitespace prevents splitting. Sometimes this produces unintended consequences. Commands issued from a script may fail to execute because the script owner lacks execute permission for them. If a user cannot invoke a command from the command-line, then putting it into a script will likewise fail. Try changing the attributes of the command in question, perhaps even setting the suid bit (as root, of course). Attempting to use - as a redirection operator (which it is not) will usually result in an unpleasant surprise. command1 2&gt; - | command2 # Trying to redirect error output of command1 into a pipe . . . # . . . will not work. command1 2&gt;&amp; - | command2 # Also futile. Thanks, S.C. Using Bash version 2+ functionality may cause a bailout with error messages. Older Linux machines may have version 1.XX of Bash as the default installation. #!/bin/bash minimum_version=2 # Since Chet Ramey is constantly adding features to Bash, # you may set $minimum_version to 2.XX, 3.XX, or whatever is appropriate. E_BAD_VERSION=80 if [ &quot;$BASH_VERSION&quot; \&lt; &quot;$minimum_version&quot; ] then echo &quot;This script works only with Bash, version $minimum or greater.&quot; echo &quot;Upgrade strongly recommended.&quot; exit $E_BAD_VERSION fi ... Using Bash-specific functionality in a Bourne shell script (#!/bin/sh) on a non-Linux machine may cause unexpected behavior. A Linux system usually aliases sh to bash, but this does not necessarily hold true for a generic UNIX machine. Using undocumented features in Bash turns out to be a dangerous practice. In previous releases of this book there were several scripts that depended on the &quot;feature&quot; that, although the maximum value of an exit or return value was 255, that limit did not apply to negative integers. Unfortunately, in version 2.05b and later, that loophole disappeared. See Example 24-9. In certain contexts, a misleading exit status may be returned. This may occur when setting a local variable within a function or when assigning an arithmetic value to a variable. The exit status of an arithmetic expression is not equivalent to an error code. var=1 &amp;&amp; ((--var)) &amp;&amp; echo $var # ^^^^^^^^^ Here the and-list terminates with exit status 1. # $var doesn't echo! echo $? # 1 A script with DOS-type newlines (\r\n) will fail to execute, since #!/bin/bash\r\n is not recognized, not the same as the expected #!/bin/bash\n. The fix is to convert the script to UNIX-style newlines. #!/bin/bash echo &quot;Here&quot; unix2dos $0 # Script changes itself to DOS format. chmod 755 $0 # Change back to execute permission. # The 'unix2dos' command removes execute permission. ./$0 # Script tries to run itself again. # But it won't work as a DOS file. echo &quot;There&quot; exit 0 A shell script headed by #!/bin/sh will not run in full Bash-compatibility mode. Some Bash-specific functions might be disabled. Scripts that need complete access to all the Bash-specific extensions should start with #!/bin/bash. Putting whitespace in front of the terminating limit string of a here document will cause unexpected behavior in a script. Putting more than one echo statement in a function whose output is captured. add2 () { echo &quot;Whatever ... &quot; # Delete this line! let &quot;retval = $1 + $2&quot; echo $retval } num1=12 num2=43 echo &quot;Sum of $num1 and $num2 = $(add2 $num1 $num2)&quot; # Sum of 12 and 43 = Whatever ... # 55 # The &quot;echoes&quot; concatenate. This will not work. A script may not export variables back to its parent process, the shell, or to the environment. Just as we learned in biology, a child process can inherit from a parent, but not vice versa. WHATEVER=/home/bozo export WHATEVER exit 0 bash$ echo $WHATEVER bash$ Sure enough, back at the command prompt, $WHATEVER remains unset. Setting and manipulating variables in a subshell, then attempting to use those same variables outside the scope of the subshell will result an unpleasant surprise. Example 34-2. Subshell Pitfalls #!/bin/bash # Pitfalls of variables in a subshell. outer_variable=outer echo echo &quot;outer_variable = $outer_variable&quot; echo ( # Begin subshell echo &quot;outer_variable inside subshell = $outer_variable&quot; inner_variable=inner # Set echo &quot;inner_variable inside subshell = $inner_variable&quot; outer_variable=inner # Will value change globally? echo &quot;outer_variable inside subshell = $outer_variable&quot; # Will 'exporting' make a difference? # export inner_variable # export outer_variable # Try it and see. # End subshell ) echo echo &quot;inner_variable outside subshell = $inner_variable&quot; # Unset. echo &quot;outer_variable outside subshell = $outer_variable&quot; # Unchanged. echo exit 0 # What happens if you uncomment lines 19 and 20? # Does it make a difference? Piping echo output to a read may produce unexpected results. In this scenario, the read acts as if it were running in a subshell. Instead, use the set command (as in Example 15-18). Example 34-3. Piping the output of echo to a read #!/bin/bash # badread.sh: # Attempting to use 'echo and 'read' #+ to assign variables non-interactively. # shopt -s lastpipe a=aaa b=bbb c=ccc echo &quot;one two three&quot; | read a b c # Try to reassign a, b, and c. echo echo &quot;a = $a&quot; # a = aaa echo &quot;b = $b&quot; # b = bbb echo &quot;c = $c&quot; # c = ccc # Reassignment failed. ### However . . . ## Uncommenting line 6: # shopt -s lastpipe ##+ fixes the problem! ### This is a new feature in Bash, version 4.2. # ------------------------------ # Try the following alternative. var=`echo &quot;one two three&quot;` set -- $var a=$1; b=$2; c=$3 echo &quot;-------&quot; echo &quot;a = $a&quot; # a = one echo &quot;b = $b&quot; # b = two echo &quot;c = $c&quot; # c = three # Reassignment succeeded. # ------------------------------ # Note also that an echo to a 'read' works within a subshell. # However, the value of the variable changes *only* within the subshell. a=aaa # Starting all over again. b=bbb c=ccc echo; echo echo &quot;one two three&quot; | ( read a b c; echo &quot;Inside subshell: &quot;; echo &quot;a = $a&quot;; echo &quot;b = $b&quot;; echo &quot;c = $c&quot; ) # a = one # b = two # c = three echo &quot;-----------------&quot; echo &quot;Outside subshell: &quot; echo &quot;a = $a&quot; # a = aaa echo &quot;b = $b&quot; # b = bbb echo &quot;c = $c&quot; # c = ccc echo exit 0 In fact, as Anthony Richardson points out, piping to any loop can cause a similar problem. # Loop piping troubles. # This example by Anthony Richardson, #+ with addendum by Wilbert Berendsen. foundone=false find $HOME -type f -atime +30 -size 100k | while true do read f echo &quot;$f is over 100KB and has not been accessed in over 30 days&quot; echo &quot;Consider moving the file to archives.&quot; foundone=true # ------------------------------------ echo &quot;Subshell level = $BASH_SUBSHELL&quot; # Subshell level = 1 # Yes, we're inside a subshell. # ------------------------------------ done # foundone will always be false here since it is #+ set to true inside a subshell if [ $foundone = false ] then echo &quot;No files need archiving.&quot; fi # =====================Now, here is the correct way:================= foundone=false for f in $(find $HOME -type f -atime +30 -size 100k) # No pipe here. do echo &quot;$f is over 100KB and has not been accessed in over 30 days&quot; echo &quot;Consider moving the file to archives.&quot; foundone=true done if [ $foundone = false ] then echo &quot;No files need archiving.&quot; fi # ==================And here is another alternative================== # Places the part of the script that reads the variables #+ within a code block, so they share the same subshell. # Thank you, W.B. find $HOME -type f -atime +30 -size 100k | { foundone=false while read f do echo &quot;$f is over 100KB and has not been accessed in over 30 days&quot; echo &quot;Consider moving the file to archives.&quot; foundone=true done if ! $foundone then echo &quot;No files need archiving.&quot; fi } A lookalike problem occurs when trying to write the stdout of a tail -f piped to grep. tail -f /var/log/messages | grep &quot;$ERROR_MSG&quot; &gt;&gt; error.log # The &quot;error.log&quot; file will not have anything written to it. # As Samuli Kaipiainen points out, this results from grep #+ buffering its output. # The fix is to add the &quot;--line-buffered&quot; parameter to grep. Using &quot;suid&quot; commands within scripts is risky, as it may compromise system security. [123] Using shell scripts for CGI programming may be problematic. Shell script variables are not &quot;typesafe,&quot; and this can cause undesirable behavior as far as CGI is concerned. Moreover, it is difficult to &quot;cracker-proof&quot; shell scripts. Bash does not handle the double slash (//) string correctly. Bash scripts written for Linux or BSD systems may need fixups to run on a commercial UNIX machine. Such scripts often employ the GNU set of commands and filters, which have greater functionality than their generic UNIX counterparts. This is particularly true of such text processing utilites as tr. Sadly, updates to Bash itself have broken older scripts that used to work perfectly fine. Let us recall how risky it is to use undocumented Bash features. Danger is near thee -- Beware, beware, beware, beware. Many brave hearts are asleep in the deep. So beware -- Beware. --A.J. Lamb and H.W. Petrie Chapter 35. Scripting With Style Get into the habit of writing shell scripts in a structured and systematic manner. Even on-the-fly and &quot;written on the back of an envelope&quot; scripts will benefit if you take a few minutes to plan and organize your thoughts before sitting down and coding. Herewith are a few stylistic guidelines. This is not (necessarily) intended as an Official Shell Scripting Stylesheet. 35.1. Unofficial Shell Scripting Stylesheet Comment your code. This makes it easier for others to understand (and appreciate), and easier for you to maintain. PASS=&quot;$PASS${MATRIX:$(($RANDOM%${#MATRIX})):1}&quot; # It made perfect sense when you wrote it last year, #+ but now it's a complete mystery. # (From Antek Sawicki's &quot;pw.sh&quot; script.) Add descriptive headers to your scripts and functions. #!/bin/bash #************************************************# # xyz.sh # # written by Bozo Bozeman # # July 05, 2001 # # # # Clean up project files. # #************************************************# E_BADDIR=85 # No such directory. projectdir=/home/bozo/projects # Directory to clean up. # --------------------------------------------------------- # # cleanup_pfiles () # # Removes all files in designated directory. # # Parameter: $target_directory # # Returns: 0 on success, $E_BADDIR if something went wrong. # # --------------------------------------------------------- # cleanup_pfiles () { if [ ! -d &quot;$1&quot; ] # Test if target directory exists. then echo &quot;$1 is not a directory.&quot; return $E_BADDIR fi rm -f &quot;$1&quot;/* return 0 # Success. } cleanup_pfiles $projectdir exit $? Avoid using &quot;magic numbers,&quot; [124] that is, &quot;hard-wired&quot; literal constants. Use meaningful variable names instead. This makes the script easier to understand and permits making changes and updates without breaking the application. if [ -f /var/log/messages ] then ... fi # A year later, you decide to change the script to check /var/log/syslog. # It is now necessary to manually change the script, instance by instance, #+ and hope nothing breaks. # A better way: LOGFILE=/var/log/messages # Only line that needs to be changed. if [ -f &quot;$LOGFILE&quot; ] then ... fi Choose descriptive names for variables and functions. fl=`ls -al $dirname` # Cryptic. file_listing=`ls -al $dirname` # Better. MAXVAL=10 # All caps used for a script constant. while [ &quot;$index&quot; -le &quot;$MAXVAL&quot; ] ... E_NOTFOUND=95 # Uppercase for an errorcode, #+ and name prefixed with E_. if [ ! -e &quot;$filename&quot; ] then echo &quot;File $filename not found.&quot; exit $E_NOTFOUND fi MAIL_DIRECTORY=/var/spool/mail/bozo # Uppercase for an environmental export MAIL_DIRECTORY #+ variable. GetAnswer () # Mixed case works well for a { #+ function name, especially prompt=$1 #+ when it improves legibility. echo -n $prompt read answer return $answer } GetAnswer &quot;What is your favorite number? &quot; favorite_number=$? echo $favorite_number _uservariable=23 # Permissible, but not recommended. # It's better for user-defined variables not to start with an underscore. # Leave that for system variables. Use exit codes in a systematic and meaningful way. E_WRONG_ARGS=95 ... ... exit $E_WRONG_ARGS See also Appendix E. Ender suggests using the exit codes in /usr/include/sysexits.h in shell scripts, though these are primarily intended for C and C++ programming. Use standardized parameter flags for script invocation. Ender proposes the following set of flags. -a All: Return all information (including hidden file info). -b Brief: Short version, usually for other scripts. -c Copy, concatenate, etc. -d Daily: Use information from the whole day, and not merely information for a specific instance/user. -e Extended/Elaborate: (often does not include hidden file info). -h Help: Verbose usage w/descs, aux info, discussion, help. See also -V. -l Log output of script. -m Manual: Launch man-page for base command. -n Numbers: Numerical data only. -r Recursive: All files in a directory (and/or all sub-dirs). -s Setup &amp; File Maintenance: Config files for this script. -u Usage: List of invocation flags for the script. -v Verbose: Human readable output, more or less formatted. -V Version / License / Copy(right|left) / Contribs (email too). See also Section G.1. Break complex scripts into simpler modules. Use functions where appropriate. See Example 37-4. Don't use a complex construct where a simpler one will do. COMMAND if [ $? -eq 0 ] ... # Redundant and non-intuitive. if COMMAND ... # More concise (if perhaps not quite as legible). ... reading the UNIX source code to the Bourne shell (/bin/sh). I was shocked at how much simple algorithms could be made cryptic, and therefore useless, by a poor choice of code style. I asked myself, &quot;Could someone be proud of this code?&quot; --Landon Noll Chapter 36. Miscellany Nobody really knows what the Bourne shell's grammar is. Even examination of the source code is little help. --Tom Duff 36.1. Interactive and non-interactive shells and scripts An interactive shell reads commands from user input on a tty. Among other things, such a shell reads startup files on activation, displays a prompt, and enables job control by default. The user can interact with the shell. A shell running a script is always a non-interactive shell. All the same, the script can still access its tty. It is even possible to emulate an interactive shell in a script. #!/bin/bash MY_PROMPT='$ ' while : do echo -n &quot;$MY_PROMPT&quot; read line eval &quot;$line&quot; done exit 0 # This example script, and much of the above explanation supplied by # Stéphane Chazelas (thanks again). Let us consider an interactive script to be one that requires input from the user, usually with read statements (see Example 15-3). &quot;Real life&quot; is actually a bit messier than that. For now, assume an interactive script is bound to a tty, a script that a user has invoked from the console or an xterm. Init and startup scripts are necessarily non-interactive, since they must run without human intervention. Many administrative and system maintenance scripts are likewise non-interactive. Unvarying repetitive tasks cry out for automation by non-interactive scripts. Non-interactive scripts can run in the background, but interactive ones hang, waiting for input that never comes. Handle that difficulty by having an expect script or embedded here document feed input to an interactive script running as a background job. In the simplest case, redirect a file to supply input to a read statement (read variable &lt;file). These particular workarounds make possible general purpose scripts that run in either interactive or non-interactive modes. If a script needs to test whether it is running in an interactive shell, it is simply a matter of finding whether the prompt variable, $PS1 is set. (If the user is being prompted for input, then the script needs to display a prompt.) if [ -z $PS1 ] # no prompt? ### if [ -v PS1 ] # On Bash 4.2+ ... then # non-interactive ... else # interactive ... fi Alternatively, the script can test for the presence of option &quot;i&quot; in the $- flag. case $- in *i*) # interactive shell ;; *) # non-interactive shell ;; # (Courtesy of &quot;UNIX F.A.Q.,&quot; 1993) However, John Lange describes an alternative method, using the -t test operator. # Test for a terminal! fd=0 # stdin # As we recall, the -t test option checks whether the stdin, [ -t 0 ], #+ or stdout, [ -t 1 ], in a given script is running in a terminal. if [ -t &quot;$fd&quot; ] then echo interactive else echo non-interactive fi # But, as John points out: # if [ -t 0 ] works ... when you're logged in locally # but fails when you invoke the command remotely via ssh. # So for a true test you also have to test for a socket. if [[ -t &quot;$fd&quot; || -p /dev/stdin ]] then echo interactive else echo non-interactive fi Note Scripts may be forced to run in interactive mode with the -i option or with a #!/bin/bash -i header. Be aware that this can cause erratic script behavior or show error messages even when no error is present. 36.2. Shell Wrappers A wrapper is a shell script that embeds a system command or utility, that accepts and passes a set of parameters to that command. [125] Wrapping a script around a complex command-line simplifies invoking it. This is expecially useful with sed and awk. A sed or awk script would normally be invoked from the command-line by a sed -e 'commands' or awk 'commands'. Embedding such a script in a Bash script permits calling it more simply, and makes it reusable. This also enables combining the functionality of sed and awk, for example piping the output of a set of sed commands to awk. As a saved executable file, you can then repeatedly invoke it in its original form or modified, without the inconvenience of retyping it on the command-line. Example 36-1. shell wrapper #!/bin/bash # This simple script removes blank lines from a file. # No argument checking. # # You might wish to add something like: # # E_NOARGS=85 # if [ -z &quot;$1&quot; ] # then # echo &quot;Usage: `basename $0` target-file&quot; # exit $E_NOARGS # fi sed -e /^$/d &quot;$1&quot; # Same as # sed -e '/^$/d' filename # invoked from the command-line. # The '-e' means an &quot;editing&quot; command follows (optional here). # '^' indicates the beginning of line, '$' the end. # This matches lines with nothing between the beginning and the end -- #+ blank lines. # The 'd' is the delete command. # Quoting the command-line arg permits #+ whitespace and special characters in the filename. # Note that this script doesn't actually change the target file. # If you need to do that, redirect its output. exit Example 36-2. A slightly more complex shell wrapper #!/bin/bash # subst.sh: a script that substitutes one pattern for #+ another in a file, #+ i.e., &quot;sh subst.sh Smith Jones letter.txt&quot;. # Jones replaces Smith. ARGS=3 # Script requires 3 arguments. E_BADARGS=85 # Wrong number of arguments passed to script. if [ $# -ne &quot;$ARGS&quot; ] then echo &quot;Usage: `basename $0` old-pattern new-pattern filename&quot; exit $E_BADARGS fi old_pattern=$1 new_pattern=$2 if [ -f &quot;$3&quot; ] then file_name=$3 else echo &quot;File \&quot;$3\&quot; does not exist.&quot; exit $E_BADARGS fi # ----------------------------------------------- # Here is where the heavy work gets done. sed -e &quot;s/$old_pattern/$new_pattern/g&quot; $file_name # ----------------------------------------------- # 's' is, of course, the substitute command in sed, #+ and /pattern/ invokes address matching. # The 'g,' or global flag causes substitution for EVERY #+ occurence of $old_pattern on each line, not just the first. # Read the 'sed' docs for an in-depth explanation. exit $? # Redirect the output of this script to write to a file. Example 36-3. A generic shell wrapper that writes to a logfile #!/bin/bash # logging-wrapper.sh # Generic shell wrapper that performs an operation #+ and logs it. DEFAULT_LOGFILE=logfile.txt # Set the following two variables. OPERATION= # Can be a complex chain of commands, #+ for example an awk script or a pipe . . . LOGFILE= if [ -z &quot;$LOGFILE&quot; ] then # If not set, default to ... LOGFILE=&quot;$DEFAULT_LOGFILE&quot; fi # Command-line arguments, if any, for the operation. OPTIONS=&quot;$@&quot; # Log it. echo &quot;`date` + `whoami` + $OPERATION &quot;$@&quot;&quot; &gt;&gt; $LOGFILE # Now, do it. exec $OPERATION &quot;$@&quot; # It's necessary to do the logging before the operation. # Why? Example 36-4. A shell wrapper around an awk script #!/bin/bash # pr-ascii.sh: Prints a table of ASCII characters. START=33 # Range of printable ASCII characters (decimal). END=127 # Will not work for unprintable characters (&gt; 127). echo &quot; Decimal Hex Character&quot; # Header. echo &quot; ------- --- ---------&quot; for ((i=START; i&lt;=END; i++)) do echo $i | awk '{printf(&quot; %3d %2x %c\n&quot;, $1, $1, $1)}' # The Bash printf builtin will not work in this context: # printf &quot;%c&quot; &quot;$i&quot; done exit 0 # Decimal Hex Character # ------- --- --------- # 33 21 ! # 34 22 &quot; # 35 23 # # 36 24 $ # # . . . # # 122 7a z # 123 7b { # 124 7c | # 125 7d } # Redirect the output of this script to a file #+ or pipe it to &quot;more&quot;: sh pr-asc.sh | more Example 36-5. A shell wrapper around another awk script #!/bin/bash # Adds up a specified column (of numbers) in the target file. # Floating-point (decimal) numbers okay, because awk can handle them. ARGS=2 E_WRONGARGS=85 if [ $# -ne &quot;$ARGS&quot; ] # Check for proper number of command-line args. then echo &quot;Usage: `basename $0` filename column-number&quot; exit $E_WRONGARGS fi filename=$1 column_number=$2 # Passing shell variables to the awk part of the script is a bit tricky. # One method is to strong-quote the Bash-script variable #+ within the awk script. # $'$BASH_SCRIPT_VAR' # ^ ^ # This is done in the embedded awk script below. # See the awk documentation for more details. # A multi-line awk script is here invoked by # awk ' # ... # ... # ... # ' # Begin awk script. # ----------------------------- awk ' { total += $'&quot;${column_number}&quot;' } END { print total } ' &quot;$filename&quot; # ----------------------------- # End awk script. # It may not be safe to pass shell variables to an embedded awk script, #+ so Stephane Chazelas proposes the following alternative: # --------------------------------------- # awk -v column_number=&quot;$column_number&quot; ' # { total += $column_number # } # END { # print total # }' &quot;$filename&quot; # --------------------------------------- exit 0 For those scripts needing a single do-it-all tool, a Swiss army knife, there is Perl. Perl combines the capabilities of sed and awk, and throws in a large subset of C, to boot. It is modular and contains support for everything ranging from object-oriented programming up to and including the kitchen sink. Short Perl scripts lend themselves to embedding within shell scripts, and there may be some substance to the claim that Perl can totally replace shell scripting (though the author of the ABS Guide remains skeptical). Example 36-6. Perl embedded in a Bash script #!/bin/bash # Shell commands may precede the Perl script. echo &quot;This precedes the embedded Perl script within \&quot;$0\&quot;.&quot; echo &quot;===============================================================&quot; perl -e 'print &quot;This line prints from an embedded Perl script.\n&quot;;' # Like sed, Perl also uses the &quot;-e&quot; option. echo &quot;===============================================================&quot; echo &quot;However, the script may also contain shell and system commands.&quot; exit 0 It is even possible to combine a Bash script and Perl script within the same file. Depending on how the script is invoked, either the Bash part or the Perl part will execute. Example 36-7. Bash and Perl scripts combined #!/bin/bash # bashandperl.sh echo &quot;Greetings from the Bash part of the script, $0.&quot; # More Bash commands may follow here. exit # End of Bash part of the script. # ======================================================= #!/usr/bin/perl # This part of the script must be invoked with # perl -x bashandperl.sh print &quot;Greetings from the Perl part of the script, $0.\n&quot;; # Perl doesn't seem to like &quot;echo&quot; ... # More Perl commands may follow here. # End of Perl part of the script. bash$ bash bashandperl.sh Greetings from the Bash part of the script. bash$ perl -x bashandperl.sh Greetings from the Perl part of the script. It is, of course, possible to embed even more exotic scripting languages within shell wrappers. Python, for example ... Example 36-8. Python embedded in a Bash script #!/bin/bash # ex56py.sh # Shell commands may precede the Python script. echo &quot;This precedes the embedded Python script within \&quot;$0.\&quot;&quot; echo &quot;===============================================================&quot; python -c 'print &quot;This line prints from an embedded Python script.\n&quot;;' # Unlike sed and perl, Python uses the &quot;-c&quot; option. python -c 'k = raw_input( &quot;Hit a key to exit to outer script. &quot; )' echo &quot;===============================================================&quot; echo &quot;However, the script may also contain shell and system commands.&quot; exit 0 Wrapping a script around mplayer and the Google's translation server, you can create something that talks back to you. Example 36-9. A script that speaks #!/bin/bash # Courtesy of: # http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis) # You must be on-line for this script to work, #+ so you can access the Google translation server. # Of course, mplayer must be present on your computer. speak() { local IFS=+ # Invoke mplayer, then connect to Google translation server. /usr/bin/mplayer -ao alsa -really-quiet -noconsolecontrols \ &quot;http://translate.google.com/translate_tts?tl=en&amp;q=&quot;$*&quot;&quot; # Google translates, but can also speak. } LINES=4 spk=$(tail -$LINES $0) # Tail end of same script! speak &quot;$spk&quot; exit # Browns. Nice talking to you. One interesting example of a complex shell wrapper is Martin Matusiak's undvd script, which provides an easy-to-use command-line interface to the complex mencoder utility. Another example is Itzchak Rehberg's Ext3Undel, a set of scripts to recover deleted file on an ext3 filesystem. 36.3. Tests and Comparisons: Alternatives For tests, the [[ ]] construct may be more appropriate than [ ]. Likewise, arithmetic comparisons might benefit from the (( )) construct. a=8 # All of the comparisons below are equivalent. test &quot;$a&quot; -lt 16 &amp;&amp; echo &quot;yes, $a &lt; 16&quot; # &quot;and list&quot; /bin/test &quot;$a&quot; -lt 16 &amp;&amp; echo &quot;yes, $a &lt; 16&quot; [ &quot;$a&quot; -lt 16 ] &amp;&amp; echo &quot;yes, $a &lt; 16&quot; [[ $a -lt 16 ]] &amp;&amp; echo &quot;yes, $a &lt; 16&quot; # Quoting variables within (( a &lt; 16 )) &amp;&amp; echo &quot;yes, $a &lt; 16&quot; # [[ ]] and (( )) not necessary. city=&quot;New York&quot; # Again, all of the comparisons below are equivalent. test &quot;$city&quot; \&lt; Paris &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot; # Greater ASCII order. /bin/test &quot;$city&quot; \&lt; Paris &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot; [ &quot;$city&quot; \&lt; Paris ] &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot; [[ $city &lt; Paris ]] &amp;&amp; echo &quot;Yes, Paris is greater than $city&quot; # Need not quote $city. # Thank you, S.C. 36.4. Recursion: a script calling itself Can a script recursively call itself? Indeed. Example 36-10. A (useless) script that recursively calls itself #!/bin/bash # recurse.sh # Can a script recursively call itself? # Yes, but is this of any practical use? # (See the following.) RANGE=10 MAXVAL=9 i=$RANDOM let &quot;i %= $RANGE&quot; # Generate a random number between 0 and $RANGE - 1. if [ &quot;$i&quot; -lt &quot;$MAXVAL&quot; ] then echo &quot;i = $i&quot; ./$0 # Script recursively spawns a new instance of itself. fi # Each child script does the same, until #+ a generated $i equals $MAXVAL. # Using a &quot;while&quot; loop instead of an &quot;if/then&quot; test causes problems. # Explain why. exit 0 # Note: # ---- # This script must have execute permission for it to work properly. # This is the case even if it is invoked by an &quot;sh&quot; command. # Explain why. Example 36-11. A (useful) script that recursively calls itself #!/bin/bash # pb.sh: phone book # Written by Rick Boivie, and used with permission. # Modifications by ABS Guide author. MINARGS=1 # Script needs at least one argument. DATAFILE=./phonebook # A data file in current working directory #+ named &quot;phonebook&quot; must exist. PROGNAME=$0 E_NOARGS=70 # No arguments error. if [ $# -lt $MINARGS ]; then echo &quot;Usage: &quot;$PROGNAME&quot; data-to-look-up&quot; exit $E_NOARGS fi if [ $# -eq $MINARGS ]; then grep $1 &quot;$DATAFILE&quot; # 'grep' prints an error message if $DATAFILE not present. else ( shift; &quot;$PROGNAME&quot; $* ) | grep $1 # Script recursively calls itself. fi exit 0 # Script exits here. # Therefore, it's o.k. to put #+ non-hashmarked comments and data after this point. # ------------------------------------------------------------------------ Sample &quot;phonebook&quot; datafile: John Doe 1555 Main St., Baltimore, MD 21228 (410) 222-3333 Mary Moe 9899 Jones Blvd., Warren, NH 03787 (603) 898-3232 Richard Roe 856 E. 7th St., New York, NY 10009 (212) 333-4567 Sam Roe 956 E. 8th St., New York, NY 10009 (212) 444-5678 Zoe Zenobia 4481 N. Baker St., San Francisco, SF 94338 (415) 501-1631 # ------------------------------------------------------------------------ $bash pb.sh Roe Richard Roe 856 E. 7th St., New York, NY 10009 (212) 333-4567 Sam Roe 956 E. 8th St., New York, NY 10009 (212) 444-5678 $bash pb.sh Roe Sam Sam Roe 956 E. 8th St., New York, NY 10009 (212) 444-5678 # When more than one argument is passed to this script, #+ it prints *only* the line(s) containing all the arguments. Example 36-12. Another (useful) script that recursively calls itself #!/bin/bash # usrmnt.sh, written by Anthony Richardson # Used in ABS Guide with permission. # usage: usrmnt.sh # description: mount device, invoking user must be listed in the # MNTUSERS group in the /etc/sudoers file. # ---------------------------------------------------------- # This is a usermount script that reruns itself using sudo. # A user with the proper permissions only has to type # usermount /dev/fd0 /mnt/floppy # instead of # sudo usermount /dev/fd0 /mnt/floppy # I use this same technique for all of my #+ sudo scripts, because I find it convenient. # ---------------------------------------------------------- # If SUDO_COMMAND variable is not set we are not being run through #+ sudo, so rerun ourselves. Pass the user's real and group id . . . if [ -z &quot;$SUDO_COMMAND&quot; ] then mntusr=$(id -u) grpusr=$(id -g) sudo $0 $* exit 0 fi # We will only get here if we are being run by sudo. /bin/mount $* -o uid=$mntusr,gid=$grpusr exit 0 # Additional notes (from the author of this script): # ------------------------------------------------- # 1) Linux allows the &quot;users&quot; option in the /etc/fstab # file so that any user can mount removable media. # But, on a server, I like to allow only a few # individuals access to removable media. # I find using sudo gives me more control. # 2) I also find sudo to be more convenient than # accomplishing this task through groups. # 3) This method gives anyone with proper permissions # root access to the mount command, so be careful # about who you allow access. # You can get finer control over which access can be mounted # by using this same technique in separate mntfloppy, mntcdrom, # and mntsamba scripts. Caution Too many levels of recursion can exhaust the script's stack space, causing a segfault. 36.5. &quot;Colorizing&quot; Scripts The ANSI [126] escape sequences set screen attributes, such as bold text, and color of foreground and background. DOS batch files commonly used ANSI escape codes for color output, and so can Bash scripts. Example 36-13. A &quot;colorized&quot; address database #!/bin/bash # ex30a.sh: &quot;Colorized&quot; version of ex30.sh. # Crude address database clear # Clear the screen. echo -n &quot; &quot; echo -e '\E[37;44m'&quot;\033[1mContact List\033[0m&quot; # White on blue background echo; echo echo -e &quot;\033[1mChoose one of the following persons:\033[0m&quot; # Bold tput sgr0 # Reset attributes. echo &quot;(Enter only the first letter of name.)&quot; echo echo -en '\E[47;34m'&quot;\033[1mE\033[0m&quot; # Blue tput sgr0 # Reset colors to &quot;normal.&quot; echo &quot;vans, Roland&quot; # &quot;[E]vans, Roland&quot; echo -en '\E[47;35m'&quot;\033[1mJ\033[0m&quot; # Magenta tput sgr0 echo &quot;ambalaya, Mildred&quot; echo -en '\E[47;32m'&quot;\033[1mS\033[0m&quot; # Green tput sgr0 echo &quot;mith, Julie&quot; echo -en '\E[47;31m'&quot;\033[1mZ\033[0m&quot; # Red tput sgr0 echo &quot;ane, Morris&quot; echo read person case &quot;$person&quot; in # Note variable is quoted. &quot;E&quot; | &quot;e&quot; ) # Accept upper or lowercase input. echo echo &quot;Roland Evans&quot; echo &quot;4321 Flash Dr.&quot; echo &quot;Hardscrabble, CO 80753&quot; echo &quot;(303) 734-9874&quot; echo &quot;(303) 734-9892 fax&quot; echo &quot;revans@zzy.net&quot; echo &quot;Business partner &amp; old friend&quot; ;; &quot;J&quot; | &quot;j&quot; ) echo echo &quot;Mildred Jambalaya&quot; echo &quot;249 E. 7th St., Apt. 19&quot; echo &quot;New York, NY 10009&quot; echo &quot;(212) 533-2814&quot; echo &quot;(212) 533-9972 fax&quot; echo &quot;milliej@loisaida.com&quot; echo &quot;Girlfriend&quot; echo &quot;Birthday: Feb. 11&quot; ;; # Add info for Smith &amp; Zane later. * ) # Default option. # Empty input (hitting RETURN) fits here, too. echo echo &quot;Not yet in database.&quot; ;; esac tput sgr0 # Reset colors to &quot;normal.&quot; echo exit 0 Example 36-14. Drawing a box #!/bin/bash # Draw-box.sh: Drawing a box using ASCII characters. # Script by Stefano Palmeri, with minor editing by document author. # Minor edits suggested by Jim Angstadt. # Used in the ABS Guide with permission. ###################################################################### ### draw_box function doc ### # The &quot;draw_box&quot; function lets the user #+ draw a box in a terminal. # # Usage: draw_box ROW COLUMN HEIGHT WIDTH [COLOR] # ROW and COLUMN represent the position #+ of the upper left angle of the box you're going to draw. # ROW and COLUMN must be greater than 0 #+ and less than current terminal dimension. # HEIGHT is the number of rows of the box, and must be &gt; 0. # HEIGHT + ROW must be &lt;= than current terminal height. # WIDTH is the number of columns of the box and must be &gt; 0. # WIDTH + COLUMN must be &lt;= than current terminal width. # # E.g.: If your terminal dimension is 20x80, # draw_box 2 3 10 45 is good # draw_box 2 3 19 45 has bad HEIGHT value (19+2 &gt; 20) # draw_box 2 3 18 78 has bad WIDTH value (78+3 &gt; 80) # # COLOR is the color of the box frame. # This is the 5th argument and is optional. # 0=black 1=red 2=green 3=tan 4=blue 5=purple 6=cyan 7=white. # If you pass the function bad arguments, #+ it will just exit with code 65, #+ and no messages will be printed on stderr. # # Clear the terminal before you start to draw a box. # The clear command is not contained within the function. # This allows the user to draw multiple boxes, even overlapping ones. ### end of draw_box function doc ### ###################################################################### draw_box(){ #=============# HORZ=&quot;-&quot; VERT=&quot;|&quot; CORNER_CHAR=&quot;+&quot; MINARGS=4 E_BADARGS=65 #=============# if [ $# -lt &quot;$MINARGS&quot; ]; then # If args are less than 4, exit. exit $E_BADARGS fi # Looking for non digit chars in arguments. # Probably it could be done better (exercise for the reader?). if echo $@ | tr -d [:blank:] | tr -d [:digit:] | grep . &amp;&gt; /dev/null; then exit $E_BADARGS fi BOX_HEIGHT=`expr $3 - 1` # -1 correction needed because angle char &quot;+&quot; BOX_WIDTH=`expr $4 - 1` #+ is a part of both box height and width. T_ROWS=`tput lines` # Define current terminal dimension T_COLS=`tput cols` #+ in rows and columns. if [ $1 -lt 1 ] || [ $1 -gt $T_ROWS ]; then # Start checking if arguments exit $E_BADARGS #+ are correct. fi if [ $2 -lt 1 ] || [ $2 -gt $T_COLS ]; then exit $E_BADARGS fi if [ `expr $1 + $BOX_HEIGHT + 1` -gt $T_ROWS ]; then exit $E_BADARGS fi if [ `expr $2 + $BOX_WIDTH + 1` -gt $T_COLS ]; then exit $E_BADARGS fi if [ $3 -lt 1 ] || [ $4 -lt 1 ]; then exit $E_BADARGS fi # End checking arguments. plot_char(){ # Function within a function. echo -e &quot;\E[${1};${2}H&quot;$3 } echo -ne &quot;\E[3${5}m&quot; # Set box frame color, if defined. # start drawing the box count=1 # Draw vertical lines using for (( r=$1; count&lt;=$BOX_HEIGHT; r++)); do #+ plot_char function. plot_char $r $2 $VERT let count=count+1 done count=1 c=`expr $2 + $BOX_WIDTH` for (( r=$1; count&lt;=$BOX_HEIGHT; r++)); do plot_char $r $c $VERT let count=count+1 done count=1 # Draw horizontal lines using for (( c=$2; count&lt;=$BOX_WIDTH; c++)); do #+ plot_char function. plot_char $1 $c $HORZ let count=count+1 done count=1 r=`expr $1 + $BOX_HEIGHT` for (( c=$2; count&lt;=$BOX_WIDTH; c++)); do plot_char $r $c $HORZ let count=count+1 done plot_char $1 $2 $CORNER_CHAR # Draw box angles. plot_char $1 `expr $2 + $BOX_WIDTH` $CORNER_CHAR plot_char `expr $1 + $BOX_HEIGHT` $2 $CORNER_CHAR plot_char `expr $1 + $BOX_HEIGHT` `expr $2 + $BOX_WIDTH` $CORNER_CHAR echo -ne &quot;\E[0m&quot; # Restore old colors. P_ROWS=`expr $T_ROWS - 1` # Put the prompt at bottom of the terminal. echo -e &quot;\E[${P_ROWS};1H&quot; } # Now, let's try drawing a box. clear # Clear the terminal. R=2 # Row C=3 # Column H=10 # Height W=45 # Width col=1 # Color (red) draw_box $R $C $H $W $col # Draw the box. exit 0 # Exercise: # -------- # Add the option of printing text within the drawn box. The simplest, and perhaps most useful ANSI escape sequence is bold text, \033[1m ... \033[0m. The \033 represents an escape, the &quot;[1&quot; turns on the bold attribute, while the &quot;[0&quot; switches it off. The &quot;m&quot; terminates each term of the escape sequence. bash$ echo -e &quot;\033[1mThis is bold text.\033[0m&quot; A similar escape sequence switches on the underline attribute (on an rxvt and an aterm). bash$ echo -e &quot;\033[4mThis is underlined text.\033[0m&quot; Note With an echo, the -e option enables the escape sequences. Other escape sequences change the text and/or background color. bash$ echo -e '\E[34;47mThis prints in blue.'; tput sgr0 bash$ echo -e '\E[33;44m'&quot;yellow text on blue background&quot;; tput sgr0 bash$ echo -e '\E[1;33;44m'&quot;BOLD yellow text on blue background&quot;; tput sgr0 Note It's usually advisable to set the bold attribute for light-colored foreground text. The tput sgr0 restores the terminal settings to normal. Omitting this lets all subsequent output from that particular terminal remain blue. Note Since tput sgr0 fails to restore terminal settings under certain circumstances, echo -ne \E[0m may be a better choice. Use the following template for writing colored text on a colored background. echo -e '\E[COLOR1;COLOR2mSome text goes here.' The &quot;\E[&quot; begins the escape sequence. The semicolon-separated numbers &quot;COLOR1&quot; and &quot;COLOR2&quot; specify a foreground and a background color, according to the table below. (The order of the numbers does not matter, since the foreground and background numbers fall in non-overlapping ranges.) The &quot;m&quot; terminates the escape sequence, and the text begins immediately after that. Note also that single quotes enclose the remainder of the command sequence following the echo -e. The numbers in the following table work for an rxvt terminal. Results may vary for other terminal emulators. Table 36-1. Numbers representing colors in Escape Sequences Color Foreground Background black 30 40 red 31 41 green 32 42 yellow 33 43 blue 34 44 magenta 35 45 cyan 36 46 white 37 47 Example 36-15. Echoing colored text #!/bin/bash # color-echo.sh: Echoing text messages in color. # Modify this script for your own purposes. # It's easier than hand-coding color. black='\E[30;47m' red='\E[31;47m' green='\E[32;47m' yellow='\E[33;47m' blue='\E[34;47m' magenta='\E[35;47m' cyan='\E[36;47m' white='\E[37;47m' alias Reset=&quot;tput sgr0&quot; # Reset text attributes to normal #+ without clearing screen. cecho () # Color-echo. # Argument $1 = message # Argument $2 = color { local default_msg=&quot;No message passed.&quot; # Doesn't really need to be a local variable. message=${1:-$default_msg} # Defaults to default message. color=${2:-$black} # Defaults to black, if not specified. echo -e &quot;$color&quot; echo &quot;$message&quot; Reset # Reset to normal. return } # Now, let's try it out. # ---------------------------------------------------- cecho &quot;Feeling blue...&quot; $blue cecho &quot;Magenta looks more like purple.&quot; $magenta cecho &quot;Green with envy.&quot; $green cecho &quot;Seeing red?&quot; $red cecho &quot;Cyan, more familiarly known as aqua.&quot; $cyan cecho &quot;No color passed (defaults to black).&quot; # Missing $color argument. cecho &quot;\&quot;Empty\&quot; color passed (defaults to black).&quot; &quot;&quot; # Empty $color argument. cecho # Missing $message and $color arguments. cecho &quot;&quot; &quot;&quot; # Empty $message and $color arguments. # ---------------------------------------------------- echo exit 0 # Exercises: # --------- # 1) Add the &quot;bold&quot; attribute to the 'cecho ()' function. # 2) Add options for colored backgrounds. Example 36-16. A &quot;horserace&quot; game #!/bin/bash # horserace.sh: Very simple horserace simulation. # Author: Stefano Palmeri # Used with permission. ################################################################ # Goals of the script: # playing with escape sequences and terminal colors. # # Exercise: # Edit the script to make it run less randomly, #+ set up a fake betting shop . . . # Um . . . um . . . it's starting to remind me of a movie . . . # # The script gives each horse a random handicap. # The odds are calculated upon horse handicap #+ and are expressed in European(?) style. # E.g., odds=3.75 means that if you bet $1 and win, #+ you receive $3.75. # # The script has been tested with a GNU/Linux OS, #+ using xterm and rxvt, and konsole. # On a machine with an AMD 900 MHz processor, #+ the average race time is 75 seconds. # On faster computers the race time would be lower. # So, if you want more suspense, reset the USLEEP_ARG variable. # # Script by Stefano Palmeri. ################################################################ E_RUNERR=65 # Check if md5sum and bc are installed. if ! which bc &amp;&gt; /dev/null; then echo bc is not installed. echo &quot;Can\'t run . . . &quot; exit $E_RUNERR fi if ! which md5sum &amp;&gt; /dev/null; then echo md5sum is not installed. echo &quot;Can\'t run . . . &quot; exit $E_RUNERR fi # Set the following variable to slow down script execution. # It will be passed as the argument for usleep (man usleep) #+ and is expressed in microseconds (500000 = half a second). USLEEP_ARG=0 # Clean up the temp directory, restore terminal cursor and #+ terminal colors -- if script interrupted by Ctl-C. trap 'echo -en &quot;\E[?25h&quot;; echo -en &quot;\E[0m&quot;; stty echo;\ tput cup 20 0; rm -fr $HORSE_RACE_TMP_DIR' TERM EXIT # See the chapter on debugging for an explanation of 'trap.' # Set a unique (paranoid) name for the temp directory the script needs. HORSE_RACE_TMP_DIR=$HOME/.horserace-`date +%s`-`head -c10 /dev/urandom \ | md5sum | head -c30` # Create the temp directory and move right in. mkdir $HORSE_RACE_TMP_DIR cd $HORSE_RACE_TMP_DIR # This function moves the cursor to line $1 column $2 and then prints $3. # E.g.: &quot;move_and_echo 5 10 linux&quot; is equivalent to #+ &quot;tput cup 4 9; echo linux&quot;, but with one command instead of two. # Note: &quot;tput cup&quot; defines 0 0 the upper left angle of the terminal, #+ echo defines 1 1 the upper left angle of the terminal. move_and_echo() { echo -ne &quot;\E[${1};${2}H&quot;&quot;$3&quot; } # Function to generate a pseudo-random number between 1 and 9. random_1_9 () { head -c10 /dev/urandom | md5sum | tr -d [a-z] | tr -d 0 | cut -c1 } # Two functions that simulate &quot;movement,&quot; when drawing the horses. draw_horse_one() { echo -n &quot; &quot;//$MOVE_HORSE// } draw_horse_two(){ echo -n &quot; &quot;\\\\$MOVE_HORSE\\\\ } # Define current terminal dimension. N_COLS=`tput cols` N_LINES=`tput lines` # Need at least a 20-LINES X 80-COLUMNS terminal. Check it. if [ $N_COLS -lt 80 ] || [ $N_LINES -lt 20 ]; then echo &quot;`basename $0` needs a 80-cols X 20-lines terminal.&quot; echo &quot;Your terminal is ${N_COLS}-cols X ${N_LINES}-lines.&quot; exit $E_RUNERR fi # Start drawing the race field. # Need a string of 80 chars. See below. BLANK80=`seq -s &quot;&quot; 100 | head -c80` clear # Set foreground and background colors to white. echo -ne '\E[37;47m' # Move the cursor on the upper left angle of the terminal. tput cup 0 0 # Draw six white lines. for n in `seq 5`; do echo $BLANK80 # Use the 80 chars string to colorize the terminal. done # Sets foreground color to black. echo -ne '\E[30m' move_and_echo 3 1 &quot;START 1&quot; move_and_echo 3 75 FINISH move_and_echo 1 5 &quot;|&quot; move_and_echo 1 80 &quot;|&quot; move_and_echo 2 5 &quot;|&quot; move_and_echo 2 80 &quot;|&quot; move_and_echo 4 5 &quot;| 2&quot; move_and_echo 4 80 &quot;|&quot; move_and_echo 5 5 &quot;V 3&quot; move_and_echo 5 80 &quot;V&quot; # Set foreground color to red. echo -ne '\E[31m' # Some ASCII art. move_and_echo 1 8 &quot;..@@@..@@@@@...@@@@@.@...@..@@@@...&quot; move_and_echo 2 8 &quot;.@...@...@.......@...@...@.@.......&quot; move_and_echo 3 8 &quot;.@@@@@...@.......@...@@@@@.@@@@....&quot; move_and_echo 4 8 &quot;.@...@...@.......@...@...@.@.......&quot; move_and_echo 5 8 &quot;.@...@...@.......@...@...@..@@@@...&quot; move_and_echo 1 43 &quot;@@@@...@@@...@@@@..@@@@..@@@@.&quot; move_and_echo 2 43 &quot;@...@.@...@.@.....@.....@.....&quot; move_and_echo 3 43 &quot;@@@@..@@@@@.@.....@@@@...@@@..&quot; move_and_echo 4 43 &quot;@..@..@...@.@.....@.........@.&quot; move_and_echo 5 43 &quot;@...@.@...@..@@@@..@@@@.@@@@..&quot; # Set foreground and background colors to green. echo -ne '\E[32;42m' # Draw eleven green lines. tput cup 5 0 for n in `seq 11`; do echo $BLANK80 done # Set foreground color to black. echo -ne '\E[30m' tput cup 5 0 # Draw the fences. echo &quot;++++++++++++++++++++++++++++++++++++++\ ++++++++++++++++++++++++++++++++++++++++++&quot; tput cup 15 0 echo &quot;++++++++++++++++++++++++++++++++++++++\ ++++++++++++++++++++++++++++++++++++++++++&quot; # Set foreground and background colors to white. echo -ne '\E[37;47m' # Draw three white lines. for n in `seq 3`; do echo $BLANK80 done # Set foreground color to black. echo -ne '\E[30m' # Create 9 files to stores handicaps. for n in `seq 10 7 68`; do touch $n done # Set the first type of &quot;horse&quot; the script will draw. HORSE_TYPE=2 # Create position-file and odds-file for every &quot;horse&quot;. #+ In these files, store the current position of the horse, #+ the type and the odds. for HN in `seq 9`; do touch horse_${HN}_position touch odds_${HN} echo \-1 &gt; horse_${HN}_position echo $HORSE_TYPE &gt;&gt; horse_${HN}_position # Define a random handicap for horse. HANDICAP=`random_1_9` # Check if the random_1_9 function returned a good value. while ! echo $HANDICAP | grep [1-9] &amp;&gt; /dev/null; do HANDICAP=`random_1_9` done # Define last handicap position for horse. LHP=`expr $HANDICAP \* 7 + 3` for FILE in `seq 10 7 $LHP`; do echo $HN &gt;&gt; $FILE done # Calculate odds. case $HANDICAP in 1) ODDS=`echo $HANDICAP \* 0.25 + 1.25 | bc` echo $ODDS &gt; odds_${HN} ;; 2 | 3) ODDS=`echo $HANDICAP \* 0.40 + 1.25 | bc` echo $ODDS &gt; odds_${HN} ;; 4 | 5 | 6) ODDS=`echo $HANDICAP \* 0.55 + 1.25 | bc` echo $ODDS &gt; odds_${HN} ;; 7 | 8) ODDS=`echo $HANDICAP \* 0.75 + 1.25 | bc` echo $ODDS &gt; odds_${HN} ;; 9) ODDS=`echo $HANDICAP \* 0.90 + 1.25 | bc` echo $ODDS &gt; odds_${HN} esac done # Print odds. print_odds() { tput cup 6 0 echo -ne '\E[30;42m' for HN in `seq 9`; do echo &quot;#$HN odds-&gt;&quot; `cat odds_${HN}` done } # Draw the horses at starting line. draw_horses() { tput cup 6 0 echo -ne '\E[30;42m' for HN in `seq 9`; do echo /\\$HN/\\&quot; &quot; done } print_odds echo -ne '\E[47m' # Wait for a enter key press to start the race. # The escape sequence '\E[?25l' disables the cursor. tput cup 17 0 echo -e '\E[?25l'Press [enter] key to start the race... read -s # Disable normal echoing in the terminal. # This avoids key presses that might &quot;contaminate&quot; the screen #+ during the race. stty -echo # -------------------------------------------------------- # Start the race. draw_horses echo -ne '\E[37;47m' move_and_echo 18 1 $BLANK80 echo -ne '\E[30m' move_and_echo 18 1 Starting... sleep 1 # Set the column of the finish line. WINNING_POS=74 # Define the time the race started. START_TIME=`date +%s` # COL variable needed by following &quot;while&quot; construct. COL=0 while [ $COL -lt $WINNING_POS ]; do MOVE_HORSE=0 # Check if the random_1_9 function has returned a good value. while ! echo $MOVE_HORSE | grep [1-9] &amp;&gt; /dev/null; do MOVE_HORSE=`random_1_9` done # Define old type and position of the &quot;randomized horse&quot;. HORSE_TYPE=`cat horse_${MOVE_HORSE}_position | tail -n 1` COL=$(expr `cat horse_${MOVE_HORSE}_position | head -n 1`) ADD_POS=1 # Check if the current position is an handicap position. if seq 10 7 68 | grep -w $COL &amp;&gt; /dev/null; then if grep -w $MOVE_HORSE $COL &amp;&gt; /dev/null; then ADD_POS=0 grep -v -w $MOVE_HORSE $COL &gt; ${COL}_new rm -f $COL mv -f ${COL}_new $COL else ADD_POS=1 fi else ADD_POS=1 fi COL=`expr $COL + $ADD_POS` echo $COL &gt; horse_${MOVE_HORSE}_position # Store new position. # Choose the type of horse to draw. case $HORSE_TYPE in 1) HORSE_TYPE=2; DRAW_HORSE=draw_horse_two ;; 2) HORSE_TYPE=1; DRAW_HORSE=draw_horse_one esac echo $HORSE_TYPE &gt;&gt; horse_${MOVE_HORSE}_position # Store current type. # Set foreground color to black and background to green. echo -ne '\E[30;42m' # Move the cursor to new horse position. tput cup `expr $MOVE_HORSE + 5` \ `cat horse_${MOVE_HORSE}_position | head -n 1` # Draw the horse. $DRAW_HORSE usleep $USLEEP_ARG # When all horses have gone beyond field line 15, reprint odds. touch fieldline15 if [ $COL = 15 ]; then echo $MOVE_HORSE &gt;&gt; fieldline15 fi if [ `wc -l fieldline15 | cut -f1 -d &quot; &quot;` = 9 ]; then print_odds : &gt; fieldline15 fi # Define the leading horse. HIGHEST_POS=`cat *position | sort -n | tail -1` # Set background color to white. echo -ne '\E[47m' tput cup 17 0 echo -n Current leader: `grep -w $HIGHEST_POS *position | cut -c7`\ &quot; &quot; done # Define the time the race finished. FINISH_TIME=`date +%s` # Set background color to green and enable blinking text. echo -ne '\E[30;42m' echo -en '\E[5m' # Make the winning horse blink. tput cup `expr $MOVE_HORSE + 5` \ `cat horse_${MOVE_HORSE}_position | head -n 1` $DRAW_HORSE # Disable blinking text. echo -en '\E[25m' # Set foreground and background color to white. echo -ne '\E[37;47m' move_and_echo 18 1 $BLANK80 # Set foreground color to black. echo -ne '\E[30m' # Make winner blink. tput cup 17 0 echo -e &quot;\E[5mWINNER: $MOVE_HORSE\E[25m&quot;&quot; Odds: `cat odds_${MOVE_HORSE}`&quot;\ &quot; Race time: `expr $FINISH_TIME - $START_TIME` secs&quot; # Restore cursor and old colors. echo -en &quot;\E[?25h&quot; echo -en &quot;\E[0m&quot; # Restore echoing. stty echo # Remove race temp directory. rm -rf $HORSE_RACE_TMP_DIR tput cup 19 0 exit 0 See also Example A-21, Example A-44, Example A-52, and Example A-40. Caution There is, however, a major problem with all this. ANSI escape sequences are emphatically non-portable. What works fine on some terminal emulators (or the console) may work differently, or not at all, on others. A &quot;colorized&quot; script that looks stunning on the script author's machine may produce unreadable output on someone else's. This somewhat compromises the usefulness of colorizing scripts, and possibly relegates this technique to the status of a gimmick. Colorized scripts are probably inappropriate in a commercial setting, i.e., your supervisor might disapprove. Alister's ansi-color utility (based on Moshe Jacobson's color utility considerably simplifies using ANSI escape sequences. It substitutes a clean and logical syntax for the clumsy constructs just discussed. Henry/teikedvl has likewise created a utility (http://scriptechocolor.sourceforge.net/) to simplify creation of colorized scripts. 36.6. Optimizations Most shell scripts are quick 'n dirty solutions to non-complex problems. As such, optimizing them for speed is not much of an issue. Consider the case, though, where a script carries out an important task, does it well, but runs too slowly. Rewriting it in a compiled language may not be a palatable option. The simplest fix would be to rewrite the parts of the script that slow it down. Is it possible to apply principles of code optimization even to a lowly shell script? Check the loops in the script. Time consumed by repetitive operations adds up quickly. If at all possible, remove time-consuming operations from within loops. Use builtin commands in preference to system commands. Builtins execute faster and usually do not launch a subshell when invoked. Avoid unnecessary commands, particularly in a pipe. cat &quot;$file&quot; | grep &quot;$word&quot; grep &quot;$word&quot; &quot;$file&quot; # The above command-lines have an identical effect, #+ but the second runs faster since it launches one fewer subprocess. The cat command seems especially prone to overuse in scripts. Disabling certain Bash options can speed up scripts. As Erik Brandsberg points out: If you don't need Unicode support, you can get potentially a 2x or more improvement in speed by simply setting the LC_ALL variable. export LC_ALL=C [specifies the locale as ANSI C, thereby disabling Unicode support] [In an example script ...] Without [Unicode support]: erik@erik-desktop:~/capture$ time ./cap-ngrep.sh live2.pcap &gt; out.txt real 0m20.483s user 1m34.470s sys 0m12.869s With [Unicode support]: erik@erik-desktop:~/capture$ time ./cap-ngrep.sh live2.pcap &gt; out.txt real 0m50.232s user 3m51.118s sys 0m11.221s A large part of the overhead that is optimized is, I believe, regex match using [[ string =~ REGEX ]], but it may help with other portions of the code as well. I hadn't [seen it] mentioned that this optimization helped with Bash, but I had seen it helped with &quot;grep,&quot; so why not try? Note Certain operators, notably expr, are very inefficient and might be replaced by double parentheses arithmetic expansion. See Example A-59. Math tests math via $(( )) real 0m0.294s user 0m0.288s sys 0m0.008s math via expr: real 1m17.879s # Much slower! user 0m3.600s sys 0m8.765s math via let: real 0m0.364s user 0m0.372s sys 0m0.000s Condition testing constructs in scripts deserve close scrutiny. Substitute case for if-then constructs and combine tests when possible, to minimize script execution time. Again, refer to Example A-59. Test using &quot;case&quot; construct: real 0m0.329s user 0m0.320s sys 0m0.000s Test with if [], no quotes: real 0m0.438s user 0m0.432s sys 0m0.008s Test with if [], quotes: real 0m0.476s user 0m0.452s sys 0m0.024s Test with if [], using -eq: real 0m0.457s user 0m0.456s sys 0m0.000s Note Erik Brandsberg recommends using associative arrays in preference to conventional numeric-indexed arrays in most cases. When overwriting values in a numeric array, there is a significant performance penalty vs. associative arrays. Running a test script confirms this. See Example A-60. Assignment tests Assigning a simple variable real 0m0.418s user 0m0.416s sys 0m0.004s Assigning a numeric index array entry real 0m0.582s user 0m0.564s sys 0m0.016s Overwriting a numeric index array entry real 0m21.931s user 0m21.913s sys 0m0.016s Linear reading of numeric index array real 0m0.422s user 0m0.416s sys 0m0.004s Assigning an associative array entry real 0m1.800s user 0m1.796s sys 0m0.004s Overwriting an associative array entry real 0m1.798s user 0m1.784s sys 0m0.012s Linear reading an associative array entry real 0m0.420s user 0m0.420s sys 0m0.000s Assigning a random number to a simple variable real 0m0.402s user 0m0.388s sys 0m0.016s Assigning a sparse numeric index array entry randomly into 64k cells real 0m12.678s user 0m12.649s sys 0m0.028s Reading sparse numeric index array entry real 0m0.087s user 0m0.084s sys 0m0.000s Assigning a sparse associative array entry randomly into 64k cells real 0m0.698s user 0m0.696s sys 0m0.004s Reading sparse associative index array entry real 0m0.083s user 0m0.084s sys 0m0.000s Use the time and times tools to profile computation-intensive commands. Consider rewriting time-critical code sections in C, or even in assembler. Try to minimize file I/O. Bash is not particularly efficient at handling files, so consider using more appropriate tools for this within the script, such as awk or Perl. Write your scripts in a modular and coherent form, [127] so they can be reorganized and tightened up as necessary. Some of the optimization techniques applicable to high-level languages may work for scripts, but others, such as loop unrolling, are mostly irrelevant. Above all, use common sense. For an excellent demonstration of how optimization can dramatically reduce the execution time of a script, see Example 16-47. 36.7. Assorted Tips 36.7.1. Ideas for more powerful scripts You have a problem that you want to solve by writing a Bash script. Unfortunately, you don't know quite where to start. One method is to plunge right in and code those parts of the script that come easily, and write the hard parts as pseudo-code. #!/bin/bash ARGCOUNT=1 # Need name as argument. E_WRONGARGS=65 if [ number-of-arguments is-not-equal-to &quot;$ARGCOUNT&quot; ] # ^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^ # Can't figure out how to code this . . . #+ . . . so write it in pseudo-code. then echo &quot;Usage: name-of-script name&quot; # ^^^^^^^^^^^^^^ More pseudo-code. exit $E_WRONGARGS fi . . . exit 0 # Later on, substitute working code for the pseudo-code. # Line 6 becomes: if [ $# -ne &quot;$ARGCOUNT&quot; ] # Line 12 becomes: echo &quot;Usage: `basename $0` name&quot; For an example of using pseudo-code, see the Square Root exercise. To keep a record of which user scripts have run during a particular session or over a number of sessions, add the following lines to each script you want to keep track of. This will keep a continuing file record of the script names and invocation times. # Append (&gt;&gt;) following to end of each script tracked. whoami&gt;&gt; $SAVE_FILE # User invoking the script. echo $0&gt;&gt; $SAVE_FILE # Script name. date&gt;&gt; $SAVE_FILE # Date and time. echo&gt;&gt; $SAVE_FILE # Blank line as separator. # Of course, SAVE_FILE defined and exported as environmental variable in ~/.bashrc #+ (something like ~/.scripts-run) The &gt;&gt; operator appends lines to a file. What if you wish to prepend a line to an existing file, that is, to paste it in at the beginning? file=data.txt title=&quot;***This is the title line of data text file***&quot; echo $title | cat - $file &gt;$file.new # &quot;cat -&quot; concatenates stdout to $file. # End result is #+ to write a new file with $title appended at *beginning*. This is a simplified variant of the Example 19-13 script given earlier. And, of course, sed can also do this. A shell script may act as an embedded command inside another shell script, a Tcl or wish script, or even a Makefile. It can be invoked as an external shell command in a C program using the system() call, i.e., system(&quot;script_name&quot;);. Setting a variable to the contents of an embedded sed or awk script increases the readability of the surrounding shell wrapper. See Example A-1 and Example 15-20. Put together files containing your favorite and most useful definitions and functions. As necessary, &quot;include&quot; one or more of these &quot;library files&quot; in scripts with either the dot (.) or source command. # SCRIPT LIBRARY # ------ ------- # Note: # No &quot;#!&quot; here. # No &quot;live code&quot; either. # Useful variable definitions ROOT_UID=0 # Root has $UID 0. E_NOTROOT=101 # Not root user error. MAXRETVAL=255 # Maximum (positive) return value of a function. SUCCESS=0 FAILURE=-1 # Functions Usage () # &quot;Usage:&quot; message. { if [ -z &quot;$1&quot; ] # No arg passed. then msg=filename else msg=$@ fi echo &quot;Usage: `basename $0` &quot;$msg&quot;&quot; } Check_if_root () # Check if root running script. { # From &quot;ex39.sh&quot; example. if [ &quot;$UID&quot; -ne &quot;$ROOT_UID&quot; ] then echo &quot;Must be root to run this script.&quot; exit $E_NOTROOT fi } CreateTempfileName () # Creates a &quot;unique&quot; temp filename. { # From &quot;ex51.sh&quot; example. prefix=temp suffix=`eval date +%s` Tempfilename=$prefix.$suffix } isalpha2 () # Tests whether *entire string* is alphabetic. { # From &quot;isalpha.sh&quot; example. [ $# -eq 1 ] || return $FAILURE case $1 in *[!a-zA-Z]*|&quot;&quot;) return $FAILURE;; *) return $SUCCESS;; esac # Thanks, S.C. } abs () # Absolute value. { # Caution: Max return value = 255. E_ARGERR=-999999 if [ -z &quot;$1&quot; ] # Need arg passed. then return $E_ARGERR # Obvious error value returned. fi if [ &quot;$1&quot; -ge 0 ] # If non-negative, then # absval=$1 # stays as-is. else # Otherwise, let &quot;absval = (( 0 - $1 ))&quot; # change sign. fi return $absval } tolower () # Converts string(s) passed as argument(s) { #+ to lowercase. if [ -z &quot;$1&quot; ] # If no argument(s) passed, then #+ send error message echo &quot;(null)&quot; #+ (C-style void-pointer error message) return #+ and return from function. fi echo &quot;$@&quot; | tr A-Z a-z # Translate all passed arguments ($@). return # Use command substitution to set a variable to function output. # For example: # oldvar=&quot;A seT of miXed-caSe LEtTerS&quot; # newvar=`tolower &quot;$oldvar&quot;` # echo &quot;$newvar&quot; # a set of mixed-case letters # # Exercise: Rewrite this function to change lowercase passed argument(s) # to uppercase ... toupper() [easy]. } Use special-purpose comment headers to increase clarity and legibility in scripts. ## Caution. rm -rf *.zzy ## The &quot;-rf&quot; options to &quot;rm&quot; are very dangerous, ##+ especially with wild cards. #+ Line continuation. # This is line 1 #+ of a multi-line comment, #+ and this is the final line. #* Note. #o List item. #&gt; Another point of view. while [ &quot;$var1&quot; != &quot;end&quot; ] #&gt; while test &quot;$var1&quot; != &quot;end&quot; Dotan Barak contributes template code for a progress bar in a script. Example 36-17. A Progress Bar #!/bin/bash # progress-bar.sh # Author: Dotan Barak (very minor revisions by ABS Guide author). # Used in ABS Guide with permission (thanks!). BAR_WIDTH=50 BAR_CHAR_START=&quot;[&quot; BAR_CHAR_END=&quot;]&quot; BAR_CHAR_EMPTY=&quot;.&quot; BAR_CHAR_FULL=&quot;=&quot; BRACKET_CHARS=2 LIMIT=100 print_progress_bar() { # Calculate how many characters will be full. let &quot;full_limit = ((($1 - $BRACKET_CHARS) * $2) / $LIMIT)&quot; # Calculate how many characters will be empty. let &quot;empty_limit = ($1 - $BRACKET_CHARS) - ${full_limit}&quot; # Prepare the bar. bar_line=&quot;${BAR_CHAR_START}&quot; for ((j=0; j&lt;full_limit; j++)); do bar_line=&quot;${bar_line}${BAR_CHAR_FULL}&quot; done for ((j=0; j&lt;empty_limit; j++)); do bar_line=&quot;${bar_line}${BAR_CHAR_EMPTY}&quot; done bar_line=&quot;${bar_line}${BAR_CHAR_END}&quot; printf &quot;%3d%% %s&quot; $2 ${bar_line} } # Here is a sample of code that uses it. MAX_PERCENT=100 for ((i=0; i&lt;=MAX_PERCENT; i++)); do # usleep 10000 # ... Or run some other commands ... # print_progress_bar ${BAR_WIDTH} ${i} echo -en &quot;\r&quot; done echo &quot;&quot; exit A particularly clever use of if-test constructs is for comment blocks. #!/bin/bash COMMENT_BLOCK= # Try setting the above variable to some value #+ for an unpleasant surprise. if [ $COMMENT_BLOCK ]; then Comment block -- ================================= This is a comment line. This is another comment line. This is yet another comment line. ================================= echo &quot;This will not echo.&quot; Comment blocks are error-free! Whee! fi echo &quot;No more comments, please.&quot; exit 0 Compare this with using here documents to comment out code blocks. Using the $? exit status variable, a script may test if a parameter contains only digits, so it can be treated as an integer. #!/bin/bash SUCCESS=0 E_BADINPUT=85 test &quot;$1&quot; -ne 0 -o &quot;$1&quot; -eq 0 2&gt;/dev/null # An integer is either equal to 0 or not equal to 0. # 2&gt;/dev/null suppresses error message. if [ $? -ne &quot;$SUCCESS&quot; ] then echo &quot;Usage: `basename $0` integer-input&quot; exit $E_BADINPUT fi let &quot;sum = $1 + 25&quot; # Would give error if $1 not integer. echo &quot;Sum = $sum&quot; # Any variable, not just a command-line parameter, can be tested this way. exit 0 The 0 - 255 range for function return values is a severe limitation. Global variables and other workarounds are often problematic. An alternative method for a function to communicate a value back to the main body of the script is to have the function write to stdout (usually with echo) the &quot;return value,&quot; and assign this to a variable. This is actually a variant of command substitution. Example 36-18. Return value trickery #!/bin/bash # multiplication.sh multiply () # Multiplies params passed. { # Will accept a variable number of args. local product=1 until [ -z &quot;$1&quot; ] # Until uses up arguments passed... do let &quot;product *= $1&quot; shift done echo $product # Will not echo to stdout, } #+ since this will be assigned to a variable. mult1=15383; mult2=25211 val1=`multiply $mult1 $mult2` # Assigns stdout (echo) of function to the variable val1. echo &quot;$mult1 X $mult2 = $val1&quot; # 387820813 mult1=25; mult2=5; mult3=20 val2=`multiply $mult1 $mult2 $mult3` echo &quot;$mult1 X $mult2 X $mult3 = $val2&quot; # 2500 mult1=188; mult2=37; mult3=25; mult4=47 val3=`multiply $mult1 $mult2 $mult3 $mult4` echo &quot;$mult1 X $mult2 X $mult3 X $mult4 = $val3&quot; # 8173300 exit 0 The same technique also works for alphanumeric strings. This means that a function can &quot;return&quot; a non-numeric value. capitalize_ichar () # Capitalizes initial character { #+ of argument string(s) passed. string0=&quot;$@&quot; # Accepts multiple arguments. firstchar=${string0:0:1} # First character. string1=${string0:1} # Rest of string(s). FirstChar=`echo &quot;$firstchar&quot; | tr a-z A-Z` # Capitalize first character. echo &quot;$FirstChar$string1&quot; # Output to stdout. } newstring=`capitalize_ichar &quot;every sentence should start with a capital letter.&quot;` echo &quot;$newstring&quot; # Every sentence should start with a capital letter. It is even possible for a function to &quot;return&quot; multiple values with this method. Example 36-19. Even more return value trickery #!/bin/bash # sum-product.sh # A function may &quot;return&quot; more than one value. sum_and_product () # Calculates both sum and product of passed args. { echo $(( $1 + $2 )) $(( $1 * $2 )) # Echoes to stdout each calculated value, separated by space. } echo echo &quot;Enter first number &quot; read first echo echo &quot;Enter second number &quot; read second echo retval=`sum_and_product $first $second` # Assigns output of function. sum=`echo &quot;$retval&quot; | awk '{print $1}'` # Assigns first field. product=`echo &quot;$retval&quot; | awk '{print $2}'` # Assigns second field. echo &quot;$first + $second = $sum&quot; echo &quot;$first * $second = $product&quot; echo exit 0 Caution There can be only one echo statement in the function for this to work. If you alter the previous example: sum_and_product () { echo &quot;This is the sum_and_product function.&quot; # This messes things up! echo $(( $1 + $2 )) $(( $1 * $2 )) } ... retval=`sum_and_product $first $second` # Assigns output of function. # Now, this will not work correctly. Next in our bag of tricks are techniques for passing an array to a function, then &quot;returning&quot; an array back to the main body of the script. Passing an array involves loading the space-separated elements of the array into a variable with command substitution. Getting an array back as the &quot;return value&quot; from a function uses the previously mentioned strategem of echoing the array in the function, then invoking command substitution and the ( ... ) operator to assign it to an array. Example 36-20. Passing and returning arrays #!/bin/bash # array-function.sh: Passing an array to a function and ... # &quot;returning&quot; an array from a function Pass_Array () { local passed_array # Local variable! passed_array=( `echo &quot;$1&quot;` ) echo &quot;${passed_array[@]}&quot; # List all the elements of the new array #+ declared and set within the function. } original_array=( element1 element2 element3 element4 element5 ) echo echo &quot;original_array = ${original_array[@]}&quot; # List all elements of original array. # This is the trick that permits passing an array to a function. # ********************************** argument=`echo ${original_array[@]}` # ********************************** # Pack a variable #+ with all the space-separated elements of the original array. # # Attempting to just pass the array itself will not work. # This is the trick that allows grabbing an array as a &quot;return value&quot;. # ***************************************** returned_array=( `Pass_Array &quot;$argument&quot;` ) # ***************************************** # Assign 'echoed' output of function to array variable. echo &quot;returned_array = ${returned_array[@]}&quot; echo &quot;=============================================================&quot; # Now, try it again, #+ attempting to access (list) the array from outside the function. Pass_Array &quot;$argument&quot; # The function itself lists the array, but ... #+ accessing the array from outside the function is forbidden. echo &quot;Passed array (within function) = ${passed_array[@]}&quot; # NULL VALUE since the array is a variable local to the function. echo ############################################ # And here is an even more explicit example: ret_array () { for element in {11..20} do echo &quot;$element &quot; # Echo individual elements done #+ of what will be assembled into an array. } arr=( $(ret_array) ) # Assemble into array. echo &quot;Capturing array \&quot;arr\&quot; from function ret_array () ...&quot; echo &quot;Third element of array \&quot;arr\&quot; is ${arr[2]}.&quot; # 13 (zero-indexed) echo -n &quot;Entire array is: &quot; echo ${arr[@]} # 11 12 13 14 15 16 17 18 19 20 echo exit 0 # Nathan Coulter points out that passing arrays with elements containing #+ whitespace breaks this example. For a more elaborate example of passing arrays to functions, see Example A-10. Using the double-parentheses construct, it is possible to use C-style syntax for setting and incrementing/decrementing variables and in for and while loops. See Example 11-13 and Example 11-18. Setting the path and umask at the beginning of a script makes it more portable -- more likely to run on a &quot;foreign&quot; machine whose user may have bollixed up the $PATH and umask. #!/bin/bash PATH=/bin:/usr/bin:/usr/local/bin ; export PATH umask 022 # Files that the script creates will have 755 permission. # Thanks to Ian D. Allen, for this tip. A useful scripting technique is to repeatedly feed the output of a filter (by piping) back to the same filter, but with a different set of arguments and/or options. Especially suitable for this are tr and grep. # From &quot;wstrings.sh&quot; example. wlist=`strings &quot;$1&quot; | tr A-Z a-z | tr '[:space:]' Z | \ tr -cs '[:alpha:]' Z | tr -s '\173-\377' Z | tr Z ' '` Example 36-21. Fun with anagrams #!/bin/bash # agram.sh: Playing games with anagrams. # Find anagrams of... LETTERSET=etaoinshrdlu FILTER='.......' # How many letters minimum? # 1234567 anagram &quot;$LETTERSET&quot; | # Find all anagrams of the letterset... grep &quot;$FILTER&quot; | # With at least 7 letters, grep '^is' | # starting with 'is' grep -v 's$' | # no plurals grep -v 'ed$' # no past tense verbs # Possible to add many combinations of conditions and filters. # Uses &quot;anagram&quot; utility #+ that is part of the author's &quot;yawl&quot; word list package. # http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz # http://bash.deta.in/yawl-0.3.2.tar.gz exit 0 # End of code. bash$ sh agram.sh islander isolate isolead isotheral # Exercises: # --------- # Modify this script to take the LETTERSET as a command-line parameter. # Parameterize the filters in lines 11 - 13 (as with $FILTER), #+ so that they can be specified by passing arguments to a function. # For a slightly different approach to anagramming, #+ see the agram2.sh script. See also Example 29-4, Example 16-25, and Example A-9. Use &quot;anonymous here documents&quot; to comment out blocks of code, to save having to individually comment out each line with a #. See Example 19-11. Running a script on a machine that relies on a command that might not be installed is dangerous. Use whatis to avoid potential problems with this. CMD=command1 # First choice. PlanB=command2 # Fallback option. command_test=$(whatis &quot;$CMD&quot; | grep 'nothing appropriate') # If 'command1' not found on system , 'whatis' will return #+ &quot;command1: nothing appropriate.&quot; # # A safer alternative is: # command_test=$(whereis &quot;$CMD&quot; | grep \/) # But then the sense of the following test would have to be reversed, #+ since the $command_test variable holds content only if #+ the $CMD exists on the system. # (Thanks, bojster.) if [[ -z &quot;$command_test&quot; ]] # Check whether command present. then $CMD option1 option2 # Run command1 with options. else # Otherwise, $PlanB #+ run command2. fi An if-grep test may not return expected results in an error case, when text is output to stderr, rather that stdout. if ls -l nonexistent_filename | grep -q 'No such file or directory' then echo &quot;File \&quot;nonexistent_filename\&quot; does not exist.&quot; fi Redirecting stderr to stdout fixes this. if ls -l nonexistent_filename 2&gt;&amp;1 | grep -q 'No such file or directory' # ^^^^ then echo &quot;File \&quot;nonexistent_filename\&quot; does not exist.&quot; fi # Thanks, Chris Martin, for pointing this out. If you absolutely must access a subshell variable outside the subshell, here's a way to do it. TMPFILE=tmpfile # Create a temp file to store the variable. ( # Inside the subshell ... inner_variable=Inner echo $inner_variable echo $inner_variable &gt;&gt;$TMPFILE # Append to temp file. ) # Outside the subshell ... echo; echo &quot;-----&quot;; echo echo $inner_variable # Null, as expected. echo &quot;-----&quot;; echo # Now ... read inner_variable &lt;$TMPFILE # Read back shell variable. rm -f &quot;$TMPFILE&quot; # Get rid of temp file. echo &quot;$inner_variable&quot; # It's an ugly kludge, but it works. The run-parts command is handy for running a set of command scripts in a particular sequence, especially in combination with cron or at. For doing multiple revisions on a complex script, use the rcs Revision Control System package. Among other benefits of this is automatically updated ID header tags. The co command in rcs does a parameter replacement of certain reserved key words, for example, replacing # $Id$ in a script with something like: # $Id: hello-world.sh,v 1.1 2004/10/16 02:43:05 bozo Exp $ 36.7.2. Widgets It would be nice to be able to invoke X-Windows widgets from a shell script. There happen to exist several packages that purport to do so, namely Xscript, Xmenu, and widtools. The first two of these no longer seem to be maintained. Fortunately, it is still possible to obtain widtools here. Caution The widtools (widget tools) package requires the XForms library to be installed. Additionally, the Makefile needs some judicious editing before the package will build on a typical Linux system. Finally, three of the six widgets offered do not work (and, in fact, segfault). The dialog family of tools offers a method of calling &quot;dialog&quot; widgets from a shell script. The original dialog utility works in a text console, but its successors, gdialog, Xdialog, and kdialog use X-Windows-based widget sets. Example 36-22. Widgets invoked from a shell script #!/bin/bash # dialog.sh: Using 'gdialog' widgets. # Must have 'gdialog' installed on your system to run this script. # Or, you can replace all instance of 'gdialog' below with 'kdialog' ... # Version 1.1 (corrected 04/05/05) # This script was inspired by the following article. # &quot;Scripting for X Productivity,&quot; by Marco Fioretti, # LINUX JOURNAL, Issue 113, September 2003, pp. 86-9. # Thank you, all you good people at LJ. # Input error in dialog box. E_INPUT=85 # Dimensions of display, input widgets. HEIGHT=50 WIDTH=60 # Output file name (constructed out of script name). OUTFILE=$0.output # Display this script in a text widget. gdialog --title &quot;Displaying: $0&quot; --textbox $0 $HEIGHT $WIDTH # Now, we'll try saving input in a file. echo -n &quot;VARIABLE=&quot; &gt; $OUTFILE gdialog --title &quot;User Input&quot; --inputbox &quot;Enter variable, please:&quot; \ $HEIGHT $WIDTH 2&gt;&gt; $OUTFILE if [ &quot;$?&quot; -eq 0 ] # It's good practice to check exit status. then echo &quot;Executed \&quot;dialog box\&quot; without errors.&quot; else echo &quot;Error(s) in \&quot;dialog box\&quot; execution.&quot; # Or, clicked on &quot;Cancel&quot;, instead of &quot;OK&quot; button. rm $OUTFILE exit $E_INPUT fi # Now, we'll retrieve and display the saved variable. . $OUTFILE # 'Source' the saved file. echo &quot;The variable input in the \&quot;input box\&quot; was: &quot;$VARIABLE&quot;&quot; rm $OUTFILE # Clean up by removing the temp file. # Some applications may need to retain this file. exit $? # Exercise: Rewrite this script using the 'zenity' widget set. The xmessage command is a simple method of popping up a message/query window. For example: xmessage Fatal error in script! -button exit The latest entry in the widget sweepstakes is zenity. This utility pops up GTK+ dialog widgets-and-windows, and it works very nicely within a script. get_info () { zenity --entry # Pops up query window . . . #+ and prints user entry to stdout. # Also try the --calendar and --scale options. } answer=$( get_info ) # Capture stdout in $answer variable. echo &quot;User entered: &quot;$answer&quot;&quot; For other methods of scripting with widgets, try Tk or wish (Tcl derivatives), PerlTk (Perl with Tk extensions), tksh (ksh with Tk extensions), XForms4Perl (Perl with XForms extensions), Gtk-Perl (Perl with Gtk extensions), or PyQt (Python with Qt extensions). 36.8. Security Issues 36.8.1. Infected Shell Scripts A brief warning about script security is indicated. A shell script may contain a worm, trojan, or even a virus. For that reason, never run as root a script (or permit it to be inserted into the system startup scripts in /etc/rc.d) unless you have obtained said script from a trusted source or you have carefully analyzed it to make certain it does nothing harmful. Various researchers at Bell Labs and other sites, including M. Douglas McIlroy, Tom Duff, and Fred Cohen have investigated the implications of shell script viruses. They conclude that it is all too easy for even a novice, a &quot;script kiddie,&quot; to write one. [128] Here is yet another reason to learn scripting. Being able to look at and understand scripts may protect your system from being compromised by a rogue script. 36.8.2. Hiding Shell Script Source For security purposes, it may be necessary to render a script unreadable. If only there were a utility to create a stripped binary executable from a script. Francisco Rosales' shc -- generic shell script compiler does exactly that. Unfortunately, according to an article in the October, 2005 Linux Journal, the binary can, in at least some cases, be decrypted to recover the original script source. Still, this could be a useful method of keeping scripts secure from all but the most skilled hackers. 36.8.3. Writing Secure Shell Scripts Dan Stromberg suggests the following guidelines for writing (relatively) secure shell scripts. Don't put secret data in environment variables. Don't pass secret data in an external command's arguments (pass them in via a pipe or redirection instead). Set your $PATH carefully. Don't just trust whatever path you inherit from the caller if your script is running as root. In fact, whenever you use an environment variable inherited from the caller, think about what could happen if the caller put something misleading in the variable, e.g., if the caller set $HOME to /etc. 36.9. Portability Issues It is easier to port a shell than a shell script. --Larry Wall This book deals specifically with Bash scripting on a GNU/Linux system. All the same, users of sh and ksh will find much of value here. As it happens, many of the various shells and scripting languages seem to be converging toward the POSIX 1003.2 standard. Invoking Bash with the --posix option or inserting a set -o posix at the head of a script causes Bash to conform very closely to this standard. Another alternative is to use a #!/bin/sh sha-bang header in the script, rather than #!/bin/bash. [129] Note that /bin/sh is a link to /bin/bash in Linux and certain other flavors of UNIX, and a script invoked this way disables extended Bash functionality. Most Bash scripts will run as-is under ksh, and vice-versa, since Chet Ramey has been busily porting ksh features to the latest versions of Bash. On a commercial UNIX machine, scripts using GNU-specific features of standard commands may not work. This has become less of a problem in the last few years, as the GNU utilities have pretty much displaced their proprietary counterparts even on &quot;big-iron&quot; UNIX. Caldera's release of the source to many of the original UNIX utilities has accelerated the trend. Bash has certain features that the traditional Bourne shell lacks. Among these are: Certain extended invocation options Command substitution using $( ) notation Brace expansion Certain array operations, and associative arrays The double brackets extended test construct The double-parentheses arithmetic-evaluation construct Certain string manipulation operations Process substitution A Regular Expression matching operator Bash-specific builtins Coprocesses See the Bash F.A.Q. for a complete listing. 36.9.1. A Test Suite Let us illustrate some of the incompatibilities between Bash and the classic Bourne shell. Download and install the &quot;Heirloom Bourne Shell&quot; and run the following script, first using Bash, then the classic sh. Example 36-23. Test Suite #!/bin/bash # test-suite.sh # A partial Bash compatibility test suite. # Run this on your version of Bash, or some other shell. default_option=FAIL # Tests below will fail unless . . . echo echo -n &quot;Testing &quot; sleep 1; echo -n &quot;. &quot; sleep 1; echo -n &quot;. &quot; sleep 1; echo &quot;. &quot; echo # Double brackets String=&quot;Double brackets supported?&quot; echo -n &quot;Double brackets test: &quot; if [[ &quot;$String&quot; = &quot;Double brackets supported?&quot; ]] then echo &quot;PASS&quot; else echo &quot;FAIL&quot; fi # Double brackets and regex matching String=&quot;Regex matching supported?&quot; echo -n &quot;Regex matching: &quot; if [[ &quot;$String&quot; =~ R.....matching* ]] then echo &quot;PASS&quot; else echo &quot;FAIL&quot; fi # Arrays test_arr=$default_option # FAIL Array=( If supports arrays will print PASS ) test_arr=${Array[5]} echo &quot;Array test: $test_arr&quot; # Command Substitution csub_test () { echo &quot;PASS&quot; } test_csub=$default_option # FAIL test_csub=$(csub_test) echo &quot;Command substitution test: $test_csub&quot; echo # Completing this script is an exercise for the reader. # Add to the above similar tests for double parentheses, #+ brace expansion, process substitution, etc. exit $? 36.10. Shell Scripting Under Windows Even users running that other OS can run UNIX-like shell scripts, and therefore benefit from many of the lessons of this book. The Cygwin package from Cygnus and the MKS utilities from Mortice Kern Associates add shell scripting capabilities to Windows. Another alternative is UWIN, written by David Korn of AT&amp;T, of Korn Shell fame. In 2006, Microsoft released the Windows Powershell®, which contains limited Bash-like command-line scripting capabilities. Chapter 37. Bash, versions 2, 3, and 4 37.1. Bash, version 2 The current version of Bash, the one you have running on your machine, is most likely version 2.xx.yy, 3.xx.yy, or 4.xx.yy. bash$ echo $BASH_VERSION 3.2.25(1)-release The version 2 update of the classic Bash scripting language added array variables, string and parameter expansion, and a better method of indirect variable references, among other features. Example 37-1. String expansion #!/bin/bash # String expansion. # Introduced with version 2 of Bash. # Strings of the form $'xxx' #+ have the standard escaped characters interpreted. echo $'Ringing bell 3 times \a \a \a' # May only ring once with certain terminals. # Or ... # May not ring at all, depending on terminal settings. echo $'Three form feeds \f \f \f' echo $'10 newlines \n\n\n\n\n\n\n\n\n\n' echo $'\102\141\163\150' # B a s h # Octal equivalent of characters. exit Example 37-2. Indirect variable references - the new way #!/bin/bash # Indirect variable referencing. # This has a few of the attributes of references in C++. a=letter_of_alphabet letter_of_alphabet=z echo &quot;a = $a&quot; # Direct reference. echo &quot;Now a = ${!a}&quot; # Indirect reference. # The ${!variable} notation is more intuitive than the old #+ eval var1=\$$var2 echo t=table_cell_3 table_cell_3=24 echo &quot;t = ${!t}&quot; # t = 24 table_cell_3=387 echo &quot;Value of t changed to ${!t}&quot; # 387 # No 'eval' necessary. # This is useful for referencing members of an array or table, #+ or for simulating a multi-dimensional array. # An indexing option (analogous to pointer arithmetic) #+ would have been nice. Sigh. exit 0 # See also, ind-ref.sh example. Example 37-3. Simple database application, using indirect variable referencing #!/bin/bash # resistor-inventory.sh # Simple database / table-lookup application. # ============================================================== # # Data B1723_value=470 # Ohms B1723_powerdissip=.25 # Watts B1723_colorcode=&quot;yellow-violet-brown&quot; # Color bands B1723_loc=173 # Where they are B1723_inventory=78 # How many B1724_value=1000 B1724_powerdissip=.25 B1724_colorcode=&quot;brown-black-red&quot; B1724_loc=24N B1724_inventory=243 B1725_value=10000 B1725_powerdissip=.125 B1725_colorcode=&quot;brown-black-orange&quot; B1725_loc=24N B1725_inventory=89 # ============================================================== # echo PS3='Enter catalog number: ' echo select catalog_number in &quot;B1723&quot; &quot;B1724&quot; &quot;B1725&quot; do Inv=${catalog_number}_inventory Val=${catalog_number}_value Pdissip=${catalog_number}_powerdissip Loc=${catalog_number}_loc Ccode=${catalog_number}_colorcode echo echo &quot;Catalog number $catalog_number:&quot; # Now, retrieve value, using indirect referencing. echo &quot;There are ${!Inv} of [${!Val} ohm / ${!Pdissip} watt]\ resistors in stock.&quot; # ^ ^ # As of Bash 4.2, you can replace &quot;ohm&quot; with \u2126 (using echo -e). echo &quot;These are located in bin # ${!Loc}.&quot; echo &quot;Their color code is \&quot;${!Ccode}\&quot;.&quot; break done echo; echo # Exercises: # --------- # 1) Rewrite this script to read its data from an external file. # 2) Rewrite this script to use arrays, #+ rather than indirect variable referencing. # Which method is more straightforward and intuitive? # Which method is easier to code? # Notes: # ----- # Shell scripts are inappropriate for anything except the most simple #+ database applications, and even then it involves workarounds and kludges. # Much better is to use a language with native support for data structures, #+ such as C++ or Java (or even Perl). exit 0 Example 37-4. Using arrays and other miscellaneous trickery to deal four random hands from a deck of cards #!/bin/bash # cards.sh # Deals four random hands from a deck of cards. UNPICKED=0 PICKED=1 DUPE_CARD=99 LOWER_LIMIT=0 UPPER_LIMIT=51 CARDS_IN_SUIT=13 CARDS=52 declare -a Deck declare -a Suits declare -a Cards # It would have been easier to implement and more intuitive #+ with a single, 3-dimensional array. # Perhaps a future version of Bash will support multidimensional arrays. initialize_Deck () { i=$LOWER_LIMIT until [ &quot;$i&quot; -gt $UPPER_LIMIT ] do Deck[i]=$UNPICKED # Set each card of &quot;Deck&quot; as unpicked. let &quot;i += 1&quot; done echo } initialize_Suits () { Suits[0]=C #Clubs Suits[1]=D #Diamonds Suits[2]=H #Hearts Suits[3]=S #Spades } initialize_Cards () { Cards=(2 3 4 5 6 7 8 9 10 J Q K A) # Alternate method of initializing an array. } pick_a_card () { card_number=$RANDOM let &quot;card_number %= $CARDS&quot; # Restrict range to 0 - 51, i.e., 52 cards. if [ &quot;${Deck[card_number]}&quot; -eq $UNPICKED ] then Deck[card_number]=$PICKED return $card_number else return $DUPE_CARD fi } parse_card () { number=$1 let &quot;suit_number = number / CARDS_IN_SUIT&quot; suit=${Suits[suit_number]} echo -n &quot;$suit-&quot; let &quot;card_no = number % CARDS_IN_SUIT&quot; Card=${Cards[card_no]} printf %-4s $Card # Print cards in neat columns. } seed_random () # Seed random number generator. { # What happens if you don't do this? seed=`eval date +%s` let &quot;seed %= 32766&quot; RANDOM=$seed } # Consider other methods of seeding the random number generator. deal_cards () { echo cards_picked=0 while [ &quot;$cards_picked&quot; -le $UPPER_LIMIT ] do pick_a_card t=$? if [ &quot;$t&quot; -ne $DUPE_CARD ] then parse_card $t u=$cards_picked+1 # Change back to 1-based indexing, temporarily. Why? let &quot;u %= $CARDS_IN_SUIT&quot; if [ &quot;$u&quot; -eq 0 ] # Nested if/then condition test. then echo echo fi # Each hand set apart with a blank line. let &quot;cards_picked += 1&quot; fi done echo return 0 } # Structured programming: # Entire program logic modularized in functions. #=============== seed_random initialize_Deck initialize_Suits initialize_Cards deal_cards #=============== exit # Exercise 1: # Add comments to thoroughly document this script. # Exercise 2: # Add a routine (function) to print out each hand sorted in suits. # You may add other bells and whistles if you like. # Exercise 3: # Simplify and streamline the logic of the script. 37.2. Bash, version 3 On July 27, 2004, Chet Ramey released version 3 of Bash. This update fixed quite a number of bugs and added new features. Some of the more important added features: A new, more generalized {a..z} brace expansion operator. #!/bin/bash for i in {1..10} # Simpler and more straightforward than #+ for i in $(seq 10) do echo -n &quot;$i &quot; done echo # 1 2 3 4 5 6 7 8 9 10 # Or just . . . echo {a..z} # a b c d e f g h i j k l m n o p q r s t u v w x y z echo {e..m} # e f g h i j k l m echo {z..a} # z y x w v u t s r q p o n m l k j i h g f e d c b a # Works backwards, too. echo {25..30} # 25 26 27 28 29 30 echo {3..-2} # 3 2 1 0 -1 -2 echo {X..d} # X Y Z [ ] ^ _ ` a b c d # Shows (some of) the ASCII characters between Z and a, #+ but don't rely on this type of behavior because . . . echo {]..a} # {]..a} # Why? # You can tack on prefixes and suffixes. echo &quot;Number #&quot;{1..4}, &quot;...&quot; # Number #1, Number #2, Number #3, Number #4, ... # You can concatenate brace-expansion sets. echo {1..3}{x..z}&quot; +&quot; &quot;...&quot; # 1x + 1y + 1z + 2x + 2y + 2z + 3x + 3y + 3z + ... # Generates an algebraic expression. # This could be used to find permutations. # You can nest brace-expansion sets. echo {{a..c},{1..3}} # a b c 1 2 3 # The &quot;comma operator&quot; splices together strings. # ########## ######### ############ ########### ######### ############### # Unfortunately, brace expansion does not lend itself to parameterization. var1=1 var2=5 echo {$var1..$var2} # {1..5} # Yet, as Emiliano G. points out, using &quot;eval&quot; overcomes this limitation. start=0 end=10 for index in $(eval echo {$start..$end}) do echo -n &quot;$index &quot; # 0 1 2 3 4 5 6 7 8 9 10 done echo The ${!array[@]} operator, which expands to all the indices of a given array. #!/bin/bash Array=(element-zero element-one element-two element-three) echo ${Array[0]} # element-zero # First element of array. echo ${!Array[@]} # 0 1 2 3 # All the indices of Array. for i in ${!Array[@]} do echo ${Array[i]} # element-zero # element-one # element-two # element-three # # All the elements in Array. done The =~ Regular Expression matching operator within a double brackets test expression. (Perl has a similar operator.) #!/bin/bash variable=&quot;This is a fine mess.&quot; echo &quot;$variable&quot; # Regex matching with =~ operator within [[ double brackets ]]. if [[ &quot;$variable&quot; =~ T.........fin*es* ]] # NOTE: As of version 3.2 of Bash, expression to match no longer quoted. then echo &quot;match found&quot; # match found fi Or, more usefully: #!/bin/bash input=$1 if [[ &quot;$input&quot; =~ &quot;[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]&quot; ]] # ^ NOTE: Quoting not necessary, as of version 3.2 of Bash. # NNN-NN-NNNN (where each N is a digit). then echo &quot;Social Security number.&quot; # Process SSN. else echo &quot;Not a Social Security number!&quot; # Or, ask for corrected input. fi For additional examples of using the =~ operator, see Example A-29, Example 19-14, Example A-35, and Example A-24. The new set -o pipefail option is useful for debugging pipes. If this option is set, then the exit status of a pipe is the exit status of the last command in the pipe to fail (return a non-zero value), rather than the actual final command in the pipe. See Example 16-43. Caution The update to version 3 of Bash breaks a few scripts that worked under earlier versions. Test critical legacy scripts to make sure they still work! As it happens, a couple of the scripts in the Advanced Bash Scripting Guide had to be fixed up (see Example 9-4, for instance). 37.2.1. Bash, version 3.1 The version 3.1 update of Bash introduces a number of bugfixes and a few minor changes. The += operator is now permitted in in places where previously only the = assignment operator was recognized. a=1 echo $a # 1 a+=5 # Won't work under versions of Bash earlier than 3.1. echo $a # 15 a+=Hello echo $a # 15Hello Here, += functions as a string concatenation operator. Note that its behavior in this particular context is different than within a let construct. a=1 echo $a # 1 let a+=5 # Integer arithmetic, rather than string concatenation. echo $a # 6 let a+=Hello # Doesn't &quot;add&quot; anything to a. echo $a # 6 Jeffrey Haemer points out that this concatenation operator can be quite useful. In this instance, we append a directory to the $PATH. bash$ echo $PATH /usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin/:/usr/games bash$ PATH+=:/opt/bin bash$ echo $PATH /usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin/:/usr/games:/opt/bin 37.2.2. Bash, version 3.2 This is pretty much a bugfix update. In global parameter substitutions, the pattern no longer anchors at the start of the string. The --wordexp option disables process substitution. The =~ Regular Expression match operator no longer requires quoting of the pattern within [[ ... ]]. Caution In fact, quoting in this context is not advisable as it may cause regex evaluation to fail. Chet Ramey states in the Bash FAQ that quoting explicitly disables regex evaluation. See also the Ubuntu Bug List and Wikinerds on Bash syntax. Setting shopt -s compat31 in a script causes reversion to the original behavior. 37.3. Bash, version 4 Chet Ramey announced Version 4 of Bash on the 20th of February, 2009. This release has a number of significant new features, as well as some important bugfixes. Among the new goodies: Associative arrays. [130] An associative array can be thought of as a set of two linked arrays -- one holding the data, and the other the keys that index the individual elements of the data array. Example 37-5. A simple address database #!/bin/bash4 # fetch_address.sh declare -A address # -A option declares associative array. address[Charles]=&quot;414 W. 10th Ave., Baltimore, MD 21236&quot; address[John]=&quot;202 E. 3rd St., New York, NY 10009&quot; address[Wilma]=&quot;1854 Vermont Ave, Los Angeles, CA 90023&quot; echo &quot;Charles's address is ${address[Charles]}.&quot; # Charles's address is 414 W. 10th Ave., Baltimore, MD 21236. echo &quot;Wilma's address is ${address[Wilma]}.&quot; # Wilma's address is 1854 Vermont Ave, Los Angeles, CA 90023. echo &quot;John's address is ${address[John]}.&quot; # John's address is 202 E. 3rd St., New York, NY 10009. echo echo &quot;${!address[*]}&quot; # The array indices ... # Charles John Wilma Example 37-6. A somewhat more elaborate address database #!/bin/bash4 # fetch_address-2.sh # A more elaborate version of fetch_address.sh. SUCCESS=0 E_DB=99 # Error code for missing entry. declare -A address # -A option declares associative array. store_address () { address[$1]=&quot;$2&quot; return $? } fetch_address () { if [[ -z &quot;${address[$1]}&quot; ]] then echo &quot;$1's address is not in database.&quot; return $E_DB fi echo &quot;$1's address is ${address[$1]}.&quot; return $? } store_address &quot;Lucas Fayne&quot; &quot;414 W. 13th Ave., Baltimore, MD 21236&quot; store_address &quot;Arvid Boyce&quot; &quot;202 E. 3rd St., New York, NY 10009&quot; store_address &quot;Velma Winston&quot; &quot;1854 Vermont Ave, Los Angeles, CA 90023&quot; # Exercise: # Rewrite the above store_address calls to read data from a file, #+ then assign field 1 to name, field 2 to address in the array. # Each line in the file would have a format corresponding to the above. # Use a while-read loop to read from file, sed or awk to parse the fields. fetch_address &quot;Lucas Fayne&quot; # Lucas Fayne's address is 414 W. 13th Ave., Baltimore, MD 21236. fetch_address &quot;Velma Winston&quot; # Velma Winston's address is 1854 Vermont Ave, Los Angeles, CA 90023. fetch_address &quot;Arvid Boyce&quot; # Arvid Boyce's address is 202 E. 3rd St., New York, NY 10009. fetch_address &quot;Bozo Bozeman&quot; # Bozo Bozeman's address is not in database. exit $? # In this case, exit code = 99, since that is function return. See Example A-53 for an interesting usage of an associative array. Caution Elements of the index array may include embedded space characters, or even leading and/or trailing space characters. However, index array elements containing only whitespace are not permitted. address[ ]=&quot;Blank&quot; # Error! Enhancements to the case construct: the ;;&amp; and ;&amp; terminators. Example 37-7. Testing characters #!/bin/bash4 test_char () { case &quot;$1&quot; in [[:print:]] ) echo &quot;$1 is a printable character.&quot;;;&amp; # | # The ;;&amp; terminator continues to the next pattern test. | [[:alnum:]] ) echo &quot;$1 is an alpha/numeric character.&quot;;;&amp; # v [[:alpha:]] ) echo &quot;$1 is an alphabetic character.&quot;;;&amp; # v [[:lower:]] ) echo &quot;$1 is a lowercase alphabetic character.&quot;;;&amp; [[:digit:]] ) echo &quot;$1 is an numeric character.&quot;;&amp; # | # The ;&amp; terminator executes the next statement ... # | %%%@@@@@ ) echo &quot;********************************&quot;;; # v # ^^^^^^^^ ... even with a dummy pattern. esac } echo test_char 3 # 3 is a printable character. # 3 is an alpha/numeric character. # 3 is an numeric character. # ******************************** echo test_char m # m is a printable character. # m is an alpha/numeric character. # m is an alphabetic character. # m is a lowercase alphabetic character. echo test_char / # / is a printable character. echo # The ;;&amp; terminator can save complex if/then conditions. # The ;&amp; is somewhat less useful. The new coproc builtin enables two parallel processes to communicate and interact. As Chet Ramey states in the Bash FAQ [131] , ver. 4.01: There is a new 'coproc' reserved word that specifies a coprocess: an asynchronous command run with two pipes connected to the creating shell. Coprocs can be named. The input and output file descriptors and the PID of the coprocess are available to the calling shell in variables with coproc-specific names. George Dimitriu explains, &quot;... coproc ... is a feature used in Bash process substitution, which now is made publicly available.&quot; This means it can be explicitly invoked in a script, rather than just being a behind-the-scenes mechanism used by Bash. Coprocesses use file descriptors. File descriptors enable processes and pipes to communicate. #!/bin/bash4 # A coprocess communicates with a while-read loop. coproc { cat mx_data.txt; sleep 2; } # ^^^^^^^ # Try running this without &quot;sleep 2&quot; and see what happens. while read -u ${COPROC[0]} line # ${COPROC[0]} is the do #+ file descriptor of the coprocess. echo &quot;$line&quot; | sed -e 's/line/NOT-ORIGINAL-TEXT/' done kill $COPROC_PID # No longer need the coprocess, #+ so kill its PID. But, be careful! #!/bin/bash4 echo; echo a=aaa b=bbb c=ccc coproc echo &quot;one two three&quot; while read -u ${COPROC[0]} a b c; # Note that this loop do #+ runs in a subshell. echo &quot;Inside while-read loop: &quot;; echo &quot;a = $a&quot;; echo &quot;b = $b&quot;; echo &quot;c = $c&quot; echo &quot;coproc file descriptor: ${COPROC[0]}&quot; done # a = one # b = two # c = three # So far, so good, but ... echo &quot;-----------------&quot; echo &quot;Outside while-read loop: &quot; echo &quot;a = $a&quot; # a = echo &quot;b = $b&quot; # b = echo &quot;c = $c&quot; # c = echo &quot;coproc file descriptor: ${COPROC[0]}&quot; echo # The coproc is still running, but ... #+ it still doesn't enable the parent process #+ to &quot;inherit&quot; variables from the child process, the while-read loop. # Compare this to the &quot;badread.sh&quot; script. Caution The coprocess is asynchronous, and this might cause a problem. It may terminate before another process has finished communicating with it. #!/bin/bash4 coproc cpname { for i in {0..10}; do echo &quot;index = $i&quot;; done; } # ^^^^^^ This is a *named* coprocess. read -u ${cpname[0]} echo $REPLY # index = 0 echo ${COPROC[0]} #+ No output ... the coprocess timed out # after the first loop iteration. # However, George Dimitriu has a partial fix. coproc cpname { for i in {0..10}; do echo &quot;index = $i&quot;; done; sleep 1; echo hi &gt; myo; cat - &gt;&gt; myo; } # ^^^^^ This is a *named* coprocess. echo &quot;I am main&quot;$'\04' &gt;&amp;${cpname[1]} myfd=${cpname[0]} echo myfd=$myfd ### while read -u $myfd ### do ### echo $REPLY; ### done echo $cpname_PID # Run this with and without the commented-out while-loop, and it is #+ apparent that each process, the executing shell and the coprocess, #+ waits for the other to finish writing in its own write-enabled pipe. The new mapfile builtin makes it possible to load an array with the contents of a text file without using a loop or command substitution. #!/bin/bash4 mapfile Arr1 &lt; $0 # Same result as Arr1=( $(cat $0) ) echo &quot;${Arr1[@]}&quot; # Copies this entire script out to stdout. echo &quot;--&quot;; echo # But, not the same as read -a !!! read -a Arr2 &lt; $0 echo &quot;${Arr2[@]}&quot; # Reads only first line of script into the array. exit The read builtin got a minor facelift. The -t timeout option now accepts (decimal) fractional values [132] and the -i option permits preloading the edit buffer. [133] Unfortunately, these enhancements are still a work in progress and not (yet) usable in scripts. Parameter substitution gets case-modification operators. #!/bin/bash4 var=veryMixedUpVariable echo ${var} # veryMixedUpVariable echo ${var^} # VeryMixedUpVariable # * First char --&gt; uppercase. echo ${var^^} # VERYMIXEDUPVARIABLE # ** All chars --&gt; uppercase. echo ${var,} # veryMixedUpVariable # * First char --&gt; lowercase. echo ${var,,} # verymixedupvariable # ** All chars --&gt; lowercase. The declare builtin now accepts the -l lowercase and -c capitalize options. #!/bin/bash4 declare -l var1 # Will change to lowercase var1=MixedCaseVARIABLE echo &quot;$var1&quot; # mixedcasevariable # Same effect as echo $var1 | tr A-Z a-z declare -c var2 # Changes only initial char to uppercase. var2=originally_lowercase echo &quot;$var2&quot; # Originally_lowercase # NOT the same effect as echo $var2 | tr a-z A-Z Brace expansion has more options. Increment/decrement, specified in the final term within braces. #!/bin/bash4 echo {40..60..2} # 40 42 44 46 48 50 52 54 56 58 60 # All the even numbers, between 40 and 60. echo {60..40..2} # 60 58 56 54 52 50 48 46 44 42 40 # All the even numbers, between 40 and 60, counting backwards. # In effect, a decrement. echo {60..40..-2} # The same output. The minus sign is not necessary. # But, what about letters and symbols? echo {X..d} # X Y Z [ ] ^ _ ` a b c d # Does not echo the \ which escapes a space. Zero-padding, specified in the first term within braces, prefixes each term in the output with the same number of zeroes. bash4$ echo {010..15} 010 011 012 013 014 015 bash4$ echo {000..10} 000 001 002 003 004 005 006 007 008 009 010 Substring extraction on positional parameters now starts with $0 as the zero-index. (This corrects an inconsistency in the treatment of positional parameters.) #!/bin/bash # show-params.bash # Requires version 4+ of Bash. # Invoke this scripts with at least one positional parameter. E_BADPARAMS=99 if [ -z &quot;$1&quot; ] then echo &quot;Usage $0 param1 ...&quot; exit $E_BADPARAMS fi echo ${@:0} # bash3 show-params.bash4 one two three # one two three # bash4 show-params.bash4 one two three # show-params.bash4 one two three # $0 $1 $2 $3 The new ** globbing operator matches filenames and directories recursively. #!/bin/bash4 # filelist.bash4 shopt -s globstar # Must enable globstar, otherwise ** doesn't work. # The globstar shell option is new to version 4 of Bash. echo &quot;Using *&quot;; echo for filename in * do echo &quot;$filename&quot; done # Lists only files in current directory ($PWD). echo; echo &quot;--------------&quot;; echo echo &quot;Using **&quot; for filename in ** do echo &quot;$filename&quot; done # Lists complete file tree, recursively. exit Using * allmyfiles filelist.bash4 -------------- Using ** allmyfiles allmyfiles/file.index.txt allmyfiles/my_music allmyfiles/my_music/me-singing-60s-folksongs.ogg allmyfiles/my_music/me-singing-opera.ogg allmyfiles/my_music/piano-lesson.1.ogg allmyfiles/my_pictures allmyfiles/my_pictures/at-beach-with-Jade.png allmyfiles/my_pictures/picnic-with-Melissa.png filelist.bash4 The new $BASHPID internal variable. There is a new builtin error-handling function named command_not_found_handle. #!/bin/bash4 command_not_found_handle () { # Accepts implicit parameters. echo &quot;The following command is not valid: \&quot;&quot;$1\&quot;&quot;&quot; echo &quot;With the following argument(s): \&quot;&quot;$2\&quot;&quot; \&quot;&quot;$3\&quot;&quot;&quot; # $4, $5 ... } # $1, $2, etc. are not explicitly passed to the function. bad_command arg1 arg2 # The following command is not valid: &quot;bad_command&quot; # With the following argument(s): &quot;arg1&quot; &quot;arg2&quot; Editorial comment Associative arrays? Coprocesses? Whatever happened to the lean and mean Bash we have come to know and love? Could it be suffering from (horrors!) &quot;feature creep&quot;? Or perhaps even Korn shell envy? Note to Chet Ramey: Please add only essential features in future Bash releases -- perhaps for-each loops and support for multi-dimensional arrays. [134] Most Bash users won't need, won't use, and likely won't greatly appreciate complex &quot;features&quot; like built-in debuggers, Perl interfaces, and bolt-on rocket boosters. 37.3.1. Bash, version 4.1 Version 4.1 of Bash, released in May, 2010, was primarily a bugfix update. The printf command now accepts a -v option for setting array indices. Within double brackets, the &gt; and &lt; string comparison operators now conform to the locale. Since the locale setting may affect the sorting order of string expressions, this has side-effects on comparison tests within [[ ... ]] expressions. The read builtin now takes a -N option (read -N chars), which causes the read to terminate after chars characters. Example 37-8. Reading N characters #!/bin/bash # Requires Bash version -ge 4.1 ... num_chars=61 read -N $num_chars var &lt; $0 # Read first 61 characters of script! echo &quot;$var&quot; exit ####### Output of Script ####### #!/bin/bash # Requires Bash version -ge 4.1 ... num_chars=61 Here documents embedded in $( ... ) command substitution constructs may terminate with a simple ). Example 37-9. Using a here document to set a variable #!/bin/bash # here-commsub.sh # Requires Bash version -ge 4.1 ... multi_line_var=$( cat &lt;&lt;ENDxxx ------------------------------ This is line 1 of the variable This is line 2 of the variable This is line 3 of the variable ------------------------------ ENDxxx) # Rather than what Bash 4.0 requires: #+ that the terminating limit string and #+ the terminating close-parenthesis be on separate lines. # ENDxxx # ) echo &quot;$multi_line_var&quot; # Bash still emits a warning, though. # warning: here-document at line 10 delimited #+ by end-of-file (wanted `ENDxxx') 37.3.2. Bash, version 4.2 Version 4.2 of Bash, released in February, 2011, contains a number of new features and enhancements, in addition to bugfixes. Bash now supports the the \u and \U Unicode escape. Unicode is a cross-platform standard for encoding into numerical values letters and graphic symbols. This permits representing and displaying characters in foreign alphabets and unusual fonts. echo -e '\u2630' # Horizontal triple bar character. # Equivalent to the more roundabout: echo -e &quot;\xE2\x98\xB0&quot; # Recognized by earlier Bash versions. echo -e '\u220F' # PI (Greek letter and mathematical symbol) echo -e '\u0416' # Capital &quot;ZHE&quot; (Cyrillic letter) echo -e '\u2708' # Airplane (Dingbat font) symbol echo -e '\u2622' # Radioactivity trefoil echo -e &quot;The amplifier circuit requires a 100 \u2126 pull-up resistor.&quot; unicode_var='\u2640' echo -e $unicode_var # Female symbol printf &quot;$unicode_var \n&quot; # Female symbol, with newline # And for something a bit more elaborate . . . # We can store Unicode symbols in an associative array, #+ then retrieve them by name. # Run this in a gnome-terminal or a terminal with a large, bold font #+ for better legibility. declare -A symbol # Associative array. symbol[script_E]='\u2130' symbol[script_F]='\u2131' symbol[script_J]='\u2110' symbol[script_M]='\u2133' symbol[Rx]='\u211E' symbol[TEL]='\u2121' symbol[FAX]='\u213B' symbol[care_of]='\u2105' symbol[account]='\u2100' symbol[trademark]='\u2122' echo -ne &quot;${symbol[script_E]} &quot; echo -ne &quot;${symbol[script_F]} &quot; echo -ne &quot;${symbol[script_J]} &quot; echo -ne &quot;${symbol[script_M]} &quot; echo -ne &quot;${symbol[Rx]} &quot; echo -ne &quot;${symbol[TEL]} &quot; echo -ne &quot;${symbol[FAX]} &quot; echo -ne &quot;${symbol[care_of]} &quot; echo -ne &quot;${symbol[account]} &quot; echo -ne &quot;${symbol[trademark]} &quot; echo Note The above example uses the $' ... ' string-expansion construct. When the lastpipe shell option is set, the last command in a pipe doesn't run in a subshell. Example 37-10. Piping input to a read #!/bin/bash # lastpipe-option.sh line='' # Null value. echo &quot;\$line = &quot;$line&quot;&quot; # $line = echo shopt -s lastpipe # Error on Bash version -lt 4.2. echo &quot;Exit status of attempting to set \&quot;lastpipe\&quot; option is $?&quot; # 1 if Bash version -lt 4.2, 0 otherwise. echo head -1 $0 | read line # Pipe the first line of the script to read. # ^^^^^^^^^ Not in a subshell!!! echo &quot;\$line = &quot;$line&quot;&quot; # Older Bash releases $line = # Bash version 4.2 $line = #!/bin/bash This option offers possible &quot;fixups&quot; for these example scripts: Example 34-3 and Example 15-8. Negative array indices permit counting backwards from the end of an array. Example 37-11. Negative array indices #!/bin/bash # neg-array.sh # Requires Bash, version -ge 4.2. array=( zero one two three four five ) # Six-element array. # 0 1 2 3 4 5 # -6 -5 -4 -3 -2 -1 # Negative array indices now permitted. echo ${array[-1]} # five echo ${array[-2]} # four # ... echo ${array[-6]} # zero # Negative array indices count backward from the last element+1. # But, you cannot index past the beginning of the array. echo ${array[-7]} # array: bad array subscript # So, what is this new feature good for? echo &quot;The last element in the array is &quot;${array[-1]}&quot;&quot; # Which is quite a bit more straightforward than: echo &quot;The last element in the array is &quot;${array[${#array[*]}-1]}&quot;&quot; echo # And ... index=0 let &quot;neg_element_count = 0 - ${#array[*]}&quot; # Number of elements, converted to a negative number. while [ $index -gt $neg_element_count ]; do ((index--)); echo -n &quot;${array[index]} &quot; done # Lists the elements in the array, backwards. # We have just simulated the &quot;tac&quot; command on this array. echo # See also neg-offset.sh. Substring extraction uses a negative length parameter to specify an offset from the end of the target string. Example 37-12. Negative parameter in string-extraction construct #!/bin/bash # Bash, version -ge 4.2 # Negative length-index in substring extraction. # Important: It changes the interpretation of this construct! stringZ=abcABC123ABCabc echo ${stringZ} # abcABC123ABCabc # Position within string: 0123456789..... echo ${stringZ:2:3} # cAB # Count 2 chars forward from string beginning, and extract 3 chars. # ${string:position:length} # So far, nothing new, but now ... # abcABC123ABCabc # Position within string: 0123....6543210 echo ${stringZ:3:-6} # ABC123 # ^ # Index 3 chars forward from beginning and 6 chars backward from end, #+ and extract everything in between. # ${string:offset-from-front:offset-from-end} # When the &quot;length&quot; parameter is negative, #+ it serves as an offset-from-end parameter. # See also neg-array.sh. Chapter 38. Endnotes 38.1. Author's Note doce ut discas (Teach, that you yourself may learn.) How did I come to write a scripting book? It's a strange tale. It seems that a few years back I needed to learn shell scripting -- and what better way to do that than to read a good book on the subject? I was looking to buy a tutorial and reference covering all aspects of the subject. I was looking for a book that would take difficult concepts, turn them inside out, and explain them in excruciating detail, with well-commented examples. [135] In fact, I was looking for this very book, or something very much like it. Unfortunately, it didn't exist, and if I wanted it, I'd have to write it. And so, here we are, folks. That reminds me of the apocryphal story about a mad professor. Crazy as a loon, the fellow was. At the sight of a book, any book -- at the library, at a bookstore, anywhere -- he would become totally obsessed with the idea that he could have written it, should have written it -- and done a better job of it to boot. He would thereupon rush home and proceed to do just that, write a book with the very same title. When he died some years later, he allegedly had several thousand books to his credit, probably putting even Asimov to shame. The books might not have been any good, who knows, but does that really matter? Here's a fellow who lived his dream, even if he was obsessed by it, driven by it . . . and somehow I can't help admiring the old coot. 38.2. About the Author Who is this guy anyhow? The author claims no credentials or special qualifications, [136] other than a compulsion to write. [137] This book is somewhat of a departure from his other major work, HOW-2 Meet Women: The Shy Man's Guide to Relationships. He has also written the Software-Building HOWTO. Of late, he has been trying his (heavy) hand at fiction: Dave Dawson Over Berlin (First Installment) Dave Dawson Over Berlin (Second Installment) and Dave Dawson Over Berlin (Third Installment) . He also has a few Instructables (here, here, here, here, here, here, and here to his (dis)credit. A Linux user since 1995 (Slackware 2.2, kernel 1.2.1), the author has emitted a few software truffles, including the cruft one-time pad encryption utility, the mcalc mortgage calculator, the judge Scrabble® adjudicator, the yawl word gaming list package, and the Quacky anagramming gaming package. He got off to a rather shaky start in the computer game -- programming FORTRAN IV on a CDC 3800 (on paper coding pads, with occasional forays on a keypunch machine and a Friden Flexowriter) -- and is not the least bit nostalgic for those days. Living in an out-of-the-way community with wife and orange tabby, he cherishes human frailty, especially his own. [138] 38.3. Where to Go For Help The author is no longer supporting or updating this document. He will not answer questions about this book or about general scripting topics. If you need assistance with a schoolwork assignment, read the pertinent sections of this and other reference works. Do your best to solve the problem using your own wits and resources. Please do not waste the author's time. You will get neither help nor sympathy. [139] Likewise, kindly refrain from annoying the author with solicitations, offers of employment, or &quot;business opportunities.&quot; He is doing just fine, and requires neither help nor sympathy, thank you. Please note that the author will not answer scripting questions for Sun/Solaris/Oracle or Apple systems. The endarkened execs and the arachnoid corporate attorneys of those particular outfits have been using litigation in a predatory manner and/or as a weapon against the Open Source Community. Any Solaris or Apple users needing scripting help will therefore kindly direct their concerns to corporate customer service. ... sophisticated in mechanism but possibly agile operating under noises being extremely suppressed ... --CI-300 printer manual 38.4. Tools Used to Produce This Book 38.4.1. Hardware A used IBM Thinkpad, model 760XL laptop (P166, 104 meg RAM) running Red Hat 7.1/7.3. Sure, it's slow and has a funky keyboard, but it beats the heck out of a No. 2 pencil and a Big Chief tablet. Update: upgraded to a 770Z Thinkpad (P2-366, 192 meg RAM) running FC3. Anyone feel like donating a later-model laptop to a starving writer &lt;g&gt;? Update: upgraded to a T61 Thinkpad running Mandriva 2011. No longer starving &lt;g&gt;, but not too proud to accept donations. 38.4.2. Software and Printware Bram Moolenaar's powerful SGML-aware vim text editor. OpenJade, a DSSSL rendering engine for converting SGML documents into other formats. Norman Walsh's DSSSL stylesheets. DocBook, The Definitive Guide, by Norman Walsh and Leonard Muellner (O'Reilly, ISBN 1-56592-580-7). This is still the standard reference for anyone attempting to write a document in Docbook SGML format. 38.5. Credits Community participation made this project possible. The author gratefully acknowledges that writing this book would have been unthinkable without help and feedback from all you people out there. Philippe Martin translated the first version (0.1) of this document into DocBook/SGML. While not on the job at a small French company as a software developer, he enjoys working on GNU/Linux documentation and software, reading literature, playing music, and, for his peace of mind, making merry with friends. You may run across him somewhere in France or in the Basque Country, or you can email him at feloy@free.fr. Philippe Martin also pointed out that positional parameters past $9 are possible using {bracket} notation. (See Example 4-5). Stéphane Chazelas sent a long list of corrections, additions, and example scripts. More than a contributor, he had, in effect, for a while taken on the role of co-editor for this document. Merci beaucoup! Paulo Marcel Coelho Aragao offered many corrections, both major and minor, and contributed quite a number of helpful suggestions. I would like to especially thank Patrick Callahan, Mike Novak, and Pal Domokos for catching bugs, pointing out ambiguities, and for suggesting clarifications and changes in the preliminary version (0.1) of this document. Their lively discussion of shell scripting and general documentation issues inspired me to try to make this document more readable. I'm grateful to Jim Van Zandt for pointing out errors and omissions in version 0.2 of this document. He also contributed an instructive example script. Many thanks to Jordi Sanfeliu for giving permission to use his fine tree script (Example A-16), and to Rick Boivie for revising it. Likewise, thanks to Michel Charpentier for permission to use his dc factoring script (Example 16-52). Kudos to Noah Friedman for permission to use his string function script (Example A-18). Emmanuel Rouat suggested corrections and additions on command substitution, aliases, and path management. He also contributed a very nice sample .bashrc file (Appendix M). Heiner Steven kindly gave permission to use his base conversion script, Example 16-48. He also made a number of corrections and many helpful suggestions. Special thanks. Rick Boivie contributed the delightfully recursive pb.sh script (Example 36-11), revised the tree.sh script (Example A-16), and suggested performance improvements for the monthlypmt.sh script (Example 16-47). Florian Wisser enlightened me on some of the fine points of testing strings (see Example 7-6), and on other matters. Oleg Philon sent suggestions concerning cut and pidof. Michael Zick extended the empty array example to demonstrate some surprising array properties. He also contributed the isspammer scripts (Example 16-41 and Example A-28). Marc-Jano Knopp sent corrections and clarifications on DOS batch files. Hyun Jin Cha found several typos in the document in the process of doing a Korean translation. Thanks for pointing these out. Andreas Abraham sent in a long list of typographical errors and other corrections. Special thanks! Others contributing scripts, making helpful suggestions, and pointing out errors were Gabor Kiss, Leopold Toetsch, Peter Tillier, Marcus Berglof, Tony Richardson, Nick Drage (script ideas!), Rich Bartell, Jess Thrysoee, Adam Lazur, Bram Moolenaar, Baris Cicek, Greg Keraunen, Keith Matthews, Sandro Magi, Albert Reiner, Dim Segebart, Rory Winston, Lee Bigelow, Wayne Pollock, &quot;jipe,&quot; &quot;bojster,&quot; &quot;nyal,&quot; &quot;Hobbit,&quot; &quot;Ender,&quot; &quot;Little Monster&quot; (Alexis), &quot;Mark,&quot; &quot;Patsie,&quot; &quot;vladz,&quot; Peggy Russell, Emilio Conti, Ian. D. Allen, Hans-Joerg Diers, Arun Giridhar, Dennis Leeuw, Dan Jacobson, Aurelio Marinho Jargas, Edward Scholtz, Jean Helou, Chris Martin, Lee Maschmeyer, Bruno Haible, Wilbert Berendsen, Sebastien Godard, Bjön Eriksson, John MacDonald, John Lange, Joshua Tschida, Troy Engel, Manfred Schwarb, Amit Singh, Bill Gradwohl, E. Choroba, David Lombard, Jason Parker, Steve Parker, Bruce W. Clare, William Park, Vernia Damiano, Mihai Maties, Mark Alexander, Jeremy Impson, Ken Fuchs, Jared Martin, Frank Wang, Sylvain Fourmanoit, Matthew Sage, Matthew Walker, Kenny Stauffer, Filip Moritz, Andrzej Stefanski, Daniel Albers, Jeffrey Haemer, Stefano Palmeri, Nils Radtke, Sigurd Solaas, Serghey Rodin, Jeroen Domburg, Alfredo Pironti, Phil Braham, Bruno de Oliveira Schneider, Stefano Falsetto, Chris Morgan, Walter Dnes, Linc Fessenden, Michael Iatrou, Pharis Monalo, Jesse Gough, Fabian Kreutz, Mark Norman, Harald Koenig, Dan Stromberg, Peter Knowles, Francisco Lobo, Mariusz Gniazdowski, Sebastian Arming, Chetankumar Phulpagare, Benno Schulenberg, Tedman Eng, Jochen DeSmet, Juan Nicolas Ruiz, Oliver Beckstein, Achmed Darwish, Dotan Barak, Richard Neill, Albert Siersema, Omair Eshkenazi, Geoff Lee, Graham Ewart, JuanJo Ciarlante, Cliff Bamford, Nathan Coulter, Ramses Rodriguez Martinez, Evgeniy Ivanov, Craig Barnes, George Dimitriu, Kevin LeBlanc, Antonio Macchi, Tomas Pospisek, David Wheeler, Erik Brandsberg, YongYe, Andreas Kühne, Pádraig Brady, Joseph Steinhauser, and David Lawyer (himself an author of four HOWTOs). My gratitude to Chet Ramey and Brian Fox for writing Bash, and building into it elegant and powerful scripting capabilities rivaling those of ksh. Very special thanks to the hard-working volunteers at the Linux Documentation Project. The LDP hosts a repository of Linux knowledge and lore, and has, to a great extent, enabled the publication of this book. Thanks and appreciation to IBM, Red Hat, Google, the Free Software Foundation, and all the good people fighting the good fight to keep Open Source software free and open. Belated thanks to my fourth grade teacher, Miss Spencer, for emotional support and for convincing me that maybe, just maybe I wasn't a total loss. Thanks most of all to my wife, Anita, for her encouragement, inspiration, and emotional support. 38.6. Disclaimer (This is a variant of the standard LDP disclaimer.) No liability for the contents of this document can be accepted. Use the concepts, examples and information at your own risk. There may be errors, omissions, and inaccuracies that could cause you to lose data, harm your system, or induce involuntary electrocution, so proceed with appropriate caution. The author takes no responsibility for any damages, incidental or otherwise. As it happens, it is highly unlikely that either you or your system will suffer ill effects, aside from uncontrollable hiccups. In fact, the raison d'etre of this book is to enable its readers to analyze shell scripts and determine whether they have unanticipated consequences. Bibliography Those who do not understand UNIX are condemned to reinvent it, poorly. --Henry Spencer Edited by Peter Denning, Computers Under Attack: Intruders, Worms, and Viruses, ACM Press, 1990, 0-201-53067-8. This compendium contains a couple of articles on shell script viruses. * Ken Burtch, Linux Shell Scripting with Bash, 1st edition, Sams Publishing (Pearson), 2004, 0672326426. Covers much of the same material as the ABS Guide, though in a different style. * Daniel Goldman, Definitive Guide to Sed, 1st edition, 2013. This ebook is an excellent introduction to sed. Rather than being a conversion from a printed volume, it was specifically designed and formatted for viewing on an ebook reader. Well-written, informative, and useful as a reference as well as a tutorial. Highly recommended. * Dale Dougherty and Arnold Robbins, Sed and Awk, 2nd edition, O'Reilly and Associates, 1997, 1-156592-225-5. Unfolding the full power of shell scripting requires at least a passing familiarity with sed and awk. This is the classic tutorial. It includes an excellent introduction to Regular Expressions. Recommended. * Jeffrey Friedl, Mastering Regular Expressions, O'Reilly and Associates, 2002, 0-596-00289-0. Still the best all-around reference on Regular Expressions. * Aeleen Frisch, Essential System Administration, 3rd edition, O'Reilly and Associates, 2002, 0-596-00343-9. This excellent manual provides a decent introduction to shell scripting from a sys admin point of view. It includes comprehensive explanations of the startup and initialization scripts in a UNIX system. * Stephen Kochan and Patrick Wood, Unix Shell Programming, Hayden, 1990, 067248448X. Still considered a standard reference, though somewhat dated, and a bit &quot;wooden&quot; stylistically speaking. [140] In fact, this book was the ABS Guide author's first exposure to UNIX shell scripting, lo these many years ago. * Neil Matthew and Richard Stones, Beginning Linux Programming, Wrox Press, 1996, 1874416680. Surprisingly good in-depth coverage of various programming languages available for Linux, including a fairly strong chapter on shell scripting. * Herbert Mayer, Advanced C Programming on the IBM PC, Windcrest Books, 1989, 0830693637. Excellent coverage of algorithms and general programming practices. Highly recommended, but unfortunately out of print. * David Medinets, Unix Shell Programming Tools, McGraw-Hill, 1999, 0070397333. Pretty good treatment of shell scripting, with examples, and a short intro to Tcl and Perl. * Cameron Newham and Bill Rosenblatt, Learning the Bash Shell, 2nd edition, O'Reilly and Associates, 1998, 1-56592-347-2. This is a valiant effort at a decent shell primer, but sadly deficient in its coverage of writing scripts and lacking sufficient examples. * Anatole Olczak, Bourne Shell Quick Reference Guide, ASP, Inc., 1991, 093573922X. A very handy pocket reference, despite lacking coverage of Bash-specific features. * Jerry Peek, Tim O'Reilly, and Mike Loukides, Unix Power Tools, 3rd edition, O'Reilly and Associates, Random House, 2002, 0-596-00330-7. Contains a couple of sections of very informative in-depth articles on shell programming, but falls short of being a self-teaching manual. It reproduces much of the Regular Expressions tutorial from the Dougherty and Robbins book, above. The comprehensive coverage of UNIX commands makes this book worthy of a place on your bookshelf. * Clifford Pickover, Computers, Pattern, Chaos, and Beauty, St. Martin's Press, 1990, 0-312-04123-3. A treasure trove of ideas and recipes for computer-based exploration of mathematical oddities. * George Polya, How To Solve It, Princeton University Press, 1973, 0-691-02356-5. The classic tutorial on problem-solving methods (algorithms), with special emphasis on how to teach them. * Chet Ramey and Brian Fox, The GNU Bash Reference Manual, Network Theory Ltd, 2003, 0-9541617-7-7. This manual is the definitive reference for GNU Bash. The authors of this manual, Chet Ramey and Brian Fox, are the original developers of GNU Bash. For each copy sold, the publisher donates $1 to the Free Software Foundation. * Arnold Robbins, Bash Reference Card, SSC, 1998, 1-58731-010-5. Excellent Bash pocket reference (don't leave home without it, especially if you're a sysadmin). A bargain at $4.95, but unfortunately no longer available for free download. * Arnold Robbins, Effective Awk Programming, Free Software Foundation / O'Reilly and Associates, 2000, 1-882114-26-4. The absolute best awk tutorial and reference. The free electronic version of this book is part of the awk documentation, and printed copies of the latest version are available from O'Reilly and Associates. This book served as an inspiration for the author of the ABS Guide. * Bill Rosenblatt, Learning the Korn Shell, O'Reilly and Associates, 1993, 1-56592-054-6. This well-written book contains some excellent pointers on shell scripting in general. * Paul Sheer, LINUX: Rute User's Tutorial and Exposition, 1st edition, , 2002, 0-13-033351-4. Very detailed and readable introduction to Linux system administration. The book is available in print, or on-line. * Ellen Siever and the staff of O'Reilly and Associates, Linux in a Nutshell, 2nd edition, O'Reilly and Associates, 1999, 1-56592-585-8. The all-around best Linux command reference. It even has a Bash section. * Dave Taylor, Wicked Cool Shell Scripts: 101 Scripts for Linux, Mac OS X, and Unix Systems, 1st edition, No Starch Press, 2004, 1-59327-012-7. Pretty much what the title promises . . . * The UNIX CD Bookshelf, 3rd edition, O'Reilly and Associates, 2003, 0-596-00392-7. An array of seven UNIX books on CD ROM, including UNIX Power Tools, Sed and Awk, and Learning the Korn Shell. A complete set of all the UNIX references and tutorials you would ever need at about $130. Buy this one, even if it means going into debt and not paying the rent. Update: Seems to have somehow fallen out of print. Ah, well. You can still buy the dead-tree editions of these books. * The O'Reilly books on Perl. (Actually, any O'Reilly books.) * * * Other Resources Fioretti, Marco, &quot;Scripting for X Productivity,&quot; Linux Journal, Issue 113, September, 2003, pp. 86-9. Ben Okopnik's well-written introductory Bash scripting articles in issues 53, 54, 55, 57, and 59 of the Linux Gazette, and his explanation of &quot;The Deep, Dark Secrets of Bash&quot; in issue 56. Chet Ramey's Bash - The GNU Shell, a two-part series published in issues 3 and 4 of the Linux Journal, July-August 1994. Mike G's Bash-Programming-Intro HOWTO. Richard's Unix Scripting Universe. Chet Ramey's Bash FAQ. Greg's WIKI: Bash FAQ. Example shell scripts at Lucc's Shell Scripts . Example shell scripts at SHELLdorado . Example shell scripts at Noah Friedman's script site. Examples from the The Bash Scripting Cookbook, by Albing, Vossen, and Newham. Example shell scripts at zazzybob. Steve Parker's Shell Programming Stuff. In fact, all of his shell scripting books are highly recommended. See also Steve's Arcade Games written in a shell script. An excellent collection of Bash scripting tips, tricks, and resources at the Bash Hackers Wiki. Giles Orr's Bash-Prompt HOWTO. The Pixelbeat command-line reference. Very nice sed, awk, and regular expression tutorials at The UNIX Grymoire. The GNU sed and gawk manuals. As you recall, gawk is the enhanced GNU version of awk. Many interesting sed scripts at the seder's grab bag. Tips and tricks at Linux Reviews. Trent Fisher's groff tutorial. David Wheeler's Filenames in Shell essay. &quot;Shelltris&quot; and &quot;shellitaire&quot; at Shell Script Games. YongYe's wonderfully complex Tetris game script. Mark Komarinski's Printing-Usage HOWTO. The Linux USB subsystem (helpful in writing scripts affecting USB peripherals). There is some nice material on I/O redirection in chapter 10 of the textutils documentation at the University of Alberta site. Rick Hohensee has written the osimpa i386 assembler entirely as Bash scripts. dgatwood has a very nice shell script games site, featuring a Tetris® clone and solitaire. Aurelio Marinho Jargas has written a Regular expression wizard. He has also written an informative book on Regular Expressions, in Portuguese. Ben Tomkins has created the Bash Navigator directory management tool. William Park has been working on a project to incorporate certain Awk and Python features into Bash. Among these is a gdbm interface. He has released bashdiff on Freshmeat.net. He has an article in the November, 2004 issue of the Linux Gazette on adding string functions to Bash, with a followup article in the December issue, and yet another in the January, 2005 issue. Peter Knowles has written an elaborate Bash script that generates a book list on the Sony Librie e-book reader. This useful tool facilitates loading non-DRM user content on the Librie (and the newer PRS-xxx-series devices). Tim Waugh's xmlto is an elaborate Bash script for converting Docbook XML documents to other formats. Philip Patterson's logforbash logging/debugging script. AuctionGallery, an application for eBay &quot;power sellers&quot; coded in Bash. Of historical interest are Colin Needham's original International Movie Database (IMDB) reader polling scripts, which nicely illustrate the use of awk for string parsing. Unfortunately, the URL link is broken. --- Fritz Mehner has written a bash-support plugin for the vim text editor. He has also also come up with his own stylesheet for Bash. Compare it with the ABS Guide Unofficial Stylesheet. --- Penguin Pete has quite a number of shell scripting tips and hints on his superb site. Highly recommended. The excellent Bash Reference Manual, by Chet Ramey and Brian Fox, distributed as part of the bash-2-doc package (available as an rpm). See especially the instructive example scripts in this package. John Lion's classic, A Commentary on the Sixth Edition UNIX Operating System. The comp.os.unix.shell newsgroup. The dd thread on Linux Questions. The comp.os.unix.shell FAQ. Assorted comp.os.unix FAQs. The Wikipedia article covering dc. The manpages for bash and bash2, date, expect, expr, find, grep, gzip, ln, patch, tar, tr, bc, xargs. The texinfo documentation on bash, dd, m4, gawk, and sed. Appendix A. Contributed Scripts These scripts, while not fitting into the text of this document, do illustrate some interesting shell programming techniques. Some are useful, too. Have fun analyzing and running them. Example A-1. mailformat: Formatting an e-mail message #!/bin/bash # mail-format.sh (ver. 1.1): Format e-mail messages. # Gets rid of carets, tabs, and also folds excessively long lines. # ================================================================= # Standard Check for Script Argument(s) ARGS=1 E_BADARGS=85 E_NOFILE=86 if [ $# -ne $ARGS ] # Correct number of arguments passed to script? then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi if [ -f &quot;$1&quot; ] # Check if file exists. then file_name=$1 else echo &quot;File \&quot;$1\&quot; does not exist.&quot; exit $E_NOFILE fi # ----------------------------------------------------------------- MAXWIDTH=70 # Width to fold excessively long lines to. # ================================= # A variable can hold a sed script. # It's a useful technique. sedscript='s/^&gt;// s/^ *&gt;// s/^ *// s/ *//' # ================================= # Delete carets and tabs at beginning of lines, #+ then fold lines to $MAXWIDTH characters. sed &quot;$sedscript&quot; $1 | fold -s --width=$MAXWIDTH # -s option to &quot;fold&quot; #+ breaks lines at whitespace, if possible. # This script was inspired by an article in a well-known trade journal #+ extolling a 164K MS Windows utility with similar functionality. # # An nice set of text processing utilities and an efficient #+ scripting language provide an alternative to the bloated executables #+ of a clunky operating system. exit $? Example A-2. rn: A simple-minded file renaming utility This script is a modification of Example 16-22. #! /bin/bash # rn.sh # Very simpleminded filename &quot;rename&quot; utility (based on &quot;lowercase.sh&quot;). # # The &quot;ren&quot; utility, by Vladimir Lanin (lanin@csd2.nyu.edu), #+ does a much better job of this. ARGS=2 E_BADARGS=85 ONE=1 # For getting singular/plural right (see below). if [ $# -ne &quot;$ARGS&quot; ] then echo &quot;Usage: `basename $0` old-pattern new-pattern&quot; # As in &quot;rn gif jpg&quot;, which renames all gif files in working directory to jpg. exit $E_BADARGS fi number=0 # Keeps track of how many files actually renamed. for filename in *$1* #Traverse all matching files in directory. do if [ -f &quot;$filename&quot; ] # If finds match... then fname=`basename $filename` # Strip off path. n=`echo $fname | sed -e &quot;s/$1/$2/&quot;` # Substitute new for old in filename. mv $fname $n # Rename. let &quot;number += 1&quot; fi done if [ &quot;$number&quot; -eq &quot;$ONE&quot; ] # For correct grammar. then echo &quot;$number file renamed.&quot; else echo &quot;$number files renamed.&quot; fi exit $? # Exercises: # --------- # What types of files will this not work on? # How can this be fixed? Example A-3. blank-rename: Renames filenames containing blanks This is an even simpler-minded version of previous script. #! /bin/bash # blank-rename.sh # # Substitutes underscores for blanks in all the filenames in a directory. ONE=1 # For getting singular/plural right (see below). number=0 # Keeps track of how many files actually renamed. FOUND=0 # Successful return value. for filename in * #Traverse all files in directory. do echo &quot;$filename&quot; | grep -q &quot; &quot; # Check whether filename if [ $? -eq $FOUND ] #+ contains space(s). then fname=$filename # Yes, this filename needs work. n=`echo $fname | sed -e &quot;s/ /_/g&quot;` # Substitute underscore for blank. mv &quot;$fname&quot; &quot;$n&quot; # Do the actual renaming. let &quot;number += 1&quot; fi done if [ &quot;$number&quot; -eq &quot;$ONE&quot; ] # For correct grammar. then echo &quot;$number file renamed.&quot; else echo &quot;$number files renamed.&quot; fi exit 0 Example A-4. encryptedpw: Uploading to an ftp site, using a locally encrypted password #!/bin/bash # Example &quot;ex72.sh&quot; modified to use encrypted password. # Note that this is still rather insecure, #+ since the decrypted password is sent in the clear. # Use something like &quot;ssh&quot; if this is a concern. E_BADARGS=85 if [ -z &quot;$1&quot; ] then echo &quot;Usage: `basename $0` filename&quot; exit $E_BADARGS fi Username=bozo # Change to suit. pword=/home/bozo/secret/password_encrypted.file # File containing encrypted password. Filename=`basename $1` # Strips pathname out of file name. Server=&quot;XXX&quot; Directory=&quot;YYY&quot; # Change above to actual server name &amp; directory. Password=`cruft &lt;$pword` # Decrypt password. # Uses the author's own &quot;cruft&quot; file encryption package, #+ based on the classic &quot;onetime pad&quot; algorithm, #+ and obtainable from: #+ Primary-site: ftp://ibiblio.org/pub/Linux/utils/file #+ cruft-0.2.tar.gz [16k] ftp -n $Server &lt;&lt;End-Of-Session user $Username $Password binary bell cd $Directory put $Filename bye End-Of-Session # -n option to &quot;ftp&quot; disables auto-logon. # Note that &quot;bell&quot; rings 'bell' after each file transfer. exit 0 Example A-5. copy-cd: Copying a data CD #!/bin/bash # copy-cd.sh: copying a data CD CDROM=/dev/cdrom # CD ROM device OF=/home/bozo/projects/cdimage.iso # output file # /xxxx/xxxxxxxx/ Change to suit your system. BLOCKSIZE=2048 # SPEED=10 # If unspecified, uses max spd. # DEVICE=/dev/cdrom older version. DEVICE=&quot;1,0,0&quot; echo; echo &quot;Insert source CD, but do *not* mount it.&quot; echo &quot;Press ENTER when ready. &quot; read ready # Wait for input, $ready not used. echo; echo &quot;Copying the source CD to $OF.&quot; echo &quot;This may take a while. Please be patient.&quot; dd if=$CDROM of=$OF bs=$BLOCKSIZE # Raw device copy. echo; echo &quot;Remove data CD.&quot; echo &quot;Insert blank CDR.&quot; echo &quot;Press ENTER when ready. &quot; read ready # Wait for input, $ready not used. echo &quot;Copying $OF to CDR.&quot; # cdrecord -v -isosize speed=$SPEED dev=$DEVICE $OF # Old version. wodim -v -isosize dev=$DEVICE $OF # Uses Joerg Schilling's &quot;cdrecord&quot; package (see its docs). # http://www.fokus.gmd.de/nthp/employees/schilling/cdrecord.html # Newer Linux distros may use &quot;wodim&quot; rather than &quot;cdrecord&quot; ... echo; echo &quot;Done copying $OF to CDR on device $CDROM.&quot; echo &quot;Do you want to erase the image file (y/n)? &quot; # Probably a huge file. read answer case &quot;$answer&quot; in [yY]) rm -f $OF echo &quot;$OF erased.&quot; ;; *) echo &quot;$OF not erased.&quot;;; esac echo # Exercise: # Change the above &quot;case&quot; statement to also accept &quot;yes&quot; and &quot;Yes&quot; as input. exit 0 Example A-6. Collatz series #!/bin/bash # collatz.sh # The notorious &quot;hailstone&quot; or Collatz series. # ------------------------------------------- # 1) Get the integer &quot;seed&quot; from the command-line. # 2) NUMBER &lt;-- seed # 3) Print NUMBER. # 4) If NUMBER is even, divide by 2, or # 5)+ if odd, multiply by 3 and add 1. # 6) NUMBER &lt;-- result # 7) Loop back to step 3 (for specified number of iterations). # # The theory is that every such sequence, #+ no matter how large the initial value, #+ eventually settles down to repeating &quot;4,2,1...&quot; cycles, #+ even after fluctuating through a wide range of values. # # This is an instance of an &quot;iterate,&quot; #+ an operation that feeds its output back into its input. # Sometimes the result is a &quot;chaotic&quot; series. MAX_ITERATIONS=200 # For large seed numbers (&gt;32000), try increasing MAX_ITERATIONS. h=${1:-$$} # Seed. # Use $PID as seed, #+ if not specified as command-line arg. echo echo &quot;C($h) -*- $MAX_ITERATIONS Iterations&quot; echo for ((i=1; i&lt;=MAX_ITERATIONS; i++)) do # echo -n &quot;$h &quot; # ^^^ # tab # printf does it better ... COLWIDTH=%7d printf $COLWIDTH $h let &quot;remainder = h % 2&quot; if [ &quot;$remainder&quot; -eq 0 ] # Even? then let &quot;h /= 2&quot; # Divide by 2. else let &quot;h = h*3 + 1&quot; # Multiply by 3 and add 1. fi COLUMNS=10 # Output 10 values per line. let &quot;line_break = i % $COLUMNS&quot; if [ &quot;$line_break&quot; -eq 0 ] then echo fi done echo # For more information on this strange mathematical function, #+ see _Computers, Pattern, Chaos, and Beauty_, by Pickover, p. 185 ff., #+ as listed in the bibliography. exit 0 Example A-7. days-between: Days between two dates #!/bin/bash # days-between.sh: Number of days between two dates. # Usage: ./days-between.sh [M]M/[D]D/YYYY [M]M/[D]D/YYYY # # Note: Script modified to account for changes in Bash, v. 2.05b +, #+ that closed the loophole permitting large negative #+ integer return values. ARGS=2 # Two command-line parameters expected. E_PARAM_ERR=85 # Param error. REFYR=1600 # Reference year. CENTURY=100 DIY=365 ADJ_DIY=367 # Adjusted for leap year + fraction. MIY=12 DIM=31 LEAPCYCLE=4 MAXRETVAL=255 # Largest permissible #+ positive return value from a function. diff= # Declare global variable for date difference. value= # Declare global variable for absolute value. day= # Declare globals for day, month, year. month= year= Param_Error () # Command-line parameters wrong. { echo &quot;Usage: `basename $0` [M]M/[D]D/YYYY [M]M/[D]D/YYYY&quot; echo &quot; (date must be after 1/3/1600)&quot; exit $E_PARAM_ERR } Parse_Date () # Parse date from command-line params. { month=${1%%/**} dm=${1%/**} # Day and month. day=${dm#*/} let &quot;year = `basename $1`&quot; # Not a filename, but works just the same. } check_date () # Checks for invalid date(s) passed. { [ &quot;$day&quot; -gt &quot;$DIM&quot; ] || [ &quot;$month&quot; -gt &quot;$MIY&quot; ] || [ &quot;$year&quot; -lt &quot;$REFYR&quot; ] &amp;&amp; Param_Error # Exit script on bad value(s). # Uses or-list / and-list. # # Exercise: Implement more rigorous date checking. } strip_leading_zero () # Better to strip possible leading zero(s) { #+ from day and/or month return ${1#0} #+ since otherwise Bash will interpret them } #+ as octal values (POSIX.2, sect 2.9.2.1). day_index () # Gauss' Formula: { # Days from March 1, 1600 to date passed as param. # ^^^^^^^^^^^^^ day=$1 month=$2 year=$3 let &quot;month = $month - 2&quot; if [ &quot;$month&quot; -le 0 ] then let &quot;month += 12&quot; let &quot;year -= 1&quot; fi let &quot;year -= $REFYR&quot; let &quot;indexyr = $year / $CENTURY&quot; let &quot;Days = $DIY*$year + $year/$LEAPCYCLE - $indexyr \ + $indexyr/$LEAPCYCLE + $ADJ_DIY*$month/$MIY + $day - $DIM&quot; # For an in-depth explanation of this algorithm, see #+ http://weblogs.asp.net/pgreborio/archive/2005/01/06/347968.aspx echo $Days } calculate_difference () # Difference between two day indices. { let &quot;diff = $1 - $2&quot; # Global variable. } abs () # Absolute value { # Uses global &quot;value&quot; variable. if [ &quot;$1&quot; -lt 0 ] # If negative then #+ then let &quot;value = 0 - $1&quot; #+ change sign, else #+ else let &quot;value = $1&quot; #+ leave it alone. fi } if [ $# -ne &quot;$ARGS&quot; ] # Require two command-line params. then Param_Error fi Parse_Date $1 check_date $day $month $year # See if valid date. strip_leading_zero $day # Remove any leading zeroes day=$? #+ on day and/or month. strip_leading_zero $month month=$? let &quot;date1 = `day_index $day $month $year`&quot; Parse_Date $2 check_date $day $month $year strip_leading_zero $day day=$? strip_leading_zero $month month=$? date2=$(day_index $day $month $year) # Command substitution. calculate_difference $date1 $date2 abs $diff # Make sure it's positive. diff=$value echo $diff exit 0 # Exercise: # -------- # If given only one command-line parameter, have the script #+ use today's date as the second. # Compare this script with #+ the implementation of Gauss' Formula in a C program at #+ http://buschencrew.hypermart.net/software/datedif Example A-8. Making a dictionary #!/bin/bash # makedict.sh [make dictionary] # Modification of /usr/sbin/mkdict (/usr/sbin/cracklib-forman) script. # Original script copyright 1993, by Alec Muffett. # # This modified script included in this document in a manner #+ consistent with the &quot;LICENSE&quot; document of the &quot;Crack&quot; package #+ that the original script is a part of. # This script processes text files to produce a sorted list #+ of words found in the files. # This may be useful for compiling dictionaries #+ and for other lexicographic purposes. E_BADARGS=85 if [ ! -r &quot;$1&quot; ] # Need at least one then #+ valid file argument. echo &quot;Usage: $0 files-to-process&quot; exit $E_BADARGS fi # SORT=&quot;sort&quot; # No longer necessary to define #+ options to sort. Changed from #+ original script. cat $* | # Dump specified files to stdout. tr A-Z a-z | # Convert to lowercase. tr ' ' '\012' | # New: change spaces to newlines. # tr -cd '\012[a-z][0-9]' | # Get rid of everything #+ non-alphanumeric (in orig. script). tr -c '\012a-z' '\012' | # Rather than deleting non-alpha #+ chars, change them to newlines. sort | # $SORT options unnecessary now. uniq | # Remove duplicates. grep -v '^#' | # Delete lines starting with #. grep -v '^$' # Delete blank lines. exit $? Example A-9. Soundex conversion #!/bin/bash # soundex.sh: Calculate &quot;soundex&quot; code for names # ======================================================= # Soundex script # by # Mendel Cooper # thegrendel.abs@gmail.com # reldate: 23 January, 2002 # # Placed in the Public Domain. # # A slightly different version of this script appeared in #+ Ed Schaefer's July, 2002 &quot;Shell Corner&quot; column #+ in &quot;Unix Review&quot; on-line, #+ http://www.unixreview.com/documents/uni1026336632258/ # ======================================================= ARGCOUNT=1 # Need name as argument. E_WRONGARGS=90 if [ $# -ne &quot;$ARGCOUNT&quot; ] then echo &quot;Usage: `basename $0` name&quot; exit $E_WRONGARGS fi assign_value () # Assigns numerical value { #+ to letters of name. val1=bfpv # 'b,f,p,v' = 1 val2=cgjkqsxz # 'c,g,j,k,q,s,x,z' = 2 val3=dt # etc. val4=l val5=mn val6=r # Exceptionally clever use of 'tr' follows. # Try to figure out what is going on here. value=$( echo &quot;$1&quot; \ | tr -d wh \ | tr $val1 1 | tr $val2 2 | tr $val3 3 \ | tr $val4 4 | tr $val5 5 | tr $val6 6 \ | tr -s 123456 \ | tr -d aeiouy ) # Assign letter values. # Remove duplicate numbers, except when separated by vowels. # Ignore vowels, except as separators, so delete them last. # Ignore 'w' and 'h', even as separators, so delete them first. # # The above command substitution lays more pipe than a plumber &lt;g&gt;. } input_name=&quot;$1&quot; echo echo &quot;Name = $input_name&quot; # Change all characters of name input to lowercase. # ------------------------------------------------ name=$( echo $input_name | tr A-Z a-z ) # ------------------------------------------------ # Just in case argument to script is mixed case. # Prefix of soundex code: first letter of name. # -------------------------------------------- char_pos=0 # Initialize character position. prefix0=${name:$char_pos:1} prefix=`echo $prefix0 | tr a-z A-Z` # Uppercase 1st letter of soundex. let &quot;char_pos += 1&quot; # Bump character position to 2nd letter of name. name1=${name:$char_pos} # ++++++++++++++++++++++++++ Exception Patch ++++++++++++++++++++++++++++++ # Now, we run both the input name and the name shifted one char #+ to the right through the value-assigning function. # If we get the same value out, that means that the first two characters #+ of the name have the same value assigned, and that one should cancel. # However, we also need to test whether the first letter of the name #+ is a vowel or 'w' or 'h', because otherwise this would bollix things up. char1=`echo $prefix | tr A-Z a-z` # First letter of name, lowercased. assign_value $name s1=$value assign_value $name1 s2=$value assign_value $char1 s3=$value s3=9$s3 # If first letter of name is a vowel #+ or 'w' or 'h', #+ then its &quot;value&quot; will be null (unset). #+ Therefore, set it to 9, an otherwise #+ unused value, which can be tested for. if [[ &quot;$s1&quot; -ne &quot;$s2&quot; || &quot;$s3&quot; -eq 9 ]] then suffix=$s2 else suffix=${s2:$char_pos} fi # ++++++++++++++++++++++ end Exception Patch ++++++++++++++++++++++++++++++ padding=000 # Use at most 3 zeroes to pad. soun=$prefix$suffix$padding # Pad with zeroes. MAXLEN=4 # Truncate to maximum of 4 chars. soundex=${soun:0:$MAXLEN} echo &quot;Soundex = $soundex&quot; echo # The soundex code is a method of indexing and classifying names #+ by grouping together the ones that sound alike. # The soundex code for a given name is the first letter of the name, #+ followed by a calculated three-number code. # Similar sounding names should have almost the same soundex codes. # Examples: # Smith and Smythe both have a &quot;S-530&quot; soundex. # Harrison = H-625 # Hargison = H-622 # Harriman = H-655 # This works out fairly well in practice, but there are numerous anomalies. # # # The U.S. Census and certain other governmental agencies use soundex, # as do genealogical researchers. # # For more information, #+ see the &quot;National Archives and Records Administration home page&quot;, #+ http://www.nara.gov/genealogy/soundex/soundex.html # Exercise: # -------- # Simplify the &quot;Exception Patch&quot; section of this script. exit 0 Example A-10. Game of Life #!/bin/bash # life.sh: &quot;Life in the Slow Lane&quot; # Author: Mendel Cooper # License: GPL3 # Version 0.2: Patched by Daniel Albers #+ to allow non-square grids as input. # Version 0.2.1: Added 2-second delay between generations. # ##################################################################### # # This is the Bash script version of John Conway's &quot;Game of Life&quot;. # # &quot;Life&quot; is a simple implementation of cellular automata. # # --------------------------------------------------------------------- # # On a rectangular grid, let each &quot;cell&quot; be either &quot;living&quot; or &quot;dead.&quot; # # Designate a living cell with a dot, and a dead one with a blank space.# # Begin with an arbitrarily drawn dot-and-blank grid, # #+ and let this be the starting generation: generation 0. # # Determine each successive generation by the following rules: # # 1) Each cell has 8 neighbors, the adjoining cells # #+ left, right, top, bottom, and the 4 diagonals. # # # # 123 # # 4*5 The * is the cell under consideration. # # 678 # # # # 2) A living cell with either 2 or 3 living neighbors remains alive. # SURVIVE=2 # # 3) A dead cell with 3 living neighbors comes alive, a &quot;birth.&quot; # BIRTH=3 # # 4) All other cases result in a dead cell for the next generation. # # ##################################################################### # startfile=gen0 # Read the starting generation from the file &quot;gen0&quot; ... # Default, if no other file specified when invoking script. # if [ -n &quot;$1&quot; ] # Specify another &quot;generation 0&quot; file. then startfile=&quot;$1&quot; fi ############################################ # Abort script if &quot;startfile&quot; not specified #+ and #+ default file &quot;gen0&quot; not present. E_NOSTARTFILE=86 if [ ! -e &quot;$startfile&quot; ] then echo &quot;Startfile \&quot;&quot;$startfile&quot;\&quot; missing!&quot; exit $E_NOSTARTFILE fi ############################################ ALIVE1=. DEAD1=_ # Represent living and dead cells in the start-up file. # -----------------------------------------------------# # This script uses a 10 x 10 grid (may be increased, #+ but a large grid will slow down execution). ROWS=10 COLS=10 # Change above two variables to match desired grid size. # -----------------------------------------------------# GENERATIONS=10 # How many generations to cycle through. # Adjust this upwards #+ if you have time on your hands. NONE_ALIVE=85 # Exit status on premature bailout, #+ if no cells left alive. DELAY=2 # Pause between generations. TRUE=0 FALSE=1 ALIVE=0 DEAD=1 avar= # Global; holds current generation. generation=0 # Initialize generation count. # ================================================================= let &quot;cells = $ROWS * $COLS&quot; # How many cells. # Arrays containing &quot;cells.&quot; declare -a initial declare -a current display () { alive=0 # How many cells alive at any given time. # Initially zero. declare -a arr arr=( `echo &quot;$1&quot;` ) # Convert passed arg to array. element_count=${#arr[*]} local i local rowcheck for ((i=0; i&lt;$element_count; i++)) do # Insert newline at end of each row. let &quot;rowcheck = $i % COLS&quot; if [ &quot;$rowcheck&quot; -eq 0 ] then echo # Newline. echo -n &quot; &quot; # Indent. fi cell=${arr[i]} if [ &quot;$cell&quot; = . ] then let &quot;alive += 1&quot; fi echo -n &quot;$cell&quot; | sed -e 's/_/ /g' # Print out array, changing underscores to spaces. done return } IsValid () # Test if cell coordinate valid. { if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ] # Mandatory arguments missing? then return $FALSE fi local row local lower_limit=0 # Disallow negative coordinate. local upper_limit local left local right let &quot;upper_limit = $ROWS * $COLS - 1&quot; # Total number of cells. if [ &quot;$1&quot; -lt &quot;$lower_limit&quot; -o &quot;$1&quot; -gt &quot;$upper_limit&quot; ] then return $FALSE # Out of array bounds. fi row=$2 let &quot;left = $row * $COLS&quot; # Left limit. let &quot;right = $left + $COLS - 1&quot; # Right limit. if [ &quot;$1&quot; -lt &quot;$left&quot; -o &quot;$1&quot; -gt &quot;$right&quot; ] then return $FALSE # Beyond row boundary. fi return $TRUE # Valid coordinate. } IsAlive () # Test whether cell is alive. # Takes array, cell number, and { #+ state of cell as arguments. GetCount &quot;$1&quot; $2 # Get alive cell count in neighborhood. local nhbd=$? if [ &quot;$nhbd&quot; -eq &quot;$BIRTH&quot; ] # Alive in any case. then return $ALIVE fi if [ &quot;$3&quot; = &quot;.&quot; -a &quot;$nhbd&quot; -eq &quot;$SURVIVE&quot; ] then # Alive only if previously alive. return $ALIVE fi return $DEAD # Defaults to dead. } GetCount () # Count live cells in passed cell's neighborhood. # Two arguments needed: # $1) variable holding array # $2) cell number { local cell_number=$2 local array local top local center local bottom local r local row local i local t_top local t_cen local t_bot local count=0 local ROW_NHBD=3 array=( `echo &quot;$1&quot;` ) let &quot;top = $cell_number - $COLS - 1&quot; # Set up cell neighborhood. let &quot;center = $cell_number - 1&quot; let &quot;bottom = $cell_number + $COLS - 1&quot; let &quot;r = $cell_number / $COLS&quot; for ((i=0; i&lt;$ROW_NHBD; i++)) # Traverse from left to right. do let &quot;t_top = $top + $i&quot; let &quot;t_cen = $center + $i&quot; let &quot;t_bot = $bottom + $i&quot; let &quot;row = $r&quot; # Count center row. IsValid $t_cen $row # Valid cell position? if [ $? -eq &quot;$TRUE&quot; ] then if [ ${array[$t_cen]} = &quot;$ALIVE1&quot; ] # Is it alive? then # If yes, then ... let &quot;count += 1&quot; # Increment count. fi fi let &quot;row = $r - 1&quot; # Count top row. IsValid $t_top $row if [ $? -eq &quot;$TRUE&quot; ] then if [ ${array[$t_top]} = &quot;$ALIVE1&quot; ] # Redundancy here. then # Can it be optimized? let &quot;count += 1&quot; fi fi let &quot;row = $r + 1&quot; # Count bottom row. IsValid $t_bot $row if [ $? -eq &quot;$TRUE&quot; ] then if [ ${array[$t_bot]} = &quot;$ALIVE1&quot; ] then let &quot;count += 1&quot; fi fi done if [ ${array[$cell_number]} = &quot;$ALIVE1&quot; ] then let &quot;count -= 1&quot; # Make sure value of tested cell itself fi #+ is not counted. return $count } next_gen () # Update generation array. { local array local i=0 array=( `echo &quot;$1&quot;` ) # Convert passed arg to array. while [ &quot;$i&quot; -lt &quot;$cells&quot; ] do IsAlive &quot;$1&quot; $i ${array[$i]} # Is the cell alive? if [ $? -eq &quot;$ALIVE&quot; ] then # If alive, then array[$i]=. #+ represent the cell as a period. else array[$i]=&quot;_&quot; # Otherwise underscore fi #+ (will later be converted to space). let &quot;i += 1&quot; done # let &quot;generation += 1&quot; # Increment generation count. ### Why was the above line commented out? # Set variable to pass as parameter to &quot;display&quot; function. avar=`echo ${array[@]}` # Convert array back to string variable. display &quot;$avar&quot; # Display it. echo; echo echo &quot;Generation $generation - $alive alive&quot; if [ &quot;$alive&quot; -eq 0 ] then echo echo &quot;Premature exit: no more cells alive!&quot; exit $NONE_ALIVE # No point in continuing fi #+ if no live cells. } # ========================================================= # main () # { # Load initial array with contents of startup file. initial=( `cat &quot;$startfile&quot; | sed -e '/#/d' | tr -d '\n' |\ # Delete lines containing '#' comment character. sed -e 's/\./\. /g' -e 's/_/_ /g'` ) # Remove linefeeds and insert space between elements. clear # Clear screen. echo # Title setterm -reverse on echo &quot;=======================&quot; setterm -reverse off echo &quot; $GENERATIONS generations&quot; echo &quot; of&quot; echo &quot;\&quot;Life in the Slow Lane\&quot;&quot; setterm -reverse on echo &quot;=======================&quot; setterm -reverse off sleep $DELAY # Display &quot;splash screen&quot; for 2 seconds. # -------- Display first generation. -------- Gen0=`echo ${initial[@]}` display &quot;$Gen0&quot; # Display only. echo; echo echo &quot;Generation $generation - $alive alive&quot; sleep $DELAY # ------------------------------------------- let &quot;generation += 1&quot; # Bump generation count. echo # ------- Display second generation. ------- Cur=`echo ${initial[@]}` next_gen &quot;$Cur&quot; # Update &amp; display. sleep $DELAY # ------------------------------------------ let &quot;generation += 1&quot; # Increment generation count. # ------ Main loop for displaying subsequent generations ------ while [ &quot;$generation&quot; -le &quot;$GENERATIONS&quot; ] do Cur=&quot;$avar&quot; next_gen &quot;$Cur&quot; let &quot;generation += 1&quot; sleep $DELAY done # ============================================================== echo # } exit 0 # CEOF:EOF # The grid in this script has a &quot;boundary problem.&quot; # The the top, bottom, and sides border on a void of dead cells. # Exercise: Change the script to have the grid wrap around, # + so that the left and right sides will &quot;touch,&quot; # + as will the top and bottom. # # Exercise: Create a new &quot;gen0&quot; file to seed this script. # Use a 12 x 16 grid, instead of the original 10 x 10 one. # Make the necessary changes to the script, #+ so it will run with the altered file. # # Exercise: Modify this script so that it can determine the grid size #+ from the &quot;gen0&quot; file, and set any variables necessary #+ for the script to run. # This would make unnecessary any changes to variables #+ in the script for an altered grid size. # # Exercise: Optimize this script. # It has redundant code. Example A-11. Data file for Game of Life # gen0 # # This is an example &quot;generation 0&quot; start-up file for &quot;life.sh&quot;. # -------------------------------------------------------------- # The &quot;gen0&quot; file is a 10 x 10 grid using a period (.) for live cells, #+ and an underscore (_) for dead ones. We cannot simply use spaces #+ for dead cells in this file because of a peculiarity in Bash arrays. # [Exercise for the reader: explain this.] # # Lines beginning with a '#' are comments, and the script ignores them. __.__..___ __.._.____ ____.___.. _._______. ____._____ ..__...___ ____._____ ___...____ __.._..___ _..___..__ +++ The following script is by Mark Moraes of the University of Toronto. See the file Moraes-COPYRIGHT for permissions and restrictions. This file is included in the combined HTML/source tarball of the ABS Guide. Example A-12. behead: Removing mail and news message headers #! /bin/sh # Strips off the header from a mail/News message i.e. till the first #+ empty line. # Author: Mark Moraes, University of Toronto # ==&gt; These comments added by author of this document. if [ $# -eq 0 ]; then # ==&gt; If no command-line args present, then works on file redirected to stdin. sed -e '1,/^$/d' -e '/^[ ]*$/d' # --&gt; Delete empty lines and all lines until # --&gt; first one beginning with white space. else # ==&gt; If command-line args present, then work on files named. for i do sed -e '1,/^$/d' -e '/^[ ]*$/d' $i # --&gt; Ditto, as above. done fi exit # ==&gt; Exercise: Add error checking and other options. # ==&gt; # ==&gt; Note that the small sed script repeats, except for the arg passed. # ==&gt; Does it make sense to embed it in a function? Why or why not? /* * Copyright University of Toronto 1988, 1989. * Written by Mark Moraes * * Permission is granted to anyone to use this software for any purpose on * any computer system, and to alter it and redistribute it freely, subject * to the following restrictions: * * 1. The author and the University of Toronto are not responsible * for the consequences of use of this software, no matter how awful, * even if they arise from flaws in it. * * 2. The origin of this software must not be misrepresented, either by * explicit claim or by omission. Since few users ever read sources, * credits must appear in the documentation. * * 3. Altered versions must be plainly marked as such, and must not be * misrepresented as being the original software. Since few users * ever read sources, credits must appear in the documentation. * * 4. This notice may not be removed or altered. */ + Antek Sawicki contributed the following script, which makes very clever use of the parameter substitution operators discussed in Section 10.2. Example A-13. password: Generating random 8-character passwords #!/bin/bash # # # Random password generator for Bash 2.x + #+ by Antek Sawicki &lt;tenox@tenox.tc&gt;, #+ who generously gave usage permission to the ABS Guide author. # # ==&gt; Comments added by document author ==&gt; MATRIX=&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot; # ==&gt; Password will consist of alphanumeric characters. LENGTH=&quot;8&quot; # ==&gt; May change 'LENGTH' for longer password. while [ &quot;${n:=1}&quot; -le &quot;$LENGTH&quot; ] # ==&gt; Recall that := is &quot;default substitution&quot; operator. # ==&gt; So, if 'n' has not been initialized, set it to 1. do PASS=&quot;$PASS${MATRIX:$(($RANDOM%${#MATRIX})):1}&quot; # ==&gt; Very clever, but tricky. # ==&gt; Starting from the innermost nesting... # ==&gt; ${#MATRIX} returns length of array MATRIX. # ==&gt; $RANDOM%${#MATRIX} returns random number between 1 # ==&gt; and [length of MATRIX] - 1. # ==&gt; ${MATRIX:$(($RANDOM%${#MATRIX})):1} # ==&gt; returns expansion of MATRIX at random position, by length 1. # ==&gt; See {var:pos:len} parameter substitution in Chapter 9. # ==&gt; and the associated examples. # ==&gt; PASS=... simply pastes this result onto previous PASS (concatenation). # ==&gt; To visualize this more clearly, uncomment the following line # echo &quot;$PASS&quot; # ==&gt; to see PASS being built up, # ==&gt; one character at a time, each iteration of the loop. let n+=1 # ==&gt; Increment 'n' for next pass. done echo &quot;$PASS&quot; # ==&gt; Or, redirect to a file, as desired. exit 0 + James R. Van Zandt contributed this script which uses named pipes and, in his words, &quot;really exercises quoting and escaping.&quot; Example A-14. fifo: Making daily backups, using named pipes #!/bin/bash # ==&gt; Script by James R. Van Zandt, and used here with his permission. # ==&gt; Comments added by author of this document. HERE=`uname -n` # ==&gt; hostname THERE=bilbo echo &quot;starting remote backup to $THERE at `date +%r`&quot; # ==&gt; `date +%r` returns time in 12-hour format, i.e. &quot;08:08:34 PM&quot;. # make sure /pipe really is a pipe and not a plain file rm -rf /pipe mkfifo /pipe # ==&gt; Create a &quot;named pipe&quot;, named &quot;/pipe&quot; ... # ==&gt; 'su xyz' runs commands as user &quot;xyz&quot;. # ==&gt; 'ssh' invokes secure shell (remote login client). su xyz -c &quot;ssh $THERE \&quot;cat &gt; /home/xyz/backup/${HERE}-daily.tar.gz\&quot; &lt; /pipe&quot;&amp; cd / tar -czf - bin boot dev etc home info lib man root sbin share usr var &gt; /pipe # ==&gt; Uses named pipe, /pipe, to communicate between processes: # ==&gt; 'tar/gzip' writes to /pipe and 'ssh' reads from /pipe. # ==&gt; The end result is this backs up the main directories, from / on down. # ==&gt; What are the advantages of a &quot;named pipe&quot; in this situation, # ==&gt;+ as opposed to an &quot;anonymous pipe&quot;, with |? # ==&gt; Will an anonymous pipe even work here? # ==&gt; Is it necessary to delete the pipe before exiting the script? # ==&gt; How could that be done? exit 0 + Stéphane Chazelas used the following script to demonstrate generating prime numbers without arrays. Example A-15. Generating prime numbers using the modulo operator #!/bin/bash # primes.sh: Generate prime numbers, without using arrays. # Script contributed by Stephane Chazelas. # This does *not* use the classic &quot;Sieve of Eratosthenes&quot; algorithm, #+ but instead the more intuitive method of testing each candidate number #+ for factors (divisors), using the &quot;%&quot; modulo operator. LIMIT=1000 # Primes, 2 ... 1000. Primes() { (( n = $1 + 1 )) # Bump to next integer. shift # Next parameter in list. # echo &quot;_n=$n i=$i_&quot; if (( n == LIMIT )) then echo $* return fi for i; do # &quot;i&quot; set to &quot;@&quot;, previous values of $n. # echo &quot;-n=$n i=$i-&quot; (( i * i &gt; n )) &amp;&amp; break # Optimization. (( n % i )) &amp;&amp; continue # Sift out non-primes using modulo operator. Primes $n $@ # Recursion inside loop. return done Primes $n $@ $n # Recursion outside loop. # Successively accumulate #+ positional parameters. # &quot;$@&quot; is the accumulating list of primes. } Primes 1 exit $? # Pipe output of the script to 'fmt' for prettier printing. # Uncomment lines 16 and 24 to help figure out what is going on. # Compare the speed of this algorithm for generating primes #+ with the Sieve of Eratosthenes (ex68.sh). # Exercise: Rewrite this script without recursion. + Rick Boivie's revision of Jordi Sanfeliu's tree script. Example A-16. tree: Displaying a directory tree #!/bin/bash # tree.sh # Written by Rick Boivie. # Used with permission. # This is a revised and simplified version of a script #+ by Jordi Sanfeliu (the original author), and patched by Ian Kjos. # This script replaces the earlier version used in #+ previous releases of the Advanced Bash Scripting Guide. # Copyright (c) 2002, by Jordi Sanfeliu, Rick Boivie, and Ian Kjos. # ==&gt; Comments added by the author of this document. search () { for dir in `echo *` # ==&gt; `echo *` lists all the files in current working directory, #+ ==&gt; without line breaks. # ==&gt; Similar effect to for dir in * # ==&gt; but &quot;dir in `echo *`&quot; will not handle filenames with blanks. do if [ -d &quot;$dir&quot; ] ; then # ==&gt; If it is a directory (-d)... zz=0 # ==&gt; Temp variable, keeping track of # directory level. while [ $zz != $1 ] # Keep track of inner nested loop. do echo -n &quot;| &quot; # ==&gt; Display vertical connector symbol, # ==&gt; with 2 spaces &amp; no line feed # in order to indent. zz=`expr $zz + 1` # ==&gt; Increment zz. done if [ -L &quot;$dir&quot; ] ; then # ==&gt; If directory is a symbolic link... echo &quot;+---$dir&quot; `ls -l $dir | sed 's/^.*'$dir' //'` # ==&gt; Display horiz. connector and list directory name, but... # ==&gt; delete date/time part of long listing. else echo &quot;+---$dir&quot; # ==&gt; Display horizontal connector symbol... # ==&gt; and print directory name. numdirs=`expr $numdirs + 1` # ==&gt; Increment directory count. if cd &quot;$dir&quot; ; then # ==&gt; If can move to subdirectory... search `expr $1 + 1` # with recursion ;-) # ==&gt; Function calls itself. cd .. fi fi fi done } if [ $# != 0 ] ; then cd $1 # Move to indicated directory. #else # stay in current directory fi echo &quot;Initial directory = `pwd`&quot; numdirs=0 search 0 echo &quot;Total directories = $numdirs&quot; exit 0 Patsie's version of a directory tree script. Example A-17. tree2: Alternate directory tree script #!/bin/bash # tree2.sh # Lightly modified/reformatted by ABS Guide author. # Included in ABS Guide with permission of script author (thanks!). ## Recursive file/dirsize checking script, by Patsie ## ## This script builds a list of files/directories and their size (du -akx) ## and processes this list to a human readable tree shape ## The 'du -akx' is only as good as the permissions the owner has. ## So preferably run as root* to get the best results, or use only on ## directories for which you have read permissions. Anything you can't ## read is not in the list. #* ABS Guide author advises caution when running scripts as root! ########## THIS IS CONFIGURABLE ########## TOP=5 # Top 5 biggest (sub)directories. MAXRECURS=5 # Max 5 subdirectories/recursions deep. E_BL=80 # Blank line already returned. E_DIR=81 # Directory not specified. ########## DON'T CHANGE ANYTHING BELOW THIS LINE ########## PID=$$ # Our own process ID. SELF=`basename $0` # Our own program name. TMP=&quot;/tmp/${SELF}.${PID}.tmp&quot; # Temporary 'du' result. # Convert number to dotted thousand. function dot { echo &quot; $*&quot; | sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta' | tail -c 12; } # Usage: tree &lt;recursion&gt; &lt;indent prefix&gt; &lt;min size&gt; &lt;directory&gt; function tree { recurs=&quot;$1&quot; # How deep nested are we? prefix=&quot;$2&quot; # What do we display before file/dirname? minsize=&quot;$3&quot; # What is the minumum file/dirsize? dirname=&quot;$4&quot; # Which directory are we checking? # Get ($TOP) biggest subdirs/subfiles from TMP file. LIST=`egrep &quot;[[:space:]]${dirname}/[^/]*$&quot; &quot;$TMP&quot; | awk '{if($1&gt;'$minsize') print;}' | sort -nr | head -$TOP` [ -z &quot;$LIST&quot; ] &amp;&amp; return # Empty list, then go back. cnt=0 num=`echo &quot;$LIST&quot; | wc -l` # How many entries in the list. ## Main loop echo &quot;$LIST&quot; | while read size name; do ((cnt+=1)) # Count entry number. bname=`basename &quot;$name&quot;` # We only need a basename of the entry. [ -d &quot;$name&quot; ] &amp;&amp; bname=&quot;$bname/&quot; # If it's a directory, append a slash. echo &quot;`dot $size`$prefix +-$bname&quot; # Display the result. # Call ourself recursively if it's a directory #+ and we're not nested too deep ($MAXRECURS). # The recursion goes up: $((recurs+1)) # The prefix gets a space if it's the last entry, #+ or a pipe if there are more entries. # The minimum file/dirsize becomes #+ a tenth of his parent: $((size/10)). # Last argument is the full directory name to check. if [ -d &quot;$name&quot; -a $recurs -lt $MAXRECURS ]; then [ $cnt -lt $num ] \ || (tree $((recurs+1)) &quot;$prefix &quot; $((size/10)) &quot;$name&quot;) \ &amp;&amp; (tree $((recurs+1)) &quot;$prefix |&quot; $((size/10)) &quot;$name&quot;) fi done [ $? -eq 0 ] &amp;&amp; echo &quot; $prefix&quot; # Every time we jump back add a 'blank' line. return $E_BL # We return 80 to tell we added a blank line already. } ### ### ### main program ### ### ### rootdir=&quot;$@&quot; [ -d &quot;$rootdir&quot; ] || { echo &quot;$SELF: Usage: $SELF &lt;directory&gt;&quot; &gt;&amp;2; exit $E_DIR; } # We should be called with a directory name. echo &quot;Building inventory list, please wait ...&quot; # Show &quot;please wait&quot; message. du -akx &quot;$rootdir&quot; 1&gt;&quot;$TMP&quot; 2&gt;/dev/null # Build a temporary list of all files/dirs and their size. size=`tail -1 &quot;$TMP&quot; | awk '{print $1}'` # What is our rootdirectory's size? echo &quot;`dot $size` $rootdir&quot; # Display rootdirectory's entry. tree 0 &quot;&quot; 0 &quot;$rootdir&quot; # Display the tree below our rootdirectory. rm &quot;$TMP&quot; 2&gt;/dev/null # Clean up TMP file. exit $? Noah Friedman permitted use of his string function script. It essentially reproduces some of the C-library string manipulation functions. Example A-18. string functions: C-style string functions #!/bin/bash # string.bash --- bash emulation of string(3) library routines # Author: Noah Friedman &lt;friedman@prep.ai.mit.edu&gt; # ==&gt; Used with his kind permission in this document. # Created: 1992-07-01 # Last modified: 1993-09-29 # Public domain # Conversion to bash v2 syntax done by Chet Ramey # Commentary: # Code: #:docstring strcat: # Usage: strcat s1 s2 # # Strcat appends the value of variable s2 to variable s1. # # Example: # a=&quot;foo&quot; # b=&quot;bar&quot; # strcat a b # echo $a # =&gt; foobar # #:end docstring: ###;;;autoload ==&gt; Autoloading of function commented out. function strcat () { local s1_val s2_val s1_val=${!1} # indirect variable expansion s2_val=${!2} eval &quot;$1&quot;=\'&quot;${s1_val}${s2_val}&quot;\' # ==&gt; eval $1='${s1_val}${s2_val}' avoids problems, # ==&gt; if one of the variables contains a single quote. } #:docstring strncat: # Usage: strncat s1 s2 $n # # Line strcat, but strncat appends a maximum of n characters from the value # of variable s2. It copies fewer if the value of variabl s2 is shorter # than n characters. Echoes result on stdout. # # Example: # a=foo # b=barbaz # strncat a b 3 # echo $a # =&gt; foobar # #:end docstring: ###;;;autoload function strncat () { local s1=&quot;$1&quot; local s2=&quot;$2&quot; local -i n=&quot;$3&quot; local s1_val s2_val s1_val=${!s1} # ==&gt; indirect variable expansion s2_val=${!s2} if [ ${#s2_val} -gt ${n} ]; then s2_val=${s2_val:0:$n} # ==&gt; substring extraction fi eval &quot;$s1&quot;=\'&quot;${s1_val}${s2_val}&quot;\' # ==&gt; eval $1='${s1_val}${s2_val}' avoids problems, # ==&gt; if one of the variables contains a single quote. } #:docstring strcmp: # Usage: strcmp $s1 $s2 # # Strcmp compares its arguments and returns an integer less than, equal to, # or greater than zero, depending on whether string s1 is lexicographically # less than, equal to, or greater than string s2. #:end docstring: ###;;;autoload function strcmp () { [ &quot;$1&quot; = &quot;$2&quot; ] &amp;&amp; return 0 [ &quot;${1}&quot; '&lt;' &quot;${2}&quot; ] &gt; /dev/null &amp;&amp; return -1 return 1 } #:docstring strncmp: # Usage: strncmp $s1 $s2 $n # # Like strcmp, but makes the comparison by examining a maximum of n # characters (n less than or equal to zero yields equality). #:end docstring: ###;;;autoload function strncmp () { if [ -z &quot;${3}&quot; -o &quot;${3}&quot; -le &quot;0&quot; ]; then return 0 fi if [ ${3} -ge ${#1} -a ${3} -ge ${#2} ]; then strcmp &quot;$1&quot; &quot;$2&quot; return $? else s1=${1:0:$3} s2=${2:0:$3} strcmp $s1 $s2 return $? fi } #:docstring strlen: # Usage: strlen s # # Strlen returns the number of characters in string literal s. #:end docstring: ###;;;autoload function strlen () { eval echo &quot;\${#${1}}&quot; # ==&gt; Returns the length of the value of the variable # ==&gt; whose name is passed as an argument. } #:docstring strspn: # Usage: strspn $s1 $s2 # # Strspn returns the length of the maximum initial segment of string s1, # which consists entirely of characters from string s2. #:end docstring: ###;;;autoload function strspn () { # Unsetting IFS allows whitespace to be handled as normal chars. local IFS= local result=&quot;${1%%[!${2}]*}&quot; echo ${#result} } #:docstring strcspn: # Usage: strcspn $s1 $s2 # # Strcspn returns the length of the maximum initial segment of string s1, # which consists entirely of characters not from string s2. #:end docstring: ###;;;autoload function strcspn () { # Unsetting IFS allows whitspace to be handled as normal chars. local IFS= local result=&quot;${1%%[${2}]*}&quot; echo ${#result} } #:docstring strstr: # Usage: strstr s1 s2 # # Strstr echoes a substring starting at the first occurrence of string s2 in # string s1, or nothing if s2 does not occur in the string. If s2 points to # a string of zero length, strstr echoes s1. #:end docstring: ###;;;autoload function strstr () { # if s2 points to a string of zero length, strstr echoes s1 [ ${#2} -eq 0 ] &amp;&amp; { echo &quot;$1&quot; ; return 0; } # strstr echoes nothing if s2 does not occur in s1 case &quot;$1&quot; in *$2*) ;; *) return 1;; esac # use the pattern matching code to strip off the match and everything # following it first=${1/$2*/} # then strip off the first unmatched portion of the string echo &quot;${1##$first}&quot; } #:docstring strtok: # Usage: strtok s1 s2 # # Strtok considers the string s1 to consist of a sequence of zero or more # text tokens separated by spans of one or more characters from the # separator string s2. The first call (with a non-empty string s1 # specified) echoes a string consisting of the first token on stdout. The # function keeps track of its position in the string s1 between separate # calls, so that subsequent calls made with the first argument an empty # string will work through the string immediately following that token. In # this way subsequent calls will work through the string s1 until no tokens # remain. The separator string s2 may be different from call to call. # When no token remains in s1, an empty value is echoed on stdout. #:end docstring: ###;;;autoload function strtok () { : } #:docstring strtrunc: # Usage: strtrunc $n $s1 {$s2} {$...} # # Used by many functions like strncmp to truncate arguments for comparison. # Echoes the first n characters of each string s1 s2 ... on stdout. #:end docstring: ###;;;autoload function strtrunc () { n=$1 ; shift for z; do echo &quot;${z:0:$n}&quot; done } # provide string # string.bash ends here # ========================================================================== # # ==&gt; Everything below here added by the document author. # ==&gt; Suggested use of this script is to delete everything below here, # ==&gt; and &quot;source&quot; this file into your own scripts. # strcat string0=one string1=two echo echo &quot;Testing \&quot;strcat\&quot; function:&quot; echo &quot;Original \&quot;string0\&quot; = $string0&quot; echo &quot;\&quot;string1\&quot; = $string1&quot; strcat string0 string1 echo &quot;New \&quot;string0\&quot; = $string0&quot; echo # strlen echo echo &quot;Testing \&quot;strlen\&quot; function:&quot; str=123456789 echo &quot;\&quot;str\&quot; = $str&quot; echo -n &quot;Length of \&quot;str\&quot; = &quot; strlen str echo # Exercise: # -------- # Add code to test all the other string functions above. exit 0 Michael Zick's complex array example uses the md5sum check sum command to encode directory information. Example A-19. Directory information #! /bin/bash # directory-info.sh # Parses and lists directory information. # NOTE: Change lines 273 and 353 per &quot;README&quot; file. # Michael Zick is the author of this script. # Used here with his permission. # Controls # If overridden by command arguments, they must be in the order: # Arg1: &quot;Descriptor Directory&quot; # Arg2: &quot;Exclude Paths&quot; # Arg3: &quot;Exclude Directories&quot; # # Environment Settings override Defaults. # Command arguments override Environment Settings. # Default location for content addressed file descriptors. MD5UCFS=${1:-${MD5UCFS:-'/tmpfs/ucfs'}} # Directory paths never to list or enter declare -a \ EXCLUDE_PATHS=${2:-${EXCLUDE_PATHS:-'(/proc /dev /devfs /tmpfs)'}} # Directories never to list or enter declare -a \ EXCLUDE_DIRS=${3:-${EXCLUDE_DIRS:-'(ucfs lost+found tmp wtmp)'}} # Files never to list or enter declare -a \ EXCLUDE_FILES=${3:-${EXCLUDE_FILES:-'(core &quot;Name with Spaces&quot;)'}} # Here document used as a comment block. : &lt;&lt;LSfieldsDoc # # # # # List Filesystem Directory Information # # # # # # # ListDirectory &quot;FileGlob&quot; &quot;Field-Array-Name&quot; # or # ListDirectory -of &quot;FileGlob&quot; &quot;Field-Array-Filename&quot; # '-of' meaning 'output to filename' # # # # # String format description based on: ls (GNU fileutils) version 4.0.36 Produces a line (or more) formatted: inode permissions hard-links owner group ... 32736 -rw------- 1 mszick mszick size day month date hh:mm:ss year path 2756608 Sun Apr 20 08:53:06 2003 /home/mszick/core Unless it is formatted: inode permissions hard-links owner group ... 266705 crw-rw---- 1 root uucp major minor day month date hh:mm:ss year path 4, 68 Sun Apr 20 09:27:33 2003 /dev/ttyS4 NOTE: that pesky comma after the major number NOTE: the 'path' may be multiple fields: /home/mszick/core /proc/982/fd/0 -&gt; /dev/null /proc/982/fd/1 -&gt; /home/mszick/.xsession-errors /proc/982/fd/13 -&gt; /tmp/tmpfZVVOCs (deleted) /proc/982/fd/7 -&gt; /tmp/kde-mszick/ksycoca /proc/982/fd/8 -&gt; socket:[11586] /proc/982/fd/9 -&gt; pipe:[11588] If that isn't enough to keep your parser guessing, either or both of the path components may be relative: ../Built-Shared -&gt; Built-Static ../linux-2.4.20.tar.bz2 -&gt; ../../../SRCS/linux-2.4.20.tar.bz2 The first character of the 11 (10?) character permissions field: 's' Socket 'd' Directory 'b' Block device 'c' Character device 'l' Symbolic link NOTE: Hard links not marked - test for identical inode numbers on identical filesystems. All information about hard linked files are shared, except for the names and the name's location in the directory system. NOTE: A &quot;Hard link&quot; is known as a &quot;File Alias&quot; on some systems. '-' An undistingushed file Followed by three groups of letters for: User, Group, Others Character 1: '-' Not readable; 'r' Readable Character 2: '-' Not writable; 'w' Writable Character 3, User and Group: Combined execute and special '-' Not Executable, Not Special 'x' Executable, Not Special 's' Executable, Special 'S' Not Executable, Special Character 3, Others: Combined execute and sticky (tacky?) '-' Not Executable, Not Tacky 'x' Executable, Not Tacky 't' Executable, Tacky 'T' Not Executable, Tacky Followed by an access indicator Haven't tested this one, it may be the eleventh character or it may generate another field ' ' No alternate access '+' Alternate access LSfieldsDoc ListDirectory() { local -a T local -i of=0 # Default return in variable # OLD_IFS=$IFS # Using BASH default ' \t\n' case &quot;$#&quot; in 3) case &quot;$1&quot; in -of) of=1 ; shift ;; * ) return 1 ;; esac ;; 2) : ;; # Poor man's &quot;continue&quot; *) return 1 ;; esac # NOTE: the (ls) command is NOT quoted (&quot;) T=( $(ls --inode --ignore-backups --almost-all --directory \ --full-time --color=none --time=status --sort=none \ --format=long $1) ) case $of in # Assign T back to the array whose name was passed as $2 0) eval $2=\( \&quot;\$\{T\[@\]\}\&quot; \) ;; # Write T into filename passed as $2 1) echo &quot;${T[@]}&quot; &gt; &quot;$2&quot; ;; esac return 0 } # # # # # Is that string a legal number? # # # # # # # IsNumber &quot;Var&quot; # # # # # There has to be a better way, sigh... IsNumber() { local -i int if [ $# -eq 0 ] then return 1 else (let int=$1) 2&gt;/dev/null return $? # Exit status of the let thread fi } # # # # # Index Filesystem Directory Information # # # # # # # IndexList &quot;Field-Array-Name&quot; &quot;Index-Array-Name&quot; # or # IndexList -if Field-Array-Filename Index-Array-Name # IndexList -of Field-Array-Name Index-Array-Filename # IndexList -if -of Field-Array-Filename Index-Array-Filename # # # # # : &lt;&lt;IndexListDoc Walk an array of directory fields produced by ListDirectory Having suppressed the line breaks in an otherwise line oriented report, build an index to the array element which starts each line. Each line gets two index entries, the first element of each line (inode) and the element that holds the pathname of the file. The first index entry pair (Line-Number==0) are informational: Index-Array-Name[0] : Number of &quot;Lines&quot; indexed Index-Array-Name[1] : &quot;Current Line&quot; pointer into Index-Array-Name The following index pairs (if any) hold element indexes into the Field-Array-Name per: Index-Array-Name[Line-Number * 2] : The &quot;inode&quot; field element. NOTE: This distance may be either +11 or +12 elements. Index-Array-Name[(Line-Number * 2) + 1] : The &quot;pathname&quot; element. NOTE: This distance may be a variable number of elements. Next line index pair for Line-Number+1. IndexListDoc IndexList() { local -a LIST # Local of listname passed local -a -i INDEX=( 0 0 ) # Local of index to return local -i Lidx Lcnt local -i if=0 of=0 # Default to variable names case &quot;$#&quot; in # Simplistic option testing 0) return 1 ;; 1) return 1 ;; 2) : ;; # Poor man's continue 3) case &quot;$1&quot; in -if) if=1 ;; -of) of=1 ;; * ) return 1 ;; esac ; shift ;; 4) if=1 ; of=1 ; shift ; shift ;; *) return 1 esac # Make local copy of list case &quot;$if&quot; in 0) eval LIST=\( \&quot;\$\{$1\[@\]\}\&quot; \) ;; 1) LIST=( $(cat $1) ) ;; esac # Grok (grope?) the array Lcnt=${#LIST[@]} Lidx=0 until (( Lidx &gt;= Lcnt )) do if IsNumber ${LIST[$Lidx]} then local -i inode name local ft inode=Lidx local m=${LIST[$Lidx+2]} # Hard Links field ft=${LIST[$Lidx+1]:0:1} # Fast-Stat case $ft in b) ((Lidx+=12)) ;; # Block device c) ((Lidx+=12)) ;; # Character device *) ((Lidx+=11)) ;; # Anything else esac name=Lidx case $ft in -) ((Lidx+=1)) ;; # The easy one b) ((Lidx+=1)) ;; # Block device c) ((Lidx+=1)) ;; # Character device d) ((Lidx+=1)) ;; # The other easy one l) ((Lidx+=3)) ;; # At LEAST two more fields # A little more elegance here would handle pipes, #+ sockets, deleted files - later. *) until IsNumber ${LIST[$Lidx]} || ((Lidx &gt;= Lcnt)) do ((Lidx+=1)) done ;; # Not required esac INDEX[${#INDEX[*]}]=$inode INDEX[${#INDEX[*]}]=$name INDEX[0]=${INDEX[0]}+1 # One more &quot;line&quot; found # echo &quot;Line: ${INDEX[0]} Type: $ft Links: $m Inode: \ # ${LIST[$inode]} Name: ${LIST[$name]}&quot; else ((Lidx+=1)) fi done case &quot;$of&quot; in 0) eval $2=\( \&quot;\$\{INDEX\[@\]\}\&quot; \) ;; 1) echo &quot;${INDEX[@]}&quot; &gt; &quot;$2&quot; ;; esac return 0 # What could go wrong? } # # # # # Content Identify File # # # # # # # DigestFile Input-Array-Name Digest-Array-Name # or # DigestFile -if Input-FileName Digest-Array-Name # # # # # # Here document used as a comment block. : &lt;&lt;DigestFilesDoc The key (no pun intended) to a Unified Content File System (UCFS) is to distinguish the files in the system based on their content. Distinguishing files by their name is just so 20th Century. The content is distinguished by computing a checksum of that content. This version uses the md5sum program to generate a 128 bit checksum representative of the file's contents. There is a chance that two files having different content might generate the same checksum using md5sum (or any checksum). Should that become a problem, then the use of md5sum can be replace by a cyrptographic signature. But until then... The md5sum program is documented as outputting three fields (and it does), but when read it appears as two fields (array elements). This is caused by the lack of whitespace between the second and third field. So this function gropes the md5sum output and returns: [0] 32 character checksum in hexidecimal (UCFS filename) [1] Single character: ' ' text file, '*' binary file [2] Filesystem (20th Century Style) name Note: That name may be the character '-' indicating STDIN read. DigestFilesDoc DigestFile() { local if=0 # Default, variable name local -a T1 T2 case &quot;$#&quot; in 3) case &quot;$1&quot; in -if) if=1 ; shift ;; * ) return 1 ;; esac ;; 2) : ;; # Poor man's &quot;continue&quot; *) return 1 ;; esac case $if in 0) eval T1=\( \&quot;\$\{$1\[@\]\}\&quot; \) T2=( $(echo ${T1[@]} | md5sum -) ) ;; 1) T2=( $(md5sum $1) ) ;; esac case ${#T2[@]} in 0) return 1 ;; 1) return 1 ;; 2) case ${T2[1]:0:1} in # SanScrit-2.0.5 \*) T2[${#T2[@]}]=${T2[1]:1} T2[1]=\* ;; *) T2[${#T2[@]}]=${T2[1]} T2[1]=&quot; &quot; ;; esac ;; 3) : ;; # Assume it worked *) return 1 ;; esac local -i len=${#T2[0]} if [ $len -ne 32 ] ; then return 1 ; fi eval $2=\( \&quot;\$\{T2\[@\]\}\&quot; \) } # # # # # Locate File # # # # # # # LocateFile [-l] FileName Location-Array-Name # or # LocateFile [-l] -of FileName Location-Array-FileName # # # # # # A file location is Filesystem-id and inode-number # Here document used as a comment block. : &lt;&lt;StatFieldsDoc Based on stat, version 2.2 stat -t and stat -lt fields [0] name [1] Total size File - number of bytes Symbolic link - string length of pathname [2] Number of (512 byte) blocks allocated [3] File type and Access rights (hex) [4] User ID of owner [5] Group ID of owner [6] Device number [7] Inode number [8] Number of hard links [9] Device type (if inode device) Major [10] Device type (if inode device) Minor [11] Time of last access May be disabled in 'mount' with noatime atime of files changed by exec, read, pipe, utime, mknod (mmap?) atime of directories changed by addition/deletion of files [12] Time of last modification mtime of files changed by write, truncate, utime, mknod mtime of directories changed by addtition/deletion of files [13] Time of last change ctime reflects time of changed inode information (owner, group permissions, link count -*-*- Per: Return code: 0 Size of array: 14 Contents of array Element 0: /home/mszick Element 1: 4096 Element 2: 8 Element 3: 41e8 Element 4: 500 Element 5: 500 Element 6: 303 Element 7: 32385 Element 8: 22 Element 9: 0 Element 10: 0 Element 11: 1051221030 Element 12: 1051214068 Element 13: 1051214068 For a link in the form of linkname -&gt; realname stat -t linkname returns the linkname (link) information stat -lt linkname returns the realname information stat -tf and stat -ltf fields [0] name [1] ID-0? # Maybe someday, but Linux stat structure [2] ID-0? # does not have either LABEL nor UUID # fields, currently information must come # from file-system specific utilities These will be munged into: [1] UUID if possible [2] Volume Label if possible Note: 'mount -l' does return the label and could return the UUID [3] Maximum length of filenames [4] Filesystem type [5] Total blocks in the filesystem [6] Free blocks [7] Free blocks for non-root user(s) [8] Block size of the filesystem [9] Total inodes [10] Free inodes -*-*- Per: Return code: 0 Size of array: 11 Contents of array Element 0: /home/mszick Element 1: 0 Element 2: 0 Element 3: 255 Element 4: ef53 Element 5: 2581445 Element 6: 2277180 Element 7: 2146050 Element 8: 4096 Element 9: 1311552 Element 10: 1276425 StatFieldsDoc # LocateFile [-l] FileName Location-Array-Name # LocateFile [-l] -of FileName Location-Array-FileName LocateFile() { local -a LOC LOC1 LOC2 local lk=&quot;&quot; of=0 case &quot;$#&quot; in 0) return 1 ;; 1) return 1 ;; 2) : ;; *) while (( &quot;$#&quot; &gt; 2 )) do case &quot;$1&quot; in -l) lk=-1 ;; -of) of=1 ;; *) return 1 ;; esac shift done ;; esac # More Sanscrit-2.0.5 # LOC1=( $(stat -t $lk $1) ) # LOC2=( $(stat -tf $lk $1) ) # Uncomment above two lines if system has &quot;stat&quot; command installed. LOC=( ${LOC1[@]:0:1} ${LOC1[@]:3:11} ${LOC2[@]:1:2} ${LOC2[@]:4:1} ) case &quot;$of&quot; in 0) eval $2=\( \&quot;\$\{LOC\[@\]\}\&quot; \) ;; 1) echo &quot;${LOC[@]}&quot; &gt; &quot;$2&quot; ;; esac return 0 # Which yields (if you are lucky, and have &quot;stat&quot; installed) # -*-*- Location Discriptor -*-*- # Return code: 0 # Size of array: 15 # Contents of array # Element 0: /home/mszick 20th Century name # Element 1: 41e8 Type and Permissions # Element 2: 500 User # Element 3: 500 Group # Element 4: 303 Device # Element 5: 32385 inode # Element 6: 22 Link count # Element 7: 0 Device Major # Element 8: 0 Device Minor # Element 9: 1051224608 Last Access # Element 10: 1051214068 Last Modify # Element 11: 1051214068 Last Status # Element 12: 0 UUID (to be) # Element 13: 0 Volume Label (to be) # Element 14: ef53 Filesystem type } # And then there was some test code ListArray() # ListArray Name { local -a Ta eval Ta=\( \&quot;\$\{$1\[@\]\}\&quot; \) echo echo &quot;-*-*- List of Array -*-*-&quot; echo &quot;Size of array $1: ${#Ta[*]}&quot; echo &quot;Contents of array $1:&quot; for (( i=0 ; i&lt;${#Ta[*]} ; i++ )) do echo -e &quot;\tElement $i: ${Ta[$i]}&quot; done return 0 } declare -a CUR_DIR # For small arrays ListDirectory &quot;${PWD}&quot; CUR_DIR ListArray CUR_DIR declare -a DIR_DIG DigestFile CUR_DIR DIR_DIG echo &quot;The new \&quot;name\&quot; (checksum) for ${CUR_DIR[9]} is ${DIR_DIG[0]}&quot; declare -a DIR_ENT # BIG_DIR # For really big arrays - use a temporary file in ramdisk # BIG-DIR # ListDirectory -of &quot;${CUR_DIR[11]}/*&quot; &quot;/tmpfs/junk2&quot; ListDirectory &quot;${CUR_DIR[11]}/*&quot; DIR_ENT declare -a DIR_IDX # BIG-DIR # IndexList -if &quot;/tmpfs/junk2&quot; DIR_IDX IndexList DIR_ENT DIR_IDX declare -a IDX_DIG # BIG-DIR # DIR_ENT=( $(cat /tmpfs/junk2) ) # BIG-DIR # DigestFile -if /tmpfs/junk2 IDX_DIG DigestFile DIR_ENT IDX_DIG # Small (should) be able to parallize IndexList &amp; DigestFile # Large (should) be able to parallize IndexList &amp; DigestFile &amp; the assignment echo &quot;The \&quot;name\&quot; (checksum) for the contents of ${PWD} is ${IDX_DIG[0]}&quot; declare -a FILE_LOC LocateFile ${PWD} FILE_LOC ListArray FILE_LOC exit 0 Stéphane Chazelas demonstrates object-oriented programming in a Bash script. Mariusz Gniazdowski contributed a hash library for use in scripts. Example A-20. Library of hash functions # Hash: # Hash function library # Author: Mariusz Gniazdowski &lt;mariusz.gn-at-gmail.com&gt; # Date: 2005-04-07 # Functions making emulating hashes in Bash a little less painful. # Limitations: # * Only global variables are supported. # * Each hash instance generates one global variable per value. # * Variable names collisions are possible #+ if you define variable like __hash__hashname_key # * Keys must use chars that can be part of a Bash variable name #+ (no dashes, periods, etc.). # * The hash is created as a variable: # ... hashname_keyname # So if somone will create hashes like: # myhash_ + mykey = myhash__mykey # myhash + _mykey = myhash__mykey # Then there will be a collision. # (This should not pose a major problem.) Hash_config_varname_prefix=__hash__ # Emulates: hash[key]=value # # Params: # 1 - hash # 2 - key # 3 - value function hash_set { eval &quot;${Hash_config_varname_prefix}${1}_${2}=\&quot;${3}\&quot;&quot; } # Emulates: value=hash[key] # # Params: # 1 - hash # 2 - key # 3 - value (name of global variable to set) function hash_get_into { eval &quot;$3=\&quot;\$${Hash_config_varname_prefix}${1}_${2}\&quot;&quot; } # Emulates: echo hash[key] # # Params: # 1 - hash # 2 - key # 3 - echo params (like -n, for example) function hash_echo { eval &quot;echo $3 \&quot;\$${Hash_config_varname_prefix}${1}_${2}\&quot;&quot; } # Emulates: hash1[key1]=hash2[key2] # # Params: # 1 - hash1 # 2 - key1 # 3 - hash2 # 4 - key2 function hash_copy { eval &quot;${Hash_config_varname_prefix}${1}_${2}\ =\&quot;\$${Hash_config_varname_prefix}${3}_${4}\&quot;&quot; } # Emulates: hash[keyN-1]=hash[key2]=...hash[key1] # # Copies first key to rest of keys. # # Params: # 1 - hash1 # 2 - key1 # 3 - key2 # . . . # N - keyN function hash_dup { local hashName=&quot;$1&quot; keyName=&quot;$2&quot; shift 2 until [ ${#} -le 0 ]; do eval &quot;${Hash_config_varname_prefix}${hashName}_${1}\ =\&quot;\$${Hash_config_varname_prefix}${hashName}_${keyName}\&quot;&quot; shift; done; } # Emulates: unset hash[key] # # Params: # 1 - hash # 2 - key function hash_unset { eval &quot;unset ${Hash_config_varname_prefix}${1}_${2}&quot; } # Emulates something similar to: ref=&amp;hash[key] # # The reference is name of the variable in which value is held. # # Params: # 1 - hash # 2 - key # 3 - ref - Name of global variable to set. function hash_get_ref_into { eval &quot;$3=\&quot;${Hash_config_varname_prefix}${1}_${2}\&quot;&quot; } # Emulates something similar to: echo &amp;hash[key] # # That reference is name of variable in which value is held. # # Params: # 1 - hash # 2 - key # 3 - echo params (like -n for example) function hash_echo_ref { eval &quot;echo $3 \&quot;${Hash_config_varname_prefix}${1}_${2}\&quot;&quot; } # Emulates something similar to: $$hash[key](param1, param2, ...) # # Params: # 1 - hash # 2 - key # 3,4, ... - Function parameters function hash_call { local hash key hash=$1 key=$2 shift 2 eval &quot;eval \&quot;\$${Hash_config_varname_prefix}${hash}_${key} \\\&quot;\\\$@\\\&quot;\&quot;&quot; } # Emulates something similar to: isset(hash[key]) or hash[key]==NULL # # Params: # 1 - hash # 2 - key # Returns: # 0 - there is such key # 1 - there is no such key function hash_is_set { eval &quot;if [[ \&quot;\${${Hash_config_varname_prefix}${1}_${2}-a}\&quot; = \&quot;a\&quot; &amp;&amp; \&quot;\${${Hash_config_varname_prefix}${1}_${2}-b}\&quot; = \&quot;b\&quot; ]] then return 1; else return 0; fi&quot; } # Emulates something similar to: # foreach($hash as $key =&gt; $value) { fun($key,$value); } # # It is possible to write different variations of this function. # Here we use a function call to make it as &quot;generic&quot; as possible. # # Params: # 1 - hash # 2 - function name function hash_foreach { local keyname oldIFS=&quot;$IFS&quot; IFS=' ' for i in $(eval &quot;echo \${!${Hash_config_varname_prefix}${1}_*}&quot;); do keyname=$(eval &quot;echo \${i##${Hash_config_varname_prefix}${1}_}&quot;) eval &quot;$2 $keyname \&quot;\$$i\&quot;&quot; done IFS=&quot;$oldIFS&quot; } # NOTE: In lines 103 and 116, ampersand changed. # But, it doesn't matter, because these are comment lines anyhow. Here is an example script using the foregoing hash library. Example A-21. Colorizing text using hash functions #!/bin/bash # hash-example.sh: Colorizing text. # Author: Mariusz Gniazdowski &lt;mariusz.gn-at-gmail.com&gt; . Hash.lib # Load the library of functions. hash_set colors red &quot;\033[0;31m&quot; hash_set colors blue &quot;\033[0;34m&quot; hash_set colors light_blue &quot;\033[1;34m&quot; hash_set colors light_red &quot;\033[1;31m&quot; hash_set colors cyan &quot;\033[0;36m&quot; hash_set colors light_green &quot;\033[1;32m&quot; hash_set colors light_gray &quot;\033[0;37m&quot; hash_set colors green &quot;\033[0;32m&quot; hash_set colors yellow &quot;\033[1;33m&quot; hash_set colors light_purple &quot;\033[1;35m&quot; hash_set colors purple &quot;\033[0;35m&quot; hash_set colors reset_color &quot;\033[0;00m&quot; # $1 - keyname # $2 - value try_colors() { echo -en &quot;$2&quot; echo &quot;This line is $1.&quot; } hash_foreach colors try_colors hash_echo colors reset_color -en echo -e '\nLet us overwrite some colors with yellow.\n' # It's hard to read yellow text on some terminals. hash_dup colors yellow red light_green blue green light_gray cyan hash_foreach colors try_colors hash_echo colors reset_color -en echo -e '\nLet us delete them and try colors once more . . .\n' for i in red light_green blue green light_gray cyan; do hash_unset colors $i done hash_foreach colors try_colors hash_echo colors reset_color -en hash_set other txt &quot;Other examples . . .&quot; hash_echo other txt hash_get_into other txt text echo $text hash_set other my_fun try_colors hash_call other my_fun purple &quot;`hash_echo colors purple`&quot; hash_echo colors reset_color -en echo; echo &quot;Back to normal?&quot;; echo exit $? # On some terminals, the &quot;light&quot; colors print in bold, # and end up looking darker than the normal ones. # Why is this? An example illustrating the mechanics of hashing, but from a different point of view. Example A-22. More on hash functions #!/bin/bash # $Id: ha.sh,v 1.2 2005/04/21 23:24:26 oliver Exp $ # Copyright 2005 Oliver Beckstein # Released under the GNU Public License # Author of script granted permission for inclusion in ABS Guide. # (Thank you!) #---------------------------------------------------------------- # pseudo hash based on indirect parameter expansion # API: access through functions: # # create the hash: # # newhash Lovers # # add entries (note single quotes for spaces) # # addhash Lovers Tristan Isolde # addhash Lovers 'Romeo Montague' 'Juliet Capulet' # # access value by key # # gethash Lovers Tristan ----&gt; Isolde # # show all keys # # keyshash Lovers ----&gt; 'Tristan' 'Romeo Montague' # # # Convention: instead of perls' foo{bar} = boing' syntax, # use # '_foo_bar=boing' (two underscores, no spaces) # # 1) store key in _NAME_keys[] # 2) store value in _NAME_values[] using the same integer index # The integer index for the last entry is _NAME_ptr # # NOTE: No error or sanity checks, just bare bones. function _inihash () { # private function # call at the beginning of each procedure # defines: _keys _values _ptr # # Usage: _inihash NAME local name=$1 _keys=_${name}_keys _values=_${name}_values _ptr=_${name}_ptr } function newhash () { # Usage: newhash NAME # NAME should not contain spaces or dots. # Actually: it must be a legal name for a Bash variable. # We rely on Bash automatically recognising arrays. local name=$1 local _keys _values _ptr _inihash ${name} eval ${_ptr}=0 } function addhash () { # Usage: addhash NAME KEY 'VALUE with spaces' # arguments with spaces need to be quoted with single quotes '' local name=$1 k=&quot;$2&quot; v=&quot;$3&quot; local _keys _values _ptr _inihash ${name} #echo &quot;DEBUG(addhash): ${_ptr}=${!_ptr}&quot; eval let ${_ptr}=${_ptr}+1 eval &quot;$_keys[${!_ptr}]=\&quot;${k}\&quot;&quot; eval &quot;$_values[${!_ptr}]=\&quot;${v}\&quot;&quot; } function gethash () { # Usage: gethash NAME KEY # Returns boing # ERR=0 if entry found, 1 otherwise # That's not a proper hash -- #+ we simply linearly search through the keys. local name=$1 key=&quot;$2&quot; local _keys _values _ptr local k v i found h _inihash ${name} # _ptr holds the highest index in the hash found=0 for i in $(seq 1 ${!_ptr}); do h=&quot;\${${_keys}[${i}]}&quot; # Safer to do it in two steps, eval k=${h} #+ especially when quoting for spaces. if [ &quot;${k}&quot; = &quot;${key}&quot; ]; then found=1; break; fi done; [ ${found} = 0 ] &amp;&amp; return 1; # else: i is the index that matches the key h=&quot;\${${_values}[${i}]}&quot; eval echo &quot;${h}&quot; return 0; } function keyshash () { # Usage: keyshash NAME # Returns list of all keys defined for hash name. local name=$1 key=&quot;$2&quot; local _keys _values _ptr local k i h _inihash ${name} # _ptr holds the highest index in the hash for i in $(seq 1 ${!_ptr}); do h=&quot;\${${_keys}[${i}]}&quot; # Safer to do it in two steps, eval k=${h} #+ especially when quoting for spaces. echo -n &quot;'${k}' &quot; done; } # ----------------------------------------------------------------------- # Now, let's test it. # (Per comments at the beginning of the script.) newhash Lovers addhash Lovers Tristan Isolde addhash Lovers 'Romeo Montague' 'Juliet Capulet' # Output results. echo gethash Lovers Tristan # Isolde echo keyshash Lovers # 'Tristan' 'Romeo Montague' echo; echo exit 0 # Exercise: # -------- # Add error checks to the functions. Now for a script that installs and mounts those cute USB keychain solid-state &quot;hard drives.&quot; Example A-23. Mounting USB keychain storage devices #!/bin/bash # ==&gt; usb.sh # ==&gt; Script for mounting and installing pen/keychain USB storage devices. # ==&gt; Runs as root at system startup (see below). # ==&gt; # ==&gt; Newer Linux distros (2004 or later) autodetect # ==&gt; and install USB pen drives, and therefore don't need this script. # ==&gt; But, it's still instructive. # This code is free software covered by GNU GPL license version 2 or above. # Please refer to http://www.gnu.org/ for the full license text. # # Some code lifted from usb-mount by Michael Hamilton's usb-mount (LGPL) #+ see http://users.actrix.co.nz/michael/usbmount.html # # INSTALL # ------- # Put this in /etc/hotplug/usb/diskonkey. # Then look in /etc/hotplug/usb.distmap, and copy all usb-storage entries #+ into /etc/hotplug/usb.usermap, substituting &quot;usb-storage&quot; for &quot;diskonkey&quot;. # Otherwise this code is only run during the kernel module invocation/removal #+ (at least in my tests), which defeats the purpose. # # TODO # ---- # Handle more than one diskonkey device at one time (e.g. /dev/diskonkey1 #+ and /mnt/diskonkey1), etc. The biggest problem here is the handling in #+ devlabel, which I haven't yet tried. # # AUTHOR and SUPPORT # ------------------ # Konstantin Riabitsev, &lt;icon linux duke edu&gt;. # Send any problem reports to my email address at the moment. # # ==&gt; Comments added by ABS Guide author. SYMLINKDEV=/dev/diskonkey MOUNTPOINT=/mnt/diskonkey DEVLABEL=/sbin/devlabel DEVLABELCONFIG=/etc/sysconfig/devlabel IAM=$0 ## # Functions lifted near-verbatim from usb-mount code. # function allAttachedScsiUsb { find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f | xargs grep -l 'Attached: Yes' } function scsiDevFromScsiUsb { echo $1 | awk -F&quot;[-/]&quot; '{ n=$(NF-1); print &quot;/dev/sd&quot; substr(&quot;abcdefghijklmnopqrstuvwxyz&quot;, n+1, 1) }' } if [ &quot;${ACTION}&quot; = &quot;add&quot; ] &amp;&amp; [ -f &quot;${DEVICE}&quot; ]; then ## # lifted from usbcam code. # if [ -f /var/run/console.lock ]; then CONSOLEOWNER=`cat /var/run/console.lock` elif [ -f /var/lock/console.lock ]; then CONSOLEOWNER=`cat /var/lock/console.lock` else CONSOLEOWNER= fi for procEntry in $(allAttachedScsiUsb); do scsiDev=$(scsiDevFromScsiUsb $procEntry) # Some bug with usb-storage? # Partitions are not in /proc/partitions until they are accessed #+ somehow. /sbin/fdisk -l $scsiDev &gt;/dev/null ## # Most devices have partitioning info, so the data would be on #+ /dev/sd?1. However, some stupider ones don't have any partitioning #+ and use the entire device for data storage. This tries to #+ guess semi-intelligently if we have a /dev/sd?1 and if not, then #+ it uses the entire device and hopes for the better. # if grep -q `basename $scsiDev`1 /proc/partitions; then part=&quot;$scsiDev&quot;&quot;1&quot; else part=$scsiDev fi ## # Change ownership of the partition to the console user so they can #+ mount it. # if [ ! -z &quot;$CONSOLEOWNER&quot; ]; then chown $CONSOLEOWNER:disk $part fi ## # This checks if we already have this UUID defined with devlabel. # If not, it then adds the device to the list. # prodid=`$DEVLABEL printid -d $part` if ! grep -q $prodid $DEVLABELCONFIG; then # cross our fingers and hope it works $DEVLABEL add -d $part -s $SYMLINKDEV 2&gt;/dev/null fi ## # Check if the mount point exists and create if it doesn't. # if [ ! -e $MOUNTPOINT ]; then mkdir -p $MOUNTPOINT fi ## # Take care of /etc/fstab so mounting is easy. # if ! grep -q &quot;^$SYMLINKDEV&quot; /etc/fstab; then # Add an fstab entry echo -e \ &quot;$SYMLINKDEV\t\t$MOUNTPOINT\t\tauto\tnoauto,owner,kudzu 0 0&quot; \ &gt;&gt; /etc/fstab fi done if [ ! -z &quot;$REMOVER&quot; ]; then ## # Make sure this script is triggered on device removal. # mkdir -p `dirname $REMOVER` ln -s $IAM $REMOVER fi elif [ &quot;${ACTION}&quot; = &quot;remove&quot; ]; then ## # If the device is mounted, unmount it cleanly. # if grep -q &quot;$MOUNTPOINT&quot; /etc/mtab; then # unmount cleanly umount -l $MOUNTPOINT fi ## # Remove it from /etc/fstab if it's there. # if grep -q &quot;^$SYMLINKDEV&quot; /etc/fstab; then grep -v &quot;^$SYMLINKDEV&quot; /etc/fstab &gt; /etc/.fstab.new mv -f /etc/.fstab.new /etc/fstab fi fi exit 0 Converting a text file to HTML format. Example A-24. Converting to HTML #!/bin/bash # tohtml.sh [v. 0.2.01, reldate: 04/13/12, a teeny bit less buggy] # Convert a text file to HTML format. # Author: Mendel Cooper # License: GPL3 # Usage: sh tohtml.sh &lt; textfile &gt; htmlfile # Script can easily be modified to accept source and target filenames. # Assumptions: # 1) Paragraphs in (target) text file are separated by a blank line. # 2) Jpeg images (*.jpg) are located in &quot;images&quot; subdirectory. # In the target file, the image names are enclosed in square brackets, # for example, [image01.jpg]. # 3) Emphasized (italic) phrases begin with a space+underscore #+ or the first character on the line is an underscore, #+ and end with an underscore+space or underscore+end-of-line. # Settings FNTSIZE=2 # Small-medium font size IMGDIR=&quot;images&quot; # Image directory # Headers HDR01='&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;' HDR02='&lt;!-- Converted to HTML by ***tohtml.sh*** script --&gt;' HDR03='&lt;!-- script author: M. Leo Cooper &lt;thegrendel.abs@gmail.com&gt; --&gt;' HDR10='&lt;html&gt;' HDR11='&lt;head&gt;' HDR11a='&lt;/head&gt;' HDR12a='&lt;title&gt;' HDR12b='&lt;/title&gt;' HDR121='&lt;META NAME=&quot;GENERATOR&quot; CONTENT=&quot;tohtml.sh script&quot;&gt;' HDR13='&lt;body bgcolor=&quot;#dddddd&quot;&gt;' # Change background color to suit. HDR14a='&lt;font size=' HDR14b='&gt;' # Footers FTR10='&lt;/body&gt;' FTR11='&lt;/html&gt;' # Tags BOLD=&quot;&lt;b&gt;&quot; CENTER=&quot;&lt;center&gt;&quot; END_CENTER=&quot;&lt;/center&gt;&quot; LF=&quot;&lt;br&gt;&quot; write_headers () { echo &quot;$HDR01&quot; echo echo &quot;$HDR02&quot; echo &quot;$HDR03&quot; echo echo echo &quot;$HDR10&quot; echo &quot;$HDR11&quot; echo &quot;$HDR121&quot; echo &quot;$HDR11a&quot; echo &quot;$HDR13&quot; echo echo -n &quot;$HDR14a&quot; echo -n &quot;$FNTSIZE&quot; echo &quot;$HDR14b&quot; echo echo &quot;$BOLD&quot; # Everything in bold (more easily readable). } process_text () { while read line # Read one line at a time. do { if [ ! &quot;$line&quot; ] # Blank line? then # Then new paragraph must follow. echo echo &quot;$LF&quot; # Insert two &lt;br&gt; tags. echo &quot;$LF&quot; echo continue # Skip the underscore test. else # Otherwise . . . if [[ &quot;$line&quot; =~ \[*jpg\] ]] # Is a graphic? then # Strip away brackets. temp=$( echo &quot;$line&quot; | sed -e 's/\[//' -e 's/\]//' ) line=&quot;&quot;$CENTER&quot; &lt;img src=&quot;\&quot;$IMGDIR&quot;/$temp\&quot;&gt; &quot;$END_CENTER&quot; &quot; # Add image tag. # And, center it. fi fi echo &quot;$line&quot; | grep -q _ if [ &quot;$?&quot; -eq 0 ] # If line contains underscore ... then # =================================================== # Convert underscored phrase to italics. temp=$( echo &quot;$line&quot; | sed -e 's/ _/ &lt;i&gt;/' -e 's/_/&lt;\/i&gt; /' | sed -e 's/^_/&lt;i&gt;/' -e 's/_/&lt;\/i&gt;/' ) # Process only underscores prefixed by space, #+ or at beginning or end of line. # Do not convert underscores embedded within a word! line=&quot;$temp&quot; # Slows script execution. Can be optimized? # =================================================== fi # echo echo &quot;$line&quot; # echo # Don't want extra blank lines in generated text! } # End while done } # End process_text () write_footers () # Termination tags. { echo &quot;$FTR10&quot; echo &quot;$FTR11&quot; } # main () { # ========= write_headers process_text write_footers # ========= # } exit $? # Exercises: # --------- # 1) Fixup: Check for closing underscore before a comma or period. # 2) Add a test for the presence of a closing underscore #+ in phrases to be italicized. Here is something to warm the hearts of webmasters and mistresses: a script that saves weblogs. Example A-25. Preserving weblogs #!/bin/bash # archiveweblogs.sh v1.0 # Troy Engel &lt;tengel@fluid.com&gt; # Slightly modified by document author. # Used with permission. # # This script will preserve the normally rotated and #+ thrown away weblogs from a default RedHat/Apache installation. # It will save the files with a date/time stamp in the filename, #+ bzipped, to a given directory. # # Run this from crontab nightly at an off hour, #+ as bzip2 can suck up some serious CPU on huge logs: # 0 2 * * * /opt/sbin/archiveweblogs.sh PROBLEM=66 # Set this to your backup dir. BKP_DIR=/opt/backups/weblogs # Default Apache/RedHat stuff LOG_DAYS=&quot;4 3 2 1&quot; LOG_DIR=/var/log/httpd LOG_FILES=&quot;access_log error_log&quot; # Default RedHat program locations LS=/bin/ls MV=/bin/mv ID=/usr/bin/id CUT=/bin/cut COL=/usr/bin/column BZ2=/usr/bin/bzip2 # Are we root? USER=`$ID -u` if [ &quot;X$USER&quot; != &quot;X0&quot; ]; then echo &quot;PANIC: Only root can run this script!&quot; exit $PROBLEM fi # Backup dir exists/writable? if [ ! -x $BKP_DIR ]; then echo &quot;PANIC: $BKP_DIR doesn't exist or isn't writable!&quot; exit $PROBLEM fi # Move, rename and bzip2 the logs for logday in $LOG_DAYS; do for logfile in $LOG_FILES; do MYFILE=&quot;$LOG_DIR/$logfile.$logday&quot; if [ -w $MYFILE ]; then DTS=`$LS -lgo --time-style=+%Y%m%d $MYFILE | $COL -t | $CUT -d ' ' -f7` $MV $MYFILE $BKP_DIR/$logfile.$DTS $BZ2 $BKP_DIR/$logfile.$DTS else # Only spew an error if the file exits (ergo non-writable). if [ -f $MYFILE ]; then echo &quot;ERROR: $MYFILE not writable. Skipping.&quot; fi fi done done exit 0 How to keep the shell from expanding and reinterpreting text strings. Example A-26. Protecting literal strings #! /bin/bash # protect_literal.sh # set -vx :&lt;&lt;-'_Protect_Literal_String_Doc' Copyright (c) Michael S. Zick, 2003; All Rights Reserved License: Unrestricted reuse in any form, for any purpose. Warranty: None Revision: $ID$ Documentation redirected to the Bash no-operation. Bash will '/dev/null' this block when the script is first read. (Uncomment the above set command to see this action.) Remove the first (Sha-Bang) line when sourcing this as a library procedure. Also comment out the example use code in the two places where shown. Usage: _protect_literal_str 'Whatever string meets your ${fancy}' Just echos the argument to standard out, hard quotes restored. $(_protect_literal_str 'Whatever string meets your ${fancy}') as the right-hand-side of an assignment statement. Does: As the right-hand-side of an assignment, preserves the hard quotes protecting the contents of the literal during assignment. Notes: The strange names (_*) are used to avoid trampling on the user's chosen names when this is sourced as a library. _Protect_Literal_String_Doc # The 'for illustration' function form _protect_literal_str() { # Pick an un-used, non-printing character as local IFS. # Not required, but shows that we are ignoring it. local IFS=$'\x1B' # \ESC character # Enclose the All-Elements-Of in hard quotes during assignment. local tmp=$'\x27'$@$'\x27' # local tmp=$'\''$@$'\'' # Even uglier. local len=${#tmp} # Info only. echo $tmp is $len long. # Output AND information. } # This is the short-named version. _pls() { local IFS=$'x1B' # \ESC character (not required) echo $'\x27'$@$'\x27' # Hard quoted parameter glob } # :&lt;&lt;-'_Protect_Literal_String_Test' # # # Remove the above &quot;# &quot; to disable this code. # # # # See how that looks when printed. echo echo &quot;- - Test One - -&quot; _protect_literal_str 'Hello $user' _protect_literal_str 'Hello &quot;${username}&quot;' echo # Which yields: # - - Test One - - # 'Hello $user' is 13 long. # 'Hello &quot;${username}&quot;' is 21 long. # Looks as expected, but why all of the trouble? # The difference is hidden inside the Bash internal order #+ of operations. # Which shows when you use it on the RHS of an assignment. # Declare an array for test values. declare -a arrayZ # Assign elements with various types of quotes and escapes. arrayZ=( zero &quot;$(_pls 'Hello ${Me}')&quot; 'Hello ${You}' &quot;\'Pass: ${pw}\'&quot; ) # Now list that array and see what is there. echo &quot;- - Test Two - -&quot; for (( i=0 ; i&lt;${#arrayZ[*]} ; i++ )) do echo Element $i: ${arrayZ[$i]} is: ${#arrayZ[$i]} long. done echo # Which yields: # - - Test Two - - # Element 0: zero is: 4 long. # Our marker element # Element 1: 'Hello ${Me}' is: 13 long. # Our &quot;$(_pls '...' )&quot; # Element 2: Hello ${You} is: 12 long. # Quotes are missing # Element 3: \'Pass: \' is: 10 long. # ${pw} expanded to nothing # Now make an assignment with that result. declare -a array2=( ${arrayZ[@]} ) # And print what happened. echo &quot;- - Test Three - -&quot; for (( i=0 ; i&lt;${#array2[*]} ; i++ )) do echo Element $i: ${array2[$i]} is: ${#array2[$i]} long. done echo # Which yields: # - - Test Three - - # Element 0: zero is: 4 long. # Our marker element. # Element 1: Hello ${Me} is: 11 long. # Intended result. # Element 2: Hello is: 5 long. # ${You} expanded to nothing. # Element 3: 'Pass: is: 6 long. # Split on the whitespace. # Element 4: ' is: 1 long. # The end quote is here now. # Our Element 1 has had its leading and trailing hard quotes stripped. # Although not shown, leading and trailing whitespace is also stripped. # Now that the string contents are set, Bash will always, internally, #+ hard quote the contents as required during its operations. # Why? # Considering our &quot;$(_pls 'Hello ${Me}')&quot; construction: # &quot; ... &quot; -&gt; Expansion required, strip the quotes. # $( ... ) -&gt; Replace with the result of..., strip this. # _pls ' ... ' -&gt; called with literal arguments, strip the quotes. # The result returned includes hard quotes; BUT the above processing #+ has already been done, so they become part of the value assigned. # # Similarly, during further usage of the string variable, the ${Me} #+ is part of the contents (result) and survives any operations # (Until explicitly told to evaluate the string). # Hint: See what happens when the hard quotes ($'\x27') are replaced #+ with soft quotes ($'\x22') in the above procedures. # Interesting also is to remove the addition of any quoting. # _Protect_Literal_String_Test # # # Remove the above &quot;# &quot; to disable this code. # # # exit 0 But, what if you want the shell to expand and reinterpret strings? Example A-27. Unprotecting literal strings #! /bin/bash # unprotect_literal.sh # set -vx :&lt;&lt;-'_UnProtect_Literal_String_Doc' Copyright (c) Michael S. Zick, 2003; All Rights Reserved License: Unrestricted reuse in any form, for any purpose. Warranty: None Revision: $ID$ Documentation redirected to the Bash no-operation. Bash will '/dev/null' this block when the script is first read. (Uncomment the above set command to see this action.) Remove the first (Sha-Bang) line when sourcing this as a library procedure. Also comment out the example use code in the two places where shown. Usage: Complement of the &quot;$(_pls 'Literal String')&quot; function. (See the protect_literal.sh example.) StringVar=$(_upls ProtectedSringVariable) Does: When used on the right-hand-side of an assignment statement; makes the substitions embedded in the protected string. Notes: The strange names (_*) are used to avoid trampling on the user's chosen names when this is sourced as a library. _UnProtect_Literal_String_Doc _upls() { local IFS=$'x1B' # \ESC character (not required) eval echo $@ # Substitution on the glob. } # :&lt;&lt;-'_UnProtect_Literal_String_Test' # # # Remove the above &quot;# &quot; to disable this code. # # # _pls() { local IFS=$'x1B' # \ESC character (not required) echo $'\x27'$@$'\x27' # Hard quoted parameter glob } # Declare an array for test values. declare -a arrayZ # Assign elements with various types of quotes and escapes. arrayZ=( zero &quot;$(_pls 'Hello ${Me}')&quot; 'Hello ${You}' &quot;\'Pass: ${pw}\'&quot; ) # Now make an assignment with that result. declare -a array2=( ${arrayZ[@]} ) # Which yielded: # - - Test Three - - # Element 0: zero is: 4 long # Our marker element. # Element 1: Hello ${Me} is: 11 long # Intended result. # Element 2: Hello is: 5 long # ${You} expanded to nothing. # Element 3: 'Pass: is: 6 long # Split on the whitespace. # Element 4: ' is: 1 long # The end quote is here now. # set -vx # Initialize 'Me' to something for the embedded ${Me} substitution. # This needs to be done ONLY just prior to evaluating the #+ protected string. # (This is why it was protected to begin with.) Me=&quot;to the array guy.&quot; # Set a string variable destination to the result. newVar=$(_upls ${array2[1]}) # Show what the contents are. echo $newVar # Do we really need a function to do this? newerVar=$(eval echo ${array2[1]}) echo $newerVar # I guess not, but the _upls function gives us a place to hang #+ the documentation on. # This helps when we forget what a # construction like: #+ $(eval echo ... ) means. # What if Me isn't set when the protected string is evaluated? unset Me newestVar=$(_upls ${array2[1]}) echo $newestVar # Just gone, no hints, no runs, no errors. # Why in the world? # Setting the contents of a string variable containing character #+ sequences that have a meaning in Bash is a general problem in #+ script programming. # # This problem is now solved in eight lines of code #+ (and four pages of description). # Where is all this going? # Dynamic content Web pages as an array of Bash strings. # Content set per request by a Bash 'eval' command #+ on the stored page template. # Not intended to replace PHP, just an interesting thing to do. ### # Don't have a webserver application? # No problem, check the example directory of the Bash source; #+ there is a Bash script for that also. # _UnProtect_Literal_String_Test # # # Remove the above &quot;# &quot; to disable this code. # # # exit 0 This interesting script helps hunt down spammers. Example A-28. Spammer Identification #!/bin/bash # $Id: is_spammer.bash,v 1.12.2.11 2004/10/01 21:42:33 mszick Exp $ # Above line is RCS info. # The latest version of this script is available from http://www.morethan.org. # # Spammer-identification # by Michael S. Zick # Used in the ABS Guide with permission. ####################################################### # Documentation # See also &quot;Quickstart&quot; at end of script. ####################################################### :&lt;&lt;-'__is_spammer_Doc_' Copyright (c) Michael S. Zick, 2004 License: Unrestricted reuse in any form, for any purpose. Warranty: None -{Its a script; the user is on their own.}- Impatient? Application code: goto &quot;# # # Hunt the Spammer' program code # # #&quot; Example output: &quot;:&lt;&lt;-'_is_spammer_outputs_'&quot; How to use: Enter script name without arguments. Or goto &quot;Quickstart&quot; at end of script. Provides Given a domain name or IP(v4) address as input: Does an exhaustive set of queries to find the associated network resources (short of recursing into TLDs). Checks the IP(v4) addresses found against Blacklist nameservers. If found to be a blacklisted IP(v4) address, reports the blacklist text records. (Usually hyper-links to the specific report.) Requires A working Internet connection. (Exercise: Add check and/or abort if not on-line when running script.) Bash with arrays (2.05b+). The external program 'dig' -- a utility program provided with the 'bind' set of programs. Specifically, the version which is part of Bind series 9.x See: http://www.isc.org All usages of 'dig' are limited to wrapper functions, which may be rewritten as required. See: dig_wrappers.bash for details. (&quot;Additional documentation&quot; -- below) Usage Script requires a single argument, which may be: 1) A domain name; 2) An IP(v4) address; 3) A filename, with one name or address per line. Script accepts an optional second argument, which may be: 1) A Blacklist server name; 2) A filename, with one Blacklist server name per line. If the second argument is not provided, the script uses a built-in set of (free) Blacklist servers. See also, the Quickstart at the end of this script (after 'exit'). Return Codes 0 - All OK 1 - Script failure 2 - Something is Blacklisted Optional environment variables SPAMMER_TRACE If set to a writable file, script will log an execution flow trace. SPAMMER_DATA If set to a writable file, script will dump its discovered data in the form of GraphViz file. See: http://www.research.att.com/sw/tools/graphviz SPAMMER_LIMIT Limits the depth of resource tracing. Default is 2 levels. A setting of 0 (zero) means 'unlimited' . . . Caution: script might recurse the whole Internet! A limit of 1 or 2 is most useful when processing a file of domain names and addresses. A higher limit can be useful when hunting spam gangs. Additional documentation Download the archived set of scripts explaining and illustrating the function contained within this script. http://bash.deta.in/mszick_clf.tar.bz2 Study notes This script uses a large number of functions. Nearly all general functions have their own example script. Each of the example scripts have tutorial level comments. Scripting project Add support for IP(v6) addresses. IP(v6) addresses are recognized but not processed. Advanced project Add the reverse lookup detail to the discovered information. Report the delegation chain and abuse contacts. Modify the GraphViz file output to include the newly discovered information. __is_spammer_Doc_ ####################################################### #### Special IFS settings used for string parsing. #### # Whitespace == :Space:Tab:Line Feed:Carriage Return: WSP_IFS=$'\x20'$'\x09'$'\x0A'$'\x0D' # No Whitespace == Line Feed:Carriage Return NO_WSP=$'\x0A'$'\x0D' # Field separator for dotted decimal IP addresses ADR_IFS=${NO_WSP}'.' # Array to dotted string conversions DOT_IFS='.'${WSP_IFS} # # # Pending operations stack machine # # # # This set of functions described in func_stack.bash. # (See &quot;Additional documentation&quot; above.) # # # # Global stack of pending operations. declare -f -a _pending_ # Global sentinel for stack runners declare -i _p_ctrl_ # Global holder for currently executing function declare -f _pend_current_ # # # Debug version only - remove for regular use # # # # # The function stored in _pend_hook_ is called # immediately before each pending function is # evaluated. Stack clean, _pend_current_ set. # # This thingy demonstrated in pend_hook.bash. declare -f _pend_hook_ # # # # The do nothing function pend_dummy() { : ; } # Clear and initialize the function stack. pend_init() { unset _pending_[@] pend_func pend_stop_mark _pend_hook_='pend_dummy' # Debug only. } # Discard the top function on the stack. pend_pop() { if [ ${#_pending_[@]} -gt 0 ] then local -i _top_ _top_=${#_pending_[@]}-1 unset _pending_[$_top_] fi } # pend_func function_name [$(printf '%q\n' arguments)] pend_func() { local IFS=${NO_WSP} set -f _pending_[${#_pending_[@]}]=$@ set +f } # The function which stops the release: pend_stop_mark() { _p_ctrl_=0 } pend_mark() { pend_func pend_stop_mark } # Execute functions until 'pend_stop_mark' . . . pend_release() { local -i _top_ # Declare _top_ as integer. _p_ctrl_=${#_pending_[@]} while [ ${_p_ctrl_} -gt 0 ] do _top_=${#_pending_[@]}-1 _pend_current_=${_pending_[$_top_]} unset _pending_[$_top_] $_pend_hook_ # Debug only. eval $_pend_current_ done } # Drop functions until 'pend_stop_mark' . . . pend_drop() { local -i _top_ local _pd_ctrl_=${#_pending_[@]} while [ ${_pd_ctrl_} -gt 0 ] do _top_=$_pd_ctrl_-1 if [ &quot;${_pending_[$_top_]}&quot; == 'pend_stop_mark' ] then unset _pending_[$_top_] break else unset _pending_[$_top_] _pd_ctrl_=$_top_ fi done if [ ${#_pending_[@]} -eq 0 ] then pend_func pend_stop_mark fi } #### Array editors #### # This function described in edit_exact.bash. # (See &quot;Additional documentation,&quot; above.) # edit_exact &lt;excludes_array_name&gt; &lt;target_array_name&gt; edit_exact() { [ $# -eq 2 ] || [ $# -eq 3 ] || return 1 local -a _ee_Excludes local -a _ee_Target local _ee_x local _ee_t local IFS=${NO_WSP} set -f eval _ee_Excludes=\( \$\{$1\[@\]\} \) eval _ee_Target=\( \$\{$2\[@\]\} \) local _ee_len=${#_ee_Target[@]} # Original length. local _ee_cnt=${#_ee_Excludes[@]} # Exclude list length. [ ${_ee_len} -ne 0 ] || return 0 # Can't edit zero length. [ ${_ee_cnt} -ne 0 ] || return 0 # Can't edit zero length. for (( x = 0; x &lt; ${_ee_cnt} ; x++ )) do _ee_x=${_ee_Excludes[$x]} for (( n = 0 ; n &lt; ${_ee_len} ; n++ )) do _ee_t=${_ee_Target[$n]} if [ x&quot;${_ee_t}&quot; == x&quot;${_ee_x}&quot; ] then unset _ee_Target[$n] # Discard match. [ $# -eq 2 ] &amp;&amp; break # If 2 arguments, then done. fi done done eval $2=\( \$\{_ee_Target\[@\]\} \) set +f return 0 } # This function described in edit_by_glob.bash. # edit_by_glob &lt;excludes_array_name&gt; &lt;target_array_name&gt; edit_by_glob() { [ $# -eq 2 ] || [ $# -eq 3 ] || return 1 local -a _ebg_Excludes local -a _ebg_Target local _ebg_x local _ebg_t local IFS=${NO_WSP} set -f eval _ebg_Excludes=\( \$\{$1\[@\]\} \) eval _ebg_Target=\( \$\{$2\[@\]\} \) local _ebg_len=${#_ebg_Target[@]} local _ebg_cnt=${#_ebg_Excludes[@]} [ ${_ebg_len} -ne 0 ] || return 0 [ ${_ebg_cnt} -ne 0 ] || return 0 for (( x = 0; x &lt; ${_ebg_cnt} ; x++ )) do _ebg_x=${_ebg_Excludes[$x]} for (( n = 0 ; n &lt; ${_ebg_len} ; n++ )) do [ $# -eq 3 ] &amp;&amp; _ebg_x=${_ebg_x}'*' # Do prefix edit if [ ${_ebg_Target[$n]:=} ] #+ if defined &amp; set. then _ebg_t=${_ebg_Target[$n]/#${_ebg_x}/} [ ${#_ebg_t} -eq 0 ] &amp;&amp; unset _ebg_Target[$n] fi done done eval $2=\( \$\{_ebg_Target\[@\]\} \) set +f return 0 } # This function described in unique_lines.bash. # unique_lines &lt;in_name&gt; &lt;out_name&gt; unique_lines() { [ $# -eq 2 ] || return 1 local -a _ul_in local -a _ul_out local -i _ul_cnt local -i _ul_pos local _ul_tmp local IFS=${NO_WSP} set -f eval _ul_in=\( \$\{$1\[@\]\} \) _ul_cnt=${#_ul_in[@]} for (( _ul_pos = 0 ; _ul_pos &lt; ${_ul_cnt} ; _ul_pos++ )) do if [ ${_ul_in[${_ul_pos}]:=} ] # If defined &amp; not empty then _ul_tmp=${_ul_in[${_ul_pos}]} _ul_out[${#_ul_out[@]}]=${_ul_tmp} for (( zap = _ul_pos ; zap &lt; ${_ul_cnt} ; zap++ )) do [ ${_ul_in[${zap}]:=} ] &amp;&amp; [ 'x'${_ul_in[${zap}]} == 'x'${_ul_tmp} ] &amp;&amp; unset _ul_in[${zap}] done fi done eval $2=\( \$\{_ul_out\[@\]\} \) set +f return 0 } # This function described in char_convert.bash. # to_lower &lt;string&gt; to_lower() { [ $# -eq 1 ] || return 1 local _tl_out _tl_out=${1//A/a} _tl_out=${_tl_out//B/b} _tl_out=${_tl_out//C/c} _tl_out=${_tl_out//D/d} _tl_out=${_tl_out//E/e} _tl_out=${_tl_out//F/f} _tl_out=${_tl_out//G/g} _tl_out=${_tl_out//H/h} _tl_out=${_tl_out//I/i} _tl_out=${_tl_out//J/j} _tl_out=${_tl_out//K/k} _tl_out=${_tl_out//L/l} _tl_out=${_tl_out//M/m} _tl_out=${_tl_out//N/n} _tl_out=${_tl_out//O/o} _tl_out=${_tl_out//P/p} _tl_out=${_tl_out//Q/q} _tl_out=${_tl_out//R/r} _tl_out=${_tl_out//S/s} _tl_out=${_tl_out//T/t} _tl_out=${_tl_out//U/u} _tl_out=${_tl_out//V/v} _tl_out=${_tl_out//W/w} _tl_out=${_tl_out//X/x} _tl_out=${_tl_out//Y/y} _tl_out=${_tl_out//Z/z} echo ${_tl_out} return 0 } #### Application helper functions #### # Not everybody uses dots as separators (APNIC, for example). # This function described in to_dot.bash # to_dot &lt;string&gt; to_dot() { [ $# -eq 1 ] || return 1 echo ${1//[#|@|%]/.} return 0 } # This function described in is_number.bash. # is_number &lt;input&gt; is_number() { [ &quot;$#&quot; -eq 1 ] || return 1 # is blank? [ x&quot;$1&quot; == 'x0' ] &amp;&amp; return 0 # is zero? local -i tst let tst=$1 2&gt;/dev/null # else is numeric! return $? } # This function described in is_address.bash. # is_address &lt;input&gt; is_address() { [ $# -eq 1 ] || return 1 # Blank ==&gt; false local -a _ia_input local IFS=${ADR_IFS} _ia_input=( $1 ) if [ ${#_ia_input[@]} -eq 4 ] &amp;&amp; is_number ${_ia_input[0]} &amp;&amp; is_number ${_ia_input[1]} &amp;&amp; is_number ${_ia_input[2]} &amp;&amp; is_number ${_ia_input[3]} &amp;&amp; [ ${_ia_input[0]} -lt 256 ] &amp;&amp; [ ${_ia_input[1]} -lt 256 ] &amp;&amp; [ ${_ia_input[2]} -lt 256 ] &amp;&amp; [ ${_ia_input[3]} -lt 256 ] then return 0 else return 1 fi } # This function described in split_ip.bash. # split_ip &lt;IP_address&gt; #+ &lt;array_name_norm&gt; [&lt;array_name_rev&gt;] split_ip() { [ $# -eq 3 ] || # Either three [ $# -eq 2 ] || return 1 #+ or two arguments local -a _si_input local IFS=${ADR_IFS} _si_input=( $1 ) IFS=${WSP_IFS} eval $2=\(\ \$\{_si_input\[@\]\}\ \) if [ $# -eq 3 ] then # Build query order array. local -a _dns_ip _dns_ip[0]=${_si_input[3]} _dns_ip[1]=${_si_input[2]} _dns_ip[2]=${_si_input[1]} _dns_ip[3]=${_si_input[0]} eval $3=\(\ \$\{_dns_ip\[@\]\}\ \) fi return 0 } # This function described in dot_array.bash. # dot_array &lt;array_name&gt; dot_array() { [ $# -eq 1 ] || return 1 # Single argument required. local -a _da_input eval _da_input=\(\ \$\{$1\[@\]\}\ \) local IFS=${DOT_IFS} local _da_output=${_da_input[@]} IFS=${WSP_IFS} echo ${_da_output} return 0 } # This function described in file_to_array.bash # file_to_array &lt;file_name&gt; &lt;line_array_name&gt; file_to_array() { [ $# -eq 2 ] || return 1 # Two arguments required. local IFS=${NO_WSP} local -a _fta_tmp_ _fta_tmp_=( $(cat $1) ) eval $2=\( \$\{_fta_tmp_\[@\]\} \) return 0 } # Columnized print of an array of multi-field strings. # col_print &lt;array_name&gt; &lt;min_space&gt; &lt; #+ tab_stop [tab_stops]&gt; col_print() { [ $# -gt 2 ] || return 0 local -a _cp_inp local -a _cp_spc local -a _cp_line local _cp_min local _cp_mcnt local _cp_pos local _cp_cnt local _cp_tab local -i _cp local -i _cpf local _cp_fld # WARNING: FOLLOWING LINE NOT BLANK -- IT IS QUOTED SPACES. local _cp_max=' ' set -f local IFS=${NO_WSP} eval _cp_inp=\(\ \$\{$1\[@\]\}\ \) [ ${#_cp_inp[@]} -gt 0 ] || return 0 # Empty is easy. _cp_mcnt=$2 _cp_min=${_cp_max:1:${_cp_mcnt}} shift shift _cp_cnt=$# for (( _cp = 0 ; _cp &lt; _cp_cnt ; _cp++ )) do _cp_spc[${#_cp_spc[@]}]=&quot;${_cp_max:2:$1}&quot; #&quot; shift done _cp_cnt=${#_cp_inp[@]} for (( _cp = 0 ; _cp &lt; _cp_cnt ; _cp++ )) do _cp_pos=1 IFS=${NO_WSP}$'\x20' _cp_line=( ${_cp_inp[${_cp}]} ) IFS=${NO_WSP} for (( _cpf = 0 ; _cpf &lt; ${#_cp_line[@]} ; _cpf++ )) do _cp_tab=${_cp_spc[${_cpf}]:${_cp_pos}} if [ ${#_cp_tab} -lt ${_cp_mcnt} ] then _cp_tab=&quot;${_cp_min}&quot; fi echo -n &quot;${_cp_tab}&quot; (( _cp_pos = ${_cp_pos} + ${#_cp_tab} )) _cp_fld=&quot;${_cp_line[${_cpf}]}&quot; echo -n ${_cp_fld} (( _cp_pos = ${_cp_pos} + ${#_cp_fld} )) done echo done set +f return 0 } # # # # 'Hunt the Spammer' data flow # # # # # Application return code declare -i _hs_RC # Original input, from which IP addresses are removed # After which, domain names to check declare -a uc_name # Original input IP addresses are moved here # After which, IP addresses to check declare -a uc_address # Names against which address expansion run # Ready for name detail lookup declare -a chk_name # Addresses against which name expansion run # Ready for address detail lookup declare -a chk_address # Recursion is depth-first-by-name. # The expand_input_address maintains this list #+ to prohibit looking up addresses twice during #+ domain name recursion. declare -a been_there_addr been_there_addr=( '127.0.0.1' ) # Whitelist localhost # Names which we have checked (or given up on) declare -a known_name # Addresses which we have checked (or given up on) declare -a known_address # List of zero or more Blacklist servers to check. # Each 'known_address' will be checked against each server, #+ with negative replies and failures suppressed. declare -a list_server # Indirection limit - set to zero == no limit indirect=${SPAMMER_LIMIT:=2} # # # # 'Hunt the Spammer' information output data # # # # # Any domain name may have multiple IP addresses. # Any IP address may have multiple domain names. # Therefore, track unique address-name pairs. declare -a known_pair declare -a reverse_pair # In addition to the data flow variables; known_address #+ known_name and list_server, the following are output to the #+ external graphics interface file. # Authority chain, parent -&gt; SOA fields. declare -a auth_chain # Reference chain, parent name -&gt; child name declare -a ref_chain # DNS chain - domain name -&gt; address declare -a name_address # Name and service pairs - domain name -&gt; service declare -a name_srvc # Name and resource pairs - domain name -&gt; Resource Record declare -a name_resource # Parent and Child pairs - parent name -&gt; child name # This MAY NOT be the same as the ref_chain followed! declare -a parent_child # Address and Blacklist hit pairs - address-&gt;server declare -a address_hits # Dump interface file data declare -f _dot_dump _dot_dump=pend_dummy # Initially a no-op # Data dump is enabled by setting the environment variable SPAMMER_DATA #+ to the name of a writable file. declare _dot_file # Helper function for the dump-to-dot-file function # dump_to_dot &lt;array_name&gt; &lt;prefix&gt; dump_to_dot() { local -a _dda_tmp local -i _dda_cnt local _dda_form=' '${2}'%04u %s\n' local IFS=${NO_WSP} eval _dda_tmp=\(\ \$\{$1\[@\]\}\ \) _dda_cnt=${#_dda_tmp[@]} if [ ${_dda_cnt} -gt 0 ] then for (( _dda = 0 ; _dda &lt; _dda_cnt ; _dda++ )) do printf &quot;${_dda_form}&quot; \ &quot;${_dda}&quot; &quot;${_dda_tmp[${_dda}]}&quot; &gt;&gt;${_dot_file} done fi } # Which will also set _dot_dump to this function . . . dump_dot() { local -i _dd_cnt echo '# Data vintage: '$(date -R) &gt;${_dot_file} echo '# ABS Guide: is_spammer.bash; v2, 2004-msz' &gt;&gt;${_dot_file} echo &gt;&gt;${_dot_file} echo 'digraph G {' &gt;&gt;${_dot_file} if [ ${#known_name[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known domain name nodes' &gt;&gt;${_dot_file} _dd_cnt=${#known_name[@]} for (( _dd = 0 ; _dd &lt; _dd_cnt ; _dd++ )) do printf ' N%04u [label=&quot;%s&quot;] ;\n' \ &quot;${_dd}&quot; &quot;${known_name[${_dd}]}&quot; &gt;&gt;${_dot_file} done fi if [ ${#known_address[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known address nodes' &gt;&gt;${_dot_file} _dd_cnt=${#known_address[@]} for (( _dd = 0 ; _dd &lt; _dd_cnt ; _dd++ )) do printf ' A%04u [label=&quot;%s&quot;] ;\n' \ &quot;${_dd}&quot; &quot;${known_address[${_dd}]}&quot; &gt;&gt;${_dot_file} done fi echo &gt;&gt;${_dot_file} echo '/*' &gt;&gt;${_dot_file} echo ' * Known relationships :: User conversion to' &gt;&gt;${_dot_file} echo ' * graphic form by hand or program required.' &gt;&gt;${_dot_file} echo ' *' &gt;&gt;${_dot_file} if [ ${#auth_chain[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Authority ref. edges followed &amp; field source.' &gt;&gt;${_dot_file} dump_to_dot auth_chain AC fi if [ ${#ref_chain[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Name ref. edges followed and field source.' &gt;&gt;${_dot_file} dump_to_dot ref_chain RC fi if [ ${#name_address[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known name-&gt;address edges' &gt;&gt;${_dot_file} dump_to_dot name_address NA fi if [ ${#name_srvc[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known name-&gt;service edges' &gt;&gt;${_dot_file} dump_to_dot name_srvc NS fi if [ ${#name_resource[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known name-&gt;resource edges' &gt;&gt;${_dot_file} dump_to_dot name_resource NR fi if [ ${#parent_child[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known parent-&gt;child edges' &gt;&gt;${_dot_file} dump_to_dot parent_child PC fi if [ ${#list_server[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known Blacklist nodes' &gt;&gt;${_dot_file} _dd_cnt=${#list_server[@]} for (( _dd = 0 ; _dd &lt; _dd_cnt ; _dd++ )) do printf ' LS%04u [label=&quot;%s&quot;] ;\n' \ &quot;${_dd}&quot; &quot;${list_server[${_dd}]}&quot; &gt;&gt;${_dot_file} done fi unique_lines address_hits address_hits if [ ${#address_hits[@]} -gt 0 ] then echo &gt;&gt;${_dot_file} echo '# Known address-&gt;Blacklist_hit edges' &gt;&gt;${_dot_file} echo '# CAUTION: dig warnings can trigger false hits.' &gt;&gt;${_dot_file} dump_to_dot address_hits AH fi echo &gt;&gt;${_dot_file} echo ' *' &gt;&gt;${_dot_file} echo ' * That is a lot of relationships. Happy graphing.' &gt;&gt;${_dot_file} echo ' */' &gt;&gt;${_dot_file} echo '}' &gt;&gt;${_dot_file} return 0 } # # # # 'Hunt the Spammer' execution flow # # # # # Execution trace is enabled by setting the #+ environment variable SPAMMER_TRACE to the name of a writable file. declare -a _trace_log declare _log_file # Function to fill the trace log trace_logger() { _trace_log[${#_trace_log[@]}]=${_pend_current_} } # Dump trace log to file function variable. declare -f _log_dump _log_dump=pend_dummy # Initially a no-op. # Dump the trace log to a file. dump_log() { local -i _dl_cnt _dl_cnt=${#_trace_log[@]} for (( _dl = 0 ; _dl &lt; _dl_cnt ; _dl++ )) do echo ${_trace_log[${_dl}]} &gt;&gt; ${_log_file} done _dl_cnt=${#_pending_[@]} if [ ${_dl_cnt} -gt 0 ] then _dl_cnt=${_dl_cnt}-1 echo '# # # Operations stack not empty # # #' &gt;&gt; ${_log_file} for (( _dl = ${_dl_cnt} ; _dl &gt;= 0 ; _dl-- )) do echo ${_pending_[${_dl}]} &gt;&gt; ${_log_file} done fi } # # # Utility program 'dig' wrappers # # # # # These wrappers are derived from the #+ examples shown in dig_wrappers.bash. # # The major difference is these return #+ their results as a list in an array. # # See dig_wrappers.bash for details and #+ use that script to develop any changes. # # # # # Short form answer: 'dig' parses answer. # Forward lookup :: Name -&gt; Address # short_fwd &lt;domain_name&gt; &lt;array_name&gt; short_fwd() { local -a _sf_reply local -i _sf_rc local -i _sf_cnt IFS=${NO_WSP} echo -n '.' # echo 'sfwd: '${1} _sf_reply=( $(dig +short ${1} -c in -t a 2&gt;/dev/null) ) _sf_rc=$? if [ ${_sf_rc} -ne 0 ] then _trace_log[${#_trace_log[@]}]='## Lookup error '${_sf_rc}' on '${1}' ##' # [ ${_sf_rc} -ne 9 ] &amp;&amp; pend_drop return ${_sf_rc} else # Some versions of 'dig' return warnings on stdout. _sf_cnt=${#_sf_reply[@]} for (( _sf = 0 ; _sf &lt; ${_sf_cnt} ; _sf++ )) do [ 'x'${_sf_reply[${_sf}]:0:2} == 'x;;' ] &amp;&amp; unset _sf_reply[${_sf}] done eval $2=\( \$\{_sf_reply\[@\]\} \) fi return 0 } # Reverse lookup :: Address -&gt; Name # short_rev &lt;ip_address&gt; &lt;array_name&gt; short_rev() { local -a _sr_reply local -i _sr_rc local -i _sr_cnt IFS=${NO_WSP} echo -n '.' # echo 'srev: '${1} _sr_reply=( $(dig +short -x ${1} 2&gt;/dev/null) ) _sr_rc=$? if [ ${_sr_rc} -ne 0 ] then _trace_log[${#_trace_log[@]}]='## Lookup error '${_sr_rc}' on '${1}' ##' # [ ${_sr_rc} -ne 9 ] &amp;&amp; pend_drop return ${_sr_rc} else # Some versions of 'dig' return warnings on stdout. _sr_cnt=${#_sr_reply[@]} for (( _sr = 0 ; _sr &lt; ${_sr_cnt} ; _sr++ )) do [ 'x'${_sr_reply[${_sr}]:0:2} == 'x;;' ] &amp;&amp; unset _sr_reply[${_sr}] done eval $2=\( \$\{_sr_reply\[@\]\} \) fi return 0 } # Special format lookup used to query blacklist servers. # short_text &lt;ip_address&gt; &lt;array_name&gt; short_text() { local -a _st_reply local -i _st_rc local -i _st_cnt IFS=${NO_WSP} # echo 'stxt: '${1} _st_reply=( $(dig +short ${1} -c in -t txt 2&gt;/dev/null) ) _st_rc=$? if [ ${_st_rc} -ne 0 ] then _trace_log[${#_trace_log[@]}]='##Text lookup error '${_st_rc}' on '${1}'##' # [ ${_st_rc} -ne 9 ] &amp;&amp; pend_drop return ${_st_rc} else # Some versions of 'dig' return warnings on stdout. _st_cnt=${#_st_reply[@]} for (( _st = 0 ; _st &lt; ${#_st_cnt} ; _st++ )) do [ 'x'${_st_reply[${_st}]:0:2} == 'x;;' ] &amp;&amp; unset _st_reply[${_st}] done eval $2=\( \$\{_st_reply\[@\]\} \) fi return 0 } # The long forms, a.k.a., the parse it yourself versions # RFC 2782 Service lookups # dig +noall +nofail +answer _ldap._tcp.openldap.org -t srv # _&lt;service&gt;._&lt;protocol&gt;.&lt;domain_name&gt; # _ldap._tcp.openldap.org. 3600 IN SRV 0 0 389 ldap.openldap.org. # domain TTL Class SRV Priority Weight Port Target # Forward lookup :: Name -&gt; poor man's zone transfer # long_fwd &lt;domain_name&gt; &lt;array_name&gt; long_fwd() { local -a _lf_reply local -i _lf_rc local -i _lf_cnt IFS=${NO_WSP} echo -n ':' # echo 'lfwd: '${1} _lf_reply=( $( dig +noall +nofail +answer +authority +additional \ ${1} -t soa ${1} -t mx ${1} -t any 2&gt;/dev/null) ) _lf_rc=$? if [ ${_lf_rc} -ne 0 ] then _trace_log[${#_trace_log[@]}]='# Zone lookup err '${_lf_rc}' on '${1}' #' # [ ${_lf_rc} -ne 9 ] &amp;&amp; pend_drop return ${_lf_rc} else # Some versions of 'dig' return warnings on stdout. _lf_cnt=${#_lf_reply[@]} for (( _lf = 0 ; _lf &lt; ${_lf_cnt} ; _lf++ )) do [ 'x'${_lf_reply[${_lf}]:0:2} == 'x;;' ] &amp;&amp; unset _lf_reply[${_lf}] done eval $2=\( \$\{_lf_reply\[@\]\} \) fi return 0 } # The reverse lookup domain name corresponding to the IPv6 address: # 4321:0:1:2:3:4:567:89ab # would be (nibble, I.E: Hexdigit) reversed: # b.a.9.8.7.6.5.0.4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.2.3.4.IP6.ARPA. # Reverse lookup :: Address -&gt; poor man's delegation chain # long_rev &lt;rev_ip_address&gt; &lt;array_name&gt; long_rev() { local -a _lr_reply local -i _lr_rc local -i _lr_cnt local _lr_dns _lr_dns=${1}'.in-addr.arpa.' IFS=${NO_WSP} echo -n ':' # echo 'lrev: '${1} _lr_reply=( $( dig +noall +nofail +answer +authority +additional \ ${_lr_dns} -t soa ${_lr_dns} -t any 2&gt;/dev/null) ) _lr_rc=$? if [ ${_lr_rc} -ne 0 ] then _trace_log[${#_trace_log[@]}]='# Deleg lkp error '${_lr_rc}' on '${1}' #' # [ ${_lr_rc} -ne 9 ] &amp;&amp; pend_drop return ${_lr_rc} else # Some versions of 'dig' return warnings on stdout. _lr_cnt=${#_lr_reply[@]} for (( _lr = 0 ; _lr &lt; ${_lr_cnt} ; _lr++ )) do [ 'x'${_lr_reply[${_lr}]:0:2} == 'x;;' ] &amp;&amp; unset _lr_reply[${_lr}] done eval $2=\( \$\{_lr_reply\[@\]\} \) fi return 0 } # # # Application specific functions # # # # Mung a possible name; suppresses root and TLDs. # name_fixup &lt;string&gt; name_fixup(){ local -a _nf_tmp local -i _nf_end local _nf_str local IFS _nf_str=$(to_lower ${1}) _nf_str=$(to_dot ${_nf_str}) _nf_end=${#_nf_str}-1 [ ${_nf_str:${_nf_end}} != '.' ] &amp;&amp; _nf_str=${_nf_str}'.' IFS=${ADR_IFS} _nf_tmp=( ${_nf_str} ) IFS=${WSP_IFS} _nf_end=${#_nf_tmp[@]} case ${_nf_end} in 0) # No dots, only dots. echo return 1 ;; 1) # Only a TLD. echo return 1 ;; 2) # Maybe okay. echo ${_nf_str} return 0 # Needs a lookup table? if [ ${#_nf_tmp[1]} -eq 2 ] then # Country coded TLD. echo return 1 else echo ${_nf_str} return 0 fi ;; esac echo ${_nf_str} return 0 } # Grope and mung original input(s). split_input() { [ ${#uc_name[@]} -gt 0 ] || return 0 local -i _si_cnt local -i _si_len local _si_str unique_lines uc_name uc_name _si_cnt=${#uc_name[@]} for (( _si = 0 ; _si &lt; _si_cnt ; _si++ )) do _si_str=${uc_name[$_si]} if is_address ${_si_str} then uc_address[${#uc_address[@]}]=${_si_str} unset uc_name[$_si] else if ! uc_name[$_si]=$(name_fixup ${_si_str}) then unset ucname[$_si] fi fi done uc_name=( ${uc_name[@]} ) _si_cnt=${#uc_name[@]} _trace_log[${#_trace_log[@]}]='#Input '${_si_cnt}' unchkd name input(s).#' _si_cnt=${#uc_address[@]} _trace_log[${#_trace_log[@]}]='#Input '${_si_cnt}' unchkd addr input(s).#' return 0 } # # # Discovery functions -- recursively interlocked by external data # # # # # # The leading 'if list is empty; return 0' in each is required. # # # # Recursion limiter # limit_chk() &lt;next_level&gt; limit_chk() { local -i _lc_lmt # Check indirection limit. if [ ${indirect} -eq 0 ] || [ $# -eq 0 ] then # The 'do-forever' choice echo 1 # Any value will do. return 0 # OK to continue. else # Limiting is in effect. if [ ${indirect} -lt ${1} ] then echo ${1} # Whatever. return 1 # Stop here. else _lc_lmt=${1}+1 # Bump the given limit. echo ${_lc_lmt} # Echo it. return 0 # OK to continue. fi fi } # For each name in uc_name: # Move name to chk_name. # Add addresses to uc_address. # Pend expand_input_address. # Repeat until nothing new found. # expand_input_name &lt;indirection_limit&gt; expand_input_name() { [ ${#uc_name[@]} -gt 0 ] || return 0 local -a _ein_addr local -a _ein_new local -i _ucn_cnt local -i _ein_cnt local _ein_tst _ucn_cnt=${#uc_name[@]} if ! _ein_cnt=$(limit_chk ${1}) then return 0 fi for (( _ein = 0 ; _ein &lt; _ucn_cnt ; _ein++ )) do if short_fwd ${uc_name[${_ein}]} _ein_new then for (( _ein_cnt = 0 ; _ein_cnt &lt; ${#_ein_new[@]}; _ein_cnt++ )) do _ein_tst=${_ein_new[${_ein_cnt}]} if is_address ${_ein_tst} then _ein_addr[${#_ein_addr[@]}]=${_ein_tst} fi done fi done unique_lines _ein_addr _ein_addr # Scrub duplicates. edit_exact chk_address _ein_addr # Scrub pending detail. edit_exact known_address _ein_addr # Scrub already detailed. if [ ${#_ein_addr[@]} -gt 0 ] # Anything new? then uc_address=( ${uc_address[@]} ${_ein_addr[@]} ) pend_func expand_input_address ${1} _trace_log[${#_trace_log[@]}]='#Add '${#_ein_addr[@]}' unchkd addr inp.#' fi edit_exact chk_name uc_name # Scrub pending detail. edit_exact known_name uc_name # Scrub already detailed. if [ ${#uc_name[@]} -gt 0 ] then chk_name=( ${chk_name[@]} ${uc_name[@]} ) pend_func detail_each_name ${1} fi unset uc_name[@] return 0 } # For each address in uc_address: # Move address to chk_address. # Add names to uc_name. # Pend expand_input_name. # Repeat until nothing new found. # expand_input_address &lt;indirection_limit&gt; expand_input_address() { [ ${#uc_address[@]} -gt 0 ] || return 0 local -a _eia_addr local -a _eia_name local -a _eia_new local -i _uca_cnt local -i _eia_cnt local _eia_tst unique_lines uc_address _eia_addr unset uc_address[@] edit_exact been_there_addr _eia_addr _uca_cnt=${#_eia_addr[@]} [ ${_uca_cnt} -gt 0 ] &amp;&amp; been_there_addr=( ${been_there_addr[@]} ${_eia_addr[@]} ) for (( _eia = 0 ; _eia &lt; _uca_cnt ; _eia++ )) do if short_rev ${_eia_addr[${_eia}]} _eia_new then for (( _eia_cnt = 0 ; _eia_cnt &lt; ${#_eia_new[@]} ; _eia_cnt++ )) do _eia_tst=${_eia_new[${_eia_cnt}]} if _eia_tst=$(name_fixup ${_eia_tst}) then _eia_name[${#_eia_name[@]}]=${_eia_tst} fi done fi done unique_lines _eia_name _eia_name # Scrub duplicates. edit_exact chk_name _eia_name # Scrub pending detail. edit_exact known_name _eia_name # Scrub already detailed. if [ ${#_eia_name[@]} -gt 0 ] # Anything new? then uc_name=( ${uc_name[@]} ${_eia_name[@]} ) pend_func expand_input_name ${1} _trace_log[${#_trace_log[@]}]='#Add '${#_eia_name[@]}' unchkd name inp.#' fi edit_exact chk_address _eia_addr # Scrub pending detail. edit_exact known_address _eia_addr # Scrub already detailed. if [ ${#_eia_addr[@]} -gt 0 ] # Anything new? then chk_address=( ${chk_address[@]} ${_eia_addr[@]} ) pend_func detail_each_address ${1} fi return 0 } # The parse-it-yourself zone reply. # The input is the chk_name list. # detail_each_name &lt;indirection_limit&gt; detail_each_name() { [ ${#chk_name[@]} -gt 0 ] || return 0 local -a _den_chk # Names to check local -a _den_name # Names found here local -a _den_address # Addresses found here local -a _den_pair # Pairs found here local -a _den_rev # Reverse pairs found here local -a _den_tmp # Line being parsed local -a _den_auth # SOA contact being parsed local -a _den_new # The zone reply local -a _den_pc # Parent-Child gets big fast local -a _den_ref # So does reference chain local -a _den_nr # Name-Resource can be big local -a _den_na # Name-Address local -a _den_ns # Name-Service local -a _den_achn # Chain of Authority local -i _den_cnt # Count of names to detail local -i _den_lmt # Indirection limit local _den_who # Named being processed local _den_rec # Record type being processed local _den_cont # Contact domain local _den_str # Fixed up name string local _den_str2 # Fixed up reverse local IFS=${WSP_IFS} # Local, unique copy of names to check unique_lines chk_name _den_chk unset chk_name[@] # Done with globals. # Less any names already known edit_exact known_name _den_chk _den_cnt=${#_den_chk[@]} # If anything left, add to known_name. [ ${_den_cnt} -gt 0 ] &amp;&amp; known_name=( ${known_name[@]} ${_den_chk[@]} ) # for the list of (previously) unknown names . . . for (( _den = 0 ; _den &lt; _den_cnt ; _den++ )) do _den_who=${_den_chk[${_den}]} if long_fwd ${_den_who} _den_new then unique_lines _den_new _den_new if [ ${#_den_new[@]} -eq 0 ] then _den_pair[${#_den_pair[@]}]='0.0.0.0 '${_den_who} fi # Parse each line in the reply. for (( _line = 0 ; _line &lt; ${#_den_new[@]} ; _line++ )) do IFS=${NO_WSP}$'\x09'$'\x20' _den_tmp=( ${_den_new[${_line}]} ) IFS=${WSP_IFS} # If usable record and not a warning message . . . if [ ${#_den_tmp[@]} -gt 4 ] &amp;&amp; [ 'x'${_den_tmp[0]} != 'x;;' ] then _den_rec=${_den_tmp[3]} _den_nr[${#_den_nr[@]}]=${_den_who}' '${_den_rec} # Begin at RFC1033 (+++) case ${_den_rec} in #&lt;name&gt; [&lt;ttl&gt;] [&lt;class&gt;] SOA &lt;origin&gt; &lt;person&gt; SOA) # Start Of Authority if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_achn[${#_den_achn[@]}]=${_den_who}' '${_den_str}' SOA' # SOA origin -- domain name of master zone record if _den_str2=$(name_fixup ${_den_tmp[4]}) then _den_name[${#_den_name[@]}]=${_den_str2} _den_achn[${#_den_achn[@]}]=${_den_who}' '${_den_str2}' SOA.O' fi # Responsible party e-mail address (possibly bogus). # Possibility of first.last@domain.name ignored. set -f if _den_str2=$(name_fixup ${_den_tmp[5]}) then IFS=${ADR_IFS} _den_auth=( ${_den_str2} ) IFS=${WSP_IFS} if [ ${#_den_auth[@]} -gt 2 ] then _den_cont=${_den_auth[1]} for (( _auth = 2 ; _auth &lt; ${#_den_auth[@]} ; _auth++ )) do _den_cont=${_den_cont}'.'${_den_auth[${_auth}]} done _den_name[${#_den_name[@]}]=${_den_cont}'.' _den_achn[${#_den_achn[@]}]=${_den_who}' '${_den_cont}'. SOA.C' fi fi set +f fi ;; A) # IP(v4) Address Record if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' '${_den_str} _den_na[${#_den_na[@]}]=${_den_str}' '${_den_tmp[4]} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' A' else _den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' unknown.domain' _den_na[${#_den_na[@]}]='unknown.domain '${_den_tmp[4]} _den_ref[${#_den_ref[@]}]=${_den_who}' unknown.domain A' fi _den_address[${#_den_address[@]}]=${_den_tmp[4]} _den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_tmp[4]} ;; NS) # Name Server Record # Domain name being serviced (may be other than current) if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' NS' # Domain name of service provider if _den_str2=$(name_fixup ${_den_tmp[4]}) then _den_name[${#_den_name[@]}]=${_den_str2} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str2}' NSH' _den_ns[${#_den_ns[@]}]=${_den_str2}' NS' _den_pc[${#_den_pc[@]}]=${_den_str}' '${_den_str2} fi fi ;; MX) # Mail Server Record # Domain name being serviced (wildcards not handled here) if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' MX' fi # Domain name of service provider if _den_str=$(name_fixup ${_den_tmp[5]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' MXH' _den_ns[${#_den_ns[@]}]=${_den_str}' MX' _den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str} fi ;; PTR) # Reverse address record # Special name if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' PTR' # Host name (not a CNAME) if _den_str2=$(name_fixup ${_den_tmp[4]}) then _den_rev[${#_den_rev[@]}]=${_den_str}' '${_den_str2} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str2}' PTRH' _den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str} fi fi ;; AAAA) # IP(v6) Address Record if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' '${_den_str} _den_na[${#_den_na[@]}]=${_den_str}' '${_den_tmp[4]} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' AAAA' else _den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' unknown.domain' _den_na[${#_den_na[@]}]='unknown.domain '${_den_tmp[4]} _den_ref[${#_den_ref[@]}]=${_den_who}' unknown.domain' fi # No processing for IPv6 addresses _den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_tmp[4]} ;; CNAME) # Alias name record # Nickname if _den_str=$(name_fixup ${_den_tmp[0]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' CNAME' _den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str} fi # Hostname if _den_str=$(name_fixup ${_den_tmp[4]}) then _den_name[${#_den_name[@]}]=${_den_str} _den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' CHOST' _den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str} fi ;; # TXT) # ;; esac fi done else # Lookup error == 'A' record 'unknown address' _den_pair[${#_den_pair[@]}]='0.0.0.0 '${_den_who} fi done # Control dot array growth. unique_lines _den_achn _den_achn # Works best, all the same. edit_exact auth_chain _den_achn # Works best, unique items. if [ ${#_den_achn[@]} -gt 0 ] then IFS=${NO_WSP} auth_chain=( ${auth_chain[@]} ${_den_achn[@]} ) IFS=${WSP_IFS} fi unique_lines _den_ref _den_ref # Works best, all the same. edit_exact ref_chain _den_ref # Works best, unique items. if [ ${#_den_ref[@]} -gt 0 ] then IFS=${NO_WSP} ref_chain=( ${ref_chain[@]} ${_den_ref[@]} ) IFS=${WSP_IFS} fi unique_lines _den_na _den_na edit_exact name_address _den_na if [ ${#_den_na[@]} -gt 0 ] then IFS=${NO_WSP} name_address=( ${name_address[@]} ${_den_na[@]} ) IFS=${WSP_IFS} fi unique_lines _den_ns _den_ns edit_exact name_srvc _den_ns if [ ${#_den_ns[@]} -gt 0 ] then IFS=${NO_WSP} name_srvc=( ${name_srvc[@]} ${_den_ns[@]} ) IFS=${WSP_IFS} fi unique_lines _den_nr _den_nr edit_exact name_resource _den_nr if [ ${#_den_nr[@]} -gt 0 ] then IFS=${NO_WSP} name_resource=( ${name_resource[@]} ${_den_nr[@]} ) IFS=${WSP_IFS} fi unique_lines _den_pc _den_pc edit_exact parent_child _den_pc if [ ${#_den_pc[@]} -gt 0 ] then IFS=${NO_WSP} parent_child=( ${parent_child[@]} ${_den_pc[@]} ) IFS=${WSP_IFS} fi # Update list known_pair (Address and Name). unique_lines _den_pair _den_pair edit_exact known_pair _den_pair if [ ${#_den_pair[@]} -gt 0 ] # Anything new? then IFS=${NO_WSP} known_pair=( ${known_pair[@]} ${_den_pair[@]} ) IFS=${WSP_IFS} fi # Update list of reverse pairs. unique_lines _den_rev _den_rev edit_exact reverse_pair _den_rev if [ ${#_den_rev[@]} -gt 0 ] # Anything new? then IFS=${NO_WSP} reverse_pair=( ${reverse_pair[@]} ${_den_rev[@]} ) IFS=${WSP_IFS} fi # Check indirection limit -- give up if reached. if ! _den_lmt=$(limit_chk ${1}) then return 0 fi # Execution engine is LIFO. Order of pend operations is important. # Did we define any new addresses? unique_lines _den_address _den_address # Scrub duplicates. edit_exact known_address _den_address # Scrub already processed. edit_exact un_address _den_address # Scrub already waiting. if [ ${#_den_address[@]} -gt 0 ] # Anything new? then uc_address=( ${uc_address[@]} ${_den_address[@]} ) pend_func expand_input_address ${_den_lmt} _trace_log[${#_trace_log[@]}]='# Add '${#_den_address[@]}' unchkd addr. #' fi # Did we find any new names? unique_lines _den_name _den_name # Scrub duplicates. edit_exact known_name _den_name # Scrub already processed. edit_exact uc_name _den_name # Scrub already waiting. if [ ${#_den_name[@]} -gt 0 ] # Anything new? then uc_name=( ${uc_name[@]} ${_den_name[@]} ) pend_func expand_input_name ${_den_lmt} _trace_log[${#_trace_log[@]}]='#Added '${#_den_name[@]}' unchkd name#' fi return 0 } # The parse-it-yourself delegation reply # Input is the chk_address list. # detail_each_address &lt;indirection_limit&gt; detail_each_address() { [ ${#chk_address[@]} -gt 0 ] || return 0 unique_lines chk_address chk_address edit_exact known_address chk_address if [ ${#chk_address[@]} -gt 0 ] then known_address=( ${known_address[@]} ${chk_address[@]} ) unset chk_address[@] fi return 0 } # # # Application specific output functions # # # # Pretty print the known pairs. report_pairs() { echo echo 'Known network pairs.' col_print known_pair 2 5 30 if [ ${#auth_chain[@]} -gt 0 ] then echo echo 'Known chain of authority.' col_print auth_chain 2 5 30 55 fi if [ ${#reverse_pair[@]} -gt 0 ] then echo echo 'Known reverse pairs.' col_print reverse_pair 2 5 55 fi return 0 } # Check an address against the list of blacklist servers. # A good place to capture for GraphViz: address-&gt;status(server(reports)) # check_lists &lt;ip_address&gt; check_lists() { [ $# -eq 1 ] || return 1 local -a _cl_fwd_addr local -a _cl_rev_addr local -a _cl_reply local -i _cl_rc local -i _ls_cnt local _cl_dns_addr local _cl_lkup split_ip ${1} _cl_fwd_addr _cl_rev_addr _cl_dns_addr=$(dot_array _cl_rev_addr)'.' _ls_cnt=${#list_server[@]} echo ' Checking address '${1} for (( _cl = 0 ; _cl &lt; _ls_cnt ; _cl++ )) do _cl_lkup=${_cl_dns_addr}${list_server[${_cl}]} if short_text ${_cl_lkup} _cl_reply then if [ ${#_cl_reply[@]} -gt 0 ] then echo ' Records from '${list_server[${_cl}]} address_hits[${#address_hits[@]}]=${1}' '${list_server[${_cl}]} _hs_RC=2 for (( _clr = 0 ; _clr &lt; ${#_cl_reply[@]} ; _clr++ )) do echo ' '${_cl_reply[${_clr}]} done fi fi done return 0 } # # # The usual application glue # # # # Who did it? credits() { echo echo 'Advanced Bash Scripting Guide: is_spammer.bash, v2, 2004-msz' } # How to use it? # (See also, &quot;Quickstart&quot; at end of script.) usage() { cat &lt;&lt;-'_usage_statement_' The script is_spammer.bash requires either one or two arguments. arg 1) May be one of: a) A domain name b) An IPv4 address c) The name of a file with any mix of names and addresses, one per line. arg 2) May be one of: a) A Blacklist server domain name b) The name of a file with Blacklist server domain names, one per line. c) If not present, a default list of (free) Blacklist servers is used. d) If a filename of an empty, readable, file is given, Blacklist server lookup is disabled. All script output is written to stdout. Return codes: 0 -&gt; All OK, 1 -&gt; Script failure, 2 -&gt; Something is Blacklisted. Requires the external program 'dig' from the 'bind-9' set of DNS programs. See: http://www.isc.org The domain name lookup depth limit defaults to 2 levels. Set the environment variable SPAMMER_LIMIT to change. SPAMMER_LIMIT=0 means 'unlimited' Limit may also be set on the command-line. If arg#1 is an integer, the limit is set to that value and then the above argument rules are applied. Setting the environment variable 'SPAMMER_DATA' to a filename will cause the script to write a GraphViz graphic file. For the development version; Setting the environment variable 'SPAMMER_TRACE' to a filename will cause the execution engine to log a function call trace. _usage_statement_ } # The default list of Blacklist servers: # Many choices, see: http://www.spews.org/lists.html declare -a default_servers # See: http://www.spamhaus.org (Conservative, well maintained) default_servers[0]='sbl-xbl.spamhaus.org' # See: http://ordb.org (Open mail relays) default_servers[1]='relays.ordb.org' # See: http://www.spamcop.net/ (You can report spammers here) default_servers[2]='bl.spamcop.net' # See: http://www.spews.org (An 'early detect' system) default_servers[3]='l2.spews.dnsbl.sorbs.net' # See: http://www.dnsbl.us.sorbs.net/using.shtml default_servers[4]='dnsbl.sorbs.net' # See: http://dsbl.org/usage (Various mail relay lists) default_servers[5]='list.dsbl.org' default_servers[6]='multihop.dsbl.org' default_servers[7]='unconfirmed.dsbl.org' # User input argument #1 setup_input() { if [ -e ${1} ] &amp;&amp; [ -r ${1} ] # Name of readable file then file_to_array ${1} uc_name echo 'Using filename &gt;'${1}'&lt; as input.' else if is_address ${1} # IP address? then uc_address=( ${1} ) echo 'Starting with address &gt;'${1}'&lt;' else # Must be a name. uc_name=( ${1} ) echo 'Starting with domain name &gt;'${1}'&lt;' fi fi return 0 } # User input argument #2 setup_servers() { if [ -e ${1} ] &amp;&amp; [ -r ${1} ] # Name of a readable file then file_to_array ${1} list_server echo 'Using filename &gt;'${1}'&lt; as blacklist server list.' else list_server=( ${1} ) echo 'Using blacklist server &gt;'${1}'&lt;' fi return 0 } # User environment variable SPAMMER_TRACE live_log_die() { if [ ${SPAMMER_TRACE:=} ] # Wants trace log? then if [ ! -e ${SPAMMER_TRACE} ] then if ! touch ${SPAMMER_TRACE} 2&gt;/dev/null then pend_func echo $(printf '%q\n' \ 'Unable to create log file &gt;'${SPAMMER_TRACE}'&lt;') pend_release exit 1 fi _log_file=${SPAMMER_TRACE} _pend_hook_=trace_logger _log_dump=dump_log else if [ ! -w ${SPAMMER_TRACE} ] then pend_func echo $(printf '%q\n' \ 'Unable to write log file &gt;'${SPAMMER_TRACE}'&lt;') pend_release exit 1 fi _log_file=${SPAMMER_TRACE} echo '' &gt; ${_log_file} _pend_hook_=trace_logger _log_dump=dump_log fi fi return 0 } # User environment variable SPAMMER_DATA data_capture() { if [ ${SPAMMER_DATA:=} ] # Wants a data dump? then if [ ! -e ${SPAMMER_DATA} ] then if ! touch ${SPAMMER_DATA} 2&gt;/dev/null then pend_func echo $(printf '%q]n' \ 'Unable to create data output file &gt;'${SPAMMER_DATA}'&lt;') pend_release exit 1 fi _dot_file=${SPAMMER_DATA} _dot_dump=dump_dot else if [ ! -w ${SPAMMER_DATA} ] then pend_func echo $(printf '%q\n' \ 'Unable to write data output file &gt;'${SPAMMER_DATA}'&lt;') pend_release exit 1 fi _dot_file=${SPAMMER_DATA} _dot_dump=dump_dot fi fi return 0 } # Grope user specified arguments. do_user_args() { if [ $# -gt 0 ] &amp;&amp; is_number $1 then indirect=$1 shift fi case $# in # Did user treat us well? 1) if ! setup_input $1 # Needs error checking. then pend_release $_log_dump exit 1 fi list_server=( ${default_servers[@]} ) _list_cnt=${#list_server[@]} echo 'Using default blacklist server list.' echo 'Search depth limit: '${indirect} ;; 2) if ! setup_input $1 # Needs error checking. then pend_release $_log_dump exit 1 fi if ! setup_servers $2 # Needs error checking. then pend_release $_log_dump exit 1 fi echo 'Search depth limit: '${indirect} ;; *) pend_func usage pend_release $_log_dump exit 1 ;; esac return 0 } # A general purpose debug tool. # list_array &lt;array_name&gt; list_array() { [ $# -eq 1 ] || return 1 # One argument required. local -a _la_lines set -f local IFS=${NO_WSP} eval _la_lines=\(\ \$\{$1\[@\]\}\ \) echo echo &quot;Element count &quot;${#_la_lines[@]}&quot; array &quot;${1} local _ln_cnt=${#_la_lines[@]} for (( _i = 0; _i &lt; ${_ln_cnt}; _i++ )) do echo 'Element '$_i' &gt;'${_la_lines[$_i]}'&lt;' done set +f return 0 } # # # 'Hunt the Spammer' program code # # # pend_init # Ready stack engine. pend_func credits # Last thing to print. # # # Deal with user # # # live_log_die # Setup debug trace log. data_capture # Setup data capture file. echo do_user_args $@ # # # Haven't exited yet - There is some hope # # # # Discovery group - Execution engine is LIFO - pend # in reverse order of execution. _hs_RC=0 # Hunt the Spammer return code pend_mark pend_func report_pairs # Report name-address pairs. # The two detail_* are mutually recursive functions. # They also pend expand_* functions as required. # These two (the last of ???) exit the recursion. pend_func detail_each_address # Get all resources of addresses. pend_func detail_each_name # Get all resources of names. # The two expand_* are mutually recursive functions, #+ which pend additional detail_* functions as required. pend_func expand_input_address 1 # Expand input names by address. pend_func expand_input_name 1 # #xpand input addresses by name. # Start with a unique set of names and addresses. pend_func unique_lines uc_address uc_address pend_func unique_lines uc_name uc_name # Separate mixed input of names and addresses. pend_func split_input pend_release # # # Pairs reported -- Unique list of IP addresses found echo _ip_cnt=${#known_address[@]} if [ ${#list_server[@]} -eq 0 ] then echo 'Blacklist server list empty, none checked.' else if [ ${_ip_cnt} -eq 0 ] then echo 'Known address list empty, none checked.' else _ip_cnt=${_ip_cnt}-1 # Start at top. echo 'Checking Blacklist servers.' for (( _ip = _ip_cnt ; _ip &gt;= 0 ; _ip-- )) do pend_func check_lists $( printf '%q\n' ${known_address[$_ip]} ) done fi fi pend_release $_dot_dump # Graphics file dump $_log_dump # Execution trace echo ############################## # Example output from script # ############################## :&lt;&lt;-'_is_spammer_outputs_' ./is_spammer.bash 0 web4.alojamentos7.com Starting with domain name &gt;web4.alojamentos7.com&lt; Using default blacklist server list. Search depth limit: 0 .:....::::...:::...:::.......::..::...:::.......:: Known network pairs. 66.98.208.97 web4.alojamentos7.com. 66.98.208.97 ns1.alojamentos7.com. 69.56.202.147 ns2.alojamentos.ws. 66.98.208.97 alojamentos7.com. 66.98.208.97 web.alojamentos7.com. 69.56.202.146 ns1.alojamentos.ws. 69.56.202.146 alojamentos.ws. 66.235.180.113 ns1.alojamentos.org. 66.235.181.192 ns2.alojamentos.org. 66.235.180.113 alojamentos.org. 66.235.180.113 web6.alojamentos.org. 216.234.234.30 ns1.theplanet.com. 12.96.160.115 ns2.theplanet.com. 216.185.111.52 mail1.theplanet.com. 69.56.141.4 spooling.theplanet.com. 216.185.111.40 theplanet.com. 216.185.111.40 www.theplanet.com. 216.185.111.52 mail.theplanet.com. Checking Blacklist servers. Checking address 66.98.208.97 Records from dnsbl.sorbs.net &quot;Spam Received See: http://www.dnsbl.sorbs.net/lookup.shtml?66.98.208.97&quot; Checking address 69.56.202.147 Checking address 69.56.202.146 Checking address 66.235.180.113 Checking address 66.235.181.192 Checking address 216.185.111.40 Checking address 216.234.234.30 Checking address 12.96.160.115 Checking address 216.185.111.52 Checking address 69.56.141.4 Advanced Bash Scripting Guide: is_spammer.bash, v2, 2004-msz _is_spammer_outputs_ exit ${_hs_RC} #################################################### # The script ignores everything from here on down # #+ because of the 'exit' command, just above. # #################################################### Quickstart ========== Prerequisites Bash version 2.05b or 3.00 (bash --version) A version of Bash which supports arrays. Array support is included by default Bash configurations. 'dig,' version 9.x.x (dig $HOSTNAME, see first line of output) A version of dig which supports the +short options. See: dig_wrappers.bash for details. Optional Prerequisites 'named,' a local DNS caching program. Any flavor will do. Do twice: dig $HOSTNAME Check near bottom of output for: SERVER: 127.0.0.1#53 That means you have one running. Optional Graphics Support 'date,' a standard *nix thing. (date -R) dot Program to convert graphic description file to a diagram. (dot -V) A part of the Graph-Viz set of programs. See: [http://www.research.att.com/sw/tools/graphviz||GraphViz] 'dotty,' a visual editor for graphic description files. Also a part of the Graph-Viz set of programs. Quick Start In the same directory as the is_spammer.bash script; Do: ./is_spammer.bash Usage Details 1. Blacklist server choices. (a) To use default, built-in list: Do nothing. (b) To use your own list: i. Create a file with a single Blacklist server domain name per line. ii. Provide that filename as the last argument to the script. (c) To use a single Blacklist server: Last argument to the script. (d) To disable Blacklist lookups: i. Create an empty file (touch spammer.nul) Your choice of filename. ii. Provide the filename of that empty file as the last argument to the script. 2. Search depth limit. (a) To use the default value of 2: Do nothing. (b) To set a different limit: A limit of 0 means: no limit. i. export SPAMMER_LIMIT=1 or whatever limit you want. ii. OR provide the desired limit as the first argument to the script. 3. Optional execution trace log. (a) To use the default setting of no log output: Do nothing. (b) To write an execution trace log: export SPAMMER_TRACE=spammer.log or whatever filename you want. 4. Optional graphic description file. (a) To use the default setting of no graphic file: Do nothing. (b) To write a Graph-Viz graphic description file: export SPAMMER_DATA=spammer.dot or whatever filename you want. 5. Where to start the search. (a) Starting with a single domain name: i. Without a command-line search limit: First argument to script. ii. With a command-line search limit: Second argument to script. (b) Starting with a single IP address: i. Without a command-line search limit: First argument to script. ii. With a command-line search limit: Second argument to script. (c) Starting with (mixed) multiple name(s) and/or address(es): Create a file with one name or address per line. Your choice of filename. i. Without a command-line search limit: Filename as first argument to script. ii. With a command-line search limit: Filename as second argument to script. 6. What to do with the display output. (a) To view display output on screen: Do nothing. (b) To save display output to a file: Redirect stdout to a filename. (c) To discard display output: Redirect stdout to /dev/null. 7. Temporary end of decision making. press RETURN wait (optionally, watch the dots and colons). 8. Optionally check the return code. (a) Return code 0: All OK (b) Return code 1: Script setup failure (c) Return code 2: Something was blacklisted. 9. Where is my graph (diagram)? The script does not directly produce a graph (diagram). It only produces a graphic description file. You can process the graphic descriptor file that was output with the 'dot' program. Until you edit that descriptor file, to describe the relationships you want shown, all that you will get is a bunch of labeled name and address nodes. All of the script's discovered relationships are within a comment block in the graphic descriptor file, each with a descriptive heading. The editing required to draw a line between a pair of nodes from the information in the descriptor file may be done with a text editor. Given these lines somewhere in the descriptor file: # Known domain name nodes N0000 [label=&quot;guardproof.info.&quot;] ; N0002 [label=&quot;third.guardproof.info.&quot;] ; # Known address nodes A0000 [label=&quot;61.141.32.197&quot;] ; /* # Known name-&gt;address edges NA0000 third.guardproof.info. 61.141.32.197 # Known parent-&gt;child edges PC0000 guardproof.info. third.guardproof.info. */ Turn that into the following lines by substituting node identifiers into the relationships: # Known domain name nodes N0000 [label=&quot;guardproof.info.&quot;] ; N0002 [label=&quot;third.guardproof.info.&quot;] ; # Known address nodes A0000 [label=&quot;61.141.32.197&quot;] ; # PC0000 guardproof.info. third.guardproof.info. N0000-&gt;N0002 ; # NA0000 third.guardproof.info. 61.141.32.197 N0002-&gt;A0000 ; /* # Known name-&gt;address edges NA0000 third.guardproof.info. 61.141.32.197 # Known parent-&gt;child edges PC0000 guardproof.info. third.guardproof.info. */ Process that with the 'dot' program, and you have your first network diagram. In addition to the conventional graphic edges, the descriptor file includes similar format pair-data that describes services, zone records (sub-graphs?), blacklisted addresses, and other things which might be interesting to include in your graph. This additional information could be displayed as different node shapes, colors, line sizes, etc. The descriptor file can also be read and edited by a Bash script (of course). You should be able to find most of the functions required within the &quot;is_spammer.bash&quot; script. # End Quickstart. Additional Note ========== ==== Michael Zick points out that there is a &quot;makeviz.bash&quot; interactive Web site at rediris.es. Can't give the full URL, since this is not a publically accessible site. Another anti-spam script. Example A-29. Spammer Hunt #!/bin/bash # whx.sh: &quot;whois&quot; spammer lookup # Author: Walter Dnes # Slight revisions (first section) by ABS Guide author. # Used in ABS Guide with permission. # Needs version 3.x or greater of Bash to run (because of =~ operator). # Commented by script author and ABS Guide author. E_BADARGS=85 # Missing command-line arg. E_NOHOST=86 # Host not found. E_TIMEOUT=87 # Host lookup timed out. E_UNDEF=88 # Some other (undefined) error. HOSTWAIT=10 # Specify up to 10 seconds for host query reply. # The actual wait may be a bit longer. OUTFILE=whois.txt # Output file. PORT=4321 if [ -z &quot;$1&quot; ] # Check for (required) command-line arg. then echo &quot;Usage: $0 domain name or IP address&quot; exit $E_BADARGS fi if [[ &quot;$1&quot; =~ [a-zA-Z][a-zA-Z]$ ]] # Ends in two alpha chars? then # It's a domain name &amp;&amp; #+ must do host lookup. IPADDR=$(host -W $HOSTWAIT $1 | awk '{print $4}') # Doing host lookup #+ to get IP address. # Extract final field. else IPADDR=&quot;$1&quot; # Command-line arg was IP address. fi echo; echo &quot;IP Address is: &quot;$IPADDR&quot;&quot;; echo if [ -e &quot;$OUTFILE&quot; ] then rm -f &quot;$OUTFILE&quot; echo &quot;Stale output file \&quot;$OUTFILE\&quot; removed.&quot;; echo fi # Sanity checks. # (This section needs more work.) # =============================== if [ -z &quot;$IPADDR&quot; ] # No response. then echo &quot;Host not found!&quot; exit $E_NOHOST # Bail out. fi if [[ &quot;$IPADDR&quot; =~ ^[;;] ]] # ;; Connection timed out; no servers could be reached. then echo &quot;Host lookup timed out!&quot; exit $E_TIMEOUT # Bail out. fi if [[ &quot;$IPADDR&quot; =~ [(NXDOMAIN)]$ ]] # Host xxxxxxxxx.xxx not found: 3(NXDOMAIN) then echo &quot;Host not found!&quot; exit $E_NOHOST # Bail out. fi if [[ &quot;$IPADDR&quot; =~ [(SERVFAIL)]$ ]] # Host xxxxxxxxx.xxx not found: 2(SERVFAIL) then echo &quot;Host not found!&quot; exit $E_NOHOST # Bail out. fi # ======================== Main body of script ======================== AFRINICquery() { # Define the function that queries AFRINIC. Echo a notification to the #+ screen, and then run the actual query, redirecting output to $OUTFILE. echo &quot;Searching for $IPADDR in whois.afrinic.net&quot; whois -h whois.afrinic.net &quot;$IPADDR&quot; &gt; $OUTFILE # Check for presence of reference to an rwhois. # Warn about non-functional rwhois.infosat.net server #+ and attempt rwhois query. if grep -e &quot;^remarks: .*rwhois\.[^ ]\+&quot; &quot;$OUTFILE&quot; then echo &quot; &quot; &gt;&gt; $OUTFILE echo &quot;***&quot; &gt;&gt; $OUTFILE echo &quot;***&quot; &gt;&gt; $OUTFILE echo &quot;Warning: rwhois.infosat.net was not working \ as of 2005/02/02&quot; &gt;&gt; $OUTFILE echo &quot; when this script was written.&quot; &gt;&gt; $OUTFILE echo &quot;***&quot; &gt;&gt; $OUTFILE echo &quot;***&quot; &gt;&gt; $OUTFILE echo &quot; &quot; &gt;&gt; $OUTFILE RWHOIS=`grep &quot;^remarks: .*rwhois\.[^ ]\+&quot; &quot;$OUTFILE&quot; | tail -n 1 |\ sed &quot;s/\(^.*\)\(rwhois\..*\)\(:4.*\)/\2/&quot;` whois -h ${RWHOIS}:${PORT} &quot;$IPADDR&quot; &gt;&gt; $OUTFILE fi } APNICquery() { echo &quot;Searching for $IPADDR in whois.apnic.net&quot; whois -h whois.apnic.net &quot;$IPADDR&quot; &gt; $OUTFILE # Just about every country has its own internet registrar. # I don't normally bother consulting them, because the regional registry #+ usually supplies sufficient information. # There are a few exceptions, where the regional registry simply #+ refers to the national registry for direct data. # These are Japan and South Korea in APNIC, and Brasil in LACNIC. # The following if statement checks $OUTFILE (whois.txt) for the presence #+ of &quot;KR&quot; (South Korea) or &quot;JP&quot; (Japan) in the country field. # If either is found, the query is re-run against the appropriate #+ national registry. if grep -E &quot;^country:[ ]+KR$&quot; &quot;$OUTFILE&quot; then echo &quot;Searching for $IPADDR in whois.krnic.net&quot; whois -h whois.krnic.net &quot;$IPADDR&quot; &gt;&gt; $OUTFILE elif grep -E &quot;^country:[ ]+JP$&quot; &quot;$OUTFILE&quot; then echo &quot;Searching for $IPADDR in whois.nic.ad.jp&quot; whois -h whois.nic.ad.jp &quot;$IPADDR&quot;/e &gt;&gt; $OUTFILE fi } ARINquery() { echo &quot;Searching for $IPADDR in whois.arin.net&quot; whois -h whois.arin.net &quot;$IPADDR&quot; &gt; $OUTFILE # Several large internet providers listed by ARIN have their own #+ internal whois service, referred to as &quot;rwhois&quot;. # A large block of IP addresses is listed with the provider #+ under the ARIN registry. # To get the IP addresses of 2nd-level ISPs or other large customers, #+ one has to refer to the rwhois server on port 4321. # I originally started with a bunch of &quot;if&quot; statements checking for #+ the larger providers. # This approach is unwieldy, and there's always another rwhois server #+ that I didn't know about. # A more elegant approach is to check $OUTFILE for a reference #+ to a whois server, parse that server name out of the comment section, #+ and re-run the query against the appropriate rwhois server. # The parsing looks a bit ugly, with a long continued line inside #+ backticks. # But it only has to be done once, and will work as new servers are added. #@ ABS Guide author comment: it isn't all that ugly, and is, in fact, #@+ an instructive use of Regular Expressions. if grep -E &quot;^Comment: .*rwhois.[^ ]+&quot; &quot;$OUTFILE&quot; then RWHOIS=`grep -e &quot;^Comment:.*rwhois\.[^ ]\+&quot; &quot;$OUTFILE&quot; | tail -n 1 |\ sed &quot;s/^\(.*\)\(rwhois\.[^ ]\+\)\(.*$\)/\2/&quot;` echo &quot;Searching for $IPADDR in ${RWHOIS}&quot; whois -h ${RWHOIS}:${PORT} &quot;$IPADDR&quot; &gt;&gt; $OUTFILE fi } LACNICquery() { echo &quot;Searching for $IPADDR in whois.lacnic.net&quot; whois -h whois.lacnic.net &quot;$IPADDR&quot; &gt; $OUTFILE # The following if statement checks $OUTFILE (whois.txt) for #+ the presence of &quot;BR&quot; (Brasil) in the country field. # If it is found, the query is re-run against whois.registro.br. if grep -E &quot;^country:[ ]+BR$&quot; &quot;$OUTFILE&quot; then echo &quot;Searching for $IPADDR in whois.registro.br&quot; whois -h whois.registro.br &quot;$IPADDR&quot; &gt;&gt; $OUTFILE fi } RIPEquery() { echo &quot;Searching for $IPADDR in whois.ripe.net&quot; whois -h whois.ripe.net &quot;$IPADDR&quot; &gt; $OUTFILE } # Initialize a few variables. # * slash8 is the most significant octet # * slash16 consists of the two most significant octets # * octet2 is the second most significant octet slash8=`echo $IPADDR | cut -d. -f 1` if [ -z &quot;$slash8&quot; ] # Yet another sanity check. then echo &quot;Undefined error!&quot; exit $E_UNDEF fi slash16=`echo $IPADDR | cut -d. -f 1-2` # ^ Period specified as 'cut&quot; delimiter. if [ -z &quot;$slash16&quot; ] then echo &quot;Undefined error!&quot; exit $E_UNDEF fi octet2=`echo $slash16 | cut -d. -f 2` if [ -z &quot;$octet2&quot; ] then echo &quot;Undefined error!&quot; exit $E_UNDEF fi # Check for various odds and ends of reserved space. # There is no point in querying for those addresses. if [ $slash8 == 0 ]; then echo $IPADDR is '&quot;This Network&quot;' space\; Not querying elif [ $slash8 == 10 ]; then echo $IPADDR is RFC1918 space\; Not querying elif [ $slash8 == 14 ]; then echo $IPADDR is '&quot;Public Data Network&quot;' space\; Not querying elif [ $slash8 == 127 ]; then echo $IPADDR is loopback space\; Not querying elif [ $slash16 == 169.254 ]; then echo $IPADDR is link-local space\; Not querying elif [ $slash8 == 172 ] &amp;&amp; [ $octet2 -ge 16 ] &amp;&amp; [ $octet2 -le 31 ];then echo $IPADDR is RFC1918 space\; Not querying elif [ $slash16 == 192.168 ]; then echo $IPADDR is RFC1918 space\; Not querying elif [ $slash8 -ge 224 ]; then echo $IPADDR is either Multicast or reserved space\; Not querying elif [ $slash8 -ge 200 ] &amp;&amp; [ $slash8 -le 201 ]; then LACNICquery &quot;$IPADDR&quot; elif [ $slash8 -ge 202 ] &amp;&amp; [ $slash8 -le 203 ]; then APNICquery &quot;$IPADDR&quot; elif [ $slash8 -ge 210 ] &amp;&amp; [ $slash8 -le 211 ]; then APNICquery &quot;$IPADDR&quot; elif [ $slash8 -ge 218 ] &amp;&amp; [ $slash8 -le 223 ]; then APNICquery &quot;$IPADDR&quot; # If we got this far without making a decision, query ARIN. # If a reference is found in $OUTFILE to APNIC, AFRINIC, LACNIC, or RIPE, #+ query the appropriate whois server. else ARINquery &quot;$IPADDR&quot; if grep &quot;whois.afrinic.net&quot; &quot;$OUTFILE&quot;; then AFRINICquery &quot;$IPADDR&quot; elif grep -E &quot;^OrgID:[ ]+RIPE$&quot; &quot;$OUTFILE&quot;; then RIPEquery &quot;$IPADDR&quot; elif grep -E &quot;^OrgID:[ ]+APNIC$&quot; &quot;$OUTFILE&quot;; then APNICquery &quot;$IPADDR&quot; elif grep -E &quot;^OrgID:[ ]+LACNIC$&quot; &quot;$OUTFILE&quot;; then LACNICquery &quot;$IPADDR&quot; fi fi #@ --------------------------------------------------------------- # Try also: # wget http://logi.cc/nw/whois.php3?ACTION=doQuery&amp;DOMAIN=$IPADDR #@ --------------------------------------------------------------- # We've now finished the querying. # Echo a copy of the final result to the screen. cat $OUTFILE # Or &quot;less $OUTFILE&quot; . . . exit 0 #@ ABS Guide author comments: #@ Nothing fancy here, but still a very useful tool for hunting spammers. #@ Sure, the script can be cleaned up some, and it's still a bit buggy, #@+ (exercise for reader), but all the same, it's a nice piece of coding #@+ by Walter Dnes. #@ Thank you! &quot;Little Monster's&quot; front end to wget. Example A-30. Making wget easier to use #!/bin/bash # wgetter2.bash # Author: Little Monster [monster@monstruum.co.uk] # ==&gt; Used in ABS Guide with permission of script author. # ==&gt; This script still needs debugging and fixups (exercise for reader). # ==&gt; It could also use some additional editing in the comments. # This is wgetter2 -- #+ a Bash script to make wget a bit more friendly, and save typing. # Carefully crafted by Little Monster. # More or less complete on 02/02/2005. # If you think this script can be improved, #+ email me at: monster@monstruum.co.uk # ==&gt; and cc: to the author of the ABS Guide, please. # This script is licenced under the GPL. # You are free to copy, alter and re-use it, #+ but please don't try to claim you wrote it. # Log your changes here instead. # ======================================================================= # changelog: # 07/02/2005. Fixups by Little Monster. # 02/02/2005. Minor additions by Little Monster. # (See after # +++++++++++ ) # 29/01/2005. Minor stylistic edits and cleanups by author of ABS Guide. # Added exit error codes. # 22/11/2004. Finished initial version of second version of wgetter: # wgetter2 is born. # 01/12/2004. Changed 'runn' function so it can be run 2 ways -- # either ask for a file name or have one input on the CL. # 01/12/2004. Made sensible handling of no URL's given. # 01/12/2004. Made loop of main options, so you don't # have to keep calling wgetter 2 all the time. # Runs as a session instead. # 01/12/2004. Added looping to 'runn' function. # Simplified and improved. # 01/12/2004. Added state to recursion setting. # Enables re-use of previous value. # 05/12/2004. Modified the file detection routine in the 'runn' function # so it's not fooled by empty values, and is cleaner. # 01/02/2004. Added cookie finding routine from later version (which # isn't ready yet), so as not to have hard-coded paths. # ======================================================================= # Error codes for abnormal exit. E_USAGE=67 # Usage message, then quit. E_NO_OPTS=68 # No command-line args entered. E_NO_URLS=69 # No URLs passed to script. E_NO_SAVEFILE=70 # No save filename passed to script. E_USER_EXIT=71 # User decides to quit. # Basic default wget command we want to use. # This is the place to change it, if required. # NB: if using a proxy, set http_proxy = yourproxy in .wgetrc. # Otherwise delete --proxy=on, below. # ==================================================================== CommandA=&quot;wget -nc -c -t 5 --progress=bar --random-wait --proxy=on -r&quot; # ==================================================================== # -------------------------------------------------------------------- # Set some other variables and explain them. pattern=&quot; -A .jpg,.JPG,.jpeg,.JPEG,.gif,.GIF,.htm,.html,.shtml,.php&quot; # wget's option to only get certain types of file. # comment out if not using today=`date +%F` # Used for a filename. home=$HOME # Set HOME to an internal variable. # In case some other path is used, change it here. depthDefault=3 # Set a sensible default recursion. Depth=$depthDefault # Otherwise user feedback doesn't tie in properly. RefA=&quot;&quot; # Set blank referring page. Flag=&quot;&quot; # Default to not saving anything, #+ or whatever else might be wanted in future. lister=&quot;&quot; # Used for passing a list of urls directly to wget. Woptions=&quot;&quot; # Used for passing wget some options for itself. inFile=&quot;&quot; # Used for the run function. newFile=&quot;&quot; # Used for the run function. savePath=&quot;$home/w-save&quot; Config=&quot;$home/.wgetter2rc&quot; # This is where some variables can be stored, #+ if permanently changed from within the script. Cookie_List=&quot;$home/.cookielist&quot; # So we know where the cookies are kept . . . cFlag=&quot;&quot; # Part of the cookie file selection routine. # Define the options available. Easy to change letters here if needed. # These are the optional options; you don't just wait to be asked. save=s # Save command instead of executing it. cook=c # Change cookie file for this session. help=h # Usage guide. list=l # Pass wget the -i option and URL list. runn=r # Run saved commands as an argument to the option. inpu=i # Run saved commands interactively. wopt=w # Allow to enter options to pass directly to wget. # -------------------------------------------------------------------- if [ -z &quot;$1&quot; ]; then # Make sure we get something for wget to eat. echo &quot;You must at least enter a URL or option!&quot; echo &quot;-$help for usage.&quot; exit $E_NO_OPTS fi # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ # added added added added added added added added added added added added if [ ! -e &quot;$Config&quot; ]; then # See if configuration file exists. echo &quot;Creating configuration file, $Config&quot; echo &quot;# This is the configuration file for wgetter2&quot; &gt; &quot;$Config&quot; echo &quot;# Your customised settings will be saved in this file&quot; &gt;&gt; &quot;$Config&quot; else source $Config # Import variables we set outside the script. fi if [ ! -e &quot;$Cookie_List&quot; ]; then # Set up a list of cookie files, if there isn't one. echo &quot;Hunting for cookies . . .&quot; find -name cookies.txt &gt;&gt; $Cookie_List # Create the list of cookie files. fi # Isolate this in its own 'if' statement, #+ in case we got interrupted while searching. if [ -z &quot;$cFlag&quot; ]; then # If we haven't already done this . . . echo # Make a nice space after the command prompt. echo &quot;Looks like you haven't set up your source of cookies yet.&quot; n=0 # Make sure the counter #+ doesn't contain random values. while read; do Cookies[$n]=$REPLY # Put the cookie files we found into an array. echo &quot;$n) ${Cookies[$n]}&quot; # Create a menu. n=$(( n + 1 )) # Increment the counter. done &lt; $Cookie_List # Feed the read statement. echo &quot;Enter the number of the cookie file you want to use.&quot; echo &quot;If you won't be using cookies, just press RETURN.&quot; echo echo &quot;I won't be asking this again. Edit $Config&quot; echo &quot;If you decide to change at a later date&quot; echo &quot;or use the -${cook} option for per session changes.&quot; read if [ ! -z $REPLY ]; then # User didn't just press return. Cookie=&quot; --load-cookies ${Cookies[$REPLY]}&quot; # Set the variable here as well as in the config file. echo &quot;Cookie=\&quot; --load-cookies ${Cookies[$REPLY]}\&quot;&quot; &gt;&gt; $Config fi echo &quot;cFlag=1&quot; &gt;&gt; $Config # So we know not to ask again. fi # end added section end added section end added section end added section # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ # Another variable. # This one may or may not be subject to variation. # A bit like the small print. CookiesON=$Cookie # echo &quot;cookie file is $CookiesON&quot; # For debugging. # echo &quot;home is ${home}&quot; # For debugging. # Got caught with this one! wopts() { echo &quot;Enter options to pass to wget.&quot; echo &quot;It is assumed you know what you're doing.&quot; echo echo &quot;You can pass their arguments here too.&quot; # That is to say, everything passed here is passed to wget. read Wopts # Read in the options to be passed to wget. Woptions=&quot; $Wopts&quot; # ^ Why the leading space? # Assign to another variable. # Just for fun, or something . . . echo &quot;passing options ${Wopts} to wget&quot; # Mainly for debugging. # Is cute. return } save_func() { echo &quot;Settings will be saved.&quot; if [ ! -d $savePath ]; then # See if directory exists. mkdir $savePath # Create the directory to save things in #+ if it isn't already there. fi Flag=S # Tell the final bit of code what to do. # Set a flag since stuff is done in main. return } usage() # Tell them how it works. { echo &quot;Welcome to wgetter. This is a front end to wget.&quot; echo &quot;It will always run wget with these options:&quot; echo &quot;$CommandA&quot; echo &quot;and the pattern to match: $pattern \ (which you can change at the top of this script).&quot; echo &quot;It will also ask you for recursion depth, \ and if you want to use a referring page.&quot; echo &quot;Wgetter accepts the following options:&quot; echo &quot;&quot; echo &quot;-$help : Display this help.&quot; echo &quot;-$save : Save the command to a file $savePath/wget-($today) \ instead of running it.&quot; echo &quot;-$runn : Run saved wget commands instead of starting a new one -&quot; echo &quot;Enter filename as argument to this option.&quot; echo &quot;-$inpu : Run saved wget commands interactively --&quot; echo &quot;The script will ask you for the filename.&quot; echo &quot;-$cook : Change the cookies file for this session.&quot; echo &quot;-$list : Tell wget to use URL's from a list instead of \ from the command-line.&quot; echo &quot;-$wopt : Pass any other options direct to wget.&quot; echo &quot;&quot; echo &quot;See the wget man page for additional options \ you can pass to wget.&quot; echo &quot;&quot; exit $E_USAGE # End here. Don't process anything else. } list_func() # Gives the user the option to use the -i option to wget, #+ and a list of URLs. { while [ 1 ]; do echo &quot;Enter the name of the file containing URL's (press q to change your mind).&quot; read urlfile if [ ! -e &quot;$urlfile&quot; ] &amp;&amp; [ &quot;$urlfile&quot; != q ]; then # Look for a file, or the quit option. echo &quot;That file does not exist!&quot; elif [ &quot;$urlfile&quot; = q ]; then # Check quit option. echo &quot;Not using a url list.&quot; return else echo &quot;using $urlfile.&quot; echo &quot;If you gave url's on the command-line, I'll use those first.&quot; # Report wget standard behaviour to the user. lister=&quot; -i $urlfile&quot; # This is what we want to pass to wget. return fi done } cookie_func() # Give the user the option to use a different cookie file. { while [ 1 ]; do echo &quot;Change the cookies file. Press return if you don't want to change it.&quot; read Cookies # NB: this is not the same as Cookie, earlier. # There is an 's' on the end. # Bit like chocolate chips. if [ -z &quot;$Cookies&quot; ]; then # Escape clause for wusses. return elif [ ! -e &quot;$Cookies&quot; ]; then echo &quot;File does not exist. Try again.&quot; # Keep em going . . . else CookiesON=&quot; --load-cookies $Cookies&quot; # File is good -- use it! return fi done } run_func() { if [ -z &quot;$OPTARG&quot; ]; then # Test to see if we used the in-line option or the query one. if [ ! -d &quot;$savePath&quot; ]; then # If directory doesn't exist . . . echo &quot;$savePath does not appear to exist.&quot; echo &quot;Please supply path and filename of saved wget commands:&quot; read newFile until [ -f &quot;$newFile&quot; ]; do # Keep going till we get something. echo &quot;Sorry, that file does not exist. Please try again.&quot; # Try really hard to get something. read newFile done # ----------------------------------------------------------------------- # if [ -z ( grep wget ${newfile} ) ]; then # Assume they haven't got the right file and bail out. # echo &quot;Sorry, that file does not contain wget commands. Aborting.&quot; # exit # fi # # This is bogus code. # It doesn't actually work. # If anyone wants to fix it, feel free! # ----------------------------------------------------------------------- filePath=&quot;${newFile}&quot; else echo &quot;Save path is $savePath&quot; echo &quot;Please enter name of the file which you want to use.&quot; echo &quot;You have a choice of:&quot; ls $savePath # Give them a choice. read inFile until [ -f &quot;$savePath/$inFile&quot; ]; do # Keep going till #+ we get something. if [ ! -f &quot;${savePath}/${inFile}&quot; ]; then # If file doesn't exist. echo &quot;Sorry, that file does not exist. Please choose from:&quot; ls $savePath # If a mistake is made. read inFile fi done filePath=&quot;${savePath}/${inFile}&quot; # Make one variable . . . fi else filePath=&quot;${savePath}/${OPTARG}&quot; # Which can be many things . . . fi if [ ! -f &quot;$filePath&quot; ]; then # If a bogus file got through. echo &quot;You did not specify a suitable file.&quot; echo &quot;Run this script with the -${save} option first.&quot; echo &quot;Aborting.&quot; exit $E_NO_SAVEFILE fi echo &quot;Using: $filePath&quot; while read; do eval $REPLY echo &quot;Completed: $REPLY&quot; done &lt; $filePath # Feed the actual file we are using into a 'while' loop. exit } # Fish out any options we are using for the script. # This is based on the demo in &quot;Learning The Bash Shell&quot; (O'Reilly). while getopts &quot;:$save$cook$help$list$runn:$inpu$wopt&quot; opt do case $opt in $save) save_func;; # Save some wgetter sessions for later. $cook) cookie_func;; # Change cookie file. $help) usage;; # Get help. $list) list_func;; # Allow wget to use a list of URLs. $runn) run_func;; # Useful if you are calling wgetter from, #+ for example, a cron script. $inpu) run_func;; # When you don't know what your files are named. $wopt) wopts;; # Pass options directly to wget. \?) echo &quot;Not a valid option.&quot; echo &quot;Use -${wopt} to pass options directly to wget,&quot; echo &quot;or -${help} for help&quot;;; # Catch anything else. esac done shift $((OPTIND - 1)) # Do funky magic stuff with $#. if [ -z &quot;$1&quot; ] &amp;&amp; [ -z &quot;$lister&quot; ]; then # We should be left with at least one URL #+ on the command-line, unless a list is #+ being used -- catch empty CL's. echo &quot;No URL's given! You must enter them on the same line as wgetter2.&quot; echo &quot;E.g., wgetter2 http://somesite http://anothersite.&quot; echo &quot;Use $help option for more information.&quot; exit $E_NO_URLS # Bail out, with appropriate error code. fi URLS=&quot; $@&quot; # Use this so that URL list can be changed if we stay in the option loop. while [ 1 ]; do # This is where we ask for the most used options. # (Mostly unchanged from version 1 of wgetter) if [ -z $curDepth ]; then Current=&quot;&quot; else Current=&quot; Current value is $curDepth&quot; fi echo &quot;How deep should I go? \ (integer: Default is $depthDefault.$Current)&quot; read Depth # Recursion -- how far should we go? inputB=&quot;&quot; # Reset this to blank on each pass of the loop. echo &quot;Enter the name of the referring page (default is none).&quot; read inputB # Need this for some sites. echo &quot;Do you want to have the output logged to the terminal&quot; echo &quot;(y/n, default is yes)?&quot; read noHide # Otherwise wget will just log it to a file. case $noHide in # Now you see me, now you don't. y|Y ) hide=&quot;&quot;;; n|N ) hide=&quot; -b&quot;;; * ) hide=&quot;&quot;;; esac if [ -z ${Depth} ]; then # User accepted either default or current depth, #+ in which case Depth is now empty. if [ -z ${curDepth} ]; then # See if a depth was set on a previous iteration. Depth=&quot;$depthDefault&quot; # Set the default recursion depth if nothing #+ else to use. else Depth=&quot;$curDepth&quot; # Otherwise, set the one we used before. fi fi Recurse=&quot; -l $Depth&quot; # Set how deep we want to go. curDepth=$Depth # Remember setting for next time. if [ ! -z $inputB ]; then RefA=&quot; --referer=$inputB&quot; # Option to use referring page. fi WGETTER=&quot;${CommandA}${pattern}${hide}${RefA}${Recurse}\ ${CookiesON}${lister}${Woptions}${URLS}&quot; # Just string the whole lot together . . . # NB: no embedded spaces. # They are in the individual elements so that if any are empty, #+ we don't get an extra space. if [ -z &quot;${CookiesON}&quot; ] &amp;&amp; [ &quot;$cFlag&quot; = &quot;1&quot; ] ; then echo &quot;Warning -- can't find cookie file&quot; # This should be changed, #+ in case the user has opted to not use cookies. fi if [ &quot;$Flag&quot; = &quot;S&quot; ]; then echo &quot;$WGETTER&quot; &gt;&gt; $savePath/wget-${today} # Create a unique filename for today, or append to it if it exists. echo &quot;$inputB&quot; &gt;&gt; $savePath/site-list-${today} # Make a list, so it's easy to refer back to, #+ since the whole command is a bit confusing to look at. echo &quot;Command saved to the file $savePath/wget-${today}&quot; # Tell the user. echo &quot;Referring page URL saved to the file$ \ savePath/site-list-${today}&quot; # Tell the user. Saver=&quot; with save option&quot; # Stick this somewhere, so it appears in the loop if set. else echo &quot;*****************&quot; echo &quot;*****Getting*****&quot; echo &quot;*****************&quot; echo &quot;&quot; echo &quot;$WGETTER&quot; echo &quot;&quot; echo &quot;*****************&quot; eval &quot;$WGETTER&quot; fi echo &quot;&quot; echo &quot;Starting over$Saver.&quot; echo &quot;If you want to stop, press q.&quot; echo &quot;Otherwise, enter some URL's:&quot; # Let them go again. Tell about save option being set. read case $REPLY in # Need to change this to a 'trap' clause. q|Q ) exit $E_USER_EXIT;; # Exercise for the reader? * ) URLS=&quot; $REPLY&quot;;; esac echo &quot;&quot; done exit 0 Example A-31. A podcasting script #!/bin/bash # bashpodder.sh: # By Linc 10/1/2004 # Find the latest script at #+ http://linc.homeunix.org:8080/scripts/bashpodder # Last revision 12/14/2004 - Many Contributors! # If you use this and have made improvements or have comments #+ drop me an email at linc dot fessenden at gmail dot com # I'd appreciate it! # ==&gt; ABS Guide extra comments. # ==&gt; Author of this script has kindly granted permission # ==&gt;+ for inclusion in ABS Guide. # ==&gt; ################################################################ # # ==&gt; What is &quot;podcasting&quot;? # ==&gt; It's broadcasting &quot;radio shows&quot; over the Internet. # ==&gt; These shows can be played on iPods and other music file players. # ==&gt; This script makes it possible. # ==&gt; See documentation at the script author's site, above. # ==&gt; ################################################################ # Make script crontab friendly: cd $(dirname $0) # ==&gt; Change to directory where this script lives. # datadir is the directory you want podcasts saved to: datadir=$(date +%Y-%m-%d) # ==&gt; Will create a date-labeled directory, named: YYYY-MM-DD # Check for and create datadir if necessary: if test ! -d $datadir then mkdir $datadir fi # Delete any temp file: rm -f temp.log # Read the bp.conf file and wget any url not already #+ in the podcast.log file: while read podcast do # ==&gt; Main action follows. file=$(wget -q $podcast -O - | tr '\r' '\n' | tr \' \&quot; | \ sed -n 's/.*url=&quot;\([^&quot;]*\)&quot;.*/\1/p') for url in $file do echo $url &gt;&gt; temp.log if ! grep &quot;$url&quot; podcast.log &gt; /dev/null then wget -q -P $datadir &quot;$url&quot; fi done done &lt; bp.conf # Move dynamically created log file to permanent log file: cat podcast.log &gt;&gt; temp.log sort temp.log | uniq &gt; podcast.log rm temp.log # Create an m3u playlist: ls $datadir | grep -v m3u &gt; $datadir/podcast.m3u exit 0 ################################################# For a different scripting approach to Podcasting, see Phil Salkie's article, &quot;Internet Radio to Podcast with Shell Tools&quot; in the September, 2005 issue of LINUX JOURNAL, http://www.linuxjournal.com/article/8171 ################################################# Example A-32. Nightly backup to a firewire HD #!/bin/bash # nightly-backup.sh # http://www.richardneill.org/source.php#nightly-backup-rsync # Copyright (c) 2005 Richard Neill &lt;backup@richardneill.org&gt;. # This is Free Software licensed under the GNU GPL. # ==&gt; Included in ABS Guide with script author's kind permission. # ==&gt; (Thanks!) # This does a backup from the host computer to a locally connected #+ firewire HDD using rsync and ssh. # (Script should work with USB-connected device (see lines 40-43). # It then rotates the backups. # Run it via cron every night at 5am. # This only backs up the home directory. # If ownerships (other than the user's) should be preserved, #+ then run the rsync process as root (and re-instate the -o). # We save every day for 7 days, then every week for 4 weeks, #+ then every month for 3 months. # See: http://www.mikerubel.org/computers/rsync_snapshots/ #+ for more explanation of the theory. # Save as: $HOME/bin/nightly-backup_firewire-hdd.sh # Known bugs: # ---------- # i) Ideally, we want to exclude ~/.tmp and the browser caches. # ii) If the user is sitting at the computer at 5am, #+ and files are modified while the rsync is occurring, #+ then the BACKUP_JUSTINCASE branch gets triggered. # To some extent, this is a #+ feature, but it also causes a &quot;disk-space leak&quot;. ##### BEGIN CONFIGURATION SECTION ############################################ LOCAL_USER=rjn # User whose home directory should be backed up. MOUNT_POINT=/backup # Mountpoint of backup drive. # NO trailing slash! # This must be unique (eg using a udev symlink) # MOUNT_POINT=/media/disk # For USB-connected device. SOURCE_DIR=/home/$LOCAL_USER # NO trailing slash - it DOES matter to rsync. BACKUP_DEST_DIR=$MOUNT_POINT/backup/`hostname -s`.${LOCAL_USER}.nightly_backup DRY_RUN=false #If true, invoke rsync with -n, to do a dry run. # Comment out or set to false for normal use. VERBOSE=false # If true, make rsync verbose. # Comment out or set to false otherwise. COMPRESS=false # If true, compress. # Good for internet, bad on LAN. # Comment out or set to false otherwise. ### Exit Codes ### E_VARS_NOT_SET=64 E_COMMANDLINE=65 E_MOUNT_FAIL=70 E_NOSOURCEDIR=71 E_UNMOUNTED=72 E_BACKUP=73 ##### END CONFIGURATION SECTION ############################################## # Check that all the important variables have been set: if [ -z &quot;$LOCAL_USER&quot; ] || [ -z &quot;$SOURCE_DIR&quot; ] || [ -z &quot;$MOUNT_POINT&quot; ] || [ -z &quot;$BACKUP_DEST_DIR&quot; ] then echo 'One of the variables is not set! Edit the file: $0. BACKUP FAILED.' exit $E_VARS_NOT_SET fi if [ &quot;$#&quot; != 0 ] # If command-line param(s) . . . then # Here document(ation). cat &lt;&lt;-ENDOFTEXT Automatic Nightly backup run from cron. Read the source for more details: $0 The backup directory is $BACKUP_DEST_DIR . It will be created if necessary; initialisation is no longer required. WARNING: Contents of $BACKUP_DEST_DIR are rotated. Directories named 'backup.\$i' will eventually be DELETED. We keep backups from every day for 7 days (1-8), then every week for 4 weeks (9-12), then every month for 3 months (13-15). You may wish to add this to your crontab using 'crontab -e' # Back up files: $SOURCE_DIR to $BACKUP_DEST_DIR #+ every night at 3:15 am 15 03 * * * /home/$LOCAL_USER/bin/nightly-backup_firewire-hdd.sh Don't forget to verify the backups are working, especially if you don't read cron's mail!&quot; ENDOFTEXT exit $E_COMMANDLINE fi # Parse the options. # ================== if [ &quot;$DRY_RUN&quot; == &quot;true&quot; ]; then DRY_RUN=&quot;-n&quot; echo &quot;WARNING:&quot; echo &quot;THIS IS A 'DRY RUN'!&quot; echo &quot;No data will actually be transferred!&quot; else DRY_RUN=&quot;&quot; fi if [ &quot;$VERBOSE&quot; == &quot;true&quot; ]; then VERBOSE=&quot;-v&quot; else VERBOSE=&quot;&quot; fi if [ &quot;$COMPRESS&quot; == &quot;true&quot; ]; then COMPRESS=&quot;-z&quot; else COMPRESS=&quot;&quot; fi # Every week (actually of 8 days) and every month, #+ extra backups are preserved. DAY_OF_MONTH=`date +%d` # Day of month (01..31). if [ $DAY_OF_MONTH = 01 ]; then # First of month. MONTHSTART=true elif [ $DAY_OF_MONTH = 08 \ -o $DAY_OF_MONTH = 16 \ -o $DAY_OF_MONTH = 24 ]; then # Day 8,16,24 (use 8, not 7 to better handle 31-day months) WEEKSTART=true fi # Check that the HDD is mounted. # At least, check that *something* is mounted here! # We can use something unique to the device, rather than just guessing #+ the scsi-id by having an appropriate udev rule in #+ /etc/udev/rules.d/10-rules.local #+ and by putting a relevant entry in /etc/fstab. # Eg: this udev rule: # BUS=&quot;scsi&quot;, KERNEL=&quot;sd*&quot;, SYSFS{vendor}=&quot;WDC WD16&quot;, # SYSFS{model}=&quot;00JB-00GVA0 &quot;, NAME=&quot;%k&quot;, SYMLINK=&quot;lacie_1394d%n&quot; if mount | grep $MOUNT_POINT &gt;/dev/null; then echo &quot;Mount point $MOUNT_POINT is indeed mounted. OK&quot; else echo -n &quot;Attempting to mount $MOUNT_POINT...&quot; # If it isn't mounted, try to mount it. sudo mount $MOUNT_POINT 2&gt;/dev/null if mount | grep $MOUNT_POINT &gt;/dev/null; then UNMOUNT_LATER=TRUE echo &quot;OK&quot; # Note: Ensure that this is also unmounted #+ if we exit prematurely with failure. else echo &quot;FAILED&quot; echo -e &quot;Nothing is mounted at $MOUNT_POINT. BACKUP FAILED!&quot; exit $E_MOUNT_FAIL fi fi # Check that source dir exists and is readable. if [ ! -r $SOURCE_DIR ] ; then echo &quot;$SOURCE_DIR does not exist, or cannot be read. BACKUP FAILED.&quot; exit $E_NOSOURCEDIR fi # Check that the backup directory structure is as it should be. # If not, create it. # Create the subdirectories. # Note that backup.0 will be created as needed by rsync. for ((i=1;i&lt;=15;i++)); do if [ ! -d $BACKUP_DEST_DIR/backup.$i ]; then if /bin/mkdir -p $BACKUP_DEST_DIR/backup.$i ; then # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ No [ ] test brackets. Why? echo &quot;Warning: directory $BACKUP_DEST_DIR/backup.$i is missing,&quot; echo &quot;or was not initialised. (Re-)creating it.&quot; else echo &quot;ERROR: directory $BACKUP_DEST_DIR/backup.$i&quot; echo &quot;is missing and could not be created.&quot; if [ &quot;$UNMOUNT_LATER&quot; == &quot;TRUE&quot; ]; then # Before we exit, unmount the mount point if necessary. cd sudo umount $MOUNT_POINT &amp;&amp; echo &quot;Unmounted $MOUNT_POINT again. Giving up.&quot; fi exit $E_UNMOUNTED fi fi done # Set the permission to 700 for security #+ on an otherwise permissive multi-user system. if ! /bin/chmod 700 $BACKUP_DEST_DIR ; then echo &quot;ERROR: Could not set permissions on $BACKUP_DEST_DIR to 700.&quot; if [ &quot;$UNMOUNT_LATER&quot; == &quot;TRUE&quot; ]; then # Before we exit, unmount the mount point if necessary. cd ; sudo umount $MOUNT_POINT \ &amp;&amp; echo &quot;Unmounted $MOUNT_POINT again. Giving up.&quot; fi exit $E_UNMOUNTED fi # Create the symlink: current -&gt; backup.1 if required. # A failure here is not critical. cd $BACKUP_DEST_DIR if [ ! -h current ] ; then if ! /bin/ln -s backup.1 current ; then echo &quot;WARNING: could not create symlink current -&gt; backup.1&quot; fi fi # Now, do the rsync. echo &quot;Now doing backup with rsync...&quot; echo &quot;Source dir: $SOURCE_DIR&quot; echo -e &quot;Backup destination dir: $BACKUP_DEST_DIR\n&quot; /usr/bin/rsync $DRY_RUN $VERBOSE -a -S --delete --modify-window=60 \ --link-dest=../backup.1 $SOURCE_DIR $BACKUP_DEST_DIR/backup.0/ # Only warn, rather than exit if the rsync failed, #+ since it may only be a minor problem. # E.g., if one file is not readable, rsync will fail. # This shouldn't prevent the rotation. # Not using, e.g., `date +%a` since these directories #+ are just full of links and don't consume *that much* space. if [ $? != 0 ]; then BACKUP_JUSTINCASE=backup.`date +%F_%T`.justincase echo &quot;WARNING: the rsync process did not entirely succeed.&quot; echo &quot;Something might be wrong.&quot; echo &quot;Saving an extra copy at: $BACKUP_JUSTINCASE&quot; echo &quot;WARNING: if this occurs regularly, a LOT of space will be consumed,&quot; echo &quot;even though these are just hard-links!&quot; fi # Save a readme in the backup parent directory. # Save another one in the recent subdirectory. echo &quot;Backup of $SOURCE_DIR on `hostname` was last run on \ `date`&quot; &gt; $BACKUP_DEST_DIR/README.txt echo &quot;This backup of $SOURCE_DIR on `hostname` was created on \ `date`&quot; &gt; $BACKUP_DEST_DIR/backup.0/README.txt # If we are not in a dry run, rotate the backups. [ -z &quot;$DRY_RUN&quot; ] &amp;&amp; # Check how full the backup disk is. # Warn if 90%. if 98% or more, we'll probably fail, so give up. # (Note: df can output to more than one line.) # We test this here, rather than before #+ so that rsync may possibly have a chance. DISK_FULL_PERCENT=`/bin/df $BACKUP_DEST_DIR | tr &quot;\n&quot; ' ' | awk '{print $12}' | grep -oE [0-9]+ ` echo &quot;Disk space check on backup partition \ $MOUNT_POINT $DISK_FULL_PERCENT% full.&quot; if [ $DISK_FULL_PERCENT -gt 90 ]; then echo &quot;Warning: Disk is greater than 90% full.&quot; fi if [ $DISK_FULL_PERCENT -gt 98 ]; then echo &quot;Error: Disk is full! Giving up.&quot; if [ &quot;$UNMOUNT_LATER&quot; == &quot;TRUE&quot; ]; then # Before we exit, unmount the mount point if necessary. cd; sudo umount $MOUNT_POINT &amp;&amp; echo &quot;Unmounted $MOUNT_POINT again. Giving up.&quot; fi exit $E_UNMOUNTED fi # Create an extra backup. # If this copy fails, give up. if [ -n &quot;$BACKUP_JUSTINCASE&quot; ]; then if ! /bin/cp -al $BACKUP_DEST_DIR/backup.0 \ $BACKUP_DEST_DIR/$BACKUP_JUSTINCASE then echo &quot;ERROR: Failed to create extra copy \ $BACKUP_DEST_DIR/$BACKUP_JUSTINCASE&quot; if [ &quot;$UNMOUNT_LATER&quot; == &quot;TRUE&quot; ]; then # Before we exit, unmount the mount point if necessary. cd ;sudo umount $MOUNT_POINT &amp;&amp; echo &quot;Unmounted $MOUNT_POINT again. Giving up.&quot; fi exit $E_UNMOUNTED fi fi # At start of month, rotate the oldest 8. if [ &quot;$MONTHSTART&quot; == &quot;true&quot; ]; then echo -e &quot;\nStart of month. \ Removing oldest backup: $BACKUP_DEST_DIR/backup.15&quot; &amp;&amp; /bin/rm -rf $BACKUP_DEST_DIR/backup.15 &amp;&amp; echo &quot;Rotating monthly,weekly backups: \ $BACKUP_DEST_DIR/backup.[8-14] -&gt; $BACKUP_DEST_DIR/backup.[9-15]&quot; &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.14 $BACKUP_DEST_DIR/backup.15 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.13 $BACKUP_DEST_DIR/backup.14 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.12 $BACKUP_DEST_DIR/backup.13 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.11 $BACKUP_DEST_DIR/backup.12 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.10 $BACKUP_DEST_DIR/backup.11 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.9 $BACKUP_DEST_DIR/backup.10 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.8 $BACKUP_DEST_DIR/backup.9 # At start of week, rotate the second-oldest 4. elif [ &quot;$WEEKSTART&quot; == &quot;true&quot; ]; then echo -e &quot;\nStart of week. \ Removing oldest weekly backup: $BACKUP_DEST_DIR/backup.12&quot; &amp;&amp; /bin/rm -rf $BACKUP_DEST_DIR/backup.12 &amp;&amp; echo &quot;Rotating weekly backups: \ $BACKUP_DEST_DIR/backup.[8-11] -&gt; $BACKUP_DEST_DIR/backup.[9-12]&quot; &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.11 $BACKUP_DEST_DIR/backup.12 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.10 $BACKUP_DEST_DIR/backup.11 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.9 $BACKUP_DEST_DIR/backup.10 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.8 $BACKUP_DEST_DIR/backup.9 else echo -e &quot;\nRemoving oldest daily backup: $BACKUP_DEST_DIR/backup.8&quot; &amp;&amp; /bin/rm -rf $BACKUP_DEST_DIR/backup.8 fi &amp;&amp; # Every day, rotate the newest 8. echo &quot;Rotating daily backups: \ $BACKUP_DEST_DIR/backup.[1-7] -&gt; $BACKUP_DEST_DIR/backup.[2-8]&quot; &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.7 $BACKUP_DEST_DIR/backup.8 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.6 $BACKUP_DEST_DIR/backup.7 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.5 $BACKUP_DEST_DIR/backup.6 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.4 $BACKUP_DEST_DIR/backup.5 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.3 $BACKUP_DEST_DIR/backup.4 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.2 $BACKUP_DEST_DIR/backup.3 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.1 $BACKUP_DEST_DIR/backup.2 &amp;&amp; /bin/mv $BACKUP_DEST_DIR/backup.0 $BACKUP_DEST_DIR/backup.1 &amp;&amp; SUCCESS=true if [ &quot;$UNMOUNT_LATER&quot; == &quot;TRUE&quot; ]; then # Unmount the mount point if it wasn't mounted to begin with. cd ; sudo umount $MOUNT_POINT &amp;&amp; echo &quot;Unmounted $MOUNT_POINT again.&quot; fi if [ &quot;$SUCCESS&quot; == &quot;true&quot; ]; then echo 'SUCCESS!' exit 0 fi # Should have already exited if backup worked. echo 'BACKUP FAILED! Is this just a dry run? Is the disk full?) ' exit $E_BACKUP Example A-33. An expanded cd command ########################################################################### # # cdll # by Phil Braham # # ############################################ # Latest version of this script available from # http://freshmeat.net/projects/cd/ # ############################################ # # .cd_new # # An enhancement of the Unix cd command # # There are unlimited stack entries and special entries. The stack # entries keep the last cd_maxhistory # directories that have been used. The special entries can be # assigned to commonly used directories. # # The special entries may be pre-assigned by setting the environment # variables CDSn or by using the -u or -U command. # # The following is a suggestion for the .profile file: # # . cdll # Set up the cd command # alias cd='cd_new' # Replace the cd command # cd -U # Upload pre-assigned entries for # #+ the stack and special entries # cd -D # Set non-default mode # alias @=&quot;cd_new @&quot; # Allow @ to be used to get history # # For help type: # # cd -h or # cd -H # # ########################################################################### # # Version 1.2.1 # # Written by Phil Braham - Realtime Software Pty Ltd # (realtime@mpx.com.au) # Please send any suggestions or enhancements to the author (also at # phil@braham.net) # ############################################################################ cd_hm () { ${PRINTF} &quot;%s&quot; &quot;cd [dir] [0-9] [@[s|h] [-g [&lt;dir&gt;]] [-d] \ [-D] [-r&lt;n&gt;] [dir|0-9] [-R&lt;n&gt;] [&lt;dir&gt;|0-9] [-s&lt;n&gt;] [-S&lt;n&gt;] [-u] [-U] [-f] [-F] [-h] [-H] [-v] &lt;dir&gt; Go to directory 0-n Go to previous directory (0 is previous, 1 is last but 1 etc) n is up to max history (default is 50) @ List history and special entries @h List history entries @s List special entries -g [&lt;dir&gt;] Go to literal name (bypass special names) This is to allow access to dirs called '0','1','-h' etc -d Change default action - verbose. (See note) -D Change default action - silent. (See note) -s&lt;n&gt; Go to the special entry &lt;n&gt;* -S&lt;n&gt; Go to the special entry &lt;n&gt; and replace it with the current dir* -r&lt;n&gt; [&lt;dir&gt;] Go to directory &lt;dir&gt; and then put it on special entry &lt;n&gt;* -R&lt;n&gt; [&lt;dir&gt;] Go to directory &lt;dir&gt; and put current dir on special entry &lt;n&gt;* -a&lt;n&gt; Alternative suggested directory. See note below. -f [&lt;file&gt;] File entries to &lt;file&gt;. -u [&lt;file&gt;] Update entries from &lt;file&gt;. If no filename supplied then default file (${CDPath}${2:-&quot;$CDFile&quot;}) is used -F and -U are silent versions -v Print version number -h Help -H Detailed help *The special entries (0 - 9) are held until log off, replaced by another entry or updated with the -u command Alternative suggested directories: If a directory is not found then CD will suggest any possibilities. These are directories starting with the same letters and if any are found they are listed prefixed with -a&lt;n&gt; where &lt;n&gt; is a number. It's possible to go to the directory by entering cd -a&lt;n&gt; on the command line. The directory for -r&lt;n&gt; or -R&lt;n&gt; may be a number. For example: $ cd -r3 4 Go to history entry 4 and put it on special entry 3 $ cd -R3 4 Put current dir on the special entry 3 and go to history entry 4 $ cd -s3 Go to special entry 3 Note that commands R,r,S and s may be used without a number and refer to 0: $ cd -s Go to special entry 0 $ cd -S Go to special entry 0 and make special entry 0 current dir $ cd -r 1 Go to history entry 1 and put it on special entry 0 $ cd -r Go to history entry 0 and put it on special entry 0 &quot; if ${TEST} &quot;$CD_MODE&quot; = &quot;PREV&quot; then ${PRINTF} &quot;$cd_mnset&quot; else ${PRINTF} &quot;$cd_mset&quot; fi } cd_Hm () { cd_hm ${PRINTF} &quot;%s&quot; &quot; The previous directories (0-$cd_maxhistory) are stored in the environment variables CD[0] - CD[$cd_maxhistory] Similarly the special directories S0 - $cd_maxspecial are in the environment variable CDS[0] - CDS[$cd_maxspecial] and may be accessed from the command line The default pathname for the -f and -u commands is $CDPath The default filename for the -f and -u commands is $CDFile Set the following environment variables: CDL_PROMPTLEN - Set to the length of prompt you require. Prompt string is set to the right characters of the current directory. If not set then prompt is left unchanged CDL_PROMPT_PRE - Set to the string to prefix the prompt. Default is: non-root: \&quot;\\[\\e[01;34m\\]\&quot; (sets colour to blue). root: \&quot;\\[\\e[01;31m\\]\&quot; (sets colour to red). CDL_PROMPT_POST - Set to the string to suffix the prompt. Default is: non-root: \&quot;\\[\\e[00m\\]$\&quot; (resets colour and displays $). root: \&quot;\\[\\e[00m\\]#\&quot; (resets colour and displays #). CDPath - Set the default path for the -f &amp; -u options. Default is home directory CDFile - Set the default filename for the -f &amp; -u options. Default is cdfile &quot; cd_version } cd_version () { printf &quot;Version: ${VERSION_MAJOR}.${VERSION_MINOR} Date: ${VERSION_DATE}\n&quot; } # # Truncate right. # # params: # p1 - string # p2 - length to truncate to # # returns string in tcd # cd_right_trunc () { local tlen=${2} local plen=${#1} local str=&quot;${1}&quot; local diff local filler=&quot;&lt;--&quot; if ${TEST} ${plen} -le ${tlen} then tcd=&quot;${str}&quot; else let diff=${plen}-${tlen} elen=3 if ${TEST} ${diff} -le 2 then let elen=${diff} fi tlen=-${tlen} let tlen=${tlen}+${elen} tcd=${filler:0:elen}${str:tlen} fi } # # Three versions of do history: # cd_dohistory - packs history and specials side by side # cd_dohistoryH - Shows only hstory # cd_dohistoryS - Shows only specials # cd_dohistory () { cd_getrc ${PRINTF} &quot;History:\n&quot; local -i count=${cd_histcount} while ${TEST} ${count} -ge 0 do cd_right_trunc &quot;${CD[count]}&quot; ${cd_lchar} ${PRINTF} &quot;%2d %-${cd_lchar}.${cd_lchar}s &quot; ${count} &quot;${tcd}&quot; cd_right_trunc &quot;${CDS[count]}&quot; ${cd_rchar} ${PRINTF} &quot;S%d %-${cd_rchar}.${cd_rchar}s\n&quot; ${count} &quot;${tcd}&quot; count=${count}-1 done } cd_dohistoryH () { cd_getrc ${PRINTF} &quot;History:\n&quot; local -i count=${cd_maxhistory} while ${TEST} ${count} -ge 0 do ${PRINTF} &quot;${count} %-${cd_flchar}.${cd_flchar}s\n&quot; ${CD[$count]} count=${count}-1 done } cd_dohistoryS () { cd_getrc ${PRINTF} &quot;Specials:\n&quot; local -i count=${cd_maxspecial} while ${TEST} ${count} -ge 0 do ${PRINTF} &quot;S${count} %-${cd_flchar}.${cd_flchar}s\n&quot; ${CDS[$count]} count=${count}-1 done } cd_getrc () { cd_flchar=$(stty -a | awk -F \; '/rows/ { print $2 $3 }' | awk -F \ '{ print $4 }') if ${TEST} ${cd_flchar} -ne 0 then cd_lchar=${cd_flchar}/2-5 cd_rchar=${cd_flchar}/2-5 cd_flchar=${cd_flchar}-5 else cd_flchar=${FLCHAR:=75} # cd_flchar is used for for the @s &amp; @h history cd_lchar=${LCHAR:=35} cd_rchar=${RCHAR:=35} fi } cd_doselection () { local -i nm=0 cd_doflag=&quot;TRUE&quot; if ${TEST} &quot;${CD_MODE}&quot; = &quot;PREV&quot; then if ${TEST} -z &quot;$cd_npwd&quot; then cd_npwd=0 fi fi tm=$(echo &quot;${cd_npwd}&quot; | cut -b 1) if ${TEST} &quot;${tm}&quot; = &quot;-&quot; then pm=$(echo &quot;${cd_npwd}&quot; | cut -b 2) nm=$(echo &quot;${cd_npwd}&quot; | cut -d $pm -f2) case &quot;${pm}&quot; in a) cd_npwd=${cd_sugg[$nm]} ;; s) cd_npwd=&quot;${CDS[$nm]}&quot; ;; S) cd_npwd=&quot;${CDS[$nm]}&quot; ; CDS[$nm]=`pwd` ;; r) cd_npwd=&quot;$2&quot; ; cd_specDir=$nm ; cd_doselection &quot;$1&quot; &quot;$2&quot;;; R) cd_npwd=&quot;$2&quot; ; CDS[$nm]=`pwd` ; cd_doselection &quot;$1&quot; &quot;$2&quot;;; esac fi if ${TEST} &quot;${cd_npwd}&quot; != &quot;.&quot; -a &quot;${cd_npwd}&quot; \ != &quot;..&quot; -a &quot;${cd_npwd}&quot; -le ${cd_maxhistory} &gt;&gt;/dev/null 2&gt;&amp;1 then cd_npwd=${CD[$cd_npwd]} else case &quot;$cd_npwd&quot; in @) cd_dohistory ; cd_doflag=&quot;FALSE&quot; ;; @h) cd_dohistoryH ; cd_doflag=&quot;FALSE&quot; ;; @s) cd_dohistoryS ; cd_doflag=&quot;FALSE&quot; ;; -h) cd_hm ; cd_doflag=&quot;FALSE&quot; ;; -H) cd_Hm ; cd_doflag=&quot;FALSE&quot; ;; -f) cd_fsave &quot;SHOW&quot; $2 ; cd_doflag=&quot;FALSE&quot; ;; -u) cd_upload &quot;SHOW&quot; $2 ; cd_doflag=&quot;FALSE&quot; ;; -F) cd_fsave &quot;NOSHOW&quot; $2 ; cd_doflag=&quot;FALSE&quot; ;; -U) cd_upload &quot;NOSHOW&quot; $2 ; cd_doflag=&quot;FALSE&quot; ;; -g) cd_npwd=&quot;$2&quot; ;; -d) cd_chdefm 1; cd_doflag=&quot;FALSE&quot; ;; -D) cd_chdefm 0; cd_doflag=&quot;FALSE&quot; ;; -r) cd_npwd=&quot;$2&quot; ; cd_specDir=0 ; cd_doselection &quot;$1&quot; &quot;$2&quot;;; -R) cd_npwd=&quot;$2&quot; ; CDS[0]=`pwd` ; cd_doselection &quot;$1&quot; &quot;$2&quot;;; -s) cd_npwd=&quot;${CDS[0]}&quot; ;; -S) cd_npwd=&quot;${CDS[0]}&quot; ; CDS[0]=`pwd` ;; -v) cd_version ; cd_doflag=&quot;FALSE&quot;;; esac fi } cd_chdefm () { if ${TEST} &quot;${CD_MODE}&quot; = &quot;PREV&quot; then CD_MODE=&quot;&quot; if ${TEST} $1 -eq 1 then ${PRINTF} &quot;${cd_mset}&quot; fi else CD_MODE=&quot;PREV&quot; if ${TEST} $1 -eq 1 then ${PRINTF} &quot;${cd_mnset}&quot; fi fi } cd_fsave () { local sfile=${CDPath}${2:-&quot;$CDFile&quot;} if ${TEST} &quot;$1&quot; = &quot;SHOW&quot; then ${PRINTF} &quot;Saved to %s\n&quot; $sfile fi ${RM} -f ${sfile} local -i count=0 while ${TEST} ${count} -le ${cd_maxhistory} do echo &quot;CD[$count]=\&quot;${CD[$count]}\&quot;&quot; &gt;&gt; ${sfile} count=${count}+1 done count=0 while ${TEST} ${count} -le ${cd_maxspecial} do echo &quot;CDS[$count]=\&quot;${CDS[$count]}\&quot;&quot; &gt;&gt; ${sfile} count=${count}+1 done } cd_upload () { local sfile=${CDPath}${2:-&quot;$CDFile&quot;} if ${TEST} &quot;${1}&quot; = &quot;SHOW&quot; then ${PRINTF} &quot;Loading from %s\n&quot; ${sfile} fi . ${sfile} } cd_new () { local -i count local -i choose=0 cd_npwd=&quot;${1}&quot; cd_specDir=-1 cd_doselection &quot;${1}&quot; &quot;${2}&quot; if ${TEST} ${cd_doflag} = &quot;TRUE&quot; then if ${TEST} &quot;${CD[0]}&quot; != &quot;`pwd`&quot; then count=$cd_maxhistory while ${TEST} $count -gt 0 do CD[$count]=${CD[$count-1]} count=${count}-1 done CD[0]=`pwd` fi command cd &quot;${cd_npwd}&quot; 2&gt;/dev/null if ${TEST} $? -eq 1 then ${PRINTF} &quot;Unknown dir: %s\n&quot; &quot;${cd_npwd}&quot; local -i ftflag=0 for i in &quot;${cd_npwd}&quot;* do if ${TEST} -d &quot;${i}&quot; then if ${TEST} ${ftflag} -eq 0 then ${PRINTF} &quot;Suggest:\n&quot; ftflag=1 fi ${PRINTF} &quot;\t-a${choose} %s\n&quot; &quot;$i&quot; cd_sugg[$choose]=&quot;${i}&quot; choose=${choose}+1 fi done fi fi if ${TEST} ${cd_specDir} -ne -1 then CDS[${cd_specDir}]=`pwd` fi if ${TEST} ! -z &quot;${CDL_PROMPTLEN}&quot; then cd_right_trunc &quot;${PWD}&quot; ${CDL_PROMPTLEN} cd_rp=${CDL_PROMPT_PRE}${tcd}${CDL_PROMPT_POST} export PS1=&quot;$(echo -ne ${cd_rp})&quot; fi } ######################################################################### # # # Initialisation here # # # ######################################################################### # VERSION_MAJOR=&quot;1&quot; VERSION_MINOR=&quot;2.1&quot; VERSION_DATE=&quot;24-MAY-2003&quot; # alias cd=cd_new # # Set up commands RM=/bin/rm TEST=test PRINTF=printf # Use builtin printf ######################################################################### # # # Change this to modify the default pre- and post prompt strings. # # These only come into effect if CDL_PROMPTLEN is set. # # # ######################################################################### if ${TEST} ${EUID} -eq 0 then # CDL_PROMPT_PRE=${CDL_PROMPT_PRE:=&quot;$HOSTNAME@&quot;} CDL_PROMPT_PRE=${CDL_PROMPT_PRE:=&quot;\\[\\e[01;31m\\]&quot;} # Root is in red CDL_PROMPT_POST=${CDL_PROMPT_POST:=&quot;\\[\\e[00m\\]#&quot;} else CDL_PROMPT_PRE=${CDL_PROMPT_PRE:=&quot;\\[\\e[01;34m\\]&quot;} # Users in blue CDL_PROMPT_POST=${CDL_PROMPT_POST:=&quot;\\[\\e[00m\\]$&quot;} fi ######################################################################### # # cd_maxhistory defines the max number of history entries allowed. typeset -i cd_maxhistory=50 ######################################################################### # # cd_maxspecial defines the number of special entries. typeset -i cd_maxspecial=9 # # ######################################################################### # # cd_histcount defines the number of entries displayed in #+ the history command. typeset -i cd_histcount=9 # ######################################################################### export CDPath=${HOME}/ # Change these to use a different # #+ default path and filename # export CDFile=${CDFILE:=cdfile} # for the -u and -f commands # # ######################################################################### # typeset -i cd_lchar cd_rchar cd_flchar # This is the number of chars to allow for the # cd_flchar=${FLCHAR:=75} #+ cd_flchar is used for for the @s &amp; @h history# typeset -ax CD CDS # cd_mset=&quot;\n\tDefault mode is now set - entering cd with no parameters \ has the default action\n\tUse cd -d or -D for cd to go to \ previous directory with no parameters\n&quot; cd_mnset=&quot;\n\tNon-default mode is now set - entering cd with no \ parameters is the same as entering cd 0\n\tUse cd -d or \ -D to change default cd action\n&quot; # ==================================================================== # : &lt;&lt;DOCUMENTATION Written by Phil Braham. Realtime Software Pty Ltd. Released under GNU license. Free to use. Please pass any modifications or comments to the author Phil Braham: realtime@mpx.com.au ======================================================================= cdll is a replacement for cd and incorporates similar functionality to the bash pushd and popd commands but is independent of them. This version of cdll has been tested on Linux using Bash. It will work on most Linux versions but will probably not work on other shells without modification. Introduction ============ cdll allows easy moving about between directories. When changing to a new directory the current one is automatically put onto a stack. By default 50 entries are kept, but this is configurable. Special directories can be kept for easy access - by default up to 10, but this is configurable. The most recent stack entries and the special entries can be easily viewed. The directory stack and special entries can be saved to, and loaded from, a file. This allows them to be set up on login, saved before logging out or changed when moving project to project. In addition, cdll provides a flexible command prompt facility that allows, for example, a directory name in colour that is truncated from the left if it gets too long. Setting up cdll =============== Copy cdll to either your local home directory or a central directory such as /usr/bin (this will require root access). Copy the file cdfile to your home directory. It will require read and write access. This a default file that contains a directory stack and special entries. To replace the cd command you must add commands to your login script. The login script is one or more of: /etc/profile ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc /etc/bash.bashrc.local To setup your login, ~/.bashrc is recommended, for global (and root) setup add the commands to /etc/bash.bashrc.local To set up on login, add the command: . &lt;dir&gt;/cdll For example if cdll is in your local home directory: . ~/cdll If in /usr/bin then: . /usr/bin/cdll If you want to use this instead of the buitin cd command then add: alias cd='cd_new' We would also recommend the following commands: alias @='cd_new @' cd -U cd -D If you want to use cdll's prompt facilty then add the following: CDL_PROMPTLEN=nn Where nn is a number described below. Initially 99 would be suitable number. Thus the script looks something like this: ###################################################################### # CD Setup ###################################################################### CDL_PROMPTLEN=21 # Allow a prompt length of up to 21 characters . /usr/bin/cdll # Initialise cdll alias cd='cd_new' # Replace the built in cd command alias @='cd_new @' # Allow @ at the prompt to display history cd -U # Upload directories cd -D # Set default action to non-posix ###################################################################### The full meaning of these commands will become clear later. There are a couple of caveats. If another program changes the directory without calling cdll, then the directory won't be put on the stack and also if the prompt facility is used then this will not be updated. Two programs that can do this are pushd and popd. To update the prompt and stack simply enter: cd . Note that if the previous entry on the stack is the current directory then the stack is not updated. Usage ===== cd [dir] [0-9] [@[s|h] [-g &lt;dir&gt;] [-d] [-D] [-r&lt;n&gt;] [dir|0-9] [-R&lt;n&gt;] [&lt;dir&gt;|0-9] [-s&lt;n&gt;] [-S&lt;n&gt;] [-u] [-U] [-f] [-F] [-h] [-H] [-v] &lt;dir&gt; Go to directory 0-n Goto previous directory (0 is previous, 1 is last but 1, etc.) n is up to max history (default is 50) @ List history and special entries (Usually available as $ @) @h List history entries @s List special entries -g [&lt;dir&gt;] Go to literal name (bypass special names) This is to allow access to dirs called '0','1','-h' etc -d Change default action - verbose. (See note) -D Change default action - silent. (See note) -s&lt;n&gt; Go to the special entry &lt;n&gt; -S&lt;n&gt; Go to the special entry &lt;n&gt; and replace it with the current dir -r&lt;n&gt; [&lt;dir&gt;] Go to directory &lt;dir&gt; and then put it on special entry &lt;n&gt; -R&lt;n&gt; [&lt;dir&gt;] Go to directory &lt;dir&gt; and put current dir on special entry &lt;n&gt; -a&lt;n&gt; Alternative suggested directory. See note below. -f [&lt;file&gt;] File entries to &lt;file&gt;. -u [&lt;file&gt;] Update entries from &lt;file&gt;. If no filename supplied then default file (~/cdfile) is used -F and -U are silent versions -v Print version number -h Help -H Detailed help Examples ======== These examples assume non-default mode is set (that is, cd with no parameters will go to the most recent stack directory), that aliases have been set up for cd and @ as described above and that cd's prompt facility is active and the prompt length is 21 characters. /home/phil$ @ # List the entries with the @ History: # Output of the @ command ..... # Skipped these entries for brevity 1 /home/phil/ummdev S1 /home/phil/perl # Most recent two history entries 0 /home/phil/perl/eg S0 /home/phil/umm/ummdev # and two special entries are shown /home/phil$ cd /home/phil/utils/Cdll # Now change directories /home/phil/utils/Cdll$ @ # Prompt reflects the directory. History: # New history ..... 1 /home/phil/perl/eg S1 /home/phil/perl # History entry 0 has moved to 1 0 /home/phil S0 /home/phil/umm/ummdev # and the most recent has entered To go to a history entry: /home/phil/utils/Cdll$ cd 1 # Go to history entry 1. /home/phil/perl/eg$ # Current directory is now what was 1 To go to a special entry: /home/phil/perl/eg$ cd -s1 # Go to special entry 1 /home/phil/umm/ummdev$ # Current directory is S1 To go to a directory called, for example, 1: /home/phil$ cd -g 1 # -g ignores the special meaning of 1 /home/phil/1$ To put current directory on the special list as S1: cd -r1 . # OR cd -R1 . # These have the same effect if the directory is #+ . (the current directory) To go to a directory and add it as a special The directory for -r&lt;n&gt; or -R&lt;n&gt; may be a number. For example: $ cd -r3 4 Go to history entry 4 and put it on special entry 3 $ cd -R3 4 Put current dir on the special entry 3 and go to history entry 4 $ cd -s3 Go to special entry 3 Note that commands R,r,S and s may be used without a number and refer to 0: $ cd -s Go to special entry 0 $ cd -S Go to special entry 0 and make special entry 0 current dir $ cd -r 1 Go to history entry 1 and put it on special entry 0 $ cd -r Go to history entry 0 and put it on special entry 0 Alternative suggested directories: If a directory is not found, then CD will suggest any possibilities. These are directories starting with the same letters and if any are found they are listed prefixed with -a&lt;n&gt; where &lt;n&gt; is a number. It's possible to go to the directory by entering cd -a&lt;n&gt; on the command line. Use cd -d or -D to change default cd action. cd -H will show current action. The history entries (0-n) are stored in the environment variables CD[0] - CD[n] Similarly the special directories S0 - 9 are in the environment variable CDS[0] - CDS[9] and may be accessed from the command line, for example: ls -l ${CDS[3]} cat ${CD[8]}/file.txt The default pathname for the -f and -u commands is ~ The default filename for the -f and -u commands is cdfile Configuration ============= The following environment variables can be set: CDL_PROMPTLEN - Set to the length of prompt you require. Prompt string is set to the right characters of the current directory. If not set, then prompt is left unchanged. Note that this is the number of characters that the directory is shortened to, not the total characters in the prompt. CDL_PROMPT_PRE - Set to the string to prefix the prompt. Default is: non-root: &quot;\\[\\e[01;34m\\]&quot; (sets colour to blue). root: &quot;\\[\\e[01;31m\\]&quot; (sets colour to red). CDL_PROMPT_POST - Set to the string to suffix the prompt. Default is: non-root: &quot;\\[\\e[00m\\]$&quot; (resets colour and displays $). root: &quot;\\[\\e[00m\\]#&quot; (resets colour and displays #). Note: CDL_PROMPT_PRE &amp; _POST only t CDPath - Set the default path for the -f &amp; -u options. Default is home directory CDFile - Set the default filename for the -f &amp; -u options. Default is cdfile There are three variables defined in the file cdll which control the number of entries stored or displayed. They are in the section labeled 'Initialisation here' towards the end of the file. cd_maxhistory - The number of history entries stored. Default is 50. cd_maxspecial - The number of special entries allowed. Default is 9. cd_histcount - The number of history and special entries displayed. Default is 9. Note that cd_maxspecial should be &gt;= cd_histcount to avoid displaying special entries that can't be set. Version: 1.2.1 Date: 24-MAY-2003 DOCUMENTATION Example A-34. A soundcard setup script #!/bin/bash # soundcard-on.sh # Script author: Mkarcher # http://www.thinkwiki.org/wiki ... # /Script_for_configuring_the_CS4239_sound_chip_in_PnP_mode # ABS Guide author made minor changes and added comments. # Couldn't contact script author to ask for permission to use, but ... #+ the script was released under the FDL, #+ so its use here should be both legal and ethical. # Sound-via-pnp-script for Thinkpad 600E #+ and possibly other computers with onboard CS4239/CS4610 #+ that do not work with the PCI driver #+ and are not recognized by the PnP code of snd-cs4236. # Also for some 770-series Thinkpads, such as the 770x. # Run as root user, of course. # # These are old and very obsolete laptop computers, #+ but this particular script is very instructive, #+ as it shows how to set up and hack device files. # Search for sound card pnp device: for dev in /sys/bus/pnp/devices/* do grep CSC0100 $dev/id &gt; /dev/null &amp;&amp; WSSDEV=$dev grep CSC0110 $dev/id &gt; /dev/null &amp;&amp; CTLDEV=$dev done # On 770x: # WSSDEV = /sys/bus/pnp/devices/00:07 # CTLDEV = /sys/bus/pnp/devices/00:06 # These are symbolic links to /sys/devices/pnp0/ ... # Activate devices: # Thinkpad boots with devices disabled unless &quot;fast boot&quot; is turned off #+ (in BIOS). echo activate &gt; $WSSDEV/resources echo activate &gt; $CTLDEV/resources # Parse resource settings. { read # Discard &quot;state = active&quot; (see below). read bla port1 read bla port2 read bla port3 read bla irq read bla dma1 read bla dma2 # The &quot;bla's&quot; are labels in the first field: &quot;io,&quot; &quot;state,&quot; etc. # These are discarded. # Hack: with PnPBIOS: ports are: port1: WSS, port2: #+ OPL, port3: sb (unneeded) # with ACPI-PnP:ports are: port1: OPL, port2: sb, port3: WSS # (ACPI bios seems to be wrong here, the PnP-card-code in snd-cs4236.c #+ uses the PnPBIOS port order) # Detect port order using the fixed OPL port as reference. if [ ${port2%%-*} = 0x388 ] # ^^^^ Strip out everything following hyphen in port address. # So, if port1 is 0x530-0x537 #+ we're left with 0x530 -- the start address of the port. then # PnPBIOS: usual order port=${port1%%-*} oplport=${port2%%-*} else # ACPI: mixed-up order port=${port3%%-*} oplport=${port1%%-*} fi } &lt; $WSSDEV/resources # To see what's going on here: # --------------------------- # cat /sys/devices/pnp0/00:07/resources # # state = active # io 0x530-0x537 # io 0x388-0x38b # io 0x220-0x233 # irq 5 # dma 1 # dma 0 # ^^^ &quot;bla&quot; labels in first field (discarded). { read # Discard first line, as above. read bla port1 cport=${port1%%-*} # ^^^^ # Just want _start_ address of port. } &lt; $CTLDEV/resources # Load the module: modprobe --ignore-install snd-cs4236 port=$port cport=$cport\ fm_port=$oplport irq=$irq dma1=$dma1 dma2=$dma2 isapnp=0 index=0 # See the modprobe manpage. exit $? Example A-35. Locating split paragraphs in a text file #!/bin/bash # find-splitpara.sh # Finds split paragraphs in a text file, #+ and tags the line numbers. ARGCOUNT=1 # Expect one arg. OFF=0 # Flag states. ON=1 E_WRONGARGS=85 file=&quot;$1&quot; # Target filename. lineno=1 # Line number. Start at 1. Flag=$OFF # Blank line flag. if [ $# -ne &quot;$ARGCOUNT&quot; ] then echo &quot;Usage: `basename $0` FILENAME&quot; exit $E_WRONGARGS fi file_read () # Scan file for pattern, then print line. { while read line do if [[ &quot;$line&quot; =~ ^[a-z] &amp;&amp; $Flag -eq $ON ]] then # Line begins with lowercase character, following blank line. echo -n &quot;$lineno:: &quot; echo &quot;$line&quot; fi if [[ &quot;$line&quot; =~ ^$ ]] then # If blank line, Flag=$ON #+ set flag. else Flag=$OFF fi ((lineno++)) done } &lt; $file # Redirect file into function's stdin. file_read exit $? # ---------------------------------------------------------------- This is line one of an example paragraph, bla, bla, bla. This is line two, and line three should follow on next line, but there is a blank line separating the two parts of the paragraph. # ---------------------------------------------------------------- Running this script on a file containing the above paragraph yields: 4:: there is a blank line separating the two parts of the paragraph. There will be additional output for all the other split paragraphs in the target file. Example A-36. Insertion sort #!/bin/bash # insertion-sort.bash: Insertion sort implementation in Bash # Heavy use of Bash array features: #+ (string) slicing, merging, etc # URL: http://www.lugmen.org.ar/~jjo/jjotip/insertion-sort.bash.d #+ /insertion-sort.bash.sh # # Author: JuanJo Ciarlante &lt;jjo@irrigacion.gov.ar&gt; # Lightly reformatted by ABS Guide author. # License: GPLv2 # Used in ABS Guide with author's permission (thanks!). # # Test with: ./insertion-sort.bash -t # Or: bash insertion-sort.bash -t # The following *doesn't* work: # sh insertion-sort.bash -t # Why not? Hint: which Bash-specific features are disabled #+ when running a script by 'sh script.sh'? # : ${DEBUG:=0} # Debug, override with: DEBUG=1 ./scriptname . . . # Parameter substitution -- set DEBUG to 0 if not previously set. # Global array: &quot;list&quot; typeset -a list # Load whitespace-separated numbers from stdin. if [ &quot;$1&quot; = &quot;-t&quot; ]; then DEBUG=1 read -a list &lt; &lt;( od -Ad -w24 -t u2 /dev/urandom ) # Random list. # ^ ^ process substition else read -a list fi numelem=${#list[*]} # Shows the list, marking the element whose index is $1 #+ by surrounding it with the two chars passed as $2. # Whole line prefixed with $3. showlist() { echo &quot;$3&quot;${list[@]:0:$1} ${2:0:1}${list[$1]}${2:1:1} ${list[@]:$1+1}; } # Loop _pivot_ -- from second element to end of list. for(( i=1; i&lt;numelem; i++ )) do ((DEBUG))&amp;&amp;showlist i &quot;[]&quot; &quot; &quot; # From current _pivot_, back to first element. for(( j=i; j; j-- )) do # Search for the 1st elem. less than current &quot;pivot&quot; . . . [[ &quot;${list[j-1]}&quot; -le &quot;${list[i]}&quot; ]] &amp;&amp; break done (( i==j )) &amp;&amp; continue ## No insertion was needed for this element. # . . . Move list[i] (pivot) to the left of list[j]: list=(${list[@]:0:j} ${list[i]} ${list[j]}\ # {0,j-1} {i} {j} ${list[@]:j+1:i-(j+1)} ${list[@]:i+1}) # {j+1,i-1} {i+1,last} ((DEBUG))&amp;&amp;showlist j &quot;&lt;&gt;&quot; &quot;*&quot; done echo echo &quot;------&quot; echo $'Result:\n'${list[@]} exit $? Example A-37. Standard Deviation #!/bin/bash # sd.sh: Standard Deviation # The Standard Deviation indicates how consistent a set of data is. # It shows to what extent the individual data points deviate from the #+ arithmetic mean, i.e., how much they &quot;bounce around&quot; (or cluster). # It is essentially the average deviation-distance of the #+ data points from the mean. # =========================================================== # # To calculate the Standard Deviation: # # 1 Find the arithmetic mean (average) of all the data points. # 2 Subtract each data point from the arithmetic mean, # and square that difference. # 3 Add all of the individual difference-squares in # 2. # 4 Divide the sum in # 3 by the number of data points. # This is known as the &quot;variance.&quot; # 5 The square root of # 4 gives the Standard Deviation. # =========================================================== # count=0 # Number of data points; global. SC=9 # Scale to be used by bc. Nine decimal places. E_DATAFILE=90 # Data file error. # ----------------- Set data file --------------------- if [ ! -z &quot;$1&quot; ] # Specify filename as cmd-line arg? then datafile=&quot;$1&quot; # ASCII text file, else #+ one (numerical) data point per line! datafile=sample.dat fi # See example data file, below. if [ ! -e &quot;$datafile&quot; ] then echo &quot;\&quot;&quot;$datafile&quot;\&quot; does not exist!&quot; exit $E_DATAFILE fi # ----------------------------------------------------- arith_mean () { local rt=0 # Running total. local am=0 # Arithmetic mean. local ct=0 # Number of data points. while read value # Read one data point at a time. do rt=$(echo &quot;scale=$SC; $rt + $value&quot; | bc) (( ct++ )) done am=$(echo &quot;scale=$SC; $rt / $ct&quot; | bc) echo $am; return $ct # This function &quot;returns&quot; TWO values! # Caution: This little trick will not work if $ct &gt; 255! # To handle a larger number of data points, #+ simply comment out the &quot;return $ct&quot; above. } &lt;&quot;$datafile&quot; # Feed in data file. sd () { mean1=$1 # Arithmetic mean (passed to function). n=$2 # How many data points. sum2=0 # Sum of squared differences (&quot;variance&quot;). avg2=0 # Average of $sum2. sdev=0 # Standard Deviation. while read value # Read one line at a time. do diff=$(echo &quot;scale=$SC; $mean1 - $value&quot; | bc) # Difference between arith. mean and data point. dif2=$(echo &quot;scale=$SC; $diff * $diff&quot; | bc) # Squared. sum2=$(echo &quot;scale=$SC; $sum2 + $dif2&quot; | bc) # Sum of squares. done avg2=$(echo &quot;scale=$SC; $sum2 / $n&quot; | bc) # Avg. of sum of squares. sdev=$(echo &quot;scale=$SC; sqrt($avg2)&quot; | bc) # Square root = echo $sdev # Standard Deviation. } &lt;&quot;$datafile&quot; # Rewinds data file. # ======================================================= # mean=$(arith_mean); count=$? # Two returns from function! std_dev=$(sd $mean $count) echo echo &quot;Number of data points in \&quot;&quot;$datafile&quot;\&quot; = $count&quot; echo &quot;Arithmetic mean (average) = $mean&quot; echo &quot;Standard Deviation = $std_dev&quot; echo # ======================================================= # exit # This script could stand some drastic streamlining, #+ but not at the cost of reduced legibility, please. # ++++++++++++++++++++++++++++++++++++++++ # # A sample data file (sample1.dat): # 18.35 # 19.0 # 18.88 # 18.91 # 18.64 # $ sh sd.sh sample1.dat # Number of data points in &quot;sample1.dat&quot; = 5 # Arithmetic mean (average) = 18.756000000 # Standard Deviation = .235338054 # ++++++++++++++++++++++++++++++++++++++++ # Example A-38. A pad file generator for shareware authors #!/bin/bash # pad.sh ####################################################### # PAD (xml) file creator #+ Written by Mendel Cooper &lt;thegrendel.abs@gmail.com&gt;. #+ Released to the Public Domain. # # Generates a &quot;PAD&quot; descriptor file for shareware #+ packages, according to the specifications #+ of the ASP. # http://www.asp-shareware.org/pad ####################################################### # Accepts (optional) save filename as a command-line argument. if [ -n &quot;$1&quot; ] then savefile=$1 else savefile=save_file.xml # Default save_file name. fi # ===== PAD file headers ===== HDR1=&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Windows-1252\&quot; ?&gt;&quot; HDR2=&quot;&lt;XML_DIZ_INFO&gt;&quot; HDR3=&quot;&lt;MASTER_PAD_VERSION_INFO&gt;&quot; HDR4=&quot;\t&lt;MASTER_PAD_VERSION&gt;1.15&lt;/MASTER_PAD_VERSION&gt;&quot; HDR5=&quot;\t&lt;MASTER_PAD_INFO&gt;Portable Application Description, or PAD for short, is a data set that is used by shareware authors to disseminate information to anyone interested in their software products. To find out more go to http://www.asp-shareware.org/pad&lt;/MASTER_PAD_INFO&gt;&quot; HDR6=&quot;&lt;/MASTER_PAD_VERSION_INFO&gt;&quot; # ============================ fill_in () { if [ -z &quot;$2&quot; ] then echo -n &quot;$1? &quot; # Get user input. else echo -n &quot;$1 $2? &quot; # Additional query? fi read var # May paste to fill in field. # This shows how flexible &quot;read&quot; can be. if [ -z &quot;$var&quot; ] then echo -e &quot;\t\t&lt;$1 /&gt;&quot; &gt;&gt;$savefile # Indent with 2 tabs. return else echo -e &quot;\t\t&lt;$1&gt;$var&lt;/$1&gt;&quot; &gt;&gt;$savefile return ${#var} # Return length of input string. fi } check_field_length () # Check length of program description fields. { # $1 = maximum field length # $2 = actual field length if [ &quot;$2&quot; -gt &quot;$1&quot; ] then echo &quot;Warning: Maximum field length of $1 characters exceeded!&quot; fi } clear # Clear screen. echo &quot;PAD File Creator&quot; echo &quot;--- ---- -------&quot; echo # Write File Headers to file. echo $HDR1 &gt;$savefile echo $HDR2 &gt;&gt;$savefile echo $HDR3 &gt;&gt;$savefile echo -e $HDR4 &gt;&gt;$savefile echo -e $HDR5 &gt;&gt;$savefile echo $HDR6 &gt;&gt;$savefile # Company_Info echo &quot;COMPANY INFO&quot; CO_HDR=&quot;Company_Info&quot; echo &quot;&lt;$CO_HDR&gt;&quot; &gt;&gt;$savefile fill_in Company_Name fill_in Address_1 fill_in Address_2 fill_in City_Town fill_in State_Province fill_in Zip_Postal_Code fill_in Country # If applicable: # fill_in ASP_Member &quot;[Y/N]&quot; # fill_in ASP_Member_Number # fill_in ESC_Member &quot;[Y/N]&quot; fill_in Company_WebSite_URL clear # Clear screen between sections. # Contact_Info echo &quot;CONTACT INFO&quot; CONTACT_HDR=&quot;Contact_Info&quot; echo &quot;&lt;$CONTACT_HDR&gt;&quot; &gt;&gt;$savefile fill_in Author_First_Name fill_in Author_Last_Name fill_in Author_Email fill_in Contact_First_Name fill_in Contact_Last_Name fill_in Contact_Email echo -e &quot;\t&lt;/$CONTACT_HDR&gt;&quot; &gt;&gt;$savefile # END Contact_Info clear # Support_Info echo &quot;SUPPORT INFO&quot; SUPPORT_HDR=&quot;Support_Info&quot; echo &quot;&lt;$SUPPORT_HDR&gt;&quot; &gt;&gt;$savefile fill_in Sales_Email fill_in Support_Email fill_in General_Email fill_in Sales_Phone fill_in Support_Phone fill_in General_Phone fill_in Fax_Phone echo -e &quot;\t&lt;/$SUPPORT_HDR&gt;&quot; &gt;&gt;$savefile # END Support_Info echo &quot;&lt;/$CO_HDR&gt;&quot; &gt;&gt;$savefile # END Company_Info clear # Program_Info echo &quot;PROGRAM INFO&quot; PROGRAM_HDR=&quot;Program_Info&quot; echo &quot;&lt;$PROGRAM_HDR&gt;&quot; &gt;&gt;$savefile fill_in Program_Name fill_in Program_Version fill_in Program_Release_Month fill_in Program_Release_Day fill_in Program_Release_Year fill_in Program_Cost_Dollars fill_in Program_Cost_Other fill_in Program_Type &quot;[Shareware/Freeware/GPL]&quot; fill_in Program_Release_Status &quot;[Beta, Major Upgrade, etc.]&quot; fill_in Program_Install_Support fill_in Program_OS_Support &quot;[Win9x/Win2k/Linux/etc.]&quot; fill_in Program_Language &quot;[English/Spanish/etc.]&quot; echo; echo # File_Info echo &quot;FILE INFO&quot; FILEINFO_HDR=&quot;File_Info&quot; echo &quot;&lt;$FILEINFO_HDR&gt;&quot; &gt;&gt;$savefile fill_in Filename_Versioned fill_in Filename_Previous fill_in Filename_Generic fill_in Filename_Long fill_in File_Size_Bytes fill_in File_Size_K fill_in File_Size_MB echo -e &quot;\t&lt;/$FILEINFO_HDR&gt;&quot; &gt;&gt;$savefile # END File_Info clear # Expire_Info echo &quot;EXPIRE INFO&quot; EXPIRE_HDR=&quot;Expire_Info&quot; echo &quot;&lt;$EXPIRE_HDR&gt;&quot; &gt;&gt;$savefile fill_in Has_Expire_Info &quot;Y/N&quot; fill_in Expire_Count fill_in Expire_Based_On fill_in Expire_Other_Info fill_in Expire_Month fill_in Expire_Day fill_in Expire_Year echo -e &quot;\t&lt;/$EXPIRE_HDR&gt;&quot; &gt;&gt;$savefile # END Expire_Info clear # More Program_Info echo &quot;ADDITIONAL PROGRAM INFO&quot; fill_in Program_Change_Info fill_in Program_Specific_Category fill_in Program_Categories fill_in Includes_JAVA_VM &quot;[Y/N]&quot; fill_in Includes_VB_Runtime &quot;[Y/N]&quot; fill_in Includes_DirectX &quot;[Y/N]&quot; # END More Program_Info echo &quot;&lt;/$PROGRAM_HDR&gt;&quot; &gt;&gt;$savefile # END Program_Info clear # Program Description echo &quot;PROGRAM DESCRIPTIONS&quot; PROGDESC_HDR=&quot;Program_Descriptions&quot; echo &quot;&lt;$PROGDESC_HDR&gt;&quot; &gt;&gt;$savefile LANG=&quot;English&quot; echo &quot;&lt;$LANG&gt;&quot; &gt;&gt;$savefile fill_in Keywords &quot;[comma + space separated]&quot; echo echo &quot;45, 80, 250, 450, 2000 word program descriptions&quot; echo &quot;(may cut and paste into field)&quot; # It would be highly appropriate to compose the following #+ &quot;Char_Desc&quot; fields with a text editor, #+ then cut-and-paste the text into the answer fields. echo echo &quot; |---------------45 characters---------------|&quot; fill_in Char_Desc_45 check_field_length 45 &quot;$?&quot; echo fill_in Char_Desc_80 check_field_length 80 &quot;$?&quot; fill_in Char_Desc_250 check_field_length 250 &quot;$?&quot; fill_in Char_Desc_450 fill_in Char_Desc_2000 echo &quot;&lt;/$LANG&gt;&quot; &gt;&gt;$savefile echo &quot;&lt;/$PROGDESC_HDR&gt;&quot; &gt;&gt;$savefile # END Program Description clear echo &quot;Done.&quot;; echo; echo echo &quot;Save file is: \&quot;&quot;$savefile&quot;\&quot;&quot; exit 0 Example A-39. A man page editor #!/bin/bash # maned.sh # A rudimentary man page editor # Version: 0.1 (Alpha, probably buggy) # Author: Mendel Cooper &lt;thegrendel.abs@gmail.com&gt; # Reldate: 16 June 2008 # License: GPL3 savefile= # Global, used in multiple functions. E_NOINPUT=90 # User input missing (error). May or may not be critical. # =========== Markup Tags ============ # TopHeader=&quot;.TH&quot; NameHeader=&quot;.SH NAME&quot; SyntaxHeader=&quot;.SH SYNTAX&quot; SynopsisHeader=&quot;.SH SYNOPSIS&quot; InstallationHeader=&quot;.SH INSTALLATION&quot; DescHeader=&quot;.SH DESCRIPTION&quot; OptHeader=&quot;.SH OPTIONS&quot; FilesHeader=&quot;.SH FILES&quot; EnvHeader=&quot;.SH ENVIRONMENT&quot; AuthHeader=&quot;.SH AUTHOR&quot; BugsHeader=&quot;.SH BUGS&quot; SeeAlsoHeader=&quot;.SH SEE ALSO&quot; BOLD=&quot;.B&quot; # Add more tags, as needed. # See groff docs for markup meanings. # ==================================== # start () { clear # Clear screen. echo &quot;ManEd&quot; echo &quot;-----&quot; echo echo &quot;Simple man page creator&quot; echo &quot;Author: Mendel Cooper&quot; echo &quot;License: GPL3&quot; echo; echo; echo } progname () { echo -n &quot;Program name? &quot; read name echo -n &quot;Manpage section? [Hit RETURN for default (\&quot;1\&quot;) ] &quot; read section if [ -z &quot;$section&quot; ] then section=1 # Most man pages are in section 1. fi if [ -n &quot;$name&quot; ] then savefile=&quot;&quot;$name&quot;.&quot;$section&quot;&quot; # Filename suffix = section. echo -n &quot;$1 &quot; &gt;&gt;$savefile name1=$(echo &quot;$name&quot; | tr a-z A-Z) # Change to uppercase, #+ per man page convention. echo -n &quot;$name1&quot; &gt;&gt;$savefile else echo &quot;Error! No input.&quot; # Mandatory input. exit $E_NOINPUT # Critical! # Exercise: The script-abort if no filename input is a bit clumsy. # Rewrite this section so a default filename is used #+ if no input. fi echo -n &quot; \&quot;$section\&quot;&quot;&gt;&gt;$savefile # Append, always append. echo -n &quot;Version? &quot; read ver echo -n &quot; \&quot;Version $ver \&quot;&quot;&gt;&gt;$savefile echo &gt;&gt;$savefile echo -n &quot;Short description [0 - 5 words]? &quot; read sdesc echo &quot;$NameHeader&quot;&gt;&gt;$savefile echo &quot;&quot;$BOLD&quot; &quot;$name&quot;&quot;&gt;&gt;$savefile echo &quot;\- &quot;$sdesc&quot;&quot;&gt;&gt;$savefile } fill_in () { # This function more or less copied from &quot;pad.sh&quot; script. echo -n &quot;$2? &quot; # Get user input. read var # May paste (a single line only!) to fill in field. if [ -n &quot;$var&quot; ] then echo &quot;$1 &quot; &gt;&gt;$savefile echo -n &quot;$var&quot; &gt;&gt;$savefile else # Don't append empty field to file. return $E_NOINPUT # Not critical here. fi echo &gt;&gt;$savefile } end () { clear echo -n &quot;Would you like to view the saved man page (y/n)? &quot; read ans if [ &quot;$ans&quot; = &quot;n&quot; -o &quot;$ans&quot; = &quot;N&quot; ]; then exit; fi exec less &quot;$savefile&quot; # Exit script and hand off control to &quot;less&quot; ... #+ ... which formats for viewing man page source. } # ---------------------------------------- # start progname &quot;$TopHeader&quot; fill_in &quot;$SynopsisHeader&quot; &quot;Synopsis&quot; fill_in &quot;$DescHeader&quot; &quot;Long description&quot; # May paste in *single line* of text. fill_in &quot;$OptHeader&quot; &quot;Options&quot; fill_in &quot;$FilesHeader&quot; &quot;Files&quot; fill_in &quot;$AuthHeader&quot; &quot;Author&quot; fill_in &quot;$BugsHeader&quot; &quot;Bugs&quot; fill_in &quot;$SeeAlsoHeader&quot; &quot;See also&quot; # fill_in &quot;$OtherHeader&quot; ... as necessary. end # ... exit not needed. # ---------------------------------------- # # Note that the generated man page will usually #+ require manual fine-tuning with a text editor. # However, it's a distinct improvement upon #+ writing man source from scratch #+ or even editing a blank man page template. # The main deficiency of the script is that it permits #+ pasting only a single text line into the input fields. # This may be a long, cobbled-together line, which groff # will automatically wrap and hyphenate. # However, if you want multiple (newline-separated) paragraphs, #+ these must be inserted by manual text editing on the #+ script-generated man page. # Exercise (difficult): Fix this! # This script is not nearly as elaborate as the #+ full-featured &quot;manedit&quot; package #+ http://freshmeat.net/projects/manedit/ #+ but it's much easier to use. Example A-40. Petals Around the Rose #!/bin/bash -i # petals.sh ######################################################################### # Petals Around the Rose # # # # Version 0.1 Created by Serghey Rodin # # Version 0.2 Modded by ABS Guide Author # # # # License: GPL3 # # Used in ABS Guide with permission. # # ##################################################################### # hits=0 # Correct guesses. WIN=6 # Mastered the game. ALMOST=5 # One short of mastery. EXIT=exit # Give up early? RANDOM=$$ # Seeds the random number generator from PID of script. # Bones (ASCII graphics for dice) bone1[1]=&quot;| |&quot; bone1[2]=&quot;| o |&quot; bone1[3]=&quot;| o |&quot; bone1[4]=&quot;| o o |&quot; bone1[5]=&quot;| o o |&quot; bone1[6]=&quot;| o o |&quot; bone2[1]=&quot;| o |&quot; bone2[2]=&quot;| |&quot; bone2[3]=&quot;| o |&quot; bone2[4]=&quot;| |&quot; bone2[5]=&quot;| o |&quot; bone2[6]=&quot;| o o |&quot; bone3[1]=&quot;| |&quot; bone3[2]=&quot;| o |&quot; bone3[3]=&quot;| o |&quot; bone3[4]=&quot;| o o |&quot; bone3[5]=&quot;| o o |&quot; bone3[6]=&quot;| o o |&quot; bone=&quot;+---------+&quot; # Functions instructions () { clear echo -n &quot;Do you need instructions? (y/n) &quot;; read ans if [ &quot;$ans&quot; = &quot;y&quot; -o &quot;$ans&quot; = &quot;Y&quot; ]; then clear echo -e '\E[34;47m' # Blue type. # &quot;cat document&quot; cat &lt;&lt;INSTRUCTIONSZZZ The name of the game is Petals Around the Rose, and that name is significant. Five dice will roll and you must guess the &quot;answer&quot; for each roll. It will be zero or an even number. After your guess, you will be told the answer for the roll, but . . . that's ALL the information you will get. Six consecutive correct guesses admits you to the Fellowship of the Rose. INSTRUCTIONSZZZ echo -e &quot;\033[0m&quot; # Turn off blue. else clear fi } fortune () { RANGE=7 FLOOR=0 number=0 while [ &quot;$number&quot; -le $FLOOR ] do number=$RANDOM let &quot;number %= $RANGE&quot; # 1 - 6. done return $number } throw () { # Calculate each individual die. fortune; B1=$? fortune; B2=$? fortune; B3=$? fortune; B4=$? fortune; B5=$? calc () { # Function embedded within a function! case &quot;$1&quot; in 3 ) rose=2;; 5 ) rose=4;; * ) rose=0;; esac # Simplified algorithm. # Doesn't really get to the heart of the matter. return $rose } answer=0 calc &quot;$B1&quot;; answer=$(expr $answer + $(echo $?)) calc &quot;$B2&quot;; answer=$(expr $answer + $(echo $?)) calc &quot;$B3&quot;; answer=$(expr $answer + $(echo $?)) calc &quot;$B4&quot;; answer=$(expr $answer + $(echo $?)) calc &quot;$B5&quot;; answer=$(expr $answer + $(echo $?)) } game () { # Generate graphic display of dice throw. throw echo -e &quot;\033[1m&quot; # Bold. echo -e &quot;\n&quot; echo -e &quot;$bone\t$bone\t$bone\t$bone\t$bone&quot; echo -e \ &quot;${bone1[$B1]}\t${bone1[$B2]}\t${bone1[$B3]}\t${bone1[$B4]}\t${bone1[$B5]}&quot; echo -e \ &quot;${bone2[$B1]}\t${bone2[$B2]}\t${bone2[$B3]}\t${bone2[$B4]}\t${bone2[$B5]}&quot; echo -e \ &quot;${bone3[$B1]}\t${bone3[$B2]}\t${bone3[$B3]}\t${bone3[$B4]}\t${bone3[$B5]}&quot; echo -e &quot;$bone\t$bone\t$bone\t$bone\t$bone&quot; echo -e &quot;\n\n\t\t&quot; echo -e &quot;\033[0m&quot; # Turn off bold. echo -n &quot;There are how many petals around the rose? &quot; } # ============================================================== # instructions while [ &quot;$petal&quot; != &quot;$EXIT&quot; ] # Main loop. do game read petal echo &quot;$petal&quot; | grep [0-9] &gt;/dev/null # Filter response for digit. # Otherwise just roll dice again. if [ &quot;$?&quot; -eq 0 ] # If-loop #1. then if [ &quot;$petal&quot; == &quot;$answer&quot; ]; then # If-loop #2. echo -e &quot;\nCorrect. There are $petal petals around the rose.\n&quot; (( hits++ )) if [ &quot;$hits&quot; -eq &quot;$WIN&quot; ]; then # If-loop #3. echo -e '\E[31;47m' # Red type. echo -e &quot;\033[1m&quot; # Bold. echo &quot;You have unraveled the mystery of the Rose Petals!&quot; echo &quot;Welcome to the Fellowship of the Rose!!!&quot; echo &quot;(You are herewith sworn to secrecy.)&quot;; echo echo -e &quot;\033[0m&quot; # Turn off red &amp; bold. break # Exit! else echo &quot;You have $hits correct so far.&quot;; echo if [ &quot;$hits&quot; -eq &quot;$ALMOST&quot; ]; then echo &quot;Just one more gets you to the heart of the mystery!&quot;; echo fi fi # Close if-loop #3. else echo -e &quot;\nWrong. There are $answer petals around the rose.\n&quot; hits=0 # Reset number of correct guesses. fi # Close if-loop #2. echo -n &quot;Hit ENTER for the next roll, or type \&quot;exit\&quot; to end. &quot; read if [ &quot;$REPLY&quot; = &quot;$EXIT&quot; ]; then exit fi fi # Close if-loop #1. clear done # End of main (while) loop. ### exit $? # Resources: # --------- # 1) http://en.wikipedia.org/wiki/Petals_Around_the_Rose # (Wikipedia entry.) # 2) http://www.borrett.id.au/computing/petals-bg.htm # (How Bill Gates coped with the Petals Around the Rose challenge.) Example A-41. Quacky: a Perquackey-type word game #!/bin/bash # qky.sh ############################################################## # QUACKEY: a somewhat simplified version of Perquackey [TM]. # # # # Author: Mendel Cooper &lt;thegrendel.abs@gmail.com&gt; # # version 0.1.02 03 May, 2008 # # License: GPL3 # ############################################################## WLIST=/usr/share/dict/word.lst # ^^^^^^^^ Word list file found here. # ASCII word list, one word per line, UNIX format. # A suggested list is the script author's &quot;yawl&quot; word list package. # http://bash.deta.in/yawl-0.3.2.tar.gz # or # http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz NONCONS=0 # Word not constructable from letter set. CONS=1 # Constructable. SUCCESS=0 NG=1 FAILURE='' NULL=0 # Zero out value of letter (if found). MINWLEN=3 # Minimum word length. MAXCAT=5 # Maximum number of words in a given category. PENALTY=200 # General-purpose penalty for unacceptable words. total= E_DUP=70 # Duplicate word error. TIMEOUT=10 # Time for word input. NVLET=10 # 10 letters for non-vulnerable. VULET=13 # 13 letters for vulnerable (not yet implemented!). declare -a Words declare -a Status declare -a Score=( 0 0 0 0 0 0 0 0 0 0 0 ) letters=( a n s r t m l k p r b c i d s i d z e w u e t f e y e r e f e g t g h h i t r s c i t i d i j a t a o l a m n a n o v n w o s e l n o s p a q e e r a b r s a o d s t g t i t l u e u v n e o x y m r k ) # Letter distribution table shamelessly borrowed from &quot;Wordy&quot; game, #+ ca. 1992, written by a certain fine fellow named Mendel Cooper. declare -a LS numelements=${#letters[@]} randseed=&quot;$1&quot; instructions () { clear echo &quot;Welcome to QUACKEY, the anagramming word construction game.&quot;; echo echo -n &quot;Do you need instructions? (y/n) &quot;; read ans if [ &quot;$ans&quot; = &quot;y&quot; -o &quot;$ans&quot; = &quot;Y&quot; ]; then clear echo -e '\E[31;47m' # Red foreground. '\E[34;47m' for blue. cat &lt;&lt;INSTRUCTION1 QUACKEY is a variant of Perquackey [TM]. The rules are the same, but the scoring is simplified and plurals of previously played words are allowed. &quot;Vulnerable&quot; play is not yet implemented, but it is otherwise feature-complete. As the game begins, the player gets 10 letters. The object is to construct valid dictionary words of at least 3-letter length from the letterset. Each word-length category -- 3-letter, 4-letter, 5-letter, ... -- fills up with the fifth word entered, and no further words in that category are accepted. The penalty for too-short (two-letter), duplicate, unconstructable, and invalid (not in dictionary) words is -200. The same penalty applies to attempts to enter a word in a filled-up category. INSTRUCTION1 echo -n &quot;Hit ENTER for next page of instructions. &quot;; read az1 cat &lt;&lt;INSTRUCTION2 The scoring mostly corresponds to classic Perquackey: The first 3-letter word scores 60, plus 10 for each additional one. The first 4-letter word scores 120, plus 20 for each additional one. The first 5-letter word scores 200, plus 50 for each additional one. The first 6-letter word scores 300, plus 100 for each additional one. The first 7-letter word scores 500, plus 150 for each additional one. The first 8-letter word scores 750, plus 250 for each additional one. The first 9-letter word scores 1000, plus 500 for each additional one. The first 10-letter word scores 2000, plus 2000 for each additional one. Category completion bonuses are: 3-letter words 100 4-letter words 200 5-letter words 400 6-letter words 800 7-letter words 2000 8-letter words 10000 This is a simplification of the absurdly baroque Perquackey bonus scoring system. INSTRUCTION2 echo -n &quot;Hit ENTER for final page of instructions. &quot;; read az1 cat &lt;&lt;INSTRUCTION3 Hitting just ENTER for a word entry ends the game. Individual word entry is timed to a maximum of 10 seconds. *** Timing out on an entry ends the game. *** Aside from that, the game is untimed. -------------------------------------------------- Game statistics are automatically saved to a file. -------------------------------------------------- For competitive (&quot;duplicate&quot;) play, a previous letterset may be duplicated by repeating the script's random seed, command-line parameter \$1. For example, &quot;qky 7633&quot; specifies the letterset c a d i f r h u s k ... INSTRUCTION3 echo; echo -n &quot;Hit ENTER to begin game. &quot;; read az1 echo -e &quot;\033[0m&quot; # Turn off red. else clear fi clear } seed_random () { # Seed random number generator. if [ -n &quot;$randseed&quot; ] # Can specify random seed. then #+ for play in competitive mode. # RANDOM=&quot;$randseed&quot; echo &quot;RANDOM seed set to &quot;$randseed&quot;&quot; else randseed=&quot;$$&quot; # Or get random seed from process ID. echo &quot;RANDOM seed not specified, set to Process ID of script ($$).&quot; fi RANDOM=&quot;$randseed&quot; echo } get_letset () { element=0 echo -n &quot;Letterset:&quot; for lset in $(seq $NVLET) do # Pick random letters to fill out letterset. LS[element]=&quot;${letters[$((RANDOM%numelements))]}&quot; ((element++)) done echo echo &quot;${LS[@]}&quot; } add_word () { wrd=&quot;$1&quot; local idx=0 Status[0]=&quot;&quot; Status[3]=&quot;&quot; Status[4]=&quot;&quot; while [ &quot;${Words[idx]}&quot; != '' ] do if [ &quot;${Words[idx]}&quot; = &quot;$wrd&quot; ] then Status[3]=&quot;Duplicate-word-PENALTY&quot; let &quot;Score[0]= 0 - $PENALTY&quot; let &quot;Score[1]-=$PENALTY&quot; return $E_DUP fi ((idx++)) done Words[idx]=&quot;$wrd&quot; get_score } get_score() { local wlen=0 local score=0 local bonus=0 local first_word=0 local add_word=0 local numwords=0 wlen=${#wrd} numwords=${Score[wlen]} Score[2]=0 Status[4]=&quot;&quot; # Initialize &quot;bonus&quot; to 0. case &quot;$wlen&quot; in 3) first_word=60 add_word=10;; 4) first_word=120 add_word=20;; 5) first_word=200 add_word=50;; 6) first_word=300 add_word=100;; 7) first_word=500 add_word=150;; 8) first_word=750 add_word=250;; 9) first_word=1000 add_word=500;; 10) first_word=2000 add_word=2000;; # This category modified from original rules! esac ((Score[wlen]++)) if [ ${Score[wlen]} -eq $MAXCAT ] then # Category completion bonus scoring simplified! case $wlen in 3 ) bonus=100;; 4 ) bonus=200;; 5 ) bonus=400;; 6 ) bonus=800;; 7 ) bonus=2000;; 8 ) bonus=10000;; esac # Needn't worry about 9's and 10's. Status[4]=&quot;Category-$wlen-completion***BONUS***&quot; Score[2]=$bonus else Status[4]=&quot;&quot; # Erase it. fi let &quot;score = $first_word + $add_word * $numwords&quot; if [ &quot;$numwords&quot; -eq 0 ] then Score[0]=$score else Score[0]=$add_word fi # All this to distinguish last-word score #+ from total running score. let &quot;Score[1] += ${Score[0]}&quot; let &quot;Score[1] += ${Score[2]}&quot; } get_word () { local wrd='' read -t $TIMEOUT wrd # Timed read. echo $wrd } is_constructable () { # This is the most complex and difficult-to-write function. local -a local_LS=( &quot;${LS[@]}&quot; ) # Local copy of letter set. local is_found=0 local idx=0 local pos local strlen local local_word=( &quot;$1&quot; ) strlen=${#local_word} while [ &quot;$idx&quot; -lt &quot;$strlen&quot; ] do is_found=$(expr index &quot;${local_LS[*]}&quot; &quot;${local_word:idx:1}&quot;) if [ &quot;$is_found&quot; -eq &quot;$NONCONS&quot; ] # Not constructable! then echo &quot;$FAILURE&quot;; return else ((pos = ($is_found - 1) / 2)) # Compensate for spaces betw. letters! local_LS[pos]=$NULL # Zero out used letters. ((idx++)) # Bump index. fi done echo &quot;$SUCCESS&quot; return } is_valid () { # Surprisingly easy to check if word in dictionary ... fgrep -qw &quot;$1&quot; &quot;$WLIST&quot; # ... courtesy of 'grep' ... echo $? } check_word () { if [ -z &quot;$1&quot; ] then return fi Status[1]=&quot;&quot; Status[2]=&quot;&quot; Status[3]=&quot;&quot; Status[4]=&quot;&quot; iscons=$(is_constructable &quot;$1&quot;) if [ &quot;$iscons&quot; ] then Status[1]=&quot;constructable&quot; v=$(is_valid &quot;$1&quot;) if [ &quot;$v&quot; -eq &quot;$SUCCESS&quot; ] then Status[2]=&quot;valid&quot; strlen=${#1} if [ ${Score[strlen]} -eq &quot;$MAXCAT&quot; ] # Category full! then Status[3]=&quot;Category-$strlen-overflow-PENALTY&quot; return $NG fi case &quot;$strlen&quot; in 1 | 2 ) Status[3]=&quot;Two-letter-word-PENALTY&quot; return $NG;; * ) Status[3]=&quot;&quot; return $SUCCESS;; esac else Status[3]=&quot;Not-valid-PENALTY&quot; return $NG fi else Status[3]=&quot;Not-constructable-PENALTY&quot; return $NG fi ### FIXME: Streamline the above code block. } display_words () { local idx=0 local wlen0 clear echo &quot;Letterset: ${LS[@]}&quot; echo &quot;Threes: Fours: Fives: Sixes: Sevens: Eights:&quot; echo &quot;------------------------------------------------------------&quot; while [ &quot;${Words[idx]}&quot; != '' ] do wlen0=${#Words[idx]} case &quot;$wlen0&quot; in 3) ;; 4) echo -n &quot; &quot; ;; 5) echo -n &quot; &quot; ;; 6) echo -n &quot; &quot; ;; 7) echo -n &quot; &quot; ;; 8) echo -n &quot; &quot; ;; esac echo &quot;${Words[idx]}&quot; ((idx++)) done ### FIXME: The word display is pretty crude. } play () { word=&quot;Start game&quot; # Dummy word, to start ... while [ &quot;$word&quot; ] # If player just hits return (null word), do #+ then game ends. echo &quot;$word: &quot;${Status[@]}&quot;&quot; echo -n &quot;Last score: [${Score[0]}] TOTAL score: [${Score[1]}]: Next word: &quot; total=${Score[1]} word=$(get_word) check_word &quot;$word&quot; if [ &quot;$?&quot; -eq &quot;$SUCCESS&quot; ] then add_word &quot;$word&quot; else let &quot;Score[0]= 0 - $PENALTY&quot; let &quot;Score[1]-=$PENALTY&quot; fi display_words done # Exit game. ### FIXME: The play () function calls too many other functions. ### This verges on &quot;spaghetti code&quot; !!! } end_of_game () { # Save and display stats. #######################Autosave########################## savefile=qky.save.$$ # ^^ PID of script echo `date` &gt;&gt; $savefile echo &quot;Letterset # $randseed (random seed) &quot;&gt;&gt; $savefile echo -n &quot;Letterset: &quot; &gt;&gt; $savefile echo &quot;${LS[@]}&quot; &gt;&gt; $savefile echo &quot;---------&quot; &gt;&gt; $savefile echo &quot;Words constructed:&quot; &gt;&gt; $savefile echo &quot;${Words[@]}&quot; &gt;&gt; $savefile echo &gt;&gt; $savefile echo &quot;Score: $total&quot; &gt;&gt; $savefile echo &quot;Statistics for this round saved in \&quot;&quot;$savefile&quot;\&quot;&quot; ######################################################### echo &quot;Score for this round: $total&quot; echo &quot;Words: ${Words[@]}&quot; } # ---------# instructions seed_random get_letset play end_of_game # ---------# exit $? # TODO: # # 1) Clean up code! # 2) Prettify the display_words () function (maybe with widgets?). # 3) Improve the time-out ... maybe change to untimed entry, #+ but with a time limit for the overall round. # 4) An on-screen countdown timer would be nice. # 5) Implement &quot;vulnerable&quot; mode of play for compatibility with classic #+ version of the game. # 6) Improve save-to-file capability (and maybe make it optional). # 7) Fix bugs!!! # For more info, reference: # http://bash.deta.in/qky.README.html Example A-42. Nim #!/bin/bash # nim.sh: Game of Nim # Author: Mendel Cooper # Reldate: 15 July 2008 # License: GPL3 ROWS=5 # Five rows of pegs (or matchsticks). WON=91 # Exit codes to keep track of wins/losses. LOST=92 # Possibly useful if running in batch mode. QUIT=99 peg_msg= # Peg/Pegs? Rows=( 0 5 4 3 2 1 ) # Array holding play info. # ${Rows[0]} holds total number of pegs, updated after each turn. # Other array elements hold number of pegs in corresponding row. instructions () { clear tput bold echo &quot;Welcome to the game of Nim.&quot;; echo echo -n &quot;Do you need instructions? (y/n) &quot;; read ans if [ &quot;$ans&quot; = &quot;y&quot; -o &quot;$ans&quot; = &quot;Y&quot; ]; then clear echo -e '\E[33;41m' # Yellow fg., over red bg.; bold. cat &lt;&lt;INSTRUCTIONS Nim is a game with roots in the distant past. This particular variant starts with five rows of pegs. 1: | | | | | 2: | | | | 3: | | | 4: | | 5: | The number at the left identifies the row. The human player moves first, and alternates turns with the bot. A turn consists of removing at least one peg from a single row. It is permissable to remove ALL the pegs from a row. For example, in row 2, above, the player can remove 1, 2, 3, or 4 pegs. The player who removes the last peg loses. The strategy consists of trying to be the one who removes the next-to-last peg(s), leaving the loser with the final peg. To exit the game early, hit ENTER during your turn. INSTRUCTIONS echo; echo -n &quot;Hit ENTER to begin game. &quot;; read azx echo -e &quot;\033[0m&quot; # Restore display. else tput sgr0; clear fi clear } tally_up () { let &quot;Rows[0] = ${Rows[1]} + ${Rows[2]} + ${Rows[3]} + ${Rows[4]} + \ ${Rows[5]}&quot; # Add up how many pegs remaining. } display () { index=1 # Start with top row. echo while [ &quot;$index&quot; -le &quot;$ROWS&quot; ] do p=${Rows[index]} echo -n &quot;$index: &quot; # Show row number. # ------------------------------------------------ # Two concurrent inner loops. indent=$index while [ &quot;$indent&quot; -gt 0 ] do echo -n &quot; &quot; # Staggered rows. ((indent--)) # Spacing between pegs. done while [ &quot;$p&quot; -gt 0 ] do echo -n &quot;| &quot; ((p--)) done # ----------------------------------------------- echo ((index++)) done tally_up rp=${Rows[0]} if [ &quot;$rp&quot; -eq 1 ] then peg_msg=peg final_msg=&quot;Game over.&quot; else # Game not yet over . . . peg_msg=pegs final_msg=&quot;&quot; # . . . So &quot;final message&quot; is blank. fi echo &quot; $rp $peg_msg remaining.&quot; echo &quot; &quot;$final_msg&quot;&quot; echo } player_move () { echo &quot;Your move:&quot; echo -n &quot;Which row? &quot; while read idx do # Validity check, etc. if [ -z &quot;$idx&quot; ] # Hitting return quits. then echo &quot;Premature exit.&quot;; echo tput sgr0 # Restore display. exit $QUIT fi if [ &quot;$idx&quot; -gt &quot;$ROWS&quot; -o &quot;$idx&quot; -lt 1 ] # Bounds check. then echo &quot;Invalid row number!&quot; echo -n &quot;Which row? &quot; else break fi # TODO: # Add check for non-numeric input. # Also, script crashes on input outside of range of long double. # Fix this. done echo -n &quot;Remove how many? &quot; while read num do # Validity check. if [ -z &quot;$num&quot; ] then echo &quot;Premature exit.&quot;; echo tput sgr0 # Restore display. exit $QUIT fi if [ &quot;$num&quot; -gt ${Rows[idx]} -o &quot;$num&quot; -lt 1 ] then echo &quot;Cannot remove $num!&quot; echo -n &quot;Remove how many? &quot; else break fi done # TODO: # Add check for non-numeric input. # Also, script crashes on input outside of range of long double. # Fix this. let &quot;Rows[idx] -= $num&quot; display tally_up if [ ${Rows[0]} -eq 1 ] then echo &quot; Human wins!&quot; echo &quot; Congratulations!&quot; tput sgr0 # Restore display. echo exit $WON fi if [ ${Rows[0]} -eq 0 ] then # Snatching defeat from the jaws of victory . . . echo &quot; Fool!&quot; echo &quot; You just removed the last peg!&quot; echo &quot; Bot wins!&quot; tput sgr0 # Restore display. echo exit $LOST fi } bot_move () { row_b=0 while [[ $row_b -eq 0 || ${Rows[row_b]} -eq 0 ]] do row_b=$RANDOM # Choose random row. let &quot;row_b %= $ROWS&quot; done num_b=0 r0=${Rows[row_b]} if [ &quot;$r0&quot; -eq 1 ] then num_b=1 else let &quot;num_b = $r0 - 1&quot; # Leave only a single peg in the row. fi # Not a very strong strategy, #+ but probably a bit better than totally random. let &quot;Rows[row_b] -= $num_b&quot; echo -n &quot;Bot: &quot; echo &quot;Removing from row $row_b ... &quot; if [ &quot;$num_b&quot; -eq 1 ] then peg_msg=peg else peg_msg=pegs fi echo &quot; $num_b $peg_msg.&quot; display tally_up if [ ${Rows[0]} -eq 1 ] then echo &quot; Bot wins!&quot; tput sgr0 # Restore display. exit $WON fi } # ================================================== # instructions # If human player needs them . . . tput bold # Bold characters for easier viewing. display # Show game board. while [ true ] # Main loop. do # Alternate human and bot turns. player_move bot_move done # ================================================== # # Exercise: # -------- # Improve the bot's strategy. # There is, in fact, a Nim strategy that can force a win. # See the Wikipedia article on Nim: http://en.wikipedia.org/wiki/Nim # Recode the bot to use this strategy (rather difficult). # Curiosities: # ----------- # Nim played a prominent role in Alain Resnais' 1961 New Wave film, #+ Last Year at Marienbad. # # In 1978, Leo Christopherson wrote an animated version of Nim, #+ Android Nim, for the TRS-80 Model I. Example A-43. A command-line stopwatch #!/bin/sh # sw.sh # A command-line Stopwatch # Author: Pádraig Brady # http://www.pixelbeat.org/scripts/sw # (Minor reformatting by ABS Guide author.) # Used in ABS Guide with script author's permission. # Notes: # This script starts a few processes per lap, in addition to # the shell loop processing, so the assumption is made that # this takes an insignificant amount of time compared to # the response time of humans (~.1s) (or the keyboard # interrupt rate (~.05s)). # '?' for splits must be entered twice if characters # (erroneously) entered before it (on the same line). # '?' since not generating a signal may be slightly delayed # on heavily loaded systems. # Lap timings on ubuntu may be slightly delayed due to: # https://bugs.launchpad.net/bugs/62511 # Changes: # V1.0, 23 Aug 2005, Initial release # V1.1, 26 Jul 2007, Allow both splits and laps from single invocation. # Only start timer after a key is pressed. # Indicate lap number # Cache programs at startup so there is less error # due to startup delays. # V1.2, 01 Aug 2007, Work around `date` commands that don't have # nanoseconds. # Use stty to change interrupt keys to space for # laps etc. # Ignore other input as it causes problems. # V1.3, 01 Aug 2007, Testing release. # V1.4, 02 Aug 2007, Various tweaks to get working under ubuntu # and Mac OS X. # V1.5, 27 Jun 2008, set LANG=C as got vague bug report about it. export LANG=C ulimit -c 0 # No coredumps from SIGQUIT. trap '' TSTP # Ignore Ctrl-Z just in case. save_tty=`stty -g` &amp;&amp; trap &quot;stty $save_tty&quot; EXIT # Restore tty on exit. stty quit ' ' # Space for laps rather than Ctrl-\. stty eof '?' # ? for splits rather than Ctrl-D. stty -echo # Don't echo input. cache_progs() { stty &gt; /dev/null date &gt; /dev/null grep . &lt; /dev/null (echo &quot;import time&quot; | python) 2&gt; /dev/null bc &lt; /dev/null sed '' &lt; /dev/null printf '1' &gt; /dev/null /usr/bin/time false 2&gt; /dev/null cat &lt; /dev/null } cache_progs # To minimise startup delay. date +%s.%N | grep -qF 'N' &amp;&amp; use_python=1 # If `date` lacks nanoseconds. now() { if [ &quot;$use_python&quot; ]; then echo &quot;import time; print time.time()&quot; 2&gt;/dev/null | python else printf &quot;%.2f&quot; `date +%s.%N` fi } fmt_seconds() { seconds=$1 mins=`echo $seconds/60 | bc` if [ &quot;$mins&quot; != &quot;0&quot; ]; then seconds=`echo &quot;$seconds - ($mins*60)&quot; | bc` echo &quot;$mins:$seconds&quot; else echo &quot;$seconds&quot; fi } total() { end=`now` total=`echo &quot;$end - $start&quot; | bc` fmt_seconds $total } stop() { [ &quot;$lapped&quot; ] &amp;&amp; lap &quot;$laptime&quot; &quot;display&quot; total exit } lap() { laptime=`echo &quot;$1&quot; | sed -n 's/.*real[^0-9.]*\(.*\)/\1/p'` [ ! &quot;$laptime&quot; -o &quot;$laptime&quot; = &quot;0.00&quot; ] &amp;&amp; return # Signals too frequent. laptotal=`echo $laptime+0$laptotal | bc` if [ &quot;$2&quot; = &quot;display&quot; ]; then lapcount=`echo 0$lapcount+1 | bc` laptime=`fmt_seconds $laptotal` echo $laptime &quot;($lapcount)&quot; lapped=&quot;true&quot; laptotal=&quot;0&quot; fi } echo -n &quot;Space for lap | ? for split | Ctrl-C to stop | Space to start...&quot;&gt;&amp;2 while true; do trap true INT QUIT # Set signal handlers. laptime=`/usr/bin/time -p 2&gt;&amp;1 cat &gt;/dev/null` ret=$? trap '' INT QUIT # Ignore signals within this script. if [ $ret -eq 1 -o $ret -eq 2 -o $ret -eq 130 ]; then # SIGINT = stop [ ! &quot;$start&quot; ] &amp;&amp; { echo &gt;&amp;2; exit; } stop elif [ $ret -eq 3 -o $ret -eq 131 ]; then # SIGQUIT = lap if [ ! &quot;$start&quot; ]; then start=`now` || exit 1 echo &gt;&amp;2 continue fi lap &quot;$laptime&quot; &quot;display&quot; else # eof = split [ ! &quot;$start&quot; ] &amp;&amp; continue total lap &quot;$laptime&quot; # Update laptotal. fi done exit $? Example A-44. An all-purpose shell scripting homework assignment solution #!/bin/bash # homework.sh: All-purpose homework assignment solution. # Author: M. Leo Cooper # If you substitute your own name as author, then it is plagiarism, #+ possibly a lesser sin than cheating on your homework! # License: Public Domain # This script may be turned in to your instructor #+ in fulfillment of ALL shell scripting homework assignments. # It's sparsely commented, but you, the student, can easily remedy that. # The script author repudiates all responsibility! DLA=1 P1=2 P2=4 P3=7 PP1=0 PP2=8 MAXL=9 E_LZY=99 declare -a L L[0]=&quot;3 4 0 17 29 8 13 18 19 17 20 2 19 14 17 28&quot; L[1]=&quot;8 29 12 14 18 19 29 4 12 15 7 0 19 8 2 0 11 11 24 29 17 4 6 17 4 19&quot; L[2]=&quot;29 19 7 0 19 29 8 29 7 0 21 4 29 13 4 6 11 4 2 19 4 3&quot; L[3]=&quot;19 14 29 2 14 12 15 11 4 19 4 29 19 7 8 18 29&quot; L[4]=&quot;18 2 7 14 14 11 22 14 17 10 29 0 18 18 8 6 13 12 4 13 19 26&quot; L[5]=&quot;15 11 4 0 18 4 29 0 2 2 4 15 19 29 12 24 29 7 20 12 1 11 4 29&quot; L[6]=&quot;4 23 2 20 18 4 29 14 5 29 4 6 17 4 6 8 14 20 18 29&quot; L[7]=&quot;11 0 25 8 13 4 18 18 27&quot; L[8]=&quot;0 13 3 29 6 17 0 3 4 29 12 4 29 0 2 2 14 17 3 8 13 6 11 24 26&quot; L[9]=&quot;19 7 0 13 10 29 24 14 20 26&quot; declare -a \ alph=( A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . , : ' ' ) pt_lt () { echo -n &quot;${alph[$1]}&quot; echo -n -e &quot;\a&quot; sleep $DLA } b_r () { echo -e '\E[31;48m\033[1m' } cr () { echo -e &quot;\a&quot; sleep $DLA } restore () { echo -e '\033[0m' # Bold off. tput sgr0 # Normal. } p_l () { for ltr in $1 do pt_lt &quot;$ltr&quot; done } # ---------------------- b_r for i in $(seq 0 $MAXL) do p_l &quot;${L[i]}&quot; if [[ &quot;$i&quot; -eq &quot;$P1&quot; || &quot;$i&quot; -eq &quot;$P2&quot; || &quot;$i&quot; -eq &quot;$P3&quot; ]] then cr elif [[ &quot;$i&quot; -eq &quot;$PP1&quot; || &quot;$i&quot; -eq &quot;$PP2&quot; ]] then cr; cr fi done restore # ---------------------- echo exit $E_LZY # A typical example of an obfuscated script that is difficult #+ to understand, and frustrating to maintain. # In your career as a sysadmin, you'll run into these critters #+ all too often. Example A-45. The Knight's Tour #!/bin/bash # ktour.sh # author: mendel cooper # reldate: 12 Jan 2009 # license: public domain # (Not much sense GPLing something that's pretty much in the common #+ domain anyhow.) ################################################################### # The Knight's Tour, a classic problem. # # ===================================== # # The knight must move onto every square of the chess board, # # but cannot revisit any square he has already visited. # # # # And just why is Sir Knight unwelcome for a return visit? # # Could it be that he has a habit of partying into the wee hours # #+ of the morning? # # Possibly he leaves pizza crusts in the bed, empty beer bottles # #+ all over the floor, and clogs the plumbing. . . . # # # # ------------------------------------------------------------- # # # # Usage: ktour.sh [start-square] [stupid] # # # # Note that start-square can be a square number # #+ in the range 0 - 63 ... or # # a square designator in conventional chess notation, # # such as a1, f5, h3, etc. # # # # If start-square-number not supplied, # #+ then starts on a random square somewhere on the board. # # # # &quot;stupid&quot; as second parameter sets the stupid strategy. # # # # Examples: # # ktour.sh 23 starts on square #23 (h3) # # ktour.sh g6 stupid starts on square #46, # # using &quot;stupid&quot; (non-Warnsdorff) strategy. # ################################################################### DEBUG= # Set this to echo debugging info to stdout. SUCCESS=0 FAIL=99 BADMOVE=-999 FAILURE=1 LINELEN=21 # How many moves to display per line. # ---------------------------------------- # # Board array params ROWS=8 # 8 x 8 board. COLS=8 let &quot;SQUARES = $ROWS * $COLS&quot; let &quot;MAX = $SQUARES - 1&quot; MIN=0 # 64 squares on board, indexed from 0 to 63. VISITED=1 UNVISITED=-1 UNVSYM=&quot;##&quot; # ---------------------------------------- # # Global variables. startpos= # Starting position (square #, 0 - 63). currpos= # Current position. movenum= # Move number. CRITPOS=37 # Have to patch for f5 starting position! declare -i board # Use a one-dimensional array to simulate a two-dimensional one. # This can make life difficult and result in ugly kludges; see below. declare -i moves # Offsets from current knight position. initialize_board () { local idx for idx in {0..63} do board[$idx]=$UNVISITED done } print_board () { local idx echo &quot; _____________________________________&quot; for row in {7..0} # Reverse order of rows ... do #+ so it prints in chessboard order. let &quot;rownum = $row + 1&quot; # Start numbering rows at 1. echo -n &quot;$rownum |&quot; # Mark board edge with border and for column in {0..7} #+ &quot;algebraic notation.&quot; do let &quot;idx = $ROWS*$row + $column&quot; if [ ${board[idx]} -eq $UNVISITED ] then echo -n &quot;$UNVSYM &quot; ## else # Mark square with move number. printf &quot;%02d &quot; &quot;${board[idx]}&quot;; echo -n &quot; &quot; fi done echo -e -n &quot;\b\b\b|&quot; # \b is a backspace. echo # -e enables echoing escaped chars. done echo &quot; -------------------------------------&quot; echo &quot; a b c d e f g h&quot; } failure() { # Whine, then bail out. echo print_board echo echo &quot; Waah!!! Ran out of squares to move to!&quot; echo -n &quot; Knight's Tour attempt ended&quot; echo &quot; on $(to_algebraic $currpos) [square #$currpos]&quot; echo &quot; after just $movenum moves!&quot; echo exit $FAIL } xlat_coords () # Translate x/y coordinates to board position { #+ (board-array element #). # For user input of starting board position as x/y coords. # This function not used in initial release of ktour.sh. # May be used in an updated version, for compatibility with #+ standard implementation of the Knight's Tour in C, Python, etc. if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ] then return $FAIL fi local xc=$1 local yc=$2 let &quot;board_index = $xc * $ROWS + yc&quot; if [ $board_index -lt $MIN -o $board_index -gt $MAX ] then return $FAIL # Strayed off the board! else return $board_index fi } to_algebraic () # Translate board position (board-array element #) { #+ to standard algebraic notation used by chess players. if [ -z &quot;$1&quot; ] then return $FAIL fi local element_no=$1 # Numerical board position. local col_arr=( a b c d e f g h ) local row_arr=( 1 2 3 4 5 6 7 8 ) let &quot;row_no = $element_no / $ROWS&quot; let &quot;col_no = $element_no % $ROWS&quot; t1=${col_arr[col_no]}; t2=${row_arr[row_no]} local apos=$t1$t2 # Concatenate. echo $apos } from_algebraic () # Translate standard algebraic chess notation { #+ to numerical board position (board-array element #). # Or recognize numerical input &amp; return it unchanged. if [ -z &quot;$1&quot; ] then return $FAIL fi # If no command-line arg, then will default to random start pos. local ix local ix_count=0 local b_index # Board index [0-63] local alpos=&quot;$1&quot; arow=${alpos:0:1} # position = 0, length = 1 acol=${alpos:1:1} if [[ $arow =~ [[:digit:]] ]] # Numerical input? then # POSIX char class if [[ $acol =~ [[:alpha:]] ]] # Number followed by a letter? Illegal! then return $FAIL else if [ $alpos -gt $MAX ] # Off board? then return $FAIL else return $alpos # Return digit(s) unchanged . . . fi #+ if within range. fi fi if [[ $acol -eq $MIN || $acol -gt $ROWS ]] then # Outside of range 1 - 8? return $FAIL fi for ix in a b c d e f g h do # Convert column letter to column number. if [ &quot;$arow&quot; = &quot;$ix&quot; ] then break fi ((ix_count++)) # Find index count. done ((acol--)) # Decrementing converts to zero-based array. let &quot;b_index = $ix_count + $acol * $ROWS&quot; if [ $b_index -gt $MAX ] # Off board? then return $FAIL fi return $b_index } generate_moves () # Calculate all valid knight moves, { #+ relative to current position ($1), #+ and store in ${moves} array. local kt_hop=1 # One square :: short leg of knight move. local kt_skip=2 # Two squares :: long leg of knight move. local valmov=0 # Valid moves. local row_pos; let &quot;row_pos = $1 % $COLS&quot; let &quot;move1 = -$kt_skip + $ROWS&quot; # 2 sideways to-the-left, 1 up if [[ `expr $row_pos - $kt_skip` -lt $MIN ]] # An ugly, ugly kludge! then # Can't move off board. move1=$BADMOVE # Not even temporarily. else ((valmov++)) fi let &quot;move2 = -$kt_hop + $kt_skip * $ROWS&quot; # 1 sideways to-the-left, 2 up if [[ `expr $row_pos - $kt_hop` -lt $MIN ]] # Kludge continued ... then move2=$BADMOVE else ((valmov++)) fi let &quot;move3 = $kt_hop + $kt_skip * $ROWS&quot; # 1 sideways to-the-right, 2 up if [[ `expr $row_pos + $kt_hop` -ge $COLS ]] then move3=$BADMOVE else ((valmov++)) fi let &quot;move4 = $kt_skip + $ROWS&quot; # 2 sideways to-the-right, 1 up if [[ `expr $row_pos + $kt_skip` -ge $COLS ]] then move4=$BADMOVE else ((valmov++)) fi let &quot;move5 = $kt_skip - $ROWS&quot; # 2 sideways to-the-right, 1 dn if [[ `expr $row_pos + $kt_skip` -ge $COLS ]] then move5=$BADMOVE else ((valmov++)) fi let &quot;move6 = $kt_hop - $kt_skip * $ROWS&quot; # 1 sideways to-the-right, 2 dn if [[ `expr $row_pos + $kt_hop` -ge $COLS ]] then move6=$BADMOVE else ((valmov++)) fi let &quot;move7 = -$kt_hop - $kt_skip * $ROWS&quot; # 1 sideways to-the-left, 2 dn if [[ `expr $row_pos - $kt_hop` -lt $MIN ]] then move7=$BADMOVE else ((valmov++)) fi let &quot;move8 = -$kt_skip - $ROWS&quot; # 2 sideways to-the-left, 1 dn if [[ `expr $row_pos - $kt_skip` -lt $MIN ]] then move8=$BADMOVE else ((valmov++)) fi # There must be a better way to do this. local m=( $valmov $move1 $move2 $move3 $move4 $move5 $move6 $move7 $move8 ) # ${moves[0]} = number of valid moves. # ${moves[1]} ... ${moves[8]} = possible moves. echo &quot;${m[*]}&quot; # Elements of array to stdout for capture in a var. } is_on_board () # Is position actually on the board? { if [[ &quot;$1&quot; -lt &quot;$MIN&quot; || &quot;$1&quot; -gt &quot;$MAX&quot; ]] then return $FAILURE else return $SUCCESS fi } do_move () # Move the knight! { local valid_moves=0 local aapos currposl=&quot;$1&quot; lmin=$ROWS iex=0 squarel= mpm= mov= declare -a p_moves ########################## DECIDE-MOVE ############################# if [ $startpos -ne $CRITPOS ] then # CRITPOS = square #37 decide_move else # Needs a special patch for startpos=37 !!! decide_move_patched # Why this particular move and no other ??? fi #################################################################### (( ++movenum )) # Increment move count. let &quot;square = $currposl + ${moves[iex]}&quot; ################## DEBUG ############### if [ &quot;$DEBUG&quot; ] then debug # Echo debugging information. fi ############################################## if [[ &quot;$square&quot; -gt $MAX || &quot;$square&quot; -lt $MIN || ${board[square]} -ne $UNVISITED ]] then (( --movenum )) # Decrement move count, echo &quot;RAN OUT OF SQUARES!!!&quot; #+ since previous one was invalid. return $FAIL fi board[square]=$movenum currpos=$square # Update current position. ((valid_moves++)); # moves[0]=$valid_moves aapos=$(to_algebraic $square) echo -n &quot;$aapos &quot; test $(( $Moves % $LINELEN )) -eq 0 &amp;&amp; echo # Print LINELEN=21 moves per line. A valid tour shows 3 complete lines. return $valid_moves # Found a square to move to! } do_move_stupid() # Dingbat algorithm, { #+ courtesy of script author, *not* Warnsdorff. local valid_moves=0 local movloc local squareloc local aapos local cposloc=&quot;$1&quot; for movloc in {1..8} do # Move to first-found unvisited square. let &quot;squareloc = $cposloc + ${moves[movloc]}&quot; is_on_board $squareloc if [ $? -eq $SUCCESS ] &amp;&amp; [ ${board[squareloc]} -eq $UNVISITED ] then # Add conditions to above if-test to improve algorithm. (( ++movenum )) board[squareloc]=$movenum currpos=$squareloc # Update current position. ((valid_moves++)); # moves[0]=$valid_moves aapos=$(to_algebraic $squareloc) echo -n &quot;$aapos &quot; test $(( $Moves % $LINELEN )) -eq 0 &amp;&amp; echo # Print 21 moves/line. return $valid_moves # Found a square to move to! fi done return $FAIL # If no square found in all 8 loop iterations, #+ then Knight's Tour attempt ends in failure. # Dingbat algorithm will typically fail after about 30 - 40 moves, #+ but executes _much_ faster than Warnsdorff's in do_move() function. } decide_move () # Which move will we make? { # But, fails on startpos=37 !!! for mov in {1..8} do let &quot;squarel = $currposl + ${moves[mov]}&quot; is_on_board $squarel if [[ $? -eq $SUCCESS &amp;&amp; ${board[squarel]} -eq $UNVISITED ]] then # Find accessible square with least possible future moves. # This is Warnsdorff's algorithm. # What happens is that the knight wanders toward the outer edge #+ of the board, then pretty much spirals inward. # Given two or more possible moves with same value of #+ least-possible-future-moves, this implementation chooses #+ the _first_ of those moves. # This means that there is not necessarily a unique solution #+ for any given starting position. possible_moves $squarel mpm=$? p_moves[mov]=$mpm if [ $mpm -lt $lmin ] # If less than previous minimum ... then # ^^ lmin=$mpm # Update minimum. iex=$mov # Save index. fi fi done } decide_move_patched () # Decide which move to make, { # ^^^^^^^ #+ but only if startpos=37 !!! for mov in {1..8} do let &quot;squarel = $currposl + ${moves[mov]}&quot; is_on_board $squarel if [[ $? -eq $SUCCESS &amp;&amp; ${board[squarel]} -eq $UNVISITED ]] then possible_moves $squarel mpm=$? p_moves[mov]=$mpm if [ $mpm -le $lmin ] # If less-than-or equal to prev. minimum! then # ^^ lmin=$mpm iex=$mov fi fi done # There has to be a better way to do this. } possible_moves () # Calculate number of possible moves, { #+ given the current position. if [ -z &quot;$1&quot; ] then return $FAIL fi local curr_pos=$1 local valid_movl=0 local icx=0 local movl local sq declare -a movesloc movesloc=( $(generate_moves $curr_pos) ) for movl in {1..8} do let &quot;sq = $curr_pos + ${movesloc[movl]}&quot; is_on_board $sq if [ $? -eq $SUCCESS ] &amp;&amp; [ ${board[sq]} -eq $UNVISITED ] then ((valid_movl++)); fi done return $valid_movl # Found a square to move to! } strategy () { echo if [ -n &quot;$STUPID&quot; ] then for Moves in {1..63} do cposl=$1 moves=( $(generate_moves $currpos) ) do_move_stupid &quot;$currpos&quot; if [ $? -eq $FAIL ] then failure fi done fi # Don't need an &quot;else&quot; clause here, #+ because Stupid Strategy will always fail and exit! for Moves in {1..63} do cposl=$1 moves=( $(generate_moves $currpos) ) do_move &quot;$currpos&quot; if [ $? -eq $FAIL ] then failure fi done # Could have condensed above two do-loops into a single one, echo #+ but this would have slowed execution. print_board echo echo &quot;Knight's Tour ends on $(to_algebraic $currpos) [square #$currpos].&quot; return $SUCCESS } debug () { # Enable this by setting DEBUG=1 near beginning of script. local n echo &quot;=================================&quot; echo &quot; At move number $movenum:&quot; echo &quot; *** possible moves = $mpm ***&quot; # echo &quot;### square = $square ###&quot; echo &quot;lmin = $lmin&quot; echo &quot;${moves[@]}&quot; for n in {1..8} do echo -n &quot;($n):${p_moves[n]} &quot; done echo echo &quot;iex = $iex :: moves[iex] = ${moves[iex]}&quot; echo &quot;square = $square&quot; echo &quot;=================================&quot; echo } # Gives pretty complete status after ea. move. # =============================================================== # # int main () { from_algebraic &quot;$1&quot; startpos=$? if [ &quot;$startpos&quot; -eq &quot;$FAIL&quot; ] # Okay even if no $1. then # ^^^^^^^^^^^ Okay even if input -lt 0. echo &quot;No starting square specified (or illegal input).&quot; let &quot;startpos = $RANDOM % $SQUARES&quot; # 0 - 63 permissable range. fi if [ &quot;$2&quot; = &quot;stupid&quot; ] then STUPID=1 echo -n &quot; ### Stupid Strategy ###&quot; else STUPID='' echo -n &quot; *** Warnsdorff's Algorithm ***&quot; fi initialize_board movenum=0 board[startpos]=$movenum # Mark each board square with move number. currpos=$startpos algpos=$(to_algebraic $startpos) echo; echo &quot;Starting from $algpos [square #$startpos] ...&quot;; echo echo -n &quot;Moves:&quot; strategy &quot;$currpos&quot; echo exit 0 # return 0; # } # End of main() pseudo-function. # =============================================================== # # Exercises: # --------- # # 1) Extend this example to a 10 x 10 board or larger. # 2) Improve the &quot;stupid strategy&quot; by modifying the # do_move_stupid function. # Hint: Prevent straying into corner squares in early moves # (the exact opposite of Warnsdorff's algorithm!). # 3) This script could stand considerable improvement and # streamlining, especially in the poorly-written # generate_moves() function # and in the DECIDE-MOVE patch in the do_move() function. # Must figure out why standard algorithm fails for startpos=37 ... #+ but _not_ on any other, including symmetrical startpos=26. # Possibly, when calculating possible moves, counts the move back #+ to the originating square. If so, it might be a relatively easy fix. Example A-46. Magic Squares #!/bin/bash # msquare.sh # Magic Square generator (odd-order squares only!) # Author: mendel cooper # reldate: 19 Jan. 2009 # License: Public Domain # A C-program by the very talented Kwon Young Shin inspired this script. # http://user.chollian.net/~brainstm/MagicSquare.htm # Definition: A &quot;magic square&quot; is a two-dimensional array # of integers in which all the rows, columns, # and *long* diagonals add up to the same number. # Being &quot;square,&quot; the array has the same number # of rows and columns. That number is the &quot;order.&quot; # An example of a magic square of order 3 is: # 8 1 6 # 3 5 7 # 4 9 2 # All the rows, columns, and the two long diagonals add up to 15. # Globals EVEN=2 MAXSIZE=31 # 31 rows x 31 cols. E_usage=90 # Invocation error. dimension= declare -i square usage_message () { echo &quot;Usage: $0 order&quot; echo &quot; ... where \&quot;order\&quot; (square size) is an ODD integer&quot; echo &quot; in the range 3 - 31.&quot; # Actually works for squares up to order 159, #+ but large squares will not display pretty-printed in a term window. # Try increasing MAXSIZE, above. exit $E_usage } calculate () # Here's where the actual work gets done. { local row col index dimadj j k cell_val=1 dimension=$1 let &quot;dimadj = $dimension * 3&quot;; let &quot;dimadj /= 2&quot; # x 1.5, then truncate. for ((j=0; j &lt; dimension; j++)) do for ((k=0; k &lt; dimension; k++)) do # Calculate indices, then convert to 1-dim. array index. # Bash doesn't support multidimensional arrays. Pity. let &quot;col = $k - $j + $dimadj&quot;; let &quot;col %= $dimension&quot; let &quot;row = $j * 2 - $k + $dimension&quot;; let &quot;row %= $dimension&quot; let &quot;index = $row*($dimension) + $col&quot; square[$index]=cell_val; ((cell_val++)) done done } # Plain math, visualization not required. print_square () # Output square, one row at a time. { local row col idx d1 let &quot;d1 = $dimension - 1&quot; # Adjust for zero-indexed array. for row in $(seq 0 $d1) do for col in $(seq 0 $d1) do let &quot;idx = $row * $dimension + $col&quot; printf &quot;%3d &quot; &quot;${square[idx]}&quot;; echo -n &quot; &quot; done # Displays up to 13th order neatly in 80-column term window. echo # Newline after each row. done } ################################################# if [[ -z &quot;$1&quot; ]] || [[ &quot;$1&quot; -gt $MAXSIZE ]] then usage_message fi let &quot;test_even = $1 % $EVEN&quot; if [ $test_even -eq 0 ] then # Can't handle even-order squares. usage_message fi calculate $1 print_square # echo &quot;${square[@]}&quot; # DEBUG exit $? ################################################# # Exercises: # --------- # 1) Add a function to calculate the sum of each row, column, # and *long* diagonal. The sums must match. # This is the &quot;magic constant&quot; of that particular order square. # 2) Have the print_square function auto-calculate how much space # to allot between square elements for optimized display. # This might require parameterizing the &quot;printf&quot; line. # 3) Add appropriate functions for generating magic squares # with an *even* number of rows/columns. # This is non-trivial(!). # See the URL for Kwon Young Shin, above, for help. Example A-47. Fifteen Puzzle #!/bin/bash # fifteen.sh # Classic &quot;Fifteen Puzzle&quot; # Author: Antonio Macchi # Lightly edited and commented by ABS Guide author. # Used in ABS Guide with permission. (Thanks!) # The invention of the Fifteen Puzzle is attributed to either #+ Sam Loyd or Noyes Palmer Chapman. # The puzzle was wildly popular in the late 19th-century. # Object: Rearrange the numbers so they read in order, #+ from 1 - 15: ________________ # | 1 2 3 4 | # | 5 6 7 8 | # | 9 10 11 12 | # | 13 14 15 | # ---------------- ####################### # Constants # SQUARES=16 # FAIL=70 # E_PREMATURE_EXIT=80 # ####################### ######## # Data # ######## Puzzle=( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &quot; &quot; ) ############# # Functions # ############# function swap { local tmp tmp=${Puzzle[$1]} Puzzle[$1]=${Puzzle[$2]} Puzzle[$2]=$tmp } function Jumble { # Scramble the pieces at beginning of round. local i pos1 pos2 for i in {1..100} do pos1=$(( $RANDOM % $SQUARES)) pos2=$(( $RANDOM % $SQUARES )) swap $pos1 $pos2 done } function PrintPuzzle { local i1 i2 puzpos puzpos=0 clear echo &quot;Enter quit to exit.&quot;; echo # Better that than Ctl-C. echo &quot;,----.----.----.----.&quot; # Top border. for i1 in {1..4} do for i2 in {1..4} do printf &quot;| %2s &quot; &quot;${Puzzle[$puzpos]}&quot; (( puzpos++ )) done echo &quot;|&quot; # Right-side border. test $i1 = 4 || echo &quot;+----+----+----+----+&quot; done echo &quot;'----'----'----'----'&quot; # Bottom border. } function GetNum { # Test for valid input. local puznum garbage while true do echo &quot;Moves: $moves&quot; # Also counts invalid moves. read -p &quot;Number to move: &quot; puznum garbage if [ &quot;$puznum&quot; = &quot;quit&quot; ]; then echo; exit $E_PREMATURE_EXIT; fi test -z &quot;$puznum&quot; -o -n &quot;${puznum//[0-9]/}&quot; &amp;&amp; continue test $puznum -gt 0 -a $puznum -lt $SQUARES &amp;&amp; break done return $puznum } function GetPosFromNum { # $1 = puzzle-number local puzpos for puzpos in {0..15} do test &quot;${Puzzle[$puzpos]}&quot; = &quot;$1&quot; &amp;&amp; break done return $puzpos } function Move { # $1=Puzzle-pos test $1 -gt 3 &amp;&amp; test &quot;${Puzzle[$(( $1 - 4 ))]}&quot; = &quot; &quot;\ &amp;&amp; swap $1 $(( $1 - 4 )) &amp;&amp; return 0 test $(( $1%4 )) -ne 3 &amp;&amp; test &quot;${Puzzle[$(( $1 + 1 ))]}&quot; = &quot; &quot;\ &amp;&amp; swap $1 $(( $1 + 1 )) &amp;&amp; return 0 test $1 -lt 12 &amp;&amp; test &quot;${Puzzle[$(( $1 + 4 ))]}&quot; = &quot; &quot;\ &amp;&amp; swap $1 $(( $1 + 4 )) &amp;&amp; return 0 test $(( $1%4 )) -ne 0 &amp;&amp; test &quot;${Puzzle[$(( $1 - 1 ))]}&quot; = &quot; &quot; &amp;&amp;\ swap $1 $(( $1 - 1 )) &amp;&amp; return 0 return 1 } function Solved { local pos for pos in {0..14} do test &quot;${Puzzle[$pos]}&quot; = $(( $pos + 1 )) || return $FAIL # Check whether number in each square = square number. done return 0 # Successful solution. } ################### MAIN () #######################{ moves=0 Jumble while true # Loop continuously until puzzle solved. do echo; echo PrintPuzzle echo while true do GetNum puznum=$? GetPosFromNum $puznum puzpos=$? ((moves++)) Move $puzpos &amp;&amp; break done Solved &amp;&amp; break done echo;echo PrintPuzzle echo; echo &quot;BRAVO!&quot;; echo exit 0 ###################################################} # Exercise: # -------- # Rewrite the script to display the letters A - O, #+ rather than the numbers 1 - 15. Example A-48. The Towers of Hanoi, graphic version #! /bin/bash # The Towers Of Hanoi # Original script (hanoi.bash) copyright (C) 2000 Amit Singh. # All Rights Reserved. # http://hanoi.kernelthread.com # hanoi2.bash # Version 2.00: modded for ASCII-graphic display. # Version 2.01: fixed no command-line param bug. # Uses code contributed by Antonio Macchi, #+ with heavy editing by ABS Guide author. # This variant falls under the original copyright, see above. # Used in ABS Guide with Amit Singh's permission (thanks!). ### Variables &amp;&amp; sanity check ### E_NOPARAM=86 E_BADPARAM=87 # Illegal no. of disks passed to script. E_NOEXIT=88 DISKS=${1:-$E_NOPARAM} # Must specify how many disks. Moves=0 MWIDTH=7 MARGIN=2 # Arbitrary &quot;magic&quot; constants; work okay for relatively small # of disks. # BASEWIDTH=51 # Original code. let &quot;basewidth = $MWIDTH * $DISKS + $MARGIN&quot; # &quot;Base&quot; beneath rods. # Above &quot;algorithm&quot; could likely stand improvement. ### Display variables ### let &quot;disks1 = $DISKS - 1&quot; let &quot;spaces1 = $DISKS&quot; let &quot;spaces2 = 2 * $DISKS&quot; let &quot;lastmove_t = $DISKS - 1&quot; # Final move? declare -a Rod1 Rod2 Rod3 ### ######################### ### function repeat { # $1=char $2=number of repetitions local n # Repeat-print a character. for (( n=0; n&lt;$2; n++ )); do echo -n &quot;$1&quot; done } function FromRod { local rod summit weight sequence while true; do rod=$1 test ${rod/[^123]/} || continue sequence=$(echo $(seq 0 $disks1 | tac)) for summit in $sequence; do eval weight=\${Rod${rod}[$summit]} test $weight -ne 0 &amp;&amp; { echo &quot;$rod $summit $weight&quot;; return; } done done } function ToRod { # $1=previous (FromRod) weight local rod firstfree weight sequence while true; do rod=$2 test ${rod/[^123]} || continue sequence=$(echo $(seq 0 $disks1 | tac)) for firstfree in $sequence; do eval weight=\${Rod${rod}[$firstfree]} test $weight -gt 0 &amp;&amp; { (( firstfree++ )); break; } done test $weight -gt $1 -o $firstfree = 0 &amp;&amp; { echo &quot;$rod $firstfree&quot;; return; } done } function PrintRods { local disk rod empty fill sp sequence repeat &quot; &quot; $spaces1 echo -n &quot;|&quot; repeat &quot; &quot; $spaces2 echo -n &quot;|&quot; repeat &quot; &quot; $spaces2 echo &quot;|&quot; sequence=$(echo $(seq 0 $disks1 | tac)) for disk in $sequence; do for rod in {1..3}; do eval empty=$(( $DISKS - (Rod${rod}[$disk] / 2) )) eval fill=\${Rod${rod}[$disk]} repeat &quot; &quot; $empty test $fill -gt 0 &amp;&amp; repeat &quot;*&quot; $fill || echo -n &quot;|&quot; repeat &quot; &quot; $empty done echo done repeat &quot;=&quot; $basewidth # Print &quot;base&quot; beneath rods. echo } display () { echo PrintRods # Get rod-number, summit and weight first=( `FromRod $1` ) eval Rod${first[0]}[${first[1]}]=0 # Get rod-number and first-free position second=( `ToRod ${first[2]} $2` ) eval Rod${second[0]}[${second[1]}]=${first[2]} echo; echo; echo if [ &quot;${Rod3[lastmove_t]}&quot; = 1 ] then # Last move? If yes, then display final position. echo &quot;+ Final Position: $Moves moves&quot;; echo PrintRods fi } # From here down, almost the same as original (hanoi.bash) script. dohanoi() { # Recursive function. case $1 in 0) ;; *) dohanoi &quot;$(($1-1))&quot; $2 $4 $3 if [ &quot;$Moves&quot; -ne 0 ] then echo &quot;+ Position after move $Moves&quot; fi ((Moves++)) echo -n &quot; Next move will be: &quot; echo $2 &quot;--&gt;&quot; $3 display $2 $3 dohanoi &quot;$(($1-1))&quot; $4 $3 $2 ;; esac } setup_arrays () { local dim n elem let &quot;dim1 = $1 - 1&quot; elem=$dim1 for n in $(seq 0 $dim1) do let &quot;Rod1[$elem] = 2 * $n + 1&quot; Rod2[$n]=0 Rod3[$n]=0 ((elem--)) done } ### Main ### setup_arrays $DISKS echo; echo &quot;+ Start Position&quot; case $# in 1) case $(($1&gt;0)) in # Must have at least one disk. 1) disks=$1 dohanoi $1 1 3 2 # Total moves = 2^n - 1, where n = number of disks. echo exit 0; ;; *) echo &quot;$0: Illegal value for number of disks&quot;; exit $E_BADPARAM; ;; esac ;; *) clear echo &quot;usage: $0 N&quot; echo &quot; Where \&quot;N\&quot; is the number of disks.&quot; exit $E_NOPARAM; ;; esac exit $E_NOEXIT # Shouldn't exit here. # Note: # Redirect script output to a file, otherwise it scrolls off display. Example A-49. The Towers of Hanoi, alternate graphic version #! /bin/bash # The Towers Of Hanoi # Original script (hanoi.bash) copyright (C) 2000 Amit Singh. # All Rights Reserved. # http://hanoi.kernelthread.com # hanoi2.bash # Version 2: modded for ASCII-graphic display. # Uses code contributed by Antonio Macchi, #+ with heavy editing by ABS Guide author. # This variant also falls under the original copyright, see above. # Used in ABS Guide with Amit Singh's permission (thanks!). # Variables # E_NOPARAM=86 E_BADPARAM=87 # Illegal no. of disks passed to script. E_NOEXIT=88 DELAY=2 # Interval, in seconds, between moves. Change, if desired. DISKS=$1 Moves=0 MWIDTH=7 MARGIN=2 # Arbitrary &quot;magic&quot; constants, work okay for relatively small # of disks. # BASEWIDTH=51 # Original code. let &quot;basewidth = $MWIDTH * $DISKS + $MARGIN&quot; # &quot;Base&quot; beneath rods. # Above &quot;algorithm&quot; could likely stand improvement. # Display variables. let &quot;disks1 = $DISKS - 1&quot; let &quot;spaces1 = $DISKS&quot; let &quot;spaces2 = 2 * $DISKS&quot; let &quot;lastmove_t = $DISKS - 1&quot; # Final move? declare -a Rod1 Rod2 Rod3 ################# function repeat { # $1=char $2=number of repetitions local n # Repeat-print a character. for (( n=0; n&lt;$2; n++ )); do echo -n &quot;$1&quot; done } function FromRod { local rod summit weight sequence while true; do rod=$1 test ${rod/[^123]/} || continue sequence=$(echo $(seq 0 $disks1 | tac)) for summit in $sequence; do eval weight=\${Rod${rod}[$summit]} test $weight -ne 0 &amp;&amp; { echo &quot;$rod $summit $weight&quot;; return; } done done } function ToRod { # $1=previous (FromRod) weight local rod firstfree weight sequence while true; do rod=$2 test ${rod/[^123]} || continue sequence=$(echo $(seq 0 $disks1 | tac)) for firstfree in $sequence; do eval weight=\${Rod${rod}[$firstfree]} test $weight -gt 0 &amp;&amp; { (( firstfree++ )); break; } done test $weight -gt $1 -o $firstfree = 0 &amp;&amp; { echo &quot;$rod $firstfree&quot;; return; } done } function PrintRods { local disk rod empty fill sp sequence tput cup 5 0 repeat &quot; &quot; $spaces1 echo -n &quot;|&quot; repeat &quot; &quot; $spaces2 echo -n &quot;|&quot; repeat &quot; &quot; $spaces2 echo &quot;|&quot; sequence=$(echo $(seq 0 $disks1 | tac)) for disk in $sequence; do for rod in {1..3}; do eval empty=$(( $DISKS - (Rod${rod}[$disk] / 2) )) eval fill=\${Rod${rod}[$disk]} repeat &quot; &quot; $empty test $fill -gt 0 &amp;&amp; repeat &quot;*&quot; $fill || echo -n &quot;|&quot; repeat &quot; &quot; $empty done echo done repeat &quot;=&quot; $basewidth # Print &quot;base&quot; beneath rods. echo } display () { echo PrintRods # Get rod-number, summit and weight first=( `FromRod $1` ) eval Rod${first[0]}[${first[1]}]=0 # Get rod-number and first-free position second=( `ToRod ${first[2]} $2` ) eval Rod${second[0]}[${second[1]}]=${first[2]} if [ &quot;${Rod3[lastmove_t]}&quot; = 1 ] then # Last move? If yes, then display final position. tput cup 0 0 echo; echo &quot;+ Final Position: $Moves moves&quot; PrintRods fi sleep $DELAY } # From here down, almost the same as original (hanoi.bash) script. dohanoi() { # Recursive function. case $1 in 0) ;; *) dohanoi &quot;$(($1-1))&quot; $2 $4 $3 if [ &quot;$Moves&quot; -ne 0 ] then tput cup 0 0 echo; echo &quot;+ Position after move $Moves&quot; fi ((Moves++)) echo -n &quot; Next move will be: &quot; echo $2 &quot;--&gt;&quot; $3 display $2 $3 dohanoi &quot;$(($1-1))&quot; $4 $3 $2 ;; esac } setup_arrays () { local dim n elem let &quot;dim1 = $1 - 1&quot; elem=$dim1 for n in $(seq 0 $dim1) do let &quot;Rod1[$elem] = 2 * $n + 1&quot; Rod2[$n]=0 Rod3[$n]=0 ((elem--)) done } ### Main ### trap &quot;tput cnorm&quot; 0 tput civis clear setup_arrays $DISKS tput cup 0 0 echo; echo &quot;+ Start Position&quot; case $# in 1) case $(($1&gt;0)) in # Must have at least one disk. 1) disks=$1 dohanoi $1 1 3 2 # Total moves = 2^n - 1, where n = # of disks. echo exit 0; ;; *) echo &quot;$0: Illegal value for number of disks&quot;; exit $E_BADPARAM; ;; esac ;; *) echo &quot;usage: $0 N&quot; echo &quot; Where \&quot;N\&quot; is the number of disks.&quot; exit $E_NOPARAM; ;; esac exit $E_NOEXIT # Shouldn't exit here. # Exercise: # -------- # There is a minor bug in the script that causes the display of #+ the next-to-last move to be skipped. #+ Fix this. Example A-50. An alternate version of the getopt-simple.sh script #!/bin/bash # UseGetOpt.sh # Author: Peggy Russell &lt;prusselltechgroup@gmail.com&gt; UseGetOpt () { declare inputOptions declare -r E_OPTERR=85 declare -r ScriptName=${0##*/} declare -r ShortOpts=&quot;adf:hlt&quot; declare -r LongOpts=&quot;aoption,debug,file:,help,log,test&quot; DoSomething () { echo &quot;The function name is '${FUNCNAME}'&quot; # Recall that $FUNCNAME is an internal variable #+ holding the name of the function it is in. } inputOptions=$(getopt -o &quot;${ShortOpts}&quot; --long \ &quot;${LongOpts}&quot; --name &quot;${ScriptName}&quot; -- &quot;${@}&quot;) if [[ ($? -ne 0) || ($# -eq 0) ]]; then echo &quot;Usage: ${ScriptName} [-dhlt] {OPTION...}&quot; exit $E_OPTERR fi eval set -- &quot;${inputOptions}&quot; # Only for educational purposes. Can be removed. #----------------------------------------------- echo &quot;++ Test: Number of arguments: [$#]&quot; echo '++ Test: Looping through &quot;$@&quot;' for a in &quot;$@&quot;; do echo &quot; ++ [$a]&quot; done #----------------------------------------------- while true; do case &quot;${1}&quot; in --aoption | -a) # Argument found. echo &quot;Option [$1]&quot; ;; --debug | -d) # Enable informational messages. echo &quot;Option [$1] Debugging enabled&quot; ;; --file | -f) # Check for optional argument. case &quot;$2&quot; in #+ Double colon is optional argument. &quot;&quot;) # Not there. echo &quot;Option [$1] Use default&quot; shift ;; *) # Got it echo &quot;Option [$1] Using input [$2]&quot; shift ;; esac DoSomething ;; --log | -l) # Enable Logging. echo &quot;Option [$1] Logging enabled&quot; ;; --test | -t) # Enable testing. echo &quot;Option [$1] Testing enabled&quot; ;; --help | -h) echo &quot;Option [$1] Display help&quot; break ;; --) # Done! $# is argument number for &quot;--&quot;, $@ is &quot;--&quot; echo &quot;Option [$1] Dash Dash&quot; break ;; *) echo &quot;Major internal error!&quot; exit 8 ;; esac echo &quot;Number of arguments: [$#]&quot; shift done shift # Only for educational purposes. Can be removed. #---------------------------------------------------------------------- echo &quot;++ Test: Number of arguments after \&quot;--\&quot; is [$#] They are: [$@]&quot; echo '++ Test: Looping through &quot;$@&quot;' for a in &quot;$@&quot;; do echo &quot; ++ [$a]&quot; done #---------------------------------------------------------------------- } ################################### M A I N ######################## # If you remove &quot;function UseGetOpt () {&quot; and corresponding &quot;}&quot;, #+ you can uncomment the &quot;exit 0&quot; line below, and invoke this script #+ with the various options from the command-line. #------------------------------------------------------------------- # exit 0 echo &quot;Test 1&quot; UseGetOpt -f myfile one &quot;two three&quot; four echo;echo &quot;Test 2&quot; UseGetOpt -h echo;echo &quot;Test 3 - Short Options&quot; UseGetOpt -adltf myfile anotherfile echo;echo &quot;Test 4 - Long Options&quot; UseGetOpt --aoption --debug --log --test --file myfile anotherfile exit Example A-51. The version of the UseGetOpt.sh example used in the Tab Expansion appendix #!/bin/bash # UseGetOpt-2.sh # Modified version of the script for illustrating tab-expansion #+ of command-line options. # See the &quot;Introduction to Tab Expansion&quot; appendix. # Possible options: -a -d -f -l -t -h #+ --aoption, --debug --file --log --test -- help -- # Author of original script: Peggy Russell &lt;prusselltechgroup@gmail.com&gt; # UseGetOpt () { declare inputOptions declare -r E_OPTERR=85 declare -r ScriptName=${0##*/} declare -r ShortOpts=&quot;adf:hlt&quot; declare -r LongOpts=&quot;aoption,debug,file:,help,log,test&quot; DoSomething () { echo &quot;The function name is '${FUNCNAME}'&quot; } inputOptions=$(getopt -o &quot;${ShortOpts}&quot; --long \ &quot;${LongOpts}&quot; --name &quot;${ScriptName}&quot; -- &quot;${@}&quot;) if [[ ($? -ne 0) || ($# -eq 0) ]]; then echo &quot;Usage: ${ScriptName} [-dhlt] {OPTION...}&quot; exit $E_OPTERR fi eval set -- &quot;${inputOptions}&quot; while true; do case &quot;${1}&quot; in --aoption | -a) # Argument found. echo &quot;Option [$1]&quot; ;; --debug | -d) # Enable informational messages. echo &quot;Option [$1] Debugging enabled&quot; ;; --file | -f) # Check for optional argument. case &quot;$2&quot; in #+ Double colon is optional argument. &quot;&quot;) # Not there. echo &quot;Option [$1] Use default&quot; shift ;; *) # Got it echo &quot;Option [$1] Using input [$2]&quot; shift ;; esac DoSomething ;; --log | -l) # Enable Logging. echo &quot;Option [$1] Logging enabled&quot; ;; --test | -t) # Enable testing. echo &quot;Option [$1] Testing enabled&quot; ;; --help | -h) echo &quot;Option [$1] Display help&quot; break ;; --) # Done! $# is argument number for &quot;--&quot;, $@ is &quot;--&quot; echo &quot;Option [$1] Dash Dash&quot; break ;; *) echo &quot;Major internal error!&quot; exit 8 ;; esac echo &quot;Number of arguments: [$#]&quot; shift done shift # } exit Example A-52. Cycling through all the possible color backgrounds #!/bin/bash # show-all-colors.sh # Displays all 256 possible background colors, using ANSI escape sequences. # Author: Chetankumar Phulpagare # Used in ABS Guide with permission. T1=8 T2=6 T3=36 offset=0 for num1 in {0..7} do { for num2 in {0,1} do { shownum=`echo &quot;$offset + $T1 * ${num2} + $num1&quot; | bc` echo -en &quot;\E[0;48;5;${shownum}m color ${shownum} \E[0m&quot; } done echo } done offset=16 for num1 in {0..5} do { for num2 in {0..5} do { for num3 in {0..5} do { shownum=`echo &quot;$offset + $T2 * ${num3} \ + $num2 + $T3 * ${num1}&quot; | bc` echo -en &quot;\E[0;48;5;${shownum}m color ${shownum} \E[0m&quot; } done echo } done } done offset=232 for num1 in {0..23} do { shownum=`expr $offset + $num1` echo -en &quot;\E[0;48;5;${shownum}m ${shownum}\E[0m&quot; } done echo Example A-53. Morse Code Practice #!/bin/bash # sam.sh, v. .01a # Still Another Morse (code training script) # With profuse apologies to Sam (F.B.) Morse. # Author: Mendel Cooper # License: GPL3 # Reldate: 05/25/11 # Morse code training script. # Converts arguments to audible dots and dashes. # Note: lowercase input only at this time. # Get the wav files from the source tarball: # http://bash.deta.in/abs-guide-latest.tar.bz2 DOT='soundfiles/dot.wav' DASH='soundfiles/dash.wav' # Maybe move soundfiles to /usr/local/sounds? LETTERSPACE=300000 # Microseconds. WORDSPACE=980000 # Nice and slow, for beginners. Maybe 5 wpm? EXIT_MSG=&quot;May the Morse be with you!&quot; E_NOARGS=75 # No command-line args? declare -A morse # Associative array! # ======================================= # morse[a]=&quot;dot; dash&quot; morse[b]=&quot;dash; dot; dot; dot&quot; morse[c]=&quot;dash; dot; dash; dot&quot; morse[d]=&quot;dash; dot; dot&quot; morse[e]=&quot;dot&quot; morse[f]=&quot;dot; dot; dash; dot&quot; morse[g]=&quot;dash; dash; dot&quot; morse[h]=&quot;dot; dot; dot; dot&quot; morse[i]=&quot;dot; dot;&quot; morse[j]=&quot;dot; dash; dash; dash&quot; morse[k]=&quot;dash; dot; dash&quot; morse[l]=&quot;dot; dash; dot; dot&quot; morse[m]=&quot;dash; dash&quot; morse[n]=&quot;dash; dot&quot; morse[o]=&quot;dash; dash; dash&quot; morse[p]=&quot;dot; dash; dash; dot&quot; morse[q]=&quot;dash; dash; dot; dash&quot; morse[r]=&quot;dot; dash; dot&quot; morse[s]=&quot;dot; dot; dot&quot; morse[t]=&quot;dash&quot; morse[u]=&quot;dot; dot; dash&quot; morse[v]=&quot;dot; dot; dot; dash&quot; morse[w]=&quot;dot; dash; dash&quot; morse[x]=&quot;dash; dot; dot; dash&quot; morse[y]=&quot;dash; dot; dash; dash&quot; morse[z]=&quot;dash; dash; dot; dot&quot; morse[0]=&quot;dash; dash; dash; dash; dash&quot; morse[1]=&quot;dot; dash; dash; dash; dash&quot; morse[2]=&quot;dot; dot; dash; dash; dash&quot; morse[3]=&quot;dot; dot; dot; dash; dash&quot; morse[4]=&quot;dot; dot; dot; dot; dash&quot; morse[5]=&quot;dot; dot; dot; dot; dot&quot; morse[6]=&quot;dash; dot; dot; dot; dot&quot; morse[7]=&quot;dash; dash; dot; dot; dot&quot; morse[8]=&quot;dash; dash; dash; dot; dot&quot; morse[9]=&quot;dash; dash; dash; dash; dot&quot; # The following must be escaped or quoted. morse[?]=&quot;dot; dot; dash; dash; dot; dot&quot; morse[.]=&quot;dot; dash; dot; dash; dot; dash&quot; morse[,]=&quot;dash; dash; dot; dot; dash; dash&quot; morse[/]=&quot;dash; dot; dot; dash; dot&quot; morse[\@]=&quot;dot; dash; dash; dot; dash; dot&quot; # ======================================= # play_letter () { eval ${morse[$1]} # Play dots, dashes from appropriate sound files. # Why is 'eval' necessary here? usleep $LETTERSPACE # Pause in between letters. } extract_letters () { # Slice string apart, letter by letter. local pos=0 # Starting at left end of string. local len=1 # One letter at a time. strlen=${#1} while [ $pos -lt $strlen ] do letter=${1:pos:len} # ^^^^^^^^^^^^ See Chapter 10.1. play_letter $letter echo -n &quot;*&quot; # Mark letter just played. ((pos++)) done } ######### Play the sounds ############ dot() { aplay &quot;$DOT&quot; 2&amp;&gt;/dev/null; } dash() { aplay &quot;$DASH&quot; 2&amp;&gt;/dev/null; } ###################################### no_args () { declare -a usage usage=( $0 word1 word2 ... ) echo &quot;Usage:&quot;; echo echo ${usage[*]} for index in 0 1 2 3 do extract_letters ${usage[index]} usleep $WORDSPACE echo -n &quot; &quot; # Print space between words. done # echo &quot;Usage: $0 word1 word2 ... &quot; echo; echo } # int main() # { clear # Clear the terminal screen. echo &quot; SAM&quot; echo &quot;Still Another Morse code trainer&quot; echo &quot; Author: Mendel Cooper&quot; echo; echo; if [ -z &quot;$1&quot; ] then no_args echo; echo; echo &quot;$EXIT_MSG&quot;; echo exit $E_NOARGS fi echo; echo &quot;$*&quot; # Print text that will be played. until [ -z &quot;$1&quot; ] do extract_letters $1 shift # On to next word. usleep $WORDSPACE echo -n &quot; &quot; # Print space between words. done echo; echo; echo &quot;$EXIT_MSG&quot;; echo exit 0 # } # Exercises: # --------- # 1) Have the script accept either lowercase or uppercase words #+ as arguments. Hint: Use 'tr' . . . # 2) Have the script optionally accept input from a text file. Example A-54. Base64 encoding/decoding #!/bin/bash # base64.sh: Bash implementation of Base64 encoding and decoding. # # Copyright (c) 2011 vladz &lt;vladz@devzero.fr&gt; # Used in ABSG with permission (thanks!). # # Encode or decode original Base64 (and also Base64url) #+ from STDIN to STDOUT. # # Usage: # # Encode # $ ./base64.sh &lt; binary-file &gt; binary-file.base64 # Decode # $ ./base64.sh -d &lt; binary-file.base64 &gt; binary-file # # Reference: # # [1] RFC4648 - &quot;The Base16, Base32, and Base64 Data Encodings&quot; # http://tools.ietf.org/html/rfc4648#section-5 # The base64_charset[] array contains entire base64 charset, # and additionally the character &quot;=&quot; ... base64_charset=( {A..Z} {a..z} {0..9} + / = ) # Nice illustration of brace expansion. # Uncomment the ### line below to use base64url encoding instead of #+ original base64. ### base64_charset=( {A..Z} {a..z} {0..9} - _ = ) # Output text width when encoding #+ (64 characters, just like openssl output). text_width=64 function display_base64_char { # Convert a 6-bit number (between 0 and 63) into its corresponding values #+ in Base64, then display the result with the specified text width. printf &quot;${base64_charset[$1]}&quot;; (( width++ )) (( width % text_width == 0 )) &amp;&amp; printf &quot;\n&quot; } function encode_base64 { # Encode three 8-bit hexadecimal codes into four 6-bit numbers. # We need two local int array variables: # c8[]: to store the codes of the 8-bit characters to encode # c6[]: to store the corresponding encoded values on 6-bit declare -a -i c8 c6 # Convert hexadecimal to decimal. c8=( $(printf &quot;ibase=16; ${1:0:2}\n${1:2:2}\n${1:4:2}\n&quot; | bc) ) # Let's play with bitwise operators #+ (3x8-bit into 4x6-bits conversion). (( c6[0] = c8[0] &gt;&gt; 2 )) (( c6[1] = ((c8[0] &amp; 3) &lt;&lt; 4) | (c8[1] &gt;&gt; 4) )) # The following operations depend on the c8 element number. case ${#c8[*]} in 3) (( c6[2] = ((c8[1] &amp; 15) &lt;&lt; 2) | (c8[2] &gt;&gt; 6) )) (( c6[3] = c8[2] &amp; 63 )) ;; 2) (( c6[2] = (c8[1] &amp; 15) &lt;&lt; 2 )) (( c6[3] = 64 )) ;; 1) (( c6[2] = c6[3] = 64 )) ;; esac for char in ${c6[@]}; do display_base64_char ${char} done } function decode_base64 { # Decode four base64 characters into three hexadecimal ASCII characters. # c8[]: to store the codes of the 8-bit characters # c6[]: to store the corresponding Base64 values on 6-bit declare -a -i c8 c6 # Find decimal value corresponding to the current base64 character. for current_char in ${1:0:1} ${1:1:1} ${1:2:1} ${1:3:1}; do [ &quot;${current_char}&quot; = &quot;=&quot; ] &amp;&amp; break position=0 while [ &quot;${current_char}&quot; != &quot;${base64_charset[${position}]}&quot; ]; do (( position++ )) done c6=( ${c6[*]} ${position} ) done # Let's play with bitwise operators #+ (4x8-bit into 3x6-bits conversion). (( c8[0] = (c6[0] &lt;&lt; 2) | (c6[1] &gt;&gt; 4) )) # The next operations depends on the c6 elements number. case ${#c6[*]} in 3) (( c8[1] = ( (c6[1] &amp; 15) &lt;&lt; 4) | (c6[2] &gt;&gt; 2) )) (( c8[2] = (c6[2] &amp; 3) &lt;&lt; 6 )); unset c8[2] ;; 4) (( c8[1] = ( (c6[1] &amp; 15) &lt;&lt; 4) | (c6[2] &gt;&gt; 2) )) (( c8[2] = ( (c6[2] &amp; 3) &lt;&lt; 6) | c6[3] )) ;; esac for char in ${c8[*]}; do printf &quot;\x$(printf &quot;%x&quot; ${char})&quot; done } # main () if [ &quot;$1&quot; = &quot;-d&quot; ]; then # decode # Reformat STDIN in pseudo 4x6-bit groups. content=$(cat - | tr -d &quot;\n&quot; | sed -r &quot;s/(.{4})/\1 /g&quot;) for chars in ${content}; do decode_base64 ${chars}; done else # Make a hexdump of stdin and reformat in 3-byte groups. content=$(cat - | xxd -ps -u | sed -r &quot;s/(\w{6})/\1 /g&quot; | tr -d &quot;\n&quot;) for chars in ${content}; do encode_base64 ${chars}; done echo fi Example A-55. Inserting text in a file using sed #!/bin/bash # Prepends a string at a specified line #+ in files with names ending in &quot;sample&quot; #+ in the current working directory. # 000000000000000000000000000000000000 # This script overwrites files! # Be careful running it in a directory #+ where you have important files!!! # 000000000000000000000000000000000000 # Create a couple of files to operate on ... # 01sample # 02sample # ... etc. # These files must not be empty, else the prepend will not work. lineno=1 # Append at line 1 (prepend). filespec=&quot;*sample&quot; # Filename pattern to operate on. string=$(whoami) # Will set your username as string to insert. # It could just as easily be any other string. for file in $filespec # Specify which files to alter. do # ^^^^^^^^^ sed -i &quot;&quot;$lineno&quot;i &quot;$string&quot;&quot; $file # ^^ -i option edits files in-place. # ^ Insert (i) command. echo &quot;&quot;$file&quot; altered!&quot; done echo &quot;Warning: files possibly clobbered!&quot; exit 0 # Exercise: # Add error checking to this script. # It needs it badly. Example A-56. The Gronsfeld Cipher #!/bin/bash # gronsfeld.bash # License: GPL3 # Reldate 06/23/11 # This is an implementation of the Gronsfeld Cipher. # It's essentially a stripped-down variant of the #+ polyalphabetic Vigenère Tableau, but with only 10 alphabets. # The classic Gronsfeld has a numeric sequence as the key word, #+ but here we substitute a letter string, for ease of use. # Allegedly, this cipher was invented by the eponymous Count Gronsfeld #+ in the 17th Century. It was at one time considered to be unbreakable. # Note that this is ###not### a secure cipher by modern standards. # Global Variables # Enc_suffix=&quot;29379&quot; # Encrypted text output with this 5-digit suffix. # This functions as a decryption flag, #+ and when used to generate passwords adds security. Default_key=&quot;gronsfeldk&quot; # The script uses this if key not entered below # (at &quot;Keychain&quot;). # Change the above two values frequently #+ for added security. GROUPLEN=5 # Output in groups of 5 letters, per tradition. alpha1=( abcdefghijklmnopqrstuvwxyz ) alpha2=( {A..Z} ) # Output in all caps, per tradition. # Use alpha2=( {a..z} ) for password generator. wraplen=26 # Wrap around if past end of alphabet. dflag= # Decrypt flag (set if $Enc_suffix present). E_NOARGS=76 # Missing command-line args? DEBUG=77 # Debugging flag. declare -a offsets # This array holds the numeric shift values for #+ encryption/decryption. ########Keychain######### key= ### Put key here!!! # 10 characters! ######################### # Function : () { # Encrypt or decrypt, depending on whether $dflag is set. # Why &quot;: ()&quot; as a function name? Just to prove that it can be done. local idx keydx mlen off1 shft local plaintext=&quot;$1&quot; local mlen=${#plaintext} for (( idx=0; idx&lt;$mlen; idx++ )) do let &quot;keydx = $idx % $keylen&quot; shft=${offsets[keydx]} if [ -n &quot;$dflag&quot; ] then # Decrypt! let &quot;off1 = $(expr index &quot;${alpha1[*]}&quot; ${plaintext:idx:1}) - $shft&quot; # Shift backward to decrypt. else # Encrypt! let &quot;off1 = $(expr index &quot;${alpha1[*]}&quot; ${plaintext:idx:1}) + $shft&quot; # Shift forward to encrypt. test $(( $idx % $GROUPLEN)) = 0 &amp;&amp; echo -n &quot; &quot; # Groups of 5 letters. # Comment out above line for output as a string without whitespace, #+ for example, if using the script as a password generator. fi ((off1--)) # Normalize. Why is this necessary? if [ $off1 -lt 0 ] then # Catch negative indices. let &quot;off1 += $wraplen&quot; fi ((off1 %= $wraplen)) # Wrap around if past end of alphabet. echo -n &quot;${alpha2[off1]}&quot; done if [ -z &quot;$dflag&quot; ] then echo &quot; $Enc_suffix&quot; # echo &quot;$Enc_suffix&quot; # For password generator. else echo fi } # End encrypt/decrypt function. # int main () { # Check for command-line args. if [ -z &quot;$1&quot; ] then echo &quot;Usage: $0 TEXT TO ENCODE/DECODE&quot; exit $E_NOARGS fi if [ ${!#} == &quot;$Enc_suffix&quot; ] # ^^^^^ Final command-line arg. then dflag=ON echo -n &quot;+&quot; # Flag decrypted text with a &quot;+&quot; for easy ID. fi if [ -z &quot;$key&quot; ] then key=&quot;$Default_key&quot; # &quot;gronsfeldk&quot; per above. fi keylen=${#key} for (( idx=0; idx&lt;$keylen; idx++ )) do # Calculate shift values for encryption/decryption. offsets[idx]=$(expr index &quot;${alpha1[*]}&quot; ${key:idx:1}) # Normalize. ((offsets[idx]--)) # Necessary because &quot;expr index&quot; starts at 1, #+ whereas array count starts at 0. # Generate array of numerical offsets corresponding to the key. # There are simpler ways to accomplish this. done args=$(echo &quot;$*&quot; | sed -e 's/ //g' | tr A-Z a-z | sed -e 's/[0-9]//g') # Remove whitespace and digits from command-line args. # Can modify to also remove punctuation characters, if desired. # Debug: # echo &quot;$args&quot;; exit $DEBUG : &quot;$args&quot; # Call the function named &quot;:&quot;. # : is a null operator, except . . . when it's a function name! exit $? # } End-of-script # ************************************************************** # # This script can function as a password generator, #+ with several minor mods, see above. # That would allow an easy-to-remember password, even the word #+ &quot;password&quot; itself, which encrypts to vrgfotvo29379 #+ a fairly secure password not susceptible to a dictionary attack. # Or, you could use your own name (surely that's easy to remember!). # For example, Bozo Bozeman encrypts to hfnbttdppkt29379. # ************************************************************** # Example A-57. Bingo Number Generator #!/bin/bash # bingo.sh # Bingo number generator # Reldate 20Aug12, License: Public Domain ####################################################################### # This script generates bingo numbers. # Hitting a key generates a new number. # Hitting 'q' terminates the script. # In a given run of the script, there will be no duplicate numbers. # When the script terminates, it prints a log of the numbers generated. ####################################################################### MIN=1 # Lowest allowable bingo number. MAX=75 # Highest allowable bingo number. COLS=15 # Numbers in each column (B I N G O). SINGLE_DIGIT_MAX=9 declare -a Numbers Prefix=(B I N G O) initialize_Numbers () { # Zero them out to start. # They'll be incremented if chosen. local index=0 until [ &quot;$index&quot; -gt $MAX ] do Numbers[index]=0 ((index++)) done Numbers[0]=1 # Flag zero, so it won't be selected. } generate_number () { local number while [ 1 ] do let &quot;number = $(expr $RANDOM % $MAX)&quot; if [ ${Numbers[number]} -eq 0 ] # Number not yet called. then let &quot;Numbers[number]+=1&quot; # Flag it in the array. break # And terminate loop. fi # Else if already called, loop and generate another number. done # Exercise: Rewrite this more elegantly as an until-loop. return $number } print_numbers_called () { # Print out the called number log in neat columns. # echo ${Numbers[@]} local pre2=0 # Prefix a zero, so columns will align #+ on single-digit numbers. echo &quot;Number Stats&quot; for (( index=1; index&lt;=MAX; index++)) do count=${Numbers[index]} let &quot;t = $index - 1&quot; # Normalize, since array begins with index 0. let &quot;column = $(expr $t / $COLS)&quot; pre=${Prefix[column]} # echo -n &quot;${Prefix[column]} &quot; if [ $(expr $t % $COLS) -eq 0 ] then echo # Newline at end of row. fi if [ &quot;$index&quot; -gt $SINGLE_DIGIT_MAX ] # Check for single-digit number. then echo -n &quot;$pre$index#$count &quot; else # Prefix a zero. echo -n &quot;$pre$pre2$index#$count &quot; fi done } # main () { RANDOM=$$ # Seed random number generator. initialize_Numbers # Zero out the number tracking array. clear echo &quot;Bingo Number Caller&quot;; echo while [[ &quot;$key&quot; != &quot;q&quot; ]] # Main loop. do read -s -n1 -p &quot;Hit a key for the next number [q to exit] &quot; key # Usually 'q' exits, but not always. # Can always hit Ctl-C if q fails. echo generate_number; new_number=$? let &quot;column = $(expr $new_number / $COLS)&quot; echo -n &quot;${Prefix[column]} &quot; # B-I-N-G-O echo $new_number done echo; echo # Game over ... print_numbers_called echo; echo &quot;[#0 = not called . . . #1 = called]&quot; echo exit 0 # } # Certainly, this script could stand some improvement. #See also the author's Instructable: #www.instructables.com/id/Binguino-An-Arduino-based-Bingo-Number-Generato/ To end this section, a review of the basics . . . and more. Example A-58. Basics Reviewed #!/bin/bash # basics-reviewed.bash # File extension == *.bash == specific to Bash # Copyright (c) Michael S. Zick, 2003; All rights reserved. # License: Use in any form, for any purpose. # Revision: $ID$ # # Edited for layout by M.C. # (author of the &quot;Advanced Bash Scripting Guide&quot;) # Fixes and updates (04/08) by Cliff Bamford. # This script tested under Bash versions 2.04, 2.05a and 2.05b. # It may not work with earlier versions. # This demonstration script generates one --intentional-- #+ &quot;command not found&quot; error message. See line 436. # The current Bash maintainer, Chet Ramey, has fixed the items noted #+ for later versions of Bash. ###-------------------------------------------### ### Pipe the output of this script to 'more' ### ###+ else it will scroll off the page. ### ### ### ### You may also redirect its output ### ###+ to a file for examination. ### ###-------------------------------------------### # Most of the following points are described at length in #+ the text of the foregoing &quot;Advanced Bash Scripting Guide.&quot; # This demonstration script is mostly just a reorganized presentation. # -- msz # Variables are not typed unless otherwise specified. # Variables are named. Names must contain a non-digit. # File descriptor names (as in, for example: 2&gt;&amp;1) #+ contain ONLY digits. # Parameters and Bash array elements are numbered. # (Parameters are very similar to Bash arrays.) # A variable name may be undefined (null reference). unset VarNull # A variable name may be defined but empty (null contents). VarEmpty='' # Two, adjacent, single quotes. # A variable name may be defined and non-empty. VarSomething='Literal' # A variable may contain: # * A whole number as a signed 32-bit (or larger) integer # * A string # A variable may also be an array. # A string may contain embedded blanks and may be treated #+ as if it where a function name with optional arguments. # The names of variables and the names of functions #+ are in different namespaces. # A variable may be defined as a Bash array either explicitly or #+ implicitly by the syntax of the assignment statement. # Explicit: declare -a ArrayVar # The echo command is a builtin. echo $VarSomething # The printf command is a builtin. # Translate %s as: String-Format printf %s $VarSomething # No linebreak specified, none output. echo # Default, only linebreak output. # The Bash parser word breaks on whitespace. # Whitespace, or the lack of it is significant. # (This holds true in general; there are, of course, exceptions.) # Translate the DOLLAR_SIGN character as: Content-Of. # Extended-Syntax way of writing Content-Of: echo ${VarSomething} # The ${ ... } Extended-Syntax allows more than just the variable #+ name to be specified. # In general, $VarSomething can always be written as: ${VarSomething}. # Call this script with arguments to see the following in action. # Outside of double-quotes, the special characters @ and * #+ specify identical behavior. # May be pronounced as: All-Elements-Of. # Without specification of a name, they refer to the #+ pre-defined parameter Bash-Array. # Glob-Pattern references echo $* # All parameters to script or function echo ${*} # Same # Bash disables filename expansion for Glob-Patterns. # Only character matching is active. # All-Elements-Of references echo $@ # Same as above echo ${@} # Same as above # Within double-quotes, the behavior of Glob-Pattern references #+ depends on the setting of IFS (Input Field Separator). # Within double-quotes, All-Elements-Of references behave the same. # Specifying only the name of a variable holding a string refers #+ to all elements (characters) of a string. # To specify an element (character) of a string, #+ the Extended-Syntax reference notation (see below) MAY be used. # Specifying only the name of a Bash array references #+ the subscript zero element, #+ NOT the FIRST DEFINED nor the FIRST WITH CONTENTS element. # Additional qualification is needed to reference other elements, #+ which means that the reference MUST be written in Extended-Syntax. # The general form is: ${name[subscript]}. # The string forms may also be used: ${name:subscript} #+ for Bash-Arrays when referencing the subscript zero element. # Bash-Arrays are implemented internally as linked lists, #+ not as a fixed area of storage as in some programming languages. # Characteristics of Bash arrays (Bash-Arrays): # -------------------------------------------- # If not otherwise specified, Bash-Array subscripts begin with #+ subscript number zero. Literally: [0] # This is called zero-based indexing. ### # If not otherwise specified, Bash-Arrays are subscript packed #+ (sequential subscripts without subscript gaps). ### # Negative subscripts are not allowed. ### # Elements of a Bash-Array need not all be of the same type. ### # Elements of a Bash-Array may be undefined (null reference). # That is, a Bash-Array may be &quot;subscript sparse.&quot; ### # Elements of a Bash-Array may be defined and empty (null contents). ### # Elements of a Bash-Array may contain: # * A whole number as a signed 32-bit (or larger) integer # * A string # * A string formated so that it appears to be a function name # + with optional arguments ### # Defined elements of a Bash-Array may be undefined (unset). # That is, a subscript packed Bash-Array may be changed # + into a subscript sparse Bash-Array. ### # Elements may be added to a Bash-Array by defining an element #+ not previously defined. ### # For these reasons, I have been calling them &quot;Bash-Arrays&quot;. # I'll return to the generic term &quot;array&quot; from now on. # -- msz echo &quot;=========================================================&quot; # Lines 202 - 334 supplied by Cliff Bamford. (Thanks!) # Demo --- Interaction with Arrays, quoting, IFS, echo, * and @ --- #+ all affect how things work ArrayVar[0]='zero' # 0 normal ArrayVar[1]=one # 1 unquoted literal ArrayVar[2]='two' # 2 normal ArrayVar[3]='three' # 3 normal ArrayVar[4]='I am four' # 4 normal with spaces ArrayVar[5]='five' # 5 normal unset ArrayVar[6] # 6 undefined ArrayValue[7]='seven' # 7 normal ArrayValue[8]='' # 8 defined but empty ArrayValue[9]='nine' # 9 normal echo '--- Here is the array we are using for this test' echo echo &quot;ArrayVar[0]='zero' # 0 normal&quot; echo &quot;ArrayVar[1]=one # 1 unquoted literal&quot; echo &quot;ArrayVar[2]='two' # 2 normal&quot; echo &quot;ArrayVar[3]='three' # 3 normal&quot; echo &quot;ArrayVar[4]='I am four' # 4 normal with spaces&quot; echo &quot;ArrayVar[5]='five' # 5 normal&quot; echo &quot;unset ArrayVar[6] # 6 undefined&quot; echo &quot;ArrayValue[7]='seven' # 7 normal&quot; echo &quot;ArrayValue[8]='' # 8 defined but empty&quot; echo &quot;ArrayValue[9]='nine' # 9 normal&quot; echo echo echo '---Case0: No double-quotes, Default IFS of space,tab,newline ---' IFS=$'\x20'$'\x09'$'\x0A' # In exactly this order. echo 'Here is: printf %q {${ArrayVar[*]}' printf %q ${ArrayVar[*]} echo echo 'Here is: printf %q {${ArrayVar[@]}' printf %q ${ArrayVar[@]} echo echo 'Here is: echo ${ArrayVar[*]}' echo ${ArrayVar[@]} echo 'Here is: echo {${ArrayVar[@]}' echo ${ArrayVar[@]} echo echo '---Case1: Within double-quotes - Default IFS of space-tab- newline ---' IFS=$'\x20'$'\x09'$'\x0A' # These three bytes, echo 'Here is: printf %q &quot;{${ArrayVar[*]}&quot;' printf %q &quot;${ArrayVar[*]}&quot; echo echo 'Here is: printf %q &quot;{${ArrayVar[@]}&quot;' printf %q &quot;${ArrayVar[@]}&quot; echo echo 'Here is: echo &quot;${ArrayVar[*]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo 'Here is: echo &quot;{${ArrayVar[@]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo echo '---Case2: Within double-quotes - IFS is q' IFS='q' echo 'Here is: printf %q &quot;{${ArrayVar[*]}&quot;' printf %q &quot;${ArrayVar[*]}&quot; echo echo 'Here is: printf %q &quot;{${ArrayVar[@]}&quot;' printf %q &quot;${ArrayVar[@]}&quot; echo echo 'Here is: echo &quot;${ArrayVar[*]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo 'Here is: echo &quot;{${ArrayVar[@]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo echo '---Case3: Within double-quotes - IFS is ^' IFS='^' echo 'Here is: printf %q &quot;{${ArrayVar[*]}&quot;' printf %q &quot;${ArrayVar[*]}&quot; echo echo 'Here is: printf %q &quot;{${ArrayVar[@]}&quot;' printf %q &quot;${ArrayVar[@]}&quot; echo echo 'Here is: echo &quot;${ArrayVar[*]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo 'Here is: echo &quot;{${ArrayVar[@]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo echo '---Case4: Within double-quotes - IFS is ^ followed by space,tab,newline' IFS=$'^'$'\x20'$'\x09'$'\x0A' # ^ + space tab newline echo 'Here is: printf %q &quot;{${ArrayVar[*]}&quot;' printf %q &quot;${ArrayVar[*]}&quot; echo echo 'Here is: printf %q &quot;{${ArrayVar[@]}&quot;' printf %q &quot;${ArrayVar[@]}&quot; echo echo 'Here is: echo &quot;${ArrayVar[*]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo 'Here is: echo &quot;{${ArrayVar[@]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo echo '---Case6: Within double-quotes - IFS set and empty ' IFS='' echo 'Here is: printf %q &quot;{${ArrayVar[*]}&quot;' printf %q &quot;${ArrayVar[*]}&quot; echo echo 'Here is: printf %q &quot;{${ArrayVar[@]}&quot;' printf %q &quot;${ArrayVar[@]}&quot; echo echo 'Here is: echo &quot;${ArrayVar[*]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo 'Here is: echo &quot;{${ArrayVar[@]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo echo '---Case7: Within double-quotes - IFS is unset' unset IFS echo 'Here is: printf %q &quot;{${ArrayVar[*]}&quot;' printf %q &quot;${ArrayVar[*]}&quot; echo echo 'Here is: printf %q &quot;{${ArrayVar[@]}&quot;' printf %q &quot;${ArrayVar[@]}&quot; echo echo 'Here is: echo &quot;${ArrayVar[*]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo 'Here is: echo &quot;{${ArrayVar[@]}&quot;' echo &quot;${ArrayVar[@]}&quot; echo echo '---End of Cases---' echo &quot;=========================================================&quot;; echo # Put IFS back to the default. # Default is exactly these three bytes. IFS=$'\x20'$'\x09'$'\x0A' # In exactly this order. # Interpretation of the above outputs: # A Glob-Pattern is I/O; the setting of IFS matters. ### # An All-Elements-Of does not consider IFS settings. ### # Note the different output using the echo command and the #+ quoted format operator of the printf command. # Recall: # Parameters are similar to arrays and have the similar behaviors. ### # The above examples demonstrate the possible variations. # To retain the shape of a sparse array, additional script #+ programming is required. ### # The source code of Bash has a routine to output the #+ [subscript]=value array assignment format. # As of version 2.05b, that routine is not used, #+ but that might change in future releases. # The length of a string, measured in non-null elements (characters): echo echo '- - Non-quoted references - -' echo 'Non-Null character count: '${#VarSomething}' characters.' # test='Lit'$'\x00''eral' # $'\x00' is a null character. # echo ${#test} # See that? # The length of an array, measured in defined elements, #+ including null content elements. echo echo 'Defined content count: '${#ArrayVar[@]}' elements.' # That is NOT the maximum subscript (4). # That is NOT the range of the subscripts (1 . . 4 inclusive). # It IS the length of the linked list. ### # Both the maximum subscript and the range of the subscripts may #+ be found with additional script programming. # The length of a string, measured in non-null elements (characters): echo echo '- - Quoted, Glob-Pattern references - -' echo 'Non-Null character count: '&quot;${#VarSomething}&quot;' characters.' # The length of an array, measured in defined elements, #+ including null-content elements. echo echo 'Defined element count: '&quot;${#ArrayVar[*]}&quot;' elements.' # Interpretation: Substitution does not effect the ${# ... } operation. # Suggestion: # Always use the All-Elements-Of character #+ if that is what is intended (independence from IFS). # Define a simple function. # I include an underscore in the name #+ to make it distinctive in the examples below. ### # Bash separates variable names and function names #+ in different namespaces. # The Mark-One eyeball isn't that advanced. ### _simple() { echo -n 'SimpleFunc'$@ # Newlines are swallowed in } #+ result returned in any case. # The ( ... ) notation invokes a command or function. # The $( ... ) notation is pronounced: Result-Of. # Invoke the function _simple echo echo '- - Output of function _simple - -' _simple # Try passing arguments. echo # or (_simple) # Try passing arguments. echo echo '- Is there a variable of that name? -' echo $_simple not defined # No variable by that name. # Invoke the result of function _simple (Error msg intended) ### $(_simple) # Gives an error message: # line 436: SimpleFunc: command not found # --------------------------------------- echo ### # The first word of the result of function _simple #+ is neither a valid Bash command nor the name of a defined function. ### # This demonstrates that the output of _simple is subject to evaluation. ### # Interpretation: # A function can be used to generate in-line Bash commands. # A simple function where the first word of result IS a bash command: ### _print() { echo -n 'printf %q '$@ } echo '- - Outputs of function _print - -' _print parm1 parm2 # An Output NOT A Command. echo $(_print parm1 parm2) # Executes: printf %q parm1 parm2 # See above IFS examples for the #+ various possibilities. echo $(_print $VarSomething) # The predictable result. echo # Function variables # ------------------ echo echo '- - Function variables - -' # A variable may represent a signed integer, a string or an array. # A string may be used like a function name with optional arguments. # set -vx # Enable if desired declare -f funcVar #+ in namespace of functions funcVar=_print # Contains name of function. $funcVar parm1 # Same as _print at this point. echo funcVar=$(_print ) # Contains result of function. $funcVar # No input, No output. $funcVar $VarSomething # The predictable result. echo funcVar=$(_print $VarSomething) # $VarSomething replaced HERE. $funcVar # The expansion is part of the echo #+ variable contents. funcVar=&quot;$(_print $VarSomething)&quot; # $VarSomething replaced HERE. $funcVar # The expansion is part of the echo #+ variable contents. # The difference between the unquoted and the double-quoted versions #+ above can be seen in the &quot;protect_literal.sh&quot; example. # The first case above is processed as two, unquoted, Bash-Words. # The second case above is processed as one, quoted, Bash-Word. # Delayed replacement # ------------------- echo echo '- - Delayed replacement - -' funcVar=&quot;$(_print '$VarSomething')&quot; # No replacement, single Bash-Word. eval $funcVar # $VarSomething replaced HERE. echo VarSomething='NewThing' eval $funcVar # $VarSomething replaced HERE. echo # Restore the original setting trashed above. VarSomething=Literal # There are a pair of functions demonstrated in the #+ &quot;protect_literal.sh&quot; and &quot;unprotect_literal.sh&quot; examples. # These are general purpose functions for delayed replacement literals #+ containing variables. # REVIEW: # ------ # A string can be considered a Classic-Array of elements (characters). # A string operation applies to all elements (characters) of the string #+ (in concept, anyway). ### # The notation: ${array_name[@]} represents all elements of the #+ Bash-Array: array_name. ### # The Extended-Syntax string operations can be applied to all #+ elements of an array. ### # This may be thought of as a For-Each operation on a vector of strings. ### # Parameters are similar to an array. # The initialization of a parameter array for a script #+ and a parameter array for a function only differ #+ in the initialization of ${0}, which never changes its setting. ### # Subscript zero of the script's parameter array contains #+ the name of the script. ### # Subscript zero of a function's parameter array DOES NOT contain #+ the name of the function. # The name of the current function is accessed by the $FUNCNAME variable. ### # A quick, review list follows (quick, not short). echo echo '- - Test (but not change) - -' echo '- null reference -' echo -n ${VarNull-'NotSet'}' ' # NotSet echo ${VarNull} # NewLine only echo -n ${VarNull:-'NotSet'}' ' # NotSet echo ${VarNull} # Newline only echo '- null contents -' echo -n ${VarEmpty-'Empty'}' ' # Only the space echo ${VarEmpty} # Newline only echo -n ${VarEmpty:-'Empty'}' ' # Empty echo ${VarEmpty} # Newline only echo '- contents -' echo ${VarSomething-'Content'} # Literal echo ${VarSomething:-'Content'} # Literal echo '- Sparse Array -' echo ${ArrayVar[@]-'not set'} # ASCII-Art time # State Y==yes, N==no # - :- # Unset Y Y ${# ... } == 0 # Empty N Y ${# ... } == 0 # Contents N N ${# ... } &gt; 0 # Either the first and/or the second part of the tests #+ may be a command or a function invocation string. echo echo '- - Test 1 for undefined - -' declare -i t _decT() { t=$t-1 } # Null reference, set: t == -1 t=${#VarNull} # Results in zero. ${VarNull- _decT } # Function executes, t now -1. echo $t # Null contents, set: t == 0 t=${#VarEmpty} # Results in zero. ${VarEmpty- _decT } # _decT function NOT executed. echo $t # Contents, set: t == number of non-null characters VarSomething='_simple' # Set to valid function name. t=${#VarSomething} # non-zero length ${VarSomething- _decT } # Function _simple executed. echo $t # Note the Append-To action. # Exercise: clean up that example. unset t unset _decT VarSomething=Literal echo echo '- - Test and Change - -' echo '- Assignment if null reference -' echo -n ${VarNull='NotSet'}' ' # NotSet NotSet echo ${VarNull} unset VarNull echo '- Assignment if null reference -' echo -n ${VarNull:='NotSet'}' ' # NotSet NotSet echo ${VarNull} unset VarNull echo '- No assignment if null contents -' echo -n ${VarEmpty='Empty'}' ' # Space only echo ${VarEmpty} VarEmpty='' echo '- Assignment if null contents -' echo -n ${VarEmpty:='Empty'}' ' # Empty Empty echo ${VarEmpty} VarEmpty='' echo '- No change if already has contents -' echo ${VarSomething='Content'} # Literal echo ${VarSomething:='Content'} # Literal # &quot;Subscript sparse&quot; Bash-Arrays ### # Bash-Arrays are subscript packed, beginning with #+ subscript zero unless otherwise specified. ### # The initialization of ArrayVar was one way #+ to &quot;otherwise specify&quot;. Here is the other way: ### echo declare -a ArraySparse ArraySparse=( [1]=one [2]='' [4]='four' ) # [0]=null reference, [2]=null content, [3]=null reference echo '- - Array-Sparse List - -' # Within double-quotes, default IFS, Glob-Pattern IFS=$'\x20'$'\x09'$'\x0A' printf %q &quot;${ArraySparse[*]}&quot; echo # Note that the output does not distinguish between &quot;null content&quot; #+ and &quot;null reference&quot;. # Both print as escaped whitespace. ### # Note also that the output does NOT contain escaped whitespace #+ for the &quot;null reference(s)&quot; prior to the first defined element. ### # This behavior of 2.04, 2.05a and 2.05b has been reported #+ and may change in a future version of Bash. # To output a sparse array and maintain the [subscript]=value #+ relationship without change requires a bit of programming. # One possible code fragment: ### # local l=${#ArraySparse[@]} # Count of defined elements # local f=0 # Count of found subscripts # local i=0 # Subscript to test ( # Anonymous in-line function for (( l=${#ArraySparse[@]}, f = 0, i = 0 ; f &lt; l ; i++ )) do # 'if defined then...' ${ArraySparse[$i]+ eval echo '\ ['$i']='${ArraySparse[$i]} ; (( f++ )) } done ) # The reader coming upon the above code fragment cold #+ might want to review &quot;command lists&quot; and &quot;multiple commands on a line&quot; #+ in the text of the foregoing &quot;Advanced Bash Scripting Guide.&quot; ### # Note: # The &quot;read -a array_name&quot; version of the &quot;read&quot; command #+ begins filling array_name at subscript zero. # ArraySparse does not define a value at subscript zero. ### # The user needing to read/write a sparse array to either #+ external storage or a communications socket must invent #+ a read/write code pair suitable for their purpose. ### # Exercise: clean it up. unset ArraySparse echo echo '- - Conditional alternate (But not change)- -' echo '- No alternate if null reference -' echo -n ${VarNull+'NotSet'}' ' echo ${VarNull} unset VarNull echo '- No alternate if null reference -' echo -n ${VarNull:+'NotSet'}' ' echo ${VarNull} unset VarNull echo '- Alternate if null contents -' echo -n ${VarEmpty+'Empty'}' ' # Empty echo ${VarEmpty} VarEmpty='' echo '- No alternate if null contents -' echo -n ${VarEmpty:+'Empty'}' ' # Space only echo ${VarEmpty} VarEmpty='' echo '- Alternate if already has contents -' # Alternate literal echo -n ${VarSomething+'Content'}' ' # Content Literal echo ${VarSomething} # Invoke function echo -n ${VarSomething:+ $(_simple) }' ' # SimpleFunc Literal echo ${VarSomething} echo echo '- - Sparse Array - -' echo ${ArrayVar[@]+'Empty'} # An array of 'Empty'(ies) echo echo '- - Test 2 for undefined - -' declare -i t _incT() { t=$t+1 } # Note: # This is the same test used in the sparse array #+ listing code fragment. # Null reference, set: t == -1 t=${#VarNull}-1 # Results in minus-one. ${VarNull+ _incT } # Does not execute. echo $t' Null reference' # Null contents, set: t == 0 t=${#VarEmpty}-1 # Results in minus-one. ${VarEmpty+ _incT } # Executes. echo $t' Null content' # Contents, set: t == (number of non-null characters) t=${#VarSomething}-1 # non-null length minus-one ${VarSomething+ _incT } # Executes. echo $t' Contents' # Exercise: clean up that example. unset t unset _incT # ${name?err_msg} ${name:?err_msg} # These follow the same rules but always exit afterwards #+ if an action is specified following the question mark. # The action following the question mark may be a literal #+ or a function result. ### # ${name?} ${name:?} are test-only, the return can be tested. # Element operations # ------------------ echo echo '- - Trailing sub-element selection - -' # Strings, Arrays and Positional parameters # Call this script with multiple arguments #+ to see the parameter selections. echo '- All -' echo ${VarSomething:0} # all non-null characters echo ${ArrayVar[@]:0} # all elements with content echo ${@:0} # all parameters with content; # ignoring parameter[0] echo echo '- All after -' echo ${VarSomething:1} # all non-null after character[0] echo ${ArrayVar[@]:1} # all after element[0] with content echo ${@:2} # all after param[1] with content echo echo '- Range after -' echo ${VarSomething:4:3} # ral # Three characters after # character[3] echo '- Sparse array gotch -' echo ${ArrayVar[@]:1:2} # four - The only element with content. # Two elements after (if that many exist). # the FIRST WITH CONTENTS #+ (the FIRST WITH CONTENTS is being #+ considered as if it #+ were subscript zero). # Executed as if Bash considers ONLY array elements with CONTENT # printf %q &quot;${ArrayVar[@]:0:3}&quot; # Try this one # In versions 2.04, 2.05a and 2.05b, #+ Bash does not handle sparse arrays as expected using this notation. # # The current Bash maintainer, Chet Ramey, has corrected this. echo '- Non-sparse array -' echo ${@:2:2} # Two parameters following parameter[1] # New victims for string vector examples: stringZ=abcABC123ABCabc arrayZ=( abcabc ABCABC 123123 ABCABC abcabc ) sparseZ=( [1]='abcabc' [3]='ABCABC' [4]='' [5]='123123' ) echo echo ' - - Victim string - -'$stringZ'- - ' echo ' - - Victim array - -'${arrayZ[@]}'- - ' echo ' - - Sparse array - -'${sparseZ[@]}'- - ' echo ' - [0]==null ref, [2]==null ref, [4]==null content - ' echo ' - [1]=abcabc [3]=ABCABC [5]=123123 - ' echo ' - non-null-reference count: '${#sparseZ[@]}' elements' echo echo '- - Prefix sub-element removal - -' echo '- - Glob-Pattern match must include the first character. - -' echo '- - Glob-Pattern may be a literal or a function result. - -' echo # Function returning a simple, Literal, Glob-Pattern _abc() { echo -n 'abc' } echo '- Shortest prefix -' echo ${stringZ#123} # Unchanged (not a prefix). echo ${stringZ#$(_abc)} # ABC123ABCabc echo ${arrayZ[@]#abc} # Applied to each element. # echo ${sparseZ[@]#abc} # Version-2.05b core dumps. # Has since been fixed by Chet Ramey. # The -it would be nice- First-Subscript-Of # echo ${#sparseZ[@]#*} # This is NOT valid Bash. echo echo '- Longest prefix -' echo ${stringZ##1*3} # Unchanged (not a prefix) echo ${stringZ##a*C} # abc echo ${arrayZ[@]##a*c} # ABCABC 123123 ABCABC # echo ${sparseZ[@]##a*c} # Version-2.05b core dumps. # Has since been fixed by Chet Ramey. echo echo '- - Suffix sub-element removal - -' echo '- - Glob-Pattern match must include the last character. - -' echo '- - Glob-Pattern may be a literal or a function result. - -' echo echo '- Shortest suffix -' echo ${stringZ%1*3} # Unchanged (not a suffix). echo ${stringZ%$(_abc)} # abcABC123ABC echo ${arrayZ[@]%abc} # Applied to each element. # echo ${sparseZ[@]%abc} # Version-2.05b core dumps. # Has since been fixed by Chet Ramey. # The -it would be nice- Last-Subscript-Of # echo ${#sparseZ[@]%*} # This is NOT valid Bash. echo echo '- Longest suffix -' echo ${stringZ%%1*3} # Unchanged (not a suffix) echo ${stringZ%%b*c} # a echo ${arrayZ[@]%%b*c} # a ABCABC 123123 ABCABC a # echo ${sparseZ[@]%%b*c} # Version-2.05b core dumps. # Has since been fixed by Chet Ramey. echo echo '- - Sub-element replacement - -' echo '- - Sub-element at any location in string. - -' echo '- - First specification is a Glob-Pattern - -' echo '- - Glob-Pattern may be a literal or Glob-Pattern function result. - -' echo '- - Second specification may be a literal or function result. - -' echo '- - Second specification may be unspecified. Pronounce that' echo ' as: Replace-With-Nothing (Delete) - -' echo # Function returning a simple, Literal, Glob-Pattern _123() { echo -n '123' } echo '- Replace first occurrence -' echo ${stringZ/$(_123)/999} # Changed (123 is a component). echo ${stringZ/ABC/xyz} # xyzABC123ABCabc echo ${arrayZ[@]/ABC/xyz} # Applied to each element. echo ${sparseZ[@]/ABC/xyz} # Works as expected. echo echo '- Delete first occurrence -' echo ${stringZ/$(_123)/} echo ${stringZ/ABC/} echo ${arrayZ[@]/ABC/} echo ${sparseZ[@]/ABC/} # The replacement need not be a literal, #+ since the result of a function invocation is allowed. # This is general to all forms of replacement. echo echo '- Replace first occurrence with Result-Of -' echo ${stringZ/$(_123)/$(_simple)} # Works as expected. echo ${arrayZ[@]/ca/$(_simple)} # Applied to each element. echo ${sparseZ[@]/ca/$(_simple)} # Works as expected. echo echo '- Replace all occurrences -' echo ${stringZ//[b2]/X} # X-out b's and 2's echo ${stringZ//abc/xyz} # xyzABC123ABCxyz echo ${arrayZ[@]//abc/xyz} # Applied to each element. echo ${sparseZ[@]//abc/xyz} # Works as expected. echo echo '- Delete all occurrences -' echo ${stringZ//[b2]/} echo ${stringZ//abc/} echo ${arrayZ[@]//abc/} echo ${sparseZ[@]//abc/} echo echo '- - Prefix sub-element replacement - -' echo '- - Match must include the first character. - -' echo echo '- Replace prefix occurrences -' echo ${stringZ/#[b2]/X} # Unchanged (neither is a prefix). echo ${stringZ/#$(_abc)/XYZ} # XYZABC123ABCabc echo ${arrayZ[@]/#abc/XYZ} # Applied to each element. echo ${sparseZ[@]/#abc/XYZ} # Works as expected. echo echo '- Delete prefix occurrences -' echo ${stringZ/#[b2]/} echo ${stringZ/#$(_abc)/} echo ${arrayZ[@]/#abc/} echo ${sparseZ[@]/#abc/} echo echo '- - Suffix sub-element replacement - -' echo '- - Match must include the last character. - -' echo echo '- Replace suffix occurrences -' echo ${stringZ/%[b2]/X} # Unchanged (neither is a suffix). echo ${stringZ/%$(_abc)/XYZ} # abcABC123ABCXYZ echo ${arrayZ[@]/%abc/XYZ} # Applied to each element. echo ${sparseZ[@]/%abc/XYZ} # Works as expected. echo echo '- Delete suffix occurrences -' echo ${stringZ/%[b2]/} echo ${stringZ/%$(_abc)/} echo ${arrayZ[@]/%abc/} echo ${sparseZ[@]/%abc/} echo echo '- - Special cases of null Glob-Pattern - -' echo echo '- Prefix all -' # null substring pattern means 'prefix' echo ${stringZ/#/NEW} # NEWabcABC123ABCabc echo ${arrayZ[@]/#/NEW} # Applied to each element. echo ${sparseZ[@]/#/NEW} # Applied to null-content also. # That seems reasonable. echo echo '- Suffix all -' # null substring pattern means 'suffix' echo ${stringZ/%/NEW} # abcABC123ABCabcNEW echo ${arrayZ[@]/%/NEW} # Applied to each element. echo ${sparseZ[@]/%/NEW} # Applied to null-content also. # That seems reasonable. echo echo '- - Special case For-Each Glob-Pattern - -' echo '- - - - This is a nice-to-have dream - - - -' echo _GenFunc() { echo -n ${0} # Illustration only. # Actually, that would be an arbitrary computation. } # All occurrences, matching the AnyThing pattern. # Currently //*/ does not match null-content nor null-reference. # /#/ and /%/ does match null-content but not null-reference. echo ${sparseZ[@]//*/$(_GenFunc)} # A possible syntax would be to make #+ the parameter notation used within this construct mean: # ${1} - The full element # ${2} - The prefix, if any, to the matched sub-element # ${3} - The matched sub-element # ${4} - The suffix, if any, to the matched sub-element # # echo ${sparseZ[@]//*/$(_GenFunc ${3})} # Same as ${1} here. # Perhaps it will be implemented in a future version of Bash. exit 0 Example A-59. Testing execution times of various commands #!/bin/bash # test-execution-time.sh # Example by Erik Brandsberg, for testing execution time #+ of certain operations. # Referenced in the &quot;Optimizations&quot; section of &quot;Miscellany&quot; chapter. count=50000 echo &quot;Math tests&quot; echo &quot;Math via \$(( ))&quot; time for (( i=0; i&lt; $count; i++)) do result=$(( $i%2 )) done echo &quot;Math via *expr*:&quot; time for (( i=0; i&lt; $count; i++)) do result=`expr &quot;$i%2&quot;` done echo &quot;Math via *let*:&quot; time for (( i=0; i&lt; $count; i++)) do let result=$i%2 done echo echo &quot;Conditional testing tests&quot; echo &quot;Test via case:&quot; time for (( i=0; i&lt; $count; i++)) do case $(( $i%2 )) in 0) : ;; 1) : ;; esac done echo &quot;Test with if [], no quotes:&quot; time for (( i=0; i&lt; $count; i++)) do if [ $(( $i%2 )) = 0 ]; then : else : fi done echo &quot;Test with if [], quotes:&quot; time for (( i=0; i&lt; $count; i++)) do if [ &quot;$(( $i%2 ))&quot; = &quot;0&quot; ]; then : else : fi done echo &quot;Test with if [], using -eq:&quot; time for (( i=0; i&lt; $count; i++)) do if [ $(( $i%2 )) -eq 0 ]; then : else : fi done exit $? Example A-60. Associative arrays vs. conventional arrays (execution times) #!/bin/bash # assoc-arr-test.sh # Benchmark test script to compare execution times of # numeric-indexed array vs. associative array. # Thank you, Erik Brandsberg. count=100000 # May take a while for some of the tests below. declare simple # Can change to 20000, if desired. declare -a array1 declare -A array2 declare -a array3 declare -A array4 echo &quot;===Assignment tests===&quot; echo echo &quot;Assigning a simple variable:&quot; # References $i twice to equalize lookup times. time for (( i=0; i&lt; $count; i++)); do simple=$i$i done echo &quot;---&quot; echo &quot;Assigning a numeric index array entry:&quot; time for (( i=0; i&lt; $count; i++)); do array1[$i]=$i done echo &quot;---&quot; echo &quot;Overwriting a numeric index array entry:&quot; time for (( i=0; i&lt; $count; i++)); do array1[$i]=$i done echo &quot;---&quot; echo &quot;Linear reading of numeric index array:&quot; time for (( i=0; i&lt; $count; i++)); do simple=array1[$i] done echo &quot;---&quot; echo &quot;Assigning an associative array entry:&quot; time for (( i=0; i&lt; $count; i++)); do array2[$i]=$i done echo &quot;---&quot; echo &quot;Overwriting an associative array entry:&quot; time for (( i=0; i&lt; $count; i++)); do array2[$i]=$i done echo &quot;---&quot; echo &quot;Linear reading an associative array entry:&quot; time for (( i=0; i&lt; $count; i++)); do simple=array2[$i] done echo &quot;---&quot; echo &quot;Assigning a random number to a simple variable:&quot; time for (( i=0; i&lt; $count; i++)); do simple=$RANDOM done echo &quot;---&quot; echo &quot;Assign a sparse numeric index array entry randomly into 64k cells:&quot; time for (( i=0; i&lt; $count; i++)); do array3[$RANDOM]=$i done echo &quot;---&quot; echo &quot;Reading sparse numeric index array entry:&quot; time for value in &quot;${array3[@]}&quot;i; do simple=$value done echo &quot;---&quot; echo &quot;Assigning a sparse associative array entry randomly into 64k cells:&quot; time for (( i=0; i&lt; $count; i++)); do array4[$RANDOM]=$i done echo &quot;---&quot; echo &quot;Reading sparse associative index array entry:&quot; time for value in &quot;${array4[@]}&quot;; do simple=$value done exit $? Appendix B. Reference Cards The following reference cards provide a useful summary of certain scripting concepts. The foregoing text treats these matters in more depth, as well as giving usage examples. Table B-1. Special Shell Variables Variable Meaning $0 Filename of script $1 Positional parameter #1 $2 - $9 Positional parameters #2 - #9 ${10} Positional parameter #10 $# Number of positional parameters &quot;$*&quot; All the positional parameters (as a single word) * &quot;$@&quot; All the positional parameters (as separate strings) ${#*} Number of positional parameters ${#@} Number of positional parameters $? Return value $$ Process ID (PID) of script $- Flags passed to script (using set) $_ Last argument of previous command $! Process ID (PID) of last job run in background * Must be quoted, otherwise it defaults to $@. Table B-2. TEST Operators: Binary Comparison Operator Meaning ----- Operator Meaning Arithmetic Comparison String Comparison -eq Equal to = Equal to == Equal to -ne Not equal to != Not equal to -lt Less than \&lt; Less than (ASCII) * -le Less than or equal to -gt Greater than \&gt; Greater than (ASCII) * -ge Greater than or equal to -z String is empty -n String is not empty Arithmetic Comparison within double parentheses (( ... )) &gt; Greater than &gt;= Greater than or equal to &lt; Less than &lt;= Less than or equal to * If within a double-bracket [[ ... ]] test construct, then no escape \ is needed. Table B-3. TEST Operators: Files Operator Tests Whether ----- Operator Tests Whether -e File exists -s File is not zero size -f File is a regular file -d File is a directory -r File has read permission -h File is a symbolic link -w File has write permission -L File is a symbolic link -x File has execute permission -b File is a block device -c File is a character device -g sgid flag set -p File is a pipe -u suid flag set -S File is a socket -k &quot;sticky bit&quot; set -t File is associated with a terminal -N File modified since it was last read F1 -nt F2 File F1 is newer than F2 * -O You own the file F1 -ot F2 File F1 is older than F2 * -G Group id of file same as yours F1 -ef F2 Files F1 and F2 are hard links to the same file * ! NOT (inverts sense of above tests) * Binary operator (requires two operands). Table B-4. Parameter Substitution and Expansion Expression Meaning ${var} Value of var (same as $var) ${var-$DEFAULT} If var not set, evaluate expression as $DEFAULT * ${var:-$DEFAULT} If var not set or is empty, evaluate expression as $DEFAULT * ${var=$DEFAULT} If var not set, evaluate expression as $DEFAULT * ${var:=$DEFAULT} If var not set or is empty, evaluate expression as $DEFAULT * ${var+$OTHER} If var set, evaluate expression as $OTHER, otherwise as null string ${var:+$OTHER} If var set, evaluate expression as $OTHER, otherwise as null string ${var?$ERR_MSG} If var not set, print $ERR_MSG and abort script with an exit status of 1.* ${var:?$ERR_MSG} If var not set, print $ERR_MSG and abort script with an exit status of 1.* ${!varprefix*} Matches all previously declared variables beginning with varprefix ${!varprefix@} Matches all previously declared variables beginning with varprefix * If var is set, evaluate the expression as $var with no side-effects. # Note that some of the above behavior of operators has changed from earlier versions of Bash. Table B-5. String Operations Expression Meaning ${#string} Length of $string ${string:position} Extract substring from $string at $position ${string:position:length} Extract $length characters substring from $string at $position [zero-indexed, first character is at position 0] ${string#substring} Strip shortest match of $substring from front of $string ${string##substring} Strip longest match of $substring from front of $string ${string%substring} Strip shortest match of $substring from back of $string ${string%%substring} Strip longest match of $substring from back of $string ${string/substring/replacement} Replace first match of $substring with $replacement ${string//substring/replacement} Replace all matches of $substring with $replacement ${string/#substring/replacement} If $substring matches front end of $string, substitute $replacement for $substring ${string/%substring/replacement} If $substring matches back end of $string, substitute $replacement for $substring expr match &quot;$string&quot; '$substring' Length of matching $substring* at beginning of $string expr &quot;$string&quot; : '$substring' Length of matching $substring* at beginning of $string expr index &quot;$string&quot; $substring Numerical position in $string of first character in $substring* that matches [0 if no match, first character counts as position 1] expr substr $string $position $length Extract $length characters from $string starting at $position [0 if no match, first character counts as position 1] expr match &quot;$string&quot; '\($substring\)' Extract $substring*, searching from beginning of $string expr &quot;$string&quot; : '\($substring\)' Extract $substring* , searching from beginning of $string expr match &quot;$string&quot; '.*\($substring\)' Extract $substring*, searching from end of $string expr &quot;$string&quot; : '.*\($substring\)' Extract $substring*, searching from end of $string * Where $substring is a Regular Expression. Table B-6. Miscellaneous Constructs Expression Interpretation Brackets if [ CONDITION ] Test construct if [[ CONDITION ]] Extended test construct Array[1]=element1 Array initialization [a-z] Range of characters within a Regular Expression Curly Brackets ${variable} Parameter substitution ${!variable} Indirect variable reference { command1; command2; . . . commandN; } Block of code {string1,string2,string3,...} Brace expansion {a..z} Extended brace expansion {} Text replacement, after find and xargs Parentheses ( command1; command2 ) Command group executed within a subshell Array=(element1 element2 element3) Array initialization result=$(COMMAND) Command substitution, new style &gt;(COMMAND) Process substitution &lt;(COMMAND) Process substitution Double Parentheses (( var = 78 )) Integer arithmetic var=$(( 20 + 5 )) Integer arithmetic, with variable assignment (( var++ )) C-style variable increment (( var-- )) C-style variable decrement (( var0 = var1&lt;98?9:21 )) C-style ternary operation Quoting &quot;$variable&quot; &quot;Weak&quot; quoting 'string' 'Strong' quoting Back Quotes result=`COMMAND` Command substitution, classic style Appendix C. A Sed and Awk Micro-Primer This is a very brief introduction to the sed and awk text processing utilities. We will deal with only a few basic commands here, but that will suffice for understanding simple sed and awk constructs within shell scripts. sed: a non-interactive text file editor awk: a field-oriented pattern processing language with a C-style syntax For all their differences, the two utilities share a similar invocation syntax, use regular expressions , read input by default from stdin, and output to stdout. These are well-behaved UNIX tools, and they work together well. The output from one can be piped to the other, and their combined capabilities give shell scripts some of the power of Perl. Note One important difference between the utilities is that while shell scripts can easily pass arguments to sed, it is more cumbersome for awk (see Example 36-5 and Example 28-2). C.1. Sed Sed is a non-interactive [141] stream editor. It receives text input, whether from stdin or from a file, performs certain operations on specified lines of the input, one line at a time, then outputs the result to stdout or to a file. Within a shell script, sed is usually one of several tool components in a pipe. Sed determines which lines of its input that it will operate on from the address range passed to it. [142] Specify this address range either by line number or by a pattern to match. For example, 3d signals sed to delete line 3 of the input, and /Windows/d tells sed that you want every line of the input containing a match to &quot;Windows&quot; deleted. Of all the operations in the sed toolkit, we will focus primarily on the three most commonly used ones. These are printing (to stdout), deletion, and substitution. Table C-1. Basic sed operators Operator Name Effect [address-range]/p print Print [specified address range] [address-range]/d delete Delete [specified address range] s/pattern1/pattern2/ substitute Substitute pattern2 for first instance of pattern1 in a line [address-range]/s/pattern1/pattern2/ substitute Substitute pattern2 for first instance of pattern1 in a line, over address-range [address-range]/y/pattern1/pattern2/ transform replace any character in pattern1 with the corresponding character in pattern2, over address-range (equivalent of tr) [address] i pattern Filename insert Insert pattern at address indicated in file Filename. Usually used with -i in-place option. g global Operate on every pattern match within each matched line of input Note Unless the g (global) operator is appended to a substitute command, the substitution operates only on the first instance of a pattern match within each line. From the command-line and in a shell script, a sed operation may require quoting and certain options. sed -e '/^$/d' $filename # The -e option causes the next string to be interpreted as an editing instruction. # (If passing only a single instruction to sed, the &quot;-e&quot; is optional.) # The &quot;strong&quot; quotes ('') protect the RE characters in the instruction #+ from reinterpretation as special characters by the body of the script. # (This reserves RE expansion of the instruction for sed.) # # Operates on the text contained in file $filename. In certain cases, a sed editing command will not work with single quotes. filename=file1.txt pattern=BEGIN sed &quot;/^$pattern/d&quot; &quot;$filename&quot; # Works as specified. # sed '/^$pattern/d' &quot;$filename&quot; has unexpected results. # In this instance, with strong quoting (' ... '), #+ &quot;$pattern&quot; will not expand to &quot;BEGIN&quot;. Note Sed uses the -e option to specify that the following string is an instruction or set of instructions. If there is only a single instruction contained in the string, then this may be omitted. sed -n '/xzy/p' $filename # The -n option tells sed to print only those lines matching the pattern. # Otherwise all input lines would print. # The -e option not necessary here since there is only a single editing instruction. Table C-2. Examples of sed operators Notation Effect 8d Delete 8th line of input. /^$/d Delete all blank lines. 1,/^$/d Delete from beginning of input up to, and including first blank line. /Jones/p Print only lines containing &quot;Jones&quot; (with -n option). s/Windows/Linux/ Substitute &quot;Linux&quot; for first instance of &quot;Windows&quot; found in each input line. s/BSOD/stability/g Substitute &quot;stability&quot; for every instance of &quot;BSOD&quot; found in each input line. s/ *$// Delete all spaces at the end of every line. s/00*/0/g Compress all consecutive sequences of zeroes into a single zero. echo &quot;Working on it.&quot; | sed -e '1i How far are you along?' Prints &quot;How far are you along?&quot; as first line, &quot;Working on it&quot; as second. 5i 'Linux is great.' file.txt Inserts 'Linux is great.' at line 5 of the file file.txt. /GUI/d Delete all lines containing &quot;GUI&quot;. s/GUI//g Delete all instances of &quot;GUI&quot;, leaving the remainder of each line intact. Substituting a zero-length string for another is equivalent to deleting that string within a line of input. This leaves the remainder of the line intact. Applying s/GUI// to the line The most important parts of any application are its GUI and sound effects results in The most important parts of any application are its and sound effects A backslash forces the sed replacement command to continue on to the next line. This has the effect of using the newline at the end of the first line as the replacement string. s/^ */\ /g This substitution replaces line-beginning spaces with a newline. The net result is to replace paragraph indents with a blank line between paragraphs. An address range followed by one or more operations may require open and closed curly brackets, with appropriate newlines. /[0-9A-Za-z]/,/^$/{ /^$/d } This deletes only the first of each set of consecutive blank lines. That might be useful for single-spacing a text file, but retaining the blank line(s) between paragraphs. Note The usual delimiter that sed uses is /. However, sed allows other delimiters, such as %. This is useful when / is part of a replacement string, as in a file pathname. See Example 11-10 and Example 16-32. Tip A quick way to double-space a text file is sed G filename. For illustrative examples of sed within shell scripts, see: Example 36-1 Example 36-2 Example 16-3 Example A-2 Example 16-17 Example 16-27 Example A-12 Example A-16 Example A-17 Example 16-32 Example 11-10 Example 16-48 Example A-1 Example 16-14 Example 16-12 Example A-10 Example 19-12 Example 16-19 Example A-29 Example A-31 Example A-24 Example A-43 Example A-55 For a more extensive treatment of sed, refer to the pertinent references in the Bibliography. C.2. Awk Awk [143] is a full-featured text processing language with a syntax reminiscent of C. While it possesses an extensive set of operators and capabilities, we will cover only a few of these here - the ones most useful in shell scripts. Awk breaks each line of input passed to it into fields. By default, a field is a string of consecutive characters delimited by whitespace, though there are options for changing this. Awk parses and operates on each separate field. This makes it ideal for handling structured text files -- especially tables -- data organized into consistent chunks, such as rows and columns. Strong quoting and curly brackets enclose blocks of awk code within a shell script. # $1 is field #1, $2 is field #2, etc. echo one two | awk '{print $1}' # one echo one two | awk '{print $2}' # two # But what is field #0 ($0)? echo one two | awk '{print $0}' # one two # All the fields! awk '{print $3}' $filename # Prints field #3 of file $filename to stdout. awk '{print $1 $5 $6}' $filename # Prints fields #1, #5, and #6 of file $filename. awk '{print $0}' $filename # Prints the entire file! # Same effect as: cat $filename . . . or . . . sed '' $filename We have just seen the awk print command in action. The only other feature of awk we need to deal with here is variables. Awk handles variables similarly to shell scripts, though a bit more flexibly. { total += ${column_number} } This adds the value of column_number to the running total of total&gt;. Finally, to print &quot;total&quot;, there is an END command block, executed after the script has processed all its input. END { print total } Corresponding to the END, there is a BEGIN, for a code block to be performed before awk starts processing its input. The following example illustrates how awk can add text-parsing tools to a shell script. Example C-1. Counting Letter Occurrences #! /bin/sh # letter-count2.sh: Counting letter occurrences in a text file. # # Script by nyal [nyal@voila.fr]. # Used in ABS Guide with permission. # Recommented and reformatted by ABS Guide author. # Version 1.1: Modified to work with gawk 3.1.3. # (Will still work with earlier versions.) INIT_TAB_AWK=&quot;&quot; # Parameter to initialize awk script. count_case=0 FILE_PARSE=$1 E_PARAMERR=85 usage() { echo &quot;Usage: letter-count.sh file letters&quot; 2&gt;&amp;1 # For example: ./letter-count2.sh filename.txt a b c exit $E_PARAMERR # Too few arguments passed to script. } if [ ! -f &quot;$1&quot; ] ; then echo &quot;$1: No such file.&quot; 2&gt;&amp;1 usage # Print usage message and exit. fi if [ -z &quot;$2&quot; ] ; then echo &quot;$2: No letters specified.&quot; 2&gt;&amp;1 usage fi shift # Letters specified. for letter in `echo $@` # For each one . . . do INIT_TAB_AWK=&quot;$INIT_TAB_AWK tab_search[${count_case}] = \ \&quot;$letter\&quot;; final_tab[${count_case}] = 0; &quot; # Pass as parameter to awk script below. count_case=`expr $count_case + 1` done # DEBUG: # echo $INIT_TAB_AWK; cat $FILE_PARSE | # Pipe the target file to the following awk script. # --------------------------------------------------------------------- # Earlier version of script: # awk -v tab_search=0 -v final_tab=0 -v tab=0 -v \ # nb_letter=0 -v chara=0 -v chara2=0 \ awk \ &quot;BEGIN { $INIT_TAB_AWK } \ { split(\$0, tab, \&quot;\&quot;); \ for (chara in tab) \ { for (chara2 in tab_search) \ { if (tab_search[chara2] == tab[chara]) { final_tab[chara2]++ } } } } \ END { for (chara in final_tab) \ { print tab_search[chara] \&quot; =&gt; \&quot; final_tab[chara] } }&quot; # --------------------------------------------------------------------- # Nothing all that complicated, just . . . #+ for-loops, if-tests, and a couple of specialized functions. exit $? # Compare this script to letter-count.sh. For simpler examples of awk within shell scripts, see: Example 15-14 Example 20-8 Example 16-32 Example 36-5 Example 28-2 Example 15-20 Example 29-3 Example 29-4 Example 11-3 Example 16-61 Example 9-16 Example 16-4 Example 10-6 Example 36-19 Example 11-9 Example 36-4 Example 16-53 Example T-3 That's all the awk we'll cover here, folks, but there's lots more to learn. See the appropriate references in the Bibliography. Appendix D. Parsing and Managing Pathnames Emmanual Rouat contributed the following example of parsing and transforming filenames and, in particular, pathnames. It draws heavily on the functionality of sed. #!/usr/bin/env bash #----------------------------------------------------------- # Management of PATH, LD_LIBRARY_PATH, MANPATH variables... # By Emmanuel Rouat &lt;no-email&gt; # (Inspired by the bash documentation 'pathfuncs' and on # discussions found on stackoverflow: # http://stackoverflow.com/questions/370047/ # http://stackoverflow.com/questions/273909/#346860 ) # Last modified: Sat Sep 22 12:01:55 CEST 2012 # # The following functions handle spaces correctly. # These functions belong in .bash_profile rather than in # .bashrc, I guess. # # The modular aspect of these functions should make it easy # to expand them to handle path substitutions instead # of path removal etc.... # # See http://www.catonmat.net/blog/awk-one-liners-explained-part-two/ # (item 43) for an explanation of the 'duplicate-entries' removal # (it's a nice trick!) #----------------------------------------------------------- # Show $@ (usually PATH) as list. function p_show() { local p=&quot;$@&quot; &amp;&amp; for p; do [[ ${!p} ]] &amp;&amp; echo -e ${!p//:/\\n}; done } # Filter out empty lines, multiple/trailing slashes, and duplicate entries. function p_filter() { awk '/^[ \t]*$/ {next} {sub(/\/+$/, &quot;&quot;);gsub(/\/+/, &quot;/&quot;)}!x[$0]++' ;} # Rebuild list of items into ':' separated word (PATH-like). function p_build() { paste -sd: ;} # Clean $1 (typically PATH) and rebuild it function p_clean() { local p=${1} &amp;&amp; eval ${p}='$(p_show ${p} | p_filter | p_build)' ;} # Remove $1 from $2 (found on stackoverflow, with modifications). function p_rm() { local d=$(echo $1 | p_filter) p=${2} &amp;&amp; eval ${p}='$(p_show ${p} | p_filter | grep -xv &quot;${d}&quot; | p_build)' ;} # Same as previous, but filters on a pattern (dangerous... #+ don't use 'bin' or '/' as pattern!). function p_rmpat() { local d=$(echo $1 | p_filter) p=${2} &amp;&amp; eval ${p}='$(p_show ${p} | p_filter | grep -v &quot;${d}&quot; | p_build)' ;} # Delete $1 from $2 and append it cleanly. function p_append() { local d=$(echo $1 | p_filter) p=${2} &amp;&amp; p_rm &quot;${d}&quot; ${p} &amp;&amp; eval ${p}='$(p_show ${p} d | p_build)' ;} # Delete $1 from $2 and prepend it cleanly. function p_prepend() { local d=$(echo $1 | p_filter) p=${2} &amp;&amp; p_rm &quot;${d}&quot; ${p} &amp;&amp; eval ${p}='$(p_show d ${p} | p_build)' ;} # Some tests: echo MYPATH=&quot;/bin:/usr/bin/:/bin://bin/&quot; p_append &quot;/project//my project/bin&quot; MYPATH echo &quot;Append '/project//my project/bin' to '/bin:/usr/bin/:/bin://bin/'&quot; echo &quot;(result should be: /bin:/usr/bin:/project/my project/bin)&quot; echo $MYPATH echo MYOTHERPATH=&quot;/bin:/usr/bin/:/bin:/project//my project/bin&quot; p_prepend &quot;/project//my project/bin&quot; MYOTHERPATH echo &quot;Prepend '/project//my project/bin' \ to '/bin:/usr/bin/:/bin:/project//my project/bin/'&quot; echo &quot;(result should be: /project/my project/bin:/bin:/usr/bin)&quot; echo $MYOTHERPATH echo p_prepend &quot;/project//my project/bin&quot; FOOPATH # FOOPATH doesn't exist. echo &quot;Prepend '/project//my project/bin' to an unset variable&quot; echo &quot;(result should be: /project/my project/bin)&quot; echo $FOOPATH echo BARPATH=&quot;/a:/b/://b c://a:/my local pub&quot; p_clean BARPATH echo &quot;Clean BARPATH='/a:/b/://b c://a:/my local pub'&quot; echo &quot;(result should be: /a:/b:/b c:/my local pub)&quot; echo $BARPATH *** David Wheeler kindly permitted me to use his instructive examples. Doing it correctly: A quick summary by David Wheeler http://www.dwheeler.com/essays/filenames-in-shell.html So, how can you process filenames correctly in shell? Here's a quick summary about how to do it correctly, for the impatient who &quot;just want the answer&quot;. In short: Double-quote to use &quot;$variable&quot; instead of $variable, set IFS to just newline and tab, prefix all globs/filenames so they cannot begin with &quot;-&quot; when expanded, and use one of a few templates that work correctly. Here are some of those templates that work correctly: IFS=&quot;$(printf '\n\t')&quot; # Remove SPACE, so filenames with spaces work well. # Correct glob use: #+ always use &quot;for&quot; loop, prefix glob, check for existence: for file in ./* ; do # Use &quot;./*&quot; ... NEVER bare &quot;*&quot; ... if [ -e &quot;$file&quot; ] ; then # Make sure it isn't an empty match. COMMAND ... &quot;$file&quot; ... fi done # Correct glob use, but requires nonstandard bash extension. shopt -s nullglob # Bash extension, #+ so that empty glob matches will work. for file in ./* ; do # Use &quot;./*&quot;, NEVER bare &quot;*&quot; COMMAND ... &quot;$file&quot; ... done # These handle all filenames correctly; #+ can be unwieldy if COMMAND is large: find ... -exec COMMAND... {} \; find ... -exec COMMAND... {} \+ # If multiple files are okay for COMMAND. # This skips filenames with control characters #+ (including tab and newline). IFS=&quot;$(printf '\n\t')&quot; controlchars=&quot;$(printf '*[\001-\037\177]*')&quot; for file in $(find . ! -name &quot;$controlchars&quot;') ; do COMMAND &quot;$file&quot; ... done # Okay if filenames can't contain tabs or newlines -- #+ beware the assumption. IFS=&quot;$(printf '\n\t')&quot; for file in $(find .) ; do COMMAND &quot;$file&quot; ... done # Requires nonstandard but common extensions in find and xargs: find . -print0 | xargs -0 COMMAND # Requires nonstandard extensions to find and to shell (bash works). # variables might not stay set once the loop ends: find . -print0 | while IFS=&quot;&quot; read -r -d &quot;&quot; file ; do ... COMMAND &quot;$file&quot; # Use quoted &quot;$file&quot;, not $file, everywhere. done # Requires nonstandard extensions to find and to shell (bash works). # Underlying system must include named pipes (FIFOs) #+ or the /dev/fd mechanism. # In this version, variables *do* stay set after the loop ends, # and you can read from stdin. #+ (Change the 4 to another number if fd 4 is needed.) while IFS=&quot;&quot; read -r -d &quot;&quot; file &lt;&amp;4 ; do COMMAND &quot;$file&quot; # Use quoted &quot;$file&quot; -- not $file, everywhere. done 4&lt; &lt;(find . -print0) # Named pipe version. # Requires nonstandard extensions to find and to shell's read (bash ok). # Underlying system must include named pipes (FIFOs). # Again, in this version, variables *do* stay set after the loop ends, # and you can read from stdin. # (Change the 4 to something else if fd 4 needed). mkfifo mypipe find . -print0 &gt; mypipe &amp; while IFS=&quot;&quot; read -r -d &quot;&quot; file &lt;&amp;4 ; do COMMAND &quot;$file&quot; # Use quoted &quot;$file&quot;, not $file, everywhere. done 4&lt; mypipe Appendix E. Exit Codes With Special Meanings Table E-1. Reserved Exit Codes Exit Code Number Meaning Example Comments 1 Catchall for general errors let &quot;var1 = 1/0&quot; Miscellaneous errors, such as &quot;divide by zero&quot; and other impermissible operations 2 Misuse of shell builtins (according to Bash documentation) empty_function() {} Missing keyword or command, or permission problem (and diff return code on a failed binary file comparison). 126 Command invoked cannot execute /dev/null Permission problem or command is not an executable 127 &quot;command not found&quot; illegal_command Possible problem with $PATH or a typo 128 Invalid argument to exit exit 3.14159 exit takes only integer args in the range 0 - 255 (see first footnote) 128+n Fatal error signal &quot;n&quot; kill -9 $PPID of script $? returns 137 (128 + 9) 130 Script terminated by Control-C Ctl-C Control-C is fatal error signal 2, (130 = 128 + 2, see above) 255* Exit status out of range exit -1 exit takes only integer args in the range 0 - 255 According to the above table, exit codes 1 - 2, 126 - 165, and 255 [144] have special meanings, and should therefore be avoided for user-specified exit parameters. Ending a script with exit 127 would certainly cause confusion when troubleshooting (is the error code a &quot;command not found&quot; or a user-defined one?). However, many scripts use an exit 1 as a general bailout-upon-error. Since exit code 1 signifies so many possible errors, it is not particularly useful in debugging. There has been an attempt to systematize exit status numbers (see /usr/include/sysexits.h), but this is intended for C and C++ programmers. A similar standard for scripting might be appropriate. The author of this document proposes restricting user-defined exit codes to the range 64 - 113 (in addition to 0, for success), to conform with the C/C++ standard. This would allot 50 valid codes, and make troubleshooting scripts more straightforward. [145] All user-defined exit codes in the accompanying examples to this document conform to this standard, except where overriding circumstances exist, as in Example 9-2. Note Issuing a $? from the command-line after a shell script exits gives results consistent with the table above only from the Bash or sh prompt. Running the C-shell or tcsh may give different values in some cases. Appendix F. A Detailed Introduction to I/O and I/O Redirection written by Stéphane Chazelas, and revised by the document author A command expects the first three file descriptors to be available. The first, fd 0 (standard input, stdin), is for reading. The other two (fd 1, stdout and fd 2, stderr) are for writing. There is a stdin, stdout, and a stderr associated with each command. ls 2&gt;&amp;1 means temporarily connecting the stderr of the ls command to the same &quot;resource&quot; as the shell's stdout. By convention, a command reads its input from fd 0 (stdin), prints normal output to fd 1 (stdout), and error ouput to fd 2 (stderr). If one of those three fd's is not open, you may encounter problems: bash$ cat /etc/passwd &gt;&amp;- cat: standard output: Bad file descriptor For example, when xterm runs, it first initializes itself. Before running the user's shell, xterm opens the terminal device (/dev/pts/&lt;n&gt; or something similar) three times. At this point, Bash inherits these three file descriptors, and each command (child process) run by Bash inherits them in turn, except when you redirect the command. Redirection means reassigning one of the file descriptors to another file (or a pipe, or anything permissible). File descriptors may be reassigned locally (for a command, a command group, a subshell, a while or if or case or for loop...), or globally, for the remainder of the shell (using exec). ls &gt; /dev/null means running ls with its fd 1 connected to /dev/null. bash$ lsof -a -p $$ -d0,1,2 COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME bash 363 bozo 0u CHR 136,1 3 /dev/pts/1 bash 363 bozo 1u CHR 136,1 3 /dev/pts/1 bash 363 bozo 2u CHR 136,1 3 /dev/pts/1 bash$ exec 2&gt; /dev/null bash$ lsof -a -p $$ -d0,1,2 COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME bash 371 bozo 0u CHR 136,1 3 /dev/pts/1 bash 371 bozo 1u CHR 136,1 3 /dev/pts/1 bash 371 bozo 2w CHR 1,3 120 /dev/null bash$ bash -c 'lsof -a -p $$ -d0,1,2' | cat COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME lsof 379 root 0u CHR 136,1 3 /dev/pts/1 lsof 379 root 1w FIFO 0,0 7118 pipe lsof 379 root 2u CHR 136,1 3 /dev/pts/1 bash$ echo &quot;$(bash -c 'lsof -a -p $$ -d0,1,2' 2&gt;&amp;1)&quot; COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME lsof 426 root 0u CHR 136,1 3 /dev/pts/1 lsof 426 root 1w FIFO 0,0 7520 pipe lsof 426 root 2w FIFO 0,0 7520 pipe This works for different types of redirection. Exercise: Analyze the following script. #! /usr/bin/env bash mkfifo /tmp/fifo1 /tmp/fifo2 while read a; do echo &quot;FIFO1: $a&quot;; done &lt; /tmp/fifo1 &amp; exec 7&gt; /tmp/fifo1 exec 8&gt; &gt;(while read a; do echo &quot;FD8: $a, to fd7&quot;; done &gt;&amp;7) exec 3&gt;&amp;1 ( ( ( while read a; do echo &quot;FIFO2: $a&quot;; done &lt; /tmp/fifo2 | tee /dev/stderr \ | tee /dev/fd/4 | tee /dev/fd/5 | tee /dev/fd/6 &gt;&amp;7 &amp; exec 3&gt; /tmp/fifo2 echo 1st, to stdout sleep 1 echo 2nd, to stderr &gt;&amp;2 sleep 1 echo 3rd, to fd 3 &gt;&amp;3 sleep 1 echo 4th, to fd 4 &gt;&amp;4 sleep 1 echo 5th, to fd 5 &gt;&amp;5 sleep 1 echo 6th, through a pipe | sed 's/.*/PIPE: &amp;, to fd 5/' &gt;&amp;5 sleep 1 echo 7th, to fd 6 &gt;&amp;6 sleep 1 echo 8th, to fd 7 &gt;&amp;7 sleep 1 echo 9th, to fd 8 &gt;&amp;8 ) 4&gt;&amp;1 &gt;&amp;3 3&gt;&amp;- | while read a; do echo &quot;FD4: $a&quot;; done 1&gt;&amp;3 5&gt;&amp;- 6&gt;&amp;- ) 5&gt;&amp;1 &gt;&amp;3 | while read a; do echo &quot;FD5: $a&quot;; done 1&gt;&amp;3 6&gt;&amp;- ) 6&gt;&amp;1 &gt;&amp;3 | while read a; do echo &quot;FD6: $a&quot;; done 3&gt;&amp;- rm -f /tmp/fifo1 /tmp/fifo2 # For each command and subshell, figure out which fd points to what. # Good luck! exit 0 Appendix G. Command-Line Options Many executables, whether binaries or script files, accept options to modify their run-time behavior. For example: from the command-line, typing command -o would invoke command, with option o. G.1. Standard Command-Line Options Over time, there has evolved a loose standard for the meanings of command-line option flags. The GNU utilities conform more closely to this &quot;standard&quot; than older UNIX utilities. Traditionally, UNIX command-line options consist of a dash, followed by one or more lowercase letters. The GNU utilities added a double-dash, followed by a complete word or compound word. The two most widely-accepted options are: -h --help Help: Give usage message and exit. -v --version Version: Show program version and exit. Other common options are: -a --all All: show all information or operate on all arguments. -l --list List: list files or arguments without taking other action. -o Output filename -q --quiet Quiet: suppress stdout. -r -R --recursive Recursive: Operate recursively (down directory tree). -v --verbose Verbose: output additional information to stdout or stderr. -z --compress Compress: apply compression (usually gzip). However: In tar and gawk: -f --file File: filename follows. In cp, mv, rm: -f --force Force: force overwrite of target file(s). Caution Many UNIX and Linux utilities deviate from this &quot;standard,&quot; so it is dangerous to assume that a given option will behave in a standard way. Always check the man page for the command in question when in doubt. A complete table of recommended options for the GNU utilities is available at the GNU standards page. G.2. Bash Command-Line Options Bash itself has a number of command-line options. Here are some of the more useful ones. -c Read commands from the following string and assign any arguments to the positional parameters. bash$ bash -c 'set a b c d; IFS=&quot;+-;&quot;; echo &quot;$*&quot;' a+b+c+d -r --restricted Runs the shell, or a script, in restricted mode. --posix Forces Bash to conform to POSIX mode. --version Display Bash version information and exit. -- End of options. Anything further on the command line is an argument, not an option. Appendix H. Important Files startup files These files contain the aliases and environmental variables made available to Bash running as a user shell and to all Bash scripts invoked after system initialization. /etc/profile Systemwide defaults, mostly setting the environment (all Bourne-type shells, not just Bash [146]) /etc/bashrc systemwide functions and aliases for Bash $HOME/.bash_profile user-specific Bash environmental default settings, found in each user's home directory (the local counterpart to /etc/profile) $HOME/.bashrc user-specific Bash init file, found in each user's home directory (the local counterpart to /etc/bashrc). Only interactive shells and user scripts read this file. See Appendix M for a sample .bashrc file. logout file $HOME/.bash_logout user-specific instruction file, found in each user's home directory. Upon exit from a login (Bash) shell, the commands in this file execute. data files /etc/passwd A listing of all the user accounts on the system, their identities, their home directories, the groups they belong to, and their default shell. Note that the user passwords are not stored in this file, [147] but in /etc/shadow in encrypted form. system configuration files /etc/sysconfig/hwconf Listing and description of attached hardware devices. This information is in text form and can be extracted and parsed. bash$ grep -A 5 AUDIO /etc/sysconfig/hwconf class: AUDIO bus: PCI detached: 0 driver: snd-intel8x0 desc: &quot;Intel Corporation 82801CA/CAM AC'97 Audio Controller&quot; vendorId: 8086 Note This file is present on Red Hat and Fedora Core installations, but may be missing from other distros. Appendix I. Important System Directories Sysadmins and anyone else writing administrative scripts should be intimately familiar with the following system directories. /bin Binaries (executables). Basic system programs and utilities (such as bash). /usr/bin [148] More system binaries. /usr/local/bin Miscellaneous binaries local to the particular machine. /sbin System binaries. Basic system administrative programs and utilities (such as fsck). /usr/sbin More system administrative programs and utilities. /etc Et cetera. Systemwide configuration scripts. Of particular interest are the /etc/fstab (filesystem table), /etc/mtab (mounted filesystem table), and the /etc/inittab files. /etc/rc.d Boot scripts, on Red Hat and derivative distributions of Linux. /usr/share/doc Documentation for installed packages. /usr/man The systemwide manpages. /dev Device directory. Entries (but not mount points) for physical and virtual devices. See Chapter 29. /proc Process directory. Contains information and statistics about running processes and kernel parameters. See Chapter 29. /sys Systemwide device directory. Contains information and statistics about device and device names. This is newly added to Linux with the 2.6.X kernels. /mnt Mount. Directory for mounting hard drive partitions, such as /mnt/dos, and physical devices. In newer Linux distros, the /media directory has taken over as the preferred mount point for I/O devices. /media In newer Linux distros, the preferred mount point for I/O devices, such as CD/DVD drives or USB flash drives. /var Variable (changeable) system files. This is a catchall &quot;scratchpad&quot; directory for data generated while a Linux/UNIX machine is running. /var/log Systemwide log files. /var/spool/mail User mail spool. /lib Systemwide library files. /usr/lib More systemwide library files. /tmp System temporary files. /boot System boot directory. The kernel, module links, system map, and boot manager reside here. Warning Altering files in this directory may result in an unbootable system. Appendix J. An Introduction to Programmable Completion The programmable completion feature in Bash permits typing a partial command, then pressing the [Tab] key to auto-complete the command sequence. [149] If multiple completions are possible, then [Tab] lists them all. Let's see how it works. bash$ xtra[Tab] xtraceroute xtrapin xtrapproto xtraceroute.real xtrapinfo xtrapreset xtrapchar xtrapout xtrapstats bash$ xtrac[Tab] xtraceroute xtraceroute.real bash$ xtraceroute.r[Tab] xtraceroute.real Tab completion also works for variables and path names. bash$ echo $BASH[Tab] $BASH $BASH_COMPLETION $BASH_SUBSHELL $BASH_ARGC $BASH_COMPLETION_DIR $BASH_VERSINFO $BASH_ARGV $BASH_LINENO $BASH_VERSION $BASH_COMMAND $BASH_SOURCE bash$ echo /usr/local/[Tab] bin/ etc/ include/ libexec/ sbin/ src/ doc/ games/ lib/ man/ share/ The Bash complete and compgen builtins make it possible for tab completion to recognize partial parameters and options to commands. In a very simple case, we can use complete from the command-line to specify a short list of acceptable parameters. bash$ touch sample_command bash$ touch file1.txt file2.txt file2.doc file30.txt file4.zzz bash$ chmod +x sample_command bash$ complete -f -X '!*.txt' sample_command bash$ ./sample[Tab][Tab] sample_command file1.txt file2.txt file30.txt The -f option to complete specifies filenames, and -X the filter pattern. For anything more complex, we could write a script that specifies a list of acceptable command-line parameters. The compgen builtin expands a list of arguments to generate completion matches. Let us take a modified version of the UseGetOpt.sh script as an example command. This script accepts a number of command-line parameters, preceded by either a single or double dash. And here is the corresponding completion script, by convention given a filename corresponding to its associated command. Example J-1. Completion script for UseGetOpt.sh # file: UseGetOpt-2 # UseGetOpt-2.sh parameter-completion _UseGetOpt-2 () # By convention, the function name { #+ starts with an underscore. local cur # Pointer to current completion word. # By convention, it's named &quot;cur&quot; but this isn't strictly necessary. COMPREPLY=() # Array variable storing the possible completions. cur=${COMP_WORDS[COMP_CWORD]} case &quot;$cur&quot; in -*) COMPREPLY=( $( compgen -W '-a -d -f -l -t -h --aoption --debug \ --file --log --test --help --' -- $cur ) );; # Generate the completion matches and load them into $COMPREPLY array. # xx) May add more cases here. # yy) # zz) esac return 0 } complete -F _UseGetOpt-2 -o filenames ./UseGetOpt-2.sh # ^^ ^^^^^^^^^^^^ Invokes the function _UseGetOpt-2. Now, let's try it. bash$ source UseGetOpt-2 bash$ ./UseGetOpt-2.sh -[Tab] -- --aoption --debug --file --help --log --test -a -d -f -h -l -t bash$ ./UseGetOpt-2.sh --[Tab] -- --aoption --debug --file --help --log --test We begin by sourcing the &quot;completion script.&quot; This sets the command-line parameters. [150] In the first instance, hitting [Tab] after a single dash, the output is all the possible parameters preceded by one or more dashes. Hitting [Tab] after two dashes gives the possible parameters preceded by two or more dashes. Now, just what is the point of having to jump through flaming hoops to enable command-line tab completion? It saves keystrokes. [151] -- Resources: Bash programmable completion project Mitch Frazier's Linux Journal article, More on Using the Bash Complete Command Steve's excellent two-part article, &quot;An Introduction to Bash Completion&quot;: Part 1 and Part 2 Appendix K. Localization Localization is an undocumented Bash feature. A localized shell script echoes its text output in the language defined as the system's locale. A Linux user in Berlin, Germany, would get script output in German, whereas his cousin in Berlin, Maryland, would get output from the same script in English. To create a localized script, use the following template to write all messages to the user (error messages, prompts, etc.). #!/bin/bash # localized.sh # Script by Stéphane Chazelas, #+ modified by Bruno Haible, bugfixed by Alfredo Pironti. . gettext.sh E_CDERROR=65 error() { printf &quot;$@&quot; &gt;&amp;2 exit $E_CDERROR } cd $var || error &quot;`eval_gettext \&quot;Can\'t cd to \\\$var.\&quot;`&quot; # The triple backslashes (escapes) in front of $var needed #+ &quot;because eval_gettext expects a string #+ where the variable values have not yet been substituted.&quot; # -- per Bruno Haible read -p &quot;`gettext \&quot;Enter the value: \&quot;`&quot; var # ... # ------------------------------------------------------------------ # Alfredo Pironti comments: # This script has been modified to not use the $&quot;...&quot; syntax in #+ favor of the &quot;`gettext \&quot;...\&quot;`&quot; syntax. # This is ok, but with the new localized.sh program, the commands #+ &quot;bash -D filename&quot; and &quot;bash --dump-po-string filename&quot; #+ will produce no output #+ (because those command are only searching for the $&quot;...&quot; strings)! # The ONLY way to extract strings from the new file is to use the # 'xgettext' program. However, the xgettext program is buggy. # Note that 'xgettext' has another bug. # # The shell fragment: # gettext -s &quot;I like Bash&quot; # will be correctly extracted, but . . . # xgettext -s &quot;I like Bash&quot; # . . . fails! # 'xgettext' will extract &quot;-s&quot; because #+ the command only extracts the #+ very first argument after the 'gettext' word. # Escape characters: # # To localize a sentence like # echo -e &quot;Hello\tworld!&quot; #+ you must use # echo -e &quot;`gettext \&quot;Hello\\tworld\&quot;`&quot; # The &quot;double escape character&quot; before the `t' is needed because #+ 'gettext' will search for a string like: 'Hello\tworld' # This is because gettext will read one literal `\') #+ and will output a string like &quot;Bonjour\tmonde&quot;, #+ so the 'echo' command will display the message correctly. # # You may not use # echo &quot;`gettext -e \&quot;Hello\tworld\&quot;`&quot; #+ due to the xgettext bug explained above. # Let's localize the following shell fragment: # echo &quot;-h display help and exit&quot; # # First, one could do this: # echo &quot;`gettext \&quot;-h display help and exit\&quot;`&quot; # This way 'xgettext' will work ok, #+ but the 'gettext' program will read &quot;-h&quot; as an option! # # One solution could be # echo &quot;`gettext -- \&quot;-h display help and exit\&quot;`&quot; # This way 'gettext' will work, #+ but 'xgettext' will extract &quot;--&quot;, as referred to above. # # The workaround you may use to get this string localized is # echo -e &quot;`gettext \&quot;\\0-h display help and exit\&quot;`&quot; # We have added a \0 (NULL) at the beginning of the sentence. # This way 'gettext' works correctly, as does 'xgettext.' # Moreover, the NULL character won't change the behavior #+ of the 'echo' command. # ------------------------------------------------------------------ bash$ bash -D localized.sh &quot;Can't cd to %s.&quot; &quot;Enter the value: &quot; This lists all the localized text. (The -D option lists double-quoted strings prefixed by a $, without executing the script.) bash$ bash --dump-po-strings localized.sh #: a:6 msgid &quot;Can't cd to %s.&quot; msgstr &quot;&quot; #: a:7 msgid &quot;Enter the value: &quot; msgstr &quot;&quot; The --dump-po-strings option to Bash resembles the -D option, but uses gettext &quot;po&quot; format. Note Bruno Haible points out: Starting with gettext-0.12.2, xgettext -o - localized.sh is recommended instead of bash --dump-po-strings localized.sh, because xgettext . . . 1. understands the gettext and eval_gettext commands (whereas bash --dump-po-strings understands only its deprecated $&quot;...&quot; syntax) 2. can extract comments placed by the programmer, intended to be read by the translator. This shell code is then not specific to Bash any more; it works the same way with Bash 1.x and other /bin/sh implementations. Now, build a language.po file for each language that the script will be translated into, specifying the msgstr. Alfredo Pironti gives the following example: fr.po: #: a:6 msgid &quot;Can't cd to $var.&quot; msgstr &quot;Impossible de se positionner dans le repertoire $var.&quot; #: a:7 msgid &quot;Enter the value: &quot; msgstr &quot;Entrez la valeur : &quot; # The string are dumped with the variable names, not with the %s syntax, #+ similar to C programs. #+ This is a very cool feature if the programmer uses #+ variable names that make sense! Then, run msgfmt. msgfmt -o localized.sh.mo fr.po Place the resulting localized.sh.mo file in the /usr/local/share/locale/fr/LC_MESSAGES directory, and at the beginning of the script, insert the lines: TEXTDOMAINDIR=/usr/local/share/locale TEXTDOMAIN=localized.sh If a user on a French system runs the script, she will get French messages. Note With older versions of Bash or other shells, localization requires gettext, using the -s option. In this case, the script becomes: #!/bin/bash # localized.sh E_CDERROR=65 error() { local format=$1 shift printf &quot;$(gettext -s &quot;$format&quot;)&quot; &quot;$@&quot; &gt;&amp;2 exit $E_CDERROR } cd $var || error &quot;Can't cd to %s.&quot; &quot;$var&quot; read -p &quot;$(gettext -s &quot;Enter the value: &quot;)&quot; var # ... The TEXTDOMAIN and TEXTDOMAINDIR variables need to be set and exported to the environment. This should be done within the script itself. --- This appendix written by Stéphane Chazelas, with modifications suggested by Alfredo Pironti, and by Bruno Haible, maintainer of GNU gettext. Appendix L. History Commands The Bash shell provides command-line tools for editing and manipulating a user's command history. This is primarily a convenience, a means of saving keystrokes. Bash history commands: history fc bash$ history 1 mount /mnt/cdrom 2 cd /mnt/cdrom 3 ls ... Internal variables associated with Bash history commands: $HISTCMD $HISTCONTROL $HISTIGNORE $HISTFILE $HISTFILESIZE $HISTSIZE $HISTTIMEFORMAT (Bash, ver. 3.0 or later) !! !$ !# !N !-N !STRING !?STRING? ^STRING^string^ Unfortunately, the Bash history tools find no use in scripting. #!/bin/bash # history.sh # A (vain) attempt to use the 'history' command in a script. history # No output. var=$(history); echo &quot;$var&quot; # $var is empty. # History commands are, by default, disabled within a script. # However, as dhw points out, #+ set -o history #+ enables the history mechanism. set -o history var=$(history); echo &quot;$var&quot; # 1 var=$(history) bash$ ./history.sh (no output) The Advancing in the Bash Shell site gives a good introduction to the use of history commands in Bash. Appendix M. Sample .bashrc and .bash_profile Files The ~/.bashrc file determines the behavior of interactive shells. A good look at this file can lead to a better understanding of Bash. Emmanuel Rouat contributed the following very elaborate .bashrc file, written for a Linux system. He welcomes reader feedback on it. Study the file carefully, and feel free to reuse code snippets and functions from it in your own .bashrc file or even in your scripts. Example M-1. Sample .bashrc file # =============================================================== # # # PERSONAL $HOME/.bashrc FILE for bash-3.0 (or later) # By Emmanuel Rouat [no-email] # # Last modified: Tue Nov 20 22:04:47 CET 2012 # This file is normally read by interactive shells only. #+ Here is the place to define your aliases, functions and #+ other interactive features like your prompt. # # The majority of the code here assumes you are on a GNU #+ system (most likely a Linux box) and is often based on code #+ found on Usenet or Internet. # # See for instance: # http://tldp.org/LDP/abs/html/index.html # http://www.caliban.org/bash # http://www.shelldorado.com/scripts/categories.html # http://www.dotfiles.org # # The choice of colors was done for a shell with a dark background #+ (white on black), and this is usually also suited for pure text-mode #+ consoles (no X server available). If you use a white background, #+ you'll have to do some other choices for readability. # # This bashrc file is a bit overcrowded. # Remember, it is just just an example. # Tailor it to your needs. # # =============================================================== # # --&gt; Comments added by HOWTO author. # If not running interactively, don't do anything [ -z &quot;$PS1&quot; ] &amp;&amp; return #------------------------------------------------------------- # Source global definitions (if any) #------------------------------------------------------------- if [ -f /etc/bashrc ]; then . /etc/bashrc # --&gt; Read /etc/bashrc, if present. fi #-------------------------------------------------------------- # Automatic setting of $DISPLAY (if not set already). # This works for me - your mileage may vary. . . . # The problem is that different types of terminals give #+ different answers to 'who am i' (rxvt in particular can be #+ troublesome) - however this code seems to work in a majority #+ of cases. #-------------------------------------------------------------- function get_xserver () { case $TERM in xterm ) XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' ) # Ane-Pieter Wieringa suggests the following alternative: # I_AM=$(who am i) # SERVER=${I_AM#*(} # SERVER=${SERVER%*)} XSERVER=${XSERVER%%:*} ;; aterm | rxvt) # Find some code that works here. ... ;; esac } if [ -z ${DISPLAY:=&quot;&quot;} ]; then get_xserver if [[ -z ${XSERVER} || ${XSERVER} == $(hostname) || ${XSERVER} == &quot;unix&quot; ]]; then DISPLAY=&quot;:0.0&quot; # Display on local host. else DISPLAY=${XSERVER}:0.0 # Display on remote host. fi fi export DISPLAY #------------------------------------------------------------- # Some settings #------------------------------------------------------------- #set -o nounset # These two options are useful for debugging. #set -o xtrace alias debug=&quot;set -o nounset; set -o xtrace&quot; ulimit -S -c 0 # Don't want coredumps. set -o notify set -o noclobber set -o ignoreeof # Enable options: shopt -s cdspell shopt -s cdable_vars shopt -s checkhash shopt -s checkwinsize shopt -s sourcepath shopt -s no_empty_cmd_completion shopt -s cmdhist shopt -s histappend histreedit histverify shopt -s extglob # Necessary for programmable completion. # Disable options: shopt -u mailwarn unset MAILCHECK # Don't want my shell to warn me of incoming mail. #------------------------------------------------------------- # Greeting, motd etc. ... #------------------------------------------------------------- # Color definitions (taken from Color Bash Prompt HowTo). # Some colors might look different of some terminals. # For example, I see 'Bold Red' as 'orange' on my screen, # hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt. # Normal Colors Black='\e[0;30m' # Black Red='\e[0;31m' # Red Green='\e[0;32m' # Green Yellow='\e[0;33m' # Yellow Blue='\e[0;34m' # Blue Purple='\e[0;35m' # Purple Cyan='\e[0;36m' # Cyan White='\e[0;37m' # White # Bold BBlack='\e[1;30m' # Black BRed='\e[1;31m' # Red BGreen='\e[1;32m' # Green BYellow='\e[1;33m' # Yellow BBlue='\e[1;34m' # Blue BPurple='\e[1;35m' # Purple BCyan='\e[1;36m' # Cyan BWhite='\e[1;37m' # White # Background On_Black='\e[40m' # Black On_Red='\e[41m' # Red On_Green='\e[42m' # Green On_Yellow='\e[43m' # Yellow On_Blue='\e[44m' # Blue On_Purple='\e[45m' # Purple On_Cyan='\e[46m' # Cyan On_White='\e[47m' # White NC=&quot;\e[m&quot; # Color Reset ALERT=${BWhite}${On_Red} # Bold White on red background echo -e &quot;${BCyan}This is BASH ${BRed}${BASH_VERSION%.*}${BCyan}\ - DISPLAY on ${BRed}$DISPLAY${NC}\n&quot; date if [ -x /usr/games/fortune ]; then /usr/games/fortune -s # Makes our day a bit more fun.... :-) fi function _exit() # Function to run upon exit of shell. { echo -e &quot;${BRed}Hasta la vista, baby${NC}&quot; } trap _exit EXIT #------------------------------------------------------------- # Shell Prompt - for many examples, see: # http://www.debian-administration.org/articles/205 # http://www.askapache.com/linux/bash-power-prompt.html # http://tldp.org/HOWTO/Bash-Prompt-HOWTO # https://github.com/nojhan/liquidprompt #------------------------------------------------------------- # Current Format: [TIME USER@HOST PWD] &gt; # TIME: # Green == machine load is low # Orange == machine load is medium # Red == machine load is high # ALERT == machine load is very high # USER: # Cyan == normal user # Orange == SU to user # Red == root # HOST: # Cyan == local session # Green == secured remote connection (via ssh) # Red == unsecured remote connection # PWD: # Green == more than 10% free disk space # Orange == less than 10% free disk space # ALERT == less than 5% free disk space # Red == current user does not have write privileges # Cyan == current filesystem is size zero (like /proc) # &gt;: # White == no background or suspended jobs in this shell # Cyan == at least one background job in this shell # Orange == at least one suspended job in this shell # # Command is added to the history file each time you hit enter, # so it's available to all shells (using 'history -a'). # Test connection type: if [ -n &quot;${SSH_CONNECTION}&quot; ]; then CNX=${Green} # Connected on remote machine, via ssh (good). elif [[ &quot;${DISPLAY%%:0*}&quot; != &quot;&quot; ]]; then CNX=${ALERT} # Connected on remote machine, not via ssh (bad). else CNX=${BCyan} # Connected on local machine. fi # Test user type: if [[ ${USER} == &quot;root&quot; ]]; then SU=${Red} # User is root. elif [[ ${USER} != $(logname) ]]; then SU=${BRed} # User is not login user. else SU=${BCyan} # User is normal (well ... most of us are). fi NCPU=$(grep -c 'processor' /proc/cpuinfo) # Number of CPUs SLOAD=$(( 100*${NCPU} )) # Small load MLOAD=$(( 200*${NCPU} )) # Medium load XLOAD=$(( 400*${NCPU} )) # Xlarge load # Returns system load as percentage, i.e., '40' rather than '0.40)'. function load() { local SYSLOAD=$(cut -d &quot; &quot; -f1 /proc/loadavg | tr -d '.') # System load of the current host. echo $((10#$SYSLOAD)) # Convert to decimal. } # Returns a color indicating system load. function load_color() { local SYSLOAD=$(load) if [ ${SYSLOAD} -gt ${XLOAD} ]; then echo -en ${ALERT} elif [ ${SYSLOAD} -gt ${MLOAD} ]; then echo -en ${Red} elif [ ${SYSLOAD} -gt ${SLOAD} ]; then echo -en ${BRed} else echo -en ${Green} fi } # Returns a color according to free disk space in $PWD. function disk_color() { if [ ! -w &quot;${PWD}&quot; ] ; then echo -en ${Red} # No 'write' privilege in the current directory. elif [ -s &quot;${PWD}&quot; ] ; then local used=$(command df -P &quot;$PWD&quot; | awk 'END {print $5} {sub(/%/,&quot;&quot;)}') if [ ${used} -gt 95 ]; then echo -en ${ALERT} # Disk almost full (&gt;95%). elif [ ${used} -gt 90 ]; then echo -en ${BRed} # Free disk space almost gone. else echo -en ${Green} # Free disk space is ok. fi else echo -en ${Cyan} # Current directory is size '0' (like /proc, /sys etc). fi } # Returns a color according to running/suspended jobs. function job_color() { if [ $(jobs -s | wc -l) -gt &quot;0&quot; ]; then echo -en ${BRed} elif [ $(jobs -r | wc -l) -gt &quot;0&quot; ] ; then echo -en ${BCyan} fi } # Adds some text in the terminal frame (if applicable). # Now we construct the prompt. PROMPT_COMMAND=&quot;history -a&quot; case ${TERM} in *term | rxvt | linux) PS1=&quot;\[\$(load_color)\][\A\[${NC}\] &quot; # Time of day (with load info): PS1=&quot;\[\$(load_color)\][\A\[${NC}\] &quot; # User@Host (with connection type info): PS1=${PS1}&quot;\[${SU}\]\u\[${NC}\]@\[${CNX}\]\h\[${NC}\] &quot; # PWD (with 'disk space' info): PS1=${PS1}&quot;\[\$(disk_color)\]\W]\[${NC}\] &quot; # Prompt (with 'job' info): PS1=${PS1}&quot;\[\$(job_color)\]&gt;\[${NC}\] &quot; # Set title of current xterm: PS1=${PS1}&quot;\[\e]0;[\u@\h] \w\a\]&quot; ;; *) PS1=&quot;(\A \u@\h \W) &gt; &quot; # --&gt; PS1=&quot;(\A \u@\h \w) &gt; &quot; # --&gt; Shows full pathname of current dir. ;; esac export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n' export HISTIGNORE=&quot;&amp;:bg:fg:ll:h&quot; export HISTTIMEFORMAT=&quot;$(echo -e ${BCyan})[%d/%m %H:%M:%S]$(echo -e ${NC}) &quot; export HISTCONTROL=ignoredups export HOSTFILE=$HOME/.hosts # Put a list of remote hosts in ~/.hosts #============================================================ # # ALIASES AND FUNCTIONS # # Arguably, some functions defined here are quite big. # If you want to make this file smaller, these functions can #+ be converted into scripts and removed from here. # #============================================================ #------------------- # Personnal Aliases #------------------- alias rm='rm -i' alias cp='cp -i' alias mv='mv -i' # -&gt; Prevents accidentally clobbering files. alias mkdir='mkdir -p' alias h='history' alias j='jobs -l' alias which='type -a' alias ..='cd ..' # Pretty-print of some PATH variables: alias path='echo -e ${PATH//:/\\n}' alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}' alias du='du -kh' # Makes a more readable output. alias df='df -kTh' #------------------------------------------------------------- # The 'ls' family (this assumes you use a recent GNU ls). #------------------------------------------------------------- # Add colors for filetype and human-readable sizes by default on 'ls': alias ls='ls -h --color' alias lx='ls -lXB' # Sort by extension. alias lk='ls -lSr' # Sort by size, biggest last. alias lt='ls -ltr' # Sort by date, most recent last. alias lc='ls -ltcr' # Sort by/show change time,most recent last. alias lu='ls -ltur' # Sort by/show access time,most recent last. # The ubiquitous 'll': directories first, with alphanumeric sorting: alias ll=&quot;ls -lv --group-directories-first&quot; alias lm='ll |more' # Pipe through 'more' alias lr='ll -R' # Recursive ls. alias la='ll -A' # Show hidden files. alias tree='tree -Csuh' # Nice alternative to 'recursive ls' ... #------------------------------------------------------------- # Tailoring 'less' #------------------------------------------------------------- alias more='less' export PAGER=less export LESSCHARSET='latin1' export LESSOPEN='|/usr/bin/lesspipe.sh %s 2&gt;&amp;-' # Use this if lesspipe.sh exists. export LESS='-i -N -w -z-4 -g -e -M -X -F -R -P%t?f%f \ :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...' # LESS man page colors (makes Man pages more readable). export LESS_TERMCAP_mb=$'\E[01;31m' export LESS_TERMCAP_md=$'\E[01;31m' export LESS_TERMCAP_me=$'\E[0m' export LESS_TERMCAP_se=$'\E[0m' export LESS_TERMCAP_so=$'\E[01;44;33m' export LESS_TERMCAP_ue=$'\E[0m' export LESS_TERMCAP_us=$'\E[01;32m' #------------------------------------------------------------- # Spelling typos - highly personnal and keyboard-dependent :-) #------------------------------------------------------------- alias xs='cd' alias vf='cd' alias moer='more' alias moew='more' alias kk='ll' #------------------------------------------------------------- # A few fun ones #------------------------------------------------------------- # Adds some text in the terminal frame (if applicable). function xtitle() { case &quot;$TERM&quot; in *term* | rxvt) echo -en &quot;\e]0;$*\a&quot; ;; *) ;; esac } # Aliases that use xtitle alias top='xtitle Processes on $HOST &amp;&amp; top' alias make='xtitle Making $(basename $PWD) ; make' # .. and functions function man() { for i ; do xtitle The $(basename $1|tr -d .[:digit:]) manual command man -a &quot;$i&quot; done } #------------------------------------------------------------- # Make the following commands run in background automatically: #------------------------------------------------------------- function te() # wrapper around xemacs/gnuserv { if [ &quot;$(gnuclient -batch -eval t 2&gt;&amp;-)&quot; == &quot;t&quot; ]; then gnuclient -q &quot;$@&quot;; else ( xemacs &quot;$@&quot; &amp;); fi } function soffice() { command soffice &quot;$@&quot; &amp; } function firefox() { command firefox &quot;$@&quot; &amp; } function xpdf() { command xpdf &quot;$@&quot; &amp; } #------------------------------------------------------------- # File &amp; strings related functions: #------------------------------------------------------------- # Find a file with a pattern in name: function ff() { find . -type f -iname '*'&quot;$*&quot;'*' -ls ; } # Find a file with pattern $1 in name and Execute $2 on it: function fe() { find . -type f -iname '*'&quot;${1:-}&quot;'*' \ -exec ${2:-file} {} \; ; } # Find a pattern in a set of files and highlight them: #+ (needs a recent version of egrep). function fstr() { OPTIND=1 local mycase=&quot;&quot; local usage=&quot;fstr: find string in files. Usage: fstr [-i] \&quot;pattern\&quot; [\&quot;filename pattern\&quot;] &quot; while getopts :it opt do case &quot;$opt&quot; in i) mycase=&quot;-i &quot; ;; *) echo &quot;$usage&quot;; return ;; esac done shift $(( $OPTIND - 1 )) if [ &quot;$#&quot; -lt 1 ]; then echo &quot;$usage&quot; return; fi find . -type f -name &quot;${2:-*}&quot; -print0 | \ xargs -0 egrep --color=always -sn ${case} &quot;$1&quot; 2&gt;&amp;- | more } function swap() { # Swap 2 filenames around, if they exist (from Uzi's bashrc). local TMPFILE=tmp.$$ [ $# -ne 2 ] &amp;&amp; echo &quot;swap: 2 arguments needed&quot; &amp;&amp; return 1 [ ! -e $1 ] &amp;&amp; echo &quot;swap: $1 does not exist&quot; &amp;&amp; return 1 [ ! -e $2 ] &amp;&amp; echo &quot;swap: $2 does not exist&quot; &amp;&amp; return 1 mv &quot;$1&quot; $TMPFILE mv &quot;$2&quot; &quot;$1&quot; mv $TMPFILE &quot;$2&quot; } function extract() # Handy Extract Program { if [ -f $1 ] ; then case $1 in *.tar.bz2) tar xvjf $1 ;; *.tar.gz) tar xvzf $1 ;; *.bz2) bunzip2 $1 ;; *.rar) unrar x $1 ;; *.gz) gunzip $1 ;; *.tar) tar xvf $1 ;; *.tbz2) tar xvjf $1 ;; *.tgz) tar xvzf $1 ;; *.zip) unzip $1 ;; *.Z) uncompress $1 ;; *.7z) 7z x $1 ;; *) echo &quot;'$1' cannot be extracted via &gt;extract&lt;&quot; ;; esac else echo &quot;'$1' is not a valid file!&quot; fi } # Creates an archive (*.tar.gz) from given directory. function maketar() { tar cvzf &quot;${1%%/}.tar.gz&quot; &quot;${1%%/}/&quot;; } # Create a ZIP archive of a file or folder. function makezip() { zip -r &quot;${1%%/}.zip&quot; &quot;$1&quot; ; } # Make your directories and files access rights sane. function sanitize() { chmod -R u=rwX,g=rX,o= &quot;$@&quot; ;} #------------------------------------------------------------- # Process/system related functions: #------------------------------------------------------------- function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; } function pp() { my_ps f | awk '!/awk/ &amp;&amp; $0~var' var=${1:-&quot;.*&quot;} ; } function killps() # kill by process name { local pid pname sig=&quot;-TERM&quot; # default signal if [ &quot;$#&quot; -lt 1 ] || [ &quot;$#&quot; -gt 2 ]; then echo &quot;Usage: killps [-SIGNAL] pattern&quot; return; fi if [ $# = 2 ]; then sig=$1 ; fi for pid in $(my_ps| awk '!/awk/ &amp;&amp; $0~pat { print $1 }' pat=${!#} ) do pname=$(my_ps | awk '$1~var { print $5 }' var=$pid ) if ask &quot;Kill process $pid &lt;$pname&gt; with signal $sig?&quot; then kill $sig $pid fi done } function mydf() # Pretty-print of 'df' output. { # Inspired by 'dfc' utility. for fs ; do if [ ! -d $fs ] then echo -e $fs&quot; :No such file or directory&quot; ; continue fi local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') ) local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') ) local nbstars=$(( 20 * ${info[1]} / ${info[0]} )) local out=&quot;[&quot; for ((j=0;j&lt;20;j++)); do if [ ${j} -lt ${nbstars} ]; then out=$out&quot;*&quot; else out=$out&quot;-&quot; fi done out=${info[2]}&quot; &quot;$out&quot;] (&quot;$free&quot; free on &quot;$fs&quot;)&quot; echo -e $out done } function my_ip() # Get IP adress on ethernet. { MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' | sed -e s/addr://) echo ${MY_IP:-&quot;Not connected&quot;} } function ii() # Get current host related info. { echo -e &quot;\nYou are logged on ${BRed}$HOST&quot; echo -e &quot;\n${BRed}Additionnal information:$NC &quot; ; uname -a echo -e &quot;\n${BRed}Users logged on:$NC &quot; ; w -hs | cut -d &quot; &quot; -f1 | sort | uniq echo -e &quot;\n${BRed}Current date :$NC &quot; ; date echo -e &quot;\n${BRed}Machine stats :$NC &quot; ; uptime echo -e &quot;\n${BRed}Memory stats :$NC &quot; ; free echo -e &quot;\n${BRed}Diskspace :$NC &quot; ; mydf / $HOME echo -e &quot;\n${BRed}Local IP Address :$NC&quot; ; my_ip echo -e &quot;\n${BRed}Open connections :$NC &quot;; netstat -pan --inet; echo } #------------------------------------------------------------- # Misc utilities: #------------------------------------------------------------- function repeat() # Repeat n times command. { local i max max=$1; shift; for ((i=1; i &lt;= max ; i++)); do # --&gt; C-like syntax eval &quot;$@&quot;; done } function ask() # See 'killps' for example of use. { echo -n &quot;$@&quot; '[y/n] ' ; read ans case &quot;$ans&quot; in y*|Y*) return 0 ;; *) return 1 ;; esac } function corename() # Get name of app that created a corefile. { for file ; do echo -n $file : ; gdb --core=$file --batch | head -1 done } #========================================================================= # # PROGRAMMABLE COMPLETION SECTION # Most are taken from the bash 2.05 documentation and from Ian McDonald's # 'Bash completion' package (http://www.caliban.org/bash/#completion) # You will in fact need bash more recent then 3.0 for some features. # # Note that most linux distributions now provide many completions # 'out of the box' - however, you might need to make your own one day, # so I kept those here as examples. #========================================================================= if [ &quot;${BASH_VERSION%.*}&quot; \&lt; &quot;3.0&quot; ]; then echo &quot;You will need to upgrade to version 3.0 for full \ programmable completion features&quot; return fi shopt -s extglob # Necessary. complete -A hostname rsh rcp telnet rlogin ftp ping disk complete -A export printenv complete -A variable export local readonly unset complete -A enabled builtin complete -A alias alias unalias complete -A function function complete -A user su mail finger complete -A helptopic help # Currently same as builtins. complete -A shopt shopt complete -A stopped -P '%' bg complete -A job -P '%' fg jobs disown complete -A directory mkdir rmdir complete -A directory -o default cd # Compression complete -f -o default -X '*.+(zip|ZIP)' zip complete -f -o default -X '!*.+(zip|ZIP)' unzip complete -f -o default -X '*.+(z|Z)' compress complete -f -o default -X '!*.+(z|Z)' uncompress complete -f -o default -X '*.+(gz|GZ)' gzip complete -f -o default -X '!*.+(gz|GZ)' gunzip complete -f -o default -X '*.+(bz2|BZ2)' bzip2 complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2 complete -f -o default -X '!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract # Documents - Postscript,pdf,dvi..... complete -f -o default -X '!*.+(ps|PS)' gs ghostview ps2pdf ps2ascii complete -f -o default -X \ '!*.+(dvi|DVI)' dvips dvipdf xdvi dviselect dvitype complete -f -o default -X '!*.+(pdf|PDF)' acroread pdf2ps complete -f -o default -X '!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?\ (.gz|.GZ|.bz2|.BZ2|.Z))' gv ggv complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf complete -f -o default -X '!*.tex' tex latex slitex complete -f -o default -X '!*.lyx' lyx complete -f -o default -X '!*.+(htm*|HTM*)' lynx html2ps complete -f -o default -X \ '!*.+(doc|DOC|xls|XLS|ppt|PPT|sx?|SX?|csv|CSV|od?|OD?|ott|OTT)' soffice # Multimedia complete -f -o default -X \ '!*.+(gif|GIF|jp*g|JP*G|bmp|BMP|xpm|XPM|png|PNG)' xv gimp ee gqview complete -f -o default -X '!*.+(mp3|MP3)' mpg123 mpg321 complete -f -o default -X '!*.+(ogg|OGG)' ogg123 complete -f -o default -X \ '!*.@(mp[23]|MP[23]|ogg|OGG|wav|WAV|pls|\ m3u|xm|mod|s[3t]m|it|mtm|ult|flac)' xmms complete -f -o default -X '!*.@(mp?(e)g|MP?(E)G|wma|avi|AVI|\ asf|vob|VOB|bin|dat|vcd|ps|pes|fli|viv|rm|ram|yuv|mov|MOV|qt|\ QT|wmv|mp3|MP3|ogg|OGG|ogm|OGM|mp4|MP4|wav|WAV|asx|ASX)' xine complete -f -o default -X '!*.pl' perl perl5 # This is a 'universal' completion function - it works when commands have #+ a so-called 'long options' mode , ie: 'ls --all' instead of 'ls -a' # Needs the '-o' option of grep #+ (try the commented-out version if not available). # First, remove '=' from completion word separators #+ (this will allow completions like 'ls --color=auto' to work correctly). COMP_WORDBREAKS=${COMP_WORDBREAKS/=/} _get_longopts() { #$1 --help | sed -e '/--/!d' -e 's/.*--\([^[:space:].,]*\).*/--\1/'| \ #grep ^&quot;$2&quot; |sort -u ; $1 --help | grep -o -e &quot;--[^[:space:].,]*&quot; | grep -e &quot;$2&quot; |sort -u } _longopts() { local cur cur=${COMP_WORDS[COMP_CWORD]} case &quot;${cur:-*}&quot; in -*) ;; *) return ;; esac case &quot;$1&quot; in \~*) eval cmd=&quot;$1&quot; ;; *) cmd=&quot;$1&quot; ;; esac COMPREPLY=( $(_get_longopts ${1} ${cur} ) ) } complete -o default -F _longopts configure bash complete -o default -F _longopts wget id info a2ps ls recode _tar() { local cur ext regex tar untar COMPREPLY=() cur=${COMP_WORDS[COMP_CWORD]} # If we want an option, return the possible long options. case &quot;$cur&quot; in -*) COMPREPLY=( $(_get_longopts $1 $cur ) ); return 0;; esac if [ $COMP_CWORD -eq 1 ]; then COMPREPLY=( $( compgen -W 'c t x u r d A' -- $cur ) ) return 0 fi case &quot;${COMP_WORDS[1]}&quot; in ?(-)c*f) COMPREPLY=( $( compgen -f $cur ) ) return 0 ;; +([^Izjy])f) ext='tar' regex=$ext ;; *z*f) ext='tar.gz' regex='t\(ar\.\)\(gz\|Z\)' ;; *[Ijy]*f) ext='t?(ar.)bz?(2)' regex='t\(ar\.\)bz2\?' ;; *) COMPREPLY=( $( compgen -f $cur ) ) return 0 ;; esac if [[ &quot;$COMP_LINE&quot; == tar*.$ext' '* ]]; then # Complete on files in tar file. # # Get name of tar file from command line. tar=$( echo &quot;$COMP_LINE&quot; | \ sed -e 's|^.* \([^ ]*'$regex'\) .*$|\1|' ) # Devise how to untar and list it. untar=t${COMP_WORDS[1]//[^Izjyf]/} COMPREPLY=( $( compgen -W &quot;$( echo $( tar $untar $tar \ 2&gt;/dev/null ) )&quot; -- &quot;$cur&quot; ) ) return 0 else # File completion on relevant files. COMPREPLY=( $( compgen -G $cur\*.$ext ) ) fi return 0 } complete -F _tar -o default tar _make() { local mdef makef makef_dir=&quot;.&quot; makef_inc gcmd cur prev i; COMPREPLY=(); cur=${COMP_WORDS[COMP_CWORD]}; prev=${COMP_WORDS[COMP_CWORD-1]}; case &quot;$prev&quot; in -*f) COMPREPLY=($(compgen -f $cur )); return 0 ;; esac; case &quot;$cur&quot; in -*) COMPREPLY=($(_get_longopts $1 $cur )); return 0 ;; esac; # ... make reads # GNUmakefile, # then makefile # then Makefile ... if [ -f ${makef_dir}/GNUmakefile ]; then makef=${makef_dir}/GNUmakefile elif [ -f ${makef_dir}/makefile ]; then makef=${makef_dir}/makefile elif [ -f ${makef_dir}/Makefile ]; then makef=${makef_dir}/Makefile else makef=${makef_dir}/*.mk # Local convention. fi # Before we scan for targets, see if a Makefile name was #+ specified with -f. for (( i=0; i &lt; ${#COMP_WORDS[@]}; i++ )); do if [[ ${COMP_WORDS[i]} == -f ]]; then # eval for tilde expansion eval makef=${COMP_WORDS[i+1]} break fi done [ ! -f $makef ] &amp;&amp; return 0 # Deal with included Makefiles. makef_inc=$( grep -E '^-?include' $makef | sed -e &quot;s,^.* ,&quot;$makef_dir&quot;/,&quot; ) for file in $makef_inc; do [ -f $file ] &amp;&amp; makef=&quot;$makef $file&quot; done # If we have a partial word to complete, restrict completions #+ to matches of that word. if [ -n &quot;$cur&quot; ]; then gcmd='grep &quot;^$cur&quot;' ; else gcmd=cat ; fi COMPREPLY=( $( awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ \ {split($1,A,/ /);for(i in A)print A[i]}' \ $makef 2&gt;/dev/null | eval $gcmd )) } complete -F _make -X '+($*|*.[cho])' make gmake pmake _killall() { local cur prev COMPREPLY=() cur=${COMP_WORDS[COMP_CWORD]} # Get a list of processes #+ (the first sed evaluation #+ takes care of swapped out processes, the second #+ takes care of getting the basename of the process). COMPREPLY=( $( ps -u $USER -o comm | \ sed -e '1,1d' -e 's#[]\[]##g' -e 's#^.*/##'| \ awk '{if ($0 ~ /^'$cur'/) print $0}' )) return 0 } complete -F _killall killall killps # Local Variables: # mode:shell-script # sh-shell:bash # End: And, here is a snippet from Andrzej Szelachowski's instructive .bash_profile file. Example M-2. .bash_profile file # From Andrzej Szelachowski's ~/.bash_profile: # Note that a variable may require special treatment #+ if it will be exported. DARKGRAY='\e[1;30m' LIGHTRED='\e[1;31m' GREEN='\e[32m' YELLOW='\e[1;33m' LIGHTBLUE='\e[1;34m' NC='\e[m' PCT=&quot;\`if [[ \$EUID -eq 0 ]]; then T='$LIGHTRED' ; else T='$LIGHTBLUE'; fi; echo \$T \`&quot; # For &quot;literal&quot; command substitution to be assigned to a variable, #+ use escapes and double quotes: #+ PCT=&quot;\` ... \`&quot; . . . # Otherwise, the value of PCT variable is assigned only once, #+ when the variable is exported/read from .bash_profile, #+ and it will not change afterwards even if the user ID changes. PS1=&quot;\n$GREEN[\w] \n$DARKGRAY($PCT\t$DARKGRAY)-($PCT\u$DARKGRAY)-($PCT\! $DARKGRAY)$YELLOW-&gt; $NC&quot; # Escape a variables whose value changes: # if [[ \$EUID -eq 0 ]], # Otherwise the value of the EUID variable will be assigned only once, #+ as above. # When a variable is assigned, it should be called escaped: #+ echo \$T, # Otherwise the value of the T variable is taken from the moment the PCT #+ variable is exported/read from .bash_profile. # So, in this example it would be null. # When a variable's value contains a semicolon it should be strong quoted: # T='$LIGHTRED', # Otherwise, the semicolon will be interpreted as a command separator. # Variables PCT and PS1 can be merged into a new PS1 variable: PS1=&quot;\`if [[ \$EUID -eq 0 ]]; then PCT='$LIGHTRED'; else PCT='$LIGHTBLUE'; fi; echo '\n$GREEN[\w] \n$DARKGRAY('\$PCT'\t$DARKGRAY)-\ ('\$PCT'\u$DARKGRAY)-('\$PCT'\!$DARKGRAY)$YELLOW-&gt; $NC'\`&quot; # The trick is to use strong quoting for parts of old PS1 variable. Appendix N. Converting DOS Batch Files to Shell Scripts Quite a number of programmers learned scripting on a PC running DOS. Even the crippled DOS batch file language allowed writing some fairly powerful scripts and applications, though they often required extensive kludges and workarounds. Occasionally, the need still arises to convert an old DOS batch file to a UNIX shell script. This is generally not difficult, as DOS batch file operators are only a limited subset of the equivalent shell scripting ones. Table N-1. Batch file keywords / variables / operators, and their shell equivalents Batch File Operator Shell Script Equivalent Meaning % $ command-line parameter prefix / - command option flag \ / directory path separator == = (equal-to) string comparison test !==! != (not equal-to) string comparison test | | pipe @ set +v do not echo current command * * filename &quot;wild card&quot; &gt; &gt; file redirection (overwrite) &gt;&gt; &gt;&gt; file redirection (append) &lt; &lt; redirect stdin %VAR% $VAR environmental variable REM # comment NOT ! negate following test NUL /dev/null &quot;black hole&quot; for burying command output ECHO echo echo (many more option in Bash) ECHO. echo echo blank line ECHO OFF set +v do not echo command(s) following FOR %%VAR IN (LIST) DO for var in [list]; do &quot;for&quot; loop :LABEL none (unnecessary) label GOTO none (use a function) jump to another location in the script PAUSE sleep pause or wait an interval CHOICE case or select menu choice IF if if-test IF EXIST FILENAME if [ -e filename ] test if file exists IF !%N==! if [ -z &quot;$N&quot; ] if replaceable parameter &quot;N&quot; not present CALL source or . (dot operator) &quot;include&quot; another script COMMAND /C source or . (dot operator) &quot;include&quot; another script (same as CALL) SET export set an environmental variable SHIFT shift left shift command-line argument list SGN -lt or -gt sign (of integer) ERRORLEVEL $? exit status CON stdin &quot;console&quot; (stdin) PRN /dev/lp0 (generic) printer device LPT1 /dev/lp0 first printer device COM1 /dev/ttyS0 first serial port Batch files usually contain DOS commands. These must be translated into their UNIX equivalents in order to convert a batch file into a shell script. Table N-2. DOS commands and their UNIX equivalents DOS Command UNIX Equivalent Effect ASSIGN ln link file or directory ATTRIB chmod change file permissions CD cd change directory CHDIR cd change directory CLS clear clear screen COMP diff, comm, cmp file compare COPY cp file copy Ctl-C Ctl-C break (signal) Ctl-Z Ctl-D EOF (end-of-file) DEL rm delete file(s) DELTREE rm -rf delete directory recursively DIR ls -l directory listing ERASE rm delete file(s) EXIT exit exit current process FC comm, cmp file compare FIND grep find strings in files MD mkdir make directory MKDIR mkdir make directory MORE more text file paging filter MOVE mv move PATH $PATH path to executables REN mv rename (move) RENAME mv rename (move) RD rmdir remove directory RMDIR rmdir remove directory SORT sort sort file TIME date display system time TYPE cat output file to stdout XCOPY cp (extended) file copy Note Virtually all UNIX and shell operators and commands have many more options and enhancements than their DOS and batch file counterparts. Many DOS batch files rely on auxiliary utilities, such as ask.com, a crippled counterpart to read. DOS supports only a very limited and incompatible subset of filename wild-card expansion, recognizing just the * and ? characters. Converting a DOS batch file into a shell script is generally straightforward, and the result ofttimes reads better than the original. Example N-1. VIEWDATA.BAT: DOS Batch File REM VIEWDATA REM INSPIRED BY AN EXAMPLE IN &quot;DOS POWERTOOLS&quot; REM BY PAUL SOMERSON @ECHO OFF IF !%1==! GOTO VIEWDATA REM IF NO COMMAND-LINE ARG... FIND &quot;%1&quot; C:\BOZO\BOOKLIST.TXT GOTO EXIT0 REM PRINT LINE WITH STRING MATCH, THEN EXIT. :VIEWDATA TYPE C:\BOZO\BOOKLIST.TXT | MORE REM SHOW ENTIRE FILE, 1 PAGE AT A TIME. :EXIT0 The script conversion is somewhat of an improvement. [152] Example N-2. viewdata.sh: Shell Script Conversion of VIEWDATA.BAT #!/bin/bash # viewdata.sh # Conversion of VIEWDATA.BAT to shell script. DATAFILE=/home/bozo/datafiles/book-collection.data ARGNO=1 # @ECHO OFF Command unnecessary here. if [ $# -lt &quot;$ARGNO&quot; ] # IF !%1==! GOTO VIEWDATA then less $DATAFILE # TYPE C:\MYDIR\BOOKLIST.TXT | MORE else grep &quot;$1&quot; $DATAFILE # FIND &quot;%1&quot; C:\MYDIR\BOOKLIST.TXT fi exit 0 # :EXIT0 # GOTOs, labels, smoke-and-mirrors, and flimflam unnecessary. # The converted script is short, sweet, and clean, #+ which is more than can be said for the original. Ted Davis' Shell Scripts on the PC site had a set of comprehensive tutorials on the old-fashioned art of batch file programming. Unfortunately the page has vanished without a trace. Appendix O. Exercises The exercises that follow test and extend your knowledge of scripting. Think of them as a challenge, as an entertaining way to take you further along the stony path toward UNIX wizardry. On a dingy side street in a run-down section of Hoboken, New Jersey, there sits a nondescript squat two-story brick building with an inscription incised on a marble plate in its wall: Bash Scripting Hall of Fame. Inside, among various dusty uninteresting exhibits is a corroding, cobweb-festooned brass plaque inscribed with a short, very short list of those few persons who have successfully mastered the material in the Advanced Bash Scripting Guide, as evidenced by their performance on the following Exercise sections. (Alas, the author of the ABS Guide is not represented among the exhibits. This is possibly due to malicious rumors about lack of credentials and deficient scripting skills.) O.1. Analyzing Scripts Examine the following script. Run it, then explain what it does. Annotate the script and rewrite it in a more compact and elegant manner. #!/bin/bash MAX=10000 for((nr=1; nr&lt;$MAX; nr++)) do let &quot;t1 = nr % 5&quot; if [ &quot;$t1&quot; -ne 3 ] then continue fi let &quot;t2 = nr % 7&quot; if [ &quot;$t2&quot; -ne 4 ] then continue fi let &quot;t3 = nr % 9&quot; if [ &quot;$t3&quot; -ne 5 ] then continue fi break # What happens when you comment out this line? Why? done echo &quot;Number = $nr&quot; exit 0 --- Explain what the following script does. It is really just a parameterized command-line pipe. #!/bin/bash DIRNAME=/usr/bin FILETYPE=&quot;shell script&quot; LOGFILE=logfile file &quot;$DIRNAME&quot;/* | fgrep &quot;$FILETYPE&quot; | tee $LOGFILE | wc -l exit 0 --- Examine and explain the following script. For hints, you might refer to the listings for find and stat. #!/bin/bash # Author: Nathan Coulter # This code is released to the public domain. # The author gave permission to use this code snippet in the ABS Guide. find -maxdepth 1 -type f -printf '%f\000' | { while read -d $'\000'; do mv &quot;$REPLY&quot; &quot;$(date -d &quot;$(stat -c '%y' &quot;$REPLY&quot;) &quot; '+%Y%m%d%H%M%S' )-$REPLY&quot; done } # Warning: Test-drive this script in a &quot;scratch&quot; directory. # It will somehow affect all the files there. --- A reader sent in the following code snippet. while read LINE do echo $LINE done &lt; `tail -f /var/log/messages` He wished to write a script tracking changes to the system log file, /var/log/messages. Unfortunately, the above code block hangs and does nothing useful. Why? Fix this so it does work. (Hint: rather than redirecting the stdin of the loop, try a pipe.) --- Analyze the following &quot;one-liner&quot; (here split into two lines for clarity) contributed by Rory Winston: export SUM=0; for f in $(find src -name &quot;*.java&quot;); do export SUM=$(($SUM + $(wc -l $f | awk '{ print $1 }'))); done; echo $SUM Hint: First, break the script up into bite-sized sections. Then, carefully examine its use of double-parentheses arithmetic, the export command, the find command, the wc command, and awk. --- Analyze Example A-10, and reorganize it in a simplified and more logical style. See how many of the variables can be eliminated, and try to optimize the script to speed up its execution time. Alter the script so that it accepts any ordinary ASCII text file as input for its initial &quot;generation&quot;. The script will read the first $ROW*$COL characters, and set the occurrences of vowels as &quot;living&quot; cells. Hint: be sure to translate the spaces in the input file to underscore characters. O.2. Writing Scripts Write a script to carry out each of the following tasks. EASY Self-reproducing Script Write a script that backs itself up, that is, copies itself to a file named backup.sh. Hint: Use the cat command and the appropriate positional parameter. Home Directory Listing Perform a recursive directory listing on the user's home directory and save the information to a file. Compress the file, have the script prompt the user to insert a USB flash drive, then press ENTER. Finally, save the file to the flash drive after making certain the flash drive has properly mounted by parsing the output of df. Note that the flash drive must be unmounted before it is removed. Converting for loops to while and until loops Convert the for loops in Example 11-1 to while loops. Hint: store the data in an array and step through the array elements. Having already done the &quot;heavy lifting,&quot; now convert the loops in the example to until loops. Changing the line spacing of a text file Write a script that reads each line of a target file, then writes the line back to stdout, but with an extra blank line following. This has the effect of double-spacing the file. Include all necessary code to check whether the script gets the necessary command-line argument (a filename), and whether the specified file exists. When the script runs correctly, modify it to triple-space the target file. Finally, write a script to remove all blank lines from the target file, single-spacing it. Backwards Listing Write a script that echoes itself to stdout, but backwards. Automatically Decompressing Files Given a list of filenames as input, this script queries each target file (parsing the output of the file command) for the type of compression used on it. Then the script automatically invokes the appropriate decompression command (gunzip, bunzip2, unzip, uncompress, or whatever). If a target file is not compressed, the script emits a warning message, but takes no other action on that particular file. Unique System ID Generate a &quot;unique&quot; 6-digit hexadecimal identifier for your computer. Do not use the flawed hostid command. Hint: md5sum /etc/passwd, then select the first 6 digits of output. Backup Archive as a &quot;tarball&quot; (*.tar.gz file) all the files in your home directory tree (/home/your-name) that have been modified in the last 24 hours. Hint: use find. Optional: you may use this as the basis of a backup script. Checking whether a process is still running Given a process ID (PID) as an argument, this script will check, at user-specified intervals, whether the given process is still running. You may use the ps and sleep commands. Primes Print (to stdout) all prime numbers between 60000 and 63000. The output should be nicely formatted in columns (hint: use printf). Lottery Numbers One type of lottery involves picking five different numbers, in the range of 1 - 50. Write a script that generates five pseudorandom numbers in this range, with no duplicates. The script will give the option of echoing the numbers to stdout or saving them to a file, along with the date and time the particular number set was generated. (If your script consistently generates winning lottery numbers, then you can retire on the proceeds and leave shell scripting to those of us who have to work for a living.) INTERMEDIATE Integer or String Write a script function that determines if an argument passed to it is an integer or a string. The function will return TRUE (0) if passed an integer, and FALSE (1) if passed a string. Hint: What does the following expression return when $1 is not an integer? expr $1 + 0 ASCII to Integer The atoi function in C converts a string character to an integer. Write a shell script function that performs the same operation. Likewise, write a shell script function that does the inverse, mirroring the C itoa function which converts an integer into an ASCII character. Managing Disk Space List, one at a time, all files larger than 100K in the /home/username directory tree. Give the user the option to delete or compress the file, then proceed to show the next one. Write to a logfile the names of all deleted files and the deletion times. Banner Simulate the functionality of the deprecated banner command in a script. Removing Inactive Accounts Inactive accounts on a network server waste disk space and may become a security risk. Write an administrative script (to be invoked by root or the cron daemon) that checks for and deletes user accounts that have not been accessed within the last 90 days. Enforcing Disk Quotas Write a script for a multi-user system that checks users' disk usage. If a user surpasses a preset limit (500 MB, for example) in her /home/username directory, then the script automatically sends her a &quot;pigout&quot; warning e-mail. The script will use the du and mail commands. As an option, it will allow setting and enforcing quotas using the quota and setquota commands. Logged in User Information For all logged in users, show their real names and the time and date of their last login. Hint: use who, lastlog, and parse /etc/passwd. Safe Delete Implement, as a script, a &quot;safe&quot; delete command, sdel.sh. Filenames passed as command-line arguments to this script are not deleted, but instead gzipped if not already compressed (use file to check), then moved to a ~/TRASH directory. Upon invocation, the script checks the ~/TRASH directory for files older than 48 hours and permanently deletes them. (An better alternative might be to have a second script handle this, periodically invoked by the cron daemon.) Extra credit: Write the script so it can handle files and directories recursively. This would give it the capability of &quot;safely deleting&quot; entire directory structures. Making Change What is the most efficient way to make change for $1.68, using only coins in common circulations (up to 25c)? It's 6 quarters, 1 dime, a nickel, and three cents. Given any arbitrary command-line input in dollars and cents ($*.??), calculate the change, using the minimum number of coins. If your home country is not the United States, you may use your local currency units instead. The script will need to parse the command-line input, then change it to multiples of the smallest monetary unit (cents or whatever). Hint: look at Example 24-8. Quadratic Equations Solve a quadratic equation of the form Ax^2 + Bx + C = 0. Have a script take as arguments the coefficients, A, B, and C, and return the solutions to five decimal places. Hint: pipe the coefficients to bc, using the well-known formula, x = ( -B +/- sqrt( B^2 - 4AC ) ) / 2A. Table of Logarithms Using the bc and printf commands, print out a nicely-formatted table of eight-place natural logarithms in the interval between 0.00 and 100.00, in steps of .01. Hint: bc requires the -l option to load the math library. Unicode Table Using Example T-1 as a template, write a script that prints to a file a complete Unicode table. Hint: Use the -e option to echo: echo -e '\uXXXX', where XXXX is the Unicode numerical character designation. This requires version 4.2 or later of Bash. Sum of Matching Numbers Find the sum of all five-digit numbers (in the range 10000 - 99999) containing exactly two out of the following set of digits: { 4, 5, 6 }. These may repeat within the same number, and if so, they count once for each occurrence. Some examples of matching numbers are 42057, 74638, and 89515. Lucky Numbers A lucky number is one whose individual digits add up to 7, in successive additions. For example, 62431 is a lucky number (6 + 2 + 4 + 3 + 1 = 16, 1 + 6 = 7). Find all the lucky numbers between 1000 and 10000. Craps Borrowing the ASCII graphics from Example A-40, write a script that plays the well-known gambling game of craps. The script will accept bets from one or more players, roll the dice, and keep track of wins and losses, as well as of each player's bankroll. Tic-tac-toe Write a script that plays the child's game of tic-tac-toe against a human player. The script will let the human choose whether to take the first move. The script will follow an optimal strategy, and therefore never lose. To simplify matters, you may use ASCII graphics: o | x | ---------- | x | ---------- | o | Your move, human (row, column)? Alphabetizing a String Alphabetize (in ASCII order) an arbitrary string read from the command-line. Parsing Parse /etc/passwd, and output its contents in nice, easy-to-read tabular form. Logging Logins Parse /var/log/messages to produce a nicely formatted file of user logins and login times. The script may need to run as root. (Hint: Search for the string &quot;LOGIN.&quot;) Pretty-Printing a Data File Certain database and spreadsheet packages use save-files with the fields separated by commas, commonly referred to as comma-separated values or CSVs. Other applications often need to parse these files. Given a data file with comma-separated fields, of the form: Jones,Bill,235 S. Williams St.,Denver,CO,80221,(303) 244-7989 Smith,Tom,404 Polk Ave.,Los Angeles,CA,90003,(213) 879-5612 ... Reformat the data and print it out to stdout in labeled, evenly-spaced columns. Justification Given ASCII text input either from stdin or a file, adjust the word spacing to right-justify each line to a user-specified line-width, then send the output to stdout. Mailing List Using the mail command, write a script that manages a simple mailing list. The script automatically e-mails the monthly company newsletter, read from a specified text file, and sends it to all the addresses on the mailing list, which the script reads from another specified file. Generating Passwords Generate pseudorandom 8-character passwords, using characters in the ranges [0-9], [A-Z], [a-z]. Each password must contain at least two digits. Monitoring a User You suspect that one particular user on the network has been abusing her privileges and possibly attempting to hack the system. Write a script to automatically monitor and log her activities when she's signed on. The log file will save entries for the previous week, and delete those entries more than seven days old. You may use last, lastlog, and lastcomm to aid your surveillance of the suspected fiend. Checking for Broken Links Using lynx with the -traversal option, write a script that checks a Web site for broken links. DIFFICULT Testing Passwords Write a script to check and validate passwords. The object is to flag &quot;weak&quot; or easily guessed password candidates. A trial password will be input to the script as a command-line parameter. To be considered acceptable, a password must meet the following minimum qualifications: Minimum length of 8 characters Must contain at least one numeric character Must contain at least one of the following non-alphabetic characters: @, #, $, %, &amp;, *, +, -, = Optional: Do a dictionary check on every sequence of at least four consecutive alphabetic characters in the password under test. This will eliminate passwords containing embedded &quot;words&quot; found in a standard dictionary. Enable the script to check all the passwords on your system. These do not reside in /etc/passwd. This exercise tests mastery of Regular Expressions. Cross Reference Write a script that generates a cross-reference (concordance) on a target file. The output will be a listing of all word occurrences in the target file, along with the line numbers in which each word occurs. Traditionally, linked list constructs would be used in such applications. Therefore, you should investigate arrays in the course of this exercise. Example 16-12 is probably not a good place to start. Square Root Write a script to calculate square roots of numbers using Newton's Method. The algorithm for this, expressed as a snippet of Bash pseudo-code is: # (Isaac) Newton's Method for speedy extraction #+ of square roots. guess = $argument # $argument is the number to find the square root of. # $guess is each successive calculated &quot;guess&quot; -- or trial solution -- #+ of the square root. # Our first &quot;guess&quot; at a square root is the argument itself. oldguess = 0 # $oldguess is the previous $guess. tolerance = .000001 # To how close a tolerance we wish to calculate. loopcnt = 0 # Let's keep track of how many times through the loop. # Some arguments will require more loop iterations than others. while [ ABS( $guess $oldguess ) -gt $tolerance ] # ^^^^^^^^^^^^^^^^^^^^^^^ Fix up syntax, of course. # &quot;ABS&quot; is a (floating point) function to find the absolute value #+ of the difference between the two terms. # So, as long as difference between current and previous #+ trial solution (guess) exceeds the tolerance, keep looping. do oldguess = $guess # Update $oldguess to previous $guess. # ======================================================= guess = ( $oldguess + ( $argument / $oldguess ) ) / 2.0 # = 1/2 ( ($oldguess **2 + $argument) / $oldguess ) # equivalent to: # = 1/2 ( $oldguess + $argument / $oldguess ) # that is, &quot;averaging out&quot; the trial solution and #+ the proportion of argument deviation #+ (in effect, splitting the error in half). # This converges on an accurate solution #+ with surprisingly few loop iterations . . . #+ for arguments &gt; $tolerance, of course. # ======================================================= (( loopcnt++ )) # Update loop counter. done It's a simple enough recipe, and seems at first glance easy enough to convert into a working Bash script. The problem, though, is that Bash has no native support for floating point numbers. So, the script writer needs to use bc or possibly awk to convert the numbers and do the calculations. It could get rather messy . . . Logging File Accesses Log all accesses to the files in /etc during the course of a single day. This information should include the filename, user name, and access time. If any alterations to the files take place, that will be flagged. Write this data as tabular (tab-separated) formatted records in a logfile. Monitoring Processes Write a script to continually monitor all running processes and to keep track of how many child processes each parent spawns. If a process spawns more than five children, then the script sends an e-mail to the system administrator (or root) with all relevant information, including the time, PID of the parent, PIDs of the children, etc. The script appends a report to a log file every ten minutes. Strip Comments Strip all comments from a shell script whose name is specified on the command-line. Note that the initial #! line must not be stripped out. Strip HTML Tags Strip all the HTML tags from a specified HTML file, then reformat it into lines between 60 and 75 characters in length. Reset paragraph and block spacing, as appropriate, and convert HTML tables to their approximate text equivalent. XML Conversion Convert an XML file to both HTML and text format. Optional: A script that converts Docbook/SGML to XML. Chasing Spammers Write a script that analyzes a spam e-mail by doing DNS lookups on the IP addresses in the headers to identify the relay hosts as well as the originating ISP. The script will forward the unaltered spam message to the responsible ISPs. Of course, it will be necessary to filter out your own ISP's IP address, so you don't end up complaining about yourself. As necessary, use the appropriate network analysis commands. For some ideas, see Example 16-41 and Example A-28. Optional: Write a script that searches through a list of e-mail messages and deletes the spam according to specified filters. Creating man pages Write a script that automates the process of creating man pages. Given a text file which contains information to be formatted into a man page, the script will read the file, then invoke the appropriate groff commands to output the corresponding man page to stdout. The text file contains blocks of information under the standard man page headings, i.e., NAME, SYNOPSIS, DESCRIPTION, etc. Example A-39 is an instructive first step. Hex Dump Do a hex(adecimal) dump on a binary file specified as an argument to the script. The output should be in neat tabular fields, with the first field showing the address, each of the next 8 fields a 4-byte hex number, and the final field the ASCII equivalent of the previous 8 fields. The obvious followup to this is to extend the hex dump script into a disassembler. Using a lookup table, or some other clever gimmick, convert the hex values into 80x86 op codes. Emulating a Shift Register Using Example 27-15 as an inspiration, write a script that emulates a 64-bit shift register as an array. Implement functions to load the register, shift left, shift right, and rotate it. Finally, write a function that interprets the register contents as eight 8-bit ASCII characters. Calculating Determinants Write a script that calculates determinants [153] by recursively expanding the minors. Use a 4 x 4 determinant as a test case. Hidden Words Write a &quot;word-find&quot; puzzle generator, a script that hides 10 input words in a 10 x 10 array of random letters. The words may be hidden across, down, or diagonally. Optional: Write a script that solves word-find puzzles. To keep this from becoming too difficult, the solution script will find only horizontal and vertical words. (Hint: Treat each row and column as a string, and search for substrings.) Anagramming Anagram 4-letter input. For example, the anagrams of word are: do or rod row word. You may use /usr/share/dict/linux.words as the reference list. Word Ladders A &quot;word ladder&quot; is a sequence of words, with each successive word in the sequence differing from the previous one by a single letter. For example, to &quot;ladder&quot; from mark to vase: mark --&gt; park --&gt; part --&gt; past --&gt; vast --&gt; vase ^ ^ ^ ^ ^ Write a script that solves word ladder puzzles. Given a starting and an ending word, the script will list all intermediate steps in the &quot;ladder.&quot; Note that all words in the sequence must be legitimate dictionary words. Fog Index The &quot;fog index&quot; of a passage of text estimates its reading difficulty, as a number corresponding roughly to a school grade level. For example, a passage with a fog index of 12 should be comprehensible to anyone with 12 years of schooling. The Gunning version of the fog index uses the following algorithm. Choose a section of the text at least 100 words in length. Count the number of sentences (a portion of a sentence truncated by the boundary of the text section counts as one). Find the average number of words per sentence. AVE_WDS_SEN = TOTAL_WORDS / SENTENCES Count the number of &quot;difficult&quot; words in the segment -- those containing at least 3 syllables. Divide this quantity by total words to get the proportion of difficult words. PRO_DIFF_WORDS = LONG_WORDS / TOTAL_WORDS The Gunning fog index is the sum of the above two quantities, multiplied by 0.4, then rounded to the nearest integer. G_FOG_INDEX = int ( 0.4 * ( AVE_WDS_SEN + PRO_DIFF_WORDS ) ) Step 4 is by far the most difficult portion of the exercise. There exist various algorithms for estimating the syllable count of a word. A rule-of-thumb formula might consider the number of letters in a word and the vowel-consonant mix. A strict interpretation of the Gunning fog index does not count compound words and proper nouns as &quot;difficult&quot; words, but this would enormously complicate the script. Calculating PI using Buffon's Needle The Eighteenth Century French mathematician de Buffon came up with a novel experiment. Repeatedly drop a needle of length n onto a wooden floor composed of long and narrow parallel boards. The cracks separating the equal-width floorboards are a fixed distance d apart. Keep track of the total drops and the number of times the needle intersects a crack on the floor. The ratio of these two quantities turns out to be a fractional multiple of PI. In the spirit of Example 16-50, write a script that runs a Monte Carlo simulation of Buffon's Needle. To simplify matters, set the needle length equal to the distance between the cracks, n = d. Hint: there are actually two critical variables: the distance from the center of the needle to the nearest crack, and the inclination angle of the needle to that crack. You may use bc to handle the calculations. Playfair Cipher Implement the Playfair (Wheatstone) Cipher in a script. The Playfair Cipher encrypts text by substitution of digrams (2-letter groupings). It is traditional to use a 5 x 5 letter scrambled-alphabet key square for the encryption and decryption. C O D E S A B F G H I K L M N P Q R T U V W X Y Z Each letter of the alphabet appears once, except &quot;I&quot; also represents &quot;J&quot;. The arbitrarily chosen key word, &quot;CODES&quot; comes first, then all the rest of the alphabet, in order from left to right, skipping letters already used. To encrypt, separate the plaintext message into digrams (2-letter groups). If a group has two identical letters, delete the second, and form a new group. If there is a single letter left over at the end, insert a &quot;null&quot; character, typically an &quot;X.&quot; THIS IS A TOP SECRET MESSAGE TH IS IS AT OP SE CR ET ME SA GE For each digram, there are three possibilities. ----------------------------------------------- 1) Both letters will be on the same row of the key square: For each letter, substitute the one immediately to the right, in that row. If necessary, wrap around left to the beginning of the row. or 2) Both letters will be in the same column of the key square: For each letter, substitute the one immediately below it, in that row. If necessary, wrap around to the top of the column. or 3) Both letters will form the corners of a rectangle within the key square: For each letter, substitute the one on the other corner the rectangle which lies on the same row. The &quot;TH&quot; digram falls under case #3. G H M N T U (Rectangle with &quot;T&quot; and &quot;H&quot; at corners) T --&gt; U H --&gt; G The &quot;SE&quot; digram falls under case #1. C O D E S (Row containing &quot;S&quot; and &quot;E&quot;) S --&gt; C (wraps around left to beginning of row) E --&gt; S ========================================================================= To decrypt encrypted text, reverse the above procedure under cases #1 and #2 (move in opposite direction for substitution). Under case #3, just take the remaining two corners of the rectangle. Helen Fouche Gaines' classic work, ELEMENTARY CRYPTANALYSIS (1939), gives a fairly detailed description of the Playfair Cipher and its solution methods. This script will have three main sections Generating the key square, based on a user-input keyword. Encrypting a plaintext message. Decrypting encrypted text. The script will make extensive use of arrays and functions. You may use Example A-56 as an inspiration. -- Please do not send the author your solutions to these exercises. There are more appropriate ways to impress him with your cleverness, such as submitting bugfixes and suggestions for improving the book. Appendix P. Revision History This document first appeared as a 60-page HOWTO in the late spring of 2000. Since then, it has gone through quite a number of updates and revisions. This book could not have been written without the assistance of the Linux community, and especially of the volunteers of the Linux Documentation Project. Here is the e-mail to the LDP requesting permission to submit version 0.1. From thegrendel@theriver.com Sat Jun 10 09:05:33 2000 -0700 Date: Sat, 10 Jun 2000 09:05:28 -0700 (MST) From: &quot;M. Leo Cooper&quot; &lt;thegrendel@theriver.com&gt; X-Sender: thegrendel@localhost To: ldp-discuss@lists.linuxdoc.org Subject: Permission to submit HOWTO Dear HOWTO Coordinator, I am working on and would like to submit to the LDP a HOWTO on the subject of &quot;Bash Scripting&quot; (shell scripting, using 'bash'). As it happens, I have been writing this document, off and on, for about the last eight months or so, and I could produce a first draft in ASCII text format in a matter of just a few more days. I began writing this out of frustration at being unable to find a decent book on shell scripting. I managed to locate some pretty good articles on various aspects of scripting, but nothing like a complete, beginning-to-end tutorial. Well, in keeping with my philosophy, if all else fails, do it yourself. As it stands, this proposed &quot;Bash-Scripting HOWTO&quot; would serve as a combination tutorial and reference, with the heavier emphasis on the tutorial. It assumes Linux experience, but only a very basic level of programming skills. Interspersed with the text are 79 illustrative example scripts of varying complexity, all liberally commented. There are even exercises for the reader. At this stage, I'm up to 18,000+ words (124k), and that's over 50 pages of text (whew!). I haven't mentioned that I've previously authored an LDP HOWTO, the &quot;Software-Building HOWTO&quot;, which I wrote in Linuxdoc/SGML. I don't know if I could handle Docbook/SGML, and I'm glad you have volunteers to do the conversion. You people seem to have gotten on a more organized basis these last few months. Working with Greg Hankins and Tim Bynum was nice, but a professional team is even nicer. Anyhow, please advise. Mendel Cooper thegrendel@theriver.com Table P-1. Revision History Release Date Comments 0.1 14 Jun 2000 Initial release. 0.2 30 Oct 2000 Bugs fixed, plus much additional material and more example scripts. 0.3 12 Feb 2001 Major update. 0.4 08 Jul 2001 Complete revision and expansion of the book. 0.5 03 Sep 2001 Major update: Bugfixes, material added, sections reorganized. 1.0 14 Oct 2001 Stable release: Bugfixes, reorganization, material added. 1.1 06 Jan 2002 Bugfixes, material and scripts added. 1.2 31 Mar 2002 Bugfixes, material and scripts added. 1.3 02 Jun 2002 TANGERINE release: A few bugfixes, much more material and scripts added. 1.4 16 Jun 2002 MANGO release: A number of typos fixed, more material and scripts. 1.5 13 Jul 2002 PAPAYA release: A few bugfixes, much more material and scripts added. 1.6 29 Sep 2002 POMEGRANATE release: Bugfixes, more material, one more script. 1.7 05 Jan 2003 COCONUT release: A couple of bugfixes, more material, one more script. 1.8 10 May 2003 BREADFRUIT release: A number of bugfixes, more scripts and material. 1.9 21 Jun 2003 PERSIMMON release: Bugfixes, and more material. 2.0 24 Aug 2003 GOOSEBERRY release: Major update. 2.1 14 Sep 2003 HUCKLEBERRY release: Bugfixes, and more material. 2.2 31 Oct 2003 CRANBERRY release: Major update. 2.3 03 Jan 2004 STRAWBERRY release: Bugfixes and more material. 2.4 25 Jan 2004 MUSKMELON release: Bugfixes. 2.5 15 Feb 2004 STARFRUIT release: Bugfixes and more material. 2.6 15 Mar 2004 SALAL release: Minor update. 2.7 18 Apr 2004 MULBERRY release: Minor update. 2.8 11 Jul 2004 ELDERBERRY release: Minor update. 3.0 03 Oct 2004 LOGANBERRY release: Major update. 3.1 14 Nov 2004 BAYBERRY release: Bugfix update. 3.2 06 Feb 2005 BLUEBERRY release: Minor update. 3.3 20 Mar 2005 RASPBERRY release: Bugfixes, much material added. 3.4 08 May 2005 TEABERRY release: Bugfixes, stylistic revisions. 3.5 05 Jun 2005 BOXBERRY release: Bugfixes, some material added. 3.6 28 Aug 2005 POKEBERRY release: Bugfixes, some material added. 3.7 23 Oct 2005 WHORTLEBERRY release: Bugfixes, some material added. 3.8 26 Feb 2006 BLAEBERRY release: Bugfixes, some material added. 3.9 15 May 2006 SPICEBERRY release: Bugfixes, some material added. 4.0 18 Jun 2006 WINTERBERRY release: Major reorganization. 4.1 08 Oct 2006 WAXBERRY release: Minor update. 4.2 10 Dec 2006 SPARKLEBERRY release: Important update. 4.3 29 Apr 2007 INKBERRY release: Bugfixes, material added. 5.0 24 Jun 2007 SERVICEBERRY release: Major update. 5.1 10 Nov 2007 LINGONBERRY release: Minor update. 5.2 16 Mar 2008 SILVERBERRY release: Important update. 5.3 11 May 2008 GOLDENBERRY release: Minor update. 5.4 21 Jul 2008 ANGLEBERRY release: Major update. 5.5 23 Nov 2008 FARKLEBERRY release: Minor update. 5.6 26 Jan 2009 WORCESTERBERRY release: Minor update. 6.0 23 Mar 2009 THIMBLEBERRY release: Major update. 6.1 30 Sep 2009 BUFFALOBERRY release: Minor update. 6.2 17 Mar 2010 ROWANBERRY release: Minor update. 6.3 30 Apr 2011 SWOZZLEBERRY release: Major update. 6.4 30 Aug 2011 VORTEXBERRY release: Minor update. 6.5 05 Apr 2012 TUNGSTENBERRY release: Minor update. 6.6 27 Nov 2012 YTTERBIUMBERRY release: Minor update. 10 10 Mar 2014 YTTERBIUMBERRY release: License change. Appendix Q. Download and Mirror Sites The latest update of this document, as an archived, bzip2-ed &quot;tarball&quot; including both the SGML source and rendered HTML, may be downloaded from the author's home site). A pdf version is also available (mirror site). There is likewise an epub version, courtesy of Craig Barnes and Michael Satke. The change log gives a detailed revision history. The ABS Guide even has its own freshmeat.net/freecode page to keep track of major updates, user comments, and popularity ratings for the project. The legacy hosting site for this document is the Linux Documentation Project, which maintains many other Guides and HOWTOs as well. Many thanks to Ronny Bangsund for donating server space to host this project. Appendix R. To Do List A comprehensive survey of incompatibilities between Bash and the classic Bourne shell. Same as above, but for the Korn shell (ksh). Appendix S. Copyright The Advanced Bash Scripting Guide is herewith granted to the PUBLIC DOMAIN. This has the following implications and consequences. A. All previous releases of the Advanced Bash Scripting Guide are as well granted to the Public Domain. A1. All printed editions, whether authorized by the author or not, are as well granted to the Public Domain. This legally overrides any stated intention or wishes of the publishers. Any statement of copyright is void and invalid. THERE ARE NO EXCEPTIONS TO THIS. A2. Any release of the Advanced Bash Scripting Guide, whether in electronic or print form is granted to the Public Domain by the express directive of the author and previous copyright holder, Mendel Cooper. No other person(s) or entities have ever held a valid copyright. B. As a Public Domain document, unlimited copying and distribution rights are granted. There can be NO restrictions. If anyone has published or will in the future publish an original or modified version of this document, then only additional original material may be copyrighted. The core work will remain in the Public Domain. By law, distributors and publishers (including on-line publishers) are prohibited from imposing any conditions, strictures, or provisions on this document, any previous versions, or any derivative versions. The author asserts that he has not entered into any contractual obligations that would alter the foregoing declarations. Essentially, you may freely distribute this book or any derivative thereof in electronic or printed form. If you have previously purchased or are in possession of a printed copy of a current or previous edition, you have the LEGAL RIGHT to copy and/or redistribute it, regardless of any copyright notice. Any copyright notice is void. Additionally, the author wishes to state his intention that: If you copy or distribute this book, kindly DO NOT use the materials within, or any portion thereof, in a patent or copyright lawsuit against the Open Source community, its developers, its distributors, or against any of its associated software or documentation including, but not limited to, the Linux kernel, Open Office, Samba, and Wine. Kindly DO NOT use any of the materials within this book in testimony or depositions as a plaintiff's &quot;expert witness&quot; in any lawsuit against the Open Source community, any of its developers, its distributors, or any of its associated software or documentation. A Public Domain license essentially does not restrict ANY legitimate distribution or use of this book. The author especially encourages its (royalty-free!) use for classroom and instructional purposes. To date, limited print rights (Lulu edition) have been granted to one individual and to no one else. Neither that individual nor Lulu holds or ever has held a valid copyright. Warning It has come to the attention of the author that unauthorized electronic and print editions of this book are being sold commercially on itunes®, amazon.com and elsewhere. These are illegal and pirated editions produced without the author's permission, and readers of this book are strongly urged not to purchase them. In fact, these pirated editions are now legal, but necessarily fall into the Public Domain, and any copyright notices contained within them are invalid and void. The author produced this book in a manner consistent with the spirit of the LDP Manifesto. Linux is a trademark registered to Linus Torvalds. Fedora is a trademark registered to Red Hat. Unix and UNIX are trademarks registered to the Open Group. MS Windows is a trademark registered to the Microsoft Corp. Solaris is a trademark registered to Oracle, Inc. OSX is a trademark registered to Apple, Inc. Yahoo is a trademark registered to Yahoo, Inc. Pentium is a trademark registered to Intel, Inc. Thinkpad is a trademark registered to Lenovo, Inc. Scrabble is a trademark registered to Hasbro, Inc. Librie, PRS-500, and PRS-505 are trademarks registered to Sony, Inc. All other commercial trademarks mentioned in the body of this work are registered to their respective owners. Hyun Jin Cha has done a Korean translation of version 1.0.11 of this book. Spanish, Portuguese, French, German, Italian, Russian, Czech, Chinese, Indonesian, Dutch, Romanian, Bulgarian, and Turkish translations are also available or in progress. If you wish to translate this document into another language, please feel free to do so, subject to the terms stated above. The author wishes to be notified of such efforts. Those generous readers desiring to make a donation to the author may contribute a small amount via Paypal to my e-mail address, &lt;thegrendel.abs@gmail.com&gt;. (An Honor Roll of Supporters is given at the beginning of the Change Log.) This is not a requirement. The ABS Guide is a free and freely distributed document for the use and enjoyment of the Linux community. However, in these difficult times, showing support for voluntary projects and especially to authors of limited means is more critically important than ever. Appendix T. ASCII Table Traditionally, a book of this sort has an ASCII Table appendix. This book does not. Instead, here are several short scripts, each of which generates a complete ASCII table. Example T-1. A script that generates an ASCII table #!/bin/bash # ascii.sh # ver. 0.2, reldate 26 Aug 2008 # Patched by ABS Guide author. # Original script by Sebastian Arming. # Used with permission (thanks!). exec &gt;ASCII.txt # Save stdout to file, #+ as in the example scripts #+ reassign-stdout.sh and upperconv.sh. MAXNUM=256 COLUMNS=5 OCT=8 OCTSQU=64 LITTLESPACE=-3 BIGSPACE=-5 i=1 # Decimal counter o=1 # Octal counter while [ &quot;$i&quot; -lt &quot;$MAXNUM&quot; ]; do # We don't have to count past 400 octal. paddi=&quot; $i&quot; echo -n &quot;${paddi: $BIGSPACE} &quot; # Column spacing. paddo=&quot;00$o&quot; # echo -ne &quot;\\${paddo: $LITTLESPACE}&quot; # Original. echo -ne &quot;\\0${paddo: $LITTLESPACE}&quot; # Fixup. # ^ echo -n &quot; &quot; if (( i % $COLUMNS == 0)); then # New line. echo fi ((i++, o++)) # The octal notation for 8 is 10, and 64 decimal is 100 octal. (( i % $OCT == 0)) &amp;&amp; ((o+=2)) (( i % $OCTSQU == 0)) &amp;&amp; ((o+=20)) done exit $? # Compare this script with the &quot;pr-asc.sh&quot; example. # This one handles &quot;unprintable&quot; characters. # Exercise: # Rewrite this script to use decimal numbers, rather than octal. Example T-2. Another ASCII table script #!/bin/bash # Script author: Joseph Steinhauser # Lightly edited by ABS Guide author, but not commented. # Used in ABS Guide with permission. #------------------------------------------------------------------------- #-- File: ascii.sh Print ASCII chart, base 10/8/16 (JETS-2012) #------------------------------------------------------------------------- #-- Usage: ascii [oct|dec|hex|help|8|10|16] #-- #-- This script prints out a summary of ASCII char codes from Zero to 127. #-- Numeric values may be printed in Base10, Octal, or Hex. #-- #-- Format Based on: /usr/share/lib/pub/ascii with base-10 as default. #-- For more detail, man ascii . . . #------------------------------------------------------------------------- [ -n &quot;$BASH_VERSION&quot; ] &amp;&amp; shopt -s extglob case &quot;$1&quot; in oct|[Oo]?([Cc][Tt])|8) Obase=Octal; Numy=3o;; hex|[Hh]?([Ee][Xx])|16|[Xx]) Obase=Hex; Numy=2X;; help|?(-)[h?]) sed -n '2,/^[ ]*$/p' $0;exit;; code|[Cc][Oo][Dd][Ee])sed -n '/case/,$p' $0;exit;; *) Obase=Decimal esac # CODE is actually shorter than the chart! printf &quot;\t\t## $Obase ASCII Chart ##\n\n&quot;; FM1=&quot;|%0${Numy:-3d}&quot;; LD=-1 AB=&quot;nul soh stx etx eot enq ack bel bs tab nl vt np cr so si dle&quot; AD=&quot;dc1 dc2 dc3 dc4 nak syn etb can em sub esc fs gs rs us sp&quot; for TOK in $AB $AD; do ABR[$((LD+=1))]=$TOK; done; ABR[127]=del IDX=0 while [ $IDX -le 127 ] &amp;&amp; CHR=&quot;${ABR[$IDX]}&quot; do ((${#CHR}))&amp;&amp; FM2='%-3s'|| FM2=`printf '\\\\%o ' $IDX` printf &quot;$FM1 $FM2&quot; &quot;$IDX&quot; $CHR; (( (IDX+=1)%8))||echo '|' done exit $? Example T-3. A third ASCII table script, using awk #!/bin/bash # ASCII table script, using awk. # Author: Joseph Steinhauser # Used in ABS Guide with permission. #------------------------------------------------------------------------- #-- File: ascii Print ASCII chart, base 10/8/16 (JETS-2010) #------------------------------------------------------------------------- #-- Usage: ascii [oct|dec|hex|help|8|10|16] #-- #-- This script prints a summary of ASCII char codes from Zero to 127. #-- Numeric values may be printed in Base10, Octal, or Hex (Base16). #-- #-- Format Based on: /usr/share/lib/pub/ascii with base-10 as default. #-- For more detail, man ascii #------------------------------------------------------------------------- [ -n &quot;$BASH_VERSION&quot; ] &amp;&amp; shopt -s extglob case &quot;$1&quot; in oct|[Oo]?([Cc][Tt])|8) Obase=Octal; Numy=3o;; hex|[Hh]?([Ee][Xx])|16|[Xx]) Obase=Hex; Numy=2X;; help|?(-)[h?]) sed -n '2,/^[ ]*$/p' $0;exit;; code|[Cc][Oo][Dd][Ee])sed -n '/case/,$p' $0;exit;; *) Obase=Decimal esac export Obase # CODE is actually shorter than the chart! awk 'BEGIN{print &quot;\n\t\t## &quot;ENVIRON[&quot;Obase&quot;]&quot; ASCII Chart ##\n&quot; ab=&quot;soh,stx,etx,eot,enq,ack,bel,bs,tab,nl,vt,np,cr,so,si,dle,&quot; ad=&quot;dc1,dc2,dc3,dc4,nak,syn,etb,can,em,sub,esc,fs,gs,rs,us,sp&quot; split(ab ad,abr,&quot;,&quot;);abr[0]=&quot;nul&quot;;abr[127]=&quot;del&quot;; fm1=&quot;|%0'&quot;${Numy:- 4d}&quot;' %-3s&quot; for(idx=0;idx&lt;128;idx++){fmt=fm1 (++colz%8?&quot;&quot;:&quot;|\n&quot;) printf(fmt,idx,(idx in abr)?abr[idx]:sprintf(&quot;%c&quot;,idx))} }' exit $? Index This index / glossary / quick-reference lists many of the important topics covered in the text. Terms are arranged in approximate ASCII sorting order, modified as necessary for enhanced clarity. Note that commands are indexed in Part 4. * * * ^ (caret) Beginning-of-line, in a Regular Expression ^ ^^ Uppercase conversion in parameter substitution ~ Tilde ~ home directory, corresponds to $HOME ~/ Current user's home directory ~+ Current working directory ~- Previous working directory = Equals sign = Variable assignment operator = String comparison operator == String comparison operator =~ Regular Expression match operator Example script &lt; Left angle bracket Is-less-than String comparison Integer comparison within double parentheses Redirection &lt; stdin &lt;&lt; Here document &lt;&lt;&lt; Here string &lt;&gt; Opening a file for both reading and writing &gt; Right angle bracket Is-greater-than String comparison Integer comparison, within double parentheses Redirection &gt; Redirect stdout to a file &gt;&gt; Redirect stdout to a file, but append i&gt;&amp;j Redirect file descriptor i to file descriptor j &gt;&amp;j Redirect stdout to file descriptor j &gt;&amp;2 Redirect stdout of a command to stderr 2&gt;&amp;1 Redirect stderr to stdout &amp;&gt; Redirect both stdout and stderr of a command to a file :&gt; file Truncate file to zero length | Pipe, a device for passing the output of a command to another command or to the shell || Logical OR test operator - (dash) Prefix to default parameter, in parameter substitution Prefix to option flag Indicating redirection from stdin or stdout -- (double-dash) Prefix to long command options C-style variable decrement within double parentheses ; (semicolon) As command separator \; Escaped semicolon, terminates a find command ;; Double-semicolon, terminator in a case option Required when ... do keyword is on the first line of loop terminating curly-bracketed code block ;;&amp; ;&amp; Terminators in a case option (version 4+ of Bash). : Colon :&gt; filename Truncate file to zero length null command, equivalent to the true Bash builtin Used in an anonymous here document Used in an otherwise empty function Used as a function name ! Negation operator, inverts exit status of a test or command != not-equal-to String comparison operator ? (question mark) Match zero or one characters, in an Extended Regular Expression Single-character wild card, in globbing In a C-style Trinary operator // Double forward slash, behavior of cd command toward . (dot / period) . Load a file (into a script), equivalent to source command . Match single character, in a Regular Expression . Current working directory ./ Current working directory .. Parent directory ' ... ' (single quotes) strong quoting &quot; ... &quot; (double quotes) weak quoting Double-quoting the backslash (\) character , Comma operator , ,, Lowercase conversion in parameter substitution () Parentheses ( ... ) Command group; starts a subshell ( ... ) Enclose group of Extended Regular Expressions &gt;( ... ) &lt;( ... ) Process substitution ... ) Terminates test-condition in case construct (( ... )) Double parentheses, in arithmetic expansion [ Left bracket, test construct [ ]Brackets Array element Enclose character set to match in a Regular Expression Test construct [[ ... ]] Double brackets, extended test construct $ Anchor, in a Regular Expression $ Prefix to a variable name $( ... ) Command substitution, setting a variable with output of a command, using parentheses notation ` ... ` Command substitution, using backquotes notation $[ ... ] Integer expansion (deprecated) ${ ... } Variable manipulation / evaluation ${var} Value of a variable ${#var} Length of a variable ${#@} ${#*} Number of positional parameters ${parameter?err_msg} Parameter-unset message ${parameter-default} ${parameter:-default} ${parameter=default} ${parameter:=default} Set default parameter ${parameter+alt_value} ${parameter:+alt_value} Alternate value of parameter, if set ${!var} Indirect referencing of a variable, new notation ${!#} Final positional parameter. (This is an indirect reference to $#.) ${!varprefix*} ${!varprefix@} Match names of all previously declared variables beginning with varprefix ${string:position} ${string:position:length} Substring extraction ${var#Pattern} ${var##Pattern} Substring removal ${var%Pattern} ${var%%Pattern} Substring removal ${string/substring/replacement} ${string//substring/replacement} ${string/#substring/replacement} ${string/%substring/replacement} Substring replacement $' ... ' String expansion, using escaped characters. \ Escape the character following \&lt; ... \&gt; Angle brackets, escaped, word boundary in a Regular Expression \{ N \} &quot;Curly&quot; brackets, escaped, number of character sets to match in an Extended RE \; Semicolon, escaped, terminates a find command \$$ Indirect reverencing of a variable, old-style notation Escaping a newline, to write a multi-line command &amp; &amp;&gt; Redirect both stdout and stderr of a command to a file &gt;&amp;j Redirect stdout to file descriptor j &gt;&amp;2 Redirect stdout of a command to stderr i&gt;&amp;j Redirect file descriptor i to file descriptor j 2&gt;&amp;1 Redirect stderr to stdout Closing file descriptors n&lt;&amp;- Close input file descriptor n 0&lt;&amp;-, &lt;&amp;- Close stdin n&gt;&amp;- Close output file descriptor n 1&gt;&amp;-, &gt;&amp;- Close stdout &amp;&amp; Logical AND test operator Command &amp; Run job in background # Hashmark, special symbol beginning a script comment #! Sha-bang, special string starting a shell script * Asterisk Wild card, in globbing Any number of characters in a Regular Expression ** Exponentiation, arithmetic operator ** Extended globbing file-match operator % Percent sign Modulo, division-remainder arithmetic operation Substring removal (pattern matching) operator + Plus sign Character match, in an extended Regular Expression Prefix to alternate parameter, in parameter substitution ++ C-style variable increment, within double parentheses * * * Shell Variables $_ Last argument to previous command $- Flags passed to script, using set $! Process ID of last background job $? Exit status of a command $@ All the positional parameters, as separate words $* All the positional parameters, as a single word $$ Process ID of the script $# Number of arguments passed to a function, or to the script itself $0 Filename of the script $1 First argument passed to script $9 Ninth argument passed to script Table of shell variables * * * * * * -a Logical AND compound comparison test Address database, script example Advanced Bash Scripting Guide, where to download Alias Removing an alias, using unalias Anagramming And list To supply default command-line argument And logical operator &amp;&amp; Angle brackets, escaped, \&lt; . . . \&gt; word boundary in a Regular Expression Anonymous here document, using : Archiving rpm tar Arithmetic expansion exit status of variations of Arithmetic operators combination operators, C-style += -= *= /= %= Note In certain contexts, += can also function as a string concatenation operator. Arrays Associative arrays more efficient than conventional arrays Bracket notation Concatenating, example script Copying Declaring declare -a array_name Embedded arrays Empty arrays, empty elements, example script Indirect references Initialization array=( element1 element2 ... elementN) Example script Using command substitution Loading a file into an array Multidimensional, simulating Nesting and embedding Notation and usage Number of elements in ${#array_name[@]} ${#array_name[*]} Operations Passing an array to a function As return value from a function Special properties, example script String operations, example script unset deletes array elements Arrow keys, detecting ASCII Definition Scripts for generating ASCII table awk field-oriented text processing language rand(), random function String manipulation Using export to pass a variable to an embedded awk script * * * Backlight, setting the brightness Backquotes, used in command substitution Base conversion, example script Bash Bad scripting practices Basics reviewed, script example Command-line options Table Features that classic Bourne shell lacks Internal variables Version 2 Version 3 Version 4 Version 4.1 Version 4.2 .bashrc $BASH_SUBSHELL Basic commands, external Batch files, DOS Batch processing bc, calculator utility In a here document Template for calculating a script variable Bibliography Bison utility Bitwise operators Example script Block devices testing for Blocks of code Iterating / looping Redirection Script example: Redirecting output of a a code block Bootable flash drives, creating Brace expansion Extended, {a..z} Parameterizing With increment and zero-padding (new feature in Bash, version 4) Brackets, [ ] Array element Enclose character set to match in a Regular Expression Test construct Brackets, curly, {}, used in Code block find Extended Regular Expressions Positional parameters xargs break loop control command Parameter (optional) Builtins in Bash Do not fork a subprocess * * * case construct Command-line parameters, handling Globbing, filtering strings with cat, concatentate file(s) Abuse of cat scripts Less efficient than redirecting stdin Piping the output of, to a read Uses of Character devices testing for Checksum Child processes Colon, : , equivalent to the true Bash builtin Colorizing scripts Cycling through the background colors, example script Table of color escape sequences Template, colored text on colored background Comma operator, linking commands or operations Command-line options command_not_found_handle () builtin error-handling function (version 4+ of Bash) Command substitution $( ... ), preferred notation Backquotes Extending the Bash toolset Invokes a subshell Nesting Removes trailing newlines Setting variable from loop output Word splitting Comment headers, special purpose Commenting out blocks of code Using an anonymous here document Using an if-then construct Communications and hosts Compound comparison operators Compression utilities bzip2 compress gzip zip continue loop control command Control characters Control-C, break Control-D, terminate / log out / erase Control-G, BEL (beep) Control-H, rubout Control-J, newline Control-M, carriage return Coprocesses cron, scheduling daemon C-style syntax , for handling variables Crossword puzzle solver Cryptography Curly brackets {} in find command in an Extended Regular Expression in xargs * * * Daemons, in UNIX-type OS date dc, calculator utility dd, data duplicator command Conversions Copying raw data to/from devices File deletion, secure Keystrokes, capturing Options Random access on a data stream Raspberry Pi, script for preparing a bootable SD card Swapfiles, initializing Thread on www.linuxquestions.org Debugging scripts Tools Trapping at exit Trapping signals Decimal number, Bash interprets numbers as declare builtin options case-modification options (version 4+ of Bash) Default parameters /dev directory /dev/null pseudo-device file /dev/urandom pseudo-device file, generating pseudorandom numbers with /dev/zero, pseudo-device file Device file dialog, utility for generating dialog boxes in a script $DIRSTACK directory stack Disabled commands, in restricted shells do keyword, begins execution of commands within a loop done keyword, terminates a loop DOS batch files, converting to shell scripts DOS commands, UNIX equivalents of (table) dot files, &quot;hidden&quot; setup and configuration files Double brackets [[ ... ]] test construct and evaluation of octal/hex constants Double parentheses (( ... )) arithmetic expansion/evaluation construct Double quotes &quot; ... &quot; weak quoting Double-quoting the backslash (\) character Double-spacing a text file, using sed * * * -e File exists test echo Feeding commands down a pipe Setting a variable using command substitution /bin/echo, external echo command elif, Contraction of else and if else Encrypting files, using openssl esac, keyword terminating case construct Environmental variables -eq , is-equal-to integer comparison test Eratosthenes, Sieve of, algorithm for generating prime numbers Escaped characters, special meanings of Within $' ... ' string expansion Used with Unicode characters /etc/fstab (filesystem mount) file /etc/passwd (user account) file $EUID, Effective user ID eval, Combine and evaluate expression(s), with variable expansion Effects of, Example script Forces reevaluation of arguments And indirect references Risk of using Using eval to convert array elements into a command list Using eval to select among variables Evaluation of octal/hex constants within [[ ... ]] exec command, using in redirection Exercises Exit and Exit status exit command Exit status (exit code, return status of a command) Table, Exit codes with special meanings Anomalous Out of range Pipe exit status Specified by a function return Successful, 0 /usr/include/sysexits.h, system file listing C/C++ standard exit codes Export, to make available variables to child processes Passing a variable to an embedded awk script expr, Expression evaluator Substring extraction Substring index (numerical position in string) Substring matching Extended Regular Expressions ? (question mark) Match zero / one characters ( ... ) Group of expressions \{ N \} &quot;Curly&quot; brackets, escaped, number of character sets to match + Character match * * * factor, decomposes an integer into its prime factors Application: Generating prime numbers false, returns unsuccessful (1) exit status Field, a group of characters that comprises an item of data Files / Archiving File descriptors Closing n&lt;&amp;- Close input file descriptor n 0&lt;&amp;-, &lt;&amp;- Close stdin n&gt;&amp;- Close output file descriptor n 1&gt;&amp;-, &gt;&amp;- Close stdout File handles in C, similarity to File encryption find {} Curly brackets \; Escaped semicolon Filter Using - with file-processing utility as a filter Feeding output of a filter back to same filter Floating point numbers, Bash does not recognize fold, a filter to wrap lines of text Forking a child process for loops Functions Arguments passed referred to by position Capturing the return value of a function using echo Colon as function name Definition must precede first call to function Exit status Local variables and recursion Passing an array to a function Passing pointers to a function Positional parameters Recursion Redirecting stdin of a function return Multiple return values from a function, example script Returning an array from a function Return range limits, workarounds Shift arguments passed to a function Unusual function names * * * Games and amusements Anagrams Anagrams, again Bingo Number Generator Crossword puzzle solver Crypto-Quotes Dealing a deck of cards Fifteen Puzzle Horse race Knight's Tour &quot;Life&quot; game Magic Squares Music-playing script Nim Pachinko Perquackey Petals Around the Rose Podcasting Poem Speech generation Towers of Hanoi Graphic version Alternate graphic version getopt, external command for parsing script command-line arguments Emulated in a script getopts, Bash builtin for parsing script command-line arguments $OPTIND / $OPTARG Global variable Globbing, filename expansion Handling filenames correctly Wild cards Will not match dot files Golden Ratio (Phi) -ge , greater-than or equal integer comparison test -gt , greater-than integer comparison test groff, text markup and formatting language Gronsfeld cipher $GROUPS, Groups user belongs to gzip, compression utility * * * Hashing, creating lookup keys in a table Example script head, echo to stdout lines at the beginning of a text file help, gives usage summary of a Bash builtin Here documents Anonymous here documents, using : Commenting out blocks of code Self-documenting scripts bc in a here document cat scripts Command substitution ex scripts Function, supplying input to Here strings Calculating the Golden Ratio Prepending text As the stdin of a loop Using read Limit string ! as a limit string Closing limit string may not be indented Dash option to limit string, &lt;&lt;-LimitString Literal text output, for generating program code Parameter substitution Disabling parameter substitution Passing parameters Temporary files Using vi non-interactively History commands $HOME, user's home directory Homework assignment solver $HOSTNAME, system host name * * * $Id parameter, in rcs (Revision Control System) if [ condition ]; then ... test construct if-grep, if and grep in combination Fixup for if-grep test $IFS, Internal field separator variable Defaults to whitespace Integer comparison operators in, keyword preceding [list] in a for loop Initialization table, /etc/inittab Inline group, i.e., code block Interactive script, test for I/O redirection Indirect referencing of variables New notation, introduced in version 2 of Bash ( example script) iptables, packet filtering and firewall utility Usage example Example script Iteration * * * Job IDs, table jot, Emit a sequence of integers. Equivalent to seq. Random sequence generation Just another Bash hacker! * * * Keywords error, if missing kill, terminate a process by process ID Options (-l, -9) killall, terminate a process by name killall script in /etc/rc.d/init.d * * * lastpipe shell option -le , less-than or equal integer comparison test let, setting and carrying out arithmetic operations on variables C-style increment and decrement operators Limit string, in a here document $LINENO, variable indicating the line number where it appears in a script Link, file (using ln command) Invoking script with multiple names, using ln symbolic links, ln -s List constructs And list Or list Local variables and recursion Localization Logical operators (&amp;&amp;, ||, etc.) Logout file, the ~/.bash_logout file Loopback device, mounting a file on a block device Loops break loop control command continue loop control command C-style loop within double parentheses for loop while loop do (keyword), begins execution of commands within a loop done (keyword), terminates a loop for loops for arg in [list]; do Command substitution to generate [list] Filename expansion in [list] Multiple parameters in each [list] element Omitting [list], defaults to positional parameters Parameterizing [list] Redirection in, (keyword) preceding [list] in a for loop Nested loops Running a loop in the background, script example Semicolon required, when do is on first line of loop for loop while loop until loop until [ condition-is-true ]; do while loop while [ condition ]; do Function call inside test brackets Multiple conditions Omitting test brackets Redirection while read construct Which type of loop to use Loopback devices In /dev directory Mounting an ISO image -lt , less-than integer comparison test * * * m4, macro processing language $MACHTYPE, Machine type Magic number, marker at the head of a file indicating the file type Makefile, file containing the list of dependencies used by make command man, manual page (lookup) Man page editor (script) mapfile builtin, loads an array with a text file Math commands Meta-meaning Morse code training script Modulo, arithmetic remainder operator Application: Generating prime numbers Mortgage calculations, example script * * * -n String not null test Named pipe, a temporary FIFO buffer Example script nc, netcat, a network toolkit for TCP and UDP ports -ne, not-equal-to integer comparison test Negation operator, !, reverses the sense of a test netstat, Network statistics Network programming nl, a filter to number lines of text Noclobber, -C option to Bash to prevent overwriting of files NOT logical operator, ! null variable assignment, avoiding * * * -o Logical OR compound comparison test Obfuscation Colon as function name Homework assignment Just another Bash hacker! octal, base-8 numbers od, octal dump $OLDPWD Previous working directory openssl encryption utility Operator Definition of Precedence Options, passed to shell or script on command line or by set command Or list Or logical operator, || * * * Parameter substitution ${parameter+alt_value} ${parameter:+alt_value} Alternate value of parameter, if set ${parameter-default} ${parameter:-default} ${parameter=default} ${parameter:=default} Default parameters ${!varprefix*} ${!varprefix@} Parameter name match ${parameter?err_msg} Parameter-unset message ${parameter} Value of parameter Case modification (version 4+ of Bash). Script example Table of parameter substitution Parent / child process problem, a child process cannot export variables to a parent process Parentheses Command group Enclose group of Extended Regular Expressions Double parentheses, in arithmetic expansion $PATH, the path (location of system binaries) Appending directories to $PATH using the += operator. Pathname, a filename that incorporates the complete path of a given file. Parsing pathnames Perl, programming language Combined in the same file with a Bash script Embedded in a Bash script Perquackey-type anagramming game (Quackey script) Petals Around the Rose PID, Process ID, an identification number assigned to a running process. Pipe, | , a device for passing the output of a command to another command or to the shell Avoiding unnecessary commands in a pipe Comments embedded within Exit status of a pipe Pipefail, set -o pipefail option to indicate exit status within a pipe $PIPESTATUS, exit status of last executed pipe Piping output of a command to a script Redirecting stdin, rather than using cat in a pipe Pitfalls - (dash) is not redirection operator // (double forward slash), behavior of cd command toward #!/bin/sh script header disables extended Bash features Abuse of cat CGI programming, using scripts for Closing limit string in a here document, indenting DOS-type newlines (\r\n) crash a script Double-quoting the backslash (\) character eval, risk of using Execute permission lacking for commands within a script Exit status, anomalous Exit status of arithmetic expression not equivalent to an error code Export problem, child process to parent process Extended Bash features not available Failing to quote variables within test brackets GNU command set, in cross-platform scripts let misuse: attempting to set string variables Multiple echo statements in a function whose output is captured null variable assignment Numerical and string comparison operators not equivalent = and -eq not interchangeable Omitting terminal semicolon, in a curly-bracketed code block Piping echo to a loop echo to read (however, this problem can be circumvented) tail -f to grep Preserving whitespace within a variable, unintended consequences suid commands inside a script Undocumented Bash features, danger of Updates to Bash breaking older scripts Uninitialized variables Variable names, inappropriate Variables in a subshell, scope limited Subshell in while-read loop Whitespace, misuse of Pointers and file descriptors and functions and indirect references and variables Portability issues in shell scripting Setting path and umask A test suite script (Bash versus classic Bourne shell) Using whatis Positional parameters $@, as separate words $*, as a single word in functions POSIX, Portable Operating System Interface / UNIX --posix option 1003.2 standard Character classes $PPID, process ID of parent process Precedence, operator Prepending lines at head of a file, script example Prime numbers Generating primes using the factor command Generating primes using the modulo operator Sieve of Eratosthenes, example script printf, formatted print command /proc directory Running processes, files describing Writing to files in /proc, warning Process Child process Parent process Process ID (PID) Process substitution To compare contents of directories To supply stdin of a command Template while-read loop without a subshell Programmable completion (tab expansion) Prompt $PS1, Main prompt, seen at command line $PS2, Secondary prompt Pseudo-code, as problem-solving method $PWD, Current working directory * * * Quackey, a Perquackey-type anagramming game (script) Question mark, ? Character match in an Extended Regular Expression Single-character wild card, in globbing In a C-style Trinary (ternary) operator Quoting Character string Variables within test brackets Whitespace, using quoting to preserve * * * Random numbers /dev/urandom rand(), random function in awk $RANDOM, Bash function that returns a pseudorandom integer Random sequence generation, using date command Random sequence generation, using jot Random string, generating Raspberry Pi (single-board computer) Script for preparing a bootable SD card rcs read, set value of a variable from stdin Detecting arrow keys Options Piping output of cat to read &quot;Prepending&quot; text Problems piping echo to read Redirection from a file to read $REPLY, default read variable Timed input while read construct readline library Recursion Demonstration of Factorial Fibonacci sequence Local variables Script calling itself recursively Towers of Hanoi Redirection Code blocks exec &lt;filename, to reassign file descriptors Introductory-level explanation of I/O redirection Open a file for both reading and writing &lt;&gt;filename read input redirected from a file stderr to stdout 2&gt;&amp;1 stdin / stdout, using - stdinof a function stdout to a file &gt; ... &gt;&gt; stdout to file descriptor j &gt;&amp;j file descriptori to file descriptor j i&gt;&amp;j stdout of a command to stderr &gt;&amp;2 stdout and stderr of a command to a file &amp;&gt; tee, redirect to a file output of command(s) partway through a pipe Reference Cards Miscellaneous constructs Parameter substitution/expansion Special shell variables String operations Test operators Binary comparison Files Regular Expressions ^ (caret) Beginning-of-line $ (dollar sign) Anchor . (dot) Match single character * (asterisk) Any number of characters [ ] (brackets) Enclose character set to match \ (backslash) Escape, interpret following character literally \&lt; ... \&gt; (angle brackets, escaped) Word boundary Extended REs + Character match \{ \} Escaped &quot;curly&quot; brackets [: :] POSIX character classes $REPLY, Default value associated with read command Restricted shell, shell (or script) with certain commands disabled return, command that terminates a function run-parts Running scripts in sequence, without user intervention * * * Scope of a variable, definition Script options, set at command line Scripting routines, library of useful definitions and functions Secondary prompt, $PS2 Security issues nmap, network mapper / port scanner sudo suid commands inside a script Viruses, trojans, and worms in scripts Writing secure scripts sed, pattern-based programming language Table, basic operators Table, examples of operators select, construct for menu building in list omitted Semaphore Semicolon required, when do keyword is on first line of loop When terminating curly-bracketed code block seq, Emit a sequence of integers. Equivalent to jot. set, Change value of internal script variables set -u, Abort script with error message if attempting to use an undeclared variable. Shell script, definition of Shell wrapper, script embedding a command or utility shift, reassigning positional parameters $SHLVL, shell level, depth to which the shell (or script) is nested shopt, change shell options Signal, a message sent to a process Simulations Brownian motion Galton board Horserace Life, game of PI, approximating by firing cannonballs Pushdown stack Single quotes (' ... ') strong quoting Socket, a communication node associated with an I/O port Sorting Bubble sort Insertion sort source, execute a script or, within a script, import a file Passing positional parameters Spam, dealing with Example script Example script Example script Example script Special characters Stack Definition Emulating a push-down stack, example script Standard Deviation, example script Startup files, Bash stdin and stdout Stopwatch, example script Strings =~ String match operator Comparison Length ${#string} Manipulation Manipulation, using awk Null string, testing for Protecting strings from expansion and/or reinterpretation, script example Unprotecting strings, script example strchr(), equivalent of strlen(), equivalent of strings command, find printable strings in a binary or data file Substring extraction ${string:position} ${string:position:length} Using expr Substring index (numerical position in string) Substring matching, using expr Substring removal ${var#Pattern} ${var##Pattern} ${var%Pattern} ${var%%Pattern} Substring replacement ${string/substring/replacement} ${string//substring/replacement} ${string/#substring/replacement} ${string/%substring/replacement} Script example Table of string/substring manipulation and extraction operators Strong quoting ' ... ' Stylesheet for writing scripts Subshell Command list within parentheses Variables, $BASH_SUBSHELL and $SHLVL Variables in a subshell scope limited, but ... ... can be accessed outside the subshell? su Substitute user, log on as a different user or as root suid (set user id) file flag suid commands inside a script, not advisable Symbolic links Swapfiles * * * Tab completion Table lookup, script example tail, echo to stdout lines at the (tail) end of a text file tar, archiving utility tee, redirect to a file output of command(s) partway through a pipe Terminals setserial setterm stty tput wall test command Bash builtin external command, /usr/bin/test (equivalent to /usr/bin/[) Test constructs Test operators -a Logical AND compound comparison -e File exists -eq is-equal-to (integer comparison) -f File is a regular file -ge greater-than or equal (integer comparison) -gt greater-than (integer comparison) -le less-than or equal (integer comparison) -lt less-than (integer comparison) -n not-zero-length (string comparison) -ne not-equal-to (integer comparison) -o Logical OR compound comparison -u suid flag set, file test -z is-zero-length (string comparison) = is-equal-to (string comparison) == is-equal-to (string comparison) &lt; less-than (string comparison) &lt; less-than, (integer comparison, within double parentheses) &lt;= less-than-or-equal, (integer comparison, within double parentheses) &gt; greater-than (string comparison) &gt; greater-than, (integer comparison, within double parentheses) &gt;= greater-than-or-equal, (integer comparison, within double parentheses) || Logical OR &amp;&amp; Logical AND ! Negation operator, inverts exit status of a test != not-equal-to (string comparison) Tables of test operators Binary comparison File Text and text file processing Time / Date Timed input Using read -t Using stty Using timing loop Using $TMOUT Tips and hints for Bash scripts Array, as return value from a function Associative array more efficient than a numerically-indexed array Capturing the return value of a function, using echo CGI programming, using scripts for Comment blocks Using anonymous here documents Using if-then constructs Comment headers, special purpose C-style syntax , for manipulating variables Double-spacing a text file Filenames prefixed with a dash, removing Filter, feeding output back to same filter Function return value workarounds if-grep test fixup Library of useful definitions and functions null variable assignment, avoiding Passing an array to a function $PATH, appending to, using the += operator. Prepending lines at head of a file Progress bar template Pseudo-code rcs Redirecting a test to /dev/null to suppress output Running scripts in sequence without user intervention, using run-parts Script as embedded command Script portability Setting path and umask Using whatis Setting script variable to a block of embedded sed or awk code Speeding up script execution by disabling unicode Subshell variable, accessing outside the subshell Testing a variable to see if it contains only digits Testing whether a command exists, using type Tracking script usage while-read loop without a subshell Widgets, invoking from a script $TMOUT, Timeout interval Token, a symbol that may expand to a keyword or command tput, terminal-control command tr, character translation filter DOS to Unix text file conversion Options Soundex, example script Variants Trap, specifying an action upon receipt of a signal Trinary (ternary) operator, C-style, var&gt;10?88:99 in double-parentheses construct in let construct true, returns successful (0) exit status typeset builtin options * * * $UID, User ID number unalias, to remove an alias uname, output system information Unicode, encoding standard for representing letters and symbols Disabling unicode to optimize script Uninitialized variables uniq, filter to remove duplicate lines from a sorted file unset, delete a shell variable until loop until [ condition-is-true ]; do * * * Variables Array operations on Assignment Script example Script example Script example Bash internal variables Block of sed or awk code, setting a variable to C-style increment/decrement/trinary operations Change value of internal script variables using set declare, to modify the properties of variables Deleting a shell variable using unset Environmental Expansion / Substring replacement operators Indirect referencing eval variable1=\$$variable2 Newer notation ${!variable} Integer Integer / string (variables are untyped) Length ${#var} Lvalue Manipulating and expanding Name and value of a variable, distinguishing between Null string, testing for Null variable assignment, avoiding Quoting within test brackets to preserve whitespace rvalue Setting to null value In subshell not visible to parent shell Testing a variable if it contains only digits Typing, restricting the properties of a variable Undeclared, error message Uninitialized Unquoted variable, splitting Unsetting Untyped * * * wait, suspend script execution To remedy script hang Weak quoting &quot; ... &quot; while loop while [ condition ]; do C-style syntax Calling a function within test brackets Multiple conditions Omitting test brackets while read construct Avoiding a subshell Whitespace, spaces, tabs, and newline characters $IFS defaults to Inappropriate use of Preceding closing limit string in a here document, error Preceding script comments Quoting, to preserve whitespace within strings or variables [:space:], POSIX character class who, information about logged on users w whoami logname Widgets Wild card characters Asterisk * In [list] constructs Question mark ? Will not match dot files Word splitting Definition Resulting from command substitution Wrapper, shell * * * xargs, Filter for grouping arguments Curly brackets Limiting arguments passed Options Processes arguments one at a time Whitespace, handling * * * yes Emulation * * * -z String is null Zombie, a process that has terminated, but not yet been killed by its parent Notes [1] These are referred to as builtins, features internal to the shell. [2] Although recursion is possible in a shell script, it tends to be slow and its implementation is often an ugly kludge. [3] An acronym is an ersatz word formed by pasting together the initial letters of the words into a tongue-tripping phrase. This morally corrupt and pernicious practice deserves appropriately severe punishment. Public flogging suggests itself. [4] Many of the features of ksh88, and even a few from the updated ksh93 have been merged into Bash. [5] By convention, user-written shell scripts that are Bourne shell compliant generally take a name with a .sh extension. System scripts, such as those found in /etc/rc.d, do not necessarily conform to this nomenclature. [6] More commonly seen in the literature as she-bang or sh-bang. This derives from the concatenation of the tokens sharp (#) and bang (!). [7] Some flavors of UNIX (those based on 4.2 BSD) allegedly take a four-byte magic number, requiring a blank after the ! -- #! /bin/sh. According to Sven Mascheck this is probably a myth. [8] The #! line in a shell script will be the first thing the command interpreter (sh or bash) sees. Since this line begins with a #, it will be correctly interpreted as a comment when the command interpreter finally executes the script. The line has already served its purpose - calling the command interpreter. If, in fact, the script includes an extra #! line, then bash will interpret it as a comment. #!/bin/bash echo &quot;Part 1 of script.&quot; a=1 #!/bin/bash # This does *not* launch a new script. echo &quot;Part 2 of script.&quot; echo $a # Value of $a stays at 1. [9] This allows some cute tricks. #!/bin/rm # Self-deleting script. # Nothing much seems to happen when you run this... except that the file disappears. WHATEVER=85 echo &quot;This line will never print (betcha!).&quot; exit $WHATEVER # Doesn't matter. The script will not exit here. # Try an echo $? after script termination. # You'll get a 0, not a 85. Also, try starting a README file with a #!/bin/more, and making it executable. The result is a self-listing documentation file. (A here document using cat is possibly a better alternative -- see Example 19-3). [10] Portable Operating System Interface, an attempt to standardize UNIX-like OSes. The POSIX specifications are listed on the Open Group site. [11] To avoid this possibility, a script may begin with a #!/bin/env bash sha-bang line. This may be useful on UNIX machines where bash is not located in /bin [12] If Bash is your default shell, then the #! isn't necessary at the beginning of a script. However, if launching a script from a different shell, such as tcsh, then you will need the #!. [13] Caution: invoking a Bash script by sh scriptname turns off Bash-specific extensions, and the script may therefore fail to execute. [14] A script needs read, as well as execute permission for it to run, since the shell needs to be able to read it. [15] Why not simply invoke the script with scriptname? If the directory you are in ($PWD) is where scriptname is located, why doesn't this work? This fails because, for security reasons, the current directory (./) is not by default included in a user's $PATH. It is therefore necessary to explicitly invoke the script in the current directory with a ./scriptname. [16] An operator is an agent that carries out an operation. Some examples are the common arithmetic operators, + - * /. In Bash, there is some overlap between the concepts of operator and keyword. [17] This is more commonly known as the ternary operator. Unfortunately, ternary is an ugly word. It doesn't roll off the tongue, and it doesn't elucidate. It obfuscates. Trinary is by far the more elegant usage. [18] American Standard Code for Information Interchange. This is a system for encoding text characters (alphabetic, numeric, and a limited set of symbols) as 7-bit numbers that can be stored and manipulated by computers. Many of the ASCII characters are represented on a standard keyboard. [19] A PID, or process ID, is a number assigned to a running process. The PIDs of running processes may be viewed with a ps command. Definition: A process is a currently executing command (or program), sometimes referred to as a job. [20] The shell does the brace expansion. The command itself acts upon the result of the expansion. [21] Exception: a code block in braces as part of a pipe may run as a subshell. ls | { read firstline; read secondline; } # Error. The code block in braces runs as a subshell, #+ so the output of &quot;ls&quot; cannot be passed to variables within the block. echo &quot;First line is $firstline; second line is $secondline&quot; # Won't work. # Thanks, S.C. [22] Even as in olden times a philtre denoted a potion alleged to have magical transformative powers, so does a UNIX filter transform its target in (roughly) analogous fashion. (The coder who comes up with a &quot;love philtre&quot; that runs on a Linux machine will likely win accolades and honors.) [23] Bash stores a list of commands previously issued from the command-line in a buffer, or memory space, for recall with the builtin history commands. [24] A linefeed (newline) is also a whitespace character. This explains why a blank line, consisting only of a linefeed, is considered whitespace. [25] Technically, the name of a variable is called an lvalue, meaning that it appears on the left side of an assignment statment, as in VARIABLE=23. A variable's value is an rvalue, meaning that it appears on the right side of an assignment statement, as in VAR2=$VARIABLE. A variable's name is, in fact, a reference, a pointer to the memory location(s) where the actual data associated with that variable is kept. [26] Note that functions also take positional parameters. [27] The process calling the script sets the $0 parameter. By convention, this parameter is the name of the script. See the manpage (manual page) for execv. From the command-line, however, $0 is the name of the shell. bash$ echo $0 bash tcsh% echo $0 tcsh [28] If the the script is sourced or symlinked, then this will not work. It is safer to check $BASH_Source. [29] Unless there is a file named first in the current working directory. Yet another reason to quote. (Thank you, Harald Koenig, for pointing this out. [30] Encapsulating &quot;!&quot; within double quotes gives an error when used from the command line. This is interpreted as a history command. Within a script, though, this problem does not occur, since the Bash history mechanism is disabled then. Of more concern is the apparently inconsistent behavior of \ within double quotes, and especially following an echo -e command. bash$ echo hello\! hello! bash$ echo &quot;hello\!&quot; hello\! bash$ echo \ &gt; bash$ echo &quot;\&quot; &gt; bash$ echo \a a bash$ echo &quot;\a&quot; \a bash$ echo x\ty xty bash$ echo &quot;x\ty&quot; x\ty bash$ echo -e x\ty xty bash$ echo -e &quot;x\ty&quot; x y Double quotes following an echo sometimes escape \. Moreover, the -e option to echo causes the &quot;\t&quot; to be interpreted as a tab. (Thank you, Wayne Pollock, for pointing this out, and Geoff Lee and Daniel Barclay for explaining it.) [31] &quot;Word splitting,&quot; in this context, means dividing a character string into separate and discrete arguments. [32] In those instances when there is no return terminating the function. [33] A token is a symbol or short string with a special meaning attached to it (a meta-meaning). In Bash, certain tokens, such as [ and . (dot-command), may expand to keywords and commands. [34] Per the 1913 edition of Webster's Dictionary: Deprecate ... To pray against, as an evil; to seek to avert by prayer; to desire the removal of; to seek deliverance from; to express deep regret for; to disapprove of strongly. [35] Be aware that suid binaries may open security holes. The suid flag has no effect on shell scripts. [36] On Linux systems, the sticky bit is no longer used for files, only on directories. [37] As S.C. points out, in a compound test, even quoting the string variable might not suffice. [ -n &quot;$string&quot; -o &quot;$a&quot; = &quot;$b&quot; ] may cause an error with some versions of Bash if $string is empty. The safe way is to append an extra character to possibly empty variables, [ &quot;x$string&quot; != x -o &quot;x$a&quot; = &quot;x$b&quot; ] (the &quot;x's&quot; cancel out). [38] In a different context, += can serve as a string concatenation operator. This can be useful for modifying environmental variables. [39] Side effects are, of course, unintended -- and usually undesirable -- consequences. [40] Precedence, in this context, has approximately the same meaning as priority [41] A stack register is a set of consecutive memory locations, such that the values stored (pushed) are retrieved (popped) in reverse order. The last value stored is the first retrieved. This is sometimes called a LIFO (last-in-first-out) or pushdown stack. [42] The PID of the currently running script is $$, of course. [43] Somewhat analogous to recursion, in this context nesting refers to a pattern embedded within a larger pattern. One of the definitions of nest, according to the 1913 edition of Webster's Dictionary, illustrates this beautifully: &quot;A collection of boxes, cases, or the like, of graduated size, each put within the one next larger.&quot; [44] The words &quot;argument&quot; and &quot;parameter&quot; are often used interchangeably. In the context of this document, they have the same precise meaning: a variable passed to a script or function. [45] Within a script, inside a subshell, $$ returns the PID of the script, not the subshell. [46] In this context, typing a variable means to classify it and restrict its properties. For example, a variable declared or typed as an integer is no longer available for string operations. declare -i intvar intvar=23 echo &quot;$intvar&quot; # 23 intvar=stringval echo &quot;$intvar&quot; # 0 [47] True &quot;randomness,&quot; insofar as it exists at all, can only be found in certain incompletely understood natural phenomena, such as radioactive decay. Computers only simulate randomness, and computer-generated sequences of &quot;random&quot; numbers are therefore referred to as pseudorandom. [48] The seed of a computer-generated pseudorandom number series can be considered an identification label. For example, think of the pseudorandom series with a seed of 23 as Series #23. A property of a pseurandom number series is the length of the cycle before it starts repeating itself. A good pseurandom generator will produce series with very long cycles. [49] This applies to either command-line arguments or parameters passed to a function. [50] Note that $substring and $replacement may refer to either literal strings or variables, depending on context. See the first usage example. [51] If $parameter is null in a non-interactive script, it will terminate with a 127 exit status (the Bash error code for &quot;command not found&quot;). [52] Iteration: Repeated execution of a command or group of commands, usually -- but not always, while a given condition holds, or until a given condition is met. [53] These are shell builtins, whereas other loop commands, such as while and case, are keywords. [54] Pattern-match lines may also start with a ( left paren to give the layout a more structured appearance. case $( arch ) in # $( arch ) returns machine architecture. ( i386 ) echo &quot;80386-based machine&quot;;; # ^ ^ ( i486 ) echo &quot;80486-based machine&quot;;; ( i586 ) echo &quot;Pentium-based machine&quot;;; ( i686 ) echo &quot;Pentium2+-based machine&quot;;; ( * ) echo &quot;Other type of machine&quot;;; esac [55] For purposes of command substitution, a command may be an external system command, an internal scripting builtin, or even a script function. [56] In a more technically correct sense, command substitution extracts the stdout of a command, then assigns it to a variable using the = operator. [57] In fact, nesting with backticks is also possible, but only by escaping the inner backticks, as John Default points out. word_count=` wc -w \`echo * | awk '{print $8}'\` ` [58] As Nathan Coulter points out, &quot;while forking a process is a low-cost operation, executing a new program in the newly-forked child process adds more overhead.&quot; [59] An exception to this is the time command, listed in the official Bash documentation as a keyword (&quot;reserved word&quot;). [60] Note that let cannot be used for setting string variables. [61] To Export information is to make it available in a more general context. See also scope. [62] An option is an argument that acts as a flag, switching script behaviors on or off. The argument associated with a particular option indicates the behavior that the option (flag) switches on or off. [63] Technically, an exit only terminates the process (or shell) in which it is running, not the parent process. [64] Unless the exec is used to reassign file descriptors. [65] Hashing is a method of creating lookup keys for data stored in a table. The data items themselves are &quot;scrambled&quot; to create keys, using one of a number of simple mathematical algorithms (methods, or recipes). An advantage of hashing is that it is fast. A disadvantage is that collisions -- where a single key maps to more than one data item -- are possible. For examples of hashing see Example A-20 and Example A-21. [66] The readline library is what Bash uses for reading input in an interactive shell. [67] This only applies to child processes, of course. [68] The C source for a number of loadable builtins is typically found in the /usr/share/doc/bash-?.??/functions directory. Note that the -f option to enable is not portable to all systems. [69] The same effect as autoload can be achieved with typeset -fu. [70] The -v option also orders the sort by upper- and lowercase prefixed filenames. [71] Dotfiles are files whose names begin with a dot, such as ~/.Xdefaults. Such filenames do not appear in a normal ls listing (although an ls -a will show them), and they cannot be deleted by an accidental rm -rf *. Dotfiles are generally used as setup and configuration files in a user's home directory. [72] This particular feature may not yet be implemented in the version of the ext2/ext3 filesystem installed on your system. Check the documentation for your Linux distro. [73] And even when xargs is not strictly necessary, it can speed up execution of a command involving batch-processing of multiple files. [74] This is only true of the GNU version of tr, not the generic version often found on commercial UNIX systems. [75] An archive, in the sense discussed here, is simply a set of related files stored in a single location. [76] A tar czvf ArchiveName.tar.gz * will include dotfiles in subdirectories below the current working directory. This is an undocumented GNU tar &quot;feature.&quot; [77] The checksum may be expressed as a hexadecimal number, or to some other base. [78] For even better security, use the sha256sum, sha512, and sha1pass commands. [79] This is a symmetric block cipher, used to encrypt files on a single system or local network, as opposed to the public key cipher class, of which pgp is a well-known example. [80] Creates a temporary directory when invoked with the -d option. [81] A daemon is a background process not attached to a terminal session. Daemons perform designated services either at specified times or explicitly triggered by certain events. The word &quot;daemon&quot; means ghost in Greek, and there is certainly something mysterious, almost supernatural, about the way UNIX daemons wander about behind the scenes, silently carrying out their appointed tasks. [82] This is actually a script adapted from the Debian Linux distribution. [83] The print queue is the group of jobs &quot;waiting in line&quot; to be printed. [84] Large mechanical line printers printed a single line of type at a time onto joined sheets of greenbar paper, to the accompaniment of a great deal of noise. The hardcopy thusly printed was referred to as a printout. [85] For an excellent overview of this topic, see Andy Vaught's article, Introduction to Named Pipes, in the September, 1997 issue of Linux Journal. [86] EBCDIC (pronounced &quot;ebb-sid-ick&quot;) is an acronym for Extended Binary Coded Decimal Interchange Code, an obsolete IBM data format. A bizarre application of the conv=ebcdic option of dd is as a quick 'n easy, but not very secure text file encoder. cat $file | dd conv=swab,ebcdic &gt; $file_encrypted # Encode (looks like gibberish). # Might as well switch bytes (swab), too, for a little extra obscurity. cat $file_encrypted | dd conv=swab,ascii &gt; $file_plaintext # Decode. [87] A macro is a symbolic constant that expands into a command string or a set of operations on parameters. Simply put, it's a shortcut or abbreviation. [88] This is the case on a Linux machine or a UNIX system with disk quotas. [89] The userdel command will fail if the particular user being deleted is still logged on. [90] For more detail on burning CDRs, see Alex Withers' article, Creating CDs, in the October, 1999 issue of Linux Journal. [91] The -c option to mke2fs also invokes a check for bad blocks. [92] Since only root has write permission in the /var/lock directory, a user script cannot set a lock file there. [93] Operators of single-user Linux systems generally prefer something simpler for backups, such as tar. [94] As of the version 4 update of Bash, the -f and -c options take a block size of 512 when in POSIX mode. Additionally, there are two new options: -b for socket buffer size, and -T for the limit on the number of threads. [95] NAND is the logical not-and operator. Its effect is somewhat similar to subtraction. [96] In Bash and other Bourne shell derivatives, it is possible to set variables in a single command's environment. var1=value1 var2=value2 commandXXX # $var1 and $var2 set in the environment of 'commandXXX' only. [97] The killall system script should not be confused with the killall command in /usr/bin. [98] A meta-meaning is the meaning of a term or expression on a higher level of abstraction. For example, the literal meaning of regular expression is an ordinary expression that conforms to accepted usage. The meta-meaning is drastically different, as discussed at length in this chapter. [99] Since sed, awk, and grep process single lines, there will usually not be a newline to match. In those cases where there is a newline in a multiple line expression, the dot will match the newline. #!/bin/bash sed -e 'N;s/.*/[&amp;]/' &lt;&lt; EOF # Here Document line1 line2 EOF # OUTPUT: # [line1 # line2] echo awk '{ $0=$1 &quot;\n&quot; $2; if (/line.1/) {print}}' &lt;&lt; EOF line 1 line 2 EOF # OUTPUT: # line # 1 # Thanks, S.C. exit 0 [100] Filename expansion means expanding filename patterns or templates containing special characters. For example, example.??? might expand to example.001 and/or example.txt. [101] A wild card character, analogous to a wild card in poker, can represent (almost) any other character. [102] Filename expansion can match dotfiles, but only if the pattern explicitly includes the dot as a literal character. ~/[.]bashrc # Will not expand to ~/.bashrc ~/?bashrc # Neither will this. # Wild cards and metacharacters will NOT #+ expand to a dot in globbing. ~/.[b]ashrc # Will expand to ~/.bashrc ~/.ba?hrc # Likewise. ~/.bashr* # Likewise. # Setting the &quot;dotglob&quot; option turns this off. # Thanks, S.C. [103] Except, as Dennis Benzinger points out, if using &lt;&lt;- to suppress tabs. [104] By convention in UNIX and Linux, data streams and peripherals (device files) are treated as files, in a fashion analogous to ordinary files. [105] A file descriptor is simply a number that the operating system assigns to an open file to keep track of it. Consider it a simplified type of file pointer. It is analogous to a file handle in C. [106] Using file descriptor 5 might cause problems. When Bash creates a child process, as with exec, the child inherits fd 5 (see Chet Ramey's archived e-mail, SUBJECT: RE: File descriptor 5 is held open). Best leave this particular fd alone. [107] An external command invoked with an exec does not (usually) fork off a subprocess / subshell. [108] This has the same effect as a named pipe (temp file), and, in fact, named pipes were at one time used in process substitution. [109] The return command is a Bash builtin. [110] However, as Thomas Braunberger points out, a local variable declared in a function is also visible to functions called by the parent function. #!/bin/bash function1 () { local func1var=20 echo &quot;Within function1, \$func1var = $func1var.&quot; function2 } function2 () { echo &quot;Within function2, \$func1var = $func1var.&quot; } function1 exit 0 # Output of the script: # Within function1, $func1var = 20. # Within function2, $func1var = 20. This is documented in the Bash manual: &quot;Local can only be used within a function; it makes the variable name have a visible scope restricted to that function and its children.&quot; [emphasis added] The ABS Guide author considers this behavior to be a bug. [111] Otherwise known as redundancy. [112] Otherwise known as tautology. [113] Otherwise known as a metaphor. [114] Otherwise known as a recursive function. [115] Too many levels of recursion may crash a script with a segfault. #!/bin/bash # Warning: Running this script could possibly lock up your system! # If you're lucky, it will segfault before using up all available memory. recursive_function () { echo &quot;$1&quot; # Makes the function do something, and hastens the segfault. (( $1 &lt; $2 )) &amp;&amp; recursive_function $(( $1 + 1 )) $2; # As long as 1st parameter is less than 2nd, #+ increment 1st and recurse. } recursive_function 1 50000 # Recurse 50,000 levels! # Most likely segfaults (depending on stack size, set by ulimit -m). # Recursion this deep might cause even a C program to segfault, #+ by using up all the memory allotted to the stack. echo &quot;This will probably not print.&quot; exit 0 # This script will not exit normally. # Thanks, Stéphane Chazelas. [116] ... as the first word of a command string. Obviously, an alias is only meaningful at the beginning of a command. [117] However, aliases do seem to expand positional parameters. [118] The entries in /dev provide mount points for physical and virtual devices. These entries use very little drive space. Some devices, such as /dev/null, /dev/zero, and /dev/urandom are virtual. They are not actual physical devices and exist only in software. [119] A block device reads and/or writes data in chunks, or blocks, in contrast to a character device, which acesses data in character units. Examples of block devices are hard drives, CDROM drives, and flash drives. Examples of character devices are keyboards, modems, sound cards. [120] Of course, the mount point /mnt/flashdrive must exist. If not, then, as root, mkdir /mnt/flashdrive. To actually mount the drive, use the following command: mount /mnt/flashdrive Newer Linux distros automount flash drives in the /media directory without user intervention. [121] Certain system commands, such as procinfo, free, vmstat, lsdev, and uptime do this as well. [122] By convention, signal 0 is assigned to exit. [123] Setting the suid permission on the script itself has no effect in Linux and most other UNIX flavors. [124] In this context, &quot;magic numbers&quot; have an entirely different meaning than the magic numbers used to designate file types. [125] Quite a number of Linux utilities are, in fact, shell wrappers. Some examples are /usr/bin/pdf2ps, /usr/bin/batch, and /usr/bin/xmkmf. [126] ANSI is, of course, the acronym for the American National Standards Institute. This august body establishes and maintains various technical and industrial standards. [127] This usually means liberal use of functions. [128] See Marius van Oers' article, Unix Shell Scripting Malware, and also the Denning reference in the bibliography. [129] Or, better yet, #!/bin/env sh. [130] To be more specific, Bash 4+ has limited support for associative arrays. It's a bare-bones implementation, and it lacks the much of the functionality of such arrays in other programming languages. Note, however, that associative arrays in Bash seem to execute faster and more efficiently than numerically-indexed arrays. [131] Copyright 1995-2009 by Chester Ramey. [132] This only works with pipes and certain other special files. [133] But only in conjunction with readline, i.e., from the command-line. [134] And while you're at it, consider fixing the notorious piped read problem. [135] This is the notorious flog it to death technique that works so well with slow learners, eccentrics, odd ducks, fools and geniuses. [136] In fact, he has no credentials or special qualifications. He's a school dropout with no formal credentials or professional experience whatsoever. None. Zero. Nada. Aside from the ABS Guide, his major claim to fame is a First Place in the sack race at the Colfax Elementary School Field Day in June, 1958. [137] Those who can, do. Those who can't . . . get an MCSE. [138] Sometimes it seems as if he has spent his entire life flouting conventional wisdom and defying the sonorous Voice of Authority: &quot;Hey, you can't do that!&quot; [139] Well, if you absolutely insist, you can try modifying Example A-44 to suit your purposes. [140] It was hard to resist the obvious pun. No slight intended, since the book is a pretty decent introduction to the basic concepts of shell scripting. [141] Sed executes without user intervention. [142] If no address range is specified, the default is all lines. [143] Its name derives from the initials of its authors, Aho, Weinberg, and Kernighan. [144] Out of range exit values can result in unexpected exit codes. An exit value greater than 255 returns an exit code modulo 256. For example, exit 3809 gives an exit code of 225 (3809 % 256 = 225). [145] An update of /usr/include/sysexits.h allocates previously unused exit codes from 64 - 78. It may be anticipated that the range of unallotted exit codes will be further restricted in the future. The author of this document will not do fixups on the scripting examples to conform to the changing standard. This should not cause any problems, since there is no overlap or conflict in usage of exit codes between compiled C/C++ binaries and shell scripts. [146] This does not apply to csh, tcsh, and other shells not related to or descended from the classic Bourne shell (sh). [147] In older versions of UNIX, passwords were stored in /etc/passwd, and that explains the name of the file. [148] Some early UNIX systems had a fast, small-capacity fixed disk (containing /, the root partition), and a second drive which was larger, but slower (containing /usr and other partitions). The most frequently used programs and utilities therefore resided on the small-but-fast drive, in /bin, and the others on the slower drive, in /usr/bin. This likewise accounts for the split between /sbin and /usr/sbin, /lib and /usr/lib, etc. [149] This works only from the command line, of course, and not within a script. [150] Normally the default parameter completion files reside in either the /etc/profile.d directory or in /etc/bash_completion. These autoload on system startup. So, after writing a useful completion script, you might wish to move it (as root, of course) to one of these directories. [151] It has been extensively documented that programmers are willing to put in long hours of effort in order to save ten minutes of &quot;unnecessary&quot; labor. This is known as optimization. [152] Various readers have suggested modifications of the above batch file to prettify it and make it more compact and efficient. In the opinion of the ABS Guide author, this is wasted effort. A Bash script can access a DOS filesystem, or even an NTFS partition (with the help of ntfs-3g) to do batch or scripted operations. [153] For all you clever types who failed intermediate algebra, a determinant is a numerical value associated with a multidimensional matrix (array of numbers). For the simple case of a 2 x 2 determinant: |a b| |b a| The solution is a*a - b*b, where &quot;a&quot; and &quot;b&quot; represent numbers. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630095454#index"
                   NS1:content=" CodePlexProject Hosting for Open Source Software Register Sign In OneNote Web Exporter home source code downloads documentation discussions issues people license Are you Sure? X By clicking Delete, all history, comments and attachments for this page will be deleted and cannot be restored. Page Info Change History (all pages) Follow (22) All Project Updates Discussions Issue Tracker Downloads Reviews Source Code Wiki &amp; Documentation Subscribe Project Description Plug-in to export your OneNote 2007 notebooks as an interactive web site. webber.PNG Table of Contents Feature Overview Installation Instructions Limitations User Guide How to use the webview Create a webview of a notebook Create a regularly updated webview of a notebook Make your notebook available through SharePoint Last edited Jul 6, 2007 at 10:27 PM by davetse, version 13 There is no recommended release for this project. activity downloads 12 Days: 7 7 30 30 All All Details © 2006-2016 Microsoft Get Help Privacy Statement Terms of Use Code of Conduct Advertise With Us Version 8.21.2015.21031 close Updating... "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620114707#index"
                   NS1:content=" Electronic Engineering Education and Innovation derekmolloy.ie derekmolloy.ie Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About Go to... Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About derekmolloy.ie derekmolloy.ie Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About Go to... Home Embedded Systems The Beaglebone Getting Started – USB Network Adapter C++ Development with Eclipse Adding Java and Eclipse Development GPIO Programming An I2C Tutorial Qt on the Beaglebone Driving Stepper Motors USB WiFi &amp; Building a Linux Kernel Image Processing &amp; OpenCV Streaming Video &amp; Custom Video Player The Raspberry PI The Arduino Arduino LCD Tutorial Arduino RGB LED Tutorial Serial to Parallel Conversion Driving a 8×8 LED Matrix using the Arduino Arduino on a Breadboard Arduino Reaction Timer with LCD Display AVR Programming Introduction Tutorial AVR Programming General Source Code for Videos Tools for Electronics Electronics Projects Blog Blog BeagleBone Blog Raspberry PI Digital Electronics Other FAQ About Getting Started – USB Network Adapter on the Beaglebone Home The Beaglebone Getting Started – USB Network Adapter on the Beaglebone Getting Started – USB Network Adapter on the BeagleboneDerek2013-11-16T14:29:38+00:00 Below is a short video on getting started with the Beaglebone Black (BBB) using only the USB network adapter. This is a very useful feature of the BBB, as within a typical university network student laptops/tablets/phones have access via WiFi and to get started with a networked embedded system you typically need a wired network connection. Often for security reasons there are restrictions on IP traffic between networks, making getting started over Ethernet very difficult. The alternative is cross-over cables but this can make Internet access difficult. This video looks at how you can set up the BBB to use the USB network adapter under Windows making initial configuration very straightforward and resulting in the BBB having full internet connectivity. The scripts mentioned in this video and source code examples are listed below: StartUSBNetwork: Shell #!/bin/sh echo &quot;Setup script for the EE402 module - Derek Molloy&quot; echo &quot;Setting up the default gateway&quot; /sbin/route add default gw 192.168.7.1 echo &quot;Updating the nameserver entry&quot; echo &quot;nameserver 8.8.8.8&quot; &gt;&gt; /etc/resolv.conf echo &quot;Setting the time using the Irish ntp pool&quot; /usr/bin/ntpdate -b -s -u ie.pool.ntp.org 1 2 3 4 5 6 7 8 9 10 #!/bin/sh echo &quot;Setup script for the EE402 module - Derek Molloy&quot; echo &quot;Setting up the default gateway&quot; /sbin/route add default gw 192.168.7.1 echo &quot;Updating the nameserver entry&quot; echo &quot;nameserver 8.8.8.8&quot; &gt;&gt; /etc/resolv.conf echo &quot;Setting the time using the Irish ntp pool&quot; /usr/bin/ntpdate -b -s -u ie.pool.ntp.org The git configuration: [http] sslVerify = true sslCAinfo = /etc/ssl/certs/ca-certificates.crt 1 2 3 [http] sslVerify = true sslCAinfo = /etc/ssl/certs/ca-certificates.crt And the source code: C++ #include&lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; &quot;Hello from the Beaglebone Black (cpp)!&quot; &lt;&lt; endl; } 1 2 3 4 5 6 #include&lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; &quot;Hello from the Beaglebone Black (cpp)!&quot; &lt;&lt; endl; } With the build configuration: Shell #!/bin/bash echo &quot;EE402 - Building the Test C++ Program on the Beaglebone Black&quot; g++ test.cpp -o test echo &quot;Finished&quot; 1 2 3 4 #!/bin/bash echo &quot;EE402 - Building the Test C++ Program on the Beaglebone Black&quot; g++ test.cpp -o test echo &quot;Finished&quot; 85 Comments Nigel Brown November 20, 2013 at 9:12 am - Reply Thanks Derek, another great video. Can we also have some details on how to achieve the same on OSX please. Gary Hoffman December 21, 2013 at 5:20 am - Reply Getting Mac OS X to share its internet connection with the BBB is very similar to the Windows method Derek shows here. You can enable Internet Sharing in the sharing tab of System Preferences and choose to share the Internet with the BeagleBone’s USB connection. It appears to be straightforward…but, alas, it doesn’t work for me. I can’t get BBB to route through that connection. James August 17, 2014 at 8:52 pm - Reply did you ever figure this out? Pariyan December 22, 2013 at 8:18 am - Reply ow do I choose which platform to work on? Ångström Linux Android Ubuntu Cloud9 IDE I know C/C++, JAVA lang….but i m ready to learn another if needed I intend to use OpenCV for real time image processing. I have never used anything other than Windows platform. So guide me accordingly. I want to build real time OCR project using BBB as processing device….. Pariyan December 22, 2013 at 8:19 am - Reply ow do I choose which platform to work on? Ångström Linux Android Ubuntu Cloud9 IDE I know C/C++, JAVA lang….but i m ready to learn another if needed I intend to use OpenCV for real time image processing. I have never used anything other than Windows platform. So guide me accordingly. I want to build real time OCR project using BBB as processing device….. Pariyan December 22, 2013 at 8:19 am - Reply 1. How do i choose which platform to work on? I intend to use OpenCV for real time image processing. I have never used anything other than Windows platform. So guide me accordingly. 2. I have gone through several tutorials, projects on the internet. What I see is the BBB is connected via ethernet/USB to a computer.(I am not talking about the power supply, an adapter will work too). In some projects there is BBB working as the only processing device, no computer is connected. I want the same for my project. Is there any tutorial describing a way how to go about making a project independent of computer? Or I am lacking some basic knowledge on this issue? 3. I find tutorials on based specifically on Beagleboard, Beagleboard xM or Beaglebone. What are general changes/precautions I should take before implementing for Beaglebone Black? Or should I stick to only those tutorials that have information solely for BBB? Thankyou in advance Nandan January 14, 2014 at 6:47 pm - Reply Hey Derek, First of all thanks a lot for all the video series its really helpful :) I am a newbie to programming and linux so not able to fix my problem. I have continuously followed your video and somehow not able to copy startUSBNetwork to my root folder pls help me out. This is the error i am getting : root@beaglebone:~/ee402/scripts# cp StartUSBNetwork -/ cp: invalid option — ‘/’ Try `cp –help’ for more information. Also wanted to know how you type half the key works in the terminal and the entire command follows up like the part where you type in “cp StartUSBNetwork” Sorry for the basic questions. Thanks in advance. Derek January 14, 2014 at 9:12 pm - Reply No problem. It is ~/ (tilde slash) not -/ (minus slash). Samvrit Srinivas February 29, 2016 at 10:55 am - Reply Hey Nandan 😛 For autocomplete, press tab 😛 You’re welcome 😀 Sweta January 20, 2014 at 3:50 pm - Reply Thank you very much Derek I would have given up trying to connect my BBB to internet via USB had i not found video! Clear explanation . . Highly appreciated 😀 rogerio February 2, 2014 at 7:31 pm - Reply hi derek i’m a big fan of your job..well done!! how i can fixed this?? thank you root@beaglebone:~# ./StartUSBNetwork Setup script for the EE402 module – Derek Molloy Setting up the default gateway route: SIOCADDRT: File exists Updating the nameserver entry Setting the time using the Irish ntp pool Error resolving ie.pool.ntp.org: Name or service not known (-2) Derek February 3, 2014 at 10:19 pm - Reply I’m not sure how this happened for you. Try: ip route list and then delete the default route… say: ip route delete XXX.XXX.XXX.XXX/24 dev eth0 and then add: route add default gw 192.168.7.1 Not sure if that will work for you. Vikas Arora February 3, 2014 at 9:40 am - Reply Hi derek, thank you for the detailed explanation. I am stucked at the point where you ping the computer through 192.168.7.1 . I am not able to figure out what problem is there but I am completely frustrated now as I am not getting reply from anywhere to sort out this problem. Please help. Derek February 3, 2014 at 10:06 pm - Reply It is possible that the Windows firewall is blocking your ping. You could temporarily disable the windows firewall to see if it is the problem. If it is you could add a new rule in order that you can re-enable the firewall. This is what I did before: Go to: Control Panel -&gt; System and security -&gt; Windows Firewall -&gt; Advanced settings -&gt; Inbound rules -&gt; New rule -&gt; Custom (custom rule) Press next. In “Protocol and ports” choose protocol type “ICMPv4” then press on “Customize”, then choose “Specific ICMP types”, check the box “echo request” then OK out of the settings. On the previous panel just choose defaults “Any IP address”, press next, “Allow the Connection”, apply the rule to all of Domain, Private and Public, can call it “Beaglebone Ping Rule” and press Finish. Vikas Arora February 5, 2014 at 7:38 am - Reply Thanks for the reply, I am now able to access the internet from my laptop on beaglebone. I skipped the step of pinging 192.168.7.1.. I don’t know how but I can ping google.com. I will check my firewall rules now, if it is causing the problem. Franklin February 21, 2014 at 4:12 am - Reply Hello Derek, I have followed your instructions about the new firewall rule that you posted on February 3, 2014 at 10:06 pm, and it worked for me. Thanks to you I can ping 192.168.7.1. Then, I shared my network, and I set up my Local Area Connection to obtain an IP address and DNS server address automatically. I have also set /sbin/route add default gw 192.168.7.1 However, when I try to ping to 8.8.8.8 it is not working with a 100% packet loss. Anyways, I have continued with the procedure, and I have been able to modify resolv.conf by adding the nameserver 8.8.8.8. Then, I tried to ping http://www.google.com and the output I get is PING http://www.google.com (74.125.225.244) 56(84) bytes of data. But that is it, so I hit CTRL+C, and again 100% packet loss. Could you please help me out to solve this problem. I am running a PC with Windows 7, and my beaglebone black says Linux beaglebone 3.8.13 #1 SMP Wed Sept 4 09:09:31 CEST 2013 armv71 GNU/Linux Tanmay December 9, 2014 at 9:13 am - Reply Try disabling your Anti-Virus and then, ping 192.168.7.1..it would work JJ May 19, 2015 at 5:18 am - Reply Thank you so much. wasn’t able to ping my 192.168.7.1. Now, it works all thanks to you. Lex Matrix February 3, 2014 at 2:26 pm - Reply Hello! I’m doing everything as shown in the video, but after adding the line “nameserver 8.8.8.8” in the file “resolv.conf” when I enter “ping http://www.google.com” as a result “ping: unknown host http://www.google.com“. Thanks in advance. Derek February 3, 2014 at 10:22 pm - Reply Is the ping to 8.8.8.8 working? If so, then I’m not too sure what is going wrong. If not then there is a problem with the share under windows. As a check you should ping from your desktop PC just in case there is a network proxy/rule blocking you from any machine. Gabby P March 21, 2016 at 7:37 pm - Reply Did you ever get this resolved? I’m doing the same adding name server and it says unknown host. I ping 8.8.8.8 and that works but can’t ping Google Derek February 5, 2014 at 12:40 pm - Reply If you have a Linux desktop machine you might have some luck with: $ echo 1 &gt; /proc/sys/net/ipv4/ip_forward $ iptables -A POSTROUTING -t nat -j MASQUERADE You can ignore the Windows part of the video then. Dave February 27, 2014 at 4:17 pm - Reply Another very new Newbie here…Thank you Derek for your great videos. (Trying to) Using Umbuntu 12.04 If I use sudo to implement the suggested commands for desktop Linux: dave@ubuntu:~$ sudo echo 1 &gt; /proc/sys/net/ipv4/ip_forward bash: /proc/sys/net/ipv4/ip_forward: Permission denied File: -rw-r–r– 1 root root 0 Feb 27 09:32 ip_forward If I try and change permissions: dave@ubuntu:/proc/sys/net/ipv4$ sudo chmod ugo-w /proc/sys/net/ipv4/ip_forward [sudo] password for dave: chmod: changing permissions of `/proc/sys/net/ipv4/ip_forward’: Operation not permitted Is there a way to impletment the suggested commands….so even I can understand it? (Thanks again Derek for all your great work), Dave Derek March 1, 2014 at 10:54 am - Reply Hi Dave, I saw that on Debian alright. You seem to have to type “sudo su -” before you can change the ip_forward setting. I’m not sure why. Once you are in root shell you can set the value. To enable root login under Ubuntu type “sudo passwd root”. You can remove it again if you wish by typing “sudo passwd -l root” Derek. Nada February 20, 2014 at 4:40 pm - Reply Hi Derek, I must say your tutorials are great saviors!! :) I have a small problem: my BBB is connecting fine and able to ping Google. The problem is when i try to clone your code from github it displays: “unable to connect to github.com: connection timed out” Derek February 21, 2014 at 1:21 am - Reply Hi Nada, Are you behind a university/company firewall? I have seen that being a problem with git before. Are you trying the different calls: git clone git://github.com… and git clone https://github.com…? The https might work. Derek. Nada February 24, 2014 at 2:43 pm - Reply Yes that was it! Thank you :) Michael Backus March 5, 2014 at 6:39 pm - Reply I have a Mac running Snow Leopard that is able to share the Internet connection if I go to System Preferences &gt;&gt; Sharing &gt;&gt; click on Internet Sharing &gt;&gt; check BeagleBoneBlack &gt;&gt; check Internet Sharing. I then run the following script on the Beaglebone Black if I’m running Angstrom: #!/bin/bash /sbin/route add default gw 192.168.7.1 echo ‘nameserver 8.8.8.8’ &gt;&gt; /etc/resolv.conf /usr/bin/ntpdate -b -s -u us.pool.ntp.org It does not work on Macs running OSX 10.7.5 or Mavericks. However, I am able to ping http://www.google.com and set the date if I run the following on the Mac: sudo su ifconfig en3 192.168.7.1 (where en3 is the BeagleBone Black) sysctl -w net.inet.ip.fw.enable=1 sysctl -w net.inet.ip.forwarding=1 natd -interface en1 (where en1 is the host computer) ipfw add divert natd ip from any to any via en1 Everything works perfect if I am tethered to my cell phone, but if I use my router I am unable to browse the internet or download the BBIO library from Adafruit via the command line. I have no idea what is going on. Is there a better way of sharing a newer Mac’s Internet connection? I would love to see a detailed video explaining how to do this on a newer Mac. Maggie White March 19, 2014 at 7:35 pm - Reply Hi Derek, I’m running Windows 8.1, and I’ve followed all of the steps in your video. The output from /etc/resolv.conf ,/sbin/route, ping 192.168.7.1, ping 8.8.8.8, and ping google.com are below. I have turned my firewall off, and my Wi-Fi network connection is shared to my Local Area Connection and the IPv4 settings for the Linux USB Ethernet/RNDIS Gadget are to get the IP address automatically. I’m getting a response from the Beaglebone from the windows command line using ‘ping 192.168.7.2’. Do you have any idea what my problem could be? I’m not sure what else to check. root@beaglebone:~# cat /etc/resolv.conf # Generated by Connection Manager nameserver 127.0.0.1 nameserver 8.8.8.8 root@beaglebone:~# /sbin/route add default gw 192.168.7.1 route: SIOCADDRT: File exists root@beaglebone:~# ping 192.168.7.1 PING 192.168.7.1 (192.168.7.1) 56(84) bytes of data. 64 bytes from 192.168.7.1: icmp_req=1 ttl=128 time=0.539 ms 64 bytes from 192.168.7.1: icmp_req=2 ttl=128 time=0.543 ms ^C — 192.168.7.1 ping statistics — 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 0.539/0.541/0.543/0.002 ms root@beaglebone:~# ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. ^C — 8.8.8.8 ping statistics — 6 packets transmitted, 0 received, 100% packet loss, time 4999ms root@beaglebone:~# ping google.com ping: unknown host google.com Thanks, Maggie White Derek March 19, 2014 at 11:15 pm - Reply Hi Maggie, that looks like the Windows machine is not forwarding the traffic. Leave the BBB setup the way it is and try the unsharing and resharing again. Before you do that try something like git clone git://github.com/derekmolloy/boneCV.git just to make sure that it is not only blocking ping requests. Derek. Jaymer April 2, 2014 at 7:23 am - Reply Hi Just like Maggie above, I have the EXACT same results, except I’m on a Mac OSX 10.7.4 “git” has no results… except cannot find name server. takes 5-10 secs to error out since the additional nameserver line was added. thx Andrew Miller April 6, 2014 at 7:26 am - Reply Hiya Derek, Wonderful vid, however the git repository appears to be down, or i have made an error. here is my command. git clone git://github.com/derekmalloy/ee402 I have no firewall and disable all outbound restrictions, so i dont think its that, and ping works just fine. I am getting ” Cloning into ee402… fatal: remote error: Repository not found. ” Thanks! Andrew Miller April 6, 2014 at 7:28 am - Reply i spelled your last name wrong. please disregard question William Schaffer April 6, 2014 at 7:57 pm - Reply Hi Derek, I’m having some trouble: once I ping google.com after editing resolv.conf it still says “unknown host”. This is my first time using Linux, and I’m doing too well. Thanks for any help! John Eisenhardt April 15, 2014 at 6:24 am - Reply Add the Prof’s script as a systemd service in to have the script execute automatically at boot up: &gt;&gt;&gt;&gt;&gt;&gt;&gt; [Unit] Description=USB NTP initialize [Service] Type=idle ExecStart=/home/root/StartUSBNetwork [Install] WantedBy=multi-user.target &lt;&lt;&lt;&lt;&lt; (google how to create and enable a systemd service if in doubt) Great video – thanks! Igor Raven April 25, 2014 at 6:26 pm - Reply April 25 2014 1. Control Panel, 2. Change adapter settings, 3-A. Local Area Connection (Network 2, shared Intel(R) 82597V Gigabit Network Connection) &amp; 3-B. Local Area Connection 2 (Unidentified network Linux USB Ethernet/RNDIS Gadget) 4. When I Right click on (3-A),Local Area Connection Intel 82597V Then click on Properties, 5. Click on Sharing tag it does not list any network to share with? From PuTTY 0.63 I can access the BBB login as root command line works /sbin/route add default gw 192.168.7.1 ping 192.168.7.1 (works) ping 8.8.8.8 (fails) How do I get 3-A. Local Area Connection (Network 2, shared Intel(R) 82597V Gigabit Network Connection) to see the Linux network? Derek April 30, 2014 at 1:49 am - Reply Hi Igor, On 5. it won’t list any adapters if there is only one possible option but you should still be able to enable sharing. Did you go back and reset the RNDIS settings to use DHCP after they magically change? If you don’t do that then it won’t work. One other thing to check is that firewall software is not blocking outgoing pings. I have seen that before. Derek Joe June 17, 2014 at 5:19 pm - Reply Derek, I have been watching your video series on Arduino and now Beaglebone. Your videos are excellent and I thank you for posting them. Regarding this particular video on the BBB network connection, I was able to follow it and it worked great one time. I now have encountered the situation where my network connection indicates “unidentified network limited no internet access” when I attach the BBB through the USB. I have scoured the internet in search of the solution but cannot solve this one. I’m not entirely certain weather it is a Beaglebone issue or a windows 8 issue. Like I said earlier your instruction here worked perfectly once so I was hoping you could help. Thank you Derek June 18, 2014 at 10:29 pm - Reply Thanks Joe, Performing the steps: /sbin/route add default gw 192.168.7.1 and modifying /etc/network/interfaces and adding the line: dns-nameservers 8.8.8.8 fixes most USB network problems in the Debian image should work fine. I’ll have to try that again in work as maybe something has changed with the latest image. Derek. wellington chun June 28, 2014 at 12:23 am - Reply Derek, Is this necessary after updating the resolv.conf file the first time. This will add the line each time. echo “Updating the nameserver entry” echo “nameserver 8.8.8.8” &gt;&gt; /etc/resolv.conf By the way, the video was quite helpful. sam June 29, 2014 at 12:04 am - Reply excellent post. I have laptop with Windows8.1 with wifi only. My USB network connection is called as ‘Local Area Connection’. This caused some confusion. Iman July 2, 2014 at 11:35 pm - Reply Hi, I am stuck on the network sharing step in windows. I have a wireless network I want to share with the beagle bone local area connection. I go to sharing and toggle the “Allow other network users to connect through this computer’s internet connection”. I choose the local area network of the beaglebone but get the following error: An error occurred while Internet Connection Sharing was being enabled. The specified service does not exist as an installed service.. I have turned off the firewall and don’t understand why this is happening. I cannot share the network due to this. If you have any ideas I would appreciate it. Thanks harsh October 31, 2015 at 5:35 pm - Reply Hi Iman, did you find the solution for the above problem that you just stated. I am also facing the same problem. Gerard July 9, 2014 at 2:21 am - Reply What distribution of linux is better to work on BEAGLEBONE black? yunfei dai July 9, 2014 at 4:56 pm - Reply Hello, I just study this board recently.I am a Chinese student .I like this way to learn something even my English is not very good.Mybe you can help me. Thanks. Brian July 23, 2014 at 6:08 pm - Reply Hi, I have been going through this video series and have found it to be one of the most useful resources for working with the beaglebone. Unfortunately I’ve run into an issue where I no longer have internet access through usb connection to my windows 7 pc using the latest image of debian. I was able to complete this tutorial in the past, but it no longer seems to be working for some reason, and it seems like others have experienced similar issues (maybe Joe above). Essentially, I am able to ping 192.168.7.1. When I try to ping http://www.google.com it returns “unkown host” as expected. After ” /sbin/route add default gw 192.168.7.1 ” however, I am unable to ping 8.8.8.8. Also, if I try to ping http://www.google.com after that step, nothing happens (i.e. “unknown host” no longer appears). “echo “nameserver 8.8.8.8″ &gt;&gt; /etc/resolv.conf” does nothing at this point since I cannot ping 8.8.8.8. When I go to Control Panel&gt;&gt;Network and Internet&gt;&gt;Network and Sharing&gt;&gt;Change adaptor settings&gt;&gt;Local Area Connection properties&gt;&gt;Sharing, checking “Allow other network users to connect” does not produce a drop down menu as in the video. It also doesn’t change my BBB IP settings to static. Adding “dns-nameservers 8.8.8.8″ &gt;&gt; /etc/network/interfaces” results in “network is unreachable” when attempting to ping 8.8.8.8. I also turned off the windows firewall and this had no effect. I’m really reaching the end of my patience here, and google isn’t being very helpful. Any ideas or thoughts you might have would be greatly appreciated. Thank you, Brian ryan April 2, 2015 at 3:29 am - Reply Brian, you just described my problem perfectly! Did you ever figure it out? Diego August 18, 2015 at 10:56 pm - Reply Same problem here… were you guys able to resolve this? Jayson August 19, 2014 at 7:01 pm - Reply Hi Derek, Might you have a Linux equivalent of this video. I’m using ubuntu 13.10. Many thanks for taking the time to make these videos. Werner Thomassen Andrade September 8, 2014 at 10:31 pm - Reply Hi, im trying to clone a bitbucket repository with git clone but its not working i can ping 8.8.8.8.8 and google and i even trued ping echo bitbucket and everyithing is fine but when i try de git clone, he ask’s my password and then he shows me this: root@beaglebone:~# git clone https://stuartlll@bitbucket.org/stuartlll/codigosbbb.git Cloning into codigosbbb… Password: error: while accessing https://stuartlll@bitbucket.org/stuartlll/codigosbbb.git/info/refs fatal: HTTP request failed i’ve triedd using git://, http:// https:// and nothing at all like you said to Nada in the comments since i’m using the university network but it didn’t work… any ideas? ps* the problem is on BBB only, i cloned the repository on my linux and it worked just fine (so university firewall probably isn’t the problem) Juli September 25, 2014 at 1:41 pm - Reply Hello, I am a newby to beaglebone. black. When I connect the USB, I do see the LED lights turn on but after couple seconds, all of them are off. I couldn’t see the “massive drive” on my Windows 7 either. (I have already installed those drivers.) How could I start the beaglebone black? Mohamed January 12, 2015 at 11:42 am - Reply I have had the same problem that all packets are lost when pinging 8.8.8.8 whilst pinging the host can be done without problem. As Derek suggested, I unshared and reshared the network from the host again and it works. ExSlyder February 1, 2015 at 3:24 am - Reply I’m wondering if you know if there is a way to “daisy-chain” 2 beaglebone black boards though the USB ports. So one of them would only need to use the existing mini-usb for networking, but the other would use it’s full-sized usb connected to the second to the mini. Node 1 –MiniUSB -&gt; PC L USB Full -&gt; MiniUSB on Node 2 So I guess I need to know if there is a way to run the RNDIS on the full-sized USB to allow it to talk to a second beagleboard. The linux drivers included on the beagleboard only are the FTDI-Serial, and I don’t see anything for accessing the board as a network connection with IP address. I have a project that has 2 processor hogging processes, I would like to have the core process running on node 2, and the communication to the outside world running on node 1. The application already has intra-networking capabilities built-in, I just need to see if there is a way for me to do it with the hardware. prasanna February 26, 2015 at 10:11 am - Reply Hey derek i followed your steps and everything was easily done.I want to repeat the same in linux ubuntu 14.04 .What needs to be done to connect the board in ubuntu ? Ayush Khemka April 15, 2015 at 11:14 pm - Reply Hi Derek, On a Windows 8 machine it doesn’t allow to choose what connection to share when sharing a WiFi connection. Anyways, after sharing the internet connection I can no longer browse internet on my machine, and pinging 8.8.8.8 on the BBB is giving me a Request Timed Out. How do I resolve it? Ayush Khemka April 16, 2015 at 1:10 am - Reply Nevermind that. Fixed it. Seems like a Windows 8 bug. Have to fiddle with. Unsharing/resharing, rebooting, etc worked. Thanks Dinesh April 26, 2015 at 9:48 am - Reply Hi, I using office laptop, when i tried to activate internet sharing option this message is there “internet sharing is disabled by network”. Is there any otherway to do it. Thanks, Dinesh Kyaw Kyaw Aung May 19, 2015 at 6:35 am - Reply Hi, Mr. Derek, When I ping 8.8.8.8, there’s a 100% packet loss. I’ve shared the ethernet connection to the beaglebone. I’ve set the inbound rules in firewall and I can ping 192.168.7.1. But when I ping 8.8.8.8, nothing comes out. I’d really appreciate if you can help me out, sir. Have a good day. Derek May 19, 2015 at 9:25 pm - Reply Unfortunately ping is restricted by many networks for security reasons — maybe try using git clone or wget to test the network. Brad Nicholas June 2, 2015 at 3:23 pm - Reply Hi @Derek Noticed there hasn’t been a clear answer posted yet regarding OS X Yosemite connection sharing with the BBB. Yosemite replaced natd and ipfw with a combined BSD utility called pf and it appears to have changed connection sharing behavior as a result. Yosemite’s Internet Sharing uses 192.188.2.0/24 by default, so even if you add the default route to 192.168.7.1 the connection sharing won’t work, and the behavior shown in Jason Kridner’s BBB OS X youtube video is different. What I’ve found to work is for an OS X Yosemite user is to either change the BBB’s IP to a 192.168.2.X address or modify their OS X connection sharing config using pfctl. more info and links on stackoverflow here: http://stackoverflow.com/a/30581692/4504428?stw=2 shankar June 5, 2015 at 10:38 am - Reply Hi Derek, I want to Accessing Internet from am335x based on custom board using USB Tethering of Android phone Not Working I wanted to access internet from am335xx custom board(Reference of beaglebone black), Use USB-tethering option of my smartphone and Using this option I wanted to explore for connecting to internet on board.On am335xx board have configure USB0(OTG) mini USB as master(HOST device) or slave device. USB0 controller configured as host and it can be used to connect to the phone(slave mode) using usb cable. I was using 3.12 kernel(sdk 7),could you please tell what are the drivers required for usb tethering network connection for our board. Thanks &amp; regards N Shankar Derek June 6, 2015 at 2:53 am - Reply Hi there. I have not tried that so I don’t know. You may need a rooted phone to configure it to allow IP forwarding. Kind regards, Derek. shankar June 8, 2015 at 12:53 pm - Reply Thank you for your reply, I tried on beaglebone black also but I am unable get it so please tell me Is it possible on beaglebone black below scenario I am trying to use RNDIS host function on my beaglebone black device, using either usb0 port or usb1 port,so i can use android phone to browse my device’s WebUI with usb cable plug in and kernel version 3.12 (sdk 7) if i plug my android phone into my beagle bone device(host mode usb1 port) and set phone’s usb tethering fuction on, my device can find it.But usb0 network device never show up. Thanks &amp; Regards N Shankar Anand June 26, 2015 at 8:44 pm - Reply Hello Derek, Excellent video. Made my life really easy. Normally in office network new mac address is not registered so cannot get static IP through internet directly. This video which is simple, straight and without loopholes made my life very easy. Great work. Once again thanks a lot. Thanks and regards, Anand Vaidya Maven Systems Pvt. Ltd Karl Renner July 16, 2015 at 7:24 pm - Reply Hi Derek! I have been following your excellent video and getting the following results working with Windows 8.1. 1. Ping 192.168.7.1 works OK 2. Ping 8.8.8.8 works most of the time; when it does not work (after a time delay) it shows PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data and hangs and has to be shut down by ctrl c and then it works again. 3. ping http://www.google.com will always hang showing no response. Any suggestions? Derek July 17, 2015 at 4:32 am - Reply Hi there, no I haven’t seen that before. Ping is not the best test anymore as so many services are restricting its use. It could be virus/malware detection software on your desktop. It might be a typo in your message, but you should not prefix with http:// when you ping, just use the site name, as the service is not required. Kind regards, Derek. Stefan September 15, 2015 at 5:02 pm - Reply Same problem here, did you by any chance solve it already? Thanks in advance. Paul September 4, 2015 at 9:05 pm - Reply Thank you so much. This video was clear, completely informative, and amiable. I’m very grateful. Nur September 15, 2015 at 1:55 pm - Reply Hello, thanks but the tutorial but I’m facing issue, I’m not even able to ping back to my PC at 192.168.7.1, 100% packet loss.. Can you help me? Otavio September 16, 2015 at 12:21 pm - Reply Hi Derek, i’ve read the coments here, but i haven’t found a solution for me. My problems is that i need use the BBB i’m my university, but now we don’t need to change the proxy to have the acces, but is needed to login with a username and password, in the RPi i change proxy and put this authentication on /etc/apt/apt.conf.d, but how should i do in BBB ? Sorry for my english i’m from Brazil. Tks Pikochip September 29, 2015 at 4:38 pm - Reply Hi Derek, Amazing video by the way.I try connect to the network from my laptop to BBB over usb in ubuntu platform but the issues was same with other people above.Here what i get : root@beaglebone:/etc# nano resolv.conf root@beaglebone:/etc# cd root@beaglebone:~# /sbin/route add default gw 192.168.7.1 root@beaglebone:~# ping 192.168.7.1 PING 192.168.7.1 (192.168.7.1) 56(84) bytes of data. 64 bytes from 192.168.7.1: icmp_req=1 ttl=64 time=0.350 ms 64 bytes from 192.168.7.1: icmp_req=2 ttl=64 time=0.388 ms 64 bytes from 192.168.7.1: icmp_req=3 ttl=64 time=0.364 ms 64 bytes from 192.168.7.1: icmp_req=4 ttl=64 time=0.441 ms ^C — 192.168.7.1 ping statistics — 4 packets transmitted, 4 received, 0% packet loss, time 3004ms rtt min/avg/max/mdev = 0.350/0.385/0.441/0.042 ms root@beaglebone:~# ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. ^C — 8.8.8.8 ping statistics — 25 packets transmitted, 0 received, 100% packet loss, time 24008ms root@beaglebone:~# git clone git://github.com/derekmolloy/boneCV.git Cloning into ‘boneCV’… fatal: unable to connect to github.com: github.com: Name or service not known root@beaglebone:~# ip route list 192.168.7.0/30 dev usb0 proto kernel scope link src 192.168.7.2 root@beaglebone:~# ip route delete 192.168.7.2/24 dev eth0 RTNETLINK answers: Invalid argument root@beaglebone:~# ip route delete 192.168.7.2/24 dev usb0 RTNETLINK answers: Invalid argument At the tray icon on my ubuntu,when i click the wifi icon i see this : Ethernet Network (Circuitco BeagleBoneBlack) Beaglebone Disconnect Ethernet Network (Realtek,……………) Beaglebone Disconnect Is that okay ? If i’m not wrong when i first time connecting my BBB to my laptop the connection is “Wired Connection (Circuitco BeagleBoneBlack)” Arthur Volta October 2, 2015 at 9:38 pm - Reply Re: Picochip. Your iptables “filter” table may have “FORWARD” set to “DROP” in your default setup, thereby dropping packets that you want to be sent through. You may want to try this from your host computer (the last line is an addition to the commands Derek suggested earlier in this thread) # echo 1 &gt; /proc/sys/net/ipv4/ip_forward # iptables -A POSTROUTING -t nat -j MASQUERADE # iptables -P FORWARD ACCEPT Mike October 10, 2015 at 4:21 pm - Reply Hi Derek, I am following along in your book to learn about embedded linux so I can start using it with my electronics projects. I am currently stuck on page 43 in the grey box about Internet over USB Settings. I am using a MAC 10.8.4. I am at the step where I ping 8.8.8.8. This is what i get root@beaglebone:~# ping 8.8.8.8 PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data. From 192.168.7.1 icmp_seq=1 Destination Host Unreachable It then continues for more icmp_seq=2,3,4,… I tried messing with the sharing settings but nothing worked. I tried searching the problem but a lot of solutions go way over my head. I hope you can provide a simple way of explaining a solution. BTW love your book. I love how it mergers hardware, software, and electronics all together. It everything I want to learn in one book. Thanks in advanced. Santhosh December 31, 2015 at 2:44 am - Reply Hi Derek, I have been watching your videos since along time and all are excellent. Only this time i have faced one problem. i just followed this video wireless USB network adapter. i successfully connect beagle bone to internet but when i reboot the beagle system and i opened putty terminal with 192.168.7.2, it is giving network connection error. How to connect my putty terminal to beagle bone again? Please help me out? ka January 25, 2016 at 4:14 am - Reply Hi Derek, After putting /sbin/route add default gw 192.168.7.1 I am getting -bash: /sbin/route: No such file or directory. Please help. Thank You. kanishka January 28, 2016 at 5:52 am - Reply Hi Derek, Your video is very helpful. After following all the steps in the video, I am getting stuck after /sbin/route add default gw 192.168.7.1 as I am getting the following output please guide what should be done. root@beaglebone:~# /sbin/route add default gw 192.168.7.1 -bash: /sbin/route: No such file or directory Khello April 7, 2016 at 5:12 pm - Reply try this command: sudo /sbin/route add default gw 192.168.7.1 for more details see this link http://ofitselfso.com/BeagleNotes/HowToConnectBeagleboneBlackToTheInternetViaUSB.php Best regards Paulo February 27, 2016 at 11:40 pm - Reply Hi Derek, I was trying to update some libraries on my BBB and I typed this command: dpkg -i -auto-deconfigure The system warned me about warming the OS and I confirmed typing: Yes, do what I say! Not expecting that it should damage the eMMC, now I can only boot from SDcard. Hope you can give me any tip. Thanks in advance. Paulo Ranzani Derek February 29, 2016 at 12:50 am - Reply Hi Paulo, you should be able to flash the eMMC again. I don’t think you could do any physical damage with that call. Download the flasher image (make sure it is the flasher image) from beagleboard.org and use it to flash the board. Kind regards, Derek. Binchi March 18, 2016 at 11:45 am - Reply TRENDnet’s portable USB 3.0 to Gigabit Ethernet Adapter , type TU3-ETG , shortly puts a Gigabit Ethernet slot to a Windows as well as Mac PC . A high Speed USB 3 .0 slot backing Whole Duplex two Gbps data pass on speeds. The TU3-ETG is appropriate with previous USB 2.0 as well as 1.1 jacks. Praful March 28, 2016 at 7:17 am - Reply thanks what to do if my host PC is Ubuntu ? Ritesham April 26, 2016 at 4:41 am - Reply please resolve out AM335x USB driver problem and my laptop keeps on detecting and not detecting the BB Black alternatively. Paul Moggach June 9, 2016 at 5:48 pm - Reply I teach a course on the Raspberry Pi. With Raspian, all we have to do is change the cmdline.txt file and add something like ip=169.254.0.2 to set it to a fixed IP address. Then we plug it into a PC via any USB to Ethernet adapter. Now we can use any SSH, VNC, RDA connection to that address. Very simple, and with RDA on every windows computer in our college a pretty elegant solution to accessing the RPi anywhere. On the BBB side I have loaded up Debian 7.9 on the SD card but I am at a loss how to set up a similar environment to the RPi, and in the Debian world on the BBB I don’t even have the 192.168.7.2 access, which only seems to work with Angstrom. Angstrom is just not main-stream enough for my liking. So I’ll continue to work through the above to see if I can get things working in Debian, but any help would be appreciated. Vitor Souza June 10, 2016 at 1:22 am - Reply Hello Derek, I’m Brazilian. Thank you for this tutorial… paddy June 18, 2016 at 11:07 am - Reply I am getting problem in USB connectivity of BBB with my laptop. The BBB is not recognized on my laptop.pls suggest me something i am new in this. extremely sorry for such a silly doubt. Thanks in advance. Leave A Comment Cancel reply The &quot;monster&quot; image that is associated with your comment is auto-generated -- it makes it easier to follow the conversation threads. If you wish to replace this image with a less (or perhaps more) monstrous version, add an image at Gravatar.com against the e-mail address that you use to submit your comment. Your image will henceforth be used on most WordPress sites. Please note that I will remove any messages that contain blatant advertisement or that refer to illegal software, content etc. I may tidy up some messages if they contain code dumps etc. E-mail addresses are used only to notify you of any responses, and to authenticate your future comments on this website -- they are not made public nor used for any other purpose. See the Privacy and Cookie Policy for a full description. I manually approve all new posts in order to keep the website spam free, but once your post is approved, all future posts should be automatically approved. Please let me know if your messages do not appear. I really appreciate it when you answer the questions of others on the page, as it is difficult for me to do so and continue to produce new content. Thanks for your understanding, Derek. Current ye@r * Leave this field empty New, June 2016! My new book on the Raspberry Pi. See: www.exploringrpi.com for further information. Buy on Amazon: (USA) (Canada) (Brazil) (UK) (Germany) (France) (Italy) (Spain) (China) (India) (Japan) My Recommended Products: Exploring BeagleBone: Tools and Techni… Derek Molloy (Paperback - Dec 31, 2014) $22.36 Development Boards &amp; Kits - AVR ARDUI… Arduino $23.98 Exploring Arduino: Tools and Techniques… Jeremy Blum (Paperback - Jul 22, 2013) $21.08 Logitech HD Pro Webcam C920, 1080p W… Logitech $67.99 Beagleboard (BeagleBone Rev C) Beagleboard $56.75 Practical Electronics for Inventors, Third… Paul Scherz, Simon Monk (Paperback - Jan 31… $12.96 Amazon.com Privacy Tags Analog Discovery angstrom avconv beaglebone beaglebone black bitbake build building c++ C920 connman cpu curl device driver distribution easydriver embedded embedded Linux ffmpeg flash Flip-Flop git gpio https Java kernel LED LEDs linux LKM Logic Analyzer makefile module nmap opencv RTP source stepper motor sysfs Tutorial UDP Video VLC Wordpress x264 Categories Analog Beaglebone Blog Digital Electronics Embedded Systems General Linux Main Blog Raspberry PI Tools Uncategorized Recent Posts Writing a Linux Kernel Module — Part 3: Buttons and LEDs Writing a Linux Kernel Module — Part 2: A Character Device Writing a Linux Kernel Module — Part 1: Introduction Introduction to CMake by Example CGI using C++ on the BeagleBone (Ggicc) Archives April 2015 March 2015 June 2014 January 2014 December 2013 November 2013 October 2013 July 2013 June 2013 May 2013 April 2013 About: This site brings together all of the video content on the Derek Molloy YouTube channel and structures it so that you can follow the videos as lessons. It also integrates associated documentation, datasheets and tools to allow you to get the best from the video series. It also has a blog to allow me to post new videos, articles and useful information that may not be in video form Recent Comments paddy on Getting Started – USB Network Adapter on the Beaglebone David on Writing a Linux Kernel Module — Part 1: Introduction Rob A on Resize a VirtualBox guest Linux VDI Disk under Windows Host Monark on Writing a Linux Kernel Module — Part 2: A Character Device Derek Molloy YouTube Recent Tweets I'm almost visible :-) Great day, great projects! https://t.co/tRu9NztJoE 15 hours ago Thanks @FathmanJim , you have it before me! Hope you enjoy it :-) https://t.co/Xm7OyxK3au 3 days ago Copyright 2015- Derek Molloy | All Rights Reserved | Powered by WordPress | DCU Homepage | Privacy and Cookie Policy Paul Scherz, Simon Monk (Paperback - Jan 31… 31, 2013) Paul Scherz, Simon Monk (Paperback - Jan 31… Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628120748#index"
                   NS1:content=" twam.info My computer, physics, electronics &amp; photography blog Search Main menu Skip to primary content Skip to secondary content Home Electronics Hardware Software Photography Study Travels General About me Imprint Facebook Twitter GitHub Post navigation ← Previous Next → U-Boot on BeagleBone Black Posted on August 23, 2014 by twam Understanding the boot up mechanism of the BeagleBone Black is important to be able to modify it. As we later want to change the Linux Kernel itself we need to know how it is started by the BeagleBone. The AM335x processor on the BeagleBone Black has many configurable options where it can boot from which are all documented in Chapter 26 of the AM335x ARM® Cortex™-A8 Microprocessors Technical Reference Manual. The BeagleBone Black provides by alternative boot sequences which are selectable by the boot switch (S2). In default mode (S2 not pressed) it tries to boot from MMC1 (onboard eMMC), MMC0 (microSD), UART0, USB0. Usually it will find something in the onboard eMMC and boot from there. If S2 is pressed during power-up the boot sequence is changed to SPI0, MMC0 (microSD), UART0, USB0. As there is usually nothing bootable found on SPI0 it will boot from the microSD card. The onboard eMMC or an external microSD card have to be formatted in a special way for the AM335x processor to find its boot file, which is described very good on the MMC boot format wiki page at TI. If the AM335x processor finds a valid formatted MMC it searchings for a file named MLO on the first partition and if it is found it boots from that file. This is very U-Boot kicks in. U-Boot is a very versatile boot loader which can be used on the BeagleBone Black. U-Boot provides this MLO file as a second-stage boot-loader which then loads the actual U-Boot which has to be provided as a file named u-boot.bin in the same directory. U-Boot itself will then look for a file named uEnv.txt for further configuration and then act upon it. Formatting a microSD card Now as we have the theoretical background, let's try it our self. The following steps were all done on a (virtual) Ubuntu Linux system. Our microSD card is connected to /dev/sdb as has a size of 16 GB. The content of the SD card fill be deleted during this procedure. Instead of calculating the exact partitions sizes needed as explained by the MMC boot format wiki page we use a script which does everything for use. Download, make it executable and run it by wget http://dev.gentoo.org/~armin76/arm/beaglebone/mkcard.sh chmod +x mkcard.sh sudo ./mkcard.sh /dev/sdb Be sure to have /dev/sdb pointing to your microSD card and not anything else! In the output of the script you can see the partition table it created and in our case it was a primary FAT23 partition of 72261 blocks in size and a Linux ext4 partition of 15478627 blocks in size: 1024+0 records in 1024+0 records out 1048576 bytes (1.0 MB) copied, 0.447124 s, 2.3 MB/s Disk /dev/sdb doesn't contain a valid partition table DISK SIZE - 15931539456 bytes CYLINDERS - 1936 Checking that no-one is using this disk right now ... OK Disk /dev/sdb: 1936 cylinders, 255 heads, 63 sectors/track sfdisk: ERROR: sector 0 does not have an msdos signature /dev/sdb: unrecognized partition table type Old situation: No partitions found New situation: Units = cylinders of 8225280 bytes, blocks of 1024 bytes, counting from 0 Device Boot Start End #cyls #blocks Id System /dev/sdb1 * 0+ 8 9- 72261 c W95 FAT32 (LBA) /dev/sdb2 9 1935 1927 15478627+ 83 Linux /dev/sdb3 0 - 0 0 0 Empty /dev/sdb4 0 - 0 0 0 Empty Successfully wrote the new partition table Re-reading the partition table ... If you created or changed a DOS partition, /dev/foo7, say, then use dd(1) to zero the first 512 bytes: dd if=/dev/zero of=/dev/foo7 bs=512 count=1 (See fdisk(8).) umount: /dev/sdb1: not mounted mkfs.fat 3.0.26 (2014-03-07) mkfs.fat: warning - lowercase labels might not work properly with DOS or Windows umount: /dev/sdb2: not mounted mke2fs 1.42.9 (4-Feb-2014) Filesystem label=rootfs OS type: Linux Block size=4096 (log=2) Fragment size=4096 (log=2) Stride=0 blocks, Stripe width=0 blocks 969136 inodes, 3869656 blocks 193482 blocks (5.00%) reserved for the super user First data block=0 Maximum filesystem blocks=3963617280 119 block groups 32768 blocks per group, 32768 fragments per group 8144 inodes per group Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208 Allocating group tables: done Writing inode tables: done Creating journal (32768 blocks): done Writing superblocks and filesystem accounting information: done Now you can mount the boot partition manually or replug the microSD card as most systems will mount it then automatically. Compiling U-Boot The next step is to compile U-Boot. As we need to cross compile this for the BeagleBone Black we need a suitable compiler. On Ubuntu this can be installed relatively easy by sudo apt-get install gcc-arm-linux-gnueabihf Now we clone the git repository, create a default configuration and cross compile it for the BeagleBone Black by git clone git://git.denx.de/u-boot.git &amp;&amp; cd u-boot make am335x_boneblack_defconfig ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- make We should get a MLO and u-boot.bin file in the current directory and can copy those onto the boot partition of microSD card. Configuring U-Boot To configure U-Boot we create a file uEnv.txt on the boot partition and fill it, e.g. with console=ttyO0,115200n8 ipaddr=192.168.23.2 serverip=192.168.23.1 rootpath=/exports/rootfs netargs=setenv bootargs console=${console} ${optargs} root=/dev/nfs nfsroot=${serverip}:${rootpath},${nfsopts} rw ip=${ipaddr}:${serverip}:192.168.23.1:255.255.255.0:beaglebone:eth0:none:192.168.23.1 netboot=echo Booting from network ...; tftp ${loadaddr} ${bootfile}; tftp ${fdtaddr} ${fdtfile}; run netargs; bootz ${loadaddr} - ${fdtaddr} uenvcmd=run netboot to instruct U-Boot to get the Linux Kernel and device tree via TFTP. The details are depending on your configuration :). Booting ... Finally we can now boot from our microSD card. To see the actual boot process a RS232 cable like the TTL-232R-3V3 from FTDI is very handy. Just plug it to the J1 connector and open a serial terminal of your choice. Plug in the microSD card and hold down the S2 boot switch to force booting from the microSD card. You will see hopefully something like U-Boot SPL 2014.10-rc1 (Aug 22 2014 - 19:20:25) reading u-boot.img reading u-boot.img U-Boot 2014.10-rc1 (Aug 22 2014 - 19:20:25) I2C: ready DRAM: 512 MiB MMC: OMAP SD/MMC: 0, OMAP SD/MMC: 1 Using default environment Net: not set. Validating first E-fuse MAC cpsw, usb_ether Hit any key to stop autoboot: 0 switch to partitions #0, OK mmc0 is current device SD/MMC found on device 0 reading uEnv.txt 454 bytes read in 4 ms (110.4 KiB/s) Loaded environment from uEnv.txt Importing environment from mmc ... Running uenvcmd ... Booting from network ... cpsw Waiting for PHY auto negotiation to complete. done link up on port 0, speed 100, full duplex Using cpsw device TFTP from server 192.168.23.36; our IP address is 192.168.23.30 Filename 'zImage'. Load address: 0x82000000 LoadingiB/s done Bytes transferred = 6342632 (60c7e8 hex) link up on port 0, speed 100, full duplex Using cpsw device TFTP from server 192.168.23.36; our IP address is 192.168.23.30 Filename 'am335x-boneblack.dtb'. Load address: 0x88000000 Loading: ####### 1.2 MiB/s done Bytes transferred = 31882 (7c8a hex) Kernel image @ 0x82000000 [ 0x000000 - 0x60c7e8 ] ## Flattened Device Tree blob at 88000000 Booting using the fdt blob at 0x88000000 Loading Device Tree to 8fff5000, end 8ffffc89 ... OK Starting kernel ... where we first can see of the U-Boot SPL (MLO file) and then afterwards U-Boot itself. Then it reads the uEnv.txt configuration file and acts upon it. Always boot from microSD If you always want to boot from your microSD card you can invalidate the boot partition on the onboard eMMC. Then the AM335x processor will always fail back to the second boot option in the default order which is the microSD card. This can be done easily by booting your favourite Linux distro on the BeagleBone Black and issue an sudo dd if=/dev/zero of=/dev/mmcblk1 bs=1024 count=1024 Be warned: This will wipe your boot partition on the eMMC! This entry was posted in BeagleBone Black and tagged BeagleBone Black, U-Boot by twam. Bookmark the permalink. About the author My name is Tobias Müller. I'm interested in com­puters, physics, elec­tronics and photo­graphy. more … Share [Pin It] 37 thoughts on “U-Boot on BeagleBone Black” Jay Bhukhanwala on November 7, 2014 at 07:20 said: Thanks for the wonderful article. I have a dumb question though (more out of laziness than anything else): What exactly helps to determine, that MMC1 is onboard eMMC, whereas MMC0 is microSD ? Is it the BBB Reference Manual ? Where exactly do I find that info ? Reply ↓ twam on November 7, 2014 at 09:44 said: 5.3.3 in the BeagleBone Black System Reference Manual states that MMC1 is the eMMC. Reply ↓ Javi on November 24, 2014 at 12:02 said: Hi, I have a question. It's possible disable boot from a microSD at the same way that you explain &quot;Always boot from microSD&quot;? Thank you! Reply ↓ twam on November 24, 2014 at 12:12 said: 'Always boot from microSD' is realized by not putting anything bootable on the eMMC. As long as you have noth bootable on the microSD card it won't boot from there. Also the eMMC is always prefered as long as you don't push the the boot button. If you want to disable booting from microSSD independent of the boot button or the content of the eMMC you have to alter the config pins. Reply ↓ Renan on July 14, 2015 at 01:52 said: How can I edit the config pins, and which ones should I change to disable booting from sd card reader? Reply ↓ twam on July 14, 2015 at 07:36 said: You have to 'edit' them with a soldering iron. Reply ↓ Shashwat on February 1, 2015 at 10:24 said: Hi All, I have just started learning embedded linux and wants to have some hand's on experience of embedded devices bringup from scratch. I have a BBB, and have tried multiple steps to bring up the board but they are very confusing and the result was 0 most of the time. Can anyone please help me out and guide me on how to bring up embedded devices from scratch. Thanks in advance 🙂 Reply ↓ Thaj on February 15, 2015 at 19:33 said: Please follow the steps here https://eewiki.net/display/linuxonarm/BeagleBone+Black Reply ↓ Carl on February 3, 2015 at 00:55 said: Excellent explanation! Different from your suggestion, I have modified the uEnv.txt on the eMMC so that I can boot via network (NFS) or uSD (using invalid uboot command). My question is: once you boot via NFS or uSD, how can you mount and access the eMMC so that the uEnv.txt on eMMC is modified to boot from eMMC again? I know you can reflash the eMMC, but that will be an overkill and really time-consuming as I have to switch from eMMC and NFS booting often. Reply ↓ twam on February 5, 2015 at 17:58 said: You can mount the /dev/mmcblk1p1 partition to your preferred location and change the uEnv.txt file. Reply ↓ Samuel on February 22, 2015 at 18:27 said: Hi ! I'm currently struggling doing exactly that : how do you boot from eMMC if the NFS server (or the DHCP server) is down as a faisafe ? You spoke of invalid u-boot command ... ? thanks Reply ↓ twam on March 2, 2015 at 19:46 said: I didn't mention any invalid u-boot commands. I just said that the if you have a complete invalid boot section on the eMMC, the hardware built-in boot loader of the AM335x processor will fall back to its second boot option, which in that case is the SD card. Your plan might be possible using u-boot scripting, but I haven't tried this and I doubt that it's worth the effort. You want NFS boot usually for development and then you're pretty sure that your DHCP and NFS server is there. If not, fix it! 😉 If you're using your BeagleBone Black in some kind of production environment you usually want to boot from eMMC or micro SD. If have have to boot from NFS for some reason then you should make sure that it's always there. Having a fallback on microSD would net you also the keep your settings and everything in sync between NFS and microSD/eMMC root. Reply ↓ Thaj on February 15, 2015 at 19:44 said: Hey. Thanks Man. This is really helpful. I just have one doubt. There is MLO, u-boot.bin and uEnv.txt on eMMC already that comes by default with BBB. Can I just modify the uEnv.txt on eMMC to boot a kernel from microSD ? What i mean is can I just put the FS, Kernel zImage and dtb file on microSD and just modify the uEnv.txt in eMMC to point this kernel of microSD, Will that work? I am asking beacuse I dont want to corrupt the uboot on eMMC, but still i want to boot a custom kernel for device driver development. Reply ↓ twam on February 19, 2015 at 20:40 said: Sure, that is possible. Reply ↓ Maurice Sun on July 10, 2015 at 10:02 said: Hi, does anyone who made it successfully can share with your howto? Thanks. Reply ↓ Ron on June 4, 2015 at 19:17 said: Thaj, I would really like to know if you were able to modify the uEnv.txt file and see the parameters you added to it. I have been racking my brains out on this one. Reply ↓ Juan Benavides on February 23, 2015 at 21:27 said: Hello Tobias, do you know if you can access the boot partition /boot/uboot/ to read/write files? I want both the host PC and the BBB to be able to read/write files in the same directory at /boot/uboot/ With 17% of space left it seems like it should be possible but I'm having problems syncing the files. In other words I can create a file from the Host PC, and the BBB can see it right away. But, if I try the opposite, that is creating a file from the BBB, the Host PC doesn't see it. I tried the command sync to no avail. Filesystem 1K-blocks Used Available Use% Mounted on /dev/mmcblk0p1 98094 80886 17208 83% /boot/uboot Reply ↓ twam on March 2, 2015 at 19:40 said: This depends on the system you have booted. If this shares the /boot partition with your host PC this is of course possible. You could also share the partition or folder via your favorite network protocol (NFS, SMB, ...) Reply ↓ Viswanath.B on March 7, 2015 at 11:50 said: I am newbie to Beaglebone(Black). I am trying to boot it through eMMC without any SDcard. Boot seems to proceed to an extent and stops. Following is the copy of boot steps, can any one suggest if I am missing any thing here. U-Boot 2013.04-dirty (Jul 10 2013 - 14:02:53) I2C: ready DRAM: 512 MiB WARNING: Caches not enabled NAND: No NAND device found!!! 0 MiB MMC: OMAP SD/MMC: 0, OMAP SD/MMC: 1 *** Warning - readenv() failed, using default environment musb-hdrc: ConfigData=0xde (UTMI-8, dyn FIFOs, HB-ISO Rx, HB-ISO Tx, SoftConn) musb-hdrc: MHDRC RTL version 2.0 musb-hdrc: setup fifo_mode 4 musb-hdrc: 28/31 max ep, 16384/16384 memory USB Peripheral mode controller at 47401000 using PIO, IRQ 0 musb-hdrc: ConfigData=0xde (UTMI-8, dyn FIFOs, HB-ISO Rx, HB-ISO Tx, SoftConn) musb-hdrc: MHDRC RTL version 2.0 musb-hdrc: setup fifo_mode 4 musb-hdrc: 28/31 max ep, 16384/16384 memory USB Host mode controller at 47401800 using PIO, IRQ 0 Net: not set. Validating first E-fuse MAC cpsw, usb_ether Hit any key to stop autoboot: 0 gpio: pin 53 (gpio 53) value is 1 Card did not respond to voltage select! mmc0(part 0) is current device Card did not respond to voltage select! No micro SD card found, setting mmcdev to 1 mmc_send_cmd : timeout: No status update mmc1(part 0) is current device mmc_send_cmd : timeout: No status update gpio: pin 54 (gpio 54) value is 1 SD/MMC found on device 1 reading uEnv.txt 26 bytes read in 3 ms (7.8 KiB/s) Loaded environment from uEnv.txt Importing environment from mmc ... gpio: pin 55 (gpio 55) value is 1 4385024 bytes read in 765 ms (5.5 MiB/s) gpio: pin 56 (gpio 56) value is 1 24808 bytes read in 52 ms (465.8 KiB/s) Booting from mmc ... ## Booting kernel from Legacy Image at 80007fc0 ... Image Name: Angstrom/3.8.13/beaglebone Image Type: ARM Linux Kernel Image (uncompressed) Data Size: 4384960 Bytes = 4.2 MiB Load Address: 80008000 Entry Point: 80008000 Verifying Checksum ... OK ## Flattened Device Tree blob at 80f80000 Booting using the fdt blob at 0x80f80000 XIP Kernel Image ... OK OK Using Device Tree in place at 80f80000, end 80f890e7 Starting kernel ... Uncompressing Linux... done, booting the kernel. [ 0.196410] omap2_mbox_probe: platform not supported [ 0.206977] tps65217-bl tps65217-bl: no platform data provided [ 0.283534] bone-capemgr bone_capemgr.8: slot #0: No cape found [ 0.320638] bone-capemgr bone_capemgr.8: slot #1: No cape found [ 0.357748] bone-capemgr bone_capemgr.8: slot #2: No cape found [ 0.394856] bone-capemgr bone_capemgr.8: slot #3: No cape found [ 0.414585] bone-capemgr bone_capemgr.8: slot #6: BB-BONELT-HDMIN conflict P8.45 (#5:BB-BONELT-HDMI) [ 0.424195] bone-capemgr bone_capemgr.8: slot #6: Failed verification [ 0.444657] omap_hsmmc mmc.4: of_parse_phandle_with_args of 'reset' failed [ 0.451953] bone-capemgr bone_capemgr.8: loader: failed to load slot-6 BB-BONELT-HDMIN:00A0 (prio 2) [ 0.518398] pinctrl-single 44e10800.pinmux: pin 44e10854 already requested by 44e10800.pinmux; cannot claim for gpio-leds.7 [ 0.530134] pinctrl-single 44e10800.pinmux: pin-21 (gpio-leds.7) status -22 [ 0.537459] pinctrl-single 44e10800.pinmux: could not request pin 21 on device pinctrl-single Reply ↓ Maurice Sun on July 10, 2015 at 09:56 said: Hi everyone, Except for erasing the eMMC's boot section, can anyone share the procedures about how we can configure or modify the boot loader(u-boot) to decide we want to boot from uSD card? Appreciate! Reply ↓ Brian Tremaine on November 13, 2015 at 18:04 said: I'm using a BBB to profile the performance of an algorithm that will go into a AM3358 board. I'm not getting the integer performance I expect with a 1Ghz processor. Is there a way to verify if the cache is enabled on the BBB? I've searched for days and see some references to UBOOT turning cache off but I haven't seen anything on code changes to enable cache. Thanks, Brian Reply ↓ Reza on February 2, 2016 at 22:46 said: Dear All I'm beginner with beaglebone. Maybe my question is ridiculous for you… Some forums noted the following instruction to convert a SD Card image to eMMC flasher: In /boot/uEnv.txt: ##enable BBB: eMMC Flasher: #cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh Change to: ##enable BBB: eMMC Flasher: cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3.sh How should I reach to &quot;/boot/uEnv.txt&quot; from a windows computer and delete the # from the mentioned line?! Regards Reply ↓ twam on February 3, 2016 at 17:57 said: Just connect the SD Card to your Windows PC (e.g. by a USB SD Card reader). The Filesystem of /boot should appear as a drive as it is FAT formatted. Reply ↓ Rajesh.D on February 14, 2016 at 13:28 said: I am new in bbb, when the time of booting from sd card I got this error..(timeout error). TFTP from server 192.168.0.101; our IP address is 192.168.0.101 Filename 'uImage'. Load address: 0x80200000 Loading: cpsw Waiting for PHY auto negotiation to complete......... TIMEOUT ! cpsw Waiting for PHY auto negotiation to complete......... TIMEOUT ! cpsw Waiting for PHY auto negotiation to complete......... TIMEOUT ! T cpsw Waiting for PHY auto negotiation to complete......... TIMEOUT ! cpsw Waiting for PHY auto negotiation to complete......... TIMEOUT ! cpsw Waiting for PHY auto negotiation to complete. Reply ↓ twam on February 14, 2016 at 13:31 said: Looks like you're having at least two problems: Your IP and the IP of your TFTP server are the same. And for some reason auto negotiation does not complete. Maybe your cable is not plugged in or the other side does not understand auto negotiation. Reply ↓ eric on March 3, 2016 at 12:26 said: Hi, This is the most clear document I have ever seen these 5 days. Thank you. Reply ↓ Jakub on March 6, 2016 at 16:00 said: Hello, I have a problem with the boot BBB if you connect to pin P8 (40 41 42 43) UNL motor driver board will not boot. I think it's bootable control pins used for HDMI. I have HDMI banned in uEnv.txt. If I connect UNL to boot everything works. What should I do? I apologize for my English. Reply ↓ g3blv on April 3, 2016 at 15:54 said: Hi Tobias, I'm running Ubuntu 14.04 on a BBB. I'm booting from a MircroSD card. It works fine when I'm holding down the S2 button but I would like to have it always booting from the MicroSD card. I've cleared the MMC partion with &quot;sudo dd if=/dev/zero of=/dev/mmcblk1 bs=1024 count=1024&quot; but I doesn't boot up. It still boots up fine from the MicroSD card by holding down the S2 button. Are there any other configurations I need to do to make it boot from the MircoSD card? Reply ↓ twam on April 3, 2016 at 18:24 said: Usually this should work? Did you try to read the data from the eMMC and check if it is really all 0? Reply ↓ g3blv on April 4, 2016 at 07:46 said: Here is the output from lsblk, mmcblk1 beeing the eMMC and mmcblk0 being the MicroSD card. Checking in GParted I can see that mmcblk1 is &quot;unallocated&quot;. NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT mmcblk1boot0 179:16 0 1M 1 disk mmcblk1boot1 179:24 0 1M 1 disk mmcblk0 179:0 0 7.4G 0 disk ├─mmcblk0p1 179:1 0 1M 0 part /boot/uboot └─mmcblk0p2 179:2 0 7.4G 0 part / mmcblk1 179:8 0 1.8G 0 disk Reply ↓ twam on April 4, 2016 at 17:24 said: Maybe you have to wipe the mmcblk1bootX partitions as well. I do not remember seeing them on my BBB, but maybe you have a newer kernel with some special support for those (see https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/tree/Documentation/mmc/mmc-dev-parts.txt?id=refs/tags/v4.2.4). Reply ↓ Raphael on April 13, 2016 at 11:43 said: Hi Tobias, First, let me congratulate you for the quality of your post. I'm facing a question and I need your opinion if possible. I've in hand a BBB bought in december 2014. It works fine and boot from the Onboard eMMC (Debian 7). Recently, I've downloaded a new Debian ISO and flashed it on an external SD (Debian 8). If I insert the SD in the BBB, the board boots from the SD, and not on the eMMC as it should be or explained in yout article: 1. MMC1 (onboard eMMC), 2.MMC0 (microSD), 3.UART0, 4.USB0. I mention that i do not use the S2 switch. If I remove the SD, it boots from the eMMC. As you explained, it should boot by defaut from the eMMC, Did I miss Something ? Thanks. Reply ↓ twam on April 13, 2016 at 19:57 said: The BBB should load U-Boot from the eMMC, but the config file there could make U-Boot try to boot a Linux from your SD card. Then it would look like everything is booting from SD card. Reply ↓ Mich on May 25, 2016 at 03:34 said: With no SD card, my BBB boots from eMMC just fine. With a SD card my BBB boots from eMMC, unless I press S2 (in which case it correctly boots from the SD card.) I'm trying to boot from the SD card without pressing S2, and without disturbing the eMMC partition (so that it can still boot from eMMC in case no SD card is inserted.) Can this be done by editing the (right now empty) file 'uEnv.txt' in the 'boot' directory of /dev/mmcblk0p1 ? mmcdev=0 bootpart=0:1 mmcroot=/dev/mmcblk0p1 ro ...but it's not working. Any help is welcome! My SD card hold Ubuntu Snappy, so: mmcblk0p1: fa32 boot partition mmcblk0p2: ext4 system 'A' mmcblk0p3: ext4 system 'B' mmcblk0p4: ext4 'writable' Reply ↓ Mich on May 25, 2016 at 03:36 said: Do I need to do more than just edit 'uEnv.txt' on the SD card, like do I need to copy MLO or a uboot.img onto the SD card too? Reply ↓ Mich on May 25, 2016 at 03:55 said: By 'doesnt work' I mean that the boot sequence continues booting eMMC as if the lines in the SD card's uEnv.txt (mmcdev=0 ...) don't exist. Reply ↓ suraj rajput on June 17, 2016 at 07:36 said: Hi all, Am new to BBB at start am getting this kind of error plz help guys what to do U-Boot SPL 2016.05 (Jun 15 2016 - 14:47:02) Trying to boot from MMC2 reading args spl_load_image_fat_os: error reading image args, err - -1 reading u-boot.img spl_load_image_fat: error reading image u-boot.img, err - -1 Failed to mount ext2 filesystem... spl_load_image_ext_os: ext4fs mount err - 0 Failed to mount ext2 filesystem... spl_load_image_ext: ext4fs mount err - 0 Reply ↓ Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment Name * Email * Website 0 0 Tweet "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160627170229#index"
                   NS1:content=" Table of Contents Name pppd - Point-to-Point Protocol Daemon Synopsis pppd [ options ] Description PPP is the protocol used for establishing internet links over dial-up modems, DSL connections, and many other types of point-to-point links. The pppd daemon works together with the kernel PPP driver to establish and maintain a PPP link with another system (called the peer) and to negotiate Internet Protocol (IP) addresses for each end of the link. Pppd can also authenticate the peer and/or supply authentication information to the peer. PPP can be used with other network protocols besides IP, but such use is becoming increasingly rare. Frequently Used Options ttyname Use the serial port called ttyname to communicate with the peer. The string &quot;/dev/&quot; is prepended to ttyname to form the name of the device to open. If no device name is given, or if the name of the terminal connected to the standard input is given, pppd will use that terminal, and will not fork to put itself in the background. A value for this option from a privileged source cannot be overridden by a non-privileged user. speed An option that is a decimal number is taken as the desired baud rate for the serial device. On systems such as 4.4BSD and NetBSD, any speed can be specified. Other systems (e.g. Linux, SunOS) only support the commonly-used baud rates. asyncmap map This option sets the Async-Control-Character-Map (ACCM) for this end of the link. The ACCM is a set of 32 bits, one for each of the ASCII control characters with values from 0 to 31, where a 1 bit indicates that the corresponding control character should not be used in PPP packets sent to this system. The map is encoded as a hexadecimal number (without a leading 0x) where the least significant bit (00000001) represents character 0 and the most significant bit (80000000) represents character 31. Pppd will ask the peer to send these characters as a 2-byte escape sequence. If multiple asyncmap options are given, the values are ORed together. If no asyncmap option is given, the default is zero, so pppd will ask the peer not to escape any control characters. To escape transmitted characters, use the escape option. auth Require the peer to authenticate itself before allowing network packets to be sent or received. This option is the default if the system has a default route. If neither this option nor the noauth option is specified, pppd will only allow the peer to use IP addresses to which the system does not already have a route. call name Read additional options from the file /etc/ppp/peers/name. This file may contain privileged options, such as noauth, even if pppd is not being run by root. The name string may not begin with / or include .. as a pathname component. The format of the options file is described below. connect script Usually there is something which needs to be done to prepare the link before the PPP protocol can be started; for instance, with a dial-up modem, commands need to be sent to the modem to dial the appropriate phone number. This option specifies an command for pppd to execute (by passing it to a shell) before attempting to start PPP negotiation. The chat (8) program is often useful here, as it provides a way to send arbitrary strings to a modem and respond to received characters. A value for this option from a privileged source cannot be overridden by a non-privileged user. crtscts Specifies that pppd should set the serial port to use hardware flow control using the RTS and CTS signals in the RS-232 interface. If neither the crtscts, the nocrtscts, the cdtrcts nor the nocdtrcts option is given, the hardware flow control setting for the serial port is left unchanged. Some serial ports (such as Macintosh serial ports) lack a true RTS output. Such serial ports use this mode to implement unidirectional flow control. The serial port will suspend transmission when requested by the modem (via CTS) but will be unable to request the modem to stop sending to the computer. This mode retains the ability to use DTR as a modem control line. defaultroute Add a default route to the system routing tables, using the peer as the gateway, when IPCP negotiation is successfully completed. This entry is removed when the PPP connection is broken. This option is privileged if the nodefaultroute option has been specified. disconnect script Execute the command specified by script, by passing it to a shell, after pppd has terminated the link. This command could, for example, issue commands to the modem to cause it to hang up if hardware modem control signals were not available. The disconnect script is not run if the modem has already hung up. A value for this option from a privileged source cannot be overridden by a non-privileged user. escape xx,yy,... Specifies that certain characters should be escaped on transmission (regardless of whether the peer requests them to be escaped with its async control character map). The characters to be escaped are specified as a list of hex numbers separated by commas. Note that almost any character can be specified for the escape option, unlike the asyncmap option which only allows control characters to be specified. The characters which may not be escaped are those with hex values 0x20 - 0x3f or 0x5e. file name Read options from file name (the format is described below). The file must be readable by the user who has invoked pppd. init script Execute the command specified by script, by passing it to a shell, to initialize the serial line. This script would typically use the chat(8) program to configure the modem to enable auto answer. A value for this option from a privileged source cannot be overridden by a non-privileged user. lock Specifies that pppd should create a UUCP-style lock file for the serial device to ensure exclusive access to the device. mru n Set the MRU [Maximum Receive Unit] value to n. Pppd will ask the peer to send packets of no more than n bytes. The value of n must be between 128 and 16384; the default is 1500. A value of 296 works well on very slow links (40 bytes for TCP/IP header + 256 bytes of data). Note that for the IPv6 protocol, the MRU must be at least 1280. mtu n Set the MTU [Maximum Transmit Unit] value to n. Unless the peer requests a smaller value via MRU negotiation, pppd will request that the kernel networking code send data packets of no more than n bytes through the PPP network interface. Note that for the IPv6 protocol, the MTU must be at least 1280. passive Enables the &quot;passive&quot; option in the LCP. With this option, pppd will attempt to initiate a connection; if no reply is received from the peer, pppd will then just wait passively for a valid LCP packet from the peer, instead of exiting, as it would without this option. Options &lt;local_IP_address&gt;:&lt;remote_IP_address&gt; Set the local and/or remote interface IP addresses. Either one may be omitted. The IP addresses can be specified with a host name or in decimal dot notation (e.g. 150.234.56.78). The default local address is the (first) IP address of the system (unless the noipdefault option is given). The remote address will be obtained from the peer if not specified in any option. Thus, in simple cases, this option is not required. If a local and/or remote IP address is specified with this option, pppd will not accept a different value from the peer in the IPCP negotiation, unless the ipcp-accept-local and/or ipcp-accept-remote options are given, respectively. ipv6 &lt;local_interface_identifier&gt;,&lt;remote_interface_identifier&gt; Set the local and/or remote 64-bit interface identifier. Either one may be omitted. The identifier must be specified in standard ascii notation of IPv6 addresses (e.g. ::dead:beef). If the ipv6cp-use-ipaddr option is given, the local identifier is the local IPv4 address (see above). On systems which supports a unique persistent id, such as EUI-48 derived from the Ethernet MAC address, ipv6cp-use-persistent option can be used to replace the ipv6 &lt;local&gt;,&lt;remote&gt; option. Otherwise the identifier is randomized. active-filter filter-expression Specifies a packet filter to be applied to data packets to determine which packets are to be regarded as link activity, and therefore reset the idle timer, or cause the link to be brought up in demand-dialling mode. This option is useful in conjunction with the idle option if there are packets being sent or received regularly over the link (for example, routing information packets) which would otherwise prevent the link from ever appearing to be idle. The filter-expression syntax is as described for tcpdump(1) , except that qualifiers which are inappropriate for a PPP link, such as ether and arp, are not permitted. Generally the filter expression should be enclosed in single-quotes to prevent whitespace in the expression from being interpreted by the shell. This option is currently only available under Linux, and requires that the kernel was configured to include PPP filtering support (CONFIG_PPP_FILTER). Note that it is possible to apply different constraints to incoming and outgoing packets using the inbound and outbound qualifiers. allow-ip address(es) Allow peers to use the given IP address or subnet without authenticating themselves. The parameter is parsed as for each element of the list of allowed IP addresses in the secrets files (see the AUTHENTICATION section below). allow-number number Allow peers to connect from the given telephone number. A trailing `*' character will match all numbers beginning with the leading part. bsdcomp nr,nt Request that the peer compress packets that it sends, using the BSD-Compress scheme, with a maximum code size of nr bits, and agree to compress packets sent to the peer with a maximum code size of nt bits. If nt is not specified, it defaults to the value given for nr. Values in the range 9 to 15 may be used for nr and nt; larger values give better compression but consume more kernel memory for compression dictionaries. Alternatively, a value of 0 for nr or nt disables compression in the corresponding direction. Use nobsdcomp or bsdcomp 0 to disable BSD-Compress compression entirely. cdtrcts Use a non-standard hardware flow control (i.e. DTR/CTS) to control the flow of data on the serial port. If neither the crtscts, the nocrtscts, the cdtrcts nor the nocdtrcts option is given, the hardware flow control setting for the serial port is left unchanged. Some serial ports (such as Macintosh serial ports) lack a true RTS output. Such serial ports use this mode to implement true bi-directional flow control. The sacrifice is that this flow control mode does not permit using DTR as a modem control line. chap-interval n If this option is given, pppd will rechallenge the peer every n seconds. chap-max-challenge n Set the maximum number of CHAP challenge transmissions to n (default 10). chap-restart n Set the CHAP restart interval (retransmission timeout for challenges) to n seconds (default 3). child-timeout n When exiting, wait for up to n seconds for any child processes (such as the command specified with the pty command) to exit before exiting. At the end of the timeout, pppd will send a SIGTERM signal to any remaining child processes and exit. A value of 0 means no timeout, that is, pppd will wait until all child processes have exited. connect-delay n Wait for up to n milliseconds after the connect script finishes for a valid PPP packet from the peer. At the end of this time, or when a valid PPP packet is received from the peer, pppd will commence negotiation by sending its first LCP packet. The default value is 1000 (1 second). This wait period only applies if the connect or pty option is used. debug Enables connection debugging facilities. If this option is given, pppd will log the contents of all control packets sent or received in a readable form. The packets are logged through syslog with facility daemon and level debug. This information can be directed to a file by setting up /etc/syslog.conf appropriately (see syslog.conf(5) ). default-asyncmap Disable asyncmap negotiation, forcing all control characters to be escaped for both the transmit and the receive direction. default-mru Disable MRU [Maximum Receive Unit] negotiation. With this option, pppd will use the default MRU value of 1500 bytes for both the transmit and receive direction. deflate nr,nt Request that the peer compress packets that it sends, using the Deflate scheme, with a maximum window size of 2**nr bytes, and agree to compress packets sent to the peer with a maximum window size of 2**nt bytes. If nt is not specified, it defaults to the value given for nr. Values in the range 9 to 15 may be used for nr and nt; larger values give better compression but consume more kernel memory for compression dictionaries. Alternatively, a value of 0 for nr or nt disables compression in the corresponding direction. Use nodeflate or deflate 0 to disable Deflate compression entirely. (Note: pppd requests Deflate compression in preference to BSD-Compress if the peer can do either.) demand Initiate the link only on demand, i.e. when data traffic is present. With this option, the remote IP address must be specified by the user on the command line or in an options file. Pppd will initially configure the interface and enable it for IP traffic without connecting to the peer. When traffic is available, pppd will connect to the peer and perform negotiation, authentication, etc. When this is completed, pppd will commence passing data packets (i.e., IP packets) across the link. The demand option implies the persist option. If this behaviour is not desired, use the nopersist option after the demand option. The idle and holdoff options are also useful in conjuction with the demand option. domain d Append the domain name d to the local host name for authentication purposes. For example, if gethostname() returns the name porsche, but the fully qualified domain name is porsche.Quotron.COM, you could specify domain Quotron.COM. Pppd would then use the name porsche.Quotron.COM for looking up secrets in the secrets file, and as the default name to send to the peer when authenticating itself to the peer. This option is privileged. dryrun With the dryrun option, pppd will print out all the option values which have been set and then exit, after parsing the command line and options files and checking the option values, but before initiating the link. The option values are logged at level info, and also printed to standard output unless the device on standard output is the device that pppd would be using to communicate with the peer. dump With the dump option, pppd will print out all the option values which have been set. This option is like the dryrun option except that pppd proceeds as normal rather than exiting. endpoint &lt;epdisc&gt; Sets the endpoint discriminator sent by the local machine to the peer during multilink negotiation to &lt;epdisc&gt;. The default is to use the MAC address of the first ethernet interface on the system, if any, otherwise the IPv4 address corresponding to the hostname, if any, provided it is not in the multicast or locally-assigned IP address ranges, or the localhost address. The endpoint discriminator can be the string null or of the form type:value, where type is a decimal number or one of the strings local, IP, MAC, magic, or phone. The value is an IP address in dotted-decimal notation for the IP type, or a string of bytes in hexadecimal, separated by periods or colons for the other types. For the MAC type, the value may also be the name of an ethernet or similar network interface. This option is currently only available under Linux. eap-interval n If this option is given and pppd authenticates the peer with EAP (i.e., is the server), pppd will restart EAP authentication every n seconds. For EAP SRP-SHA1, see also the srp-interval option, which enables lightweight rechallenge. eap-max-rreq n Set the maximum number of EAP Requests to which pppd will respond (as a client) without hearing EAP Success or Failure. (Default is 20.) eap-max-sreq n Set the maximum number of EAP Requests that pppd will issue (as a server) while attempting authentication. (Default is 10.) eap-restart n Set the retransmit timeout for EAP Requests when acting as a server (authenticator). (Default is 3 seconds.) eap-timeout n Set the maximum time to wait for the peer to send an EAP Request when acting as a client (authenticatee). (Default is 20 seconds.) hide-password When logging the contents of PAP packets, this option causes pppd to exclude the password string from the log. This is the default. holdoff n Specifies how many seconds to wait before re-initiating the link after it terminates. This option only has any effect if the persist or demand option is used. The holdoff period is not applied if the link was terminated because it was idle. idle n Specifies that pppd should disconnect if the link is idle for n seconds. The link is idle when no data packets (i.e. IP packets) are being sent or received. Note: it is not advisable to use this option with the persist option without the demand option. If the active-filter option is given, data packets which are rejected by the specified activity filter also count as the link being idle. ipcp-accept-local With this option, pppd will accept the peer's idea of our local IP address, even if the local IP address was specified in an option. ipcp-accept-remote With this option, pppd will accept the peer's idea of its (remote) IP address, even if the remote IP address was specified in an option. ipcp-max-configure n Set the maximum number of IPCP configure-request transmissions to n (default 10). ipcp-max-failure n Set the maximum number of IPCP configure-NAKs returned before starting to send configure-Rejects instead to n (default 10). ipcp-max-terminate n Set the maximum number of IPCP terminate-request transmissions to n (default 3). ipcp-restart n Set the IPCP restart interval (retransmission timeout) to n seconds (default 3). ipparam string Provides an extra parameter to the ip-up and ip-down scripts. If this option is given, the string supplied is given as the 6th parameter to those scripts. ipv6cp-max-configure n Set the maximum number of IPv6CP configure-request transmissions to n (default 10). ipv6cp-max-failure n Set the maximum number of IPv6CP configure-NAKs returned before starting to send configure-Rejects instead to n (default 10). ipv6cp-max-terminate n Set the maximum number of IPv6CP terminate-request transmissions to n (default 3). ipv6cp-restart n Set the IPv6CP restart interval (retransmission timeout) to n seconds (default 3). ipx Enable the IPXCP and IPX protocols. This option is presently only supported under Linux, and only if your kernel has been configured to include IPX support. ipx-network n Set the IPX network number in the IPXCP configure request frame to n, a hexadecimal number (without a leading 0x). There is no valid default. If this option is not specified, the network number is obtained from the peer. If the peer does not have the network number, the IPX protocol will not be started. ipx-node n:m Set the IPX node numbers. The two node numbers are separated from each other with a colon character. The first number n is the local node number. The second number m is the peer's node number. Each node number is a hexadecimal number, at most 10 digits long. The node numbers on the ipx-network must be unique. There is no valid default. If this option is not specified then the node numbers are obtained from the peer. ipx-router-name &lt;string&gt; Set the name of the router. This is a string and is sent to the peer as information data. ipx-routing n Set the routing protocol to be received by this option. More than one instance of ipx-routing may be specified. The 'none' option (0) may be specified as the only instance of ipx-routing. The values may be 0 for NONE, 2 for RIP/SAP, and 4 for NLSP. ipxcp-accept-local Accept the peer's NAK for the node number specified in the ipx-node option. If a node number was specified, and non-zero, the default is to insist that the value be used. If you include this option then you will permit the peer to override the entry of the node number. ipxcp-accept-network Accept the peer's NAK for the network number specified in the ipx-network option. If a network number was specified, and non-zero, the default is to insist that the value be used. If you include this option then you will permit the peer to override the entry of the node number. ipxcp-accept-remote Use the peer's network number specified in the configure request frame. If a node number was specified for the peer and this option was not specified, the peer will be forced to use the value which you have specified. ipxcp-max-configure n Set the maximum number of IPXCP configure request frames which the system will send to n. The default is 10. ipxcp-max-failure n Set the maximum number of IPXCP NAK frames which the local system will send before it rejects the options. The default value is 3. ipxcp-max-terminate n Set the maximum nuber of IPXCP terminate request frames before the local system considers that the peer is not listening to them. The default value is 3. kdebug n Enable debugging code in the kernel-level PPP driver. The argument values depend on the specific kernel driver, but in general a value of 1 will enable general kernel debug messages. (Note that these messages are usually only useful for debugging the kernel driver itself.) For the Linux 2.2.x kernel driver, the value is a sum of bits: 1 to enable general debug messages, 2 to request that the contents of received packets be printed, and 4 to request that the contents of transmitted packets be printed. On most systems, messages printed by the kernel are logged by syslog(1) to a file as directed in the /etc/syslog.conf configuration file. ktune Enables pppd to alter kernel settings as appropriate. Under Linux, pppd will enable IP forwarding (i.e. set /proc/sys/net/ipv4/ip_forward to 1) if the proxyarp option is used, and will enable the dynamic IP address option (i.e. set /proc/sys/net/ipv4/ip_dynaddr to 1) in demand mode if the local address changes. lcp-echo-failure n If this option is given, pppd will presume the peer to be dead if n LCP echo-requests are sent without receiving a valid LCP echo-reply. If this happens, pppd will terminate the connection. Use of this option requires a non-zero value for the lcp-echo-interval parameter. This option can be used to enable pppd to terminate after the physical connection has been broken (e.g., the modem has hung up) in situations where no hardware modem control lines are available. lcp-echo-interval n If this option is given, pppd will send an LCP echo-request frame to the peer every n seconds. Normally the peer should respond to the echo-request by sending an echo-reply. This option can be used with the lcp-echo-failure option to detect that the peer is no longer connected. lcp-max-configure n Set the maximum number of LCP configure-request transmissions to n (default 10). lcp-max-failure n Set the maximum number of LCP configure-NAKs returned before starting to send configure-Rejects instead to n (default 10). lcp-max-terminate n Set the maximum number of LCP terminate-request transmissions to n (default 3). lcp-restart n Set the LCP restart interval (retransmission timeout) to n seconds (default 3). linkname name Sets the logical name of the link to name. Pppd will create a file named ppp-name.pid in /var/run (or /etc/ppp on some systems) containing its process ID. This can be useful in determining which instance of pppd is responsible for the link to a given peer system. This is a privileged option. local Don't use the modem control lines. With this option, pppd will ignore the state of the CD (Carrier Detect) signal from the modem and will not change the state of the DTR (Data Terminal Ready) signal. logfd n Send log messages to file descriptor n. Pppd will send log messages to at most one file or file descriptor (as well as sending the log messages to syslog), so this option and the logfile option are mutually exclusive. The default is for pppd to send log messages to stdout (file descriptor 1), unless the serial port is already open on stdout. logfile filename Append log messages to the file filename (as well as sending the log messages to syslog). The file is opened with the privileges of the user who invoked pppd, in append mode. login Use the system password database for authenticating the peer using PAP, and record the user in the system wtmp file. Note that the peer must have an entry in the /etc/ppp/pap-secrets file as well as the system password database to be allowed access. maxconnect n Terminate the connection when it has been available for network traffic for n seconds (i.e. n seconds after the first network control protocol comes up). maxfail n Terminate after n consecutive failed connection attempts. A value of 0 means no limit. The default value is 10. modem Use the modem control lines. This option is the default. With this option, pppd will wait for the CD (Carrier Detect) signal from the modem to be asserted when opening the serial device (unless a connect script is specified), and it will drop the DTR (Data Terminal Ready) signal briefly when the connection is terminated and before executing the connect script. On Ultrix, this option implies hardware flow control, as for the crtscts option. mp Enables the use of PPP multilink; this is an alias for the `multilink' option. This option is currently only available under Linux. mppe-stateful Allow MPPE to use stateful mode. Stateless mode is still attempted first. The default is to disallow stateful mode. mpshortseq Enables the use of short (12-bit) sequence numbers in multilink headers, as opposed to 24-bit sequence numbers. This option is only available under Linux, and only has any effect if multilink is enabled (see the multilink option). mrru n Sets the Maximum Reconstructed Receive Unit to n. The MRRU is the maximum size for a received packet on a multilink bundle, and is analogous to the MRU for the individual links. This option is currently only available under Linux, and only has any effect if multilink is enabled (see the multilink option). ms-dns &lt;addr&gt; If pppd is acting as a server for Microsoft Windows clients, this option allows pppd to supply one or two DNS (Domain Name Server) addresses to the clients. The first instance of this option specifies the primary DNS address; the second instance (if given) specifies the secondary DNS address. (This option was present in some older versions of pppd under the name dns-addr.) ms-wins &lt;addr&gt; If pppd is acting as a server for Microsoft Windows or &quot;Samba&quot; clients, this option allows pppd to supply one or two WINS (Windows Internet Name Services) server addresses to the clients. The first instance of this option specifies the primary WINS address; the second instance (if given) specifies the secondary WINS address. multilink Enables the use of the PPP multilink protocol. If the peer also supports multilink, then this link can become part of a bundle between the local system and the peer. If there is an existing bundle to the peer, pppd will join this link to that bundle, otherwise pppd will create a new bundle. See the MULTILINK section below. This option is currently only available under Linux. name name Set the name of the local system for authentication purposes to name. This is a privileged option. With this option, pppd will use lines in the secrets files which have name as the second field when looking for a secret to use in authenticating the peer. In addition, unless overridden with the user option, name will be used as the name to send to the peer when authenticating the local system to the peer. (Note that pppd does not append the domain name to name.) noaccomp Disable Address/Control compression in both directions (send and receive). noauth Do not require the peer to authenticate itself. This option is privileged. nobsdcomp Disables BSD-Compress compression; pppd will not request or agree to compress packets using the BSD-Compress scheme. noccp Disable CCP (Compression Control Protocol) negotiation. This option should only be required if the peer is buggy and gets confused by requests from pppd for CCP negotiation. nocrtscts Disable hardware flow control (i.e. RTS/CTS) on the serial port. If neither the crtscts nor the nocrtscts nor the cdtrcts nor the nocdtrcts option is given, the hardware flow control setting for the serial port is left unchanged. nocdtrcts This option is a synonym for nocrtscts. Either of these options will disable both forms of hardware flow control. nodefaultroute Disable the defaultroute option. The system administrator who wishes to prevent users from creating default routes with pppd can do so by placing this option in the /etc/ppp/options file. nodeflate Disables Deflate compression; pppd will not request or agree to compress packets using the Deflate scheme. nodetach Don't detach from the controlling terminal. Without this option, if a serial device other than the terminal on the standard input is specified, pppd will fork to become a background process. noendpoint Disables pppd from sending an endpoint discriminator to the peer or accepting one from the peer (see the MULTILINK section below). This option should only be required if the peer is buggy. noip Disable IPCP negotiation and IP communication. This option should only be required if the peer is buggy and gets confused by requests from pppd for IPCP negotiation. noipv6 Disable IPv6CP negotiation and IPv6 communication. This option should only be required if the peer is buggy and gets confused by requests from pppd for IPv6CP negotiation. noipdefault Disables the default behaviour when no local IP address is specified, which is to determine (if possible) the local IP address from the hostname. With this option, the peer will have to supply the local IP address during IPCP negotiation (unless it specified explicitly on the command line or in an options file). noipx Disable the IPXCP and IPX protocols. This option should only be required if the peer is buggy and gets confused by requests from pppd for IPXCP negotiation. noktune Opposite of the ktune option; disables pppd from changing system settings. nolog Do not send log messages to a file or file descriptor. This option cancels the logfd and logfile options. nomagic Disable magic number negotiation. With this option, pppd cannot detect a looped-back line. This option should only be needed if the peer is buggy. nomp Disables the use of PPP multilink. This option is currently only available under Linux. nomppe Disables MPPE (Microsoft Point to Point Encryption). This is the default. nomppe-40 Disable 40-bit encryption with MPPE. nomppe-128 Disable 128-bit encryption with MPPE. nomppe-stateful Disable MPPE stateful mode. This is the default. nompshortseq Disables the use of short (12-bit) sequence numbers in the PPP multilink protocol, forcing the use of 24-bit sequence numbers. This option is currently only available under Linux, and only has any effect if multilink is enabled. nomultilink Disables the use of PPP multilink. This option is currently only available under Linux. nopcomp Disable protocol field compression negotiation in both the receive and the transmit direction. nopersist Exit once a connection has been made and terminated. This is the default unless the persist or demand option has been specified. nopredictor1 Do not accept or agree to Predictor-1 compression. noproxyarp Disable the proxyarp option. The system administrator who wishes to prevent users from creating proxy ARP entries with pppd can do so by placing this option in the /etc/ppp/options file. notty Normally, pppd requires a terminal device. With this option, pppd will allocate itself a pseudo-tty master/slave pair and use the slave as its terminal device. Pppd will create a child process to act as a `character shunt' to transfer characters between the pseudo-tty master and its standard input and output. Thus pppd will transmit characters on its standard output and receive characters on its standard input even if they are not terminal devices. This option increases the latency and CPU overhead of transferring data over the ppp interface as all of the characters sent and received must flow through the character shunt process. An explicit device name may not be given if this option is used. novj Disable Van Jacobson style TCP/IP header compression in both the transmit and the receive direction. novjccomp Disable the connection-ID compression option in Van Jacobson style TCP/IP header compression. With this option, pppd will not omit the connection-ID byte from Van Jacobson compressed TCP/IP headers, nor ask the peer to do so. papcrypt Indicates that all secrets in the /etc/ppp/pap-secrets file which are used for checking the identity of the peer are encrypted, and thus pppd should not accept a password which, before encryption, is identical to the secret from the /etc/ppp/pap-secrets file. pap-max-authreq n Set the maximum number of PAP authenticate-request transmissions to n (default 10). pap-restart n Set the PAP restart interval (retransmission timeout) to n seconds (default 3). pap-timeout n Set the maximum time that pppd will wait for the peer to authenticate itself with PAP to n seconds (0 means no limit). pass-filter filter-expression Specifies a packet filter to applied to data packets being sent or received to determine which packets should be allowed to pass. Packets which are rejected by the filter are silently discarded. This option can be used to prevent specific network daemons (such as routed) using up link bandwidth, or to provide a very basic firewall capability. The filter-expression syntax is as described for tcpdump(1) , except that qualifiers which are inappropriate for a PPP link, such as ether and arp, are not permitted. Generally the filter expression should be enclosed in single-quotes to prevent whitespace in the expression from being interpreted by the shell. Note that it is possible to apply different constraints to incoming and outgoing packets using the inbound and outbound qualifiers. This option is currently only available under Linux, and requires that the kernel was configured to include PPP filtering support (CONFIG_PPP_FILTER). password password-string Specifies the password to use for authenticating to the peer. Use of this option is discouraged, as the password is likely to be visible to other users on the system (for example, by using ps(1) ). persist Do not exit after a connection is terminated; instead try to reopen the connection. The maxfail option still has an effect on persistent connections. plugin filename Load the shared library object file filename as a plugin. This is a privileged option. If filename does not contain a slash (/), pppd will look in the /usr/lib/pppd/version directory for the plugin, where version is the version number of pppd (for example, 2.4.2). predictor1 Request that the peer compress frames that it sends using Predictor-1 compression, and agree to compress transmitted frames with Predictor-1 if requested. This option has no effect unless the kernel driver supports Predictor-1 compression. privgroup group-name Allows members of group group-name to use privileged options. This is a privileged option. Use of this option requires care as there is no guarantee that members of group-name cannot use pppd to become root themselves. Consider it equivalent to putting the members of group-name in the kmem or disk group. proxyarp Add an entry to this system's ARP [Address Resolution Protocol] table with the IP address of the peer and the Ethernet address of this system. This will have the effect of making the peer appear to other systems to be on the local ethernet. pty script Specifies that the command script is to be used to communicate rather than a specific terminal device. Pppd will allocate itself a pseudo-tty master/slave pair and use the slave as its terminal device. The script will be run in a child process with the pseudo-tty master as its standard input and output. An explicit device name may not be given if this option is used. (Note: if the record option is used in conjuction with the pty option, the child process will have pipes on its standard input and output.) receive-all With this option, pppd will accept all control characters from the peer, including those marked in the receive asyncmap. Without this option, pppd will discard those characters as specified in RFC1662. This option should only be needed if the peer is buggy. record filename Specifies that pppd should record all characters sent and received to a file named filename. This file is opened in append mode, using the user's user-ID and permissions. This option is implemented using a pseudo-tty and a process to transfer characters between the pseudo-tty and the real serial device, so it will increase the latency and CPU overhead of transferring data over the ppp interface. The characters are stored in a tagged format with timestamps, which can be displayed in readable form using the pppdump(8) program. remotename name Set the assumed name of the remote system for authentication purposes to name. remotenumber number Set the assumed telephone number of the remote system for authentication purposes to number. refuse-chap With this option, pppd will not agree to authenticate itself to the peer using CHAP. refuse-mschap With this option, pppd will not agree to authenticate itself to the peer using MS-CHAP. refuse-mschap-v2 With this option, pppd will not agree to authenticate itself to the peer using MS-CHAPv2. refuse-eap With this option, pppd will not agree to authenticate itself to the peer using EAP. refuse-pap With this option, pppd will not agree to authenticate itself to the peer using PAP. require-chap Require the peer to authenticate itself using CHAP [Challenge Handshake Authentication Protocol] authentication. require-mppe Require the use of MPPE (Microsoft Point to Point Encryption). This option disables all other compression types. This option enables both 40-bit and 128-bit encryption. In order for MPPE to successfully come up, you must have authenticated with either MS-CHAP or MS-CHAPv2. This option is presently only supported under Linux, and only if your kernel has been configured to include MPPE support. require-mppe-40 Require the use of MPPE, with 40-bit encryption. require-mppe-128 Require the use of MPPE, with 128-bit encryption. require-mschap Require the peer to authenticate itself using MS-CHAP [Microsoft Challenge Handshake Authentication Protocol] authentication. require-mschap-v2 Require the peer to authenticate itself using MS-CHAPv2 [Microsoft Challenge Handshake Authentication Protocol, Version 2] authentication. require-eap Require the peer to authenticate itself using EAP [Extensible Authentication Protocol] authentication. require-pap Require the peer to authenticate itself using PAP [Password Authentication Protocol] authentication. show-password When logging the contents of PAP packets, this option causes pppd to show the password string in the log message. silent With this option, pppd will not transmit LCP packets to initiate a connection until a valid LCP packet is received from the peer (as for the `passive' option with ancient versions of pppd). srp-interval n If this parameter is given and pppd uses EAP SRP-SHA1 to authenticate the peer (i.e., is the server), then pppd will use the optional lightweight SRP rechallenge mechanism at intervals of n seconds. This option is faster than eap-interval reauthentication because it uses a hash-based mechanism and does not derive a new session key. srp-pn-secret string Set the long-term pseudonym-generating secret for the server. This value is optional and if set, needs to be known at the server (authenticator) side only, and should be different for each server (or poll of identical servers). It is used along with the current date to generate a key to encrypt and decrypt the client's identity contained in the pseudonym. srp-use-pseudonym When operating as an EAP SRP-SHA1 client, attempt to use the pseudonym stored in ~/.ppp_psuedonym first as the identity, and save in this file any pseudonym offered by the peer during authentication. sync Use synchronous HDLC serial encoding instead of asynchronous. The device used by pppd with this option must have sync support. Currently supports Microgate SyncLink adapters under Linux and FreeBSD 2.2.8 and later. unit num Sets the ppp unit number (for a ppp0 or ppp1 etc interface name) for outbound connections. updetach With this option, pppd will detach from its controlling terminal once it has successfully established the ppp connection (to the point where the first network control protocol, usually the IP control protocol, has come up). usehostname Enforce the use of the hostname (with domain name appended, if given) as the name of the local system for authentication purposes (overrides the name option). This option is not normally needed since the name option is privileged. usepeerdns Ask the peer for up to 2 DNS server addresses. The addresses supplied by the peer (if any) are passed to the /etc/ppp/ip-up script in the environment variables DNS1 and DNS2, and the environment variable USEPEERDNS will be set to 1. In addition, pppd will create an /etc/ppp/resolv.conf file containing one or two nameserver lines with the address(es) supplied by the peer. user name Sets the name used for authenticating the local system to the peer to name. vj-max-slots n Sets the number of connection slots to be used by the Van Jacobson TCP/IP header compression and decompression code to n, which must be between 2 and 16 (inclusive). welcome script Run the executable or shell command specified by script before initiating PPP negotiation, after the connect script (if any) has completed. A value for this option from a privileged source cannot be overridden by a non-privileged user. xonxoff Use software flow control (i.e. XON/XOFF) to control the flow of data on the serial port. Options Files Options can be taken from files as well as the command line. Pppd reads options from the files /etc/ppp/options, ~/.ppprc and /etc/ppp/options.ttyname (in that order) before processing the options on the command line. (In fact, the command-line options are scanned to find the terminal name before the options.ttyname file is read.) In forming the name of the options.ttyname file, the initial /dev/ is removed from the terminal name, and any remaining / characters are replaced with dots. An options file is parsed into a series of words, delimited by whitespace. Whitespace can be included in a word by enclosing the word in double-quotes (&quot;). A backslash (\) quotes the following character. A hash (#) starts a comment, which continues until the end of the line. There is no restriction on using the file or call options within an options file. Security pppd provides system administrators with sufficient access control that PPP access to a server machine can be provided to legitimate users without fear of compromising the security of the server or the network it's on. This control is provided through restrictions on which IP addresses the peer may use, based on its authenticated identity (if any), and through restrictions on which options a non-privileged user may use. Several of pppd's options are privileged, in particular those which permit potentially insecure configurations; these options are only accepted in files which are under the control of the system administrator, or if pppd is being run by root. The default behaviour of pppd is to allow an unauthenticated peer to use a given IP address only if the system does not already have a route to that IP address. For example, a system with a permanent connection to the wider internet will normally have a default route, and thus all peers will have to authenticate themselves in order to set up a connection. On such a system, the auth option is the default. On the other hand, a system where the PPP link is the only connection to the internet will not normally have a default route, so the peer will be able to use almost any IP address without authenticating itself. As indicated above, some security-sensitive options are privileged, which means that they may not be used by an ordinary non-privileged user running a setuid-root pppd, either on the command line, in the user's ~/.ppprc file, or in an options file read using the file option. Privileged options may be used in /etc/ppp/options file or in an options file read using the call option. If pppd is being run by the root user, privileged options can be used without restriction. When opening the device, pppd uses either the invoking user's user ID or the root UID (that is, 0), depending on whether the device name was specified by the user or the system administrator. If the device name comes from a privileged source, that is, /etc/ppp/options or an options file read using the call option, pppd uses full root privileges when opening the device. Thus, by creating an appropriate file under /etc/ppp/peers, the system administrator can allow users to establish a ppp connection via a device which they would not normally have permission to access. Otherwise pppd uses the invoking user's real UID when opening the device. Authentication Authentication is the process whereby one peer convinces the other of its identity. This involves the first peer sending its name to the other, together with some kind of secret information which could only come from the genuine authorized user of that name. In such an exchange, we will call the first peer the &quot;client&quot; and the other the &quot;server&quot;. The client has a name by which it identifies itself to the server, and the server also has a name by which it identifies itself to the client. Generally the genuine client shares some secret (or password) with the server, and authenticates itself by proving that it knows that secret. Very often, the names used for authentication correspond to the internet hostnames of the peers, but this is not essential. At present, pppd supports three authentication protocols: the Password Authentication Protocol (PAP), Challenge Handshake Authentication Protocol (CHAP), and Extensible Authentication Protocol (EAP). PAP involves the client sending its name and a cleartext password to the server to authenticate itself. In contrast, the server initiates the CHAP authentication exchange by sending a challenge to the client (the challenge packet includes the server's name). The client must respond with a response which includes its name plus a hash value derived from the shared secret and the challenge, in order to prove that it knows the secret. EAP supports CHAP-style authentication, and also includes the SRP-SHA1 mechanism, which is resistant to dictionary-based attacks and does not require a cleartext password on the server side. The PPP protocol, being symmetrical, allows both peers to require the other to authenticate itself. In that case, two separate and independent authentication exchanges will occur. The two exchanges could use different authentication protocols, and in principle, different names could be used in the two exchanges. The default behaviour of pppd is to agree to authenticate if requested, and to not require authentication from the peer. However, pppd will not agree to authenticate itself with a particular protocol if it has no secrets which could be used to do so. Pppd stores secrets for use in authentication in secrets files (/etc/ppp/pap-secrets for PAP, /etc/ppp/chap-secrets for CHAP, MS-CHAP, MS-CHAPv2, and EAP MD5-Challenge, and /etc/ppp/srp-secrets for EAP SRP-SHA1). All secrets files have the same format. The secrets files can contain secrets for pppd to use in authenticating itself to other systems, as well as secrets for pppd to use when authenticating other systems to itself. Each line in a secrets file contains one secret. A given secret is specific to a particular combination of client and server - it can only be used by that client to authenticate itself to that server. Thus each line in a secrets file has at least 3 fields: the name of the client, the name of the server, and the secret. These fields may be followed by a list of the IP addresses that the specified client may use when connecting to the specified server. A secrets file is parsed into words as for a options file, so the client name, server name and secrets fields must each be one word, with any embedded spaces or other special characters quoted or escaped. Note that case is significant in the client and server names and in the secret. If the secret starts with an `@', what follows is assumed to be the name of a file from which to read the secret. A &quot;*&quot; as the client or server name matches any name. When selecting a secret, pppd takes the best match, i.e. the match with the fewest wildcards. Any following words on the same line are taken to be a list of acceptable IP addresses for that client. If there are only 3 words on the line, or if the first word is &quot;-&quot;, then all IP addresses are disallowed. To allow any address, use &quot;*&quot;. A word starting with &quot;!&quot; indicates that the specified address is not acceptable. An address may be followed by &quot;/&quot; and a number n, to indicate a whole subnet, i.e. all addresses which have the same value in the most significant n bits. In this form, the address may be followed by a plus sign (&quot;+&quot;) to indicate that one address from the subnet is authorized, based on the ppp network interface unit number in use. In this case, the host part of the address will be set to the unit number plus one. Thus a secrets file contains both secrets for use in authenticating other hosts, plus secrets which we use for authenticating ourselves to others. When pppd is authenticating the peer (checking the peer's identity), it chooses a secret with the peer's name in the first field and the name of the local system in the second field. The name of the local system defaults to the hostname, with the domain name appended if the domain option is used. This default can be overridden with the name option, except when the usehostname option is used. (For EAP SRP-SHA1, see the srp-entry(8) utility for generating proper validator entries to be used in the &quot;secret&quot; field.) When pppd is choosing a secret to use in authenticating itself to the peer, it first determines what name it is going to use to identify itself to the peer. This name can be specified by the user with the user option. If this option is not used, the name defaults to the name of the local system, determined as described in the previous paragraph. Then pppd looks for a secret with this name in the first field and the peer's name in the second field. Pppd will know the name of the peer if CHAP or EAP authentication is being used, because the peer will have sent it in the challenge packet. However, if PAP is being used, pppd will have to determine the peer's name from the options specified by the user. The user can specify the peer's name directly with the remotename option. Otherwise, if the remote IP address was specified by a name (rather than in numeric form), that name will be used as the peer's name. Failing that, pppd will use the null string as the peer's name. When authenticating the peer with PAP, the supplied password is first compared with the secret from the secrets file. If the password doesn't match the secret, the password is encrypted using crypt() and checked against the secret again. Thus secrets for authenticating the peer can be stored in encrypted form if desired. If the papcrypt option is given, the first (unencrypted) comparison is omitted, for better security. Furthermore, if the login option was specified, the username and password are also checked against the system password database. Thus, the system administrator can set up the pap-secrets file to allow PPP access only to certain users, and to restrict the set of IP addresses that each user can use. Typically, when using the login option, the secret in /etc/ppp/pap-secrets would be &quot;&quot;, which will match any password supplied by the peer. This avoids the need to have the same secret in two places. Authentication must be satisfactorily completed before IPCP (or any other Network Control Protocol) can be started. If the peer is required to authenticate itself, and fails to do so, pppd will terminated the link (by closing LCP). If IPCP negotiates an unacceptable IP address for the remote host, IPCP will be closed. IP packets can only be sent or received when IPCP is open. In some cases it is desirable to allow some hosts which can't authenticate themselves to connect and use one of a restricted set of IP addresses, even when the local host generally requires authentication. If the peer refuses to authenticate itself when requested, pppd takes that as equivalent to authenticating with PAP using the empty string for the username and password. Thus, by adding a line to the pap-secrets file which specifies the empty string for the client and password, it is possible to allow restricted access to hosts which refuse to authenticate themselves. Routing When IPCP negotiation is completed successfully, pppd will inform the kernel of the local and remote IP addresses for the ppp interface. This is sufficient to create a host route to the remote end of the link, which will enable the peers to exchange IP packets. Communication with other machines generally requires further modification to routing tables and/or ARP (Address Resolution Protocol) tables. In most cases the defaultroute and/or proxyarp options are sufficient for this, but in some cases further intervention is required. The /etc/ppp/ip-up script can be used for this. Sometimes it is desirable to add a default route through the remote host, as in the case of a machine whose only connection to the Internet is through the ppp interface. The defaultroute option causes pppd to create such a default route when IPCP comes up, and delete it when the link is terminated. In some cases it is desirable to use proxy ARP, for example on a server machine connected to a LAN, in order to allow other hosts to communicate with the remote host. The proxyarp option causes pppd to look for a network interface on the same subnet as the remote host (an interface supporting broadcast and ARP, which is up and not a point-to-point or loopback interface). If found, pppd creates a permanent, published ARP entry with the IP address of the remote host and the hardware address of the network interface found. When the demand option is used, the interface IP addresses have already been set at the point when IPCP comes up. If pppd has not been able to negotiate the same addresses that it used to configure the interface (for example when the peer is an ISP that uses dynamic IP address assignment), pppd has to change the interface IP addresses to the negotiated addresses. This may disrupt existing connections, and the use of demand dialling with peers that do dynamic IP address assignment is not recommended. Multilink Multilink PPP provides the capability to combine two or more PPP links between a pair of machines into a single `bundle', which appears as a single virtual PPP link which has the combined bandwidth of the individual links. Currently, multilink PPP is only supported under Linux. Pppd detects that the link it is controlling is connected to the same peer as another link using the peer's endpoint discriminator and the authenticated identity of the peer (if it authenticates itself). The endpoint discriminator is a block of data which is hopefully unique for each peer. Several types of data can be used, including locally-assigned strings of bytes, IP addresses, MAC addresses, randomly strings of bytes, or E-164 phone numbers. The endpoint discriminator sent to the peer by pppd can be set using the endpoint option. In some circumstances the peer may send no endpoint discriminator or a non-unique value. The bundle option adds an extra string which is added to the peer's endpoint discriminator and authenticated identity when matching up links to be joined together in a bundle. The bundle option can also be used to allow the establishment of multiple bundles between the local system and the peer. Pppd uses a TDB database in /var/run/pppd2.tdb to match up links. Assuming that multilink is enabled and the peer is willing to negotiate multilink, then when pppd is invoked to bring up the first link to the peer, it will detect that no other link is connected to the peer and create a new bundle, that is, another ppp network interface unit. When another pppd is invoked to bring up another link to the peer, it will detect the existing bundle and join its link to it. If the first link terminates (for example, because of a hangup or a received LCP terminate-request) the bundle is not destroyed unless there are no other links remaining in the bundle. Rather than exiting, the first pppd keeps running after its link terminates, until all the links in the bundle have terminated. If the first pppd receives a SIGTERM or SIGINT signal, it will destroy the bundle and send a SIGHUP to the pppd processes for each of the links in the bundle. If the first pppd receives a SIGHUP signal, it will terminate its link but not the bundle. Note: demand mode is not currently supported with multilink. Examples The following examples assume that the /etc/ppp/options file contains the auth option (as in the default /etc/ppp/options file in the ppp distribution). Probably the most common use of pppd is to dial out to an ISP. This can be done with a command such as pppd call isp where the /etc/ppp/peers/isp file is set up by the system administrator to contain something like this: ttyS0 19200 crtscts connect '/usr/sbin/chat -v -f /etc/ppp/chat-isp' noauth In this example, we are using chat to dial the ISP's modem and go through any logon sequence required. The /etc/ppp/chat-isp file contains the script used by chat; it could for example contain something like this: ABORT &quot;NO CARRIER&quot; ABORT &quot;NO DIALTONE&quot; ABORT &quot;ERROR&quot; ABORT &quot;NO ANSWER&quot; ABORT &quot;BUSY&quot; ABORT &quot;Username/Password Incorrect&quot; &quot;&quot; &quot;at&quot; OK &quot;at&amp;d0&amp;c1&quot; OK &quot;atdt2468135&quot; &quot;name:&quot; &quot;^Umyuserid&quot; &quot;word:&quot; &quot;\qmypassword&quot; &quot;ispts&quot; &quot;\q^Uppp&quot; &quot;~-^Uppp-~&quot; See the chat(8) man page for details of chat scripts. Pppd can also be used to provide a dial-in ppp service for users. If the users already have login accounts, the simplest way to set up the ppp service is to let the users log in to their accounts and run pppd (installed setuid-root) with a command such as pppd proxyarp To allow a user to use the PPP facilities, you need to allocate an IP address for that user's machine and create an entry in /etc/ppp/pap-secrets, /etc/ppp/chap-secrets, or /etc/ppp/srp-secrets (depending on which authentication method the PPP implementation on the user's machine supports), so that the user's machine can authenticate itself. For example, if Joe has a machine called &quot;joespc&quot; that is to be allowed to dial in to the machine called &quot;server&quot; and use the IP address joespc.my.net, you would add an entry like this to /etc/ppp/pap-secrets or /etc/ppp/chap-secrets: joespc server &quot;joe's secret&quot; joespc.my.net (See srp-entry(8) for a means to generate the server's entry when SRP-SHA1 is in use.) Alternatively, you can create a username called (for example) &quot;ppp&quot;, whose login shell is pppd and whose home directory is /etc/ppp. Options to be used when pppd is run this way can be put in /etc/ppp/.ppprc. If your serial connection is any more complicated than a piece of wire, you may need to arrange for some control characters to be escaped. In particular, it is often useful to escape XON (^Q) and XOFF (^S), using asyncmap a0000. If the path includes a telnet, you probably should escape ^] as well (asyncmap 200a0000). If the path includes an rlogin, you will need to use the escape ff option on the end which is running the rlogin client, since many rlogin implementations are not transparent; they will remove the sequence [0xff, 0xff, 0x73, 0x73, followed by any 8 bytes] from the stream. Diagnostics Messages are sent to the syslog daemon using facility LOG_DAEMON. (This can be overridden by recompiling pppd with the macro LOG_PPP defined as the desired facility.) See the syslog(8) documentation for details of where the syslog daemon will write the messages. On most systems, the syslog daemon uses the /etc/syslog.conf file to specify the destination(s) for syslog messages. You may need to edit that file to suit. The debug option causes the contents of all control packets sent or received to be logged, that is, all LCP, PAP, CHAP, EAP, or IPCP packets. This can be useful if the PPP negotiation does not succeed or if authentication fails. If debugging is enabled at compile time, the debug option also causes other debugging messages to be logged. Debugging can also be enabled or disabled by sending a SIGUSR1 signal to the pppd process. This signal acts as a toggle. Exit Status The exit status of pppd is set to indicate whether any error was detected, or the reason for the link being terminated. The values used are: Pppd has detached, or otherwise the connection was successfully established and terminated at the peer's request. An immediately fatal error of some kind occurred, such as an essential system call failing, or running out of virtual memory. An error was detected in processing the options given, such as two mutually exclusive options being used. Pppd is not setuid-root and the invoking user is not root. The kernel does not support PPP, for example, the PPP kernel driver is not included or cannot be loaded. Pppd terminated because it was sent a SIGINT, SIGTERM or SIGHUP signal. The serial port could not be locked. The serial port could not be opened. The connect script failed (returned a non-zero exit status). The command specified as the argument to the pty option could not be run. The PPP negotiation failed, that is, it didn't reach the point where at least one network protocol (e.g. IP) was running. The peer system failed (or refused) to authenticate itself. The link was established successfully and terminated because it was idle. The link was established successfully and terminated because the connect time limit was reached. Callback was negotiated and an incoming call should arrive shortly. The link was terminated because the peer is not responding to echo requests. The link was terminated by the modem hanging up. The PPP negotiation failed because serial loopback was detected. The init script failed (returned a non-zero exit status). We failed to authenticate ourselves to the peer. Scripts Pppd invokes scripts at various stages in its processing which can be used to perform site-specific ancillary processing. These scripts are usually shell scripts, but could be executable code files instead. Pppd does not wait for the scripts to finish. The scripts are executed as root (with the real and effective user-id set to 0), so that they can do things such as update routing tables or run privileged daemons. Be careful that the contents of these scripts do not compromise your system's security. Pppd runs the scripts with standard input, output and error redirected to /dev/null, and with an environment that is empty except for some environment variables that give information about the link. The environment variables that pppd sets are: DEVICE The name of the serial tty device being used. IFNAME The name of the network interface being used. IPLOCAL The IP address for the local end of the link. This is only set when IPCP has come up. IPREMOTE The IP address for the remote end of the link. This is only set when IPCP has come up. PEERNAME The authenticated name of the peer. This is only set if the peer authenticates itself. SPEED The baud rate of the tty device. ORIG_UID The real user-id of the user who invoked pppd. PPPLOGNAME The username of the real user-id that invoked pppd. This is always set. For the ip-down and auth-down scripts, pppd also sets the following variables giving statistics for the connection: CONNECT_TIME The number of seconds from when the PPP negotiation started until the connection was terminated. BYTES_SENT The number of bytes sent (at the level of the serial port) during the connection. BYTES_RCVD The number of bytes received (at the level of the serial port) during the connection. LINKNAME The logical name of the link, set with the linkname option. DNS1 If the peer supplies DNS server addresses, this variable is set to the first DNS server address supplied. DNS2 If the peer supplies DNS server addresses, this variable is set to the second DNS server address supplied. Pppd invokes the following scripts, if they exist. It is not an error if they don't exist. /etc/ppp/auth-up A program or script which is executed after the remote system successfully authenticates itself. It is executed with the parameters interface-name peer-name user-name tty-device speed Note that this script is not executed if the peer doesn't authenticate itself, for example when the noauth option is used. /etc/ppp/auth-down A program or script which is executed when the link goes down, if /etc/ppp/auth-up was previously executed. It is executed in the same manner with the same parameters as /etc/ppp/auth-up. /etc/ppp/ip-up A program or script which is executed when the link is available for sending and receiving IP packets (that is, IPCP has come up). It is executed with the parameters interface-name tty-device speed local-IP-address remote-IP-address ipparam /etc/ppp/ip-down A program or script which is executed when the link is no longer available for sending and receiving IP packets. This script can be used for undoing the effects of the /etc/ppp/ip-up script. It is invoked in the same manner and with the same parameters as the ip-up script. /etc/ppp/ipv6-up Like /etc/ppp/ip-up, except that it is executed when the link is available for sending and receiving IPv6 packets. It is executed with the parameters interface-name tty-device speed local-link-local-address remote-link-local-address ipparam /etc/ppp/ipv6-down Similar to /etc/ppp/ip-down, but it is executed when IPv6 packets can no longer be transmitted on the link. It is executed with the same parameters as the ipv6-up script. /etc/ppp/ipx-up A program or script which is executed when the link is available for sending and receiving IPX packets (that is, IPXCP has come up). It is executed with the parameters interface-name tty-device speed network-number local-IPX-node-address remote-IPX-node-address local-IPX-routing-protocol remote-IPX-routing-protocol local-IPX-router-name remote-IPX-router-name ipparam pppd-pid The local-IPX-routing-protocol and remote-IPX-routing-protocol field may be one of the following: NONE to indicate that there is no routing protocol RIP to indicate that RIP/SAP should be used NLSP to indicate that Novell NLSP should be used RIP NLSP to indicate that both RIP/SAP and NLSP should be used /etc/ppp/ipx-down A program or script which is executed when the link is no longer available for sending and receiving IPX packets. This script can be used for undoing the effects of the /etc/ppp/ipx-up script. It is invoked in the same manner and with the same parameters as the ipx-up script. Files /var/run/pppn.pid (BSD or Linux), /etc/ppp/pppn.pid (others) Process-ID for pppd process on ppp interface unit n. /var/run/ppp-name.pid (BSD or Linux), /etc/ppp/ppp-name.pid (others) Process-ID for pppd process for logical link name (see the linkname option). /var/run/pppd2.tdb Database containing information about pppd processes, interfaces and links, used for matching links to bundles in multilink operation. May be examined by external programs to obtain information about running pppd instances, the interfaces and devices they are using, IP address assignments, etc. /etc/ppp/pap-secrets Usernames, passwords and IP addresses for PAP authentication. This file should be owned by root and not readable or writable by any other user. Pppd will log a warning if this is not the case. /etc/ppp/chap-secrets Names, secrets and IP addresses for CHAP/MS-CHAP/MS-CHAPv2 authentication. As for /etc/ppp/pap-secrets, this file should be owned by root and not readable or writable by any other user. Pppd will log a warning if this is not the case. /etc/ppp/srp-secrets Names, secrets, and IP addresses for EAP authentication. As for /etc/ppp/pap-secrets, this file should be owned by root and not readable or writable by any other user. Pppd will log a warning if this is not the case. ~/.ppp_pseudonym Saved client-side SRP-SHA1 pseudonym. See the srp-use-pseudonym option for details. /etc/ppp/options System default options for pppd, read before user default options or command-line options. ~/.ppprc User default options, read before /etc/ppp/options.ttyname. /etc/ppp/options.ttyname System default options for the serial port being used, read after ~/.ppprc. In forming the ttyname part of this filename, an initial /dev/ is stripped from the port name (if present), and any slashes in the remaining part are converted to dots. /etc/ppp/peers A directory containing options files which may contain privileged options, even if pppd was invoked by a user other than root. The system administrator can create options files in this directory to permit non-privileged users to dial out without requiring the peer to authenticate, but only to certain trusted peers. See Also RFC1144 Jacobson, V. Compressing TCP/IP headers for low-speed serial links. February 1990. RFC1321 Rivest, R. The MD5 Message-Digest Algorithm. April 1992. RFC1332 McGregor, G. PPP Internet Protocol Control Protocol (IPCP). May 1992. RFC1334 Lloyd, B.; Simpson, W.A. PPP authentication protocols. October 1992. RFC1661 Simpson, W.A. The Point-to-Point Protocol (PPP). July 1994. RFC1662 Simpson, W.A. PPP in HDLC-like Framing. July 1994. RFC2284 Blunk, L.; Vollbrecht, J., PPP Extensible Authentication Protocol (EAP). March 1998. RFC2472 Haskin, D. IP Version 6 over PPP December 1998. RFC2945 Wu, T., The SRP Authentication and Key Exchange System September 2000. draft-ietf-pppext-eap-srp-03.txt Carlson, J.; et al., EAP SRP-SHA1 Authentication Protocol. July 2001. Notes Some limited degree of control can be exercised over a running pppd process by sending it a signal from the list below. SIGINT, SIGTERM These signals cause pppd to terminate the link (by closing LCP), restore the serial device settings, and exit. SIGHUP This signal causes pppd to terminate the link, restore the serial device settings, and close the serial device. If the persist or demand option has been specified, pppd will try to reopen the serial device and start another connection (after the holdoff period). Otherwise pppd will exit. If this signal is received during the holdoff period, it causes pppd to end the holdoff period immediately. SIGUSR1 This signal toggles the state of the debug option. SIGUSR2 This signal causes pppd to renegotiate compression. This can be useful to re-enable compression after it has been disabled as a result of a fatal decompression error. (Fatal decompression errors generally indicate a bug in one or other implementation.) Authors Paul Mackerras (paulus@samba.org), based on earlier work by Drew Perkins, Brad Clements, Karl Fox, Greg Christy, and Brad Parker. Copyright Pppd is copyrighted and made available under conditions which provide that it may be copied and used in source or binary forms provided that the conditions listed below are met. Portions of pppd are covered by the following copyright notices: Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved. Copyright (c) 1993-2004 Paul Mackerras. All rights reserved. Copyright (c) 1995 Pedro Roque Marques. All rights reserved. Copyright (c) 1995 Eric Rosenquist. All rights reserved. Copyright (c) 1999 Tommi Komulainen. All rights reserved. Copyright (C) Andrew Tridgell 1999 Copyright (c) 2000 by Sun Microsystems, Inc. All rights reserved. Copyright (c) 2001 by Sun Microsystems, Inc. All rights reserved. Copyright (c) 2002 Google, Inc. All rights reserved. The copyright notices contain the following statements. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The name &quot;Carnegie Mellon University&quot; must not be used to endorse or promote products derived from this software without prior written permission. For permission or any legal details, please contact Office of Technology Transfer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213-3890 (412) 268-4387, fax: (412) 268-7395 tech-transfer@andrew.cmu.edu 3b. The name(s) of the authors of this software must not be used to endorse or promote products derived from this software without prior written permission. 4. Redistributions of any form whatsoever must retain the following acknowledgments: &quot;This product includes software developed by Computing Services at Carnegie Mellon University (http://www.cmu.edu/computing/).&quot; &quot;This product includes software developed by Paul Mackerras &lt;paulus@samba.org&gt;&quot;. &quot;This product includes software developed by Pedro Roque Marques &lt;pedro_m@yahoo.com&gt;&quot;. &quot;This product includes software developed by Tommi Komulainen &lt;Tommi.Komulainen@iki.fi&gt;&quot;. CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. Table of Contents Name Synopsis Description Frequently Used Options Options Options Files Security Authentication Routing Multilink Examples Diagnostics Exit Status Scripts Files See Also Notes Authors Copyright "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160708144007#index"
                   NS1:content=" tutorialspoint We are hiring Home Tutorials Library Coding Ground Tutor Connect Send18 Tools Search Python Tutorial Python Basic Tutorial Python - Home Python - Overview Python - Environment Setup Python - Basic Syntax Python - Variable Types Python - Basic Operators Python - Decision Making Python - Loops Python - Numbers Python - Strings Python - Lists Python - Tuples Python - Dictionary Python - Date &amp; Time Python - Functions Python - Modules Python - Files I/O Python - Exceptions Python Advanced Tutorial Python - Classes/Objects Python - Reg Expressions Python - CGI Programming Python - Database Access Python - Networking Python - Sending Email Python - Multithreading Python - XML Processing Python - GUI Programming Python - Further Extensions Python Useful Resources Python - Questions and Answers Python - Quick Guide Python - Tools/Utilities Python - Useful Resources Python - Discussion Selected Reading Developer's Best Practices Questions and Answers Effective Resume Writing HR Interview Questions Computer Glossary Who is Who Python Regular Expressions Advertisements Previous Page Next Page A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. Regular expressions are widely used in UNIX world. The module re provides full support for Perl-like regular expressions in Python. The re module raises the exception re.error if an error occurs while compiling or using a regular expression. We would cover two important functions, which would be used to handle regular expressions. But a small thing first: There are various characters, which would have special meaning when they are used in regular expression. To avoid any confusion while dealing with regular expressions, we would use Raw Strings as r'expression'. The match Function This function attempts to match RE pattern to string with optional flags. Here is the syntax for this function − re.match(pattern, string, flags=0) Here is the description of the parameters: Parameter Description pattern This is the regular expression to be matched. string This is the string, which would be searched to match the pattern at the beginning of string. flags You can specify different flags using bitwise OR (|). These are modifiers, which are listed in the table below. The re.match function returns a match object on success, None on failure. We usegroup(num) or groups() function of match object to get matched expression. Match Object Methods Description group(num=0) This method returns entire match (or specific subgroup num) groups() This method returns all matching subgroups in a tuple (empty if there weren't any) Example #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot; matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I) if matchObj: print &quot;matchObj.group() : &quot;, matchObj.group() print &quot;matchObj.group(1) : &quot;, matchObj.group(1) print &quot;matchObj.group(2) : &quot;, matchObj.group(2) else: print &quot;No match!!&quot; When the above code is executed, it produces following result − matchObj.group() : Cats are smarter than dogs matchObj.group(1) : Cats matchObj.group(2) : smarter The search Function This function searches for first occurrence of RE pattern within string with optional flags. Here is the syntax for this function: re.search(pattern, string, flags=0) Here is the description of the parameters: Parameter Description pattern This is the regular expression to be matched. string This is the string, which would be searched to match the pattern anywhere in the string. flags You can specify different flags using bitwise OR (|). These are modifiers, which are listed in the table below. The re.search function returns a match object on success, none on failure. We use group(num) or groups() function of match object to get matched expression. Match Object Methods Description group(num=0) This method returns entire match (or specific subgroup num) groups() This method returns all matching subgroups in a tuple (empty if there weren't any) Example #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot;; searchObj = re.search( r'(.*) are (.*?) .*', line, re.M|re.I) if searchObj: print &quot;searchObj.group() : &quot;, searchObj.group() print &quot;searchObj.group(1) : &quot;, searchObj.group(1) print &quot;searchObj.group(2) : &quot;, searchObj.group(2) else: print &quot;Nothing found!!&quot; When the above code is executed, it produces following result − matchObj.group() : Cats are smarter than dogs matchObj.group(1) : Cats matchObj.group(2) : smarter Matching Versus Searching Python offers two different primitive operations based on regular expressions: match checks for a match only at the beginning of the string, while search checks for a match anywhere in the string (this is what Perl does by default). Example #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot;; matchObj = re.match( r'dogs', line, re.M|re.I) if matchObj: print &quot;match --&gt; matchObj.group() : &quot;, matchObj.group() else: print &quot;No match!!&quot; searchObj = re.search( r'dogs', line, re.M|re.I) if searchObj: print &quot;search --&gt; searchObj.group() : &quot;, searchObj.group() else: print &quot;Nothing found!!&quot; When the above code is executed, it produces the following result − No match!! search --&gt; matchObj.group() : dogs Search and Replace One of the most important re methods that use regular expressions is sub. Syntax re.sub(pattern, repl, string, max=0) This method replaces all occurrences of the RE pattern in string with repl, substituting all occurrences unless max provided. This method returns modified string. Example #!/usr/bin/python import re phone = &quot;2004-959-559 # This is Phone Number&quot; # Delete Python-style comments num = re.sub(r'#.*$', &quot;&quot;, phone) print &quot;Phone Num : &quot;, num # Remove anything other than digits num = re.sub(r'\D', &quot;&quot;, phone) print &quot;Phone Num : &quot;, num When the above code is executed, it produces the following result − Phone Num : 2004-959-559 Phone Num : 2004959559 Regular Expression Modifiers: Option Flags Regular expression literals may include an optional modifier to control various aspects of matching. The modifiers are specified as an optional flag. You can provide multiple modifiers using exclusive OR (|), as shown previously and may be represented by one of these − Modifier Description re.I Performs case-insensitive matching. re.L Interprets words according to the current locale. This interpretation affects the alphabetic group (\w and \W), as well as word boundary behavior (\b and \B). re.M Makes $ match the end of a line (not just the end of the string) and makes ^ match the start of any line (not just the start of the string). re.S Makes a period (dot) match any character, including a newline. re.U Interprets letters according to the Unicode character set. This flag affects the behavior of \w, \W, \b, \B. re.X Permits &quot;cuter&quot; regular expression syntax. It ignores whitespace (except inside a set [] or when escaped by a backslash) and treats unescaped # as a comment marker. Regular Expression Patterns Except for control characters, (+ ? . * ^ $ ( ) [ ] { } | \), all characters match themselves. You can escape a control character by preceding it with a backslash. Following table lists the regular expression syntax that is available in Python − Pattern Description ^ Matches beginning of line. $ Matches end of line. . Matches any single character except newline. Using m option allows it to match newline as well. [...] Matches any single character in brackets. [^...] Matches any single character not in brackets re* Matches 0 or more occurrences of preceding expression. re+ Matches 1 or more occurrence of preceding expression. re? Matches 0 or 1 occurrence of preceding expression. re{ n} Matches exactly n number of occurrences of preceding expression. re{ n,} Matches n or more occurrences of preceding expression. re{ n, m} Matches at least n and at most m occurrences of preceding expression. a| b Matches either a or b. (re) Groups regular expressions and remembers matched text. (?imx) Temporarily toggles on i, m, or x options within a regular expression. If in parentheses, only that area is affected. (?-imx) Temporarily toggles off i, m, or x options within a regular expression. If in parentheses, only that area is affected. (?: re) Groups regular expressions without remembering matched text. (?imx: re) Temporarily toggles on i, m, or x options within parentheses. (?-imx: re) Temporarily toggles off i, m, or x options within parentheses. (?#...) Comment. (?= re) Specifies position using a pattern. Doesn't have a range. (?! re) Specifies position using pattern negation. Doesn't have a range. (?&gt; re) Matches independent pattern without backtracking. \w Matches word characters. \W Matches nonword characters. \s Matches whitespace. Equivalent to [\t\n\r\f]. \S Matches nonwhitespace. \d Matches digits. Equivalent to [0-9]. \D Matches nondigits. \A Matches beginning of string. \Z Matches end of string. If a newline exists, it matches just before newline. \z Matches end of string. \G Matches point where last match finished. \b Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets. \B Matches nonword boundaries. \n, \t, etc. Matches newlines, carriage returns, tabs, etc. \1...\9 Matches nth grouped subexpression. \10 Matches nth grouped subexpression if it matched already. Otherwise refers to the octal representation of a character code. Regular Expression Examples Literal characters Example Description python Match &quot;python&quot;. Character classes Example Description [Pp]ython Match &quot;Python&quot; or &quot;python&quot; rub[ye] Match &quot;ruby&quot; or &quot;rube&quot; [aeiou] Match any one lowercase vowel [0-9] Match any digit; same as [0123456789] [a-z] Match any lowercase ASCII letter [A-Z] Match any uppercase ASCII letter [a-zA-Z0-9] Match any of the above [^aeiou] Match anything other than a lowercase vowel [^0-9] Match anything other than a digit Special Character Classes Example Description . Match any character except newline \d Match a digit: [0-9] \D Match a nondigit: [^0-9] \s Match a whitespace character: [ \t\r\n\f] \S Match nonwhitespace: [^ \t\r\n\f] \w Match a single word character: [A-Za-z0-9_] \W Match a nonword character: [^A-Za-z0-9_] Repetition Cases Example Description ruby? Match &quot;rub&quot; or &quot;ruby&quot;: the y is optional ruby* Match &quot;rub&quot; plus 0 or more ys ruby+ Match &quot;rub&quot; plus 1 or more ys \d{3} Match exactly 3 digits \d{3,} Match 3 or more digits \d{3,5} Match 3, 4, or 5 digits Nongreedy repetition This matches the smallest number of repetitions − Example Description &lt;.*&gt; Greedy repetition: matches &quot;&lt;python&gt;perl&gt;&quot; &lt;.*?&gt; Nongreedy: matches &quot;&lt;python&gt;&quot; in &quot;&lt;python&gt;perl&gt;&quot; Grouping with Parentheses Example Description \D\d+ No group: + repeats \d (\D\d)+ Grouped: + repeats \D\d pair ([Pp]ython(, )?)+ Match &quot;Python&quot;, &quot;Python, python, python&quot;, etc. Backreferences This matches a previously matched group again − Example Description ([Pp])ython&amp;\1ails Match python&amp;pails or Python&amp;Pails (['&quot;])[^\1]*\1 Single or double-quoted string. \1 matches whatever the 1st group matched. \2 matches whatever the 2nd group matched, etc. Alternatives Example Description python|perl Match &quot;python&quot; or &quot;perl&quot; rub(y|le)) Match &quot;ruby&quot; or &quot;ruble&quot; Python(!+|\?) &quot;Python&quot; followed by one or more ! or one ? Anchors This needs to specify match position. Example Description ^Python Match &quot;Python&quot; at the start of a string or internal line Python$ Match &quot;Python&quot; at the end of a string or line \APython Match &quot;Python&quot; at the start of a string Python\Z Match &quot;Python&quot; at the end of a string \bPython\b Match &quot;Python&quot; at a word boundary \brub\B \B is nonword boundary: match &quot;rub&quot; in &quot;rube&quot; and &quot;ruby&quot; but not alone Python(?=!) Match &quot;Python&quot;, if followed by an exclamation point. Python(?!!) Match &quot;Python&quot;, if not followed by an exclamation point. Special Syntax with Parentheses Example Description R(?#comment) Matches &quot;R&quot;. All the rest is a comment R(?i)uby Case-insensitive while matching &quot;uby&quot; R(?i:uby) Same as above rub(?:y|le)) Group only without creating \1 backreference Previous Page Print PDF Next Page Advertisements img img img img img img Tutorials Point Write for us FAQ's Helping Contact © Copyright 2016. All Rights Reserved. go #!/usr/bin/python import re line = &quot;Cats are smarter than dogs&quot; matchObj = re.match( r'(.*) are (.*?) .*', line, re.M|re.I) if matchObj: print &quot;matchObj.group() : &quot;, matchObj.group() print &quot;matchObj.group(1) : &quot;, matchObj.group(1) print &quot;matchObj.group(2) : &quot;, matchObj.group(2) else: print &quot;No match!!&quot; "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160624164820#index"
                   NS1:content=" Home Packages Forums Wiki Bugs AUR Download 3G and GPRS modems with pppd From ArchWiki Jump to: navigation, search Note: 3G and GPRS modems with pppd alone Why not to use a pppd wrapper (like wvdial or similar)?. I particularly switched to direct pppd because my previous software sometimes silently exited instead of reconnecting, as it was configured to do, requiring me to travel to manually perform the reconnection. You may be reading this page by the same reason it was written for: you may have finally concluded that the lesser the layers, the less likely the troubles. Contents [hide] 1 Prerequisites and tested hardware 2 Configuration 2.1 /etc/ppp/options-mobile 2.2 /etc/ppp/peers 2.3 /etc/ppp/chatscripts 3 Start the pppd 4 Patch for modem availability after booting 4.1 netcfg hook 4.2 network hook 5 Troubleshooting 6 AT^SYSCFG Huawei command reference 7 Huawei unsolicited report command reference 7.1 ^SRVST 7.2 ^MODE 7.3 ^RSSI 8 Automatic PPP 9 Operator selection 9.1 Listing 9.2 Manual selection 9.3 Automatic selection 10 Related Articles Prerequisites and tested hardware The only requirement is the ppp package (2.4.5-1 tested). The method described supports easy switching between several carriers and 3G and GPRS modes. It has been tested and directly works with no modifications (except for the device name) with: Huawei EM770 MiniPCIe modem (Asus Eee PC 1000H Go internal integrated modem). Huawei E220 and E1552 external USB dongles. Nokia N73 (USB tethering; select &quot;PC Suite&quot; when the phone asks). Nokia CS-15 (lsusb says 0421:0612 Nokia Mobile Phones) Alcatel x310e (carrier: Wind IT) This guide assumes that your modem hardware is properly detected and working. You simply may look at /var/log/messages to discover the device names appeared when the modem is plugged in. Alternatively: root@quark:~# dmesg | grep GSM | grep attached usb 1-6: GSM modem (1-port) converter now attached to ttyUSB0 usb 1-6: GSM modem (1-port) converter now attached to ttyUSB1 usb 1-6: GSM modem (1-port) converter now attached to ttyUSB2 usb 2-2: GSM modem (1-port) converter now attached to ttyUSB3 usb 2-2: GSM modem (1-port) converter now attached to ttyUSB4 In this computer there are 2 devices available: a internal 3G modem (ttyUSB0) and a external 3G dongle (ttyUSB3). The Nokia phones use other device names, like ttyACM0. The extra devices created are useful to get and query the internal modem state while the main one is in use (you may try the cat command on them). To enable some modems you may need the usb_modeswitch package (see the USB 3G Modem wiki for more information). Configuration The following files are also available as netcfg-ppp-mobile-gitAUR[broken link: archived in aur-mirror] in the Arch User Repository. /etc/ppp/options-mobile Create this file: /etc/ppp/options-mobile ttyUSB0 921600 lock crtscts modem passive novj defaultroute noipdefault usepeerdns noauth hide-password persist holdoff 10 maxfail 0 debug The first line is the modem device (ttyUSB0 in the example) and it will be a permanent option while your hardware doesn't changes. You may want to modify some options (see man pppd). The proposed setup tries to keep the connection permanently established, reconnecting when necessary. /etc/ppp/peers Add these files: root@quark:/etc/ppp/peers# ll total 8 -rw-r----- 1 root root 141 Jun 20 19:29 mobile-auth -rw-r----- 1 root root 104 Jun 20 19:29 mobile-noauth lrwxrwxrwx 1 root root 13 Jun 20 19:30 provider -&gt; mobile-noauth The provider symlink defines the default peer for pppd, and as you see it points to the mobile-noauth file. It is possible to setup a different file with user/password for each carrier (with mobile-auth being a example) but it seems that this is not necessary (at least, not for Vodafone or Simyo in Spain). /etc/ppp/peers/mobile-auth file /etc/ppp/options-mobile user &quot;your_usr&quot; password &quot;your_pass&quot; connect &quot;/usr/sbin/chat -v -t15 -f /etc/ppp/chatscripts/mobile-modem.chat&quot; /etc/ppp/peers/mobile-noauth file /etc/ppp/options-mobile connect &quot;/usr/sbin/chat -v -t15 -f /etc/ppp/chatscripts/mobile-modem.chat&quot; /etc/ppp/chatscripts Since the chatscripts directory does not exists in Arch, manually create it to place a few new files there: root@quark:/etc/ppp/chatscripts# ll total 44 lrwxrwxrwx 1 root root 15 Jun 19 19:17 apn -&gt; apn.es.vodafone -rw-r--r-- 1 root root 37 Jun 19 16:27 apn.es.simyo -rw-r--r-- 1 root root 35 Jun 19 16:27 apn.es.vodafone -rw-r--r-- 1 root root 394 Jun 20 19:29 mobile-modem.chat lrwxrwxrwx 1 root root 12 Jun 19 18:59 mode -&gt; mode.3G-only -rw-r--r-- 1 root root 29 Jun 19 22:12 mode.3G-only -rw-r--r-- 1 root root 28 Jun 19 17:05 mode.3G-pref -rw-r--r-- 1 root root 29 Jun 19 17:05 mode.GPRS-only -rw-r--r-- 1 root root 28 Jun 19 17:06 mode.GPRS-pref -rw-r--r-- 1 root root 3 Jun 19 23:40 mode.NONE lrwxrwxrwx 1 root root 8 Jun 20 19:29 pin -&gt; pin.CODE -rw------- 1 root root 13 Jun 20 19:29 pin.CODE -rw-r--r-- 1 root root 3 Jun 19 23:37 pin.NONE The core script is mobile-modem.chat, which dialogues with the modem and properly inserts another tiny scripts for selecting the APN, GPRS/3G and the PIN code. You probably won't need to modify it. This script is interpreted by the limited (but powerful enough) chat tool, included in the standard ppp package. With the proposed method, you'll keep a little personal file-based &quot;database&quot; of settings. If you exchange the SIM card, to select the new carrier you only need to update the apn symlink to point to the correct apn file and restart the ppp network (for example with killall -HUP pppd). The same for changing between 3G/GPRS forced modes (mode symlink). The other files consist in a single line, which in some cases you may need to modify in order to customize it. /etc/ppp/chatscripts/mobile-modem.chat ABORT 'BUSY' ABORT 'NO CARRIER' ABORT 'VOICE' ABORT 'NO DIALTONE' ABORT 'NO DIAL TONE' ABORT 'NO ANSWER' ABORT 'DELAYED' REPORT CONNECT TIMEOUT 6 '' 'ATQ0' 'OK-AT-OK' 'ATZ' TIMEOUT 3 'OK' @/etc/ppp/chatscripts/pin 'OK\d-AT-OK' 'ATI' 'OK' 'ATZ' 'OK' 'ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0' 'OK' @/etc/ppp/chatscripts/mode 'OK-AT-OK' @/etc/ppp/chatscripts/apn 'OK' 'ATDT*99***1#' TIMEOUT 30 CONNECT '' /etc/ppp/chatscripts/apn.es.vodafone AT+CGDCONT=1,&quot;IP&quot;,&quot;ac.vodafone.es&quot; /etc/ppp/chatscripts/apn.es.simyo AT+CGDCONT=1,&quot;IP&quot;,&quot;gprs-service.com&quot; /etc/ppp/chatscripts/apn.no.telenor AT+CGDCONT=1,&quot;IP&quot;,&quot;Telenor&quot; (of course, you'll have to create your own apn files, replacing &quot;ac.vodafone.es&quot; or &quot;gprs-service.com&quot; by your own APN strings on them). For Telenor, use your mobile phone number (without country code) for both user and password in /etc/ppp/peers/mobile-noauth. /etc/ppp/chatscripts/pin.CODE AT+CPIN=1234 /etc/ppp/chatscripts/pin.NONE AT If your SIM card has the PIN code disabled, you should symlink pin to pin.NONE to avoid sending it. When a SIM card has the PIN code enabled, it is only required to be sent the first time after power on. There is a modem command to query about this, but since I didn't find a reliable way to use it in the chat script, the PIN, when enabled, is always sent. This has no drawbacks, other than a little additional delay also due to the chat script limitations while recovering from the modem error response (if the PIN was no longer required). /etc/ppp/chatscripts/mode.3G-only AT\^SYSCFG=14,2,3fffffff,0,1 /etc/ppp/chatscripts/mode.3G-pref AT\^SYSCFG=2,2,3fffffff,0,1 /etc/ppp/chatscripts/mode.GPRS-only AT\^SYSCFG=13,1,3fffffff,0,0 /etc/ppp/chatscripts/mode.GPRS-pref AT\^SYSCFG=2,1,3fffffff,0,0 /etc/ppp/chatscripts/mode.NONE AT The SYSCFG line in the mode.* files is device-dependent, and likely Huawei-specific. It does not works in Nokia phones (you may symlink mode to mode.NONE, which only sends the AT command with no effect). I had to investigate before achieving success with both EM770 and E220 modems. Despite many forums reporting a &quot;4&quot; trailing code, it seems that the trailing 0/1 number, while optional in E220, becomes mandatory in EM770 for truly switching the mode. At the end of this guide there are explained the available options for this command. As previously said, you may simply link to mode.NONE and use your modem defaults in case of problems. Start the pppd To start the pppd daemon, either run pon/poff or /etc/rc.d/ppp start|stop. In Arch this can be automated to occur at system boot by adding &quot;@ppp&quot; after &quot;network&quot; in the DAEMONS line of /etc/rc.conf (the &quot;@&quot; places it in background, since pppd start may be a bit slow). The log is stored in /var/log/messages. With the above proposed setup, while the new ppp0 interface is up, pppd will automatically set your default route (if none previously existing) as well as the /etc/resolv.conf contents. It seems very reliable handling DNS switchings (the backup is kept in resolv.conf.backup.ppp0, but I never had to manually restore it, even after a power failure). Patch for modem availability after booting If you automate the pppd start, it may occur that the modem device does not exists at the moment of the pppd lauch during the computer boot. This may occur even when the USB modem module load is manually setup in rc.conf: that helps, but the device may be still not always available when pppd comes into scene. The pppd daemon rejects to start when the configured device does not exists, and it doesn't seems to have an option to force it to start (note that in case the device dissapears once pppd is already running, for example by momentarily disconnecting the external 3G USB modem, pppd will continue running and will reconnect once it appears again). The following script may be useful to wait until the hardware is ready. It will typically wait for 0-2 seconds. The modem device is assumed to be the first line on /etc/ppp/options-mobile. It takes an argument with the maximum wait (in seconds). Optionally admits a second argument with a profile name (from /etc/ppp/peers) which will be used to re-run pppd. Do not forget to make the script executable: /etc/ppp/wait-dialup-hardware #!/bin/bash INTERFACE=&quot;/dev/$(head -1 /etc/ppp/options-mobile)&quot; MAX_SECONDS_TIMEOUT=$1 PEER_NAME=$2 dsec=$((${MAX_SECONDS_TIMEOUT} * 10)) for ((retry=0; retry &lt; ${dsec}; retry++)) do if [ -c ${INTERFACE} ]; then logger &quot;$0: OK existing required device ${INTERFACE} (in $((retry / 10)).$((100 * (retry % 10) / 10)) seconds)&quot; break else sleep 0.1 fi done if [ ! -c ${INTERFACE} ]; then logger &quot;$0: ERROR timeout waiting for required device ${INTERFACE}&quot; exit 1 fi if [ ! -z &quot;${PEER_NAME}&quot; ]; then logger &quot;$0: starting pppd for ${PEER_NAME}&quot; setsid nohup pon &quot;${PEER_NAME}&quot; &gt; /dev/null 2&gt;&amp;1 &lt; /dev/null &amp; fi exit 0 The script will add a line to /var/log/messages: Jun 1 22:52:08 parsec logger: /etc/ppp/wait-dialup-hardware: OK existing required device /dev/ttyUSB0 (in 1.25 seconds) netcfg hook To use the above script, netcfg users could add the following profile: /etc/network.d/ppp CONNECTION='ppp' INTERFACE='ignore' PEER='mobile-noauth' PPP_TIMEOUT=30 PRE_UP='/etc/ppp/wait-dialup-hardware 10' network hook Users of traditional network setup (instead of netcfg) can use the following trick to launch the wait-dialup-hardware script from the standard /etc/rc.d/ppp service. The example is intended to run the mobile-noauth profile: /etc/ppp/peers/mobile-noauth.wait noauth pty &quot;/etc/ppp/wait-dialup-hardware 10 mobile-noauth&quot; Updating the default provider symlink to point to the new intermediate (fake) mobile-noauth.wait profile, it will simply run the wait-dialup-hardware script from within pppd and, in turn, will restart pppd with the final (non fake) mobile-noauth profile once the hardware is ready. Note that the noauth option in the first line of the fake profile is necessary (even if the final profile does requires authentication). Troubleshooting In case of using a wrong PIN, my modem consistently rejects the APN setting phase (no error in the steps before). This is how /var/log/messages looks like: Jun 20 00:17:30 quark chat[3348]: send (AT+CGDCONT=1,&quot;IP&quot;,&quot;ac.vodafone.es&quot;^M) Jun 20 00:17:31 quark chat[3348]: expect (OK) Jun 20 00:17:31 quark chat[3348]: ^M Jun 20 00:17:31 quark chat[3348]: AT+CGDCONT=1,&quot;IP&quot;,&quot;ac.vodafone.es&quot;^M^M Jun 20 00:17:31 quark chat[3348]: ERROR^M Jun 20 00:17:34 quark chat[3348]: alarm Jun 20 00:17:34 quark chat[3348]: Failed It would be a long story, but I'll simply abbreviate it: if you have just set or changed the PIN in a phone, please reboot the phone and try it in the phone before placing the SIM card in the modem (I'm not sure if the PIN updates take effect just at the moment they are done in the phone menus). In case of frequent manual pppd restarts, as for example when testing configuration options, the EM770 (firmware upgraded to 11.104.16.12.00) sometimes becomes confused. Despite it responds to the AT commands, it gets stuck in a &quot;NO CARRIER&quot; reply (while the 3G network is ok, as a mobile phone may report). This not occurs with the proposed scripts (in case of connection lost, they wait enough time before retrying). With the modem stuck, powering OFF and then ON the computer solves the problem. This is perhaps a firmware bug. Also, when using a PIN, this modem returns a NO CARRIER reply in the first connection try (it seems that a huge wait after setting the PIN helps; anyway the same effect is achieved by the ordinary connection retry). While running, the EM770 is stable, but the E220 or the Nokia phones are far more reliable in the connection phase. Your mileage may vary depending on your hardware. At least for Huawei E870 issuing AT+CFUN=1,1 (meaning restart and go to online mode) seems to fix being stuck with no NO CARRIER without having to reboot. This might be related to network registration being done after restart. You can check AT+COPS? to see if you are actually registered but note you also want a service state of 2 (meaning &quot;valid service&quot; - this is automatically reported by the card as ^SRVST:X on the second ttyUSB) otherwise trying to dial out is hopeless. In the rare case of the card becoming completely stuck (doesnt respond to AT commands anymore) this can be fixed by using pccardctl (pccardctl eject [slot-number]; pccardctl insert [slot-number]). Of course this only works for pcmcia cards but maybe there is a similar trick for USB dongles. AT^SYSCFG Huawei command reference To see the supported values, you can query your own modem sending the &quot;AT^SYSCFG=?&quot; command. AT^SYSCFG=$mode,$acqOrder,$band,$roam,$srvDomain $mode 2=Auto-Select 13=GSM only 14=WCDMA only 16=no Change $acqOrder 0=Automatic 1=GSM prefered 2=WCDMA prefered 3=no Change $band 3fffffff = All other (query list with &quot;AT^SYSCFG=?&quot;) $roam 0=Not Supported 1=Supported 2=no Change $srvDomain 0=Circuit-Switched only 1=Packet-Switched only 2=Circuit- &amp; Packet-Switched 3=Any 4=no Change AT^SYSCFG=? command output on Huawei EM770: ^SYSCFG:(2,13,14,16),(0-3),((80000,&quot;GSM850&quot;),(200000,&quot;GSM1900&quot;),(400380,&quot;GSM900/GSM1800/WCDMA2100&quot;),(4a80000,&quot;GSM850/GSM1900/WCDMA850/WCDMA1900&quot;),(3fffffff,&quot;All Bands&quot;)),(0-2),(0-4) Huawei unsolicited report command reference These appear on the second ttyUSB. ^SRVST Reports the type of service the network your currently registered to is providing (it seems normal to first report 1 and then switch to 2). Depending on the device there might be more types. 0=No service 1=Restricted service 2=Valid service ^MODE Reports the mode you are currently transmitting in. Depending on the device there might be more modes. Note: It seems normal for the device to only go to 5,5/5,6/5,7 when transmitting and fall back to 5,4 when idle. 0,0=No service 3,1=GSM 3,2=GPRS 3,3=EDGE 5,4=WCDMA 5,5=HSDPA 5,6=HSUPA 5,7=HSDPA+HSUPA ^RSSI Reports strength of the mobile signal in form of $rssi,[$ber]. This info can also be optained by issuing AT+CSQ but unless you are registered to a network it seems this just returns the value for the strongest network whenever you are able to use it or not. To give some meaning to this you can convert it to percent by RSSI / 31 * 100. RSSI of 3/4 (about 10% reception) seems to be the absolute minimum to get a (rather flaky) HDSPA connection. $rssi=0-31 (-113dBm + $rssi * 2) or 99 (unknown or not measurable) $ber=Bit-error-rate (only returned by AT+CSQ - always 99?) Automatic PPP For the Nokia CS-15, create (or add to) /etc/udev/rules.d/99-nokia.rules with this line: SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, ATTRS{idVendor}==&quot;0421&quot;, ATTRS{idProduct}==&quot;0612&quot;, DEVPATH==&quot;*/ttyACM0&quot;, RUN+=&quot;pon&quot; and it will connect ppp as soon as you plug in the device. You can probably do something similar for the other modems. Operator selection Listing AT+COPS=? returns a list of all available networks in the format of $state,$longname,$shortname,$id,$tech. $state 0=unknown 1=available 2=current 3=forbidden $longname long alphanumeric operator name $shortname short alphanumeric operator name $id numeric operator id $tech 0=GSM (at best you get EDGE here) 2=UTRAN (supports WCDMA/HSDPA/HSUPA) 7=EUTRAN (?) Manual selection You can lock the device to only connect to a specific operator by issuing AT+COPS=1,$format,$operator command. Note: Even the numeric id needs to be quoted. $format 0=long alphanumeric operator name 1=short alphanumeric operator name 2=numeric operator id $operator operator name/id as specfied by $format Automatic selection To let the device decide which operator to use issue AT+COPS=0 command. Related Articles Dialup without a dialer HOWTO Huawei E220 USB 3G Modem Retrieved from &quot;https://wiki.archlinux.org/index.php?title=3G_and_GPRS_modems_with_pppd&amp;oldid=394812&quot; Category: Modems Hidden category: Pages with broken package links Navigation menu Views Page Discussion View source History Personal tools Log in Navigation Main page Categories Getting involved Wiki news Random page Search interaction Help Contributing Recent changes Recent talks New pages Statistics Reports Requests Tools What links here Related changes Special pages Printable version Permanent link Page information In other languages Русский This page was last modified on 29 August 2015, at 14:03. Content is available under GNU Free Documentation License 1.3 or later unless otherwise noted. Privacy policy About ArchWiki Disclaimers "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622212230#index"
                   NS1:content=" Contact Us Subscribe Follow Like open culture The best free cultural &amp; educational media on the web Audio Books Online Courses Certificate Courses/MOOCs Movies Languages Textbooks eBooks K-12 700 Free Audio Books: Download Great Books for Free 53.8k SHARES FacebookTwitterGoogle RedditMailTumblrStumbleuponDiggPinterestPrintLinkedinWhatsappDeliciousBufferPocket Advertisement Get a FREE Audio Book from Audible.com and Audiobooks.com Download hundreds of free audio books, mostly classics, to your MP3 player or computer. Below, you’ll find great works of fiction, poetry and non-fiction, by such authors as Twain, Tolstoy, Hemingway, Orwell, Vonnegut, Nietzsche, Austen, Shakespeare, Asimov, HG Wells &amp; more. Also please see our related collection: 800 Free eBooks for iPad, Kindle &amp; Other Devices. Fiction &amp; Literature Aesop – Aesop’s Fables – Free iTunes – Free MP3 – FREE from Audible.com Anderson, Sherwood – Winesburg, Ohio – Free iTunes – Free MP3 Aristophanes – Lysistrata – Free iTunes – Free MP3 Zip File Asimov, Isaac – “Nightfall” – Free MP3 – FREE from Audible.com Asimov, Isaac – Radio Dramas of The Foundation Trilogy &amp; 7 Classic Stories – Free Stream Asimov, Isaac – “The Last Question” (readings by Isaac Asimov &amp; Leonard Nimoy) – Free YouTube Audio Asimov, Isaac – “Youth” – Free MP3 – Free iTunes Austen, Jane – Emma – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Austen, Jane – Lady Susan – Free iTunes – Free MP3 – Free Zip File Austen, Jane – Love and Friendship – Free Zip File – Free MP3 Stream Austen, Jane – Mansfield Park – Free iTunes – Free MP3 Stream Free eBook available here. Austen, Jane – Northanger Abbey – Free iTunes – Free MP3 – FREE from Audible.com Austen, Jane – Persuasion – Free iTunes – Free MP3 Free eBook available here. Austen, Jane – Pride and Prejudice – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Austen, Jane – Pride and Prejudice (alternative version) – Spotify Austen, Jane – Sense and Sensibility – Free iTunes – Free MP3 Stream – Free MP3 Zip File Free eBook available here. Auster, Paul – Free Stream – “Auggie Wren’s Christmas Story” Auster, Paul – Free MP3 – The Red Notebook (read by the author) Babel, Isaac – Free MP3 – “The Story of the Dovecote” (read by Nathan Englander) – Free MP3 Babel, Isaac – “You Must Know Everything” – Free MP3 Baldwin, James – The Story of Siegfried – Free iTunes – Free MP3 Baldwin, James – Fifty Famous Stories Retold – Free MP3 Stream/Download Ballard, JG – “A Place and A Time to Die” (Dramatized version) – Free MP3 Stream Ballard, JG – Cocaine Nights – Free Stream Ballard, JG – “My Dream of Flying to Wake Island” (read by William Boyd) – Free MP3 Ballard, JG – The Drowned World – Free Stream Ballard, JG – “The Stories of JG Ballard” (dramatized for radio) – Free Stream Balzac, Honoré de – La Comédie Humaine (French) – Free Downloads Balzac, Honoré de – Le Père Goriot – Free Stream/Download Balzac, Honoré de – The Peasant Story of Napoleon – Free MP3 Barrie, JM – Peter Pan – Free iTunes – Free MP3 Barrodale, Amie – “William Wei” (read by James Franco) – Free MP3 Barthelme, Donald – “Chablis” (read by Etgar Keret) – Free Stream Barthelme, Donald – “Concerning the Bodyguard” (read by Salman Rushdie) – Free MP3 Barthelme, Donald – “Game” and “School” (read by T.C. Boyle) – Free MP3 Baum, Frank L. – The Wizard of Oz (Vol 1) – Free iTunes – Free MP3 Baum, Frank L. – The Marvelous Land of Oz (Vol 2) – Free iTunes – Free MP3 Baum, Frank L. – Ozma of Oz (Vol 3) – Free iTunes – Free MP3 Baum, Frank L. – Dorothy and the Wizard of Oz (Vol 4) – Free iTunes – Free MP3s Baum, Frank L. – The Road to Oz (Vol 5) – Free iTunes – Free MP3 Baum, Frank L. – The Emerald City of Oz (Vol 6) – Free iTunes – Free MP3s Baum, Frank L. – The Patchwork Girl of Oz (Vol 7) – Free iTunes – Free MP3s Baum, Frank L. – Tik Tok of Oz (Vol 8) – Free iTunes – Free MP3 Baum, L. Frank – The Scarecrow of Oz (Vol 9) – Free iTunes – Free MP3 Baum, L. Frank – Rinkitink in Oz (Vol 10) – Free MP3 Baum, L. Frank – The Lost Princess of Oz (Vol 11) – Free iTunes – Free MP3 Baum, Frank L. – The Tin Woodman of Oz (Vol 12) – Free iTunes – Free MP3 Baum, Frank L. – The Magic of Oz (Vol 13) – Free MP3 Baum, Frank L. – Glinda of Oz (Vol 14) – Free MP3 Beckett, Samuel – The Complete Short Prose, 1929-1989 – Free Audio Stream Beckett, Samuel – Waiting for Godot (Live Reading) – Real Player Beckett, Samuel – Waiting for Godot (Theatrical performance with Bert Lahr) – Spotify Borges, Jorge Luis – ‘On Exactitude in Science’ – Free MP3/Stream Borges, Jorge Luis – Shakespeare’s Memory – Free MP3 – Free iTunes Borges, Jorge Luis – The Gospel According to Mark (read by Paul Theroux) – Free MP3 Bradbury, Ray – Futuria Fantasia – Free iTunes – Free Stream – Background info Bradbury, Ray – All Summer in a Day – Free Stream/MP3 Bradbury, Ray – The Golden Apples of the Sun – Free Stream/MP3 Bradbury, Ray – The Pedestrian – YouTube Bradbury, Ray – The Veldt (Read by Stephen Colbert) – YouTube Bradbury, Ray – There Will Come Soft Rain (read by Burgess Meredith) – YouTube Bradbury, Ray – Stories The Martian Chronicles &amp; The Illustrated Man Read by Leonard Nimoy – YouTube Bradbury, Ray – Radio Dramas of Bradbury Stories – Free Stream Brodkey, Harold – “Dumbness is Everything” (read by Michael Cunningham) – Free Stream Brodkey, Harold – “Spring Fugue” (read by Jeffrey Eugenides) – Free MP3 Brodkey, Harold – “The State of Grace” (read by Richard Ford ) – Free Stream Bronte, Anne – Agnes Grey – Free iTunes Bronte, Charlotte – Jane Eyre – Free iTunes – Free MP3 – Another Free MP3 Free eBook available here. Bronte, Charlotte – The Professor – Free iTunes – Free MP3 – FREE from Audible.com Bronte, Emily – Wuthering Heights – Free MP3 – Free MP3 Zip File Free eBook available here. Brown, Margaret Wise – Good Night Moon (Read by Susan Sarandon) – YouTube Burroughs, William S. – Call Me Burroughs (his first spoken word album) – Spotify Burroughs, William S. – “Ghosts of Chance” – YouTube Burroughs, William S. – Junky – MP3s Burroughs, William S. – The Best of William Burroughs, Spare Ass Annie and Other Tales, Dead City Radio, Break Through in Grey Room, and Call Me Burroughs – Spotify Burroughs, William S. – “Thanksgiving Prayer” – YouTube Calvino, Italo – Invisible Cities (excerpts read by Calvino) – Free Stream Calvino, Italo – The Night (read by Jeanette Winterson) – Free MP3 Calvino, Italo – “The Daughters of the Moon” – Free Stream Carroll, Lewis – Alice’s Adventures in Wonderland – Free iTunes – Free MP3s – FREE from Audible.com Carroll, Lewis – Alice’s Adventures in Wonderland (read by Cory Doctorow) – Multiple formats Carroll, Lewis – Alice’s Adventures in Wonderland (read by Sir John Gielgud) – Stream/Spotify Carroll, Lewis – Sylvie and Bruno – Free MP3 – Free MP3 – Free iTunes Carroll, Lewis – Sylvie and Bruno Concluded – Free MP3 – Free iTunes Carroll, Lewis – The Game of Logic – Free iTunes Carroll, Lewis – Through the Looking Glass – Free iTunes – Free MP3 Carver, Raymond – “Chef’s House” (read by David Means) – Free MP3 Carver, Raymond – “Fat” (read by Anne Enright) – Free MP3 Carver, Raymond – “The Students’ Wife (read by Richard Ford) – Free MP3 Carver, Raymond – “What We Talk About When We Talk About Love” (Read by Carver) – Free MP3 Cervantes Saavedra, Miguel de – Don Quixote – Free MP3 Zip File – FREE from Audible.com Free eBook available here Chabon, Michael – “S. Angel” – Free Stream Chaucer, Geoffrey – Canterbury Tales – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Cheever, John – “The Death of Justina” (read by John Cheever) – Free Stream/Download Cheever, John ” The Enormous Radio” (read by Nathan Englander) – Free Stream Cheever, John – “The Reunion” (read by Richard Ford) – Free MP3 Cheever, John – “The Swimmer” (read by Anne Enright) – Free MP3 Cheever, John – “The Swimmer” (read by Cheever) – Free Stream/Download Chekhov, Anton – Collected Stories – Free MP3 Stream/Download Chekhov, Anton – “The Beauties” (read by Philip Pullman) – Free MP3 Chesterton, G.K. – The Man Who Was Thursday – Free iTunes – FREE from Audible.com Chekhov, Anton – Collected Stories – Free multiple formats – FREE from Audible.com Chekhov, Anton – “The First Class Passenger,” “Harmfulness of Tobacco” and “A Transgression” (Read by Michale Redgrave) – Spotify Chabon, Michael – “S Angel” (read by author) – Free Stream/Download Chopin, Kate – The Awakening – Free iTunes – FREE from Audible.com Free eBook available here. Chopin, Kate – Selected Stories – Multiple Formats Christian Andersen, Hans – Tales of Hans Christian Andersen, including The Emperor’s New Clothes, read by Sir Michael Redgrave – Free Spotify Christian Andersen, Hans – Andersen’s Fairy Tales – Free MP3 Christian Andersen, Hans – The Emperor’s New Clothes – Free iTunes – Free MP3 – FREE from Audible.com Clarke, Arthur C. – “A Walk in the Dark” (A dramatized version of the text) – Free MP3 Stream Clarke, Arthur C. – “Breaking Strain” – YouTube Clarke, Arthur C. – Childhood’s End (Excerpts read by the author) – YouTube Clarke, Arthur C. – “Hammer of God” – Free MP3 Clarke, Arthur C. – “The Nine Billion Names of God” and “The Star” – Free Stream/Download Clarke, Arthur C. – “The Star” (Read by the author) – YouTube Conan Doyle, Arthur – Beyond the City – Free MP3 Conan Doyle, Arthur – The Adventures of Sherlock Holmes – Free iTunes – Free MP3 – Free MP3 Zip File Free eBook available here. Conan Doyle, Arthur – The Memoirs of Sherlock Holmes – Free iTunes – Free MP3s Conan Doyle, Arthur – The Mystery of Cloomber – Free MP3 Conan Doyle, Arthur – The Return of Sherlock Holmes – Free iTunes – Free MP3s Conan Doyle, Arthur – The Speckled Band – Free iTunes Conrad, Joseph – Heart of Darkness – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Conrad, Joseph – Heart of Darkness (Orson Welles’ radio drama from 1938) – YouTube Conrad, Joseph – Lord Jim – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Conrad, Joseph – The Secret Agent – Free iTunes – Free MP3 – Free MP3 Zip File Conrad, Joseph – The Secret Sharer – Free MP3 Conrad, Joseph – The Secret Sharer – YouTube Cooper, James Fenimore – Jack Tier, or the Florida Reef – Free MP3 Cooper, James Fenimore – The Last of the Mohicans – Free iTunes – Free MP3– Free MP3 Zip File Crane, Stephen – The Open Boat – Free MP3 – Free iTunes Crane, Stephen – The Red Badge of Courage – Free iTunes – Free MP3 – Alternate MP3 Free eBook available here. Dante Alighieri – The Divine Comedy (English) – Free iTunes – Free MP3 Free eBook available here. Dante Alighieri – The Divine Comedy (Italian) – Free Stream from Princeton University Dante Alighieri – Divina Commedia (Full reading in Italian) – Free Stream/MP3 Dante Alighieri – The Inferno, Cantos I-VIII (Read by John Ciardi) – Spotify Danticat, Edwidge – Water Child (read by Junot Diaz) – Free MP3 – Free iTunes Defoe, Daniel – Robinson Crusoe – Free iTunes – Free MP3 – Free MP3 Zip file Free eBook available here. Defoe, Daniel – Robinson Crusoe (alternate version read by Nigel Graham) – Spotify DeLillo’s, Don – “Baader-Meinhof” (read by Chang-rae Lee) – MP3 Diaz, Junot – “Alma” (read by Victor Rasuk) – YouTube Diaz, Junot – “How to Date a Brown Girl (Black Girl, White Girl, or Halfie)” – Free MP3 Dick, Philip K. – “Beyond Lies the Wub” – Free MP3 Dick, Philip K. – “Mr. Spaceship” – Free iTunes – Free Stream &amp; Download Dick, Philip K. – “Second Variety” – Free MP3 Zip File – Free iTunes Dick, Philip K. – “The Crystal Crypt” &amp; “Beyond the Door” – Free iTunes – Free Stream Dick, Philip K. – “The Defenders” – Free MP3 Dick, Philip K. – “The Eyes Have It” – Free MP3 Dick, Philip K. – “The Gun” – YouTube Dick, Philip K. – “The Hanging Stranger” – Free MP3 Dick, Philip K. – “The Skull” – Free iTunes – Free MP3 Dick, Philip K – “The Variable Man” – Free Stream – Free iTunes – Free MP3 Zip File Dick, Philip K – “Tony and the Beetles” – MP3 Part 1 – MP3 Part II Dick, Philip K – Radio Plays – Stream Dickens, Charles – A Christmas Carol – Free iTunes – Free MP3s – Free MP3 Zip File Dickens, Charles – A Christmas Carol (Read by Neil Gaiman) – Free Stream Dickens, Charles – A Tale of Two Cities – Free iTunes – Free MP3s – Free MP3 Zip File Free eBook available here. Dickens, Charles – Bleak House – Free iTunes – Free MP3 Zip File Free eBook available here. Dickens, Charles – Christmas Stories – Free MP3s Dickens, Charles – David Copperfield – Free iTunes – Free MP3s – Free MP3s Free eBook available here. Dickens, Charles – Great Expectations – Free iTunes – Free MP3s – Free MP3 Zip File Free eBook available here. Dickens, Charles – Hard Times – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Dickens, Charles – Oliver Twist – Free iTunes – Free MP3s – FREE from Audible.com Free eBook available here. Dickens, Charles – “The Christmas Tree” (Read by Simon Callow) – Free MP3 Dodge, Mary Mapes – Hans Brinker – Free iTunes – Free MP3 Zip File – FREE from Audible.com Dostoyevsky, Fyodor – Crime and Punishment – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Dostoyevsky, Fyodor – Notes from the Underground – Free MP3 Dostoyevsky, Fyodor – The Brothers Karamazov – Free iTunes – Free Stream – Free MP3 Zip File Free eBook available here. Dostoyevsky, Fyodor – The Dream of a Ridiculous Man – Free Stream/Download Dostoyevsky, Fyodor – The Gambler – Free MP3 Zip File – Free Stream Dostoyevsky, Fyodor – The Grand Inquisitor (dramatic reading) – Free Stream – Free MP3 Zip Dostoyevsky, Fyodor – The Idiot – Free MP3 Zip File – Free Stream Dostoyevsky, Fyodor – The Possessed – Free MP3 Doyle, Roddy – “Bullfighting” (Read by Dave Eggers) – Free MP3 Dreiser, Theodore – Sister Carrie – Free MP3 – FREE from Audible.com Free eBook available here. Dreiser, Theodore – The Lost Phoebe – Free iTunes – FREE from Audible.com Dumas, Alexandre – The Comte de Monte Cristo – Free iTunes – Free MP3s – Free MP3 Zip File Free eBook available here. Dumas, Alexandre – The Three Musketeers – Free iTunes – Free Stream – Free MP3 Zip File Free eBook available here. Eliot, George – Silas Marner – Free MP3 – FREE from Audible.com Free eBook available here. Eliot, George – Middlemarch – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Faulkner, William – “Shingles for the Lord” – Free Stream Faulkner, William – Faulkner Reads Faulkner – Free Stream Fitzgerald, F. Scott – Bernice Bobs Her Hair – Free iTunes – Free MP3s/Stream Fitzgerald, F. Scott – Flappers and Philosophers – Free iTunes – Free MP3s Fitzgerald, F. Scott – Tales of the Jazz Age – Free iTunes – Free MP3s Fitzgerald, F. Scott – The Beautiful and Damned – Free iTunes – Free MP3s/Stream Fitzgerald, F. Scott – The Curious Case of Benjamin Button – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Fitzgerald, F. Scott – The Great Gatsby – Free Stream Fitzgerald, F. Scott – This Side of Paradise – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Flaubert, Gustave – Madame Bovary – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Flaubert, Gustave – Three Short Works Free iTunes – Free MP3 Zip File – Free Stream Forster, E.M. – A Room with a View – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Forster, E. M. – Howards End – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Forster, E.M. – “The Machine Stops” – Free iTunes Gaiman, Neil – Coraline – Video Gaiman, Neil – “A Study in Emerald” – Free iTunes Gaiman, Neil – “How to Talk to Other Girls at Parties” – Free MP3 Gaiman, Neil – “Orange” (read live) – Free Video Gaiman, Neil – “Other People” (read by Neil Gaiman) – Free Video Gaiman, Neil – The Graveyard Book (read by Neil Gaiman) – Free Video Gaiman, Neil – “Troll Bridge” (read live, starts at 4:00 mark) – Free iTunes Gaiman, Neil – “The Man Who Forgot Ray Bradbury” (read by Neil Gaiman) – Free Stream Gaiman, Neil – “The Truth Is a Cave in the Black Mountains” – Free MP3 Gaitskill, Mary – “The Other Place” (read by Jennifer Egan) – Free MP3 Geng, Veronica – “Love Trouble Is My Business” (read by Jonathan Franzen) – Free MP3 Gogol, Nikolai – Dead Souls – Free iTunes – Free MP3 Zip File Free eBook available here. Gogol, Nikolai – “The Nose” – Free MP3 Gogol, Nikolai – The Overcoat and Other Short Stories – Free MP3 Zip File – FREE from Audible.com Gordimer, Nadine – “A Style of Her Own” and “The Bridegroom” (read by the author, 1961) – Free Stream/Download Gordimer, Nadine – “City Lovers” – Free MP3 Gordimer, Nadine – “Loot” (read by author) – YouTube Grahame, Kenneth – The Reluctant Dragon (read by Boris Karloff) – YouTube Hawthorne, Nathaniel – House of the Seven Gables – Free MP3s Free eBook available here. Hawthorne, Nathaniel – Rappaccini’s Daughter – Free iTunes Hawthorne, Nathaniel – The Scarlet Letter – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Hayden, Julie – “Day-Old Baby Rats” (read by Lorrie Moore) Free MP3 Heinlein, Robert – Methuselah’s Children (abridged) – Free Stream/MP3 Hemingway, Ernest – Ernest Hemingway Reads Ernest Hemingway – Free Stream Hemingway, Ernest – Homage to Switzerland (read by Julian Barnes) – Free MP3 Hemingway, Ernest – “In Harry’s Bar in Venice” (a short story read by Hemingway: .au format, .gsm format, .ra format) Hemingway, Ernest – “The Snows of Kilimanjaro” (read by Charleston Heston) – Part 1 – Part 2 – Part 3 – Part 4 Hesse, Hermann – Siddhartha – Free MP3 – Spotify Homer, The Iliad (Based on Samuel Butler Translation) – Free MP3 Zip File Free eBook available here. Homer, The Odyssey (Based on Samuel Butler Translation) – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Hughes, Langston – “Simple on Indian Blood”(read by Ossie Davis) – Free Stream Hughes, Langston – “A Toast to Harlem” (read by Ossie Davis) – Free Stream Hughes, Langston – “Last Whipping” (read by Ossie Davis) – Free Stream Hughes, Langston – “Feet Live Their Own Life” (read by Ossie Davis) – Free Stream Hugo, Victor – Les Misérables Vol. 1 – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Hugo, Victor – Les Misérables – Radio drama narrated by Orson Welles – Multiple formats Hugo, Victor – The Hunchback of Notre Dame – Free MP3 – Free iTunes Free eBook available here. Hugo, Victor – The Hunchback of Notre Dame (Abridged version read by Christopher Lee) – Spotify Huxley, Aldous – Brave New World (Dramatized version read by Huxley) – Free MP3s Huxley, Aldous – Crome Yellow – Free iTunes – Free MP3 Zip File Irving, Washington – Rip Van Winkle – Free MP3 Irving, Washington – The Legend of Sleepy Hollow – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. James, Henry – Daisy Miller – Free iTunes – Free MP3 Zip File – FREE from Audible.com James, Henry – “Greville Fane” (read by Cynthia Ozick) – Free Stream/Download James, Henry – The Turn of the Screw – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Johnson, Denis – “Emergency” (read by Tobias Wolff) MP3 Joyce, James – A Portrait of the Artist as a Young Man – Free iTunes – Free MP3 Zip File – Free Stream Free eBook available here. Joyce, James – Chamber Music – Free iTunes – Free Stream Joyce, James – Dubliners – Free iTunes – Free MP3 Zip File – Free Stream – Free on Spotify Joyce, James – “Eveline” (read by Sebastian Barry) – Free MP3 Joyce, James – Finnegans Wake – Free Stream Joyce, James – “The Dead” – Free MP3 Zip File – FREE from Audible.com Joyce, James – “The Dead” (Read by Cynthia Nixon &amp; Colum McCann) – Free Stream Joyce, James – “The Dead” (Read by Bart Wolffe) – Spotify Joyce, James – Ulysses – Free Stream Various Formats – FREE from Audible.com Free eBook available here. July, Miranda – “Ron Spivey” (read by David Sedaris) – Free MP3 Kafka, Franz – “A Little Fable” (Read by David Foster Wallace) – Free Stream Kafka, Franz – “A Hunger Artist” (read by Hanif Kureishi) – Free MP3 Kafka, Franz – “Before the Law” – Free MP3 Kafka, Franz – “In the Penal Colony – Free MP3 Kafka, Franz – The Metamorphosis – Free iTunes – Free MP3 – Free Stream – Spotify Free eBook available here. Kerouac, Burroughs, Ginsberg, etc — 18 Hours of Beat Readings — Spotify Kincaid, Jamaica – “Figures in the Distance” (read by Chimamanda Ngozi Adichie) – Free MP3 Kincaid, Jamaica – “Girl” and “Wingless” (read by Edwidge Danticat) – Free Stream King, Stephen – “Afterlife” – YouTube Kipling, Rudyard – Kim – Free iTunes Kipling, Rudyard – Just So Stories for Little Children – Free iTunes – Free MP3/Stream Kipling, Rudyard – Rikki-Tikki-Tavi – Free MP3 – FREE from Audible.com Kipling, Rudyard – “The Elephant’s Child” – Free MP3 – FREE from Audible.com Kipling, Rudyard – The Jungle Story – Free MP3 Zip File L’Heureux, John – “Three Short Moments in a Long Life” – Free MP3 Stream Lawrence, D.H. – Everlasting Flowers – Free MP3 Zip File – FREE from Audible.com Lawrence, D.H. – A Woman and Her Dead Husband – Free MP3 Le Guin, Ursula – “The End” (Dramatized version) – Free MP3 Stream Leroux, Gaston – The Phantom of the Opera (abridged) – Spotify Lewis, C.S. – The Chronicles of Narnia – Free MP3s The Lion, the Witch and the Wardrobe Prince Caspian: The Return to Narnia The Voyage of the Dawn Treader The Silver Chair The Horse and His Boy The Magician’s Nephew The Last Battle Lewis, C.S. – Spirits in Bondage – Free iTunes – Free MP3s Lewis, C.S. – The Screwtape Letters (narrated by John Cleese) – YouTube Lewis, Sinclair – Babbit – Free iTunes – Free MP3s Free eBook available here. Lewis, Sinclair – Main Street – Free MP3s – Free iTunes London, Jack – Call of the Wild – Free iTunes – Free MP3s – FREE from Audible.com Free eBook available here. London, Jack – The Heathen – Free MP3 – FREE from Audible.com London, Jack -To Build a Fire – Free MP3 London, Jack – White Fang – Free iTunes – Free MP3 Zip File Longfellow, Henry Wadsworth – Selected Works – Free iTunes – Free MP3 Lovecraft, H.P. – The Call of of Cthulhu (Read by Garrick Hagan) – Free YouTube – Free Stream Part 1 – Free Stream Part 2 Lovecraft, H.P – The Call of of Cthulhu &amp; Other Stories – Spotify Lovecraft, H.P. – The Collected Public Domain Works of H. P. Lovecraft – Free Mp3 Zip File – Free Stream Lucretius – On the Nature of Things – Free MP3 Zip File – Free iTunes Lu Xun – A Madman’s Diary and Other Stories – Free MP3 Zip File Mann, Thomas – Death in Venice – Free MP3s/Download McCabe, Eugene – Annahullian (read by Colm Tóibín) – Free MP3 McCann, Colum – “Transatlantic” (read by author) – Free MP3 McEwan, Ian – “My Purple Scented Novel” (read by the author) – Free Stream Melville, Herman – Moby-Dick – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Melville, Herman – Moby-Dick read by Celebrities (Benedict Cumberbatch, John Waters, Stephen Fry, Tilda Swinton &amp; More) – Free iTunes – Soundcloud – Big Read – More details Melville, Herman – Moby-Dick read by Other Celebrities – SoundCloud Melville, Herman – Typee – Free iTunes – Free MP3 Zip File Miller, Arthur – Readings from The Crucible and Death of a Salesman – Spotify Miller Jr, Walter M. – A Canticle for Leibowitz (Dramatized Version) – MP3s Milton, John – Paradise Lost – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Milton, John – Paradise Regained – Free MP3 Zip File – FREE from Audible.com Montgomery, Lucy Maud – Anne of Green Gables – Free iTunes – Free MP3s Moore, Lorrie – “Paper Losses” (read by Gary Shteyngart) – Free Stream Munro, Alice – “Axis” – Free MP3 Murakami, Haruki – “On Seeing the 100% Perfect Girl One Beautiful April Morning” – Free Stream Nabokov, Vladimir – My Russian Education (Read by Orhan Pamuk) – Free MP3 – Free iTunes Nabokov, Vladimir – “Pnin” – Free Stream Nabokov, Vladimir – Signs and Symbols – Free iTunes Nabokov, Vladimir – Vladimir Nabokov Reads from Lolita &amp; Selected Poems – Spotify Northup, Solomon – Twelve Years a Slave – Free iTunes – Free MP3 O’Connor, Flannery – “A Good Man is Hard to Find.” (Read by author in 1959) – Stream/Download O’Connor, Flannery – “Everything That Rises Must Converge” (Read by Estelle Parsons) – YouTube O’Connor, Flannery – “Revelation” (Read by Studs Terkel) – Stream O’Connor, Frank – “The Man of the World” (read by Julian Barnes) MP3 O Henry, The Gift of the Magi – Free iTunes – Free MP3 – FREE from Audible.com Oates, Joyce Carol – “Mastiff” (read by Louise Erdrich) – Free Stream Orwell, George – 1984 – Free Stream – Free MP3 Zip File – Multiple Versions – FREE from Audible.com Free eBook available here. Orwell, George – 1984 (Radio Drama from 1949 starting David Niven) – Free Stream Orwell, George – Animal Farm – Free Stream – Free MP3 Zip File Free eBook available here. Orwell, George – Animal Farm – Spotify version Orwell, George – Homage to Catalonia – Chapter 1 here – Remaining Chapters here Oz, Amos – “The King of Norway” (read by Jonathan Safran Foer) – Free Stream Ozick, Cynthia – “The Shawl” (read by Joyce Carol Oates) – Free Stream Paley, Grace – “Love” (read by George Saunders) – Free Stream Poe, Edgar Allan – 5 Hours of Edgar Allan Poe Stories Read by Vincent Price &amp; Basil Rathbone – Spotify Poe, Edgar Allan – The Complete Works Vol. 1 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 2 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 3 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 4 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 5 – Free iTunes – Free Stream/Download Poe, Edgar Allan – “The Masque of the Red Death” and Annabel Lee (read by William S. Burroughs) – Free YouTube Audio Poe, Edgar Allan – The Raven (as read by Christopher Walken) – Free YouTube Audio Poe, Edgar Allan – The Raven (as read by James Earl Jones) – Free YouTube Audio Poe, Edgar Allan – The Raven (as read by Christopher Lee) – Free YouTube Audio Poe, Edgar Allan – The Cask of Amontillado – Free MP3/Stream – FREE from Audible.com Poe, Edgar Allan – The Mask of the Red Death (read by William S. Burroughs) – Spotify Poe, Edgar Allan – The Pit and the Pendulum – Free MP3 Poe, Edgar Allan – The Raven – Free MP3 – FREE from Audible.com Poe, Edgar Allan – The Raven (read by Stan Lee) – YouTube Poe, Edgar Allan – The Raven (read by James Earl Jones) – YouTube Poe, Edgar Allan – The Raven (read by Christopher Lee) – YouTube Poe, Edgar Allan – The Raven (read by Christopher Walken) – YouTube Alternate version read by actor John de Lancie (video) Free eBook available here. Poe, Edgar Allan – The Tell Tale Heart – Free MP3 – FREE from Audible.com Poe, Edgar Allan – The Tell Tale Heart (read by Christopher Lee) – Free YouTube Audio Poe, Edgar Allan – The Tell Tale Heart (read by Iggy Pop) – Free YouTube Audio Porter, Eleanor – Pollyanna – Free MP3 Zip File Price, Vincent – The Price of Fear (Classic radio show featuring Vincent Price) – Free Stream Pritchett, V.S. – The Rescue (Read by Jonathan Lethem) – Free Stream Prokofiev, Sergei – Peter and the Wolf (Narrated by David Bowie) – Spotify Proust, Marcel – À La Recherche Du Temps Perdu (Œuvre Intégrale) (in French) – Free Stream Pushkin, Alexander – Eugene Onegin – Free MP3 Stream – Free MP3 Zip File Ratcliffe, Stephen – Continuum – Free MP3 Stream Remarque, Erich Maria – All Quiet on the Western Front – Free Stream Ruskin, John – The Golden River – Free MP3 Safran Foer, Jonathan – “Love is Blind and Deaf” – Video Animation Saramago, José – “The Centaur” (Read by Nadine Gordimer) – Free MP3 Sedaris, David – “The Mouse and the Snake” from Squirrel Seeks Chipmunk: A Modest Bestiary – Free MP3 – Web site Sedaris, David – “Six to Eight Black Men” from the album ‘Live at Carnegie Hall’ – YouTube Audio Sedaris, David – “Solution to Saturday’s Puzzle”from When You Are Engulfed in Flames – Free MP3 Sendak, Maurice – Where the Wild Things Are (read by Christopher Walken) – YouTube Seuss, Dr. – Green Eggs and Ham (read by Neil Gaiman) – YouTube Seuss, Dr. – How The Grinch Stole Christmas (read by Keith Morrison) – YouTube Sewell, Anna – Black Beauty – Free iTunes – Free MP3s Schwartz, Delmore – “In Dreams Begin Responsibilities” (Read by Lou Reed) – Free Stream Shakespeare, William – A 68 Hour Playlist of Shakespeare’s Plays Being Performed by Great Actors: Gielgud, McKellen &amp; More – Free on Spotify Shakespeare, William – 10 Plays Performed by Orson Welles on the Radio – Free Stream Shakespeare, William – All’s Well Ends Well – Free Stream – Free MP3 Zip File Shakespeare, William – A Midsummer Night’s Dream – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Shakespeare, William – Antony and Cleopatra – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – As You Like It – Free iTunes – Free Stream – Free Mp3 Zip File Shakespeare, William – Comedy of Errors – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – Coriolanus – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – Cymbeline – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – Hamlet – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Shakespeare, William – Julius Caesar – Free iTunes – Free MP3 Free eBook available here. Shakespeare, William – King Lear – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Shakespeare, William – Romeo and Juliet – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Shakespeare, William – The Merchant of Venice – Free iTunes – Free MP3 Free eBook available here. Shakespeare, William – The Sonnets – Free iTunes – Free MP3 Shakespeare, William – The Sonnets (read by Sir John Gielgud) – Part 1, Part 2, Part 3, Part 4 Shakespeare, William – The Tragedy of MacBeth – Free iTunes – FREE from Audible.com Free eBook available here. Shaw, George Bernard – Pygmalion – Free iTunes – Free MP3 Shelley, Mary – Frankenstein – Free iTunes – Free MP3 – FREE from Audible.com Also check out the 1938 radio broadcast that is faithful to Mary Shelley’s text. (iTunes) Free eBook available here. Shelley, Mary – Frankenstein (Abridged version read by Christophe Lee) – Spotify Silverstein, Shel – The Giving Tree (Animated film narrated by the author) – YouTube Silverstein, Shel – The Giving Tree (Read by Arianna Huffington) – YouTube Sinclair, Upton – The Jungle – Free iTunes – Free MP3 Free eBook available here. Singer, Isaac Bashevis – Disguised (read by Nathan Englander) – Free MP3 Smith, Zadie – “Escape from New York” (read by Zadie Smith) – Free Audio Stream Stein, Gertrude – If I Told Him: a Completed Portrait of Picasso – Free MP3 Stein, Gertrude – Matisse – Free MP3 Stein, Gertrude – The Fifteenth Of November . . . T. S. Eliot – Free MP3 Stein, Gertrude – The Making of Americans – Free MP3 Steinbeck, John – “The Snake” and “Johnny Bear” – Free Stream – Spotify Sterne, Laurence – The Life and Opinions of Tristram Shandy, Gentleman – Free Stream: Vol 1. – Vol 2. – Vol 3. – Vol 4. Stevenson, Robert Louis – The Strange Case of Dr Jekyll &amp; Mr Hyde – Free MP3 – FREE from Audible.com Free eBook available here. Stevenson, Robert Louis – The Strange Case of Dr Jekyll &amp; Mr Hyde (Read by Christopher Lee) – Spotify Stevenson, Robert Louis – Treasure Island – Free MP3 – FREE from Audible.com Free eBook available here. Stoker, Bram – Dracula – Free iTunes – FREE from Audible.com See alternative version here. (full zip file) Stoker, Bram – Dracula (Read by Christopher Lee) – Spotify Stowe, Harriet Beecher – Uncle Tom’s Cabin – Free iTunes – Free MP3 – FREE from Audible.com Swift, Jonathan – Gulliver’s Travels – Free iTunes – Free MP3 Zip File – FREE from Audible.com Thayer, Ernest Lawrence – Casey at the Bat – Free iTunes – Free MP3 Thomas, Dylan – A Child’s Christmas in Wales (read by Thomas) – Youtube Tolstoy, Leo – Anna Karenina – Free Stream Tolstoy, Leo – Anna Karenina – Book 1 – Free Zip File Book 2 – Free Zip File Book 3 – Free Zip File Book 4 – Free Zip File Book 5 – Free Zip File Book 6 – Free Zip File Book 7 – Free Zip File Book 8 – Free Zip File Tolstoy, Leo – Selected Short Stories – Free Stream/MP3 Tolstoy, Leo – What Men Live By and Other Tales – Free iTunes Tolstoy, Leo – War &amp; Peace Book 1, Book 2, Book 3, Book 4, Book 5, Book 6, Book 7, Book 8, Book 9 (Zip Files) – FREE from Audible.com Free eBook available here. Tolstoy, Leo – Selected Short Stories – Free Multiple formats Trollope, Anthony – Barchester Towers – Free MP3 Zip File – FREE from Audible.com Twain, Mark – The Adventures of Huckleberry Finn – Multiple versions here Twain, Mark – The Adventures of Tom Sawyer – Free MP3 – FREE from Audible.com Free eBook available here. Twain, Mark – The Adventures of Tom Sawyer – Spotify version Twain, Mark – The Prince and the Pauper – Free iTunes – Free MP3 Zip File – Free Stream Unknown – Epic of Gilgamesh – Free iTunes Unknown – Sir Gawain and the Green Night – Free MP3 Zip File Updike, John – “Playing with Dynamite” (read by Roger Angell) – Free MP3 Updike, John – “A &amp; P.” (read by Allegra Goodman) – Free MP3 Verne, Jules – 20,000 Leagues Under the Sea – Free MP3 Zip File – Free iTunes Free eBook available here. Verne, Jules – Around the World in 80 Days – Free iTunes – Free MP3s – FREE from Audible.com Free eBook available here. Verne, Jules – Mysterious Island – Free iTunes Verne, Jules – The Master of the World – Free MP3 Voltaire – Candide – Free MP3 – FREE from Audible.com Vonnegut, Kurt – 2BR02B – Free MP3 – FREE from Audible.com Vonnegut, Kurt – “Harrison Bergeron” – Free MP3 Vonnegut, Kurt – The Big Trip Up Yonder – Free MP3 Vonnegut, Kurt – Slaughterhouse 5, Cat’s Cradle, Breakfast of Champions, Welcome to the Monkey House (Abridged readings by Vonnegut) – Spotify Wallace, David Foster – “Consider the Lobster” (read by DFW) – Free MP3 Wallace, David Foster – “The View from Mrs. Thompson’s” (read by DFW) – Free MP3 Welles, Orson – The Shadow (Performed by Welles) – Free MP3 Wells, HG – The Invisible Man- Free iTunes – Free Stream – FREE from Audible.com Free eBook available here. Wells, HG – Magic Shop – Free iTunes Wells, HG – Time Machine – Free iTunes – FREE from Audible.com Free eBook available here. Wells, HG – The War of the Worlds – Free iTunes – FREE from Audible.com Free eBook available here. Wells, HG – The War of the Worlds (Famous 1938 radio adaptation by Orson Welles) – Stream Wells, HG – The War of the Worlds (Read by Maxwell Caulfield) – Spotify Welty, Eudora – “The Wide Net” (read by the author) – YouTube Welty, Eudora – “Where Is the Voice Coming From?” (read by Joyce Carol Oates) – MP3 Welty, Eudora – “Why I Live at the P.O.” – YouTube Wharton, Edith – The Age of Innocence – Free iTunes Wharton, Edith – The Fulness of Life – Free MP3 – FREE from Audible.com Wilde, Oscar – The Happy Prince – Free MP3 Version read by Stephen Fry – YouTube Version read by Orson Welles and Bing Crosby – YouTube Wilde, Oscar – The Importance of Being Earnest (Performed by John Gielgud) – Free Wilde, Oscar – The Importance of Being Earnest – Free MP3 – FREE from Audible.com Free eBook available here. Wilde, Oscar – The Picture of Dorian Gray – Free iTunes – Free MP3s Free eBook available here. Wolff, Tobias – “Bullet in the Brain” (read by T. Coraghessan Boyle) (MP3) Wolff, Tobias – “The Night in Question” (read by Akhil Sharma) (MP3) Woolf, Virginia – “A Haunted House” – Free MP3 – Free iTunes Woolf, Virginia, – Jacob’s Room – MP3 Zip File Woolf, Virginia – “The Legacy” – Free MP3 – Free Stream Woolf, Virginia – “The Searchlight” – Free MP3 Woolf, Virginia – The Voyage Out – Free Stream Wyss, Johann David – The Swiss Family Robinson – Free MP3 Zip File – FREE from Audible.com &lt;&gt; Poetry Angelou, Maya – Phenomenal Woman – YouTube Angelou, Maya – Still I Rise &amp; On the Pulse of the Morning (read by author) – YouTube Anonymous – Beowulf – Free iTunes – Free MP3s – Reading by Seamus Heaney Free eBook available here. Apollinaire, Guillaume – Le pont Mirabeau (Read by author in 1913) – Free MP3 Apollinaire, Guillaume – Marie (Read by author in 1913) – Free MP3 Apollinaire, Guillaume – Le Voyageur (Read by author in 1913) – Free MP3 Arnold, Matthew – Dover Beach – Free Stream/Download Ashbery, John – Everyman – Free MP3 Ashbery, John – “Meditations of a Parrot,” “The Painter” and “The Picture of Little J.A. in a Prospect of Flowers” (read by the author)- Free Stream/MP3 Auden, W.H. – 1st September, 1939; As I Walked Out One Evening; “Song of the Master and Boatswain,” (read by Dylan Thomas) – YouTube Auden, W.H. – 1st September, 1939 – YouTube Auden, W.H. – As I Walked Out One Evening (read by Auden) – YouTube Auden, W.H. – Autumn Song – Free MP3 Auden, W.H. – Bucolics and Horae Cononicae (read by Auden) – Free Stream/Download Auden, W.H. – Doggerel by a Senior Citizen (read by Auden) – YouTube Auden, W. H. – In Memory of WB Yeats – YouTube Auden, W.H. – Metalogue to The Magic Flute (read by Auden – Free Stream/Download Auden, W.H. – The Sea and The Mirror (read by the author) – Free Stream/Download Baudelaire, Charles – Les fleurs du mal (in French) – Free Stream Beckett, Samuel – Tailpiece and 23rd Addenda (read by the author) – YouTube Blake, William – A Little Boy Lost – Free MP3 Blake, William – Jerusalem – Free MP3 Zip File Blake, William – Laughing Song – Free MP3 Blake, William – London – Free MP3 Blake, William – Preface to Milton – Free MP3 Blake, William – Piping Down Valleys Wild – Free MP3 Blake, William – Songs of Innocence and Songs of Experience, as read by Allen Ginsberg – Free Stream/MP3 Blake, William – The Chimney Sweeper – Free MP3 Blake, William – The School Boy – Free MP3 Blake, William – Visions of the Daughters of Albion – Free MP3 Borges, Jorge Luis – Art of Poetry/Arte Poétic – Free MP3 Borges, Jorge Luis – Plainness – Free Stream Bradbury, Ray – If Only We Had Taller Been (read by the author) – YouTube Bronte, Emily – Anticipation – Free MP3 Bronte, Emily – Encouragement – Free MP3 Bronte, Emily – Poems – Free MP3 Bukowski, Charles – At Terror Street and Agony Way – Free Audio Bukowski, Charles – Beer – Animated Video Bukowski, Charles – Bluebird – YouTube Audio Bukowski, Charles – Hostage – Spotify Bukowski, Charles – Master Collection – Spotify Bukowski, Charles – Something For The Touts, The Nuns, The Grocery Clerks, And You – YouTube Audio Bukowski, Charles – The Laughing Heart (read by Tom Waits) – YouTube Audio Bukowski, Charles – The Crunch and Roll The Dice (read by Bono) – YouTube Audio Bukowski, Charles – The Secret to My Endurance (read by the author) – YouTube Audio Burton, Tim – The Nightmare Before Christmas (read by Christopher Lee) – YouTube Video Byron – Childe Harold: Canto III – Free MP3 Byron – Darkness – Free MP3 Byron – Newton – Free MP3 Byron – She Walks in Beauty – Free MP3 Cage, John – Overpopulation and Art – Free Stream Carroll, Lewis – Jabberwocky (read by Neil Gaiman) – YouTube Cavafy, C.P. – Ithaca (read by Sean Connery) – YouTube Ciardi, John – As If: Poems New and Selected by John Ciardi (read by the author) – Spotify Cohen, Leonard – “For E.J.P” and “You Have the Lovers” (read by Cohen) – Free Stream/Download Coleridge, Samuel – Kubla Khan – Free MP3 Coleridge, Samuel – Kubla Khan (read by Benedict Cumberbatch) – YouTube Coleridge, Samuel – Rime of the Ancient Mariner – Free MP3 Find version read by Orson Welles Another version by Richard Burton Coleridge, Samuel – The Dungeon – Free MP3 Coleridge, Samuel – Poems (Read by Ralph Richardson) – Free Spotify Billy Collins – The Best Cigarette (Poetry collection read by the author) – Free Spotify Crane, Hart – “The Broken Tower” and “The Hurricane” (read by Tennessee Williams) – Vimeo Cummings, EE – Somewhere I Have Never Travelled – (read by author) – YouTube Cummings, EE – Anyone Lived in a Pretty How Town – (read by author) – YouTube DeTroyes, Chretien – Lancelot, or The Knight of the Cart- Stream Dickinson, Emily – The Poems of Emily Dickinson, Series 1 – Free iTunes – Free MP3 Dickinson, Emily – The Poems of Emily Dickinson, Series 2 – Free MP3 Dickinson, Emily – Poems &amp; Letters – Spotify Dickinson, Emily – Because I Could Not Stop for Death – Free MP3 Dickinson, Emily – Hope Is the Thing With Feathers – Free MP3 Dickinson, Emily – ‘I Started Early–Took My Dog’ – YouTube Donne, John – Death, Be Not Proud – Free Stream/MP3 Donne, John – The Good-morrow – Free Stream/MP3 Donne, John – The Sunne Rising – Free MP3 Ehrmann, Max – Desiderata (Read by Leonard Nimoy) – YouTube Eliot, T.S. – Four Quartets (Read by T.S. Eliot) – YouTube Eliot, T.S. – Four Quartets (Read by Alec Guinness) – YouTube Eliot, T.S. – Journey of the Magi – YouTube Eliot, T.S. – Old Possum’s Book of Practical Cats (Read by T.S. Eliot) – Spotify playlist Eliot, T.S. – The Love Song of J. Alfred Prufrock Listen to reading by TS Eliot – YouTube Listen to reading by Sir Anthony Hopkins – YouTube Eliot, T.S. – The Waste Land – Free MP3 Listen to reading by TS Eliot – YouTube Hear reading by Jeremy Irons and Eileen Atkins – Stream Eliot, T.S. – T.S. Eliot Reading Poems and Choruses – Spotify Ferlinghetti, Lawrence – Selections from A Coney Island of the Mind (read by author) – Free MP3 – Free Stream Ferlinghetti, Lawrence – Baseball Canto – Free MP3/Stream Ferlinghetti, Lawrence – Evil – Free MP3/Stream Ferlinghetti, Lawrence – Wilfred Funk (read by author) – Free MP3/Stream Frost, Robert – A Line Storm Song – Free MP3 Frost, Robert – My Butterfly – Free MP3 Frost, Robert – October – Free MP3 Frost, Robert – Stopping by Woods on a Snowy Evening (read by author) – YouTube Frost, Robert – The Gift Outright (read by author) – YouTube Frost, Robert – “The Road Not Taken,” “The Pasture,” “Mowing,” “Birches,” “After Apple-Picking,” and “The Tuft of Flowers” (read by the author) – Free Stream Frost, Robert – Robert Frost Reads His Poetry – Free Spotify Ginsberg, Allen – A Supermarket in California (read by Ginsberg) – Free MP3 Ginsberg, Allen – America (read by Ginsberg) – Free Stream Ginsberg, Allen – Howl, A Strange New Cottage in Berkeley, and Supermarket in California (read by Ginsberg) – Free MP3/Stream Ginsberg, Allen – Howl (read by Ginsberg, 1959) – YouTube – iTunes Ginsberg, Allen – Howl (first recorded reading of Howl by Ginsberg, 1956) – Free Stream – Free iTunes – Web Ginsberg, Allen – Howl (read by James Franco) – YouTube Ginsberg, Allen – Jahweh and Allah Battle – Free Stream Ginsberg, Allen – Kaddish and other works (read by Ginsberg) – Free Stream Ginsberg , Allen – Mind Breaths (read by Ginsberg) – Free Stream/Download Ginsberg, Allen – Sunflower Sutra (read by Ginsberg) – Free MP3 Ginsberg, Allen – The Lion for Real (read by Ginsberg) – Free on Spotify Ginsberg, Allen – “The Shrouded Stranger Of The Night,” “Sweet Levinsky,” and “Stanzas: Written at Night in Radio City.” – Free Stream/Download Ginsberg, Allen – “What would you do if you lost it?” (read by Ginsberg) – Free Stream/Download Hemingway, Ernest – Second Poem to Mary (read by Hemingway) – Free YouTube Henley, Ernest – Invictus – Free YouTube Hitchcock, Robyn – “If Death is Not the End” (Read by Alan Rickman) – Free Stream Homer, The Odyssey – Free Stream/MP3 Download – Free iTunes Hughes, Langston – Langston Hughes Reads Langston Hughes – Spotify Keats, John – To Autumn – Free MP3 Keats, John – Ode on a Grecian Urn – Free MP3 Keats, John – Ode to a Nightingale (as recited loosely by F. Scott Fitzgerald) – YouTube Keats, John – Ode to a Nightingale (as read by Benedict Cumberbatch) – Soundcloud Keats, John – On First Looking into Chapman’s Homer – Free MP3 Keats, John – When I Have Fears That I May Cease to Be – Free MP3 Kerouac, Jack – 4 Albums with Kerouac Reciting Poetry &amp; Verse – Spotify Kipling, Rudyard – If (read by Dennis Hopper) – YouTube Kipling, Rudyard – If (read by Michael Caine) – YouTube Kipling, Rudyard – My Boy Jack (read by Ralph Fiennes) – YouTube Kipling, Rudyard – The Gods of the Copybook Headings – Free MP3 Kipling, Rudyard – The Way Through the Woods – Free MP3 Longfellow, Henry Wadsworth – Selected Works – Free MP3 McCrae, John – “In Flanders Fields” (read by Leonard Cohen) – YouTube Melville, Herman – Ball’s Bluff – Free Stream Merwin, W.S. – After a Storm (read by author) – Free Stream/Download Milton, John – On His Blindness – Free MP3 Nabokov, Vladimir – The University Town (read by Ralph Fiennes) – Free Stream Neruda, Pablo – Birth (Read by Neruda) – Free Stream Neruda, Pablo – Keeping Quiet (Read by Sylvia Boorstein) – Free Stream Plath, Sylvia – Sylvia Plath reading her poetry (23 poems read by the author) – YouTube Plath, Sylvia – Ariel (read by author) – YouTube Stream Plath, Sylvia – A Birthday Present (read by the author) – Free MP3/Stream Plath, Sylvia – Daddy (read by author) – YouTube Plath, Sylvia – Fever 103 (read by the author) – YouTube Plath, Sylvia – Lady Lazarus (read by author) – YouTube Plath, Sylvia – The Applicant (read by the author) – YouTube Poe, Edgar Allan – Annabel Lee – Free MP3 Poe, Edgar Allan – The Raven (read by Christopher Walken) – YouTube Poe, Edgar Allan – The Raven – Free MP3 Pope, Alexander – Nature and Art – Free Stream Pope, Alexander – The Quiet Life – Free Stream Pound, Ezra – Cantico del sole – Free MP3 [text] Pound, Ezra – Canto XVII (“So that the vine burst from my fingers’) – Free MP3 Pound, Ezra – Canto XXX – Free MP3 Pound, Ezra – Canto XLV – Free MP3 Pound, Ezra – Canto LVI – Free MP3 Pound, Ezra – Homage to Sextus Propertius, Section VI (read by author) – Free MP3 Pound, Ezra – Sestina: Altaforte (read by author) – YouTube Pound, Ezra – The Seafarer (read by author) – Free MP3 Rexroth, Kenneth – “One Hundred Poems from the Chinese” and “In Defense of the Earth” (read by the author) – Free Stream Rich, Adrienne – Mourning Poem, Spring Thunder, White Night and other poems (read by author) – Free Stream/Download Rimbaud, Arthur – Illuminations – Free MP3 Zip File Rumi – Poems read by Tilda Swinton, Madonna, Robert Bly &amp; Coleman Barks – YouTube/Soundcloud Sandburg, Carl – Chicago – Free Stream Sexton, Anne – Waiting to Die (read by author) – YouTube Sexton, Anne – “Her Kind,” “The Ambition Bird,” “Ringing the Bells,” “Music Swims Back to Me,” and “The Truth the Dead Know” (read by the author) – Free Stream Sexton, Anne – “With Mercy for the Greedy,” “The Starry Night,” “Letter Written on a Ferry While Crossing Long Island Sound,” and “Self in 1958,” (read by the author) – Free Stream Sexton, Anne – Divorce, Thy Name is Woman,” “Gods Making a Living,” “Jesus Cooks,” “Jesus Walking,” and “The Fury of Overshoes” (read by the author) – Free Stream Sexton, Anne – “Rowing,” “Riding the Elevator Into the Sky,” “The Play,” “The Rowing Endeth,” “Us,” and “The Touch” (read by the author) – Free Stream Shakespeare, William – Shakespeare’s Sonnets – Free MP3s Shelley, Percy Bysshe – Adonais – Free MP3 Shelley, Percy Bysshe – Ozymandias of Egypt – Free MP3 Shelley, Percy Bysshe – Ozymandias (read by Bryan Cranston) – Free YouTube Shelley, Percy Bysshe – Various Poems (read by Vincent Price) – Free Spotify Stein, Gertrude – A Valentine to Sherwood Anderson (read by Gertrude Stein) – Free MP3 Stevens, Wallace – “Credences of Summer” and “An Ordinary Evening in New Haven” (read by the author) – Free Stream/Download Stevens, Wallace – “The Idea of Order at Key West,” “The Poem that Took the Place of a Mountain,” and “Vacancy in the Park” (read by the author) – .au format – .gsm format –.ra format Stevens, Wallace – To an Old Philosopher in Rome (read by the author) – Free MP3 Tennyson, Alfred Lord – Break, Break, Break – Free MP3 Tennyson, Alfred Lord – The Charge of the Light Brigade – Free MP3/Stream – Quicktime – RealPlayer Tennyson, Alfred Lord – The Lotos-Eaters – Free MP3 Thomas, Dylan – Dylan Thomas Reads 8 Hours of His Poetry – Spotify Thomas, Dylan – Richard Burton Reads 15 Poems by Dylan Thomas – Spotify Thomas, Dylan – Ballad of the Long-Legged Bait’ and 14 Other Poems (read by Richard Burton) – YouTube Thomas, Dylan – Do Not Go Gentle Into That Good Night (read by the author) – Free MP3/Stream Thomas, Dylan – Do Not Go Gentle Into That Good Night (read by the Sir Anthony Hopkins) – Free YouTube Thomas, Dylan – The Wild West (read by the author) – Free MP3/Stream Thomas, Dylan – Under Milk Wood (read by the author) – Free MP3/Stream Updike, John – Rainbow (read by author) – Free Stream Virgil – Aeneid – Free MP3 Zip Download Whitman, Walt – O Captain! My Captain! – Free MP3 Whitman, Walt – Leaves of Grass – Free MP3 Zip File – Free Stream Whitman, Walt – Song of Myself and Other Poems – Free Stream/MP3 Whitman, Walt – Song of Myself (read by James Earl Jones) – Free Stream/Download Whitman, Walt – Song of Myself (read by James Earl Jones) – Free Stream Whitman, Walt – Song of Myself (read by Orson Welles) – Free Stream Whitman, Walt – Song of Myself (read by Eric Forsythe/U. of Iowa) – Free Stream Wilbur, Richard – A Storm in April, The Ride, Shad-Time, Advice From the Muse and Other Poems (read by author) – Free Stream/Download Wilde, Oscar – The Ballad of Reading Gaol – Free MP3/Stream Williams, Tennessee – Selected Poems – Free Stream/Download Williams, Willam Carlos – Selected Poems (read by poet 1954 ) – Free MP3 Williams, William Carlos – 39 Poems Read for The Library of Congress Recording Laboratory. May 5, 1945 – Free MP3 Williams, William Carlos – The Red Wheelbarrow, Tract, The Defective Record, To a Poor Old Woman, A Coronal, To Elsie, The Wind Increases, Classic Scene (read by poet 1954) – Free Wordsworth, William – Daffodils (Read by Jeremy Irons) – YouTube Wordsworth, William – The Last of the Flock – Free MP3 Wordsworth, William – Solitary Reaper – Free MP3 Wordsworth, William – Tintern Abbey – Free MP3 Yeats, William Butler – The Lake Isle of Innisfree, The Fiddler of Dooney, The Song of the Old Mother, Coole and Ballylee (read by the author) – YouTube Yeats, William Butler – Aedh Wishes for the Cloths of Heaven – Free MP3 Yeats, William Butler – Byzantium – Real Media Yeats, William Butler – Lake Isle of Innesfree (read by the author) – Free MP3 Yeats, William Butler – Sailing to Byzantium – Free MP3 Yeats, William Butler – The Cold Heaven – Free Stream/MP3 Yeats, William Butler – The Fiddler of Dooney (read by the author) – Free MP3 Yeats, William Butler – The Song of the Old Mother (read by the author) – Free MP3 Yeats, William Butler – When You Are Old – Free MP3 Non-Fiction Amis, Martin – “Phantom of the Opera“ Aristotle – Poetics (MP3 download) Aristotle – Politics (MP3 download full zip file) Aristotle – Physics Augustine, Saint – City of God (full zip file) Beard, Charles – History of the United States, Volume 1 (full zip file) Beard, Charles – History of the United States, Volume 2(full zip file) Beard, Charles – History of the United States, Volume 3 (full zip file) Beard, Charles – History of the United States, Volume 4 (full zip file) Berkeley, George – A Defence of Free-Thinking in Mathematics (Free MP3) Burke, Edmund – A Philosophical Enquiry (Full zip file) Burke, Edmund – Reflections on the Revolution in France (Full zip file) Camus, Albert – Nobel Prize Acceptance Speech, 1957 (YouTube) Camus, Albert – The Human Crisis (Read by Actor Viggo Mortensen) – Facebook Video Carroll, Lewis – Symbolic Logic (Free MP3) Carroll, Lewis – The Game of Logic (Free MP3) Channing, Edward – A Short History of the United States (full zip file) Confucius – The Sayings of Confucius (MP3 full zip file download) Darwin, Charles – On the Origin of Species by Means of Natural Selection (MP3 download full zip file) Free eBook available here. Descartes, Rene – Discourse on Method (MP3 download) Descartes, Rene – Meditations on First Philosophy (full zip file) Dickens, Charles – A Child’s History of England (full zip file) Doctorow, Cory – Content: Selected Essays on Technology, Creativity, Copyright and the Future of the Future (Streamed) Douglass, Frederick – A Speech to the People of Rochester, New York on the Hypocrisy of Slavery (MP3 download) Dubois, W.E.B. – The Soul of Black Folks (iTunes) Emerson, Ralph Waldo – History (MP3 download) Einhard, The Life of Charlemagne (full zip file) Einstein, Albert – Relativity (MP3 download full zip file) Emerson, Ralph Waldo – Collected Essays of Ralph Waldo Emerson (iTunes) Faulkner, William – Nobel Prize Acceptance Speech, 1954 (Soundcloud) Foster Wallace, David – This is Water, 2005 Kenyon Commencement Speech (YouTube) Freud, Sigmund – Dream Psychology – MP3 Zip File Download – Free Stream Freud, Sigmund – A General Introduction to Psychoanalysis – MP3 Zip File Download – Free Stream Freud, Sigmund – The Interpretation of Dreams – MP3 Zip File Download – Free Stream Freud, Sigmund – Psychopathology of Everyday Life – MP3 Zip File Download – Free Stream Freud, Sigmund – Reflections on War and Death – MP3 Zip File Download – Free Stream Freud, Sigmund – Totem and Taboo – MP3 Zip File Download – Free Stream Garcia Marquez, Gabriel – “The Solitude of Latin America” (Nobel Prize Speech) (YouTube) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 1. (Librivox collection of MP3’s) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 2. (Librivox collection of MP3’s) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 3. (Librivox collection of MP3’s) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 4. (Librivox collection of MP3’s) Goethe – Theory of Colors (MP3s) Grant, Ulysses S. – The Personal Memoirs of Ulysses S. Grant (Various formats) Harding, Samuel – The Story of the Middle Ages (iTunes) Henry, Patrick – Give Me Liberty or Give Me Death (MP3 download) Henry, Patrick – Speech Addressing the Virginia House of Burgesses; Richmond, Virginia; March 23, 1775 (MP3 download) Holmes, Oliver Wendell – The Fountain of Youth (mp3 download) Huxley, Aldous – Speaking Personally – (Spotify) Huxley, Aldous – The Visionary Experience – (MP3 stream) James, William – The Moral Equivalent of War (mp3 download) Jefferson, Thomas – The Declaration of Independence (mp3 download) Jobs, Steve – Stanford Graduations Speech, 2005 (YouTube) Kandinsky, Wassily – Concerning the Spiritual in Art (mp3 download) Kaufmann, Walter – Lectures on Nietzsche, Kierkegaard and Sartre (1960) Lessig, Lawrence – Free Culture (alternate version here) Lincoln, Abraham – Gettysburg Address (mp3 download) Also see version read by Johnny Cash (YouTube) Macauley, Thomas – History of England (Librivox) Machiavelli, The Prince (mp3 download) Marx, Karl – The Communist Manifesto (full zip download) Mill, John Stuart – Utilitarianism (mp3 download full zip file) Morrison, Toni – Nobel Prize Acceptance Speech, 1993 (YouTube) Nietzsche, Friedrich – Ecce Homo (full zip file) Nietzsche, Friedrich – Beyond Good and Evil (mp3 download) Nietzsche, Friedrich – Thus Spoke Zarathustra (full mp3 download) Nietzsche, Friedrich – Twilight of the Idols (full zip) Paine, Thomas – Common Sense (mp3 download) Plato – The Apology of Socrates (stream/download) Plato – The Republic (iTunes) + Free Stream/MP3 Roosevelt, Theodore – Spanish-American War: The Rough Riders in Tampa (mp3 download) Rousseau, Jean-Jacques – A Discourse Upon the Origin and the Foundation of the Inequality Among Mankind (full zip file) Russell, Bertrand – ABC of Relativity: Understanding Einstein (read by Derek Jacobi) Russell, Bertrand – Why I Am Not a Christian (read by Terrence Hardiman) Sedaris, David – Santaland Diaries (read by David Sedaris) Smith, Adam – A Wealth of Nations Book 1 and Books 2 &amp; 3 (full zip download) Steinbeck, John – Nobel Prize Acceptance Speech, 1962 (YouTube) Strathern, Paul – Nietzsche in 90 Minutes (YouTube Stream) Sun-tzu – The Art of War (mp3 download) Thoreau, Henry David – Walden (mp3 download) Thucydides, The History of the Peloponnesian War (mp3 download) Tocqueville, Alexis de – Democracy in America Part 1 and Part 2 (full zip download) Various – The Federalist Papers Rss Feed Various – The US Constitution Stream Voltaire – Candide (mp3 download) Wittgenstein, Ludwig – Tractatus Logico-Philosophicus &lt;&gt; Audio Book Podcast Sites Librivox iTunesFeedWeb Site Librivox should be your first stop when looking for audio books. It’s the biggest and best collection. Then there are the others. Audiobooks with Annie iTunesFeedWeb Site Audio Literature Odyssey iTunesFeedWeb Site A collection of classics. Henry James, Edgar Allan Poe, Emily Dickinson, etc. Classic Poetry Aloud iTunesFeedWeb Site These poetry podcasts provide readings of the great poems of the past. Classic Tales Podcast iTunesFeedWeb Site The whole point is to make unabridged classics not only available, but approachable. Crimewav.com iTunesFeedWeb Site Podcasts that bring quality crime stories to an audience worldwide. Produced by crime writer Seth Harwood. Escapepod iTunesFeedWeb Site Collections of well-reviewed audio short stories. Great Books – A Chapter a Day iTunesWeb Site Great Speeches in History iTunesFeedWeb Site JC Hutchins iTunes Feed Web Site The author of the 7th Son Trilogy has made available more than 200 hours of audio and video stories and interviews, all of which are available for free download. Kara’s Free AudioBooks iTunesFeedWeb Site Learn OutLoud.com Founding Documents of America iTunesFeedWeb Site Great Speeches in History iTunesFeedWeb Site Philosophy Readings iTunesFeedWeb Site Haverford College – Classic/Ancient Text Read Aloud iTunesWeb Site (see site for feeds) Internet Archive Listen to free audio books and poetry recordings courtesy of the Internet Archive. Lawrence Lessig’s Free Culture Lit2Go iTunesWeb Site An extensive collection of free audiobooks provided by the University of Southern Florida. Litterature Audio Over 700 free audio books in French. Here are the most downloaded books. Naropa Poetics Audio Archives Hosts audio recordings of the Beats — Kerouac, Burroughs, Ginsberg and more. The Penguin Podcast Excerpts read from books newly published by Penguin UK. Podiobooks Provides podcasts of largely sci-fi books that we’ve never heard of before. But, you never know. Podlit Classic Literature iTunesWeb Site A new classic short story each week. Pseudopod iTunesFeedWeb Site The world’s first audio horror magazine Radioboeken iTunesFeedWeb Site “Radiobooks” are just like books, but they will never be printed. They are created by important Dutch and Flemish writers, and will be available in French, English and Spanish versions in 2007. Scott Sigler’s Audiobooks iTunes – Feed – Web Site Very well reviewed sci-fi horror works Stories to Go iTunesFeedWeb Site Stranger Things iTunesFeedWeb Site This high-quality video podcast features stories of ordinary people stumbling into strange worlds (a la The Twilight Zone). The Classic Tales Podcast iTunesFeedWeb Site The Classic Tales Podcast makes unabridged classics not only available, but approachable. Includes professional performances. The Public Domain Podcast iTunesFeedWeb Site The Time Traveler iTunesFeedWeb Site Explores vintage American fiction. Orson Welles, Philip K. Dick, etc. The Twilight Series Get information here. Utopod iTunes – Feed A free French-language podcast, created by Lucas Moreno and and Marc Tiefenauer, that offers readings of fantasy and sci fi stories written by noted authors across the Francophone world. Well Told Tales iTunesFeedWeb Site Pulp fiction audio tales….!!! 53.8k SHARES FacebookTwitterGoogle RedditMailTumblrStumbleuponDiggPinterestPrintLinkedinWhatsappDeliciousBufferPocket Essentials 1,150 Free Online Courses 1000+ MOOCs 725 Free Movies 700 Free Audio Books 800 Free eBooks 200 Free Textbooks 300 Free Language Lessons 150 Free Business Courses Free K-12 Education Get Our Daily Email Free Courses Astronomy Biology Business Chemistry Classics/Ancient World Computer Science Economics Engineering Environment History Literature Math Philosophy Physics Political Science Psychology Religion All 1150 Free Courses 1000+ MOOCs &amp; Certificate Courses Free Movies 725 Free Movies Online Free Film Noir Silent Films Documentaries Martial Arts/Kung Fu Animations Free Hitchcock Films Free Charlie Chaplin Free John Wayne Movies Free Tarkovsky Films Free Dziga Vertov Free Oscar Winners Free Language Lessons Arabic Chinese English French German Italian Russian Spanish All Languages Free eBooks 700 Free eBooks Free Philosophy eBooks The Harvard Classics Philip K. Dick Stories Neil Gaiman Stories David Foster Wallace Stories &amp; Essays Hemingway Stories Great Gatsby &amp; Other Fitzgerald Novels HP Lovecraft Edgar Allan Poe Free Alice Munro Stories Jennifer Egan Stories George Saunders Stories Hunter S. Thompson Essays Joan Didion Essays Gabriel Garcia Marquez Stories David Sedaris Stories Stephen King Chomsky Golden Age Comics Free Books by UC Press Life Changing Books Free Audio Books 700 Free Audio Books Free Audio Books: Fiction Free Audio Books: Poetry Free Audio Books: Non-Fiction Free Textbooks 200 Free Textbooks Free Physics Textbooks Free Computer Science Textbooks Free Math Textbooks K-12 Resources Free Books Free Video Lessons Web Resources by Subject Free Language Lessons Quality YouTube Channels Teacher Resources Test Prep All Free Kids Resources Free Art &amp; Images All Art Images &amp; Books The Met The Getty The Rijksmuseum Smithsonian The Guggenheim The Tate The National Gallery The Whitney LA County Museum Stanford University British Library Google Art Project French Revolution Getty Images Guggenheim Art Books Met Art Books Getty Art Books New York Public Library Maps Museum of New Zealand Street Art Smarthistory Rembrandt Van Gogh Coloring Books Free Music All Bach Organ Works All of Bach 80,000 Classical Music Scores Free Classical Music Live Classical Music 9,000 Grateful Dead Concerts Alan Lomax Blues &amp; Folk Archive Writing Tips Hemingway Fitzgerald Stephen King Ray Bradbury William Zinsser Kurt Vonnegut Toni Morrison Edgar Allan Poe Margaret Atwood David Ogilvy Steinbeck Billy Wilder Archive All posts by date Categories Amazon Kindle Animation Apple Architecture Archives Art Astronomy Audio Books Beat &amp; Tweets Biology Books Business Comedy Comics/Cartoons Computer Science Creativity Current Affairs Dance Deals Design e-books Economics Education English Language Environment Film Food &amp; Drink Games Google Graduation Speech Harvard Health History How to Learn for Free iPad iPhone Jazz K-12 Language Lessons Law Letters Life Literature Magazines Maps Math Media MIT MOOCs Most Popular Museums Music Neuroscience Online Courses Opera Philosophy Photography Physics Podcast Articles and Resources Poetry Politics Psychology Radio Random Religion Sci Fi Science Software Sports Stanford Technology TED Talks Television Theatre Travel Twitter UC Berkeley Uncategorized Video – Arts &amp; Culture Video – Politics/Society Video – Science Video Games Web/Tech Wikipedia Writing Yale YouTube Subscribe Get updates as soon as they go live, via RSS feed, email and now Twitter! Follow on Twitter Get the latest from our Twitter Stream. Facebook Why can't we be friends? Suggest a Link Got a link we should post? Send it our way! About Us Open Culture editor Dan Colman scours the web for the best educational media. He finds the free courses and audio books you need, the language lessons &amp; movies you want, and plenty of enlightenment in between. About Us Contact Us Dan Colman’s Bio Privacy Policy Advertise with Us Great Lectures Michel Foucault Sun Ra at UC Berkeley Richard Feynman Joseph Campbell Carl Sagan Margaret Atwood Jorge Luis Borges Leonard Bernstein Alan Watts Richard Dawkins Buckminster Fuller Walter Kaufmann on Existentialism Jacques Lacan Roland Barthes Nobel Lectures by Writers Toni Morrison Bertrand Russell Oxford Philosophy Lectures Great Recordings T.S. Eliot Reads Waste Land Sylvia Plath - Ariel Joyce Reads Ulysses Joyce - Finnegans Wake Patti Smith Reads Virginia Woolf Albert Einstein Charles Bukowski Bill Murray Hemingway Fitzgerald Reads Shakespeare William Faulkner Flannery O'Connor Tolkien - The Hobbit Allen Ginsberg - Howl W.B Yeats Ezra Pound Dylan Thomas Anne Sexton John Cheever David Foster Wallace Book Lists By Neil deGrasse Tyson Ernest Hemingway F. Scott Fitzgerald Allen Ginsberg Patti Smith Brian Eno Henry Miller Christopher Hitchens Joseph Brodsky W.H. Auden Donald Barthelme Carl Sagan David Bowie Samuel Beckett Art Garfunkel Marilyn Monroe Jorge Luis Borges Picks by Female Creatives Syllabi WH Auden David Foster Wallace Donald Barthelme Allen Ginsberg Zadie Smith &amp; Gary Shteyngart Spike Lee Lynda Barry Junot Diaz Favorite Movies Kubrick Kurosawa's 100 Tarantino Scorsese Tarkovsky David Lynch Werner Herzog Woody Allen Wes Anderson Luis Buñuel Roger Ebert Susan Sontag Scorsese Foreign Films Philosophy Films Archives June 2016 May 2016 April 2016 March 2016 February 2016 January 2016 December 2015 November 2015 October 2015 September 2015 August 2015 July 2015 June 2015 May 2015 April 2015 March 2015 February 2015 January 2015 December 2014 November 2014 October 2014 September 2014 August 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 April 2013 March 2013 February 2013 January 2013 December 2012 November 2012 October 2012 September 2012 August 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 December 2011 November 2011 October 2011 September 2011 August 2011 July 2011 June 2011 May 2011 April 2011 March 2011 February 2011 January 2011 December 2010 November 2010 October 2010 September 2010 August 2010 July 2010 June 2010 May 2010 April 2010 March 2010 February 2010 January 2010 December 2009 November 2009 October 2009 September 2009 August 2009 July 2009 June 2009 May 2009 April 2009 March 2009 February 2009 January 2009 December 2008 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 March 2008 February 2008 January 2008 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 May 2007 April 2007 March 2007 February 2007 January 2007 December 2006 November 2006 October 2006 September 2006 openculture logo ©2006-2016 Open Culture, LLC. All rights reserved. About Us | Advertise with Us | Copyright Policy | Privacy Policy | Terms of Use | RSS Feed | Bio | Switch to Mobile View Close Do you want more open culture? if you like our Facebook fanpage, you'll receive more articles like the one you just read! Do you already like us on Facebook? Do not ask me again for Facebook Continue to the article » Quantcast Free Unlimited Audiobooks allyoucanbooks.com Download wonderful Audio Books &amp; eBooks now - for Free! Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo Accounting Software xero.com/Accounting-Software Xero™ Accounting Software. Loved by +600K Businesses. Try Now. Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo Visiting Israel? simvisit.com Prepaid Data SIM Card for Visitors Pay Only $29. No Roaming Charges! Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo Start Download download.testforspeed.com Free Download and Install. Start Here Testforspeed. Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo It's gone. Undo What was wrong with this ad? Repetitive Not interested Already purchased Inappropriate Irrelevant Repetitive Inappropriate Irrelevant Repetitive Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d You May Also Like 1.Free Audio Books 2.Listen to Audio Books 3.Top 10 Audio Books 4.Download Books for Free 5.Free Books for Children "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622090425#index"
                   NS1:content=" Home Packages Forums Wiki Bugs AUR Download Arch User Repository From ArchWiki (Redirected from AUR) Jump to: navigation, search Related articles makepkg pacman PKGBUILD .SRCINFO AurJson AUR Trusted User Guidelines Official repositories Arch Build System Creating packages AUR helpers The Arch User Repository (AUR) is a community-driven repository for Arch users. It contains package descriptions (PKGBUILDs) that allow you to compile a package from source with makepkg and then install it via pacman. The AUR was created to organize and share new packages from the community and to help expedite popular packages' inclusion into the community repository. This document explains how users can access and utilize the AUR. A good number of new packages that enter the official repositories start in the AUR. In the AUR, users are able to contribute their own package builds (PKGBUILD and related files). The AUR community has the ability to vote for or against packages in the AUR. If a package becomes popular enough — provided it has a compatible license and good packaging technique — it may be entered into the community repository (directly accessible by pacman or abs). Contents 1 Getting started 2 History 3 Searching 4 Installing packages 4.1 Prerequisites 4.2 Acquire build files 4.3 Build and install the package 5 Feedback 6 Sharing and maintaining packages 6.1 Submitting packages 6.1.1 Rules of submission 6.1.2 Authentication 6.1.3 Creating a new package 6.1.4 Uploading packages 6.2 Maintaining packages 6.3 Other requests 7 Git repositories for AUR3 packages 8 Web interface translation 9 FAQ 9.1 What is the AUR? 9.2 What kind of packages are permitted on the AUR? 9.3 How can I vote for packages in the AUR? 9.4 What is a Trusted User / TU? 9.5 What is the difference between the Arch User Repository and the community repository? 9.6 Foo in the AUR is outdated; what do I do? 9.7 Foo in the AUR does not compile when I run makepkg; what should I do? 9.8 How do I make a PKGBUILD? 9.9 I have a PKGBUILD I would like to submit; can someone check it to see if there are any errors? 9.10 How to get a PKGBUILD into the community repository? 9.11 How can I speed up repeated build processes? 9.12 What is the difference between foo and foo-git packages? 9.13 Why has foo disappeared from the AUR? 9.14 How do I find out if any of my installed packages disappeared from AUR? 10 See also Getting started Users can search and download PKGBUILDs from the AUR Web Interface. These PKGBUILDs can be built into installable packages using makepkg, then installed using pacman. Ensure the base-devel package group is installed (pacman -S --needed base-devel). Glance over the #FAQ for answers to the most common questions. You may wish to adjust /etc/makepkg.conf to optimize for your processor prior to building packages from the AUR. A significant improvement in compile times can be realized on systems with multi-core processors by adjusting the MAKEFLAGS variable. Users can also enable hardware-specific optimizations in GCC via the CFLAGS variable. See makepkg for more information. History In the beginning, there was ftp://ftp.archlinux.org/incoming, and people contributed by simply uploading the PKGBUILD, the needed supplementary files, and the built package itself to the server. The package and associated files remained there until a Package Maintainer saw the program and adopted it. Then the Trusted User Repositories were born. Certain individuals in the community were allowed to host their own repositories for anyone to use. The AUR expanded on this basis, with the aim of making it both more flexible and more usable. In fact, the AUR maintainers are still referred to as TUs (Trusted Users). Between 2015-06-08 and 2015-08-08 the AUR transitioned from version 3.5.1 to 4.0.0, introducing the use of Git repositories for publishing the PKGBUILDs. Searching The AUR web interface can be found at https://aur.archlinux.org/, and an interface suitable for accessing the AUR from a script can be found at https://aur.archlinux.org/rpc.php. Queries search package names and descriptions via a MySQL LIKE comparison. This allows for more flexible search criteria (e.g. try searching for tool%like%grep instead of tool like grep). If you need to search for a description that contains %, escape it with \%. Installing packages Installing packages from the AUR is a relatively simple process. Essentially: Acquire the tarball which contains the PKGBUILD and possibly other required files, like systemd units and patches (but often not the actual code). Extract the tarball (preferably in a directory set aside just for builds from the AUR) with tar -xvf pkgname.tar.gz. Verify that the PKGBUILD and accompanying files are not malicious or untrustworthy. Run makepkg -sri in the directory where the files are saved. This will download the code, resolve the dependencies with pacman, compile it, package it, install the package, and finally remove the build-time dependencies, which are no longer needed. Prerequisites First ensure that the necessary tools are installed: # pacman -S --needed base-devel The package group base-devel should be sufficient; it includes make and other tools needed for compiling from source. Note: Packages in the AUR assume that the base-devel group is installed, i.e. they do not list the group's members as dependencies explicitly. Next choose an appropriate build directory. A build directory is simply a directory where the package will be made or &quot;built&quot; and can be any directory. The examples in the following sections will use ~/builds as the build directory. Acquire build files Locate the package in the AUR. This is done using the search feature (text field at the top of the AUR home page). Clicking the application's name in the search list brings up an information page on the package. Read through the description to confirm that this is the desired package, note when the package was last updated, and read any comments. There are three well-known methods to aquire the build files without the use of an AUR helper: Download the necessary build files by clicking on the &quot;Download snapshot&quot; link under &quot;Package Actions&quot; on the right hand side. This file should be saved to the build directory or otherwise copied to the directory after downloading. In this example, the file is called foo.tar.gz (standard format is pkgname.tar.gz, if it has been properly submitted). Alternatively you can download the tarball from the terminal, changing directories to the build directory first: $ cd ~/builds $ curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/foo.tar.gz It is also possible to clone the Git repository that is labeled as the &quot;Git Clone URL&quot; in the &quot;Package Details&quot;: $ cd ~/build-repos $ git clone https://aur.archlinux.org/foo.git Build and install the package Change directories to the build directory if not already there, then extract the previously downloaded package: $ cd ~/builds $ tar -xvf foo.tar.gz This should create a new directory called foo in the build directory. Note: In the case of a git clone, the extraction process is unnecessary. The git clone has already created the directory foo. Warning: Carefully check all files. cd to the newly created directory and carefully check the PKGBUILD and any .install file for malicious commands. PKGBUILDs are bash scripts containing functions to be executed by makepkg: these functions can contain any valid commands or Bash syntax, so it is totally possible for a PKGBUILD to contain dangerous commands through malice or ignorance on the part of the author. Since makepkg uses fakeroot (and should never be run as root), there is some level of protection but you should never count on it. If in doubt, do not build the package and seek advice on the forums or mailing list. $ cd foo $ nano PKGBUILD $ nano foo.install Make the package. After manually confirming the integrity of the files, run makepkg as a normal user: $ makepkg -sri The -s/--syncdeps switch will automatically resolve and install any dependencies with pacman before building, -r/--rmdeps removes the build-time dependencies after build, as they are no longer needed, and -i/--install will install the package itself. Note: The above example is only a brief summary of the build process. It is highly recommended to read the makepkg and ABS articles for more details. Feedback The AUR Web Interface has a comments facility that allows users to provide suggestions and feedback on improvements to the PKGBUILD contributor. Avoid pasting patches or PKGBUILDs into the comments section: they quickly become obsolete and just end up needlessly taking up lots of space. Instead email those files to the maintainer, or even use a pastebin. One of the easiest activities for all Arch users is to browse the AUR and vote for their favourite packages using the online interface. All packages are eligible for adoption by a TU for inclusion in the community repository, and the vote count is one of the considerations in that process; it is in everyone's interest to vote! Sharing and maintaining packages Note: Please see Talk:Arch User Repository#Scope of the AUR4 section before making changes to this section. Users can share PKGBUILDs using the Arch User Repository. It does not contain any binary packages but allows users to upload PKGBUILDs that can be downloaded by others. These PKGBUILDs are completely unofficial and have not been thoroughly vetted, so they should be used at your own risk. Submitting packages Warning: Before attempting to submit a package you are expected to familiarize yourself with Arch packaging standards and all the articles under &quot;Related articles&quot;. Rules of submission Merge-arrows-2.pngThis article or section is a candidate for merging with Arch packaging standards#AUR packages.Merge-arrows-2.png Notes: Keep the info in one place. (Discuss in Talk:Arch_packaging_standards#Update_&quot;Submitting_packages_to_the_AUR&quot;_section) When submitting a package, observe the following rules: Check the official package database for the package. If any version of it exists, do not submit the package. If the official package is out-of-date, flag it as such. If the official package is broken or is lacking a feature, then please file a bug report. Check the AUR for the package. If it is currently maintained, changes can be submitted in a comment for the maintainer's attention. If it is unmaintained, the package can be adopted and updated as required. Do not create duplicate packages. Verify carefully that what you are uploading is correct. All contributors must read and adhere to the Arch packaging standards when writing PKGBUILDs. This is essential to the smooth running and general success of the AUR. Remember that you are not going to earn any credit or respect from your peers by wasting their time with a bad PKGBUILD. Packages that contain binaries or that are very poorly written may be deleted without warning. If you are unsure about the package (or the build/submission process) in any way, submit the PKGBUILD to the AUR mailing list or the AUR forum on the Arch forums for public review before adding it to the AUR. Make sure the package is useful. Will anyone else want to use this package? Is it extremely specialized? If more than a few people would find this package useful, it is appropriate for submission. The AUR and official repositories are intended for packages which install generally software and software-related content, including one or more of the following: executable(s); config file(s); online or offline documentation for specific software or the Arch Linux distribution as a whole; media intended to be used directly by software. Gain some experience before submitting packages. Build a few packages to learn the process and then submit. Authentication For write access to the AUR, you need to have an SSH key pair. The content of the public key needs to be copied to your profile in My Account, and the corresponding private key configured for the aur.archlinux.org host. For example: ~/.ssh/config Host aur.archlinux.org IdentityFile ~/.ssh/aur User aur You should create a new key pair rather than use an existing one, so that you can selectively revoke the keys should something happen. Note: You can add multiple public keys to your profile by seperating them with a newline in the input field. Creating a new package In order to create a new, empty, local Git repository for a package, simply git clone the remote repository with the corresponding name. If the package does not exist on AUR yet, you will see the following warning: $ git clone git+ssh://aur@aur.archlinux.org/package_name.git Cloning into 'package_name'... warning: You appear to have cloned an empty repository. Checking connectivity... done. If you have already created a git repository, you can simply create a remote for the AUR git repository and then fetch it: $ git remote add remote_name git+ssh://aur@aur.archlinux.org/package_name.git $ git fetch remote_name where remote_name is the name of the remote to create (e.g., &quot;origin&quot;). See Git#Using remotes for more information. The new package will appear on AUR after you push the first commit. You can now add the source files to the local copy of the Git repository. See #Uploading packages. Warning: Your AUR commits will be authored according to your git user name and email address and it is very difficult to change commits after you push them (see FS#45425). If you want to push to AUR under a different name/email, you can change them for this package via git config user.name [...] and git config user.email [...]. Review your commits before pushing them! Uploading packages Tango-view-fullscreen.pngThis article or section needs expansion.Tango-view-fullscreen.png Reason: Recommend to add * to .gitignore and use git add -f to keep the working directory clean as much as possible, see dotfiles#Using gitignore (Discuss in Talk:Arch User Repository#gitignore) The procedure for uploading packages to the AUR is the same for new packages and package updates. You need at least PKGBUILD and .SRCINFO in the top-level directory to push your package to AUR. To upload, add the PKGBUILD, .SRCINFO, and any helper files (like .install files or local source files like .patch) to the staging area with git add, commit them to your local tree with a commit message with git commit, and finally publish the changes to the AUR with git push. For example: $ makepkg --printsrcinfo &gt; .SRCINFO $ git add PKGBUILD .SRCINFO $ git commit -m &quot;useful commit message&quot; $ git push Tip: If you initially forgot to commit the .SRCINFO and added it in a later commit, the AUR will still reject your pushes because the .SRCINFO must exist for every commit. To solve this problem you can use git rebase with the --root option or git filter-branch with the --tree-filter option. Maintaining packages If you maintain a package and want to update the PKGBUILD for your package just resubmit it. Check for feedback and comments from other users and try to incorporate any improvements they suggest; consider it a learning process! Please do not leave a comment containing the version number every time you update the package. This keeps the comment section usable for valuable content mentioned above. AUR helpers are suited better to check for updates. Please do not just submit and forget about packages! It is the maintainer's job to maintain the package by checking for updates and improving the PKGBUILD. If you do not want to continue to maintain the package for some reason, disown the package using the AUR web interface and/or post a message to the AUR Mailing List. Other requests Disownment requests and removal requests can be created by clicking on the &quot;Submit Request&quot; link under &quot;Package Actions&quot; on the right hand side. This automatically sends a notification email to the current package maintainer and to the aur-requests mailing list for discussion. Trusted Users will then either accept or reject the request. Disownment requests will be granted after two weeks if the current maintainer did not react. Package merging has been implemented, users still have to resubmit a package under a new name and may request merging of the old version's comments and votes. Removal requests require the following information: Reason for deletion, at least a short note Notice: A package's comments does not sufficiently point out the reasons why a package is up for deletion. Because as soon as a TU takes action, the only place where such information can be obtained is the aur-requests mailing list. Supporting details, like when a package is provided by another package, if you are the maintainer yourself, it is renamed and the original owner agreed, etc. For merge requests: Name of the package base to merge into. Removal requests can be disapproved, in which case you will likely be advised to disown the package for a future packager's reference. Git repositories for AUR3 packages On 08/08/2015 unmaintained packages have been removed from the AUR with the migration to a Git backend. A Git repository of the old AUR contents is available at git://pkgbuild.com/aur-mirror.git. It was generally updated once per day and is now read-only. If the repository's commit history is not needed, then cloning with the --depth=1 option will be much quicker: $ git clone --depth=1 git://pkgbuild.com/aur-mirror.git You can also visit http://pkgbuild.com/git/aur-mirror.git/tree/&lt;packagename&gt; directly as trying to load http://pkgbuild.com/git/aur-mirror.git/tree in a web browser is going to use a lot of time and memory. For more information, see the following: Git Web interface, forum thread. There is also the AUR Archive on GitHub with a repository for every package that was in AUR 3 during the migration to AUR 4. Web interface translation See i18n.txt in the AUR source tree for information about creating and maintaining translation of the AUR web interface. FAQ What is the AUR? The AUR (Arch User Repository) is a place where the Arch Linux community can upload PKGBUILDs of applications, libraries, etc., and share them with the entire community. Fellow users can then vote for their favorites to be moved into the community repository to be shared with Arch Linux users in binary form. What kind of packages are permitted on the AUR? The packages on the AUR are merely &quot;build scripts&quot;, i.e. recipes to build binaries for pacman. For most cases, everything is permitted, subject to the abovementioned usefulness and scope guidelines, as long as you are in compliance with the licensing terms of the content. For other cases, where it is mentioned that &quot;you may not link&quot; to downloads, i.e. contents that are not redistributable, you may only use the file name itself as the source. This means and requires that users already have the restricted source in the build directory prior to building the package. When in doubt, ask. How can I vote for packages in the AUR? Sign up on the AUR website to get a &quot;Vote for this package&quot; option while browsing packages. After signing up it is also possible to vote from the commandline with aurvote-gitAUR. What is a Trusted User / TU? A Trusted User, in short TU, is a person who is chosen to oversee AUR and the community repository. They are the ones who maintain popular PKGBUILDs in community, and overall keep the AUR running. What is the difference between the Arch User Repository and the community repository? The Arch User Repository is where all PKGBUILDs that users submit are stored, and must be built manually with makepkg. When PKGBUILDs receive enough community interest and the support of a TU, they are moved into the community repository (maintained by the TUs), where the binary packages can be installed with pacman. Foo in the AUR is outdated; what do I do? For starters, you can flag packages out-of-date. If it stays out-of-date for an extended period of time, the best thing to do is email the maintainer. If there is no response from the maintainer after two weeks, you can file an orphan request. When we are talking about a package which is flagged out of date for more than 3 months and is in general not updated for a long time, please add this in your orphan request. In the meantime, you can try updating the package yourself by editing the PKGBUILD - sometimes updates do not require any changes to the build or package process, in which case simply updating the pkgver or source array is sufficient. Foo in the AUR does not compile when I run makepkg; what should I do? You are probably missing something trivial. Run pacman -Syyu before compiling anything with makepkg as the problem may be that your system is not up-to-date. Ensure you have both &quot;base&quot; and &quot;base-devel&quot; groups installed. Try using the &quot;-s&quot; option with makepkg to check and install all the dependencies needed before starting the build process. Be sure to first read the PKGBUILD and the comments on the AUR page of the package in question. The reason might not be trivial after all. Custom CFLAGS, LDFLAGS and MAKEFLAGS can cause failures. It is also possible that the PKGBUILD is broken for everyone. If you cannot figure it out on your own, just report it to the maintainer e.g. by posting the errors you are getting in the comments on the AUR page. How do I make a PKGBUILD? The best resource is the wiki page about creating packages. Remember to look in AUR before creating the PKGBUILD as to not duplicate efforts. I have a PKGBUILD I would like to submit; can someone check it to see if there are any errors? If you would like to have your PKGBUILD critiqued, post it on the aur-general mailing list to get feedback from the TUs and fellow AUR members. You could also get help from the IRC channel, #archlinux on irc.freenode.net. You can also use namcap to check your PKGBUILD and the resulting package for errors. How to get a PKGBUILD into the community repository? Usually, at least 10 votes are required for something to move into community. However, if a TU wants to support a package, it will often be found in the repository. Reaching the required minimum of votes is not the only requirement, there has to be a TU willing to maintain the package. TUs are not required to move a package into the community repository even if it has thousands of votes. Usually when a very popular package stays in the AUR it is because: Arch Linux already has another version of a package in the repositories The package is AUR-centric (e.g. an AUR helper) Its license prohibits redistribution See also DeveloperWiki:Community repo candidates and Rules for Packages Entering the community Repo. How can I speed up repeated build processes? If you frequently compile code that uses GCC - say, a Git or SVN package - you may find ccache, short for &quot;compiler cache&quot;, useful. What is the difference between foo and foo-git packages? Many AUR packages are presented in regular (&quot;stable&quot;) and development versions (&quot;unstable&quot;). A development package usually has a suffix such as -cvs, -svn, -git, -hg, -bzr or -darcs. While development packages are not intended for regular use, they may offer new features or bugfixes. Because these packages download the latest available source when you execute makepkg, a package version to track possible updates is not directly available for these. Likewise, these packages cannot perform an authenticity checksum, instead it is relied on the maintainer(s) of the Git repository. See also System maintenance#Use proven software packages. Why has foo disappeared from the AUR? Packages may be deleted, if they did not fulfill the #Rules of submission. See the aur-requests archives for the reason for deletion. If the package used to exist in AUR3, it might not have been migrated to AUR4. See the #Git repositories for AUR3 packages where these are preserved. How do I find out if any of my installed packages disappeared from AUR? The simplest way is to check the HTTP status of the package's AUR page: #!/bin/bash for pkg in $(pacman -Qqm); do if ! curl -sILfo /dev/null -w '%{http_code}' &quot;https://aur.archlinux.org/packages/$pkg&quot; | grep -q '^2'; then echo &quot;$pkg is missing!&quot; fi done If you use an AUR helper, you can shorten this script by replacing the curl command with whatever command queries the AUR for a package. See also AUR Web Interface AUR Mailing List AUR Mirror Git repository Retrieved from &quot;https://wiki.archlinux.org/index.php?title=Arch_User_Repository&amp;oldid=435258&quot; Categories: Arch User Repository Package development Package management Hidden categories: Pages or sections flagged with Template:Merge Pages or sections flagged with Template:Expansion Navigation menu Views Page Discussion View source History Personal tools Log in Navigation Main page Categories Getting involved Wiki news Random page Search interaction Help Contributing Recent changes Recent talks New pages Statistics Reports Requests Tools What links here Related changes Special pages Printable version Permanent link Page information In other languages العربية Čeština Dansk Deutsch Ελληνικά Español Suomi Français Italiano 日本語 Nederlands Polski Português Română Русский Српски / srpski Türkçe Українська 中文（中国大陆）‎ 中文（台灣）‎ This page was last modified on 17 May 2016, at 11:48. Content is available under GNU Free Documentation License 1.3 or later unless otherwise noted. Privacy policy About ArchWiki Disclaimers "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620162551#index"
                   NS1:content=" Beagle Board - beagleboard.org facebook twitter linkedin YouTube google+ Start ⇓ About Us Getting Started Latest Software Images Subscribe to Newsletter Discover Boards ⇓ ▶ BeagleBone Black ◀ SeeedStudio BeagleBone Green SeeedStudio BeagleBone Green Wireless BeagleBone Capes BeagleBone ▶ BeagleBoard-X15 ◀ BeagleBoard-xM BeagleBoard Learn ⇓ Introduction Books ➚ Wiki ➚ Hardware Support Software Support Adafruit Tutorials ➚ BoneScript Library FAQ Explore ⇓ Blog Projects Google Summer of Code Videos Collaborate ⇓ Live Chat Forums Register Project Subscribe to Newsletter Github ➚ Upverter ➚ Tindie ➚ BeagleBoard.org › support › bone101 Fork me on GitHub BeagleBone 101 Navigation Menu contents BeagleBone: open-hardware expandable computer Artist-tested, engineer approved The left-hand navigation bar will help you explore your board and learn how to program it. Latest ARM open source focused on easy hardware experimentation Ships ready to use Angstrom Distribution with C++, Perl, Python, ... Linux drivers support countless USB peripherals Interactive tutorial to start learning about capabilities Open source means options Texas Instruments releases: Android, Linux, StarterWare (no OS) Linux: Angstrom Distribution, Ubuntu, Debian, ArchLinux, Sabayon, Buildroot, Erlang, Fedora Other: QNX, FreeBSD Projects page SD card images like get-out-of-jail-free card xzcat XXX.img.xz | sudo dd of=/dev/sdX Can be used just as easily for backups Board can be booted from SD using device ROM, so you can't &quot;brick&quot; it 7-zip and Ubuntu Win32DiskImager enable programming cards from Windows Update board with latest software There are multiple ways to run initial software on your board, but it is likley that the simplest way to get an update is to create an exact replica of a bootable microSD card and boot off of it. The BeagleBone Black Rev C has 4GB of eMMC storage that can be initialized by a program booted off of a microSD card. If you want to update to the latest software image for your board, this is a way to do that. See updates for the step-by-step guide. Information about getting the source code for the image shipped with your board can be found at beagleboard.org/source, along with instructions for rebuilding it. BoneScript interactive guide BoneScript is a JavaScript library to simplify learning how to perform physical computing tasks using your embedded Linux. This web page is able to interact with your board to provide an interactive tutorial. Example run restore var b = require('bonescript'); b.pinMode('USR0', b.OUTPUT); b.pinMode('USR1', b.OUTPUT); b.pinMode('USR2', b.OUTPUT); b.pinMode('USR3', b.OUTPUT); b.digitalWrite('USR0', b.HIGH); b.digitalWrite('USR1', b.HIGH); b.digitalWrite('USR2', b.HIGH); b.digitalWrite('USR3', b.HIGH); setTimeout(restore, 2000); Running the above example will cause all of your LEDs to light up at once for a couple of seconds. To learn more about Bonescript, please continue exploring this interactive guide. Cloud9 IDE To begin editing programs that live on your board, you can use the Cloud9 IDE. If your board is plugged into your USB port, click on the &quot;Cloud9 IDE&quot; link above to start the editor. As a simple exercise to become familiar with Cloud9 IDE and the Bonescript JavaScript library, creating a simple application to blink one of the 4 user programmable LEDs on the BeagleBone is a good start. Step A: Close any open file tabs. Step B: Click the &quot;+&quot; in the top-right to create a new file. Step C: Cut and paste the following code into the new tab: var b = require('bonescript'); var state = b.LOW; b.pinMode(&quot;USR0&quot;, b.OUTPUT); b.pinMode(&quot;USR1&quot;, b.OUTPUT); b.pinMode(&quot;USR2&quot;, b.OUTPUT); b.pinMode(&quot;USR3&quot;, b.OUTPUT); setInterval(toggle, 1000); function toggle() { if(state == b.LOW) state = b.HIGH; else state = b.LOW; b.digitalWrite(&quot;USR3&quot;, state); } Step D: Save the file by clicking the disk icon and giving the file a name with the .js extension. Step E: Run the code by selecting the arrow to the right of &quot;run&quot; (or &quot;debug&quot;) in the toolbar to pull down the list of files to run and select your new file. Step F: Observe the BeagleBone USR3 LED blinking steadily about 5 times a second. Step G: Stop the code by clicking &quot;stop&quot; in the toolbar. Additional information about the Bonescript library is available in the presentation viewed in the next step and on-line at http://beagleboard.org/project/bonescript. Autorun Once you've finished developing your JavaScript application, you can have it start upon boot-up by simply dropping it into the 'autorun' subfolder (located at /var/lib/cloud9/autorun in the file system). The systemd bonescript-autorun.service runs at start-up and uses the /usr/lib/node_modules/bonescript/autorun.js script to automatically detect when .js files are in this directory and invoke them as separate processes with node.js. When the files are changed or moved, the script will kill the processes. Resources To learn more about Cloud9 IDE and to synchronize the software on your board with cloud-hosted services, see www.c9.io. For more information on Node.JS, the JavaScript interpreter, see www.nodejs.org. Note that version 0.10.25 is what is currently installed on the default image and you can find the api documentation at www.nodejs.org/docs/v0.10.25/api. For more information about the Bonescript library, see www.beagleboard.org/bonescript. List of common Linux commands pwd - show current directory cd - change current directory ls - list directory contents chmod - change file permissions chown - change file ownership cp - copy files mv - move files rm - remove files mkdir - make directory rmdir - remove directory cat - dump file contents less - progressively dump file vi - edit file (complex) nano - edit file (simple) head - trim dump to top tail - trim dump to bottom echo - print/dump value env - dump environment variables export - set environment variable history - dump command history grep - search dump for strings man - get help on command apropos - show list of man pages find - search for files tar - create/extract file archives gzip - compress a file gunzip - decompress a file du - show disk usage df - show disk free space mount - mount disks tee - write dump to file in parallel hexdump - readable binary dumps Other programming environments The board also ships with gcc, python and more that can be invoked directly from the command-line. Hardware documentation The BeagleBoneBlack wiki page documents all of the known hardware issues, as well as the latest available software, hardware documentation and design materials. Always read the System Reference Manual!!! Design materials Design materials for creating your own customized version of the hardware or for better understanding the design are also linked from the traditional home of &quot;http://beagleboard.org/hardware/design&quot; BeagleBone Black hardware details Revision A5 also provides a POWER button that can be used to enter and exit hibernate modes once that feature is implemented in the software. Headers The expansion headers provide extensive I/O capabitilities. Each digital I/O pin has 8 different modes that can be selected, including GPIO. In GPIO mode, each digital I/O can produce interrupts. Up to 8 digital I/O pins can be configured with pulse-width modulators (PWM) to produce signals to control motors or create analog voltage levels, without taking up any extra CPU cycles. Make sure you don't input more than 1.8V to the analog input pins. This is a single 12-bit analog-to-digital converter with 8 channels, 7 of which are made available on the headers. There is a dedicated header for getting to the UART0 pins and connecting a debug cable. Five additional serial ports are brought to the expansion headers, but one of them only has a single direction brought to the headers. The first I2C bus is utilized for reading EEPROMS on cape add-on boards and can't be used for other digital I/O operations without interfering with that function, but you can still use it to add other I2C devices at available addresses. The second I2C bus is available for you to configure and use. For shifting out data fast, you might consider using one of the SPI ports. Advanced users can also make use of 2 built-in 32-bit 200-MHz microcontrollers called Programmable Real-time Units (PRUs) for performing real-time tasks. Each PRU has some pins associated with it tied directly to registers for super-low-latency access. Capes Capes are really just daughterboards for BeagleBone and BeagleBone Black, but we refer to them enough that a short name makes sense. BeagleBone wears them, they typically have a cut-out around the Ethernet connector that gives them a cape-like shape and Underdog is a Beagle! The beaglebonecapes.com site attempts to consolidate the currently available cape add-on boards for BeagleBone and BeagleBone Black. The types of capes available is quite diverse, from 3D printer capes and touchscreen displays to wireless communications and FPGA-based prototyping tools. Every cape that utilizes pins on the expansion header is expected to notify software on the board by providing contents within EEPROM connected to I2C2 with an address from 0x54 to 0x57. To work with other capes, you can make your address selectable between those values to avoid conflicts. It is also possible to provide through connectors such that other capes can also get connections to the cape header pins Headers on BeagleBone Black BeagleBone Black ships with two virtual capes already on it, one for the on-board eMMC storage and one for the HDMI output. When configured for use these virtual capes consume actual resources. If the eMMC is not placed in reset, the MMC1* signals may not be used without potentially corrupting the contents of your on-board eMMC---and possibly damaging the physical circuit as well. The HDMI signals are all inputs to the HDMI device, so there is no need to put the HDMI device into reset, but using those pins for other operations will cause the HDMI output to be disrupted. However, note that the Linux software typically allocates these for use by the HDMI driver, so your software might not be able to get access to them without unloading that driver. Cape demos Bacon Cape - Teach basic interactions Books For a complete list of books on BeagleBone, see http://beagleboard.org/books. Bad to the Bone Perfect for high-school seniors or freshman univerisity level text, consider using &quot;Bad to the Bone&quot; BeagleBone Cookbook A lighter treatment suitable for a bit broader audience without the backgrounders on programming and electronics, consider &quot;BeagleBone Cookbook&quot; Exploring BeagleBone and Embedded Linux Primer To take things to the next level of detail, consider &quot;Exploring BeagleBone&quot; which can be considered the missing software manual and utilize &quot;Embedded Linux Primer&quot; as a companion textbook to provide a strong base on embedded Linux suitable for working with any hardware that will run Linux. Last updated by jkridner.wordpress.com on Wed Feb 10 2016 14:55:41 GMT-0000 (UTC). 257920 facebook twitter linkedin YouTube google+ Login | Register Boards Getting Started Support Community Projects Videos About Us Privacy policy Terms of Use Creative Commons - Conditions - Attribution and Share AlikeExcept where otherwise noted, content on this site is licensed under a Creative Commons Attribution-Share Alike 3.0 license 400 Bad Request nginx 400 Bad Request nginx [Exploring BeagleBone: Tools and Techniques for Building with Embedded Linux] Exploring BeagleBone:... $22.36 Shop now 400 Bad Request nginx "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620123149#index"
                   NS1:content=" Git --distributed-is-the-new-centralized About Documentation Reference Book Videos External Links Blog Downloads GUI Clients Logos Community Download this book in PDF, mobi, or ePub form for free. This book is translated into Deutsch, 简体中文, 正體中文, Français, 日本語, Nederlands, Русский, 한국어, Português (Brasil) and Čeština. Partial translations available in Arabic, Español, Indonesian, Italiano, Suomi, Македонски, Polski and Türkçe. Translations started for Azərbaycan dili, Беларуская, Català, Esperanto, Español (Nicaragua), فارسی, हिन्दी, Magyar, Norwegian Bokmål, Română, Српски, ภาษาไทย, Tiếng Việt, Українська and Ўзбекча. The source of this book is hosted on GitHub. Patches, suggestions and comments are welcome. Related Material git-clone in Reference git-add in Reference git-init in Reference git-commit in Reference Chapters ▾ 1. Getting Started 1.1 About Version Control 1.2 A Short History of Git 1.3 Git Basics 1.4 The Command Line 1.5 Installing Git 1.6 First-Time Git Setup 1.7 Getting Help 1.8 Summary 2. Git Basics 2.1 Getting a Git Repository 2.2 Recording Changes to the Repository 2.3 Viewing the Commit History 2.4 Undoing Things 2.5 Working with Remotes 2.6 Tagging 2.7 Git Aliases 2.8 Summary 3. Git Branching 3.1 Branches in a Nutshell 3.2 Basic Branching and Merging 3.3 Branch Management 3.4 Branching Workflows 3.5 Remote Branches 3.6 Rebasing 3.7 Summary 4. Git on the Server 4.1 The Protocols 4.2 Getting Git on a Server 4.3 Generating Your SSH Public Key 4.4 Setting Up the Server 4.5 Git Daemon 4.6 Smart HTTP 4.7 GitWeb 4.8 GitLab 4.9 Third Party Hosted Options 4.10 Summary 5. Distributed Git 5.1 Distributed Workflows 5.2 Contributing to a Project 5.3 Maintaining a Project 5.4 Summary 6. GitHub 6.1 Account Setup and Configuration 6.2 Contributing to a Project 6.3 Maintaining a Project 6.4 Managing an organization 6.5 Scripting GitHub 6.6 Summary 7. Git Tools 7.1 Revision Selection 7.2 Interactive Staging 7.3 Stashing and Cleaning 7.4 Signing Your Work 7.5 Searching 7.6 Rewriting History 7.7 Reset Demystified 7.8 Advanced Merging 7.9 Rerere 7.10 Debugging with Git 7.11 Submodules 7.12 Bundling 7.13 Replace 7.14 Credential Storage 7.15 Summary 8. Customizing Git 8.1 Git Configuration 8.2 Git Attributes 8.3 Git Hooks 8.4 An Example Git-Enforced Policy 8.5 Summary 9. Git and Other Systems 9.1 Git as a Client 9.2 Migrating to Git 9.3 Summary 10. Git Internals 10.1 Plumbing and Porcelain 10.2 Git Objects 10.3 Git References 10.4 Packfiles 10.5 The Refspec 10.6 Transfer Protocols 10.7 Maintenance and Data Recovery 10.8 Environment Variables 10.9 Summary A1. Git in Other Environments A1.1 Graphical Interfaces A1.2 Git in Visual Studio A1.3 Git in Eclipse A1.4 Git in Bash A1.5 Git in Zsh A1.6 Git in Powershell A1.7 Summary A2. Embedding Git in your Applications A2.1 Command-line Git A2.2 Libgit2 A2.3 JGit A3. Git Commands A3.1 Setup and Config A3.2 Getting and Creating Projects A3.3 Basic Snapshotting A3.4 Branching and Merging A3.5 Sharing and Updating Projects A3.6 Inspection and Comparison A3.7 Debugging A3.8 Patching A3.9 Email A3.10 External Systems A3.11 Administration A3.12 Plumbing Commands 2nd Edition 2.1 Git Basics - Getting a Git Repository If you can read only one chapter to get going with Git, this is it. This chapter covers every basic command you need to do the vast majority of the things you’ll eventually spend your time doing with Git. By the end of the chapter, you should be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes. We’ll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories. Getting a Git Repository You can get a Git project using two main approaches. The first takes an existing project or directory and imports it into Git. The second clones an existing Git repository from another server. Initializing a Repository in an Existing Directory If you’re starting to track an existing project in Git, you need to go to the project’s directory and type: $ git init This creates a new subdirectory named .git that contains all of your necessary repository files – a Git repository skeleton. At this point, nothing in your project is tracked yet. (See Git Internals for more information about exactly what files are contained in the .git directory you just created.) If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit. You can accomplish that with a few git add commands that specify the files you want to track, followed by a git commit: $ git add *.c $ git add LICENSE $ git commit -m 'initial project version' We’ll go over what these commands do in just a minute. At this point, you have a Git repository with tracked files and an initial commit. Cloning an Existing Repository If you want to get a copy of an existing Git repository – for example, a project you’d like to contribute to – the command you need is git clone. If you’re familiar with other VCS systems such as Subversion, you’ll notice that the command is &quot;clone&quot; and not &quot;checkout&quot;. This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has. Every version of every file for the history of the project is pulled down by default when you run git clone. In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there – see Getting Git on a Server for more details). You clone a repository with git clone [url]. For example, if you want to clone the Git linkable library called libgit2, you can do so like this: $ git clone https://github.com/libgit2/libgit2 That creates a directory named “libgit2”, initializes a .git directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version. If you go into the new libgit2 directory, you’ll see the project files in there, ready to be worked on or used. If you want to clone the repository into a directory named something other than “libgit2”, you can specify that as the next command-line option: $ git clone https://github.com/libgit2/libgit2 mylibgit That command does the same thing as the previous one, but the target directory is called mylibgit. Git has a number of different transfer protocols you can use. The previous example uses the https:// protocol, but you may also see git:// or user@server:path/to/repo.git, which uses the SSH transfer protocol. Getting Git on a Server will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each. prev | next This open sourced site is hosted on GitHub. Patches, suggestions and comments are welcome. Git is a member of Software Freedom Conservancy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616173227#index"
                   NS1:content=" pythonforbeginners.com Home Learn Python Basics Lists Dictionary Code Snippets Modules Home &gt;&gt; How to use urllib2 in Python Feb. 22, 2013 Urllib2 Web &amp; Internet How to use urllib2 in Python Overview While the title of this posts says &quot;Urllib2&quot;, we are going to show some examples where you use urllib, since they are often used together. This is going to be an introduction post of urllib2, where we are going to focus on Getting URLs, Requests, Posts, User Agents and Error handling. Please see the official documentation for more information. Also, this article is written for Python version 2.x HTTP is based on requests and responses - the client makes requests and servers send responses. A program on the Internet can work as a client (access resources) or as a server (makes services available). An URL identifies a resource on the Internet. What is Urllib2? urllib2 is a Python module that can be used for fetching URLs. It defines functions and classes to help with URL actions (basic and digest authentication, redirections, cookies, etc) The magic starts with importing the urllib2 module. What is the difference between urllib and urllib2? While both modules do URL request related stuff, they have different functionality urllib2 can accept a Request object to set the headers for a URL request, urllib accepts only a URL. urllib provides the urlencode method which is used for the generation of GET query strings, urllib2 doesn't have such a function. Because of that urllib and urllib2 are often used together. Please see the documentation for more information. Urllib Urllib2 What is urlopen? urllib2 offers a very simple interface, in the form of the urlopen function. This function is capable of fetching URLs using a variety of different protocols (HTTP, FTP, ...) Just pass the URL to urlopen() to get a &quot;file-like&quot; handle to the remote data. Additionaly, urllib2 offers an interface for handling common situations - like basic authentication, cookies, proxies and so on. These are provided by objects called handlers and openers. Getting URLs This is the most basic way to use the library. Below you can see how to make a simple request with urllib2. Begin by importing the urllib2 module. Place the response in a variable (response) The response is now a file-like object. Read the data from the response into a string (html) Do something with that string. Note if there is a space in the URL, you will need to parse it using urlencode. Let's see an example of how this works. import urllib2 response = urllib2.urlopen('http://pythonforbeginners.com/') print response.info() html = response.read() # do something response.close() # best practice to close the file Note: you can also use an URL starting with &quot;ftp:&quot;, &quot;file:&quot;, etc.). The remote server accepts the incoming values and formats a plain text response to send back. The return value from urlopen() gives access to the headers from the HTTP server through the info() method, and the data for the remote resource via methods like read() and readlines(). Additionally, the file object that is returned by urlopen() is iterable. Simple urllib2 script Let's show another example of a simple urllib2 script import urllib2 response = urllib2.urlopen('http://python.org/') print &quot;Response:&quot;, response # Get the URL. This gets the real URL. print &quot;The URL is: &quot;, response.geturl() # Getting the code print &quot;This gets the code: &quot;, response.code # Get the Headers. # This returns a dictionary-like object that describes the page fetched, # particularly the headers sent by the server print &quot;The Headers are: &quot;, response.info() # Get the date part of the header print &quot;The Date is: &quot;, response.info()['date'] # Get the server part of the header print &quot;The Server is: &quot;, response.info()['server'] # Get all data html = response.read() print &quot;Get all data: &quot;, html # Get only the length print &quot;Get the length :&quot;, len(html) # Showing that the file object is iterable for line in response: print line.rstrip() # Note that the rstrip strips the trailing newlines and carriage returns before # printing the output. Download files with Urllib2 This small script will download a file from pythonforbeginners.com website import urllib2 # file to be written to file = &quot;downloaded_file.html&quot; url = &quot;http://www.pythonforbeginners.com/&quot; response = urllib2.urlopen(url) #open the file for writing fh = open(file, &quot;w&quot;) # read from request while writing to file fh.write(response.read()) fh.close() # You can also use the with statement: with open(file, 'w') as f: f.write(response.read()) The difference in this script is that we use 'wb' , which means that we open the file binary. import urllib2 mp3file = urllib2.urlopen(&quot;http://www.example.com/songs/mp3.mp3&quot;) output = open('test.mp3','wb') output.write(mp3file.read()) output.close() Urllib2 Requests The Request object represents the HTTP request you are making. In its simplest form you create a request object that specifies the URL you want to fetch. Calling urlopen with this Request object returns a response object for the URL requested. The request function under the urllib2 class accepts both url and parameter. When you don't include the data (and only pass the url), the request being made is actually a GET request When you do include the data, the request being made is a POST request, where the url will be your post url, and the parameter will be http post content. Let's take a look at the example below import urllib2 import urllib # Specify the url url = 'http://www.pythonforbeginners.com' # This packages the request (it doesn't make it) request = urllib2.Request(url) # Sends the request and catches the response response = urllib2.urlopen(request) # Extracts the response html = response.read() # Print it out print html You can set the outgoing data on the Request to post it to the server. Additionally, you can pass data extra information(&quot;metadata&quot;) about the data or the about request itself, to the server - this information is sent as HTTP &quot;headers&quot;. If you want to POST data, you have to first create the data to a dictionary. Make sure that you understand what the code does. # Prepare the data query_args = { 'q':'query string', 'foo':'bar' } # This urlencodes your data (that's why we need to import urllib at the top) data = urllib.urlencode(query_args) # Send HTTP POST request request = urllib2.Request(url, data) response = urllib2.urlopen(request) html = response.read() # Print the result print html User Agents The way a browser identifies itself is through the User-Agent header. By default urllib2 identifies itself as Python-urllib/x.y where x and y are the major and minor version numbers of the Python release. This could confuse the site, or just plain not work. With urllib2 you can add your own headers with urllib2. The reason why you would want to do that is that some websites dislike being browsed by programs. If you are creating an application that will access other people’s web resources, it is courteous to include real user agent information in your requests, so they can identify the source of the hits more easily. When you create the Request object you can add your headers to a dictionary, and use the add_header() to set the user agent value before opening the request. That would look something like this: # Importing the module import urllib2 # Define the url url = 'http://www.google.com/#q=my_search' # Add your headers headers = {'User-Agent' : 'Mozilla 5.10'} # Create the Request. request = urllib2.Request(url, None, headers) # Getting the response response = urllib2.urlopen(request) # Print the headers print response.headers You can also add headers with &quot;add_header()&quot; syntax: Request.add_header(key, val) urllib2.Request.add_header The example below, use the Mozilla 5.10 as a User Agent, and that is also what will show up in the web server log file. import urllib2 req = urllib2.Request('http://192.168.1.2/') req.add_header('User-agent', 'Mozilla 5.10') res = urllib2.urlopen(req) html = res.read() print html This is what will show up in the log file. “GET / HTTP/1.1? 200 151 “-” “Mozilla 5.10? urllib.urlparse The urlparse module provides functions to analyze URL strings. It defines a standard interface to break Uniform Resource Locator (URL) strings up in several optional parts, called components, known as (scheme, location, path, query and fragment) Let's say you have an url: http://www.python.org:80/index.html The scheme would be http The location would be www.python.org:80 The path is index.html We don't have any query and fragment The most common functions are urljoin and urlsplit import urlparse url = &quot;http://python.org&quot; domain = urlparse.urlsplit(url)[1].split(':')[0] print &quot;The domain name of the url is: &quot;, domain For more information about urlparse, please see the official documentation. urllib.urlencode When you pass information through a URL, you need to make sure it only uses specific allowed characters. Allowed characters are any alphabetic characters, numerals, and a few special characters that have meaning in the URL string. The most commonly encoded character is the space character. You see this character whenever you see a plus-sign (+) in a URL. This represents the space character. The plus sign acts as a special character representing a space in a URL Arguments can be passed to the server by encoding them with and appending them to the URL. Let's take a look at the following example. import urllib import urllib2 query_args = { 'q':'query string', 'foo':'bar' } # you have to pass in a dictionary encoded_args = urllib.urlencode(query_args) print 'Encoded:', encoded_args url = 'http://python.org/?' + encoded_args print urllib2.urlopen(url).read() If I would print this now, I would get an encoded string like this: q=query+string&amp;foo=bar Python's urlencode takes variable/value pairs and creates a properly escaped querystring: from urllib import urlencode artist = &quot;Kruder &amp; Dorfmeister&quot; artist = urlencode({'ArtistSearch':artist}) This sets the variable artist equal to: Output : ArtistSearch=Kruder+%26+Dorfmeister Error Handling This section of error handling is based on the information from Voidspace.org.uk great article: &quot;Urllib2 - The Missing Manual&quot; urlopen raises URLError when it cannot handle a response. HTTPError is the subclass of URLError raised in the specific case of HTTP URLs. URLError Often, URLError is raised because there is no network connection, or the specified server doesn't exist. In this case, the exception raised will have a 'reason' attribute, which is a tuple containing an error code and a text error message. Example of URLError req = urllib2.Request('http://www.pretend_server.org') try: urllib2.urlopen(req) except URLError, e: print e.reason (4, 'getaddrinfo failed') HTTPError Every HTTP response from the server contains a numeric &quot;status code&quot;. Sometimes the status code indicates that the server is unable to fulfill the request. The default handlers will handle some of these responses for you (for example, if the response is a &quot;redirection&quot; that requests the client fetch the document from a different URL, urllib2 will handle that for you). For those it can't handle, urlopen will raise an HTTPError. Typical errors include '404' (page not found), '403' (request forbidden), and '401' (authentication required). When an error is raised the server responds by returning an HTTP error code and an error page. You can use the HTTPError instance as a response on the page returned. This means that as well as the code attribute, it also has read, geturl, and info, methods. req = urllib2.Request('http://www.python.org/fish.html') try: urllib2.urlopen(req) except URLError, e: print e.code print e.read() from urllib2 import Request, urlopen, URLError req = Request(someurl) try: response = urlopen(req) except URLError, e: if hasattr(e, 'reason'): print 'We failed to reach a server.' print 'Reason: ', e.reason elif hasattr(e, 'code'): print 'The server could not fulfill the request.' print 'Error code: ', e.code else: # everything is fine Please take a look at the links below to get more understanding of the Urllib2 library. Sources and further reading http://pymotw.com/2/urllib2/ http://www.kentsjohnson.com/ http://www.voidspace.org.uk/python/articles/urllib2.shtml http://techmalt.com/ http://www.hacksparrow.com/ http://docs.python.org/2/howto/urllib2.html http://www.stackoverflow.com http://www.oreillynet.com/ Recommended Python Training – Treehouse Treehouse For Python training, our top recommendation is Treehouse. Treehouse is an online training service that teaches web design, web development and app development with videos, quizzes and interactive coding exercises. Treehouse has beginner to advanced Python training that programmers of all levels benefit from. Read more about: Urllib2 Web &amp; Internet Disclosure of Material Connection: Some of the links in the post above are “affiliate links.” This means if you click on the link and purchase the item, I will receive an affiliate commission. Regardless, PythonForBeginners.com only recommend products or services that we try personally and believe will add value to our readers. SEARCH follow @pythonbeginners Categories Basics Cheatsheet Code snippets Development Dictionary Error Handling Lists Loops Modules Strings System &amp; OS Web &amp; Internet Close © Python For Beginners 2012-2016 | Privacy Policy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160727170444#index"
                   NS1:content=" Skip to content &quot;VERSATILITY&quot; JULY 22 - 29 2016 About RFF RFF 2016 Venues Programm 2016 Hillywood 12 RFF 2016 Programm 2016 Venues Mira Nair Mini Film Market News I shot Bi Kidude bikadule UK/Tanzania/2015/Documentary/75mins | Director: Andy Jones Screening: Monday 25th July, Kwetu Film Institute, …Or the curious kidnap of the world’s oldest singer. In 2012, Tanzanian singer, Bi Kidude – the fast-talking, chain-smoking, rebel-rocker – and the oldest performer on the world music stage – was kidnapped at a reported age of 102. In this extraordinary film, Jones follows up on his earlier Kidude biopic, Old As My Tongue, returning to Zanzibar as the accidental detective-film director and would -be interlocutor, determined to get to the bottom of the case. As the story progresses and the entanglements grow murkier, it’s Jones’ sheer love and awe of the great Kidude that shines through. The result is mystery story, a personal odyssey and fitting tribute to one of the greatest African singers of all time. All films sidebar_img03 sidebar_img03 sidebar_img02 sidebar_img02 sidebar_img03 sidebar_img03 About RFF RFF 2016 Rwanda Cinema Centre Kwetu film institute Copyright © 2016 RFF | Branding by Lycamedia Africa Ltd :) I SHOT BI KIDUDE - OFFICIAL TRAILER - Maisha Ya Bi Kidude - filamu mpya If playback doesn't begin shortly, try restarting your device. Share Include playlist An error occurred while retrieving sharing information. Please try again later. Switch camera 0:00 0:00 0:00 / 4:15Live "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160719204656#index"
                   NS1:content=" Amazon.co.uk Try Prime StartYourFreeTrial Electronics &amp; Photo Go Your Account Your Orders Your Lists Your Recommendations Your Subscribe &amp; Save Items Your Prime Membership Manage Your Content and Devices Your Music Library Formerly Cloud Player Your Amazon Drive Free unlimited photo storage for Prime members Your Prime Video Unlimited streaming of thousands of movies and TV shows Your Kindle Unlimited Your Watchlist Your Video Library Your LOVEFiLM Rental List Your Games and Software Library Your Apps &amp; Devices Not Thomas? Sign Out Unlimited One-Day Delivery and more Prime members also enjoy exclusive access to movies and TV shows, a million songs and much more. &gt; Get Started Create a List Find a List Wish from Any Website Add items to your List from anywhere Wedding List Baby Wish List Amazon Video Digital &amp; Prime Music Appstore for Android A great selection of apps and games Amazon Photos and Drive Kindle E-readers &amp; Books Fire Tablets Fire TV Books &amp; Audible Movies, TV, Music &amp; Games Electronics &amp; Computers Home, Garden, Pets &amp; DIY Toys, Children &amp; Baby Clothes, Shoes &amp; Jewellery Sports &amp; Outdoors Beauty, Health &amp; Grocery Car &amp; Motorbike Business, Industry &amp; Science Full Shop Directory Amazon Video Amazon Video Everything you can instantly watch, including films and TV programmes TV Shows This season’s latest episodes or past favorites Movies New releases, old classics and everything in-between Your Watchlist Add videos to watch later Your Video Library Your purchases and rentals Watch Anywhere Tablets, game consoles, TVs and more Digital &amp; Prime Music Prime Music Ad-free streaming music Digital Music Store Buy albums and songs New Releases New and upcoming releases Bargains Save on albums and songs Your Music Library Your Music and Prime Music Listen Anywhere Amazon Music Apps for tablet, phone, desktop, web, home &amp; more Appstore for Android Underground Apps &amp; Games Actually Free apps from Amazon All Apps and Games Games Amazon Coins Spend Less, Play More Amazon Apps Kindle, mobile shopping, MP3, and more Your Apps and Devices View your apps and manage your devices Amazon Photos and Drive About Amazon Drive Secure storage for photos and more Download the free apps For desktop, iOS, and Android Unlimited Photo Storage Free for Prime members Plans and Pricing Everyone starts with 5 GB free Sign in View and manage your digital content Kindle E-readers New - Kindle All book. No glare. Zero distractions. Kindle Paperwhite Our best-selling Kindle - now even better Kindle Voyage Passionately crafted for readers New - Kindle Oasis Reimagined Design. Perfectly Balanced Accessories Covers, chargers, sleeves and more Kindle Store Kindle Books Newsstand Kindle Unlimited Unlimited reading &amp; listening, £7.99 per month Kindle Apps &amp; Resources Free Kindle Reading Apps Kindle Cloud Reader Read your Kindle books in a browser Manage Your Content and Devices Fire Tablets Fire Unbelievable price. Powerful performance Fire HD 6 Powerful and fits in your pocket Fire HD 8 Incredibly thin and light Fire HD 10 Widescreen display Fire Kids Edition Everything kids love. Everything parents want Fire HDX 8.9 Our most powerful tablet ever Accessories Cases, chargers, sleeves and more Content and Resources Amazon Video Apps and Games Digital Music Kindle Books Newsstand Audible Audiobooks Manage Your Content and Devices Watch and Play Amazon Fire TV 4K Ultra HD streaming media player with voice search Fire TV Stick Streaming media stick with Netflix and Amazon Instant Video Fire TV Stick with Voice Remote The only streaming media stick with a voice remote Amazon Fire TV Gamers Bundle Easy, affordable gaming for your HDTV Movies, TV, and More Prime Video Amazon Video Apps &amp; Games for Fire TV Amazon Photos and Drive Books Books Kindle Books Kindle Unlimited Unlimited reading &amp; listening, £7.99 per month Children's Books Textbooks Audible Audiobooks Audible Membership First book free when you try Audible Audible Audiobooks &amp; More Whispersync for Voice Switch between reading and listening Movies, TV, Music &amp; Games Amazon Video DVD &amp; Blu-ray LOVEFiLM By Post CDs &amp; Vinyl Digital Music Musical Instruments &amp; DJ PC &amp; Video Games Digital Games For Consoles, PC and Mac Electronics Camera &amp; Photo TV &amp; Home Cinema Audio &amp; HiFi Sat Nav &amp; Car Electronics Phones &amp; Accessories Electronics Accessories PC &amp; Video Games All Electronics Computers &amp; Office Laptops Tablets Computer Accessories Computer Components Software Printers &amp; Ink All Computers &amp; Accessories Stationery &amp; Office Supplies Home &amp; Garden Kitchen &amp; Home Appliances Cooking &amp; Dining Furniture Bedding &amp; Linens Home Accessories Arts, Crafts &amp; Sewing Garden &amp; Outdoors All Home &amp; Garden Wedding List DIY, Tools &amp; Home Improvement Power, Garden &amp; Hand Tools Kitchen &amp; Bathroom Fixtures Trade &amp; Professional Tools Home Automation Lighting All DIY &amp; Tools Pets Pet Supplies Toys, Children &amp; Baby Toys &amp; Games Baby Kids' Clothing Baby Wish List Amazon Family 20% off nappies, delivery benefits and more Clothing Women Men Kids &amp; Baby Shoes Women Men Kids &amp; Baby Accessories Jewellery Watches Bags Luggage Sunglasses Sports &amp; Outdoors Athletic &amp; Outdoor Clothing Athletic &amp; Outdoor Shoes Fitness Camping &amp; Hiking Cycling Sports Technology Water Sports Winter Sports Golf Running Sports Nutrition All Sports &amp; Outdoors Health &amp; Beauty All Beauty Luxury Beauty Health &amp; Personal Care Diet &amp; Nutrition Men's Grooming Grocery Grocery Beer, Wine &amp; Spirits Luxury Food &amp; Drink AmazonFresh Available in selected areas Subscribe &amp; Save Up to 15% off, free delivery and more Amazon Pantry Everyday essentials in everyday sizes Amazon Vouchers Car &amp; Motorbike Car Accessories &amp; Parts Tools &amp; Equipment Sat Nav &amp; Car Electronics Motorbike Accessories &amp; Parts Business, Industry &amp; Science All Business, Industry &amp; Science Lab Supplies Janitorial Safety Shop byDepartment Hello, ThomasYour AccountNot Thomas? Sign Out TryPrimeYourLists Basket3 Thomas's AmazonToday's DealsGift CardsSellHelp Electronics Best Sellers Deals Phones &amp; Accessories TVs &amp; Home Cinema Camera &amp; Photo Audio &amp; HiFi Computers Wearable Technology Accessories Car Electronics Unlimited One-Day Delivery and more Prime members also enjoy exclusive access to movies and TV shows, a million songs and much more. &gt; Get Started There's a problem loading this menu at the moment. Learn more about Amazon Prime. Amazon Best Sellers Our most popular products based on sales. Updated hourly. Best Sellers in Foldable Headphones 1. Sony MDRZX310 Foldable Headphones - M... Sony MDRZX310 Foldable Headphones - M... 4.5 out of 5 stars (1,205) £25.00 £14.95 22 used &amp; new from £14.95 2. Ecandy Bluetooth Wireless Over-ear St... Ecandy Bluetooth Wireless Over-ear St... 4.2 out of 5 stars (795) £69.99 £15.99 2 used &amp; new from £13.72 3. Sony MDRZX310 Foldable Headphones - M... Sony MDRZX310 Foldable Headphones - M... 4.5 out of 5 stars (1,205) £25.00 £14.59 28 new from £14.59 4. Sony MDRZX310 Foldable Headphones - M... Sony MDRZX310 Foldable Headphones - M... 4.5 out of 5 stars (1,205) £25.00 £19.57 28 used &amp; new from £9.99 5. Sound Intone I68 Foldable Portable 3.... Sound Intone I68 Foldable Portable 3.... 4.3 out of 5 stars (446) £12.99 5 used &amp; new from £11.15 6. Sony MDR-ZX110 Overhead Headphones -... Sony MDR-ZX110 Overhead Headphones -... 4.4 out of 5 stars (1,222) £15.00 £10.65 38 used &amp; new from £10.08 7. Foldable Headphones, Sound Intone MS2... Foldable Headphones, Sound Intone MS2... 4.4 out of 5 stars (527) £19.99 £12.99 4 new from £12.99 8. Deep Bass Foldable HD Headphones with... Deep Bass Foldable HD Headphones with... 3.2 out of 5 stars (924) £5.49 2 new from £3.99 9. Sound Intone I65 Foldable Headphones... Sound Intone I65 Foldable Headphones... 4.2 out of 5 stars (852) £16.99 £13.99 5 new from £13.99 10. AKG K451 High-Performance Foldable Po... AKG K451 High-Performance Foldable Po... 4.5 out of 5 stars (1,305) £79.99 £44.99 6 used &amp; new from £36.16 11. Ecandy Bluetooth Wireless Over-ear St... Ecandy Bluetooth Wireless Over-ear St... 4.2 out of 5 stars (795) £69.99 £15.99 3 used &amp; new from £13.72 12. Beats by Dr. Dre Solo2 On-Ear Headpho... Beats by Dr. Dre Solo2 On-Ear Headpho... 4.1 out of 5 stars (512) £169.99 £122.00 9 used &amp; new from £110.51 13. Sony MDR-V55 DJ Stereo Headphones - Red Sony MDR-V55 DJ Stereo Headphones - Red 4.4 out of 5 stars (1,368) £35.99 17 used &amp; new from £32.60 14. Apple Earphone with Microphone and Re... Apple Earphone with Microphone and Re... 3.7 out of 5 stars (77) £6.49 £6.14 5 used &amp; new from £2.40 15. Sound Intone I65 Foldable Headphones... Sound Intone I65 Foldable Headphones... 4.2 out of 5 stars (852) £16.99 £13.99 5 new from £13.99 16. Earpads Foam Cushions Replacement 4 P... Earpads Foam Cushions Replacement 4 P... 4.3 out of 5 stars (183) £0.74 17 new from £0.70 17. AKG Y50 Portable Foldable On-Ear Head... AKG Y50 Portable Foldable On-Ear Head... 4.5 out of 5 stars (363) £79.99 £49.00 5 used &amp; new from £44.38 18. Bluetooth Headphone, Archeer Bluetoot... Bluetooth Headphone, Archeer Bluetoot... 4.7 out of 5 stars (79) £159.99 £40.99 2 new from £40.99 19. Sony MDRZX310 Foldable Headphones Sony MDRZX310 Foldable Headphones 4.5 out of 5 stars (1,205) £16.90 2 new from £16.90 20. Foldable Headphones, Sound Intone MS2... Foldable Headphones, Sound Intone MS2... 4.4 out of 5 stars (527) £25.99 £12.99 5 new from £12.99 1-20 21-40 41-60 61-80 81-100 close Sample About Best Sellers in Foldable Headphones These lists, updated hourly, contain best-selling items. RSS Feed (Learn more) Subscribe to: Best Sellers &gt; Foldable Headphones ‹ Any Department ‹ Electronics ‹ Accessories ‹ Home Audio &amp; Video Accessories Headphones &amp; Earphones DJ Headphones Earphones Foldable Headphones Noise Cancelling Headphones Portable Headphones Studio Headphones Wireless Headphones More to Explore in Foldable Headphones Hot New Releases ›See More BLUE HEADPHONE FOLDABLE DJ STEREO HEADSET EARPHONE HEADPHONES OVEREAR MP3 IPOD 3.5MM BLUE HEADPHONE FOLDABLE DJ... Sennheiser PXC 550 Wireless Headphone Sennheiser PXC 550 Wireless... £329.99 Lanlonker Stereo Earphone with MIC HM7 Perfume Metal Earbuds HiFi Super Bass In-ear Headphones for iPhone &amp; Samsung Mobile Phone MP3 PC.(Gold) Lanlonker Stereo Earphone w... Most Wished For ›See Top 100 Foldable Headphones, Sound Intone MS200 Stereo Foldable Headset, Over-ear, Tangle free Cable, Light Weight, Outdoors for Smartphones/ Mp3/4 Players/ Laptops/ Computers/ Tablet/ iPhone/ Samsung/ iPod/ Andriod/ HTC(Black/Red) Foldable Headphones, Sound... £12.99 Sound Intone I68 Foldable Portable 3.5mm High-Performance Over-ear Headphones, Adults/Kids Lightweight Headphones, In-line Volume Control and Microphone, Compatible with Most Phones/Apple/Samsung/MP3 Players/PC/Laptops(Black and Orange) Sound Intone I68 Foldable P... £12.99 Bluetooth Headphone, Archeer Bluetooth 4.0 Wireless Earpiece, On-Ear Stereo Headphones Foldable Headset, Noise Reduction Hands-free Voice Calling AptX Headphone with Soft Ear Cups for iPhone, iPad, Ipod, Smartphone, Laptop and MP3 Bluetooth Headphone, Archee... £40.99 Most Gifted ›See Top 100 Sony MDRZX310 Foldable Headphones - Metallic Black Sony MDRZX310 Foldable Head... £14.95 Sony MDRZX310 Foldable Headphones - Metallic White Sony MDRZX310 Foldable Head... £14.59 AKG Y50 Portable Foldable On-Ear Headphones Earphones with Detachable Cable and In-line Volume Remote/Microphone - Black AKG Y50 Portable Foldable O... £49.00 Your recently viewed items and featured recommendations › View or edit your browsing history After viewing product detail pages, look here to find an easy way to navigate back to pages you are interested in. Back to top Get to Know Us Careers About Us Supply Chain Standards Make Money with Us Sell on Amazon Associates Programme Fulfilment by Amazon Advertise Your Products Independently Publish with Us Login and Pay with Amazon Become an Amazon Vendor ›See all Amazon Payment Methods Amazon Money Store Gift Cards Amazon Currency Converter Payment Methods Help Pay Monthly Shop with Points Top Up Your Account Let Us Help You Track Packages or View Orders Delivery Rates &amp; Policies Amazon Prime Returns &amp; Replacements Manage Your Content and Devices Amazon Mobile App Amazon Assistant Help amazon.co.uk Australia Brazil Canada China France Germany India Italy Japan Mexico Netherlands Spain United States AbeBooks Rare &amp; Collectible Books ACX Audiobook Publishing Made Easy Amazon BuyVIP The European Shopping Club Amazon Tickets Music, Theatre &amp; Comedy Amazon Web Services Scalable Cloud Computing Services Audible Download Audio Books Book Depository Books With Free Delivery Worldwide CreateSpace Indie Print Publishing Made Easy Diapers.com Everything But The Baby DPReview Digital Photography Goodreads Book reviews &amp; recommendations IMDb Movies, TV &amp; Celebrities Junglee.com Shop Online in India Kindle Direct Publishing Indie Digital Publishing Made Easy MYHABIT Designer &amp; Fashion Private Sale Site Shopbop Designer Fashion Brands Yoyo.com A Happy Place To Shop For Toys Warehouse Deals Deep Discounts Open-Box Products LOVEFiLM DVD &amp; Blu-ray To Rent By Post Conditions of Use &amp; Sale Privacy Notice Cookies &amp; Internet Advertising © 1996-2016, Amazon.com, Inc. or its affiliates v "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717091535#index"
                   NS1:content=" bannerimage Animated Knots by Grog Follow animatedknots on Twitter TIE KNOTS THE FUN AND EASY WAY Better to know a knot and not need it, than need a knot and not know it. indeximage Home indeximage By Name indeximage Arborist indeximage Basics indeximage Boating indeximage Climbing indeximage Decorative indeximage Fishing indeximage Household indeximage Neckties indeximage Rescue indeximage Rope Care indeximage Scouting indeximage Splicing indeximage Surgical indeximage Various indeximage End Loops indeximage Mid-Loops indeximage Bends indeximage Hitches indeximage Mats indeximage Stoppers indeximage Slide/Grip indeximage Store Braiding a Single Rope Decorative Index Decorative Options Grog's Sliding Splice Turk's Head Fiador Knot Lanyard Knot, Diamond Celtic Knot Mat Masthead Knot Mat Carrick Bend Mat Ocean Plait Mat Wall Knot Double Matthew Walker Wall &amp; Crown Monkey's Fist Cobra Lanyard Knot Crown Sinnet Chain Sinnet Braid Single Rope Three Strand Braid (1) Three Strand Braid (2) French Sinnet One French Sinnet Two Square Sinnet Four Strand #2974 Knot Terminology Knot &amp; Rope Safety Rope Properties Contact About Facebook Fast Medium Slow Loop Normal Mirror Inverted Rotated Animation: Braiding a Single Rope (Decorative)Animation: Braiding a Single Rope Braiding a Single Rope (Decorative) 1 2 3 4 5 6 7 8 9 10 11 12 Braiding a Single Rope Make a loop which is about the length needed for the braid. Pass the end through the loop. Twist the loop to create the next hole for the end to pass through. Repeat as often as required to complete the braid. Braiding a Single Rope Details Uses: Braiding several strands is often learned in childhood as a way of controlling long hair. This animation demonstrates how to make a braid with a single piece of rope. Methods: The animation shows the braid being tied with the rope's end being threaded through the loop. In practice braiding is made in the usual way. The strands are manipulated close against the braid ignoring the fact that the end and the loop are getting tangled. Then after adding several braids, the end is pulled clear of the loop. Disclaimer: Any activity that involves ropes is potentially hazardous. Lives may be at risk - possibly your own. Considerable attention and effort have been made to ensure that these descriptions are accurate. However, many critical factors cannot be controlled, including: the choice of materials; the age, size, and condition of ropes; and the accuracy with which these descriptions have been followed. No responsibility is accepted for incidents arising from the use of this material. Copyright © 2007 - 2016 All Rights Reserved Grog LLC Switch to: Mobile Version Copyright and Trademark Version 6.0 Jan 1, 2016 Get Our Apps adimage adimage adimage Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like Share "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717085525#index"
                   NS1:content=" Home Calligraphers of the world Interviews Videos Inspirational DIY Calligraffiti Sunday , July 3 2016 ABOUT CONTACT LOGIN / REGISTER Inspiring Calligraphy, Calligraphy Letters &amp; LetteringInspiring Calligraphy, Calligraphy Letters &amp; Lettering The best calligraphy, calligraphy styles, calligraphy letters, tattoo lettering,hand lettering and more from all around the world. Home Calligraphers of the world Interviews Videos Inspirational DIY Calligraffiti Breaking News The Best Calligra Home / Calligraphy Tools / Calligraphy Pens &amp; Markers / DIY Oblique pen holder tutorial DIY Oblique pen holder tutorial 1.16k Share 0 Tweet 8 Share 100 Pin 0 Share 1 Share 1 Share DIY Oblique pen holder tutorial : We are bringing you a new tutorial on board! This time you will be learning how to make a homemade oblique pen holder in less than 10 minutes, and a budget under 6 dollars. This tool will be very helpful for calligraphers who want to make copperplate calligraphy, but it can also help in any task you face with a dip pen, like drawing or flowrishing. The reason to use that kind of penholders, is that they help you get a better angle with you pen, so when you apply pressure to make your lines wider, the nib end will be pulled evenly against the paper, allowing you to achieve a maximized performance of the nib flexibility. We hope you enjoy this tutorial and your new homemade tool as much as we do! Let´s do it! Les traemos un nuevo tutorial! Esta vez, aprenderán cómo hacer un portaplumas oblicuo casero, en menos de 10 minutos y con un presupuesto por debajo de los 6 dólares. Esta herramienta sera de mucha utilidad para los calígrafos que quieran hacer caligrafía Copperplate, pero también puede ayudar en cualquier tarea que afronten con su pluma de inmersión, como dibujar o hacer florituras. La razón por la cual utilizar este tipo de portaplumas, es que ayuda a conseguir un mejor ángulo con la pluma, para que cuando apliquen presión para ensanchar los trazos, la punta de la pluma será empujada de manera pareja contra el papel, permitiendo maximizar el desempeño de la flexibilidad de la pluma. Esperamos que disfruten este tutorial, y su nueva herramienta casera tanto como nosotros!Manos a la obra! Materials / Materiales 20141016_154322 -A small tin´s cover (for example: canned tuna, beans, tomatoes, etc. and NO drink cans like beer or soda) / La tap de una lata pequeña (Por ejemplo: Atún, porotos o tomates enlatados, etc. NO latas de bebidas como cerveza o gaseosa) -A cheap brush / Un pincel barato -Copperplate nibs / Plumas para copperplate -A boxcutter or a scalpel / Un cutter o un bisturí -A round nosed pliers / Una pinza de punta redonda – A pair of scissors / Unas tijeras: Step 1: Take the brush and disassemble it. Paso 1: Tomar el pincel y desmontarlo. 20141016_154357 20141016_154408 20141016_154431 20141016_154437 Step 2: Make an incision on the brush holder with the boxcutter, as shown on the pictures Paso 2: Hacer una incisión en el cuerpo del pincel con el cutter, como se muestra en las fotos. 20141016_154503 20141016_154513 20141016_154524 Step 3: Take the cover of the tin and cut out a rectangular piece with the scissors, cut it as big as possible. Paso 3: Tomar la tapa de la lata y cortar una pieza rectangular con las tijeras, cortarla tan grande como sea posible. 20141016_154542 20141016_154713 Step 4: Fold the rectangular piece by the middle. Paso 4: Doblar la pieza rectangular por la mitad. 20141016_154730 Step 5: Tighten the fold with the pliers. Paso 5: Apretar el doblez con las pinzas. 20141016_154754 Step 6: Insert the nib shank on the folded metal piece, and press the plate using the pliers, to adjust the plate to the nib shape. Paso 6: Insertar la parte trasera de la pluma en la pieza de metal doblado, y presionar utilizando las pinzas, para ajustar la chapa a la forma de la pluma. 20141016_154825 20141016_15491620141016_154956 20141016_155050 Step 7: Cut the other side of the plate between a 45-60 degrees angle, you can try out different angle cuts to see which one works better for you. Paso 7: Cortar el otro lado de la chapa en un ángulo de entre 45-60 grados, pueden probar cortes en diferentes ángulos para ver cuál funciona mejor para ustedes. 20141016_155130 20141016_155201 20141016_155217 20141016_155237 Step 8: Take the plate with the nib on, and push it to fit inside the incision you´ve made in the brush body. For faster and more reliable results use glue. Paso 8: Tomar la chapa con el plumín en ella, y presionarlo para que entre en la incision realizada en el cuerpo del pincel. Para resultados mas rápidos y confiables, utilizar pegamento. 20141016_155248 20141016_155324 20141016_155611 Paso 9: You now have your oblique pen holder, in less than 10 minutes. You can also use bamboo sticks, wooden holders or any other stick comfortable to hold and apply the same technique. And you can use a little bolt to fasten the nib holder to the stick, so you can readjust the nib angle. If you do this, you might need to do a round cut to the plate with the scissors, so it can rotate properly. Paso 9: Ahora tienen su portaplumas oblicuo, en menos de 10 minutos. También es posible utilizar varillas de bambú, de madera, o cualquier otro tipo de vara cómoda de sostener y aplicar la misma técnica. Y también se puede utilizar una tuerca pequeña para agarrar el portaplumas a la varilla, así podrán reajustar el ángulo de del plumín. Si hacen esto, podría ser necesario hacer un corte redondo a la chapa con las tijeras, para que pueda girar de manera apropiada. 20141016_155622 The above tutorial was inspired by tutorial of Erkan Tenekeci from Turkey and made by me. The following tutorials and pens are also made by ErkanTenekeci : First using a simple plastic compass and wooden holder: 10357466_328492867318838_1631982029264445509_n DIY oblique pen holder with Bamboo sticks: bamboo oblique pen Another bamboo oblique pen holder: 1517644_10152093470452512_566968805_n DIY Obliqe tootbrush pen holder 🙂 1486717_10152006671457512_692063212_n One more toothbrush pen holder, this time by Barbara Galińska : toothbrush Another creative example of creating very fast effective oblique pen holder is by using 4 chop sticks, binder clip &amp; glue or tape by Jungwook Han ( @hani_han_han_han ) oblique pen holder If you make you own oblique pen holder or another creative way to create it, we would love to see photos of the results, send your pictures and we will publish them! Si realizan su propio portaplumas oblicuo o si tienen alguna otra manera creativa para crearlos, amaríamos ver fotos del resultado, envíanos tus fotos y las publicaremos! info@calligraphymasters.com If you enjoyed this tutorials and want to see some more check out: How to make your own parallel &amp; Gothic pens &amp; How to make your own irongall ink If you like what you’re seeing on our web site feel free to subscribe to our newsletter ( placed in the footer area) thanks for viewing the tutorial. Here is the version of Ah Jo who created his Oblique pen holder based on this tutorials few hours after we posted the tutorial. He followed the tutorial but experimented with some other materials and here is what he came up as his custom made Oblique pen holder, which we are very happy about: custom made oblique pen by ah jo 1.16k Share 0 Tweet 100 Pin 0 Share 8 Share 1 Share 1 Share calligraphy letters calligraphy pen calligraphy tool Calligraphy Tools copperplate pen diy DIY Oblique pen DIY Oblique pen holder DIY Oblique pen holder tutorial diy pen do it your self do it yourself doityourself oblique pen holder tutorial oblique pen tutorial pen diy pen tutorial pen tutorials tutorials 2015-03-17 Milenist About Milenist @https://twitter.com/CalligraMasters Previous Calligraphy art of Paindesignart Next Calligraphy letters by Alvaro Loshuertos Related Articles the king is here tattoo lettering theosone 19 stunning calligraphy tattoo examples by TheosOne May 18, 2016 calligraffiti ambassadors x stroke Calligraffiti Ambassadors vs STROKE Artfair May 11, 2016 the design of words during design week The Design of Words during Design Week in Milan was… May 11, 2016 Check Also 14 How-to calligraphy variations of M-Z letters by Connie Chen 14 How-to calligraphy variations of M-Z letters by Connie Chen 14 How-to calligraphy variations of M-Z letters by Connie Chen: Two weeks ago I posted … 77,746 Fans 3,465 Subscribers 57 Followers 186k Followers 464 Subscribers 3,597 Followers 281 Followers BUY ME A COFFEE Newsletter Email Address: About: Calligraphy Masters is a community of calligraphy artists and calligraphers passionate about the world of letters. We're all united in a mission to re-establish Calligraphy as a leading art and share the inspiration and experience of creativity together. We believe that everyone can become a master of their own calligraphy. Recent Posts 19 stunning calligraphy tattoo examples by TheosOne Korean Calligraphy Lettering by Psycollapse Calligraffiti Ambassadors vs STROKE Artfair The Design of Words during Design Week in Milan was… The Best Calligraphy Apps to Own in 2016 Recent Comments David Grimes on Denis Brown: I think I’m always “doing” calligraphy Michael G on Qi in your calligraphy strokes David Grimes on Calligraffiti Ambassadors vs STROKE Artfair 19 stunning calligraphy tattoo examples by TheosOne - Inspiring Calligraphy, Calligraphy Letters &amp; Lettering on 29 Incredible calligraphy / lettering tattoo designs by Theosone The Design of Words during Design Week in Milan was... - Inspiring Calligraphy, Calligraphy Letters &amp; Lettering on Calligraffiti Ambassadors exhibition at Affenfaust Galerie in Hamburg Powered by Calligraphy Masters | A part of: Calligraphy Masters Ltd © Copyright 2016, All Rights Reserved This website uses cookies to improve your experience. We'll assume you're ok with this, but you can opt-out if you wish.Accept Read More Privacy &amp; Cookies Policy 1.1k Shares 1501008 SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. We were unable to load Disqus. If you are a moderator please see our troubleshooting guide. 0 comments Comments Calligraphy Masters Community Login Disqus Facebook Twitter Google 1 Recommend Recommended Discussion Recommended! Recommending means this is a discussion worth sharing. It gets shared to your followers' Disqus feeds, and gives the creator kudos! Find More Discussions Share Share this discussion on Twitter Facebook Sort by Best Best Newest Oldest Avatar Start the discussion… in this conversation ⬇ Drag and drop your images here to upload them. Media preview placeholder Attach Log in with or sign up with Disqus or pick a name Disqus is a discussion network Disqus never moderates or censors. The rules on this community are its own. Your email is safe with us. It's only used for moderation and optional notifications. Don't be a jerk or do anything illegal. Everything is easier that way. Read full terms and conditions By signing up, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. By posting, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. Be the first to comment. Load more comments Also on Calligraphy Masters TeamBlazin: I picked up a calligraphy pen about 6 years ago 1 comment 6 months ago Avatar Jocelyn Zavala Fredes — TeamBlazin is my biggest inspiration. Simple and awesome Fraktur Capitals calligraphy alphabet by Igor Sturion 2 comments 5 months ago Avatar Ian Staber — hehe, i noticed. i love the B,F,I,U, and W. they are elegant, not too over the top, balanced, and fluid. thanks … Qi in your calligraphy strokes 1 comment 6 months ago Avatar Michael G — Which tool is used for the lettering on these pictures, please ? 22 creative usages of calligraphy 1 comment 6 months ago Avatar Taru Tarvainen — Nice work! I would have included also Yulia Harina's bags: http://harina.ru/content/44/ Powered by Disqus Subscribe Add Disqus to your site Add Disqus Add Privacy ExelateDataExelateData "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160708175529#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » Python HOWTOs » Regular Expression HOWTO¶ Author: A.M. Kuchling &lt;amk@amk.ca&gt; Abstract This document is an introductory tutorial to using regular expressions in Python with the re module. It provides a gentler introduction than the corresponding section in the Library Reference. Introduction¶ The re module was added in Python 1.5, and provides Perl-style regular expression patterns. Earlier versions of Python came with the regex module, which provided Emacs-style patterns. The regex module was removed completely in Python 2.5. Regular expressions (called REs, or regexes, or regex patterns) are essentially a tiny, highly specialized programming language embedded inside Python and made available through the re module. Using this little language, you specify the rules for the set of possible strings that you want to match; this set might contain English sentences, or e-mail addresses, or TeX commands, or anything you like. You can then ask questions such as “Does this string match the pattern?”, or “Is there a match for the pattern anywhere in this string?”. You can also use REs to modify a string or to split it apart in various ways. Regular expression patterns are compiled into a series of bytecodes which are then executed by a matching engine written in C. For advanced use, it may be necessary to pay careful attention to how the engine will execute a given RE, and write the RE in a certain way in order to produce bytecode that runs faster. Optimization isn’t covered in this document, because it requires that you have a good understanding of the matching engine’s internals. The regular expression language is relatively small and restricted, so not all possible string processing tasks can be done using regular expressions. There are also tasks that can be done with regular expressions, but the expressions turn out to be very complicated. In these cases, you may be better off writing Python code to do the processing; while Python code will be slower than an elaborate regular expression, it will also probably be more understandable. Simple Patterns¶ We’ll start by learning about the simplest possible regular expressions. Since regular expressions are used to operate on strings, we’ll begin with the most common task: matching characters. For a detailed explanation of the computer science underlying regular expressions (deterministic and non-deterministic finite automata), you can refer to almost any textbook on writing compilers. Matching Characters¶ Most letters and characters will simply match themselves. For example, the regular expression test will match the string test exactly. (You can enable a case-insensitive mode that would let this RE match Test or TEST as well; more about this later.) There are exceptions to this rule; some characters are special metacharacters, and don’t match themselves. Instead, they signal that some out-of-the-ordinary thing should be matched, or they affect other portions of the RE by repeating them or changing their meaning. Much of this document is devoted to discussing various metacharacters and what they do. Here’s a complete list of the metacharacters; their meanings will be discussed in the rest of this HOWTO. . ^ $ * + ? { } [ ] \ | ( ) The first metacharacters we’ll look at are [ and ]. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a '-'. For example, [abc] will match any of the characters a, b, or c; this is the same as [a-c], which uses a range to express the same set of characters. If you wanted to match only lowercase letters, your RE would be [a-z]. Metacharacters are not active inside classes. For example, [akm$] will match any of the characters 'a', 'k', 'm', or '$'; '$' is usually a metacharacter, but inside a character class it’s stripped of its special nature. You can match the characters not listed within the class by complementing the set. This is indicated by including a '^' as the first character of the class; '^' outside a character class will simply match the '^' character. For example, [^5] will match any character except '5'. Perhaps the most important metacharacter is the backslash, \. As in Python string literals, the backslash can be followed by various characters to signal various special sequences. It’s also used to escape all the metacharacters so you can still match them in patterns; for example, if you need to match a [ or \, you can precede them with a backslash to remove their special meaning: \[ or \\. Some of the special sequences beginning with '\' represent predefined sets of characters that are often useful, such as the set of digits, the set of letters, or the set of anything that isn’t whitespace. The following predefined special sequences are a subset of those available. The equivalent classes are for byte string patterns. For a complete list of sequences and expanded class definitions for Unicode string patterns, see the last part of Regular Expression Syntax. \d Matches any decimal digit; this is equivalent to the class [0-9]. \D Matches any non-digit character; this is equivalent to the class [^0-9]. \s Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v]. \S Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v]. \w Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_]. \W Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_]. These sequences can be included inside a character class. For example, [\s,.] is a character class that will match any whitespace character, or ',' or '.'. The final metacharacter in this section is .. It matches anything except a newline character, and there’s an alternate mode (re.DOTALL) where it will match even a newline. '.' is often used where you want to match “any character”. Repeating Things¶ Being able to match varying sets of characters is the first thing regular expressions can do that isn’t already possible with the methods available on strings. However, if that was the only additional capability of regexes, they wouldn’t be much of an advance. Another capability is that you can specify that portions of the RE must be repeated a certain number of times. The first metacharacter for repeating things that we’ll look at is *. * doesn’t match the literal character *; instead, it specifies that the previous character can be matched zero or more times, instead of exactly once. For example, ca*t will match ct (0 a characters), cat (1 a), caaat (3 a characters), and so forth. The RE engine has various internal limitations stemming from the size of C’s int type that will prevent it from matching over 2 billion a characters; you probably don’t have enough memory to construct a string that large, so you shouldn’t run into that limit. Repetitions such as * are greedy; when repeating a RE, the matching engine will try to repeat it as many times as possible. If later portions of the pattern don’t match, the matching engine will then back up and try again with fewer repetitions. A step-by-step example will make this more obvious. Let’s consider the expression a[bcd]*b. This matches the letter 'a', zero or more letters from the class [bcd], and finally ends with a 'b'. Now imagine matching this RE against the string abcbd. Step Matched Explanation 1 a The a in the RE matches. 2 abcbd The engine matches [bcd]*, going as far as it can, which is to the end of the string. 3 Failure The engine tries to match b, but the current position is at the end of the string, so it fails. 4 abcb Back up, so that [bcd]* matches one less character. 5 Failure Try b again, but the current position is at the last character, which is a 'd'. 6 abc Back up again, so that [bcd]* is only matching bc. 6 abcb Try b again. This time the character at the current position is 'b', so it succeeds. The end of the RE has now been reached, and it has matched abcb. This demonstrates how the matching engine goes as far as it can at first, and if no match is found it will then progressively back up and retry the rest of the RE again and again. It will back up until it has tried zero matches for [bcd]*, and if that subsequently fails, the engine will conclude that the string doesn’t match the RE at all. Another repeating metacharacter is +, which matches one or more times. Pay careful attention to the difference between * and +; * matches zero or more times, so whatever’s being repeated may not be present at all, while + requires at least one occurrence. To use a similar example, ca+t will match cat (1 a), caaat (3 a‘s), but won’t match ct. There are two more repeating qualifiers. The question mark character, ?, matches either once or zero times; you can think of it as marking something as being optional. For example, home-?brew matches either homebrew or home-brew. The most complicated repeated qualifier is {m,n}, where m and n are decimal integers. This qualifier means there must be at least m repetitions, and at most n. For example, a/{1,3}b will match a/b, a//b, and a///b. It won’t match ab, which has no slashes, or a////b, which has four. You can omit either m or n; in that case, a reasonable value is assumed for the missing value. Omitting m is interpreted as a lower limit of 0, while omitting n results in an upper bound of infinity — actually, the upper bound is the 2-billion limit mentioned earlier, but that might as well be infinity. Readers of a reductionist bent may notice that the three other qualifiers can all be expressed using this notation. {0,} is the same as *, {1,} is equivalent to +, and {0,1} is the same as ?. It’s better to use *, +, or ? when you can, simply because they’re shorter and easier to read. Using Regular Expressions¶ Now that we’ve looked at some simple regular expressions, how do we actually use them in Python? The re module provides an interface to the regular expression engine, allowing you to compile REs into objects and then perform matches with them. Compiling Regular Expressions¶ Regular expressions are compiled into pattern objects, which have methods for various operations such as searching for pattern matches or performing string substitutions. &gt;&gt;&gt; &gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile('ab*') &gt;&gt;&gt; p &lt;_sre.SRE_Pattern object at 0x...&gt; re.compile() also accepts an optional flags argument, used to enable various special features and syntax variations. We’ll go over the available settings later, but for now a single example will do: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('ab*', re.IGNORECASE) The RE is passed to re.compile() as a string. REs are handled as strings because regular expressions aren’t part of the core Python language, and no special syntax was created for expressing them. (There are applications that don’t need REs at all, so there’s no need to bloat the language specification by including them.) Instead, the re module is simply a C extension module included with Python, just like the socket or zlib modules. Putting REs in strings keeps the Python language simpler, but has one disadvantage which is the topic of the next section. The Backslash Plague¶ As stated earlier, regular expressions use the backslash character ('\') to indicate special forms or to allow special characters to be used without invoking their special meaning. This conflicts with Python’s usage of the same character for the same purpose in string literals. Let’s say you want to write a RE that matches the string \section, which might be found in a LaTeX file. To figure out what to write in the program code, start with the desired string to be matched. Next, you must escape any backslashes and other metacharacters by preceding them with a backslash, resulting in the string \\section. The resulting string that must be passed to re.compile() must be \\section. However, to express this as a Python string literal, both backslashes must be escaped again. Characters Stage \section Text string to be matched \\section Escaped backslash for re.compile() &quot;\\\\section&quot; Escaped backslashes for a string literal In short, to match a literal backslash, one has to write '\\\\' as the RE string, because the regular expression must be \\, and each backslash must be expressed as \\ inside a regular Python string literal. In REs that feature backslashes repeatedly, this leads to lots of repeated backslashes and makes the resulting strings difficult to understand. The solution is to use Python’s raw string notation for regular expressions; backslashes are not handled in any special way in a string literal prefixed with 'r', so r&quot;\n&quot; is a two-character string containing '\' and 'n', while &quot;\n&quot; is a one-character string containing a newline. Regular expressions will often be written in Python code using this raw string notation. Regular String Raw string &quot;ab*&quot; r&quot;ab*&quot; &quot;\\\\section&quot; r&quot;\\section&quot; &quot;\\w+\\s+\\1&quot; r&quot;\w+\s+\1&quot; Performing Matches¶ Once you have an object representing a compiled regular expression, what do you do with it? Pattern objects have several methods and attributes. Only the most significant ones will be covered here; consult the re docs for a complete listing. Method/Attribute Purpose match() Determine if the RE matches at the beginning of the string. search() Scan through a string, looking for any location where this RE matches. findall() Find all substrings where the RE matches, and returns them as a list. finditer() Find all substrings where the RE matches, and returns them as an iterator. match() and search() return None if no match can be found. If they’re successful, a match object instance is returned, containing information about the match: where it starts and ends, the substring it matched, and more. You can learn about this by interactively experimenting with the re module. If you have Tkinter available, you may also want to look at Tools/scripts/redemo.py, a demonstration program included with the Python distribution. It allows you to enter REs and strings, and displays whether the RE matches or fails. redemo.py can be quite useful when trying to debug a complicated RE. Phil Schwartz’s Kodos is also an interactive tool for developing and testing RE patterns. This HOWTO uses the standard Python interpreter for its examples. First, run the Python interpreter, import the re module, and compile a RE: Python 2.2.2 (#1, Feb 10 2003, 12:57:01) &gt;&gt;&gt; import re &gt;&gt;&gt; p = re.compile('[a-z]+') &gt;&gt;&gt; p #doctest: +ELLIPSIS &lt;_sre.SRE_Pattern object at 0x...&gt; Now, you can try matching various strings against the RE [a-z]+. An empty string shouldn’t match at all, since + means ‘one or more repetitions’. match() should return None in this case, which will cause the interpreter to print no output. You can explicitly print the result of match() to make this clear. &gt;&gt;&gt; &gt;&gt;&gt; p.match(&quot;&quot;) &gt;&gt;&gt; print p.match(&quot;&quot;) None Now, let’s try it on a string that it should match, such as tempo. In this case, match() will return a match object, so you should store the result in a variable for later use. &gt;&gt;&gt; &gt;&gt;&gt; m = p.match('tempo') &gt;&gt;&gt; m &lt;_sre.SRE_Match object at 0x...&gt; Now you can query the match object for information about the matching string. match object instances also have several methods and attributes; the most important ones are: Method/Attribute Purpose group() Return the string matched by the RE start() Return the starting position of the match end() Return the ending position of the match span() Return a tuple containing the (start, end) positions of the match Trying these methods will soon clarify their meaning: &gt;&gt;&gt; &gt;&gt;&gt; m.group() 'tempo' &gt;&gt;&gt; m.start(), m.end() (0, 5) &gt;&gt;&gt; m.span() (0, 5) group() returns the substring that was matched by the RE. start() and end() return the starting and ending index of the match. span() returns both start and end indexes in a single tuple. Since the match() method only checks if the RE matches at the start of a string, start() will always be zero. However, the search() method of patterns scans through the string, so the match may not start at zero in that case. &gt;&gt;&gt; &gt;&gt;&gt; print p.match('::: message') None &gt;&gt;&gt; m = p.search('::: message'); print m &lt;_sre.SRE_Match object at 0x...&gt; &gt;&gt;&gt; m.group() 'message' &gt;&gt;&gt; m.span() (4, 11) In actual programs, the most common style is to store the match object in a variable, and then check if it was None. This usually looks like: p = re.compile( ... ) m = p.match( 'string goes here' ) if m: print 'Match found: ', m.group() else: print 'No match' Two pattern methods return all of the matches for a pattern. findall() returns a list of matching strings: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('\d+') &gt;&gt;&gt; p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping') ['12', '11', '10'] findall() has to create the entire list before it can be returned as the result. The finditer() method returns a sequence of match object instances as an iterator. [1] &gt;&gt;&gt; &gt;&gt;&gt; iterator = p.finditer('12 drummers drumming, 11 ... 10 ...') &gt;&gt;&gt; iterator &lt;callable-iterator object at 0x...&gt; &gt;&gt;&gt; for match in iterator: ... print match.span() ... (0, 2) (22, 24) (29, 31) Module-Level Functions¶ You don’t have to create a pattern object and call its methods; the re module also provides top-level functions called match(), search(), findall(), sub(), and so forth. These functions take the same arguments as the corresponding pattern method, with the RE string added as the first argument, and still return either None or a match object instance. &gt;&gt;&gt; &gt;&gt;&gt; print re.match(r'From\s+', 'Fromage amk') None &gt;&gt;&gt; re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998') &lt;_sre.SRE_Match object at 0x...&gt; Under the hood, these functions simply create a pattern object for you and call the appropriate method on it. They also store the compiled object in a cache, so future calls using the same RE are faster. Should you use these module-level functions, or should you get the pattern and call its methods yourself? That choice depends on how frequently the RE will be used, and on your personal coding style. If the RE is being used at only one point in the code, then the module functions are probably more convenient. If a program contains a lot of regular expressions, or re-uses the same ones in several locations, then it might be worthwhile to collect all the definitions in one place, in a section of code that compiles all the REs ahead of time. To take an example from the standard library, here’s an extract from the deprecated xmllib module: ref = re.compile( ... ) entityref = re.compile( ... ) charref = re.compile( ... ) starttagopen = re.compile( ... ) I generally prefer to work with the compiled object, even for one-time uses, but few people will be as much of a purist about this as I am. Compilation Flags¶ Compilation flags let you modify some aspects of how regular expressions work. Flags are available in the re module under two names, a long name such as IGNORECASE and a short, one-letter form such as I. (If you’re familiar with Perl’s pattern modifiers, the one-letter forms use the same letters; the short form of re.VERBOSE is re.X, for example.) Multiple flags can be specified by bitwise OR-ing them; re.I | re.M sets both the I and M flags, for example. Here’s a table of the available flags, followed by a more detailed explanation of each one. Flag Meaning DOTALL, S Make . match any character, including newlines IGNORECASE, I Do case-insensitive matches LOCALE, L Do a locale-aware match MULTILINE, M Multi-line matching, affecting ^ and $ VERBOSE, X Enable verbose REs, which can be organized more cleanly and understandably. UNICODE, U Makes several escapes like \w, \b, \s and \d dependent on the Unicode character database. I IGNORECASE Perform case-insensitive matching; character class and literal strings will match letters by ignoring case. For example, [A-Z] will match lowercase letters, too, and Spam will match Spam, spam, or spAM. This lowercasing doesn’t take the current locale into account; it will if you also set the LOCALE flag. L LOCALE Make \w, \W, \b, and \B, dependent on the current locale. Locales are a feature of the C library intended to help in writing programs that take account of language differences. For example, if you’re processing French text, you’d want to be able to write \w+ to match words, but \w only matches the character class [A-Za-z]; it won’t match 'é' or 'ç'. If your system is configured properly and a French locale is selected, certain C functions will tell the program that 'é' should also be considered a letter. Setting the LOCALE flag when compiling a regular expression will cause the resulting compiled object to use these C functions for \w; this is slower, but also enables \w+ to match French words as you’d expect. M MULTILINE (^ and $ haven’t been explained yet; they’ll be introduced in section More Metacharacters.) Usually ^ matches only at the beginning of the string, and $ matches only at the end of the string and immediately before the newline (if any) at the end of the string. When this flag is specified, ^ matches at the beginning of the string and at the beginning of each line within the string, immediately following each newline. Similarly, the $ metacharacter matches either at the end of the string and at the end of each line (immediately preceding each newline). S DOTALL Makes the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline. U UNICODE Make \w, \W, \b, \B, \d, \D, \s and \S dependent on the Unicode character properties database. X VERBOSE This flag allows you to write regular expressions that are more readable by granting you more flexibility in how you can format them. When this flag has been specified, whitespace within the RE string is ignored, except when the whitespace is in a character class or preceded by an unescaped backslash; this lets you organize and indent the RE more clearly. This flag also lets you put comments within a RE that will be ignored by the engine; comments are marked by a '#' that’s neither in a character class or preceded by an unescaped backslash. For example, here’s a RE that uses re.VERBOSE; see how much easier it is to read? charref = re.compile(r&quot;&quot;&quot; &amp;[#] # Start of a numeric entity reference ( 0[0-7]+ # Octal form | [0-9]+ # Decimal form | x[0-9a-fA-F]+ # Hexadecimal form ) ; # Trailing semicolon &quot;&quot;&quot;, re.VERBOSE) Without the verbose setting, the RE would look like this: charref = re.compile(&quot;&amp;#(0[0-7]+&quot; &quot;|[0-9]+&quot; &quot;|x[0-9a-fA-F]+);&quot;) In the above example, Python’s automatic concatenation of string literals has been used to break up the RE into smaller pieces, but it’s still more difficult to understand than the version using re.VERBOSE. More Pattern Power¶ So far we’ve only covered a part of the features of regular expressions. In this section, we’ll cover some new metacharacters, and how to use groups to retrieve portions of the text that was matched. More Metacharacters¶ There are some metacharacters that we haven’t covered yet. Most of them will be covered in this section. Some of the remaining metacharacters to be discussed are zero-width assertions. They don’t cause the engine to advance through the string; instead, they consume no characters at all, and simply succeed or fail. For example, \b is an assertion that the current position is located at a word boundary; the position isn’t changed by the \b at all. This means that zero-width assertions should never be repeated, because if they match once at a given location, they can obviously be matched an infinite number of times. | Alternation, or the “or” operator. If A and B are regular expressions, A|B will match any string that matches either A or B. | has very low precedence in order to make it work reasonably when you’re alternating multi-character strings. Crow|Servo will match either Crow or Servo, not Cro, a 'w' or an 'S', and ervo. To match a literal '|', use \|, or enclose it inside a character class, as in [|]. ^ Matches at the beginning of lines. Unless the MULTILINE flag has been set, this will only match at the beginning of the string. In MULTILINE mode, this also matches immediately after each newline within the string. For example, if you wish to match the word From only at the beginning of a line, the RE to use is ^From. &gt;&gt;&gt; &gt;&gt;&gt; print re.search('^From', 'From Here to Eternity') &lt;_sre.SRE_Match object at 0x...&gt; &gt;&gt;&gt; print re.search('^From', 'Reciting From Memory') None $ Matches at the end of a line, which is defined as either the end of the string, or any location followed by a newline character. &gt;&gt;&gt; &gt;&gt;&gt; print re.search('}$', '{block}') &lt;_sre.SRE_Match object at 0x...&gt; &gt;&gt;&gt; print re.search('}$', '{block} ') None &gt;&gt;&gt; print re.search('}$', '{block}\n') &lt;_sre.SRE_Match object at 0x...&gt; To match a literal '$', use \$ or enclose it inside a character class, as in [$]. \A Matches only at the start of the string. When not in MULTILINE mode, \A and ^ are effectively the same. In MULTILINE mode, they’re different: \A still matches only at the beginning of the string, but ^ may match at any location inside the string that follows a newline character. \Z Matches only at the end of the string. \b Word boundary. This is a zero-width assertion that matches only at the beginning or end of a word. A word is defined as a sequence of alphanumeric characters, so the end of a word is indicated by whitespace or a non-alphanumeric character. The following example matches class only when it’s a complete word; it won’t match when it’s contained inside another word. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile(r'\bclass\b') &gt;&gt;&gt; print p.search('no class at all') &lt;_sre.SRE_Match object at 0x...&gt; &gt;&gt;&gt; print p.search('the declassified algorithm') None &gt;&gt;&gt; print p.search('one subclass is') None There are two subtleties you should remember when using this special sequence. First, this is the worst collision between Python’s string literals and regular expression sequences. In Python’s string literals, \b is the backspace character, ASCII value 8. If you’re not using raw strings, then Python will convert the \b to a backspace, and your RE won’t match as you expect it to. The following example looks the same as our previous RE, but omits the 'r' in front of the RE string. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('\bclass\b') &gt;&gt;&gt; print p.search('no class at all') None &gt;&gt;&gt; print p.search('\b' + 'class' + '\b') &lt;_sre.SRE_Match object at 0x...&gt; Second, inside a character class, where there’s no use for this assertion, \b represents the backspace character, for compatibility with Python’s string literals. \B Another zero-width assertion, this is the opposite of \b, only matching when the current position is not at a word boundary. Grouping¶ Frequently you need to obtain more information than just whether the RE matched or not. Regular expressions are often used to dissect strings by writing a RE divided into several subgroups which match different components of interest. For example, an RFC-822 header line is divided into a header name and a value, separated by a ':', like this: From: author@example.com User-Agent: Thunderbird 1.5.0.9 (X11/20061227) MIME-Version: 1.0 To: editor@example.com This can be handled by writing a regular expression which matches an entire header line, and has one group which matches the header name, and another group which matches the header’s value. Groups are marked by the '(', ')' metacharacters. '(' and ')' have much the same meaning as they do in mathematical expressions; they group together the expressions contained inside them, and you can repeat the contents of a group with a repeating qualifier, such as *, +, ?, or {m,n}. For example, (ab)* will match zero or more repetitions of ab. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('(ab)*') &gt;&gt;&gt; print p.match('ababababab').span() (0, 10) Groups indicated with '(', ')' also capture the starting and ending index of the text that they match; this can be retrieved by passing an argument to group(), start(), end(), and span(). Groups are numbered starting with 0. Group 0 is always present; it’s the whole RE, so match object methods all have group 0 as their default argument. Later we’ll see how to express groups that don’t capture the span of text that they match. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('(a)b') &gt;&gt;&gt; m = p.match('ab') &gt;&gt;&gt; m.group() 'ab' &gt;&gt;&gt; m.group(0) 'ab' Subgroups are numbered from left to right, from 1 upward. Groups can be nested; to determine the number, just count the opening parenthesis characters, going from left to right. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('(a(b)c)d') &gt;&gt;&gt; m = p.match('abcd') &gt;&gt;&gt; m.group(0) 'abcd' &gt;&gt;&gt; m.group(1) 'abc' &gt;&gt;&gt; m.group(2) 'b' group() can be passed multiple group numbers at a time, in which case it will return a tuple containing the corresponding values for those groups. &gt;&gt;&gt; &gt;&gt;&gt; m.group(2,1,2) ('b', 'abc', 'b') The groups() method returns a tuple containing the strings for all the subgroups, from 1 up to however many there are. &gt;&gt;&gt; &gt;&gt;&gt; m.groups() ('abc', 'b') Backreferences in a pattern allow you to specify that the contents of an earlier capturing group must also be found at the current location in the string. For example, \1 will succeed if the exact contents of group 1 can be found at the current position, and fails otherwise. Remember that Python’s string literals also use a backslash followed by numbers to allow including arbitrary characters in a string, so be sure to use a raw string when incorporating backreferences in a RE. For example, the following RE detects doubled words in a string. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile(r'(\b\w+)\s+\1') &gt;&gt;&gt; p.search('Paris in the the spring').group() 'the the' Backreferences like this aren’t often useful for just searching through a string — there are few text formats which repeat data in this way — but you’ll soon find out that they’re very useful when performing string substitutions. Non-capturing and Named Groups¶ Elaborate REs may use many groups, both to capture substrings of interest, and to group and structure the RE itself. In complex REs, it becomes difficult to keep track of the group numbers. There are two features which help with this problem. Both of them use a common syntax for regular expression extensions, so we’ll look at that first. Perl 5 added several additional features to standard regular expressions, and the Python re module supports most of them. It would have been difficult to choose new single-keystroke metacharacters or new special sequences beginning with \ to represent the new features without making Perl’s regular expressions confusingly different from standard REs. If you chose &amp; as a new metacharacter, for example, old expressions would be assuming that &amp; was a regular character and wouldn’t have escaped it by writing \&amp; or [&amp;]. The solution chosen by the Perl developers was to use (?...) as the extension syntax. ? immediately after a parenthesis was a syntax error because the ? would have nothing to repeat, so this didn’t introduce any compatibility problems. The characters immediately after the ? indicate what extension is being used, so (?=foo) is one thing (a positive lookahead assertion) and (?:foo) is something else (a non-capturing group containing the subexpression foo). Python adds an extension syntax to Perl’s extension syntax. If the first character after the question mark is a P, you know that it’s an extension that’s specific to Python. Currently there are two such extensions: (?P&lt;name&gt;...) defines a named group, and (?P=name) is a backreference to a named group. If future versions of Perl 5 add similar features using a different syntax, the re module will be changed to support the new syntax, while preserving the Python-specific syntax for compatibility’s sake. Now that we’ve looked at the general extension syntax, we can return to the features that simplify working with groups in complex REs. Since groups are numbered from left to right and a complex expression may use many groups, it can become difficult to keep track of the correct numbering. Modifying such a complex RE is annoying, too: insert a new group near the beginning and you change the numbers of everything that follows it. Sometimes you’ll want to use a group to collect a part of a regular expression, but aren’t interested in retrieving the group’s contents. You can make this fact explicit by using a non-capturing group: (?:...), where you can replace the ... with any other regular expression. &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(&quot;([abc])+&quot;, &quot;abc&quot;) &gt;&gt;&gt; m.groups() ('c',) &gt;&gt;&gt; m = re.match(&quot;(?:[abc])+&quot;, &quot;abc&quot;) &gt;&gt;&gt; m.groups() () Except for the fact that you can’t retrieve the contents of what the group matched, a non-capturing group behaves exactly the same as a capturing group; you can put anything inside it, repeat it with a repetition metacharacter such as *, and nest it within other groups (capturing or non-capturing). (?:...) is particularly useful when modifying an existing pattern, since you can add new groups without changing how all the other groups are numbered. It should be mentioned that there’s no performance difference in searching between capturing and non-capturing groups; neither form is any faster than the other. A more significant feature is named groups: instead of referring to them by numbers, groups can be referenced by a name. The syntax for a named group is one of the Python-specific extensions: (?P&lt;name&gt;...). name is, obviously, the name of the group. Named groups also behave exactly like capturing groups, and additionally associate a name with a group. The match object methods that deal with capturing groups all accept either integers that refer to the group by number or strings that contain the desired group’s name. Named groups are still given numbers, so you can retrieve information about a group in two ways: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile(r'(?P&lt;word&gt;\b\w+\b)') &gt;&gt;&gt; m = p.search( '(((( Lots of punctuation )))' ) &gt;&gt;&gt; m.group('word') 'Lots' &gt;&gt;&gt; m.group(1) 'Lots' Named groups are handy because they let you use easily-remembered names, instead of having to remember numbers. Here’s an example RE from the imaplib module: InternalDate = re.compile(r'INTERNALDATE &quot;' r'(?P&lt;day&gt;[ 123][0-9])-(?P&lt;mon&gt;[A-Z][a-z][a-z])-' r'(?P&lt;year&gt;[0-9][0-9][0-9][0-9])' r' (?P&lt;hour&gt;[0-9][0-9]):(?P&lt;min&gt;[0-9][0-9]):(?P&lt;sec&gt;[0-9][0-9])' r' (?P&lt;zonen&gt;[-+])(?P&lt;zoneh&gt;[0-9][0-9])(?P&lt;zonem&gt;[0-9][0-9])' r'&quot;') It’s obviously much easier to retrieve m.group('zonem'), instead of having to remember to retrieve group 9. The syntax for backreferences in an expression such as (...)\1 refers to the number of the group. There’s naturally a variant that uses the group name instead of the number. This is another Python extension: (?P=name) indicates that the contents of the group called name should again be matched at the current point. The regular expression for finding doubled words, (\b\w+)\s+\1 can also be written as (?P&lt;word&gt;\b\w+)\s+(?P=word): &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile(r'(?P&lt;word&gt;\b\w+)\s+(?P=word)') &gt;&gt;&gt; p.search('Paris in the the spring').group() 'the the' Lookahead Assertions¶ Another zero-width assertion is the lookahead assertion. Lookahead assertions are available in both positive and negative form, and look like this: (?=...) Positive lookahead assertion. This succeeds if the contained regular expression, represented here by ..., successfully matches at the current location, and fails otherwise. But, once the contained expression has been tried, the matching engine doesn’t advance at all; the rest of the pattern is tried right where the assertion started. (?!...) Negative lookahead assertion. This is the opposite of the positive assertion; it succeeds if the contained expression doesn’t match at the current position in the string. To make this concrete, let’s look at a case where a lookahead is useful. Consider a simple pattern to match a filename and split it apart into a base name and an extension, separated by a .. For example, in news.rc, news is the base name, and rc is the filename’s extension. The pattern to match this is quite simple: .*[.].*$ Notice that the . needs to be treated specially because it’s a metacharacter; I’ve put it inside a character class. Also notice the trailing $; this is added to ensure that all the rest of the string must be included in the extension. This regular expression matches foo.bar and autoexec.bat and sendmail.cf and printers.conf. Now, consider complicating the problem a bit; what if you want to match filenames where the extension is not bat? Some incorrect attempts: .*[.][^b].*$ The first attempt above tries to exclude bat by requiring that the first character of the extension is not a b. This is wrong, because the pattern also doesn’t match foo.bar. .*[.]([^b]..|.[^a].|..[^t])$ The expression gets messier when you try to patch up the first solution by requiring one of the following cases to match: the first character of the extension isn’t b; the second character isn’t a; or the third character isn’t t. This accepts foo.bar and rejects autoexec.bat, but it requires a three-letter extension and won’t accept a filename with a two-letter extension such as sendmail.cf. We’ll complicate the pattern again in an effort to fix it. .*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$ In the third attempt, the second and third letters are all made optional in order to allow matching extensions shorter than three characters, such as sendmail.cf. The pattern’s getting really complicated now, which makes it hard to read and understand. Worse, if the problem changes and you want to exclude both bat and exe as extensions, the pattern would get even more complicated and confusing. A negative lookahead cuts through all this confusion: .*[.](?!bat$)[^.]*$ The negative lookahead means: if the expression bat doesn’t match at this point, try the rest of the pattern; if bat$ does match, the whole pattern will fail. The trailing $ is required to ensure that something like sample.batch, where the extension only starts with bat, will be allowed. The [^.]* makes sure that the pattern works when there are multiple dots in the filename. Excluding another filename extension is now easy; simply add it as an alternative inside the assertion. The following pattern excludes filenames that end in either bat or exe: .*[.](?!bat$|exe$)[^.]*$ Modifying Strings¶ Up to this point, we’ve simply performed searches against a static string. Regular expressions are also commonly used to modify strings in various ways, using the following pattern methods: Method/Attribute Purpose split() Split the string into a list, splitting it wherever the RE matches sub() Find all substrings where the RE matches, and replace them with a different string subn() Does the same thing as sub(), but returns the new string and the number of replacements Splitting Strings¶ The split() method of a pattern splits a string apart wherever the RE matches, returning a list of the pieces. It’s similar to the split() method of strings but provides much more generality in the delimiters that you can split by; split() only supports splitting by whitespace or by a fixed string. As you’d expect, there’s a module-level re.split() function, too. .split(string[, maxsplit=0]) Split string by the matches of the regular expression. If capturing parentheses are used in the RE, then their contents will also be returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits are performed. You can limit the number of splits made, by passing a value for maxsplit. When maxsplit is nonzero, at most maxsplit splits will be made, and the remainder of the string is returned as the final element of the list. In the following example, the delimiter is any sequence of non-alphanumeric characters. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile(r'\W+') &gt;&gt;&gt; p.split('This is a test, short and sweet, of split().') ['This', 'is', 'a', 'test', 'short', 'and', 'sweet', 'of', 'split', ''] &gt;&gt;&gt; p.split('This is a test, short and sweet, of split().', 3) ['This', 'is', 'a', 'test, short and sweet, of split().'] Sometimes you’re not only interested in what the text between delimiters is, but also need to know what the delimiter was. If capturing parentheses are used in the RE, then their values are also returned as part of the list. Compare the following calls: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile(r'\W+') &gt;&gt;&gt; p2 = re.compile(r'(\W+)') &gt;&gt;&gt; p.split('This... is a test.') ['This', 'is', 'a', 'test', ''] &gt;&gt;&gt; p2.split('This... is a test.') ['This', '... ', 'is', ' ', 'a', ' ', 'test', '.', ''] The module-level function re.split() adds the RE to be used as the first argument, but is otherwise the same. &gt;&gt;&gt; &gt;&gt;&gt; re.split('[\W]+', 'Words, words, words.') ['Words', 'words', 'words', ''] &gt;&gt;&gt; re.split('([\W]+)', 'Words, words, words.') ['Words', ', ', 'words', ', ', 'words', '.', ''] &gt;&gt;&gt; re.split('[\W]+', 'Words, words, words.', 1) ['Words', 'words, words.'] Search and Replace¶ Another common task is to find all the matches for a pattern, and replace them with a different string. The sub() method takes a replacement value, which can be either a string or a function, and the string to be processed. .sub(replacement, string[, count=0]) Returns the string obtained by replacing the leftmost non-overlapping occurrences of the RE in string by the replacement replacement. If the pattern isn’t found, string is returned unchanged. The optional argument count is the maximum number of pattern occurrences to be replaced; count must be a non-negative integer. The default value of 0 means to replace all occurrences. Here’s a simple example of using the sub() method. It replaces colour names with the word colour: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('(blue|white|red)') &gt;&gt;&gt; p.sub('colour', 'blue socks and red shoes') 'colour socks and colour shoes' &gt;&gt;&gt; p.sub('colour', 'blue socks and red shoes', count=1) 'colour socks and red shoes' The subn() method does the same work, but returns a 2-tuple containing the new string value and the number of replacements that were performed: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('(blue|white|red)') &gt;&gt;&gt; p.subn('colour', 'blue socks and red shoes') ('colour socks and colour shoes', 2) &gt;&gt;&gt; p.subn('colour', 'no colours at all') ('no colours at all', 0) Empty matches are replaced only when they’re not adjacent to a previous match. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('x*') &gt;&gt;&gt; p.sub('-', 'abxd') '-a-b-d-' If replacement is a string, any backslash escapes in it are processed. That is, \n is converted to a single newline character, \r is converted to a carriage return, and so forth. Unknown escapes such as \j are left alone. Backreferences, such as \6, are replaced with the substring matched by the corresponding group in the RE. This lets you incorporate portions of the original text in the resulting replacement string. This example matches the word section followed by a string enclosed in {, }, and changes section to subsection: &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('section{ ( [^}]* ) }', re.VERBOSE) &gt;&gt;&gt; p.sub(r'subsection{\1}','section{First} section{second}') 'subsection{First} subsection{second}' There’s also a syntax for referring to named groups as defined by the (?P&lt;name&gt;...) syntax. \g&lt;name&gt; will use the substring matched by the group named name, and \g&lt;number&gt; uses the corresponding group number. \g&lt;2&gt; is therefore equivalent to \2, but isn’t ambiguous in a replacement string such as \g&lt;2&gt;0. (\20 would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character '0'.) The following substitutions are all equivalent, but use all three variations of the replacement string. &gt;&gt;&gt; &gt;&gt;&gt; p = re.compile('section{ (?P&lt;name&gt; [^}]* ) }', re.VERBOSE) &gt;&gt;&gt; p.sub(r'subsection{\1}','section{First}') 'subsection{First}' &gt;&gt;&gt; p.sub(r'subsection{\g&lt;1&gt;}','section{First}') 'subsection{First}' &gt;&gt;&gt; p.sub(r'subsection{\g&lt;name&gt;}','section{First}') 'subsection{First}' replacement can also be a function, which gives you even more control. If replacement is a function, the function is called for every non-overlapping occurrence of pattern. On each call, the function is passed a match object argument for the match and can use this information to compute the desired replacement string and return it. In the following example, the replacement function translates decimals into hexadecimal: &gt;&gt;&gt; &gt;&gt;&gt; def hexrepl(match): ... &quot;Return the hex string for a decimal number&quot; ... value = int(match.group()) ... return hex(value) ... &gt;&gt;&gt; p = re.compile(r'\d+') &gt;&gt;&gt; p.sub(hexrepl, 'Call 65490 for printing, 49152 for user code.') 'Call 0xffd2 for printing, 0xc000 for user code.' When using the module-level re.sub() function, the pattern is passed as the first argument. The pattern may be provided as an object or as a string; if you need to specify regular expression flags, you must either use a pattern object as the first parameter, or use embedded modifiers in the pattern string, e.g. sub(&quot;(?i)b+&quot;, &quot;x&quot;, &quot;bbbb BBBB&quot;) returns 'x x'. Common Problems¶ Regular expressions are a powerful tool for some applications, but in some ways their behaviour isn’t intuitive and at times they don’t behave the way you may expect them to. This section will point out some of the most common pitfalls. Use String Methods¶ Sometimes using the re module is a mistake. If you’re matching a fixed string, or a single character class, and you’re not using any re features such as the IGNORECASE flag, then the full power of regular expressions may not be required. Strings have several methods for performing operations with fixed strings and they’re usually much faster, because the implementation is a single small C loop that’s been optimized for the purpose, instead of the large, more generalized regular expression engine. One example might be replacing a single fixed string with another one; for example, you might replace word with deed. re.sub() seems like the function to use for this, but consider the replace() method. Note that replace() will also replace word inside words, turning swordfish into sdeedfish, but the naive RE word would have done that, too. (To avoid performing the substitution on parts of words, the pattern would have to be \bword\b, in order to require that word have a word boundary on either side. This takes the job beyond replace()‘s abilities.) Another common task is deleting every occurrence of a single character from a string or replacing it with another single character. You might do this with something like re.sub('\n', ' ', S), but translate() is capable of doing both tasks and will be faster than any regular expression operation can be. In short, before turning to the re module, consider whether your problem can be solved with a faster and simpler string method. match() versus search()¶ The match() function only checks if the RE matches at the beginning of the string while search() will scan forward through the string for a match. It’s important to keep this distinction in mind. Remember, match() will only report a successful match which will start at 0; if the match wouldn’t start at zero, match() will not report it. &gt;&gt;&gt; &gt;&gt;&gt; print re.match('super', 'superstition').span() (0, 5) &gt;&gt;&gt; print re.match('super', 'insuperable') None On the other hand, search() will scan forward through the string, reporting the first match it finds. &gt;&gt;&gt; &gt;&gt;&gt; print re.search('super', 'superstition').span() (0, 5) &gt;&gt;&gt; print re.search('super', 'insuperable').span() (2, 7) Sometimes you’ll be tempted to keep using re.match(), and just add .* to the front of your RE. Resist this temptation and use re.search() instead. The regular expression compiler does some analysis of REs in order to speed up the process of looking for a match. One such analysis figures out what the first character of a match must be; for example, a pattern starting with Crow must match starting with a 'C'. The analysis lets the engine quickly scan through the string looking for the starting character, only trying the full match if a 'C' is found. Adding .* defeats this optimization, requiring scanning to the end of the string and then backtracking to find a match for the rest of the RE. Use re.search() instead. Greedy versus Non-Greedy¶ When repeating a regular expression, as in a*, the resulting action is to consume as much of the pattern as possible. This fact often bites you when you’re trying to match a pair of balanced delimiters, such as the angle brackets surrounding an HTML tag. The naive pattern for matching a single HTML tag doesn’t work because of the greedy nature of .*. &gt;&gt;&gt; &gt;&gt;&gt; s = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;' &gt;&gt;&gt; len(s) 32 &gt;&gt;&gt; print re.match('&lt;.*&gt;', s).span() (0, 32) &gt;&gt;&gt; print re.match('&lt;.*&gt;', s).group() &lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt; The RE matches the '&lt;' in &lt;html&gt;, and the .* consumes the rest of the string. There’s still more left in the RE, though, and the &gt; can’t match at the end of the string, so the regular expression engine has to backtrack character by character until it finds a match for the &gt;. The final match extends from the '&lt;' in &lt;html&gt; to the '&gt;' in &lt;/title&gt;, which isn’t what you want. In this case, the solution is to use the non-greedy qualifiers *?, +?, ??, or {m,n}?, which match as little text as possible. In the above example, the '&gt;' is tried immediately after the first '&lt;' matches, and when it fails, the engine advances a character at a time, retrying the '&gt;' at every step. This produces just the right result: &gt;&gt;&gt; &gt;&gt;&gt; print re.match('&lt;.*?&gt;', s).group() &lt;html&gt; (Note that parsing HTML or XML with regular expressions is painful. Quick-and-dirty patterns will handle common cases, but HTML and XML have special cases that will break the obvious regular expression; by the time you’ve written a regular expression that handles all of the possible cases, the patterns will be very complicated. Use an HTML or XML parser module for such tasks.) Using re.VERBOSE¶ By now you’ve probably noticed that regular expressions are a very compact notation, but they’re not terribly readable. REs of moderate complexity can become lengthy collections of backslashes, parentheses, and metacharacters, making them difficult to read and understand. For such REs, specifying the re.VERBOSE flag when compiling the regular expression can be helpful, because it allows you to format the regular expression more clearly. The re.VERBOSE flag has several effects. Whitespace in the regular expression that isn’t inside a character class is ignored. This means that an expression such as dog | cat is equivalent to the less readable dog|cat, but [a b] will still match the characters 'a', 'b', or a space. In addition, you can also put comments inside a RE; comments extend from a # character to the next newline. When used with triple-quoted strings, this enables REs to be formatted more neatly: pat = re.compile(r&quot;&quot;&quot; \s* # Skip leading whitespace (?P&lt;header&gt;[^:]+) # Header name \s* : # Whitespace, and a colon (?P&lt;value&gt;.*?) # The header's value -- *? used to # lose the following trailing whitespace \s*$ # Trailing whitespace to end-of-line &quot;&quot;&quot;, re.VERBOSE) This is far more readable than: pat = re.compile(r&quot;\s*(?P&lt;header&gt;[^:]+)\s*:(?P&lt;value&gt;.*?)\s*$&quot;) Feedback¶ Regular expressions are a complicated topic. Did this document help you understand them? Were there parts that were unclear, or Problems you encountered that weren’t covered here? If so, please send suggestions for improvements to the author. The most complete book on regular expressions is almost certainly Jeffrey Friedl’s Mastering Regular Expressions, published by O’Reilly. Unfortunately, it exclusively concentrates on Perl and Java’s flavours of regular expressions, and doesn’t contain any Python material at all, so it won’t be useful as a reference for programming in Python. (The first edition covered Python’s now-removed regex module, which won’t help you much.) Consider checking it out from your library. Footnotes [1] Introduced in Python 2.2.2. Table Of Contents Regular Expression HOWTO Introduction Simple Patterns Matching Characters Repeating Things Using Regular Expressions Compiling Regular Expressions The Backslash Plague Performing Matches Module-Level Functions Compilation Flags More Pattern Power More Metacharacters Grouping Non-capturing and Named Groups Lookahead Assertions Modifying Strings Splitting Strings Search and Replace Common Problems Use String Methods match() versus search() Greedy versus Non-Greedy Using re.VERBOSE Feedback Previous topic Logging Cookbook Next topic Socket Programming HOWTO This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » Python HOWTOs » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 25, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160802170621#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" edunham is a &quot;DevOps&quot; Engineer at Mozilla Research Blog About CFP Aggregator Sites Issue Aggregators Lists Other Pages Talks Creative Commons License June 08, 2015 Playing with Ansible Although I currently expect that I’ll end up choosing Salt for work, I’ve gotten nerdsniped by the apparent simplicity and power of Ansible. Since I’m trying to make a habit of narrating my first encounters with various tools, here’s a short novel of 0 through cloning a repo. Starting Out Google hands me the intro doc right away. I noticed this when researcing my config management comparison post as well – Googling for a given topic results in more useful docs and less marketing with Ansible than CFEngine, Puppet, or Chef. I install Ansible with yaourt -S ansible. This installs it: $ ansible --version ansible 1.9.1 configured module search path = None I wonder what that search path info is for... I’m sure the docs will tell me when I need it. So, I need an /etc/ansible/hosts First, I need a host to put in it. Since I use DigitalOcean for my VPS and have some free credit lying around from the GitHub Education Pack, I go spin up a $5/month droplet to play with. I make sure to check the box to add my SSH key, and add the key to my agent locally, to avoid hassles in the future. Write /etc/ansible/hosts I grab the droplet’s IP address from the digitalocean console, then I drop it into /etc/ansible/hosts. I wonder for a minute whether there’s any way to alias the host or generally refer to it by something more friendly than an IP address, thn I remember that there ways of grouping hosts in order to address them and the tutorial gets to that later on. Oh yeah, and I did that thing I always do and forgot to open the file in /etc/ with sudo, hitting that familiar error: E45: 'readonly' option is set (add ! to override) The fix is to write with: :w !sudo tee % This says “write the file; shell out to sudo tee, give it the contents of the whole file (%) as an argument” (thanks stackoverflow!) Ping the Host(s) Next tutorial step is ansible all -m ping. I fumbled the typing on the first try, and learned something from the error: $ ansible all -m png 162.243.134.126 | FAILED =&gt; module png not found in configured module paths This tells me that the -m ping is actually running a module on it. I took a look at the source to see if the ping module is easy to find to read, but I’m not familiar enough to know exactly where to find it. A bit more clicking around suggests it’s probably somewhere in here. Oh hey, I found it! It’s only in like the second place I checked. It’s short and easy to read. The docstring is pretty interesting; the C(path) syntax appears to be some kind of cross-referencing directive. So we make a module with some boilerplate in it, import the basic utils, then blindly call main(). This is totally something I could write if I needed to. So, when I spell ping correctly, I get: $ ansible all -m ping The authenticity of host '162.243.134.126 (162.243.134.126)' can't be established. ECDSA key fingerprint is SHA256:pMoI7FvPgBiFqosItd7rmlHABpiKWBToM/asCOgbAh8. Are you sure you want to continue connecting (yes/no)? and then tell it yes. Cool story, standard SSH stuff. And then... $ ansible all -m ping 162.243.134.126 | FAILED =&gt; SSH Error: Permission denied (publickey,password). while connecting to 162.243.134.126:22 It is sometimes useful to re-run the command using -vvvv, which prints SSH debug output to help diagnose the issue. Well okay then, I guess that makes sense considering that the user on the remote box is root and locally I’m edunham. Let’s see... I could totally look this up, but let’s blindly guess that the -u flag is what’s necessary...: $ ansible all -u root -m ping 162.243.134.126 | success &gt;&gt; { &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot; } Ah-ha, it behaves like a proper little Unix utility with guessable flags! Good social engineering tactic there, Ansible, making me feel all clever... Let’s install a thing! With this initial success, I’m going to deviate from the tutorial a bit and see how Ansible handles trying to install a package from source. I’ve decided to build a mockup of play.rust-lang.org, since it’s one of the SPOFs that’s scaring me the worst about Rust’s infrastructure at the moment. It’s an Arch box that hasn’t been updated in a while, running Arch because this tool called playpen comes packaged for Arch but you have to biuld it yourself on Ubuntu. (Yes, the devs were doing the ops work before I got there). So, I want to install playpen from source. First, I guess, I should probably install Git from the package manager, so that Ansible can clone playpen. The tutorial’s next step is to run an echo command, so I guess I could repurpose it into an apt-get command, but that seems very wrong. Let’s see what’s next... The inventory section of the intro comes next, and it explains how to name groups of hosts. Turns out that happens in /etc/ansible/hosts as well... I’d really rather not keep the metadata on how things are grouped up over in /etc/. I feel like it might be better to put the inventory in the config repo... and stackoverflow points out that one can pass the -i flag to specify a custom inventory location. The best practices doc (thank you, Ansible, for having a best practices doc that’s actually easy to find) has a section on content organization, which on the one hand doesn’t say much about keeping a copy of the hosts file, but on the other hand reassures me by not forbidding it either. I’m just a little bit worried about keeping the grouping metadata of the hosts file from getting lost, since running commands on the correct hosts is a core feature of any good CM tool. So, change workflow a little: $ cp /etc/ansible/hosts ~/repos/toy-ansible/hosts $ cat hosts [server] play ansible_ssh_host=162.243.134.126 $ ansible play -u root -m ping -i hosts play | success &gt;&gt; { &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot; } Okay, now I can keep this metadata in the repository if I want to. Still not totally sure what best practices will be here for my particular use case; maybe using DNS; maybe storing the exact IPs in a file that never gets committed but leaving hosts as a skeleton to document what goes where if anyone else tries to set up a copy; maybe publishing it and just trusting AWS firewall to do what i tell it to. Because if ansible gets run from or via the bastion, I can leave SSH access just as locked down as it’s always been. So. One PR to fix confusing wording later, I’m back to figuring out the next file to stick in my repo to explain to the Ansible world that this “play” host needs to have Git installed on it. ...okay, that’s a lot of /etc/ansible/whatever files and dirs in the tutorial. Maybe I’m supposed to be keeping all of /etc/ansible in Git, rather than my arbitrary repos place? Maybe there’s some prefix in an environment variable that I can set so I odn’t have to keep passing -i every time? Okay, tutorial. All this stuff about managing many hosts is cool and I’ll come back to it later, but can we get on with the single host case already? And no, tutorial, I do NOT want to learn about ad-hoc commands before playbooks. Okay, you can shut everything down on Christmas, but that will make people Quite Unhappy. I want to live in a world where special snowflakes and one-offs are always a bad thing, so I’m jumping straight to the playbooks section. Playbooks Ok, so I’m just really bad at recognizing YAML. I claimed elsewhere that I didn’t recognize the syntax of Ansible playbooks, which is true, but that’s my fault and not theirs. Their sample playbook makes sense! Let’s try writing something of my own... oh wait, I don’t know what file extension nor location it belongs with. Fine, guess I’ve gotta actually keep reading the docs for awhile. The Next Day So, I come back and find the playbooks tutorial conveniently open in a tab. Cool, that’s what to put in a playbook... but what do I call it? Dig around for best practices, don’t find any, file another bug, call it server.yml because who cares. Guess from the sample playbook how to translate from Yum to Apt. install Git We’re going to jump right into trying to install Playpen from source, because I find I learn the most from doing things wrong. First, I’ll try to install Git. From the tutorial, I’m guessing this should work: --- - hosts: play remote_user: root tasks: - name: install Git apt: pkg=git state=latest Now, the right thing to do here would be see whether it runs, but I’m going to do the wrong thing and try to figure out how to install Playpen from source as well. Let’s just pretend that changing too many things at once is a test of the quality of those inevitable error messages I’m going to induce. shave a yak and install known_hosts There’s a post about installing redis on the Google group, and the guy who wrote most of Ansible chimes in with some advice on best practices (though the thread is from 2013, so it may be totally obsolete by now). Looking for the right way to do a git clone through Ansible reveals that it sometimes gets stuck, usually when known_hosts is missing. Looks like I get to learn how to put a file in place, before learning to git clone. I’m not totally sure if the boilerplate about ansible_ssh_user that I’m copying is actually going to accomplish my goal, but we’ll see when I run it. Since I’m edunham on the machine where I’m running Ansible and root on the remote system, it’ll be obvious to which user that variable referred. Now my server.yml looks like this: --- - hosts: play remote_user: root tasks: - name: install Git apt: pkg=git state=latest - name: Install known_hosts file copy: src=known_hosts dest=/home/${ansible_ssh_user}/.ssh/known_hosts owner=${ansible_ssh_user} group=${ansible_ssh_user} I then moved my laptop’s ~/.ssh/known_hosts to a backup location, tried to pull from github, added the key, and copied the now-much-shorter ~/.ssh/known_hosts into my Ansible repo. Trial and error and error After putting my local backup back into place so my laptop knows more hosts than just GitHub, it’s time to see whether Ansible can apply that playbook: $ ansible-playbook server.yml PLAY [play] ******************************************************************* skipping: no hosts matched PLAY RECAP ******************************************************************** Huh, I clearly did something wrong... Oh, that’s right, it wouldn’t know which host play is because I moved the ansible hosts file into the repo!: $ ansible-playbook -i hosts server.yml PLAY [play] ******************************************************************* GATHERING FACTS *************************************************************** fatal: [play] =&gt; SSH Error: Permission denied (publickey,password). while connecting to 162.243.134.126:22 It is sometimes useful to re-run the command using -vvvv, which prints SSH debug output to help diagnose the issue. TASK: [install Git] *********************************************************** FATAL: no hosts matched or all hosts have already failed -- aborting PLAY RECAP ******************************************************************** to retry, use: --limit @/home/edunham/server.retry play : ok=0 changed=0 unreachable=1 failed=0 And that would be a failure to add the relevant ssh key after reboot. I add the ssh key to my agent, and this time it works: $ ansible-playbook -i hosts server.yml PLAY [play] ******************************************************************* GATHERING FACTS *************************************************************** ok: [play] TASK: [install Git] *********************************************************** changed: [play] TASK: [Install known_hosts file] ********************************************** failed: [play] =&gt; {&quot;checksum&quot;: &quot;926e119d8b84c44f4790c47436967ada72e05ba3&quot;, &quot;failed&quot;: true} msg: Destination directory /home/${ansible_ssh_user}/.ssh does not exist FATAL: all hosts have already failed -- aborting PLAY RECAP ******************************************************************** to retry, use: --limit @/home/edunham/server.retry play : ok=2 changed=1 unreachable=0 failed=1 Okay, the ansible_ssh_user stuff was indeed screwed up. If I Google a bit more, I find that I actually skipped something importat in the inventory intro: setting the user for the host. So I add ansible_ssh_user=root to the hosts file, and try again... and it fails again. Even when I substitute root for ${ansible_ssh_user} in the playbook, it fails the same way. Looks like it’s not automatically creating the directory for me. Create a directory So, I get to make .ssh by hand. Cool story. So now that task looks like this: - name: Install known_hosts file file: path=/home/${ansible_ssh_user}/.ssh/ state=directory owner=${ansible_ssh_user} group=${ansible_ssh_user} copy: src=known_hosts dest=/home/${ansible_ssh_user}/.ssh/known_hosts owner=${ansible_ssh_user} group=${ansible_ssh_user} for which I’m rewarded with the error ERROR: multiple actions specified in task: 'file' and 'Install known_hosts file'. So I give a separate name to each action, try again, and get a new error: failed: [play] =&gt; {&quot;failed&quot;: true, &quot;gid&quot;: 0, &quot;group&quot;: &quot;root&quot;, &quot;mode&quot;: &quot;0755&quot;, &quot;owner&quot;: &quot;root&quot;, &quot;path&quot;: &quot;/home/${ansible_ssh_user}&quot;, &quot;size&quot;: 4096, &quot;state&quot;: &quot;directory&quot;, &quot;uid&quot;: 0} msg: chown failed: failed to look up user ${ansible_ssh_user} At this point, since Google wasn’t giving me helpful results in a timely manner, I pinged a friend on IRC and he suggested an alternate syntax, which works: --- - hosts: play remote_user: root tasks: - name: install Git apt: pkg=git state=latest - name: Create .ssh directory file: path=/home/{{ ansible_ssh_user }}/.ssh/ state=directory owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} - name: Install known_hosts file copy: src=known_hosts dest=/home/{{ ansible_ssh_user }}/.ssh/known_hosts owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} I’m glad it works like that, because it feels more like all the other Python-flavored templating that I’ve touched (Flask, Django, etc.). And it’s definitely a Python habit, but I prefer brain damage. I wonder if it’d be okay to put spaces around the = signs... one :%s/=/ = /g and an ansible-playbook invocation later, I find that adding spaces causes it to fail with an erorr like: fatal: [play] =&gt; a duplicate parameter was found in the argument string () Not freaking helpful. But next time I see it, I’ll recognize it as too many spaces rather than just being totally confused. Time to clone playpen Now I should, in theory, have the ability to clone a repo from github. Time to test this hypothesis.... I’m starting by reading then copying from the git module docs. Let’s try it: - name: Clone Playpen git: repo=git@github.com:thestinger/playpen.git dest=/home/{{ ansible_ssh_user }}/playpen_source And it fails, because it got a GitHub host key that wasn’t recognized. I guess there are actually several keys: # ssh-keygen -r github.com github.com IN SSHFP 1 1 7bc4945739c3552b9de0260f4524e05329587dea github.com IN SSHFP 1 2 b040403fc0992ef0bf9144d8aaa25049d8564839821eb592d7338399e456609c github.com IN SSHFP 2 1 ce76002677a077bf43dabb446a23e86bb127c8c3 github.com IN SSHFP 2 2 858dec00d20192cf334f54c96cccd5900f4540c2975e5d24c8236c255618c10c github.com IN SSHFP 3 1 261f7e4445378789267eb92c744e9e0d32a5f98d github.com IN SSHFP 3 2 a4ca08ec5bcf801885aa8b08b5deeb9a51c006988a5814e833f6ac08e81b021f In investigating which key I actually added to known_hosts, I discover a couple of worrisome things: First, my initial fumbling managed to create a /home/${ansible_ssh_user} directory, which is empty. Ha ha, I guess? I’ve manually removed it. Second, although Ansible claims to have installed the known_hosts file, I can’t actually see it. Actually after a bit more digging, it turns out that I was just being dumb at Unix. The system has a /.ssh created by DigitalOcean, which contains only my authorized_keys file. Ansible successfully created the /home/root/.ssh/known_hosts file, but cd as root takes you to / rather than to /home/root. Duh. Turns out that if I throw the known_hosts file into /.ssh, I can move on to the next error: failed: [play] =&gt; {&quot;cmd&quot;: &quot;/usr/bin/git ls-remote '' -h refs/heads/HEAD&quot;, &quot;failed&quot;: true, &quot;rc&quot;: 128} stderr: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. msg: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. Should’ve been using the HTTPS url, since I don’t want to add a public key from this machine to anybody’s github account, and I’ll never need to push back to the repo from my play server. Success! With that fix, it’s now successfully changed! The working playbook looks like this: --- - hosts: play remote_user: root tasks: - name: install Git apt: pkg=git state=latest - name: Create .ssh directory file: # The ansible_ssh_user is specified in the hosts file # For this host I'm using root, so .ssh location is special path=/.ssh/ state=directory owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} - name: Install known_hosts file copy: src=known_hosts dest=/.ssh/known_hosts owner={{ ansible_ssh_user }} group={{ ansible_ssh_user }} - name: Clone Playpen git: repo=https://github.com/thestinger/playpen.git dest=/home/{{ ansible_ssh_user }}/playpen_source Next Up My next steps will be to install the tools necesassary to build Playpen, and get Ansible to build it. I probably won’t keep up the “let’s-play” blog style, because it exponentially increases the amount of typing involved, and if you read this far you’re either a creepy stalker, thoroughly sick of hearing about my flailing at Ansible, or possibly both. Posted by E. Dunham Tags: ansible « Display Defaults Configuration Management Comparison » Recent Posts Thinkpad 13 Trackpoint slowdown in i3 window manager Hieroglyph and Tinkerer Dependencies CFPs Made Easier 2ish weeks with the Thinkpad 13 Reflections on my first live webcast Paths Into DevOps Persona and third-party cookies in Firefox Plushie Rustacean Pattern Could Rust have a left-pad incident? Reducing SaltStack log verbosity for TravisCI Search Blog Archive Tags ansible (6), arandr (1), arch (11), arduino (1), audio (1), aws (4), bash (2), blackarch (1), buildbot (5), cargo (1), cfengine (1), chef (1), cloudfront (1), conferences (4), coverage (1), crafts (1), cs480 (2), cups (1), design (1), devops (2), digitalocean (1), dmarc (1), dns (1), docker (1), ec2 (1), email (3), EXAMPLE (1), example (1), extundelete (1), ferris (1), forth (1), foss (4), games (1), git (2), github (1), github pages (1), gitstat (1), habitrpg (2), hardware (1), hieroglyph (2), i3 (2), interviews (1), irc (3), irssi (3), jekyll (1), kangaroos (1), LaTeX (3), let's code (1), linode (1), mailman (1), monte (1), mozilla (3), mplayer (1), multirust (1), newbie (1), notty (1), orglog (1), osx (1), packaging (1), pandoc (1), playpen (1), printers (1), programming (1), psychology (1), puppet (1), python (1), recordmydesktop (1), resume (3), rst (1), ruby (1), rust (5), rustinfra (9), rustlang (3), s3 (2), saltstack (2), school (6), screen (1), security (1), shameless self-promotion (1), shell (1), solved (5), speaking (2), sphinx (2), ssh (1), sshfs (1), talks (1), terminator (1), TEST (1), testing (1), thinkpad (2), TIL (1), tinkerer (5), trackpoint (1), travisci (5), troubleshooting (5), ubuntu (1), vagrant (1), vidyo (1), vim (3), wifi (1), Windows (1), workflow (1), x240 (1), xrandr (1) © Copyright 2015, E. Dunham. Powered by Tinkerer and Sphinx. This work by E. Dunham is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. " />
  <RDF:Description RDF:about="urn:scrapbook:item20160818143659#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Watch 100 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 272 Star 272 Fork Where should we fork this repository? Loading 137 LowPowerLab/RFM69 Code Issues 1 Pull requests 5 Wiki Pulse Graphs Branch: master Switch branches/tags Branches Tags ListenMode SPI_TRANSACTION-attempt master Nothing to show Nothing to show Create new file Upload files Find file History RFM69/Examples/ Latest commit 742a750 2 days ago @LowPowerLab LowPowerLab Update PiGateway example Permalink .. Failed to load latest commit information. DeepSleep fix DeepSleep sketch 16 days ago DeepSleep_usingLowPowerLibrary add DeepSleep example w/ LowPower Lib 16 days ago DoorBellMote Bell disable/enable changes a year ago GarageMote Update GarageMote a year ago GarageMote_base Update to radio.ACKRequested() 2 years ago Gateway Add Automatic Transmission Control (ATC) 9 months ago IOShield Update buff length 11 months ago MailboxNotifier Add sketches for Motion,OLED,Mailbox motes 2 years ago MightyBoostControl Update GarageMote &amp; MightyBoost sketches 2 years ago MightyHat switch Mightyhat/PiGateway serial to 19200baud 23 days ago MotionMote minor tweaks 4 months ago Node Moving Blink def so it compiles on PlatformIO 5 months ago OLEDMote Unify indentation (from TAB to two spaces) 2 years ago PiGateway Update PiGateway example 2 days ago PulseMeter Add RFM69 SY310 pulse meter example a year ago RandomNumbers Add random number sender example 11 months ago SonarMote typo fix 11 months ago Struct_receive Update Struct_receive.ino a year ago Struct_send Update Struct_send.ino a year ago TxRxBlinky Update TxRxBlinky example 2 years ago WeatherNode Add WeatherShield sender sketch a year ago WirelessProgramming_gateway Remove DEBUG in main call 8 months ago WirelessProgramming_node Fix RX deadlocks, update examples 2 years ago Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. " />
  <RDF:Description RDF:about="urn:scrapbook:item20160622114016#index"
                   NS1:content=" Blog About GitHub Twitter Instagram 500px DavidMaitland.me Photography, Code &amp; Linux Raspberry Pi Zero Headless Setup 01 Dec 2015 raspberry-pi-zero-otg So last Thursday (26th Nov 2015) the Raspberry Pi Zero was announced and made available that very day. Basically the Zero is a small and ultra cheap (£4) fully functioning Raspberry Pi, but it doesn't have any native networking and has only one USB port (which you need an OTG adapter to use). In the UK I was lucky enough to be able to order two Pi Zero's and have them delivered the next day. The only problem was I didn't have an HDMI monitor or a USB hub to connect a keyboard and a WiFi adapter at the same time. My intended use for the Zero's is for them to be little headless Linux boxes that I can put into various electronic projects and program them over WiFi (Think IoT), so I didn't want to mess around with HDMI and GUI interfaces. So here is a little guide showing you how to setup a Raspberry Pi Zero without an HDMI monitor or a keyboard / mouse. We will just use a USB WiFi adapter (connected to the OTG USB port) and a Linux machine to do the setup. If you don't have a Linux machine available, you could even use another Rasberry Pi with a card reader to set this up. This should be possible to do on other platforms as well but you will need to be able to mount an Ext4 partition natively. Step One - Install the Linux image First you will need to install a copy of Raspbian Jessie onto your micro SD card. You can find the downloads here and the installation guides are on the same page as well. For Linux I will be using this guide. Step Two - Mounting it locally After you have copied the Raspbian image onto the SD card you will need to mount it to your system. The easiest way to do this is just unplug your card reader and plug it back in. Once the drive has mounted to your system you will need to find where it has mounted. An easy way to do this is using the command df -h. For example for me it returns: Filesystem Size Used Avail Use% Mounted on /dev/mapper/fedora_dhcppc8-root 25G 9.8G 14G 43% / /dev/sda1 477M 258M 190M 58% /boot /dev/mapper/fedora_dhcppc8-home 85G 24G 58G 29% /home /dev/sdc1 60M 20M 41M 34% /run/media/davidmaitland/boot /dev/sdc2 59G 3.4G 53G 6% /run/media/davidmaitland/ad6203a1-ec50-4f44-a1c0-e6c3dd4c9202 I can see from this my 64GB SD card is the device /dev/sdc and the boot and main partition are mounted under /run/media/davidmaitland/. Change directory into the main partition as root ready to edit the files. This is likely to be the same drive that was referenced during the image installation earlier. [user@linux ~]# sudo su [root@linux ~]# cd /run/media/davidmaitland/ad6203a1-ec50-4f44-a1c0-e6c3dd4c9202 [root@linux ad6203a1-ec50-4f44-a1c0-e6c3dd4c9202]# ls bin boot boot.bak dev etc home lib lost+found media mnt opt proc root run sbin srv sys tmp usr var Step Three - Configure your WiFi Next we're going to configure the network interface. Edit the interfaces file etc/network/interfaces. Pay attention to the path in the files I reference, there is no leading slash as you want to edit the files on your SD card and not the ones on your host system! If you're not sure how to edit files on Linux, try nano etc/network/interfaces then Ctrl + x to save when done. Find this block in the file: allow-hotplug wlan0 iface wlan0 inet manual wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Then change it to this: auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf If you want to have a static IP instead of using DHCP (easier to find once the Pi has come up on your network) then change it to this instead: auto wlan0 allow-hotplug wlan0 iface wlan0 inet static address 192.168.1.20 # IP for the Zero netmask 255.255.255.0 gateway 192.168.1.1 # Your router IP wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf As pointed out by someone on Reddit, if you're using static networking you will want to setup your DNS servers as well. Edit etc/resolv.conf and add the following: # Google's public DNS servers nameserver 8.8.8.8 nameserver 8.8.4.4 Now let's setup the WiFi connection and passkey. Edit the file etc/wpa_supplicant/wpa_supplicant.conf. Add this to the end: network={ ssid=&quot;my network name&quot; psk=&quot;my network password&quot; proto=RSN key_mgmt=WPA-PSK pairwise=CCMP auth_alg=OPEN } Finally remove the SD card from your computer (you may wish to unmount it first) and place into your Zero. Step Four - Boot the Pi Zero! Now it's time to boot the Raspberry Pi Zero. Make sure you have your WiFi adapter plugged into the Zero and give it some power. For me it takes about 45 seconds to boot and connect to my WiFi network. Now you can SSH directly into your Raspberry Pi Zero! If you configured your Zero to use DHCP you will need to find it's IP address. There are a few ways you can do this: Most routers will tell you somewhere in their web interfaces what IP allocations they have assigned to devices. You could use nmap to scan the local network for devices running with port 22 open sudo nmap -p22 -sV 192.168.0.0/24. From the comments Coder-256 pointed out the default hostname for a Raspberry Pi is raspberrypi and on most networks you can SSH directly to this instead of the IP address ssh pi@raspberrypi.local. The default password is raspberry. [user@linux ~]# ssh pi@192.168.1.20 pi@raspberrypi:~ $ Extras After a new install there are a few things you're probably going to want to do. First I would update the software running on your Zero: sudo apt-get update -y sudo apt-get upgrade -y If you're going to be using your Zero completely headlessly like me there are various things you can do to save energy and speed up the device. Boot up into multi-user mode (disable GUI on boot) sudo systemctl set-default multi-user.target. To disable HDMI edit /etc/rc.local and add the following line at the bottom above exit 0 line: /usr/bin/tvservice -o You may want to run sudo raspi-config to change other common Raspberry Pi settings as well. Let me know below if this guide was useful or if you have any suggestions! Coffee delivered for £1 Love coffee and live in the UK? Have some freshly ground coffee delivered to your door for only one pound. Give Pact coffee a try using the promo code &quot;ONEPOUNDCOFFEE&quot;. Copyright David Maitland 2016 SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. We were unable to load Disqus. If you are a moderator please see our troubleshooting guide. 64 comments Comments DavidMaitland.me Community Login Disqus Facebook Twitter Google 1 Recommend Recommended 5 Discussion Recommended! Recommending means this is a discussion worth sharing. It gets shared to your followers' Disqus feeds, and gives the creator kudos! Find More Discussions Share Share this discussion on Twitter Facebook Sort by Best Best Newest Oldest Avatar Join the discussion… in this conversation ⬇ Drag and drop your images here to upload them. Media preview placeholder Attach Log in with or sign up with Disqus or pick a name Disqus is a discussion network Disqus never moderates or censors. The rules on this community are its own. Your email is safe with us. It's only used for moderation and optional notifications. Don't be a jerk or do anything illegal. Everything is easier that way. Read full terms and conditions By signing up, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. By posting, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. − + Avatar ben • 7 months ago does disabling the hdmi increase the potenital speed for other services on the Pi? see more 3 • Reply • Share › Twitter Facebook Link − + Avatar Stijn ben • 7 months ago Yes. Disabling unused services will limit the needed resources and power. So you'll have more spare computing power for other stuff, and use less electricity at the same time. see more 2 • Reply • Share › Twitter Facebook Link − + Avatar Jakub Kramarz ben • 7 months ago Yes and no in the same time: it won't affect CPU performance in any matter, but if you're using VideoCore IV for computation (very unlikely), you may have more resources available. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Joel Auterson • 7 months ago Thanks for this - not having a USB keyboard to hand was the reason I'd held back on buying one of these! see more 3 • Reply • Share › Twitter Facebook Link − + Avatar Roman • 6 months ago FWIW: this didn't work for me right away, so I went on to debug wpa_supplicant and found that it didn't like the spaces in the line &quot;network={&quot;. Now working great! see more 2 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Roman • 6 months ago Whoops, thanks for spotting this. Not sure why example shows it like that :/ see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Michael Dillon • 3 months ago Thanks worked perfectly! see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Brian • 6 months ago Great guide! Thank you for posting. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Erwin • 6 months ago Like Tom, I only see with df -h the boot partition (under /Volumes, not /run/media). I must say I try this under OSX (10.11.2). Does df -h or mounting work differently on a Mac? I used the jessie lite image. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Erwin • 6 months ago This won't work on Mac by default as you can't mount ext4 partitions. You may be able to use something like this http://osxdaily.com/2014/03/20... or use Virtualbox to spin up a Linux instance. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar ivow David Maitland • 19 days ago Thanks David. Ubuntu in Virtual Box did the trick on OSX. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Morris Singer David Maitland • a month ago Just a note to say I was able to do it on my Mac, but there were a few twists and turns that may put this out of the realm of some of those who will make the attempt. First, when using dd, it's important to note that on OS X, you can only specify the block size in bytes (so, make it 4*2^20, i.e., (4194304) rather than 4M. Second, as David Maitland correctly points out, because OS X does not support mounting ext4 partitions, only the boot partition (which is FAT) will load correctly. You can get around this by running a Linux distro (I ran Ubuntu) inside of a hypervisor and exposing the SD card reader to the guest. Instructions are detailed here for VirtualBox: http://superuser.com/questions.... I ran Ubuntu in VirtualBox with a head, and as a result, Ubuntu took care of actually mounting both of the SD card's partitions automatically, so I could fire up my Ubuntu VM and continue setting up the WiFi. YMMV. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Chris Ward • 7 months ago I never thought of mounting it to make changes before plugging it in. Good idea. For the name servers, maybe mention that those are googles servers. How did you get the image to have the whole card usable? I have had to boot my Pi, then expand the file system from the 4gig images up to size of card. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Chris Ward • 7 months ago Thanks! I may do, I did add that bit in after someone on Reddit complained about not showing how to add the name servers so was a quick addition. I got the image to use the whole card after I booted the Zero for the first time using the raspi-config command. I'm not sure of another way to do it. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Chris Ward David Maitland • 7 months ago Oh. I will have to try that. I was messing with parted and ex2fs to drop, then recreate the partition, then expand the file system. I figured that the hard was was the linux way ;-) see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Kevin M David Maitland • 6 months ago I use ubuntu to dd 8G partions to new sd cards. I then use gparted to expand the EXT4 partion to fill the sdcard. I've only tried this with an rpi2-ubuntu image, so I'm not sure if it works for raspian also. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar cyberspice • 7 months ago I would enable the serial getty. Easy to just connect a serial terminal to it if everything else fails. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Kiran Koduru • 7 months ago Thanks for your article. I bought the Pi Zero and had to order a USB hub &amp; HDMI cable once I couldn't get it to work. But this article would have been easier. Could you suggest a WiFi Adapter to use too? see more 1 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Kiran Koduru • 7 months ago No problem, that's the reason the wrote it! I like the Edimax EW-7811UN (http://www.amazon.co.uk/gp/pro... but the offical WiFi adapter would be a good choice as well (https://shop.pimoroni.com/prod.... see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Igor Ganapolsky • 15 days ago This works great with RASPBIAN JESSIE LITE image. The only thing is I couldn't get my WiFi to set up properly, so I ended up connecting through ethernet. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar the way of the future • 20 days ago Can this be done from a win10 PC running a linux virtual machine? Thanks. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod the way of the future • 20 days ago Yes it can. You just need to attach the USB card reader as a device to the VM. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar the way of the future David Maitland • 19 days ago Thanks I am a total noob to linux and RPI. I get 'could not resolve hostname' or 'connection timed out' when sshing. When I plug in the card to the usb port, 3 things show up on the ubuntu files menu with eject icons; there is 'boot', 'root' and 'settings'. 'Settings' also has a wpa_supplicant.conf file I noticed. Should this one be changed also? It doesn't have the code block from the instructions. I found the main partition to be /media/lerigalacticon/root#. This is the content of my interfaces file after the change: # interfaces(5) file used by ifup(8) and ifdown(8) # Please note that this file is written to be used with dhcpcd # For static IP, consult /etc/dhcpd.conf and 'man dhcpcd.conf' # Include files from /etc/network/interfaces.d: source-directory /etc/network/interfaces.d auto lo iface lo inet loopback iface eth0 inet manual auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf etc/wpa_supplicant/wpa_supplicant.conf allow-hotplug wlan1 iface wlan1 inet manual wpa-conf etc/wpa_supplicant/wpa_supplicant.conf Could you give some advice as to how to get ssh working for me? Thanks. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar the way of the future the way of the future • 19 days ago I got it to work! I used the settings for static IP address and got the zero IP from logging into the router. Thanks! see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Wilhelm Råbergh • 21 days ago Great guide! I am quite new to Raspberry Pi and the Linux interface, therefore I had some problem figuring out what you meant in the beginning of step three with the leading forward slash. Since I chose to configure the SD card with another RPI I had to add a forward slash. But it was great fun with a little bit of challenge, thank you! see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Wilhelm Råbergh • 20 days ago Did this work? You might have just changed the settings on your existing raspberry pi :/ see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Wilhelm Råbergh David Maitland • 20 days ago Yes that's probably true, forgot to mention that I swapped cards. I put the new SD card in my RPI 3, did the configurations in your guide and then removed the SD card and put it in the Pi Zero. Maybe that explains it better? :) see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Scott Kosman • a month ago Thanks so much for this guide, the step-by-step descriptions worked perfectly for me! One addition: I'm using the same WiFi dongle as you (Edimax EW-7811UN) and after I got it running I found that the wifi connection would drop out after about 30 seconds of idleness. Turns out that I had to disable power management on the dongle itself to keep the connection alive, which is very simple to do: Create a new empty file: sudo nano /etc/modprobe.d/8192cu.conf Paste the following into it: options 8192cu rtw_power_mgnt=0 rtw_enusbss=0 Reboot. Done! No more wifi problems. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Scott Kosman • 20 days ago Interesting, haven't had this issue before. I wonder how much it increases the power usage of the Pi. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Scott Kosman David Maitland • 20 days ago Good question, I'm not sure how to even check that (I'm by no means an expert here – I found the above directions elsewhere after Googling the problem). I'm running mine in headless mode as well, though, so no HDMI port use or GUI so I'm not terribly concerned about power usage at this point. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar wireddude • 5 months ago I'm able to get everything working up to the final step. Whenever I try to ssh into my PI, I get a connection refused. Is there some reason SSH might not be running? ssh: connect to host 192.168.1.105 port 22: Connection refused see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod wireddude • 5 months ago Are you sure it connected to your WiFi network? Maybe check the interface for your router to see if you can find it. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Sergio • 5 months ago Thank you so much for your guide! Unfortunately I'm stuck at the Step One :( the problem is that I can't mount the SD card back! reconnecting it doesn't work, the mount command neither, because there is not a filesystem type assigned to the SD card. Do you know maybe how to solve this issue? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Sergio • 5 months ago What OS are you using? Something must have gone wrong when following the installation guide :/ see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Sergio David Maitland • 5 months ago Thanks for your answer. I was using Xubuntu 14.04, but I decided to mount the image on Windows and then switch to Ubuntu 14.04 to modify the files. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski • 6 months ago Thank You for the guide. I have TP-LINK TL-WN725N wifi nano card and i think its missing drivers. is there a way to add drivers manually to sd card as above steps? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski Maciej Proszewski • 6 months ago After many tries it finally connected with following setup: #Interfaces: auto wlan0 iface lo inet loopback iface eth0 inet dhcp allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf default inet dhcp #wpa_supplicant: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;ssid&quot; proto=WPA RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP psk=&quot;password&quot; } Then i updated software, changed timezone to CET and rebooted system. After this one time it didn't connect anymore... see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski Maciej Proszewski • 6 months ago I still have a problem with connection. Wifi adapter is powered on and led is blinking like &quot;waiting for connection&quot;. If its connected led is blinking faster with data transmission. Is there a log file anywhere on PI where i can check whats going on there and why its not connecting? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Maciej Proszewski • 6 months ago You can check var/log/syslog to see what it's doing on boot. For example I see this in mine: Dec 11 15:21:34 localhost wpa_supplicant[314]: wlan0: CTRL-EVENT-CONNECTED - Connection to 00:0c:42:fc:9a:6b completed [id=0 id_str=] see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski David Maitland • 6 months ago After every successfull connection i have to edit interface files and wpa_supplicant because they change values. Then it connects at first time and when i reboot system it wont connect anymore. Then i have to do above steps again: edit sdcard's files on my PC. Files changes during &quot;sudo reboot&quot; command: BEFORE: #/etc/network/interfaces auto lo iface lo inet loopback iface eth0 inet dhcp allow-hotplug wlan0 auto wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf iface default inet dhcp allow-hotplug wlan1 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf iface default inet dhcp AFTER: #/etc/network/interfaces !&gt; . n# ô .. wpa_supplicant.conf BEFORE: #/etc/wpa_supplicant/wpa_supplicant.conf ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;ssid&quot; proto=WPA RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP psk=&quot;psk&quot; } AFTER: #/etc/wpa_supplicant/wpa_supplicant.conf &quot;&gt; . Ů&quot; ô .. I really dont know whats going on here... I downloaded and installed Raspbian again but it didn't change anything. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Jean Maciej Proszewski • 6 months ago I have the exact same issue, have you found a solution for this? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski Maciej Proszewski • 6 months ago Its TP-LINK TL-WN725N v2 and the chip is Realtek 8188eu. After some research there are drivers in latest Raspbian compilation &quot;If you’re using Raspbian 2015.01 or later, the Raspberry Pi kernel 3.18 now includes this driver—you don’t need to compile anything and this tutorial is now irrelevant!&quot; Source: https://blog.samat.org/2014/12... see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Tom • 7 months ago I've tried following these steps but when I check the SD card after I only have a boot partition and not a main one? Am I doing something wrong? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Tom • 7 months ago How far did you get in the steps? What distro are you using to do this on? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Tom David Maitland • 7 months ago Hi, Apologies I was following the steps you linked to in Step 1. When I next run df -h I only show one partition on the SD card called boot. It looks like I'm missing the system itself where I can access /etc to make the required changes. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Tom • 6 months ago Are you using Mac by any chance? If so you can't mount the ext4 partion without installing something like OSXFuse or using Virtualbox to start a Linux instance. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Tom David Maitland • 6 months ago Hi David, thanks for coming back to me. Yes, am using a Mac and your right it was the cause of my issues. I've managed to get a windows system to boot into Linux and then could amend the files. However, still no joy. I'm using the broadcom usb hub/wifi (http://swag.raspberrypi.org/pr..., do you know if it should work the same? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Tom • 6 months ago The hub shouldn't make a difference. Format the SD card. Follow the installation guide again and see if you can mount the partitions :) see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Antero Duarte • 7 months ago Is there any change needed for a WPA2 Enteprise network? I live in a student accommodation. Think about eduroam for example (the secure, world-wide roaming access service developed for the international research and education community, if you don't know it). I would I configure such a network that requires authentication on a headless setup? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Antero Duarte • 7 months ago Just had a quick look online, but haven't been able to test anything. Maybe give this a go in your wpa_supplicant file: network={ ssid=&quot;NETWORK&quot; scan_ssid=1 key_mgmt=WPA-EAP identity=&quot;USERNAME&quot; password=&quot;PASSWORD&quot; eap=PEAP phase1=&quot;peaplabel=0&quot; phase2=&quot;auth=MSCHAPV2&quot; } see more 0 • Reply • Share › Twitter Facebook Link Load more comments Powered by Disqus Subscribe Add Disqus to your site Add Disqus Add Privacy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160802140743#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Toggle navigation FreeCAD-logo FreeCAD Afrikaans Chinese Simplified Chinese Traditional Croatian Czech Dutch English Finnish French German Hungarian Japanese Norwegian Polish Portuguese Romanian Russian Serbian (Cyrillic) Spanish Swedish Ukrainian Italian Greek Slovak Turkish Slovenian Forum Documentation Bug tracker Overview Features Screenshots Download Getting started Users showcase Get help Welcome! FreeCAD is a parametric 3D modeler made primarily to design real-life objects of any size. Parametric modeling allows you to easily modify your design by going back into your model history and changing its parameters. FreeCAD is open-source and highly customizable, scriptable and extensible. FreeCAD is multiplatfom (Windows, Mac and Linux), and reads and writes many open file formats such as STEP, IGES, STL, SVG, DXF, OBJ, IFC, DAE and many others. Read more... Who is FreeCAD for? A couple of user cases: The home user/hobbyist. Got yourself a project you want to build, have built, or 3D printed? Model it in FreeCAD. No previous CAD experience required. Our community will help you get the hang of it quickly! The experienced CAD user. If you use commercial CAD or BIM modeling software at work, you will find similar tools and workflow among the many workbenches of FreeCAD. The programmer. Almost all of FreeCAD's functionality is accessible to Python. You can easily extend FreeCAD's functionality, automatize it with scripts, build your own modules or even embed FreeCAD in your own application. The educator. Teach your students a free software with no worry about license purchase. They can install the same version at home and continue using it after leaving school. Community Github Facebook Google+ Learn Tutorials Youtube videos Stack Exchange Help the project How can I help? Donate! Translate Code Building from source C++ &amp; Python API License information " />
  <RDF:Description RDF:about="urn:scrapbook:item20160823093821#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Arduino userpicture Home Buy Download Products Back Arduino (USA only) Genuino (outside USA) AtHeart Certified Learning Back Getting started Tutorials Reference CTC Program Playground Forum Support Back FAQ Contact Us Blog LOG IN SIGN UP Reference Language | Libraries | Comparison | Changes Serial Serial communication on pins TX/RX uses TTL logic levels (5V or 3.3V depending on the board). Don't connect these pins directly to an RS232 serial port; they operate at +/- 12V and can damage your Arduino board. Serial is used for communication between the Arduino board and a computer or other devices. All Arduino boards have at least one serial port (also known as a UART or USART): Serial. It communicates on digital pins 0 (RX) and 1 (TX) as well as with the computer via USB. Thus, if you use these functions, you cannot also use pins 0 and 1 for digital input or output. You can use the Arduino environment's built-in serial monitor to communicate with an Arduino board. Click the serial monitor button in the toolbar and select the same baud rate used in the call to begin(). The Arduino Mega has three additional serial ports: Serial1 on pins 19 (RX) and 18 (TX), Serial2 on pins 17 (RX) and 16 (TX), Serial3 on pins 15 (RX) and 14 (TX). To use these pins to communicate with your personal computer, you will need an additional USB-to-serial adaptor, as they are not connected to the Mega's USB-to-serial adaptor. To use them to communicate with an external TTL serial device, connect the TX pin to your device's RX pin, the RX to your device's TX pin, and the ground of your Mega to your device's ground. The Arduino Due has three additional 3.3V TTL serial ports: Serial1 on pins 19 (RX) and 18 (TX); Serial2 on pins 17 (RX) and 16 (TX), Serial3 on pins 15 (RX) and 14 (TX). Pins 0 and 1 are also connected to the corresponding pins of the ATmega16U2 USB-to-TTL Serial chip, which is connected to the USB debug port. Additionally, there is a native USB-serial port on the SAM3X chip, SerialUSB'. The Arduino Leonardo board uses Serial1 to communicate via TTL (5V) serial on pins 0 (RX) and 1 (TX). Serial is reserved for USB CDC communication. For more information, refer to the Leonardo getting started page and hardware page. Functions if (Serial) available() availableForWrite() begin() end() find() findUntil() flush() parseFloat() parseInt() peek() print() println() read() readBytes() readBytesUntil() readString() readStringUntil() setTimeout() write() serialEvent() Examples ReadASCIIString ASCII Table Dimmer Graph Physical Pixel Virtual Color Mixer Serial Call Response Serial Call Response ASCII Reference Home Corrections, suggestions, and new documentation should be posted to the Forum. The text of the Arduino reference is licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Code samples in the reference are released into the public domain. Share This link has expired. Please re-subscribe to our Newsletters. Subscribe to our Newsletters Email Please enter a valid email to subscribe Arduino Newsletter Arduino Store Newsletter Newsletter Italiana Cancel Next Confirm your email address We need to confirm your email address. To complete the subscription, please click the link in the email we just sent you. Thank you for subscribing! Arduino via Egeo 16 Torino, 10131 Italy Ok Newsletter ©2016 Arduino Copyright Notice Contact us About us Careers Pin it « 5K+ 17 Sorry, there was a problem loading Checkout. If this persists, please try a different browser. This message will automatically close in 5 seconds. Tweet SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. " />
  <RDF:Description RDF:about="urn:scrapbook:item20160717085213#index"
                   NS1:content=" http://66.media.tumblr.com/avatar_dc6c4bd892d7_96.png Daphne的做作電氣箱 DIY Aluminium Calligraphy Pen imageimage You’ll need tape, scissors, knife, disposable chopsticks, empty aluminium can, stapler and ink. image Calligraphy Pen for Gothic: cut the aluminium into two pieces like above and tape it on chopstick, then Staple the aluminium. image Medium Point Calligraphy Pen: Fold a piece of aluminim, and cut it like picture above. Then tape it on chopstick. image Fine Point Calligraphy Pen: Fold a piece of aluminim, and cut it like picture above. Then tape it on chopstick. Suggest start with India ink, or ink for dip pen. Now enjoy it :) image image imageimage image ☞Turning straw into pen. #calligraphy#calligraphy gif#gif#diy#pens#ink#diy ideas#tutorials#設計TREND 1 year ago - 272,195 notes thesifsterhood reblogged this from jeshala zionangel liked this i-feel-like-meh liked this rxi-windrunner reblogged this from watering76 daftdevil liked this daftdevil reblogged this from artkink shioah-chan liked this totallynotafamousperson reblogged this from brainbowunicorn totallynotafamousperson liked this dandelionmeadow reblogged this from peekatinsanity peekatinsanity reblogged this from suzamster pipe-and-ben liked this rileyzard reblogged this from felixdawkward accio-shenanigans liked this anystudy liked this lifehasstatic liked this princesandpirates liked this broadwaybound232 liked this broadwaybound232 reblogged this from in-hell-with-a-dead-girl-walking brazenbutterflyfragilewings liked this astrozombiies liked this thenwhatareyou liked this were-birds-of-a-feather liked this elevenssouffles liked this in-hell-with-a-dead-girl-walking reblogged this from commander-smolder penguineatscarrots reblogged this from crimefightingpigeons of-messy-hair-and-wild-dreams reblogged this from heckyeahdiy starlightiiism reblogged this from paperhyena strikingvapor reblogged this from perks-of-being-chinese kia14 liked this graecae reblogged this from brainbowunicorn sensitivesara liked this azebraslife reblogged this from adrianke adrianke reblogged this from punnyteacup grymmy reblogged this from watering76 and added: I dont no…justa like this …is perfect grymmy liked this cacklecacklecackle liked this demonbabs liked this firewithinmidnight reblogged this from sapphireswimming smexy-beast reblogged this from sinnaegrell smexy-beast liked this teastudy liked this kimera20 reblogged this from ghostlyhabato kimera20 liked this rocketqueenamidala reblogged this from ithanaeliaseran ithanaeliaseran reblogged this from i-just-wanna-bee-friends ithanaeliaseran liked this watering76 posted this Show more notesLoading... Copyright © 2013–2016 Daphne的做作電氣箱 - All rights reserved . Theme By LEEN Follow watering76 Unfollow Tumblr Never miss a post! × watering76Daphne的做作電氣箱Follow "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160725153049#index"
                   NS1:content=" NDTV Business Hindi Movies Cricket Good Times Food Tech Auto Apps Prime Art Weddings Tech News : NDTV Gadgets360.com Home Shop News Reviews Features Opinions Photos Videos Gadget Guru Cell Guru Prime Tech Hubs Apple Android BlackBerry Google Microsoft Nokia Samsung Sony Compare Mobiles Phone Finder Forum Search for &quot;&quot; in: ARTICLES PRODUCTS Mobiles Tablets Apps Gaming Cameras PC/Laptops AUDIO/VIDEO How To Telecom Science INDIA INTERNET SOCIAL MEDIA WEARABLES हिंदी Acer Adcom Alcatel Apple Archos Asus BlackBerry Blu Celkon Fly Gionee HTC Huawei iBall iBerry Idea InFocus Intex Karbonn Lava Le Lenovo LG Maxx Mobile Meizu Micromax Microsoft Motorola MTS Nokia Obi Oppo Panasonic Philips Samsung Sony Spice Swipe Videocon Vivo Wickedleak Xiaomi Xolo ZTE Home | Mobiles | Phone Finder | Compare Mobiles | Motorola Moto G (Gen 3) vs Samsung Galaxy J5 Motorola Moto G (Gen 3) vs Samsung Galaxy J5 comparison Motorola Moto G (Gen 3) Samsung Galaxy J5 Compare Motorola Moto G (Gen 3) Compare Samsung Galaxy J5 Ratings Overall NDTV Rating - Design Rating - Display Rating - Software Rating - Performance Rating - Battery Life Rating - Camera Rating - Value for money Rating - General Alternate names XT1550 Release date July 2015 June 2015 Form factor Touchscreen Touchscreen Dimensions (mm) 142.10 x 72.40 x 11.60 142.00 x 73.00 x 7.90 Weight (g) 155.00 149.00 Battery capacity (mAh) 2470 2600 Removable battery No Yes Colours Black, White Black, White, Gold SAR value NA NA Display Screen size (inches) 5.00 5.00 Touchscreen Yes Yes Resolution 720x1280 pixels 720x1280 pixels Pixels per inch (PPI) 294 NA Hardware Processor 1.4GHz quad-core 1.2GHz quad-core Processor make Qualcomm Snapdragon 410 Qualcomm Snapdragon 410 RAM 1GB 1.5GB Internal storage 8GB 8GB Expandable storage Yes Yes Expandable storage type microSD microSD Expandable storage up to (GB) 32 128 Camera Rear camera 13-megapixel 13-megapixel Flash Yes Yes Front camera 5-megapixel 5-megapixel Front Flash No No Software Operating System Android 5.1.1 Android 6.0.1 Skin TouchWiz UI Connectivity Wi-Fi Yes Yes Wi-Fi standards supported 802.11 b/ g/ n 802.11 b/ g/ n GPS Yes Yes Bluetooth Yes, v 4.00 Yes, v 4.10 NFC No No Infrared No No Headphones 3.5mm 3.5mm FM Yes Yes Number of SIMs 2 2 Sim 1 SIM Type Micro-SIM Micro-SIM GSM/ CDMA GSM GSM 3G Yes Yes 4G/ LTE Yes Yes Supports 4G in India (Band 40) Yes Yes SIM 2 SIM Type Micro-SIM Micro-SIM GSM/ CDMA GSM GSM 3G Yes Yes 4G/ LTE Yes No Supports 4G in India (Band 40) Yes Yes Sensors Compass/ Magnetometer No No Proximity sensor Yes Yes Accelerometer Yes Yes Ambient light sensor Yes No Gyroscope No No Barometer No No Temperature sensor No No Motorola Moto G (Gen 3) Samsung Galaxy J5 Related Comparisons Compare Samsung Galaxy J7 2016 vs. Motorola Moto G Gen 3 vs. Samsung Galaxy J7 vs. Samsung Galaxy J5 Compare Lenovo Zuk Z1 vs. Coolpad Note 3 Lite vs. Motorola Moto G Gen 3 Compare Asus Zenfone Max 2016 vs. Asus Zenfone 2 Laser Ze550kl vs. Motorola Moto G Gen 3 vs. Lenovo K3 Note Compare Motorola Moto G4 Plus vs. Xiaomi Redmi Note 3 vs. Motorola Moto G Gen 3 vs. Xiaomi Mi 4i Compare Motorola Moto G Gen 3 vs. Meizu M2 Note vs. Nokia Lumia 720 Compare Samsung Galaxy A5 2016 vs. Motorola Moto G Gen 3 vs. Asus Zenfone Selfie vs. Asus Zenfone 5 Compare Samsung Galaxy S7 Edge vs. Samsung Galaxy A5 2016 vs. Motorola Moto G Gen 3 vs. Asus Zenfone Selfie Compare Motorola Moto G Gen 3 vs. LG G3 D858 vs. Samsung Galaxy S5 Lte vs. LG Google Nexus 5 Compare Motorola Moto G4 vs. Apple iPhone Se vs. Motorola Moto X Play vs. Motorola Moto G Gen 3 Compare Motorola Moto G Gen 3 vs. Samsung Galaxy J7 vs. Huawei Ascend P8lite vs. Samsung Galaxy Grand Prime 4g Other Comparisons Samsung Galaxy J2 Pro vs. Htc One M8s comparison Huawei P9 vs. Sony Xperia Z5 Dual vs. Sony Xperia Z5 Compact vs. Sony Xperia Z5 Premium Dual comparison Samsung Galaxy On7 Pro vs. Asus Zenfone Max 2016 vs. Motorola Moto G4 Plus comparison Huawei P9 Plus vs. Apple iPhone 5 comparison Swipe Elite Plus vs. Coolpad Note 3 Lite vs. Lenovo Vibe P1 comparison Samsung Galaxy J2 2016 vs. Motorola Moto G4 Plus vs. Gionee S6 vs. Lenovo K3 Note comparison Reach Allure vs. Xolo Era X vs. Lenovo Vibe K5 vs. Intex Aqua Star 4g comparison Karbonn K9 Smart vs. Panasonic Love T10 vs. Nokia Lumia 635 comparison Asus Zenfone 3 Max vs. Samsung Galaxy J2 2016 vs. Coolpad Note 3 Plus comparison Reach Allure vs. Xolo Era X vs. Lenovo Vibe K5 vs. Xiaomi Redmi 3 comparison Recent Stories Karbonn Fashion Eye With 8-Megapixel Camera Now Available Online at Rs. 5,490 Karbonn Fashion Eye With 8-Megapixel Camera Now Available Online at Rs. 5,490 OneDrive Gets Pokemon Detector, Automatic Albums, and More OneDrive Gets Pokemon Detector, Automatic Albums, and More Call Drops: 48,000 New Telecom Sites Installed in 45 Days, Says Sinha Call Drops: 48,000 New Telecom Sites Installed in 45 Days, Says Sinha iBall Slide Wings Dual-SIM Voice-Calling Tablet Launched at Rs. 7,999 iBall Slide Wings Dual-SIM Voice-Calling Tablet Launched at Rs. 7,999 Nokia-Owned Withings Launches Connected Health Devices in India Nokia-Owned Withings Launches Connected Health Devices in India Samsung Galaxy J2 Pro Launched in India: Price, Specifications, and More Samsung Galaxy J2 Pro Launched in India: Price, Specifications, and More Verizon to Buy Yahoo's Core Business for $4.83 Billion Verizon to Buy Yahoo's Core Business for $4.83 Billion iPhone 7 Leaked Video Shows No 3.5mm Headphone Jack; Lightning-to-3.5mm Adapter Tipped iPhone 7 Leaked Video Shows No 3.5mm Headphone Jack; Lightning-to-3.5mm Adapter Tipped Nasa Training Astronauts Underwater to Mimic Mars Mission Conditions Nasa Training Astronauts Underwater to Mimic Mars Mission Conditions Quikr Buys Hiree to Boost Its QuikrJobs Offering Quikr Buys Hiree to Boost Its QuikrJobs Offering Mediacom Ciao Trending 1 Samsung Galaxy J2 Pro Launched in India: Price, Specifications, and More 2 iPhone 7 to Launch in the Week of September 12: Report 3 Prisma for Android Now Available to Download 4 InFocus M535+ With 13-Megapixel Front Camera Launched at Rs. 11,999 5 Lenovo K5 Note India Variant to Sport 4GB of RAM, Company Tips 6 How to Play Pokemon Go in India? Here's Everything You Need to Know 7 How to Download Pokemon Go APK, Install, and Play on Android 8 Pokemon Go to Get Customisable PokeStops, New Tradable Pokemon 9 Google Maps for Android Getting Wi-Fi Only Mode and More 10 iPhone 7 Price, Release Date, Specifications, and All Other Rumours Price List Samsung phones price list Micromax phones price list Sony phones price list HTC phones price list Lenovo phones price list Intex phones price list Lava phones price list Apple phones price list Nokia phones price list Xolo phones price list LG phones price list Asus phones price list Spice phones price list Motorola phones price list BlackBerry phones price list Xiaomi phones price list Yureka phones price list Sitemaps | Archives | Advertise | About Us | Feedback | Privacy Policy | Terms &amp; Conditions | Complaint Redressal | Careers | Contact Us | RSS | Gadgets Hindi © Copyright Red Pixels Ventures Limited 2016. All rights reserved. Subscribe to Gadgets 360 Alerts For breaking tech news, latest reviews, and more. Allow Not Now SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160707185735#index"
                   NS1:content=" Keep Notes 0 Change Tommy Wonday tommy.britnell@googlemail.com Google+ Profile–Privacy My account Google+ Profile Icon Tommy Wonday tommy.britnell@googlemail.com (default) Google+ Profile Icon Thomas Britnell t.a.britnell@gmail.com All your Google+ pages › Add account Sign out My account Search Maps Play Gmail Drive Calendar Google+ Translate Photos Keep Add a shortcut More Docs Books Blogger Contacts My Business Hangouts Even more from Google Keep Notes Reminders Labels Edit Create new label Archive Bin Settings Send feedback Help App downloads Privacy · Terms Notes in the Recycle Bin are deleted after 7 days. Empty Recycle Bin now Title Take a note… Edited 18:57 Done Title nyarutarama, mtn center. X T 1 0 3 2 19th text david on sunday 20th call to david at 5.25 20 missed calls from frankie yesterday evening this morning &amp; lunchtime i answered / returned call at 9.00 friday I went to see sophie, called her at 6/7.45 kami called friday evening at 5. something kami 250788500130… Edited 20 Jun Done Title gesinyii gesinyige Kampala Edited 20 Jun Done Title *345# to get balance Edited 12 Jun Done Title Gacaca Mngami UMwami National museum, butare Kings place Kigali, Kant's house Presidents plane museum Urupapuro rwabajya mu mahanga … Edited 17 Jun Done Title Botschaft Adresse, Öffnungszeiten, Erreichbarkeit in Notfällen Deutsche Botschaft Kigali Bild vergrößern (© Botschaft Kigali) Anschrift Botschaft der Bundesrepublik Deutschland B. P. 355 KN 27 ST/5 (vormals 10, Avenue Paul VI) … Edited 10 Jun Done Title Bananas Umunece Igitoci Edited 11 Jun Done Title symdrawcric symdrawcric - kontrasting colour selector. secondart color option like shades blue &gt;&gt; yellow red &gt;&gt; green Edited 7 Jun Done Title * Excel Arbeit km milage Order bank card With draw money 1234567890 Princess kaguya Bobby Fischer against the world Fireflies Shaolin… Edited 4 Jun Done Title Promoafrika Hey hey Touched the sky Denis Ferrer Nova www.karasiragildas.ueuo.com . Noba DJeff afrozilla Makumbi Mille coline .… Edited 4 Jun Done Home karasiragildas.ueuo.com Title Www www.angelhack.com Kigali Edited 3 Jun Done Title Music € Bob James Nathan East, new cool Laura mvula . # The blossoms… Edited 31 May Done Title 07936662425 Bash The Rosie project Edited 30 May Done Remind me Sharing Cancel Save Reminder: Later today Tomorrow Next week Home Work Select date and time Select place Google account Tommy Wonday tommy.britnell@googlemail.com Search Clear search Close search Google apps Notifications Navigation menu Opening... "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705104959#index"
                   NS1:content=" EmbeddedForU Follow us on Twitter Follow us on Facebook Follow us on Google Plus Follow us on youtube Skip to content Home Microcontrollers 8051 Arduino ARM AVR PIC Embedded linux Raspberry Pi BeagleBone Atmel Tutorials Forums About Contact How prepare a bootable SD card / eMMC using Linux fdisk tool ? By Minion | May 15, 2016 0 Comment In the Previous post, we have discussed about the procedure to create a bootable SD card using disks GUI. This tool may not be available every time. Some times, we may need to format the SD card or eMMC from the embedded Linux target it self. In such cases, we need to use Linux commands/tools to format the SD card. In this post, we will use “fdisk” command line tool and other filesystem tools to prepare a bootable SD card. Prerequisite : I would you recommend you to check the Previous post , section “SD card enumeration in Linux” to identify the proper SD card device node / name. Unless you know the proper device name, don’t proceed further. Because wrong usage of commands, can wipe your entire hard disk and lead to huge data loose. How many partitions required ? A primary/boot partition, formatted to FAT file format. This partition will have several components such as bootloaders, kernel, etc .. A secondary partition for root filesystem. Using ‘fdisk’ : step 1 : List your partition table and identify SD card / eMMC card. use below command $ sudo fdisk -l You will also get a similar log as below. minion@ubuntu:~$ sudo fdisk -l Disk /dev/sda: 214.7 GB, 214748364800 bytes 255 heads, 63 sectors/track, 26108 cylinders, total 419430400 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x000e3358 Device Boot Start End Blocks Id System /dev/sda1 * 2048 417333247 208665600 83 Linux /dev/sda2 417335294 419428351 1046529 5 Extended /dev/sda5 417335296 419428351 1046528 82 Linux swap / Solaris Disk /dev/sdb: 15.9 GB, 15931539456 bytes 255 heads, 63 sectors/track, 1936 cylinders, total 31116288 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x000d24fd Device Boot Start End Blocks Id System /dev/sdb1 63 31116287 15558112+ c W95 FAT32 (LBA) In my case, SD card device file name is /dev/sdb. Linux detected as a SCSI device (/dev/sdb1) as i’m using a external card reader. If you are using SD/MMC card slot, device node will be “mmcblkX” Step 2 : Erase Master Boot Record table as well as the partition table using ‘dd’ command. sudo dd if=/dev/zero of=/dev/sdX bs=1M count=1 Log is as shown below minion@ubuntu:~$ sudo dd if=/dev/zero of=/dev/sdb bs=1M count=1 [sudo] password for minion: 1+0 records in 1+0 records out 1048576 bytes (1.0 MB) copied, 0.103481 s, 10.1 MB/s Step 3 : Create partitions Open SD device node with fdisk command. You will get a fdisk command prompt “Command (m for help):” . $ sudo fdisk /dev/sdX In the fdisk command prompt, type ‘m’ and press enter for help. To print partition table: type ‘p’ and press enter. You will see empty partition table as it is erased earlier. Command (m for help): p Disk /dev/sdb: 15.9 GB, 15931539456 bytes 64 heads, 32 sectors/track, 15193 cylinders, total 31116288 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0xedddc4f4 Device Boot Start End Blocks Id System Command (m for help): Note : Treat “–&gt;” symbol as enter in the upcoming steps Create a 256 MB first partition: In the fdisk prompt follow this sequence, “n –&gt; p –&gt; 1 –&gt; enter –&gt; +256M –&gt;”. At last type ‘p’ to see the partition table. Command (m for help): n Partition type: p primary (0 primary, 0 extended, 4 free) e extended Select (default p): p Partition number (1-4, default 1): 1 First sector (2048-31116287, default 2048): Using default value 2048 Last sector, +sectors or +size{K,M,G} (2048-31116287, default 31116287): +256M Command (m for help): p Disk /dev/sdb: 15.9 GB, 15931539456 bytes 64 heads, 32 sectors/track, 15193 cylinders, total 31116288 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x9d29a9b7 Device Boot Start End Blocks Id System /dev/sdb1 2048 526335 262144 83 Linux Command (m for help): Create second partition for root filesystem. In the fdisk command prompt “n –&gt; p –&gt; 2 –&gt; enter –&gt; +2G –&gt;” Command (m for help): n Partition type: p primary (1 primary, 0 extended, 3 free) e extended Select (default p): p Partition number (1-4, default 2): 2 First sector (526336-31116287, default 526336): Using default value 526336 Last sector, +sectors or +size{K,M,G} (526336-31116287, default 31116287): +2G Command (m for help): p Disk /dev/sdb: 15.9 GB, 15931539456 bytes 64 heads, 32 sectors/track, 15193 cylinders, total 31116288 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x9d29a9b7 Device Boot Start End Blocks Id System /dev/sdb1 2048 526335 262144 83 Linux /dev/sdb2 526336 4720639 2097152 83 Linux Command (m for help): Change the first partition to FAT. In the fdisk command prompt : “t –&gt; 1 –&gt; c –&gt; p–&gt;”. Code ‘c’ is for FAT 32 (LBA). Command (m for help): t Partition number (1-4): 1 Hex code (type L to list codes): c Command (m for help): p Disk /dev/sdb: 15.9 GB, 15931539456 bytes 64 heads, 32 sectors/track, 15193 cylinders, total 31116288 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0x9d29a9b7 Device Boot Start End Blocks Id System /dev/sdb1 2048 526335 262144 c W95 FAT32 (LBA) /dev/sdb2 526336 4720639 2097152 83 Linux Now write the partition table to SD card and exit using ‘w’ command. Command (m for help): w The partition table has been altered! Calling ioctl() to re-read partition table. Syncing disks. Step 4 : Final step, format SD card partitions. first partition to FAT, second partition to EXT4. sudo mkfs.vfat /dev/sdX1 sudo mkfs.ext4 /dev/sdX2 X can be a , b, c … In case of SD/MMC card slot, commands changes as shown below. sudo mkfs.vfat /dev/mmcblkXp1 sudo mkfs.ext4 /dev/mmcblkXp2 X can be 0, 1, 2, 3 … Category: Embedded linux Post navigation ← How to create a bootlable SD card for Raspberry pi BeagleBone using Disk Utility How to Cross compile kernel for BeagleBone Black ? → Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Comment Name * Email * Website Email * Search for: Login Log In Username: Password: Remember Me Log In Register Lost Password Recent Posts How to compile mainline u-boot for Raspberry Pi ? Embedded Linux Development on Raspberry PI using Buildroot – part2 Beaglebone Black Embedded Linux Development with Buildroot : part-1 Embedded Linux Development on Raspberry PI using Buildroot – part1 win32diskimager: How to write raw disk image to removable storage device ©2015 www.embeddedforu.com All Rights Reserved "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630095351#index"
                   NS1:content=" Convert To Word (.doc or .docx):More people are likely to have Word installed so if you needed to send these files to someone who does not have OneNote installed then you can save a OneNote file as a Word document. There will be two options which include .doc and .docx. The .doc files are for older versions of Microsoft Office Word and the .docx files are for Microsoft Office 2007 versions of Word. Once the OneNote Notebook is open click File in the top navigation menu and select “Save As” from the drop down. Here you will be able to select the type of file you are saving as by selecting the option from the “Save as type:” drop down. Convert To HTML:You can export OneNote Notebooks in a much more user friendly reading format by installing a plugin called OneNote Web Exporter which can be downloaded here. Once installed you will see a new icon in the OneNote top navigation menu that looks like a little world. The new icon is located immediately to the right of the Zoom drop down. Convert to PDF:You can also save as PDF but you will be required to install another add-in to OneNote. Click on File in the top navigation menu and select “find add-ins for other file formats” from the drop down menu. This will open a help window where you can scroll down and click on the “Microsoft Save as PDF or XPS Add-in for 2007 Microsoft Office programs” . Once the new Microsoft.com page is opened click the Download button to begin the installation which is under 1MB. After the installation is complete you can export to PDF by opening the OneNote file and selecting “Publish as PDF or XPS” from the drop down menu "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620113812#index"
                   NS1:content=" Did you know that elinux.org has Mailing Lists? Please feel free to register today to discuss the wiki in general, request features, etc. etc.. Thanks!--Wmat (talk) Beagleboard:BeagleBoneBlack From eLinux.org Jump to: navigation, search This is the official BeagleBone Black Wiki maintained and supported by BeagleBoard.org a non-profit 501(C) organization. If you have any questions or issues with the content on this Wiki, contact Gerald Coley Contents [hide] 1 BeagleBone Black Description 1.1 BeagleBone Black Features 1.2 BeagleBone Black Picture 1.3 BeagleBone Black Key Component Locations 1.4 BeagleBone Black Connector and Switch Locations 2 Frequently Asked Questions (FAQ) 3 Terms of Use 4 Board Shipments 5 Accessories 5.1 Optional JTAG 5.2 Cape Support 5.3 WIFI Adapters 5.4 Serial Debug Cable 6 Board Revisions and Changes 6.1 Revision C (Production Version) 6.2 Revision B 6.3 Revision A6A 6.4 Revision A6 6.5 Revision A5C 6.6 Revision A5B 6.7 Revision A5A 6.8 Revision A4B 6.9 Revision A4A 6.10 Revision A4 7 Tips and Pointers 7.1 Expansion Header Pin Usage 7.2 Serial Header Usage 7.3 Extremely Useful Links 7.4 Expanding the Storage Partition on microSD 7.5 BoneScript 7.6 Connecting to the BeagleBone Black: Serial Connection, SSH, or USB 7.7 Creating a uSD card for Extra Storage 8 HDMI Issues 9 Known Issues 9.1 WIKI Issues 9.2 Software 9.3 Hardware 9.3.1 Wrong Processor REV A4,A4A 9.3.2 Missing Cables REV A4,A4A 9.3.3 Display Noise REV A4 9.3.4 Serial Debug CrashREV A4, A4A 9.3.5 Improper Power Down....All Revisions 10 Software Resources 10.1 Debian Beta Image 10.2 MachineKit Debian Image with LinuxCNC and Xenomai 10.3 Angstrom 10.4 Android 10.5 FreeBSD 10.6 Nintendo 10.7 Gentoo 10.8 ArchLinux 10.9 LinuxCNC 10.10 Minix 10.11 XNU 10.12 Asterisk 10.13 TI EZSDK 10.14 Beaglenmt 11 Hardware Files 11.1 LATEST PRODUCTION FILES (C) 11.2 PREVIOUS PRODUCTION FILES (B) 11.3 PREVIOUS PRODUCTION FILES (A6A) 11.4 OLD PRODUCTION FILES (A6) 11.5 OLD PRODUCTION FILES (A5C) 11.6 OLD PRODUCTION FILES (A5B) 11.7 OLD PRODUCTION FILES (A5A) 11.8 REV A4 12 BeagleBone Capes 12.1 Onboard HDMI 12.2 Onboard eMMC 12.3 10Pin Connector 13 Regulatory Compliance Documents 14 Export Information 15 RMA Support 16 Books 16.1 Books specifically on BeagleBone 16.2 Recommended books on hot topics around BeagleBone 16.3 Recommended books on Linux 16.4 Recommended books on ARM architecture BeagleBone Black Description The BeagleBone Black is the newest member of the BeagleBoard family. It is a lower-cost, high-expansion focused BeagleBoard using a low cost Sitara XAM3359AZCZ100 Cortex A8 ARM processor from Texas Instruments. It is similar to the Beaglebone,but with some features removed and some features added. The table below gives the high points on the differences between the BeagleBone and BeagleBone Black. BBvsBBB.jpg BeagleBone Black Features The following table lists the key features of the BeagleBone Black. Features.jpg In the box is (1)BeagleBone Black board, (1)USB cable, and (1)card that should be read. BeagleBone Black Picture Here is a picture of the Rev A5A board. REV A5A.jpg BeagleBone Black Key Component Locations Here are the locations of the key components on the Rev A5A. COMP A5A.jpg BeagleBone Black Connector and Switch Locations Below is the location of the connectors and switches on the Rev A5A board. The Power Button and Battery Connections are new additions to the Rev A5A. CONN REVA5A.jpg Frequently Asked Questions (FAQ) Beaglebone Black FAQ List of frequently asked questions concerning the BeagleBone Black. It will be updated as more questions continued to be answered. Terms of Use UPDATED INFORMATION You may use the Beaglebone Black design materials as you choose. There are no licences involved in the usage of the BeagleBone Black design materials. We do not encourage the use of the board that we manufacture under the BeagleBoard.org logo in commercial products. We are not able to schedule parts and arrange for production for orders that we cannot see. Meeting demand is difficult as a result. In addition, we will make revisions to the board as we find necessary and we will not continue to make older revisions. This can result in supply and compatibility issues for those using them in a product. When used in a product, the end customer is responsible for its use in their product. BeagleBoard.org does not guarantee that it will work in any particular application or use case. Changes in components used on the production of these boards such as memory devices, may affect operation of the board, either positively or negatively. This work is licensed under the Creative Commons Attribution-Share Alike 3.0 Unported License. To view a copy of this license, visit creativecommons.org or send a letter to: Creative Commons 171 Second Street, Suite 300 San Francisco, California, 94105, USA. All derivative works released back into the public domain are to be attributed as based on the work created by Gerald Coley of BeagleBoard.org. For more information, see Creative Commons Attribution-ShareAlike 3.0 Unported License ALL design materials are Open Source and easily accessible. Everything is provided to build your own board. You can make changes as needed or use it as is. It is your product when you use these materials. Feel free to build the board yourself at your contract manufacturer of choice. If you have questions on any of this, you can contact Gerald Coley Board Shipments We have shipped a total 286,810 boards to date. 4/16......3,000 3/16......3,000 2/16......2,900 1/16......3,200 12/15.....2,800 11/15.....3,000 10/15.....2,500 09/15.....2,400 08/15.....3,000 07/15.....3,500 06/15.....4,297 05/15.....6,800 04/15.....7,104 03/15.....7,400 02/15.....6,028 01/15.....7,460 12/14.....5,274 11/14.....2,024 10/14....11,620 09/14....10,930 08/14.....6,797 07/14.....7,509 06/14....10,600 05/14.....7,500 04/14....11,297 03/14....12,698 02/14....13,050 01/14....13,575 12/13.....7,192 11/13.....9,298 10/13.....7,698 Accessories For a list of the confirmed working accessories please go to * Accessories Page Covered there are cables, power supplies, displays,etc. Anything that can be added to the BeagleBone Black. Optional JTAG There is no JTAG over USB support on the BeagleBone Black. The BeagleBone Black is different than the BeagleBone. JTAG is an uninstalled option. To install the JTAG header, all you have to do is install P2 on the back of the board. P2 is a Samtec FTR-110-03-G-D-06 connector and can be purchased from Samtec or any of their distributors. If you are using Code Composer Studio, you will need a Gel File Cape Support Beagleboard.org is not the maker of the various capes. Most of them are made and supported by Circuitco under the beagleboardtoys.com name. For information on cape compatibility and support go to BeagleBone Black Capes WIFI Adapters NOTE: It is highly recommend that you use DC power when running these dongles due to the current requirements of the dongles. DONGLE WORKS ON ASUS USB-N13 802.11 b/g/n Angstrom Debian 8.2 EDIMAX EW-7811UN D-Link DWA-125 Debian LXDE, Debian Gnome Desktop D-Link DWA-121 Angstrom Debian LXDE, Debian Gnome Desktop Belkin N150 Debian LXDE TP-Link TL-WN727N Debian LXDE, Debian Gnome Desktop Netgear WNA1100 Debian LXDE, Debian Gnome Desktop Keebox W150NU Debian LXDE, Debian Gnome Desktop Note: Always run the board from 5VDC 1A minimum supply when using a Wifi Dongle. You may need to use a extension cable to move the dongle away from the planes of the PCB. Sometimes standoffs will work. We also have had instances where when placed in a metal case, there can be Wifi issues as well. You can also use a dongle with a real antenna on it such as [http:// http://www.logicsupply.com/uwn200/. Logic Supply] which will help Serial Debug Cable For information on the serial debug cables go to Serial Debug Cables Board Revisions and Changes Revision C (Production Version) This revision increases the eMMC from 2GB to 4GB. We are making this change for several reasons: 1) Complaints from the community about lack of space left in the eMMC. 2) For those worried about their eMMC wearing out, the added space will help in the area of moving the data around to prevent wear out. Assuming of course you don't try and use it all. 3) Concerns over the long-term availability of the 2GB device. 4GB is currently the low end of the offering. This also gives us two sources. We are planning a price increase for the Rev C somewhere between $5 and $15. We are working to figure out where it needs to be. This is for several reasons: 1) To cover the increased cost of the 4G devices. 2) Currently there is $0 margin on these boards which limits our ability to bring more manufacturing capacity on line. Added some margin allows us to find more capacity. 3) Without margin, we cannot respond to component price increases due to market forces. This is of particular concern in the area of NAND and DDR3. We have been successful in fighting back some increases, but we don't know if that will continue. Revision B This version moves to the AM3358BZCZ100 processor as we are no longer able to get the limited production version of the AM3359AZCZ100. No changes in features or operation of the board resulted from this change. Revision A6A No changes in features or operation of the board. 1) Added optional zero ohm resistor to tie GND_OSC1 to system ground. 2) Changed C106 to a 1uF capacitor. 3) Changed C24 to a 2.2uF capacitor. This extends the reset signal to solve an issue where some boards would not boot on power up. 4) Removed R9 and installed R8. This change was based on an alert we just received from TI that there is a power sequencing issue with the TPS65217C power management IC and the power sequencing is incorrect. This change connects the VDDS rail to the VRTC rail. We do not believe at this time, that the issue is causing any issues with the boards, but we want to comply with the directive. Revision A6 No changes in features or operation of the board. 1) Based on notification from TI, in random instances there could be a glitch in the SYS_RESETn signal from the processor where the SYS_RESETn signal was taken high for a momentary amount of time before it was supposed to. To prevent this, the signal was ORed with the PORZn (Power On reset). 2) Noise issues were observed in other designs where the clock oscillator was getting hit due to a suspected issue in ground bounce. A zero ohm resistor was added to connect the OSC_GND to the system ground. 3) Moved the enable for the VDD_3V3B regulator to VDD_3V3A rail. Change was made to reduce the delay between the ramp up of the 3.3V rails. No evidence of this being an issue, but it really needs to be as close to the same as possible. Revision A5C Production had some fallout of boards when running the HDMI tests in the previous production run. Resistor values were tweaked to improve the test results. No changes in features or operation of the board. 1) Changed R46,R47,R48 to a 0 ohm. 2) Changed R45 to a 22 Ohm. Revision A5B 1) Updated the PCB to incorporate the modification that was being done on Rev A5A. There is NO DIFFERENCE AT ALL in functionality between REV A5A and REV A5B. 2) Made the LEDs dimmer for those that could not sleep due to the brightness of the LEDs. Revision A5A 1) Boards are built using the XAM3359AZCZ100 processor. 2) PCB Change...LCD noise issue was resolved by adding 47pf bypass caps on some of the LCD signals. 3) PCB Change...Added access to four battery charger signals on the TPS65217 (TS=Temperature Sense, BAT=Battery connection,BATT_SENSE=Battery voltage pin, GND=Ground). Pins are not populated but the four signals are in a 2x2 .1x.1 spacing. 4) PCB Change...Added a power button which allows for wake up, power down, and sleep options. It also provides the ability to alert the processor before powering down to provide an orderly shutdown. It is expected that SW will be used in conjunction with the switch to control the various power modes and transitions from one to the other. By holding the button down for 8 seconds, it will force a power down of the board. 5) Added a 100K pull down resistor from J1 pin 1 to J1 pin 4 to fix the unterminated serial port issue. Revision A4B Added a 100K pull down resistor between pins 1 and 4 of J1 to fix the serial port issue. Revision A4A Incorporated the capacitors to fix the noise issue on the display Revision A4 First prototype release version of the board. Limited distribution. One notable issue here is that the board has an AM3352 processor instead of an AM3359, despite how the part is marked. Part was mismarked as an AM3359. The SGX and PRU are not operational. Tips and Pointers Expansion Header Pin Usage There are several precautions that need to me taken when working with the expansion headers to prevent damage to the board. ALL VOLTAGE LEVELS ARE 3.3V MAX. APPLICATION OF 5V TO ANY I/O PIN WILL DAMAGE THE PROCESSOR AND VOID THE WARRANTY. ANALOG IN VOLTAGES ARE 1.8V MAX. APPLICATION OF &gt;1.8V TO ANY A/D PIN WILL DAMAGE THE PROCESSOR AND VOID THE WARRANTY. 1) Do not apply any voltages to any I/O pins when the board is not powered on. 2) Do not drive any external signals into the I/O pins until after the SYS_RESETn signal is HI (3.3V). 3) Do not apply any voltages that are generated from external sources until SYS_RESETn signal is HI. 4) If voltages are generated from the VDD_5V signal, those supplies must not become active until after the SYS_RESETn signal is HI. 5) If you are applying signals from other boards into the expansion headers, make sure you power the board up after you power up the BeagleBone Black or make the connections after power is applied on both boards. In the System Reference Manual you will find reference to Boot Pins. These pins are connected to the expansion header. If you load or terminate these pins to the point it affects their default setting, the board will not boot. Powering the processor via its I/O pins can cause damage to the processor. The expansion headers can be viewed on this Cape Expansion Headers. Serial Header Usage Power restrictions on the serial debug header are not an issue. On the board, there is a buffer that prevents damage from occurring by having the connector of the FTDI cable connected to the the header. It is safe to do and will not cause damage to the board when power is not applied to the board. Extremely Useful Links BeagleBoard home page BeagleBoard How to Videos Hipster Cricuits Getting Started On BeagleBone Black Adafruit Tutorials This site is well worth a visit. You may even decide to make it your home page! Derek Molloy's Blog GPIO and Device Tree (Derek Molloy) C/C++ Introduction on BeagleBone (Derek Malloy) Hackaday You can also subscribe to this. Should be checked often for the latest cool projects on BeagleBone Black Interent Sharing On Windows 7 Robert P. J. Day's Wiki Linuxonarm Wiki Expanding the Storage Partition on microSD If you have installed a Linux distribution on your microSD you can modify the root file system partition. You are then able to utilize all of the space on your microSD card regardless of the size of the default partition of your given image. Follow the instructions found on Expanding File System Partition on a MicroSD. Note: The instructions on that page are general and are not guaranteed to work on every Linux distribution. BoneScript Bonescript is a Node.js library specifically optimized for the Beagle family, featuring familiar Arduino function calls, exported to the browser. The BoneScript library provides several functions useful for interacting with your hardware. The following BoneScript provides a dozen of hardware demos that interact with the BeagleBone Black. Connecting to the BeagleBone Black: Serial Connection, SSH, or USB In the following Terminal Shells page, there are instructions on how to connect to the BeagleBone Black through either a serial connection, SSH using an ethernet cable, or SSH to the BeagleBone's built-in IP address over a USB cable. Creating a uSD card for Extra Storage MicroSD Card For Extra Storage HDMI Issues HDMI Issues..We have several people having issues getting the board to work with various TVs and Displays. RMA returns have shown no issues. If you are having issues a separate support page has been set up at HDMI Issues Known Issues WIKI Issues If you find any issues with any information on this WIKI, please send the information to the discussion forum http://beagleboard.org/Community/Forums. Software 1) The microSD card cannot be used as a storage device when booting from microSD in the 3.8 kernel. 2) SGX support is not currently provided i the 3.8 kernel. 3) The latest production image 6_20_2013 does not work on Lapdocks. You can find a list of reported issues and add additional ones by going to Bug Tracker Hardware Here are the known Hardware issues: Wrong Processor REV A4,A4A Processor is a AM3352 due to the incorrect part being marked as an AM3359. Missing Cables REV A4,A4A Does not ship with any cables. Rev A5 will ship with the USB cable. Display Noise REV A4 If you look closely, you will notice some noise in the display. This is due to a termination issue on the board caused by too many connections to the LCD data pins. This will be fixed on the A5 revision. Serial Debug CrashREV A4, A4A Serial port can cause the system to crash if there is not a serial cable plugged into J1. Improper Power Down....All Revisions We have been noticing a very small number of boards that are experiencing power issues, where the LED flashes and the board does not power up. We have been chasing this for a while now and due to the small number of boards that have the issue and the fact that the issue can also be caused by having things connected to IO pins not powered correctly, it has been hard to nail down. Our initial take was that it was a manufacturing issue on some boards, but we could never prove that. Based on the latest information we have gathered, this appears to be an instance where the PMIC does not power down the processor in the right order due to the violent removal of the power cables, either USB or DC. So, we are recommending that the power button be used to power off the board or by issuing the Halt command. After that you can remove the power cable. If everyone follows this process, we should see a decrease in these issues, but it will take a while for the results, either good or bad, to show up. This will also help prevent the contamination of the eMMC and the SD cards by allowing the kernel to shutdown properly before power is removed. Another issue that we have seen is that the power supply when plugged in will create a spike that exceeds the voltage rating of the PMIC or will cause the voltage to drop momentarily. This can occur after power up cycle has started. When this occurs, the PMIC will shutdown. This can cause the processor to be powered down before it is powered all the way up, damaging the processor. It is suggested that to prevent this that you use a well regulated power supply that can handle the current surge of the powering up process. Software Resources Debian Beta Image All boards now ship with the Debian image. The Debian is compatible with all versions of the BeagleBone Black MachineKit Debian Image with LinuxCNC and Xenomai Building a CNC machine or 3D printer can be greatly simplified with this customized Linux distribution. http://blog.machinekit.io/p/machinekit_16.html Angstrom It is highly recommended that you always use the latest version of the Software. For instructions on updating the Angstrom Software on your BeagleBone Black go to Updating the Software If you power off the board without using the Power Button to do it, you can corrupt the data in the eMMC Flash. For instructions on reflashing the Angstrom Software on your BeagleBone Black go to Updating the Software Software Sources Bootloader: http://www.denx.de/wiki/U-Boot/SourceCode (git://git.denx.de/u-boot.git) Kernel: http://github.com/beagleboard/kernel/tree/3.8 Root file system: http://github.com/beagleboard/meta-beagleboard To access the getting started guide do the following: 1) Go to http://github.com/jadonk/beaglebone-getting-started. 2) At the top of the page next to the &quot;Clone in Windows&quot; button, click the ZIP button. 3) Unzip that folder into a separate directory. 4) Open the readme file. Android For instructions on how to get Android onto the board goto Android FreeBSD FreeBSD now has official support for BeagleBone Black: Project Page Nintendo If you want to turn your BeagleBone Black into a SNES (Super Nintendo Entertainment System) you can check that out at BeagleSNES This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. Gentoo This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. Gentoo ArchLinux This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. ArchLinux LinuxCNC This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. LinuxCNC Minix This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. Minix XNU This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. CNU Asterisk This link is provided as a convenience and the software located at this link is not supported by Circuitco or BeagleBoard.org. Asterisk (Instructions Asterisk on BeagleBone Black). TI EZSDK For information on how to install the latest EZSDK from TI got to EZSDK. Beaglenmt The BeagleBone Network Multitool (beaglenmt) is a lightweight, X11-free, networking-centric, and IPv6-ready server distribution targeting the BeagleBone platform. beaglenmt supports the BeagleBone Black hardware platform. Hardware Files LATEST PRODUCTION FILES (C) The links below are static links that always point to the latest version of the listed documents. These links can be used by distributors or users to point to the latest documentation. As documents are updated, the links will remain the same, but the actual file will be updated. This insures that you always have the latest documents and your links will always work. If you have any questions on these files, contact Gerald Coley System Reference Manual Rev C.1(PDF) Schematic (PDF) Schematic (OrCAD) BOM (xls) PCB Files Rev B6 (Allegro and Gerbers) MD5 Checksum for all files (md5) All Hardware Documents If you are interested in an Altium version, there is a version for the original A5B board they can be found at Altium A5B. These files are provided AS IS with no support. If you are interested in an Mentor version of the A5C board they can be found at Mentor A5C. These files are provided AS IS with no support. Mentor has also recently released a PADS version of the board at PADS BeagleBone Black. Upverter has a version uploaded (unverififed) Upverter BeagleBone Black. You can find the Solid Works and 3D PDF files provided AS-IS at 3D Models A GitHub repo is available with all revisions of the documentation - https://github.com/CircuitCo/BeagleBone-Black PREVIOUS PRODUCTION FILES (B) System Reference Manual B (PDF) Schematic B (PDF) Schematic B (OrCAD BOM B (xls) PCB Files Rev B (Allegro and Gerbers) All Hardware Documents B PREVIOUS PRODUCTION FILES (A6A) System Reference Manual A6A (PDF) Schematic A6A (PDF) Schematic A6A (OrCAD BOM A6A (xls) PCB Files A6A (Allegro and Gerbers) All Hardware Documents A6A OLD PRODUCTION FILES (A6) System Reference Manual A6 (PDF) Schematic A6 (PDF) Schematic A6 (OrCAD BOM A6(xls) PCB Files A6 (Allegro and Gerbers) All Hardware Documents A6 OLD PRODUCTION FILES (A5C) System Reference Manual A5.6 (PDF) Schematic A5C (PDF) Schematic A5C (OrCAD BOM A5C(xls) PCB Files A5C (Allegro and Gerbers) All Hardware Documents A5C OLD PRODUCTION FILES (A5B) System Reference Manual A5.5 (PDF) Schematic A5B (PDF) Schematic A5b (OrCAD BOM A5B(xls) PCB Files A5B (Allegro and Gerbers) All Hardware Documents A5B OLD PRODUCTION FILES (A5A) System Reference Manual A5.3 (PDF) Schematic A5A (PDF) Schematic A5A (OrCAD BOM A5A(xls) PCB Files A5A (Allegro and Gerbers) All Hardware Documents A5A REV A4 Bill of Materials System Reference Manual (PDF) Schematic (PDF) BeagleBone Capes BeagleBone capes are add on boards that can be connected to the BeagleBone Black to add functionality. These capes are made by a lot of different companies and individuals. A list of capes that are in production are listed at BeagleBone Capes. If you have a cape that is in production and can be purchased and you would like it listed, please contact Circuitco. More information regarding the Cape Expansion Headers can be found at Cape Expansion Headers. Most of the current capes will work with the BeagleBone Black at some point. However, the kernel is 3.8 on the BeagleBone Black, so work is required to get the drivers updated for most of the capes to work. Some may not work or may require some hardware changes due to some differences in the design of the BeagleBone Black as described below. For a list of the ones that are currently identified as compatible and incompatible, go to BeagleBone Black Capes. Onboard HDMI The onboard HDMI driver uses the LCD pins. They are still connected to the expansion header, but in some cases, they could cause an LCD cape to have some noise issues unless the cape has a buffer. A buffer should take care of this issue. If you want to use these pins as GPIO pins, you may be limited in speed due to the capacitance caused by the loadig of the pins by the HDMI driver. They should function fine in most applications. Onboard eMMC The onboard eMMC uses the MMC1 signals. They are also connected to the expansion header. The expectation is that in order to use these signals, the eMMC device on the BeagleBone Black will need to be disabled by activating the reset line to the eMMC device. It is not clear that this will work as you have to write to the eMMC first and tell it to enable the reset. At this point in time, it is not totally clear that the reset line will do the trick. Further investigation is ongoing. This will also require booting from the uSD port. Best option is to not use the MMC1_CLK and MMC1_CMD signals at all and tie them low. Do not use these signals for anything else will trying to use the other eMMC1 lines on the expansion header. 10Pin Connector The 10 pin power expansion header has been removed. Any cape needing this connector will not be 100% compatible. Regulatory Compliance Documents FCC CE REACH Export Information ECCN: 5A002A1 CCATS: G141473 Documents RMA Support If you feel the board is defective and you want to get it looked at go to RMA Request You will need the serial number. It is located on the expansion header in the form of a white label. We only accept RMA requests for those boards purchased through authorized BeagleBoard.org distributors. You can find a list of authorized distributors on the buy pages at BeagleBoard.org If you purchase a board from an unauthorized distributor, you need to return the board to them for replacement or repair. Shipping to the repair depot is covered by the requester. Return shipping is paid by the repair depot. Books Books specifically on BeagleBone BeagleBone Cookbook: Software and Hardware Problems and Solutions examples Exploring BeagleBone: Tools and Techniques for Building with Embedded Linux examples Bad to the Bone: Crafting Electronics Systems with Beaglebone and BeagleBone Black examples Getting Started with BeagleBone: Linux-Powered Electronic Projects With Python and JavaScript Programming the BeagleBone Black: Getting Started with JavaScript and BoneScript examples Learning BeagleBone Python Programming Learning BeagleBone BeagleBone Home Automation Building a Home Security System with BeagleBone BeagleBone Robotic Projects BeagleBone for Secret Agents BeagleBone for Dummies 30 BeagleBone Black Projects for the Evil Genius The BeagleBone Black Primer Building a BeagleBone Black Super Cluster BeagleBone Black Interfacing: hardware and software Mastering BeagleBone Robotics BeagleBone Black Programming by Example BeagleBone Media Center Android Hardware Interfacing with the BeagleBone Black BeagleBone Essentials Building Network and Servers Using Beaglebone Using Yocto Project with BeagleBone Black BeagleBone Black Programming using Matlab BeagleBone Black Cookbook My BeagleBone Black work notes (Japanese) BeagleBone Robot Development Guide(Chinese Edition) Programming the BeagleBone BeagleBone Home Automation Blueprints Recommended books on hot topics around BeagleBone Hacking and Penetration Testing with Low Power Devices The Internet of Things: DIY Projects with Arduino, Raspberry Pi, and BeagleBone Black Make: JavaScript Robotics: Building NodeBots with Raspberry Pi, Arduino, and BeagleBone Embedded Android: Porting, Extending, and Customizing Embedded Linux Development with the Yocto Project Embedded Linux Systems with the Yocto Project Software Engineering for Embedded Systems: Methods, Practical Techniques, and Applications Beginning NFC: Near Field Communication with Arduino, Android, and PhoneGap Zero to Maker: Learn (Just Enough) to Make (Just About) Anything Designing the Internet of Things Getting Started with Electronic Projects Operating System Design: The Xinu Approach, Second Edition Learning ROS for Robotics Programming - Second Edition Hacking Your LEGO Mindstorms EV3 Kit Recommended books on Linux Embedded Linux Primer: A Practical Real-World Approach Building Embedded Linux Systems Linux Device Drivers Linux All-in-One For Dummies Embedded Operating Systems: A Practical Approach (Undergraduate Topics in Computer Science) Recommended books on ARM architecture ARM Assembly Language: Fundamentals and Techniques ARM Architecture Reference Manual - may be available as a free download Retrieved from &quot;http://elinux.org/index.php?title=Beagleboard:BeagleBoneBlack&amp;oldid=408656&quot; Categories: BeagleBoardBlack BeagleBoard Navigation menu Personal tools Log in Request account Log in / create account with OpenID Namespaces Beagleboard Discussion Variants Views Read View source View history More Search Navigation Main Page Community portal Current events Recent changes Help Volunteering Bug Tracker Where else to find us Google+ Community Twitter (@elinux) #elinux on Freenode Facebook (@elinux.org) Mailing Lists Tools What links here Related changes Special pages Printable version Permanent link Page information This page was last modified on 2 May 2016, at 08:13. This page has been accessed 1,110,396 times. Content is available under a Creative Commons Attribution-ShareAlike 3.0 Unported License unless otherwise noted. Privacy policy About eLinux.org Disclaimers a Creative Commons Attribution-ShareAlike 3.0 Unported License Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628115855#index"
                   NS1:content=" site logo Embedded Reflections Logikon Labs Blog Menu Skip to content How-to create a custom microSD card image for the BeagleBone Black 8 Replies beagle logoThis article serves as a guide on how to create a custom microSD card image for the BeagleBone Black. The steps described in this guide are pretty much platform agnostic. One could also adjust them to other systems, besides the BeagleBone Black. The BeagleBone Black is an open hardware ARM single-board computer, very popular for its attractive price and rich set of features. The system ships with an Ångström Linux distribution installed in its internal 2GB flash, while a microSD card slot allows running other operating systems as well (or replacing the contents of the internal flash). Various pre-made microSD card images are available, and eewiki.net has very detailed steps on creating a microSD with your own contents. However, what we could not find (and decided to write about it) was a guide on how to generate our own image of a microSD for the BeagleBone Black. This can come in handy in several situations, such as when you want to: prepare all the work without having the actual microSD card at hand. use the card image in a virtual machine. maintain different versions of your installation. automate the process via scripts, without being forced to write the result to a microSD card every time. speed up the creation of multiple microSD cards from the same image. The following links were used as input while writing this guide. http://eewiki.net/display/linuxonarm/BeagleBone+Black https://wiki.archlinux.org/index.php/Creating_Arch_Linux_disk_image Prerequisites In order to perform the tasks described in this guide, you will need the following. A standard GNU/linux distribution. We use Debian. Root access via sudo. If you prefer su, adjust the steps accordingly. The sfdisk tool. In Debian-based distributions, install the package “util-linux”. The kpartx tool. In Debian-based distributions, install the package “kpartx”. The mkfs.vfat and mkfs.ext4 tools. In Debian-based distributions, install the packages “dosfstools” and “e2fsprogs”. Optionally, you might also want to use the following. The ddrescue tool. In Debian-based distributions, install the package “gddrescue”. The qemu-img tool. In Debian-based distributions, install the package “qemu-utils”. If you use a Debian-based distribution and you want to install all of the above tools at once, you can issue the following command. $ sudo apt-get install util-linux kpartx dosfstools e2fsprogs gddrescue qemu-utils Image preparation Create an empty image The first step is to create an empty image file of an appropriate size. For our example, we will be creating a 500MiB image file (with a MiB being defined by IEC as 1024×1024 bytes, also known as a Mebibyte). This task can be accomplished in many ways. The most standard way is to use the dd command, which is available and installed in all GNU/Linux distributions, as part of the GNU coreutils software package. $ dd if=/dev/zero of=bbb.img bs=1M count=500 In the above command, we create a file named bbb.img, filled with zeroes, using 500 blocks of 1MiB each. Another way is to make use of a little utility from QEMU. $ qemu-img create bbb.img 500M Partition the image The next step is to create partitions inside the empty image file, as if it were a physical storage media. We use sfdisk for this task and we provide all the necessary parameters via standard input. $ sudo sfdisk --in-order --Linux --unit M bbb.img &lt;&lt; EOF 1,48,0xE,* ,,,- EOF In the above example, we create two partitions inside our image file. The first one will be the boot partition, starting at an offset of 1MiB, with a size of 48MiB and partition id “W95 FAT16 (LBA)”. The second one will consume all remaining space (451MiB in our example) and will have the default partition id (“Linux”). Format and mount the partitions As with any newly-partitioned media, we also have to create filesystems inside our partitions. However, before we do that, we will use the excellent kpartx command from multipath-tools, to make the handling of the partitions inside our image easier. $ sudo kpartx -av bbb.img Keep note of the output of the above command, in our example it was: add map loop0p1 (253:0): 0 98304 linear /dev/loop0 2048 add map loop0p2 (253:1): 0 923648 linear /dev/loop0 100352 We are mainly interested in the loop device name (in our case loop0). The above command makes use of the device mapper mechanism of the linux kernel to create virtual block devices for the two partitions inside our image. Assuming that kpartx reported loop0 as the loop device name, our two partitions will now be available as /dev/mapper/loop0p1 and /dev/mapper/loop0p2. We can now format our partitions and mount them in temporary folders. We use FAT16 for the boot partition and assign the label “boot” to it, and EXT4 for the root partition and assign the label “rootfs” to it. $ sudo mkfs.vfat -F 16 /dev/mapper/loop0p1 -n boot sudo mkfs.ext4 /dev/mapper/loop0p2 -L rootfs mkdir -p tmpmnt/boot mkdir -p tmpmnt/rootfs sudo mount /dev/mapper/loop0p1 tmpmnt/boot/ sudo mount /dev/mapper/loop0p2 tmpmnt/rootfs/ Make sure that you replace the loop device names with whatever was reported when you executed the kpartx command. We are now ready to add files to our image. Adding files to image With both our partitions mounted as virtual block devices, we can copy any files we like into them, using any standard file copying method, be it command-line or graphical. For a typical BeagleBone Black installation, we will be copying the bootloader (u-boot), the linux kernel image (zImage) and the compiled device tree structures (.dtb files) to the boot partition, while the actual root filesystem and any linux kernel modules will be copied to the root partition. You can refer to the BeagleBone Black page on eewiki.net for more information on how to obtain these files and where exactly to copy them inside your image file. You can also check out the Debian Live project if you are looking for a way to generate your own root file system from scratch. Assuming that you have the bootloader, kernel and filesystem, make sure that you first copy the MLO file, followed by the u-boot.img file of the bootloader into an empty, freshly formatted FAT16 boot partition. The remaining files can be copied in any order. Finish image creation When we are done with adding files to the image, we must make sure that all files have finished being copied to the image, unmount the virtual block devices and release them. $ sync sudo umount tmpmnt/boot/ sudo umount tmpmnt/rootfs/ sudo kpartx -dv bbb.img That’s all. The image is now ready and you can use it as it is, or copy it to a microSD card. Copy image to microSD card (optional) To copy the image file to a microSD card, you can use the standard dd command. $ sudo dd if=bbb.img of=[block_device] Alternatively, we suggest using ddrescue, which has a more verbose output. $ sudo ddrescue -f bbb.img [block_device] In the above commands, replace [block_device] with the block device name of your microSD card (such as /dev/sdx). facebooktwittergoogle_plusredditlinkedinmail This entry was posted in ARM, Embedded, Linux, Open Hardware, Open Source and tagged beagle, beaglebone black, howto, image, microsd on February 27, 2014 by Dimitris Lampridis. Post navigation ← Tinkering for the masses Come hear us talk about our vision of Free Software! → 8 thoughts on “How-to create a custom microSD card image for the BeagleBone Black” Vishwa Shanika February 17, 2015 at 06:17 Seems great work. But I am encountered a error while entering sudo sfdisk –in-order –Linux –unit M bbb.img &lt;&lt; EOF 1,48,0xE,* ,,,- EOF I could not find out what is the meaning of &amp;lt. Cou you please eleborate little bit. Reply ↓ Dimitris LampridisDimitris Lampridis Post authorFebruary 17, 2015 at 11:56 oops, that was obviously not meant to be “&amp;lt&amp;lt” but “&lt; &lt;&quot;, which is of course a redirection[1]. Thanks for spotting that! [1]: http://www.tldp.org/LDP/abs/html/io-redirection.html Reply ↓ Gerb November 15, 2015 at 18:07 With the latest version of util-linux 2.27.+ some of the sfdisk options got removed and the sfdisk command you have listed doesn’t work anymore. Or atleast in Fedora 23. I had to change it to this to: sudo sfdisk /dev/sdX &lt;&lt; EOF 1M,48M,0xE,* ,,,- EOF This gives me a boot partition of 48MiB FAT16 LBA (offset by 1 MiB) and a Linux (rootfs) partition for the rest of the sdcard. Does that seem like the correct way to prepare the sdcard for the beaglebone? Reply ↓ Dimitris LampridisDimitris Lampridis Post authorNovember 16, 2015 at 10:34 Unfortunately, I don’t have a system with util-linux 2.27+ to test this, but if you get two partitions with the first being 48MiB FAT16 LBA, offset by 1 MiB, and the second one being Linux with all the remaining space, then I don’t see a problem. Reply ↓ Srujan Sriram December 4, 2015 at 19:40 Based on these steps, can I directly boot from the Micro-SD after completing step – “Copy image to microSD card (optional)”? Reply ↓ Dimitris LampridisDimitris Lampridis Post authorDecember 7, 2015 at 10:59 Yes, you will be able to boot from the microSD, assuming that you have copied the correct files (bootloader, kernel, device tree blob, root filesystem) and in the correct order (step “Adding files to image”). Reply ↓ Sam April 3, 2016 at 06:45 Forgive me if im being foolish here: “make sure that you first copy the MLO file, followed by the u-boot.img file of the bootloader into an empty, freshly formatted FAT16 boot partition.” say ive followed along the eewiki article and build myself u-boot and a kernel. im drawing a blank as to how exactly to “copy” [read install] MLO, u-boot.img etc into the boot partition we have mounted at ~/tmpmnt/boot. is cp used or a dd block copy. doing this for learning purposes to make a minimal debian SD Image from scratch, and all the niceties that go with it. Reply ↓ Dimitris LampridisDimitris Lampridis Post authorApril 4, 2016 at 00:22 Just a standard “cp”. But, it is important to respect the order. On a freshly-formatted FAT16 partition, copy first the MLO, followed by u-boot.img. Reply ↓ Leave a Reply Cancel reply Your email address will not be published. Required fields are marked * Name * Email * Website Comment You may use these HTML tags and attributes: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;s&gt; &lt;strike&gt; &lt;strong&gt; &lt;pre prompt=&quot;&quot; escaped=&quot;&quot;&gt; Current ye@r * Leave this field empty Search for: Links Home About Us Logikon Labs Website Follow Us linkedinrssmail Recent Posts Come hear us talk about our vision of Free Software! How-to create a custom microSD card image for the BeagleBone Black Tinkering for the masses Advances of open hardware in the scientific community The state of open source Linux drivers for ARM SoC GPUs Archives May 2014 February 2014 July 2013 May 2013 Categories 3D printing ARM Drivers Embedded FPGA Linux Open Hardware Open Source SoC Copyright © 2012-2013 Logikon Labs. All rights reserved. All logos and trademarks are the property of respective owners. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160627160810#index"
                   NS1:content=" Raspberry-at-home.com – Your ultimate source of Raspberry Pi tutorials (WiFi, 3G, XBMC, Subtitles, VoD, TVN Player, IPLA, TVP, Squeezeslave, Logitech Media Server, Sickbeard, Webcam, Torrent, DLNA) Basics Software Hardware Tips &amp; Tricks About Installing 3G modem Posted by Jacek Tokar Posted on March 19, 2013 Posted under Hardware Comments 22 Comments If you have 3G modem, you can easily connect it to your precious RPi and have internet everywhere you go. This can be first step to turn your RPi into wireless 3G router or you can just do it to make sure, that wherever you go, XBMC would be able to download subtitles for the movie :) So, here are step by step instructions… If you need to buy 3G modem, make sure that it is well supported by RPi – this article was tested using Huawei 220. Verified peripherals can be found here Before we start, connect your modem to powered USB hub and connect the hub to your RPi. Now you can turn on RPi. I always recommend running package update before we start installing anything: sudo apt-get update 1 sudo apt-get update No we need to install ppp: sudo apt-get install ppp 1 sudo apt-get install ppp Now we need a client to connect to the internet – name of the program is sakis3G. [14-June-2013] sakis3g stopped working for me in raspbmc. If you also have problems see bottom of the article where I use wvdial. SAKIS3G version Since at the time when this article was created, web site www.sakis3g.org was not working, you can download sakis3g from our server. From RPi shell you can download it like this: wget &quot;http://raspberry-at-home.com/files/sakis3g.tar.gz&quot; 1 wget &quot;http://raspberry-at-home.com/files/sakis3g.tar.gz&quot; I suggest you copy the file to /usr/bin/modem3g directory and unpack it: sudo mkdir /usr/bin/modem3g sudo chmod 777 /usr/bin/modem3g sudo cp sakis3g.tar.gz /usr/bin/modem3g cd /usr/bin/modem3g sudo tar -zxvf sakis3g.tar.gz sudo chmod +x sakis3g 1 2 3 4 5 6 sudo mkdir /usr/bin/modem3g sudo chmod 777 /usr/bin/modem3g sudo cp sakis3g.tar.gz /usr/bin/modem3g cd /usr/bin/modem3g sudo tar -zxvf sakis3g.tar.gz sudo chmod +x sakis3g Sakis3G is smart enough to read internet settings from your sim card – all you need to do is to point it to use the right connection setting. Here is what we get without any further configuration (for now): sudo ./sakis3g connect Please select APN by using APN variable, or by enabling interactive mode. $ /usr/bin/modem3g/sakis3g --interactive &quot;connect&quot; Available options are: Internet (Internet) CUSTOM_APN Custom APN... Example: $ /usr/bin/modem3g/sakis3g APN=&quot;Internet&quot; 1 2 3 4 5 6 7 8 9 10 sudo ./sakis3g connect Please select APN by using APN variable, or by enabling interactive mode. $ /usr/bin/modem3g/sakis3g --interactive &quot;connect&quot; Available options are: Internet (Internet) CUSTOM_APN Custom APN... Example: $ /usr/bin/modem3g/sakis3g APN=&quot;Internet&quot; Internet is a APN setting from my SIM card. In order to use it you can start sakis3g with the command as in example above and adding connect word, but personally I suggest creation of /etc/sakis3g.conf file with single line: APN=&quot;Internet&quot; 1 APN=&quot;Internet&quot; Please note that the line can be different for your operator/APN setting. In case (for some reason) sakis3G is not able to detect your internet APN setting you can enter in conf file all other necessary information. In this case follow instructions from ./sakis3g man sakis3g.conf When you’re done with creation of /etc/sakis3g.conf you can now run: sudo ./sakis3g connect E220 connected to PLAY (26006). 1 2 sudo ./sakis3g connect E220 connected to PLAY (26006). To disconnect just run: sudo ./sakis3g disconnect Disconnected. 1 2 sudo ./sakis3g disconnect Disconnected. If you don’t want to play with conf file you can always start sakis3G in interactive mode (even in console): /usr/bin/modem3g/sakis3g --interactive &quot;menu&quot; &quot;console&quot; 1 /usr/bin/modem3g/sakis3g --interactive &quot;menu&quot; &quot;console&quot; wvdial version WVDIAL is less intuitive then sakis3g and I find it quite hardcore but so far I haven’t found more decent replacement. First, we need to install wvdial: sudo apt-get -y install wvdial 1 sudo apt-get -y install wvdial Once installed we need to create a config file for it (/etc/wvdial.conf). Content of this file may be a bit different for some of you (if it is, let me know) but here is mine: pi@raspbmc:~$ cat /etc/wvdial.conf [Dialer Defaults] Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Modem Type = Analog Modem Baud = 9600 New PPPD = yes Modem = /dev/ttyUSB0 ISDN = 0 ; Phone = &lt;Target Phone Number&gt; ; Password = &lt;Your Password&gt; ; Username = &lt;Your Login Name&gt; [Dialer play] Modem = /dev/ttyUSB0 Baud = 460800 Init1 = ATH Init2 = ATE1 Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; Dial Command = ATD Phone = *99# Stupid mode = yes Username = &quot;blank&quot; Password = &quot;blank&quot; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 pi@raspbmc:~$ cat /etc/wvdial.conf [Dialer Defaults] Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Modem Type = Analog Modem Baud = 9600 New PPPD = yes Modem = /dev/ttyUSB0 ISDN = 0 ; Phone = &lt;Target Phone Number&gt; ; Password = &lt;Your Password&gt; ; Username = &lt;Your Login Name&gt; [Dialer play] Modem = /dev/ttyUSB0 Baud = 460800 Init1 = ATH Init2 = ATE1 Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; Dial Command = ATD Phone = *99# Stupid mode = yes Username = &quot;blank&quot; Password = &quot;blank&quot; Section [Dialer Defaults] is automatically created when wvdial is installed. I have added section [Dialer play], because my GSM operator is PLAY MOBILE :). [Dialer play] section overrides settings from [Dialer Defaults] if there are any conflicts. Let me try to explain what [Dialer play] config items mean: [Dialer play] Modem = /dev/ttyUSB0 #device you will be using to connect - you may need to change it in case your modem is not detected with that setting Baud = 460800 #baud rate - I am not sure what the setting should be and how it can impact network throughput - it is speed at which wvdial will communicate with your modem #InitX commands belowy are Hayes commands that will be sent to modem Init1 = ATH #hangup Init2 = ATE1 #echo commands so we see what is going on Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; #defines packet data protocol context # 1 : PDP context ID, minimum value is 1, maximum value depends on device (to be honest no idea what that is :) ) # protocol name [IP|IPv6|PPP] # internet - is my APN name - may be different for you - check with your operator if needed Dial Command = ATD # command to dial the number; not really needed in my case Phone = *99# # number to dial (can be different for you) Stupid mode = yes # wvdial will not interpret any prompts from the server Username = &quot;blank&quot; # put user name here if you ISP requires it. If not, put any username here Password = &quot;blank&quot; # put user name here if you ISP requires it. If not, put any username here 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [Dialer play] Modem = /dev/ttyUSB0 #device you will be using to connect - you may need to change it in case your modem is not detected with that setting Baud = 460800 #baud rate - I am not sure what the setting should be and how it can impact network throughput - it is speed at which wvdial will communicate with your modem #InitX commands belowy are Hayes commands that will be sent to modem Init1 = ATH #hangup Init2 = ATE1 #echo commands so we see what is going on Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; #defines packet data protocol context # 1 : PDP context ID, minimum value is 1, maximum value depends on device (to be honest no idea what that is :) ) # protocol name [IP|IPv6|PPP] # internet - is my APN name - may be different for you - check with your operator if needed Dial Command = ATD # command to dial the number; not really needed in my case Phone = *99# # number to dial (can be different for you) Stupid mode = yes # wvdial will not interpret any prompts from the server Username = &quot;blank&quot; # put user name here if you ISP requires it. If not, put any username here Password = &quot;blank&quot; # put user name here if you ISP requires it. If not, put any username here Full list of options can be found here: Now we can connect (I suggest starting it in a separate shell thus &amp; at the end; “play” is a name from a config file): pi@raspbmc:~$ sudo wvdial play &amp; [1] 3143 pi@raspbmc:~$ --&gt; WvDial: Internet dialer version 1.61 --&gt; Initializing modem. --&gt; Sending: ATH ATH OK --&gt; Sending: ATE1 ATE1 OK --&gt; Sending: AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; OK --&gt; Modem initialized. --&gt; Sending: ATDT*99# --&gt; Waiting for carrier. ATDT*99# CONNECT --&gt; Carrier detected. Starting PPP immediately. --&gt; Starting pppd at Fri Jun 14 22:35:19 2013 --&gt; Pid of pppd: 3145 --&gt; Using interface ppp0 --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; local IP address 10.133.163.246 --&gt; pppd: Ęy --&gt; remote IP address 10.64.64.64 --&gt; pppd: Ęy --&gt; primary DNS address 89.108.202.20 --&gt; pppd: Ęy --&gt; secondary DNS address 89.108.195.20 --&gt; pppd: Ęy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 pi@raspbmc:~$ sudo wvdial play &amp; [1] 3143 pi@raspbmc:~$ --&gt; WvDial: Internet dialer version 1.61 --&gt; Initializing modem. --&gt; Sending: ATH ATH OK --&gt; Sending: ATE1 ATE1 OK --&gt; Sending: AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; AT+CGDCONT=1,&quot;IP&quot;,&quot;internet&quot; OK --&gt; Modem initialized. --&gt; Sending: ATDT*99# --&gt; Waiting for carrier. ATDT*99# CONNECT --&gt; Carrier detected. Starting PPP immediately. --&gt; Starting pppd at Fri Jun 14 22:35:19 2013 --&gt; Pid of pppd: 3145 --&gt; Using interface ppp0 --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; local IP address 10.133.163.246 --&gt; pppd: Ęy --&gt; remote IP address 10.64.64.64 --&gt; pppd: Ęy --&gt; primary DNS address 89.108.202.20 --&gt; pppd: Ęy --&gt; secondary DNS address 89.108.195.20 --&gt; pppd: Ęy Now you’re connected!… but how do disconnect? Please note the line “[1] 3143” – 3143 is your connection process PID. You need it to disconnect properly by issuing the following command: pi@raspbmc:~$ sudo kill -1 3143 Caught signal 1: Attempting to exit gracefully... pi@raspbmc:~$ --&gt; Terminating on signal 15 --&gt; pppd: Ęy --&gt; Connect time 0.4 minutes. --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; Disconnecting at Fri Jun 14 22:35:50 2013 1 2 3 4 5 6 7 8 9 pi@raspbmc:~$ sudo kill -1 3143 Caught signal 1: Attempting to exit gracefully... pi@raspbmc:~$ --&gt; Terminating on signal 15 --&gt; pppd: Ęy --&gt; Connect time 0.4 minutes. --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; pppd: Ęy --&gt; Disconnecting at Fri Jun 14 22:35:50 2013 When I was testing this I realized that you should not be connected to the internet (i.e. via eth0) when modem connection is initiated. For some reason RPi would not get proper DNS even if you disconnect eth0 after you connect with the modem, so: first disconnect your lan cable and then connect. Let me know is something is not working for you (use Discuss below) Configuration for PLAY was found here. Here is your raspberry pi ampilight system! 3g huaweii internet mobile modem raspberry raspberry pi sakis3g tutorial USB modem wvdial Post navigation ← Multimedia file server (DLNA/UPnP) Torrent Client (Transmission) → lightberry.eu Recently added: Control Hyperion from your remote Wetek Play with Lightberry HD USB and OpenELEC Cubox-i / HummingBoard with Lightberry HD USB and OpenELEC Kodi plugin – Hyperion Configurator LCD for Raspberry pi (HD44780 via PCF8574 I2C) (openelec) Tags 3g access point ap connection dhcp DLNA download driver File server firmware forwarding hostname hyperion internet IP iptables Lightberry linux lms mobile modem Movies mpd Music network openelec Pictures PS3 Putty radio raspberry raspberry pi router server show shows sickbeard software squeezebox ssh static Torrent Video wifi wireless Subscribe via RSS Partners Raspberry Pi, sklep, zestawy Raspberry Hardware (DE) Search Copyright © 2016 Raspberry-at-home.com – Your ultimate source of Raspberry Pi tutorials (WiFi, 3G, XBMC, Subtitles, VoD, TVN Player, IPLA, TVP, Squeezeslave, Logitech Media Server, Sickbeard, Webcam, Torrent, DLNA) Zoren Theme | Modified by raspberry@home SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like Like You and 27 friends like this.27 people like this. Be the first of your friends. Tommy Wonday Install MSI/EXE Software manageengine.com/SoftwareDeployment Install MSI/EXE, Remote Control, Patch &amp; Asset Management. Download! Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo Linux Dev Systems softiron.co.uk/products/ New Overdrive 1000 Linux based, low cost, full system for ARM devs. Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo Grounds for APN Challenge wttconsulting.co.uk/ Resource &amp; advice to appeal, delay and reduce HMRC APN notices Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo HMA VPN Sale - Save 50% hidemyass.com/VPN-Super-Sale Use VPN to Encrypt &amp; Protect Data. Essential Privacy Tool. Save Now! Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo Ethernet First Mile goscomb.net Up to 20Mbps Symmetric Data. Check availability online Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Inappropriate Irrelevant Repetitive Inappropriate Irrelevant Repetitive Inappropriate Irrelevant Repetitive Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160629153748#index"
                   NS1:content=" Skip to main content. Navigation: DENX &gt; DULG &gt; Manual Translations: Edit | Attach | Raw | Ref-By | Printable | More Denx.de DULG Sections of this site: DENX Home | DULG | ELDK-5 | Know | Training | U-Boot | U-Bootdoc Topics DULG Home BoardSelect Manual FAQ Application Notes Changes Index List of pages in DULG Search The DENX U-Boot and Linux Guide (DULG) for canyonlands Table of contents: 1. Abstract 2. Introduction 2.1. Copyright 2.2. Disclaimer 2.3. Availability 2.4. Credits 2.5. Translations 2.6. Feedback 2.7. Conventions 3. Embedded Linux Development Kit 3.1. ELDK Availability 3.2. ELDK Getting Help 3.3. Supported Host Systems 3.4. Supported Target Architectures 3.5. Installation 3.5.1. Product Packaging 3.5.2. Downloading the ELDK 3.5.3. Initial Installation 3.5.4. Installation and Removal of Individual Packages 3.5.5. Removal of the Entire Installation 3.6. Working with ELDK 3.6.1. Switching Between Multiple Installations 3.7. Mounting Target Components via NFS 3.8. Rebuilding ELDK Components 3.8.1. ELDK Source Distribution 3.8.2. Rebuilding Target Packages 3.8.3. Rebuilding ELDT Packages 3.9. ELDK Packages 3.9.1. List of ELDT Packages 3.9.2. List of Target Packages 3.10. Rebuilding the ELDK from Scratch 3.10.1. ELDK Build Process Overview 3.10.2. Setting Up ELDK Build Environment 3.10.3. build.sh Usage 3.10.4. Format of the cpkgs.lst and tpkgs.lst Files 3.11. Notes for Solaris 2.x Host Environment 4. System Setup 4.1. Serial Console Access 4.2. Configuring the &quot;cu&quot; command 4.3. Configuring the &quot;kermit&quot; command 4.4. Using the &quot;minicom&quot; program 4.5. Permission Denied Problems 4.6. Configuration of a TFTP Server 4.7. Configuration of a BOOTP / DHCP Server 4.8. Configuring a NFS Server 5. Das U-Boot 5.1. Current Versions 5.2. Unpacking the Source Code 5.3. Configuration 5.4. Installation 5.4.1. Before You Begin 5.4.1.1. Installation Requirements 5.4.1.2. Board Identification Data 5.4.2. Installation Using a BDM/JTAG Debugger 5.4.3. Installation using U-Boot 5.5. Tool Installation 5.6. Initialization 5.7. Initial Steps 5.8. The First Power-On 5.9. U-Boot Command Line Interface 5.9.1. Information Commands 5.9.1.1. bdinfo - print Board Info structure 5.9.1.2. coninfo - print console devices and informations 5.9.1.3. flinfo - print FLASH memory information 5.9.1.4. iminfo - print header information for application image 5.9.1.5. help - print online help 5.9.2. Memory Commands 5.9.2.1. base - print or set address offset 5.9.2.2. crc32 - checksum calculation 5.9.2.3. cmp - memory compare 5.9.2.4. cp - memory copy 5.9.2.5. md - memory display 5.9.2.6. mm - memory modify (auto-incrementing) 5.9.2.7. mtest - simple RAM test 5.9.2.8. mw - memory write (fill) 5.9.2.9. nm - memory modify (constant address) 5.9.2.10. loop - infinite loop on address range 5.9.3. Flash Memory Commands 5.9.3.1. cp - memory copy 5.9.3.2. flinfo - print FLASH memory information 5.9.3.3. erase - erase FLASH memory 5.9.3.4. protect - enable or disable FLASH write protection 5.9.3.5. mtdparts - define a Linux compatible MTD partition scheme 5.9.4. Execution Control Commands 5.9.4.1. source - run script from memory 5.9.4.2. bootm - boot application image from memory 5.9.4.3. go - start application at address 'addr' 5.9.5. Download Commands 5.9.5.1. bootp - boot image via network using BOOTP/TFTP protocol 5.9.5.2. dhcp - invoke DHCP client to obtain IP/boot params 5.9.5.3. loadb - load binary file over serial line (kermit mode) 5.9.5.4. loads - load S-Record file over serial line 5.9.5.5. rarpboot- boot image via network using RARP/TFTP protocol 5.9.5.6. tftpboot- boot image via network using TFTP protocol 5.9.6. Environment Variables Commands 5.9.6.1. printenv- print environment variables 5.9.6.2. saveenv - save environment variables to persistent storage 5.9.6.3. setenv - set environment variables 5.9.6.4. run - run commands in an environment variable 5.9.6.5. bootd - boot default, i.e., run 'bootcmd' 5.9.7. Flattened Device Tree support 5.9.7.1. fdt addr - select FDT to work on 5.9.7.2. fdt list - print one level 5.9.7.3. fdt print - recursive print 5.9.7.4. fdt mknode - create new nodes 5.9.7.5. fdt set - set node properties 5.9.7.6. fdt rm - remove nodes or properties 5.9.7.7. fdt move - move FDT blob to new address 5.9.7.8. fdt chosen - fixup dynamic info 5.9.8. Special Commands 5.9.8.1. i2c - I2C sub-system 5.9.9. Storage devices 5.9.10. Miscellaneous Commands 5.9.10.1. echo - echo args to console 5.9.10.2. reset - Perform RESET of the CPU 5.9.10.3. sleep - delay execution for some time 5.9.10.4. version - print monitor version 5.9.10.5. ? - alias for 'help' 5.10. U-Boot Environment Variables 5.11. U-Boot Scripting Capabilities 5.12. U-Boot Standalone Applications 5.12.1. &quot;Hello World&quot; Demo 5.12.2. Timer Demo 5.12.3. Processor cache considerations 5.12.4. Running on core other than core 0 5.13. U-Boot Image Formats 5.14. U-Boot Advanced Features 5.14.1. Boot Count Limit 6. Embedded Linux Configuration 6.1. Download and Unpack the Linux Kernel Sources 6.2. Kernel Configuration and Compilation 6.3. Installation 7. Booting Embedded Linux 7.1. Introduction 7.2. Flattened Device Tree Blob 7.3. Passing Kernel Arguments 7.4. Boot Arguments Unleashed 7.5. Networked Operation with Root Filesystem over NFS 7.5.1. Bootlog of tftp'd Linux kernel with Root Filesystem over NFS 7.6. Boot from Flash Memory 7.7. Standalone Operation with Ramdisk Image 8. Building and Using Modules 9. Advanced Topics 9.1. Flash Filesystems 9.1.1. Memory Technology Devices 9.1.2. Journalling Flash File System 9.1.3. Second Version of JFFS 9.1.4. Compressed ROM Filesystem 9.2. The TMPFS Virtual Memory Filesystem 9.2.1. Mount Parameters 9.2.2. Kernel Support for tmpfs 9.2.3. Usage of tmpfs in Embedded Systems 9.3. Adding Swap Space 9.4. Splash Screen Support in Linux 9.5. Root File System: Design and Building 9.5.1. Root File System on a Ramdisk 9.5.2. Root File System on a JFFS2 File System 9.5.3. Root File System on a cramfs File System 9.5.4. Root File System on a Read-Only ext2 File System 9.5.5. Root File System on a Flash Card 9.5.6. Root File System in a Read-Only File in a FAT File System 9.6. Root File System Selection 9.7. Overlay File Systems 9.8. The Persistent RAM File system (PRAMFS) 9.8.1. Mount Parameters 9.8.2. Example 10. Debugging 10.1. Debugging of U-Boot 10.1.1. Debugging of U-Boot Before Relocation 10.1.2. Debugging of U-Boot After Relocation 10.2. Linux Kernel Debugging 10.2.1. Linux Kernel and Statically Linked Device Drivers 10.2.2. Dynamically Loaded Device Drivers (Modules) 10.2.3. GDB Macros to Simplify Module Loading 10.3. GDB Startup File and Utility Scripts 10.4. Tips and Tricks 10.5. Application Debugging 10.5.1. Local Debugging 10.5.2. Remote Debugging 10.6. Debugging with Graphical User Interfaces 11. Simple Embedded Linux Framework 12. Books, Mailing Lists, Links, etc. 12.1. Application Notes 12.2. Further Reading 12.2.1. Upstreaming 12.2.2. License Issues 12.2.3. Linux kernel 12.2.4. General Linux / Unix programming 12.2.5. Network Programming 12.2.6. C++ programming 12.2.7. Java programming 12.2.8. Internationalization And Character Sets 12.2.9. ARM Architecture Programming 12.2.10. Power Architecture® Programming 12.2.11. Embedded Topics 12.3. Mailing Lists 12.4. Links 12.5. Tools 13. Appendix 13.1. Flat Device Tree 13.2. Flat Device Tree 13.3. BDI2000 Configuration file 14. FAQ - Frequently Asked Questions 14.1. ELDK 14.1.1. ELDK Installation under FreeBSD 14.1.2. ELDK Installation Hangs 14.1.3. .gvfs: Permission Denied 14.1.4. Installation on Local Harddisk 14.1.5. System Include Files Missing 14.1.6. patch: command not found 14.1.7. ELDK Include Files Missing 14.1.8. Using the ELDK on a 64 bit platform 14.1.9. GDB Problems with BDI2000/BDI3000 on e500 Cores 14.1.10. How can I check if Floating Point support is working? 14.1.11. ELDK 2.x Installation Aborts 14.1.12. Enable SSH Access 14.2. U-Boot 14.2.1. Can U-Boot be configured such that it can be started in RAM? 14.2.2. Relocation cannot be done when using -mrelocatable 14.2.3. Source object has EABI version 4, but target has EABI version 0 14.2.4. U-Boot crashes after relocation to RAM 14.2.5. Warning - bad CRC, using default environment 14.2.6. Net: No ethernet found 14.2.7. Wrong debug symbols after relocation 14.2.8. Decoding U-Boot Crash Dumps 14.2.9. Porting Problem: cannot move location counter backwards 14.2.10. U-Boot Doesn't Run after Upgrading my Compiler 14.2.11. How Can I Reduce The Image Size? 14.2.12. Erasing Flash Fails 14.2.13. Ethernet Does Not Work 14.2.14. Where Can I Get a Valid MAC Address from? 14.2.15. Why do I get TFTP timeouts? 14.2.16. Why is my Ethernet operation not reliable? 14.2.17. How the Command Line Parsing Works 14.2.17.1. Old, simple command line parser 14.2.17.2. Hush shell 14.2.17.3. Hush shell scripts 14.2.17.4. General rules 14.2.18. How can I load and uncompress a compressed image 14.2.19. How can I create an uImage from a ELF file 14.2.20. My standalone program does not work 14.2.21. Linux hangs after uncompressing the kernel 14.2.22. How can I implement automatic software updates? 14.3. Linux 14.3.1. Linux crashes randomly 14.3.2. Linux crashes when uncompressing the kernel 14.3.3. Linux Post Mortem Analysis 14.3.4. Linux kernel register usage 14.3.5. Linux Kernel Ignores my bootargs 14.3.6. Cannot configure Root Filesystem over NFS 14.3.7. Linux Kernel Panics because &quot;init&quot; process dies 14.3.8. Unable to open an initial console 14.3.9. System hangs when entering User Space (ARM) 14.3.10. Mounting a Filesystem over NFS hangs forever 14.3.11. Ethernet does not work in Linux 14.3.12. Loopback interface does not work 14.3.13. Linux kernel messages are not printed on the console 14.3.14. Linux ignores input when using the framebuffer driver 14.3.15. How to switch off the screen saver and the blinking cursor? 14.3.16. BogoMIPS Value too low 14.3.17. Linux Kernel crashes when using a ramdisk image 14.3.18. Ramdisk Greater than 4 MB Causes Problems 14.3.19. Combining a Kernel and a Ramdisk into a Multi-File Image 14.3.20. Adding Files to Ramdisk is Non Persistent 14.3.21. Kernel Configuration for PCMCIA 14.3.22. Configure Linux for PCMCIA Cards using the Card Services package 14.3.23. Configure Linux for PCMCIA Cards without the Card Services package 14.3.23.1. Using a MacOS Partition Table 14.3.23.2. Using a MS-DOS Partition Table 14.3.24. Boot-Time Configuration of MTD Partitions 14.3.25. Use NTP to synchronize system time against RTC 14.3.26. Configure Linux for XIP (Execution In Place) 14.3.26.1. XIP Kernel 14.3.26.2. Cramfs Filesystem 14.3.26.3. Hints and Notes 14.3.26.4. Space requirements and RAM saving, an example 14.3.27. Use SCC UART with Hardware Handshake 14.3.28. How can I access U-Boot environment variables in Linux? 14.3.29. The =appWeb= server hangs *OR* /dev/random hangs 14.3.30. Swapping over NFS 14.3.31. Using NFSv3 for NFS Root Filesystem 14.3.32. Using and Configuring the SocketCAN Driver 14.3.33. Telnet / SSH (dropbear) server not working 14.4. Self 14.4.1. How to Add Files to a SELF Ramdisk 14.4.2. How to Increase the Size of the Ramdisk 14.5. RTAI 14.5.1. Conflicts with asm clobber list 14.6. BDI2000 14.6.1. Where can I find BDI2000 Configuration Files? 14.6.2. How to Debug Linux Exceptions 14.6.3. How to single step through &quot;RFI&quot; instruction 14.6.4. Setting a breakpoint doesn't work 14.6.5. Remote 'g' packet reply is too long 14.7. Motorola LITE5200 Board 14.7.1. LITE5200 Installation Howto 14.7.2. USB does not work on Lite5200 board 15. Glossary 1. Abstract This is the DENX U-Boot and Linux Guide to Embedded PowerPC, ARM and MIPS Systems. The document describes how to configure, build and use the firmware Das U-Boot (typically abbreviated as just &quot;U-Boot&quot;) and the operating system Linux for Embedded PowerPC, ARM and MIPS Systems. The focus of this version of the document is on canyonlands boards. This document was generated at 29 Jun 2016 - 10:03. 1. Abstract 2. Introduction Home Next Revision r1.3 - 30 Nov 2005 - 17:08 - Main.www-data Diffs | r1.3 | &gt; | r1.2 | &gt; | r1.1 Copyright © 2002-2016 by DENX Software Engineering "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160617154301#index"
                   NS1:content=" current community chat Stack Overflow Meta Stack Overflow Stack Overflow Careers your communities Sign up or log in to customize your list. more stack exchange communities company blog Stack Exchange Inbox Reputation and Badges sign up log in tour help Tour Start here for a quick overview of the site Help Center Detailed answers to any questions you might have Meta Discuss the workings and policies of this site About Us Learn more about Stack Overflow the company Business Learn more about hiring developers or posting ads with us Stack Overflow Questions Jobs Tags Users Badges Ask Question _ Stack Overflow is a community of 4.7 million programmers, just like you, helping each other. Join them; it only takes a minute: Sign up Join the Stack Overflow community to: Ask programming questions Answer and help your peers Get recognized for your expertise Login to Facebook using python requests No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 14 down vote favorite 5 I'm trying to find a way to automatically login to Facebook without browser using Python. I experimented with &quot;requests&quot; lib. Tried several ways: URL = 'http://m.facebook.com' requests.get(URL, auth = ('email@domain.com', 'mypassword')) ... form_data = {'email': 'email@domain.com', 'pass' : 'mypassword' } requests.post(URL, data = form_data) ... requests.post(URL + '?email=email@domain.com&amp;pass=mypassword') The last method fills &quot;email&quot; box on a page but &quot;pass&quot; box remains empty... Could someone help me with this please? Is it possible to emulate FB login using requests? Thanks! python facebook facebook-login python-requests share|improve this question asked Feb 21 '14 at 7:48 alexryabkov 76115 Which library does request come from? urllib2? – Torxed Feb 21 '14 at 7:57 1 @Torxed, Maybe python-requests (Authentication - Requests documentation). – falsetru Feb 21 '14 at 8:31 @falsetru Doh yea figures, thought it was some odd tag of from urllib.request :) – Torxed Feb 21 '14 at 8:33 add a comment | 4 Answers 4 active oldest votes up vote 14 down vote You need to send a complete form. The easiest way to find out what Facebook expects is to use something like Google Chrome's developer tools to monitor your web requests. To make your life easier I've monitored my own login on Facebook, and reproduced it below (with private information redacted, obviously) with the unimportant information stripped: Request URL:https://m.facebook.com/login.php?refsrc=https%3A%2F%2Fm.facebook.com%2F&amp;refid=8 Request Method:POST Form Data: lsd:AVqAE5Wf charset_test:€,´,€,´,水,Д,Є version:1 ajax:0 width:0 pxr:0 gps:0 m_ts:1392974963 li:cxwHUxatQiaLv1nZEYPp0aTB email:... pass:... login:Log In As you can see, the form contains a lot of fields. All of these need to be provided to allow you to log in. Email and password will be provided by your code. The rest of the fields actually have their values set by the HTML that Facebook serves you. This means, to emulate a browser login you need to perform the following steps: Do a GET to the login page (https://m.facebook.com/) Use a HTML parsing library (e.g. BeautifulSoup) to parse the HTML and find the default values of the form fields. The default values are all in &lt;input&gt; HTML elements below the #login_form element. You'll want to find them by name (e.g. charset_test) and then pull out their value attribute. Working out how to do this is outside the scope of this answer, so I'm not going to go into it. Combine the default values of the form fields with your email and password, like so: data = { 'lsd': lsd, 'charset_test': csettest, 'version': version, 'ajax': ajax, 'width': width, 'pxr': pxr, 'gps': gps, 'm_ts': mts, 'li': li, } data['email'] = email data['pass'] = pass data['login'] = 'Log In' Send your login using a Requests Session: s = requests.Session() r = s.post(url, data=data) r.raise_for_status() Send all your future HTTP traffic through that Session. As you can see, this is a non-trivial way of doing things. That's because it's not expected that programs will use the website to log in: instead, you're expected to use their SDK or their web API instead. share|improve this answer answered Feb 21 '14 at 9:43 Lukasa 3,0081019 1 Thank you very much! BTW, I've just found a library called &quot;mechanize&quot;, looks like it can do FB login simpler that with &quot;requests&quot;. – alexryabkov Feb 21 '14 at 10:58 Yeah, mechanize will make this substantially easier. – Lukasa Feb 21 '14 at 13:28 This works for me! Thank you so much! – Charles Chow Sep 20 '15 at 20:48 add a comment | No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 6 down vote I was also searching for answer. Doing it with requests is pain. So, i used mechanize. import mechanize browser = mechanize.Browser() browser.set_handle_robots(False) cookies = mechanize.CookieJar() browser.set_cookiejar(cookies) browser.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7')] browser.set_handle_refresh(False) url = 'http://www.facebook.com/login.php' self.browser.open(url) self.browser.select_form(nr = 0) #This is login-password form -&gt; nr = number = 0 self.browser.form['email'] = YourLogin self.browser.form['pass'] = YourPassw response = self.browser.submit() print response.read() It works. mechanize.browser is emulated browser, so you don't need to send all form values. It will send them as normal browser, you should provide only login and password. Good luck! share|improve this answer edited Nov 11 '15 at 9:52 Liam 8531522 answered Jun 27 '15 at 17:59 rzaaeeff 147212 2 When I use this code I get a FB error page saying that I don't have cookies enabled. – Sparr Jul 9 '15 at 16:44 1 Did you manage to solve your problem? I'm facing the cookies issue as well, no solution so far. Thanks. – Neria Nachum Apr 20 at 11:22 add a comment | up vote 1 down vote First of all, you need ALL the form data. You can't just send user+pass, the server won't allow it. Secondly you will need to take care and use the cookies recieved from Facebook in order for this to work. But all in all, yes you can use request or any other library. But i would reccomend using their API instead. share|improve this answer answered Feb 21 '14 at 7:58 Torxed 9,13553867 add a comment | up vote 0 down vote I can say it's quite annoying to log in to Facebook without using their API. They also like to change everything so often it is quite the job to maintain the code. I did this a while ago, but I don't think my code is up to speed with current Facebook. However it should be a useful starting-point: https://gitorious.org/blogsmashonfb/blogsmashonfb/source/4f7ee94a56fdffe9392485df8999e340f97f4bbe: It has two parts, a webcrawler and a Facebook-handler (the latter is what you are interested in). One major issue you have in your code is that you must first visit Facebook, because they send you a login form with hidden elements that you need to send back. share|improve this answer edited Feb 21 '14 at 9:44 answered Feb 21 '14 at 9:38 deinonychusaur 2,42611330 add a comment | Your Answer draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Email and Password Post as a guest Name Email discard By posting your answer, you agree to the privacy policy and terms of service. Not the answer you're looking for? Browse other questions tagged python facebook facebook-login python-requests or ask your own question. asked 2 years ago viewed 13328 times active 7 months ago Looking for a job? Senior eCommerce Software Engineer Focustron PTENo office location $1,000 - $2,000Remote mwsamazon-mws Project Reviewer UdacityNo office location Remote pythonmachine-learning Senior Back-End Developer TravelBirdAmsterdam, Netherlands RelocationVisa Sponsorship pythondjango Are you a Full Stack Developer - this if for you!! Telefonica InnovationMadrid, Spain RelocationVisa Sponsorship pythonnosql Get the weekly newsletter! In it, you'll get: The week's top questions and answers Important community announcements Questions that need answers see an example newsletter By subscribing, you agree to the privacy policy and terms of service. Linked 26 How to “log in” to a website using Python's Requests module? 0 How do I enable cookies with python requests 0 facebook pages scraping need login 0 python, authentication not recognised - urllib2, requests, asp.net Related 4984 What does the yield keyword do in Python? 1 Using Facebook REST API to login, but meet 'Application does not have the capability to make this API call' 2 Facebook Login “500 internal server error” in touch mode 2 Server-side login with Facebook from iOS native WebView -2 How to add facebook login to Python Django Project? 0 How do I enable cookies with python requests 0 Facebook login flow with to nodejs 0 Facebook login with Python Requests and BeautifulSoup 1 Python requests post blocked by server 0 Python requests: Can't send message to myself via Facebook Hot Network Questions Should I point out that I'm a woman when negotiating starting salary? Can anyone solve this kind of summation in Mathematica?(Screen shot attached) Please help! Why does Zaphod Beeblebrox call Ford Prefect &quot;Ford&quot; when they meet on the Heart of Gold? What is the point of the exhaust? When citing a paper with a lot of authors; is it OK to shorten the author list in the references section? Did Einstein say this about marriage? converting spaces into dashes Rationale for operating the diode in the (reverse biased) breakdown region Why is my mood dictated so much by how well my research is going? Why does Bruce Wayne keep speaking in that low raspy voice to Catwoman? Did Euler prove theorems by example? Why does the sun have to be nearly fully covered to notice any darkening in an eclipse? Is there an image editing software that can open DDS files in Ubuntu? What does &quot;Forgeite&quot; mean? Where does it come from? Use an instance or a class for game resources (wood,iron,gold) Why do dialogs have grey backgrounds? usage of &quot;Mrs&quot; for male Managing alone my work hours - should I stop? Between the twins when laughing How to round a number to a chosen integer Would a 100% simulated war be a way to solve national conflict? Lithp Tranthlator Can this algorithm still be considered a Binary Search algorithm? Can I take out a loan and invest it at higher interest? question feed lang-py about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix &amp; Linux Ask Different (Apple) WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce ExpressionEngine® Answers more (13) Photography Science Fiction &amp; Fantasy Graphic Design Movies &amp; TV Seasoned Advice (cooking) Home Improvement Personal Finance &amp; Money Academia more (9) English Language &amp; Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow Chemistry Biology more (5) Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required rev 2016.6.16.3680 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622114526#index"
                   NS1:content=" Skip to content All gists GitHub New gist @Britnell Signed in as Britnell Your gists Starred gists Help Your GitHub profile Sign out Unstar 31 Star 31 Fork 3 User actions @gbaman gbaman/HowToOTGFast.md Last active 15 hours ago Embed What would you like to do? Embed Embed this gist in your website. Embed Share Copy sharable URL for this gist. Share Clone via HTTPS Clone with Git or checkout with SVN using the repository's web address. HTTPS Clone via SSH Clone with an SSH key and passphrase from your GitHub settings. SSH Learn more about clone URLs Download ZIP Code Revisions 7 Stars 31 Forks 3 Simple guide for setting up OTG modes on the Raspberry Pi Zero, the fast way! Raw HowToOTGFast.md Setting up Pi Zero OTG - The quick way (No USB keyboard, mouse, HDMI monitor needed) More details - http://blog.gbaman.info/?p=791 For this method, alongside your Pi Zero, MicroUSB cable and MicroSD card, only an additional computer is required, which can be running Windows (with Bonjour, iTunes or Quicktime installed), Mac OS or Linux (with Avahi Daemon installed, for example Ubuntu has it built in). 1. Flash Raspbian Jessie full or Raspbian Jessie Lite onto the SD card. 2. Once Raspbian is flashed, open up the boot partition (in Windows Explorer, Finder etc) and add to the bottom of the config.txt file dtoverlay=dwc2 on a new line, then save the file. 3. Finally, open up the cmdline.txt. Be careful with this file, it is very picky with its formatting! Each parameter is seperated by a single space (it does not use newlines). Insert modules-load=dwc2,g_ether after rootwait. To compare, an edited version of the cmdline.txt file at the time of writing, can be found here. 4. That's it, eject the SD card from your computer, put it in your Raspberry Pi Zero and connect it via USB to your computer. It will take up to 90s to boot up (shorter on subsequent boots). It should then appear as a USB Ethernet device. You can SSH into it using raspberrypi.local as the address. @developius developius commented on 19 May AWESOME! @shrx shrx commented on 19 May • edited Thanks, it just works. (also on the Jessie Lite image, I had no problems.) @ZudoMC ZudoMC commented on 19 May My Zero (Jessie full) doesn't show up as a device. Followed all the steps here. @sourcedgeek sourcedgeek commented on 20 May Could this effectively be used to VNC into the Zero for a GUI interface? @langphil langphil commented on 20 May I can't seem to get Avahi Daemon installed on OSX. Any pointers would be greatly appreciated. @trevorhales trevorhales commented on 21 May On PC Windows 10 I had to modify the firewall settings for Bonjour so that the &quot;Setting up Pi Zero OTG&quot; worked! @andrewn andrewn commented on 22 May @langphil, you don't need to install Avahi Daemon on OSX as it comes with Bonjour pre-installed and already running, which does the same thing. Once you've followed the steps above you can just ssh pi@raspberrypi.local to access the Zero. @apemanzilla apemanzilla commented on 23 May Whenever I try this the Raspberry Pi shows up as an unknown USB device in Windows. I've tried Windows 10 and Windows 7 with the same results. Any way to fix this? @TweetPete TweetPete commented 29 days ago On my windows 10 computer the Zero is detected as Serial USB device (COM3) but not as Ethernet device. Plus when I look at the cmdline.txt afterwards it looks like this: 'dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait modules-load=dwc2,g_ether' @jimbolimbo3 jimbolimbo3 commented 29 days ago • edited Same as TweetPete here: I see the Zero as a Seriel USB Device (COM4) and not as Ethernet device. cattura edit: using serial comunication doesn't work anyway, but maybe I'm using just the wrong baud rate. @xnca xnca commented 27 days ago For me it didnt recognize as anything, just a &quot;RNDIS/Ethernet Gadget&quot;. But after i manually gave it some drivers found on this guide. It is now working fine, and im able to use it :+1: @TweetPete TweetPete commented 26 days ago @jimbolimbo3 if you're using an Acer u can try to install this driver http://catalog.update.microsoft.com/v7/site/ScopedViewRedirect.aspx?updateid=37e35bd4-d788-4b83-9416-f78e439f90a2 after that it was recognized as the right device and together with Bonjour running I can log in as raspberrypi.local @christophe94700 christophe94700 commented 26 days ago • edited I have a solution for Windows 10 . the driver is on in my website : [http://domotique.caron.ws/cartes-microcontroleurs/raspberrypi/pi-zero-otg-ethernet/] Sorry for my english :(. @alexellis alexellis commented 23 days ago • edited Thanks for this. What if you want to use the USB port (once set up for ethernet) for a wifi dongle etc? @gbaman @hexeguitar hexeguitar commented 21 days ago Not sure if it's only in my case, but using Win7 i had to plug the USB power jack into the RPi0 first, let it boot up and then connect it via USB otg with my PC. Only then windows ill recognize it as network adapter (had to force it to install the driver using the method @xcna mentioned). @add1ct3dd add1ct3dd commented 20 days ago Nice one! It's working here, can we get it to connect through USB to the internet? I know we can connect TO it, but can it connect outside? @yuvipanda yuvipanda commented 19 days ago Awesome! I was also able to get my pi0 to have internet access by following instructions from https://help.ubuntu.com/community/Internet/ConnectionSharing#Ubuntu_Internet_Gateway_Method_.28iptables.29. @yuvipanda yuvipanda commented 19 days ago (And I can start the rpi and run it by simply backfeeding on the data usb port, although I'm unsure how sane that is) @andypiper andypiper commented 16 days ago • edited Has anyone got this working with OS X by any chance? edit: I'm thinking it may be related to lack of RNDIS support on OS X. I've tried HoRNDIS but it doesn't seem to want to play :-/ @phattmatt phattmatt commented 15 days ago • edited This worked fine on my MacBook Pro (El Capitan). The Ethernet device was detected and I could connect to the Pi Zero using the hostname (ssh pi@raspberrypi.local). To grant the Pi Zero Internet access I configured Internet Sharing for the RNDIS NIC (shared my Wifi connection) and then restarted the Pi (so it would pick up the new IP address). @beaumartinez beaumartinez commented 13 days ago I'm on El Capitan and I cannot seem to be able to SSH into my Raspberry Pi Zero. @kool601 kool601 commented 9 days ago I was having troubles SSH'ing into the RPi Zero. But I figured out I had to have Bonjour installed, xD. ( I didn't think that it was the right software because it said Print Services, but it worked so.... I'm not complaining! lol.) @massens massens commented 4 days ago I'm on Mavericks, I could see RNDIS/Ethernet Gadget in &quot;System information&quot; but couldn't connect to it. I had to go to System Preferences&gt;Network and asign the following configuration screen shot 2016-06-18 at 14 13 03 @Britnell Header Header Header Write Preview There was an error creating your Gist. Attach files by dragging &amp; dropping or selecting them. Uploading your files… Unfortunately, we don’t support that file type. Try again with a PNG, GIF, JPG, DOCX, PPTX, XLSX, TXT, PDF, or ZIP. Attaching documents requires write permission to this repository. Try again with a PNG, GIF, or JPG. Unfortunately, we don’t support that file type. Try again with a PNG, GIF, or JPG. Yowza, that’s a big file. Try again with a file smaller than 10MB. This file is empty. Try again with a file that’s not empty. This file is hidden. Try again with another file. Something went really wrong, and we can’t process that file. Try again. Nothing to preview Styling with Markdown is supported Comment Status API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Contact Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160624164710#index"
                   NS1:content=" Skip to Navigation Click to subscribe Login Linux Journal A 10-Minute Guide for Using PPP to Connect Linux to the Internet Issue 36 From Issue #36 April 1997 Apr 01, 1997 By Terry Dawson in HOWTOs Having trouble connecting to the Internet? Here's an easy way to do it using PPP. Connecting your Linux machine to the Internet with PPP is easy in most situations. In this article I show you how to configure PPP for the most common type of connection. We assume your Linux machine is a stand-alone machine that dials into an Internet Service Provider and performs an automatic login, and the Internet Service Provider allocates the IP address that your machine will use. You can find details of how to configure PPP for other situations in the PPP-HOWTO by Robert Hart. You will need the right software and a couple of pieces of information before you start. Let's get started. Preparation First, check that you have the right software. The program that manages PPP for Linux is called pppd. The pppd program is linked very tightly with the kernel, so you must run a version of pppd that matches your kernel. Kernel Version pppd version 1.2.* 2.1.2d 1.3.0 -&gt; 1.3.84 2.1.2d 1.3.84 -&gt; 1.3.99 2.2.0f 2.0.* 2.2.0f 2.1.* 2.2.0f Check the version of pppd and kernel that you have installed with the following commands: $ /usr/sbin/pppd version $ uname -a The first command is a trick. The pppd command doesn't actually have a version option. However, the version number will appear in the error message pppd returns, since you have supplied it with a bad argument. If the first command fails, you probably don't have PPP installed. You can obtain the latest version of the source from: ftp://sunsite.unc.edu/pub/Linux/system/Network/serial/ppp/ If you have installed from a distribution such as Debian, Red Hat or Slackware, the pppd program is available precompiled within those distributions. You just have to get the package and install it. Next you must check that your kernel has PPP support. Do this by giving the command: $ dmesg | grep -i ppp You should see the following messages: PPP: version 2.2.0 (dynamic channel allocation) PPP Dynamic channel allocation code copyright 1995 Caldera, Inc. PPP line discipline registered. If not, PPP may have been installed as a module. Become root and try: # insmod ppp If that fails, you will have to rebuild your kernel with PPP support. Follow the instructions in /usr/src/linux/README, and when configuring your kernel ensure that you answer “Yes” to: General setup ---&gt; [*] Networking support Network device support ---&gt; [*] Network device support &lt;*&gt; PPP (point-to-point) support These prompts may be different in non-2.0 kernels. Next you must note what keystrokes you will send and what prompts you will receive to log in to your ISP. The best way to collect these is to try manually logging into your ISP using a terminal program such as minicom. Be sure to make note of the capitalization of prompts such as the “login:” prompt as this will be important later. A typical scenario follows: Expect Send Comment ------ ---- ------- nothing AT&amp;F/r (mode reset) OK AT&amp;D2&amp;C1/r (mode initialization) OK AT&amp;D555-9999/r (modem dialing command) The modem dials, sends CONNECT message and then you enter userid and password as follows: login: username/r password: password/r Lastly, you must know the IP address of a nameserver so that you can configure your name resolver and use host names instead of IP addresses. Get this information from your ISP. Configuring PPP The pppd program can accept configuration parameters from two places. The first is from the command line, and the second is from “options” files. The arguments supplied are close to identical in either case, but the command line method can be messy. So I will describe how to configure PPP using the options files instead. The normal location of the options file is: /etc/ppp/options The options file is a simple text file containing parameters pppd will use when it is executed—one parameter per line. The options file must be readable by whoever will execute the pppd program. In most installations this will be root, either directly or by executing pppd from a program like sudo. If you don't have an /etc/ppp directory, as root create one using the following commands: # mkdir /etc/ppp # chown root:root /etc/ppp # chmod 755 /etc/ppp Create an /etc/ppp/options file that looks like the following example: debug /dev/ttyS0 38400 modem crtscts lock connect /etc/ppp/net-connect asyncmap 0 defaultroute : This example assumes: You want PPP to give you diagnostic information as it runs. Your modem is connected to serial device /dev/ttyS0. You want the serial port speed to be set at 38400 bps. You want to listen to the Data Carrier Detect signal. You will use hardware (RTS/CTS) handshaking. Your dialer program is /etc/ppp/net-connect. You have a full 8 bit clean connection. By default datagrams should be sent via the PPP link. You want the PPP server that you call to assign the IP address you will use. These are all fairly typical defaults for an ISP connection. You will have to adjust the serial device to suit where you have your modem connected and, if you are using data compression, you might want to set your serial port speed to something higher. PPP provides a means of escaping select characters, so that they do not interfere with your connection. For example, if you were running PPP over a link that would disconnect if it received a control-D character, you could ask PPP to escape that character, and it would automatically replace it with another and reverse the process at the other end. While the default is safe, it escapes a number of characters that normally don't need escaping and this will decrease the performance of your link. Since most ISPs provide 8 bit clean links you don't need to escape any characters, so we tell pppd not to, using the asyncmap option. The pppd package includes a program called chat. The chat program is a simple program that can be used to automate the dialing procedure. The chat program also accepts arguments from the command line or from a file. Again I'll describe how to configure it from a file as this is the better method. To make use of the chat program from within pppd, we must ensure that the connect option points to a script that calls chat. Create a script called /etc/ppp/net-connect that looks like: #!/bin/sh /usr/sbin/chat -v -t 60 -f /etc/ppp/net-chat This shell script will invoke the chat command with the -v, -t and -f arguments. The -v argument is useful when you are configuring pppd, as it sends verbose diagnostic messages to the system log to show you what is happening as the chat program runs. The -t 60 argument simply tells the chat program to wait 60 seconds for the expected text to arrive before timing out with an error. The -f argument tells chat the name of the file it should use to get the expect/send sequences it will use to login. Make sure the script is readable and executable by whoever will invoke pppd. Assuming again that “whoever” is root, use the following commands: # chmod 500 /etc/ppp/net-connect # chown root:root /etc/ppp/net-connect Create a chat script called /etc/ppp/net-chat that will automate the login sequence as described earlier. I will base this script on the details presented in the table. ABORT &quot;BUSY&quot; ABORT &quot;NO CARRIER&quot; &quot;&quot; AT&amp;F\r OK AT&amp;D2&amp;C1\r OK ATD555-9999\r ogin: sword: The first two lines are special. The ABORT keyword is a special token that allows you to specify strings of characters that will cause the chat program to exit. In the example presented, if the chat program receives either the string &quot;BUSY&quot; or the string &quot;NO CARRIER&quot; then it will abort immediately. The rest of the file is a simple list of expect/send pairs, based on the information we gathered when we manually logged in. The above example reads in full: ABORT the script if we receive &quot;BUSY&quot; or &quot;NO CARRIER&quot;. Expect nothing, then send AT&amp;F&lt; carriage-return&gt; to reset the modem to factory configuration, expect to receive OK then send AT&amp;D2&amp;C1&lt;carriage-return&gt;, then expect OK and send ATD555-9999&lt;carriage-return&gt;, then expect login: and send username&lt;carriage-return&gt;, then expect sword: and send password&lt;carriage-return&gt;, and then exit normally. There are a couple of important points to note in this example. First, the modem initialization string I've suggested will, in most modems, ensure that the modem will raise the Data Carrier Detect line when a call is connected, and will hang up the call if the DTR line is lowered. This ensures that the modem is matched with the modem option supplied to pppd. Second, I haven't used the full prompt, but only the last few characters. This is generally good practice because under some circumstances the first characters from a line may be dropped. Looking only for the last few characters ensures our login succeeds even if this occurs. Finally, you will notice the &lt;carriage-return&gt; is coded as \r. There are a range of other characters may be encoded and sent in this way, if necessary. The chat man page explains what they are should you need to use them. Finally, we must ensure this script is readable by whoever will invoke pppd. Again assuming that whoever is be root, you can use the following commands: # chown root:root /etc/ppp/net-chat # chmod 600 /etc/ppp/net-chat 1 2 3 next › last » ______________________ Login to save this as favorite del.icio.us Digg Facebook Reddit SlashDot StumbleUpon Post to Twitter Comments Comment viewing options Select your preferred way to display the comments and click &quot;Save settings&quot; to activate your changes. regarding GPRS modem connection and ppp link Anonymous's picture Submitted by Anonymous (not verified) on Sun, 09/28/2008 - 12:15. Dear Sir, I am able to establish a ppp connection through modem but when i kiil the process then i am not able to reconnect . I am havingppp-on entry in the inittab file aslo. all options are set correct. Modem doesnot process AT commands untill hard reseted i.e power downing the modem. Any help &amp; suggestions would be highly appreciated. Anil Subscribe Blogs Reviews HOWTOs Geek Guides Hep &amp; Tips How to Get Linux Getting Help powered by New Issue Trending Topics SysAdmin DevOps Security Cloud HPC Mobile Virtualization Web Development Webinar Fast/Flexible Linux OS Recovery On Demand Now In this live one-hour webinar, learn how to enhance your existing backup strategies for complete disaster recovery preparedness using Storix System Backup Administrator (SBAdmin), a highly flexible full-system recovery solution for UNIX and Linux systems. Join Linux Journal's Shawn Powers and David Huffman, President/CEO, Storix, Inc. Free to Linux Journal readers. Register Now! The Latest Popular Recent Comments Astronomy for KDE Jun 23, 2016 Profiles and RC Files Jun 22, 2016 Understanding Ceph and Its Place in the Market Jun 21, 2016 SoftMaker FreeOffice Jun 20, 2016 Git 2.9 Released Jun 17, 2016 The Giant Zero, Part 0.x Jun 16, 2016 more Astronomy for KDE Download &quot;Linux Management with Red Hat Satellite: Measuring Business Impact and ROI&quot; Profiles and RC Files Understanding Ceph and Its Place in the Market Maru OS Brings Debian to Your Phone Git 2.9 Released The Giant Zero, Part 0.x What's Our Next Fight? Snappy Moves to New Platforms OpenSwitch Finds a New Home more Keith Nice article, I definitely learned some things. BYW in my experience (lots of CentOS and Ubuntu), .bashrc is far more prevalent than .bash_profile. You should at least mention it. Profiles and RC Files · 18 hours ago Antonio I can confirm that FreeOffice offers the best compatibility with MS Office. I never had any problems going back and forth, it opens all of my Word and Excel files faithfully, even when... SoftMaker FreeOffice · 3 days ago dusty rivers ShowBox is the awesome app to watch free movies online: https://showboxappdownloadio.c... Susan Lauber's Linux Command Line Complete Video Course (Prentice Hall) · 3 days ago Connie New It is the best that is available now. A standard that can now be easily adopted, easy for developers, as well as making distro maintainers not to have to adapt each application for their distro.... Snappy Moves to New Platforms · 6 days ago Evan Summers I think that the way forward must be secure atomic deployments and updates via containerized applications. It must be atomic and not affect the system if they fail, so that updates can be... Snappy Moves to New Platforms · 6 days ago Already a subscriber? Click here for subscriber services. Geek Guides Linux on Power: Why Open Architecture Matters by Ted Schmidt With all the industry talk about the benefits of Linux on Power and all the performance advantages offered by its open architecture, you may be considering a move in that direction. If you are thinking about analytics, big data and cloud computing, you would be right to evaluate Power. The idea of using commodity x86 hardware and replacing it every three years is an outdated cost model. It doesn’t consider the total cost of ownership, and it doesn’t consider the advantage of real processing power, high-availability and multithreading like a demon. This ebook takes a look at some of the practical applications of the Linux on Power platform and ways you might bring all the performance power of this open architecture to bear for your organization. There are no smoke and mirrors here—just hard, cold, empirical evidence provided by independent sources. I also consider some innovative ways Linux on Power will be used in the future. Get the Guide June 2016 Video Preview See video May 2016 Video Preview See video April 2016 Video Preview Click here for more videos Linux Newsletter First Name Last Name Address 1 Address 2 City State Zip Email Canadian Residents | Foreign Residents | Gift Subscriptions | Customer Service | Privacy Policy Digital Edition Subscribe/Renew Pay My Bill Customer Service Digital Downloads Gift Subscriptions Magazine Formats PC/Mac Android iPhone/iPad EPUB Kindle The Store Stickers T-shirts Posters Back Issues LJ Archive About Us Advertise Author Info Write a Letter FAQ Masthead The Site Copyright RSS Feeds Privacy Policy Events Contact Us Copyright © 1994 - 2015 Linux Journal. All rights reserved. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Can't Load URL: The domain of this URL isn't included in the app's domains. To be able to load this URL, add all domains and subdomains of your app to the App Domains field in your app settings. Like Like You and one other like this.One person likes this. Be the first of your friends. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622114515#index"
                   NS1:content=" Blog About GitHub Twitter Instagram 500px DavidMaitland.me Photography, Code &amp; Linux Raspberry Pi Zero Headless Setup 01 Dec 2015 raspberry-pi-zero-otg So last Thursday (26th Nov 2015) the Raspberry Pi Zero was announced and made available that very day. Basically the Zero is a small and ultra cheap (£4) fully functioning Raspberry Pi, but it doesn't have any native networking and has only one USB port (which you need an OTG adapter to use). In the UK I was lucky enough to be able to order two Pi Zero's and have them delivered the next day. The only problem was I didn't have an HDMI monitor or a USB hub to connect a keyboard and a WiFi adapter at the same time. My intended use for the Zero's is for them to be little headless Linux boxes that I can put into various electronic projects and program them over WiFi (Think IoT), so I didn't want to mess around with HDMI and GUI interfaces. So here is a little guide showing you how to setup a Raspberry Pi Zero without an HDMI monitor or a keyboard / mouse. We will just use a USB WiFi adapter (connected to the OTG USB port) and a Linux machine to do the setup. If you don't have a Linux machine available, you could even use another Rasberry Pi with a card reader to set this up. This should be possible to do on other platforms as well but you will need to be able to mount an Ext4 partition natively. Step One - Install the Linux image First you will need to install a copy of Raspbian Jessie onto your micro SD card. You can find the downloads here and the installation guides are on the same page as well. For Linux I will be using this guide. Step Two - Mounting it locally After you have copied the Raspbian image onto the SD card you will need to mount it to your system. The easiest way to do this is just unplug your card reader and plug it back in. Once the drive has mounted to your system you will need to find where it has mounted. An easy way to do this is using the command df -h. For example for me it returns: Filesystem Size Used Avail Use% Mounted on /dev/mapper/fedora_dhcppc8-root 25G 9.8G 14G 43% / /dev/sda1 477M 258M 190M 58% /boot /dev/mapper/fedora_dhcppc8-home 85G 24G 58G 29% /home /dev/sdc1 60M 20M 41M 34% /run/media/davidmaitland/boot /dev/sdc2 59G 3.4G 53G 6% /run/media/davidmaitland/ad6203a1-ec50-4f44-a1c0-e6c3dd4c9202 I can see from this my 64GB SD card is the device /dev/sdc and the boot and main partition are mounted under /run/media/davidmaitland/. Change directory into the main partition as root ready to edit the files. This is likely to be the same drive that was referenced during the image installation earlier. [user@linux ~]# sudo su [root@linux ~]# cd /run/media/davidmaitland/ad6203a1-ec50-4f44-a1c0-e6c3dd4c9202 [root@linux ad6203a1-ec50-4f44-a1c0-e6c3dd4c9202]# ls bin boot boot.bak dev etc home lib lost+found media mnt opt proc root run sbin srv sys tmp usr var Step Three - Configure your WiFi Next we're going to configure the network interface. Edit the interfaces file etc/network/interfaces. Pay attention to the path in the files I reference, there is no leading slash as you want to edit the files on your SD card and not the ones on your host system! If you're not sure how to edit files on Linux, try nano etc/network/interfaces then Ctrl + x to save when done. Find this block in the file: allow-hotplug wlan0 iface wlan0 inet manual wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf Then change it to this: auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf If you want to have a static IP instead of using DHCP (easier to find once the Pi has come up on your network) then change it to this instead: auto wlan0 allow-hotplug wlan0 iface wlan0 inet static address 192.168.1.20 # IP for the Zero netmask 255.255.255.0 gateway 192.168.1.1 # Your router IP wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf As pointed out by someone on Reddit, if you're using static networking you will want to setup your DNS servers as well. Edit etc/resolv.conf and add the following: # Google's public DNS servers nameserver 8.8.8.8 nameserver 8.8.4.4 Now let's setup the WiFi connection and passkey. Edit the file etc/wpa_supplicant/wpa_supplicant.conf. Add this to the end: network={ ssid=&quot;my network name&quot; psk=&quot;my network password&quot; proto=RSN key_mgmt=WPA-PSK pairwise=CCMP auth_alg=OPEN } Finally remove the SD card from your computer (you may wish to unmount it first) and place into your Zero. Step Four - Boot the Pi Zero! Now it's time to boot the Raspberry Pi Zero. Make sure you have your WiFi adapter plugged into the Zero and give it some power. For me it takes about 45 seconds to boot and connect to my WiFi network. Now you can SSH directly into your Raspberry Pi Zero! If you configured your Zero to use DHCP you will need to find it's IP address. There are a few ways you can do this: Most routers will tell you somewhere in their web interfaces what IP allocations they have assigned to devices. You could use nmap to scan the local network for devices running with port 22 open sudo nmap -p22 -sV 192.168.0.0/24. From the comments Coder-256 pointed out the default hostname for a Raspberry Pi is raspberrypi and on most networks you can SSH directly to this instead of the IP address ssh pi@raspberrypi.local. The default password is raspberry. [user@linux ~]# ssh pi@192.168.1.20 pi@raspberrypi:~ $ Extras After a new install there are a few things you're probably going to want to do. First I would update the software running on your Zero: sudo apt-get update -y sudo apt-get upgrade -y If you're going to be using your Zero completely headlessly like me there are various things you can do to save energy and speed up the device. Boot up into multi-user mode (disable GUI on boot) sudo systemctl set-default multi-user.target. To disable HDMI edit /etc/rc.local and add the following line at the bottom above exit 0 line: /usr/bin/tvservice -o You may want to run sudo raspi-config to change other common Raspberry Pi settings as well. Let me know below if this guide was useful or if you have any suggestions! Coffee delivered for £1 Love coffee and live in the UK? Have some freshly ground coffee delivered to your door for only one pound. Give Pact coffee a try using the promo code &quot;ONEPOUNDCOFFEE&quot;. Copyright David Maitland 2016 We were unable to load Disqus. If you are a moderator please see our troubleshooting guide. 64 comments Comments DavidMaitland.me Community Login Disqus Facebook Twitter Google 1 Recommend Recommended 5 Discussion Recommended! Recommending means this is a discussion worth sharing. It gets shared to your followers' Disqus feeds, and gives the creator kudos! Find More Discussions Share Share this discussion on Twitter Facebook Sort by Best Best Newest Oldest Avatar Join the discussion… in this conversation ⬇ Drag and drop your images here to upload them. Media preview placeholder Attach Log in with or sign up with Disqus or pick a name Disqus is a discussion network Disqus never moderates or censors. The rules on this community are its own. Your email is safe with us. It's only used for moderation and optional notifications. Don't be a jerk or do anything illegal. Everything is easier that way. Read full terms and conditions By signing up, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. By posting, you agree to the Disqus Basic Rules, Terms of Service, and Privacy Policy. − + Avatar ben • 7 months ago does disabling the hdmi increase the potenital speed for other services on the Pi? see more 3 • Reply • Share › Twitter Facebook Link − + Avatar Stijn ben • 7 months ago Yes. Disabling unused services will limit the needed resources and power. So you'll have more spare computing power for other stuff, and use less electricity at the same time. see more 2 • Reply • Share › Twitter Facebook Link − + Avatar Jakub Kramarz ben • 7 months ago Yes and no in the same time: it won't affect CPU performance in any matter, but if you're using VideoCore IV for computation (very unlikely), you may have more resources available. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Joel Auterson • 7 months ago Thanks for this - not having a USB keyboard to hand was the reason I'd held back on buying one of these! see more 3 • Reply • Share › Twitter Facebook Link − + Avatar Roman • 6 months ago FWIW: this didn't work for me right away, so I went on to debug wpa_supplicant and found that it didn't like the spaces in the line &quot;network={&quot;. Now working great! see more 2 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Roman • 6 months ago Whoops, thanks for spotting this. Not sure why example shows it like that :/ see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Michael Dillon • 3 months ago Thanks worked perfectly! see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Brian • 6 months ago Great guide! Thank you for posting. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Erwin • 6 months ago Like Tom, I only see with df -h the boot partition (under /Volumes, not /run/media). I must say I try this under OSX (10.11.2). Does df -h or mounting work differently on a Mac? I used the jessie lite image. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Erwin • 6 months ago This won't work on Mac by default as you can't mount ext4 partitions. You may be able to use something like this http://osxdaily.com/2014/03/20... or use Virtualbox to spin up a Linux instance. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar ivow David Maitland • 19 days ago Thanks David. Ubuntu in Virtual Box did the trick on OSX. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Morris Singer David Maitland • a month ago Just a note to say I was able to do it on my Mac, but there were a few twists and turns that may put this out of the realm of some of those who will make the attempt. First, when using dd, it's important to note that on OS X, you can only specify the block size in bytes (so, make it 4*2^20, i.e., (4194304) rather than 4M. Second, as David Maitland correctly points out, because OS X does not support mounting ext4 partitions, only the boot partition (which is FAT) will load correctly. You can get around this by running a Linux distro (I ran Ubuntu) inside of a hypervisor and exposing the SD card reader to the guest. Instructions are detailed here for VirtualBox: http://superuser.com/questions.... I ran Ubuntu in VirtualBox with a head, and as a result, Ubuntu took care of actually mounting both of the SD card's partitions automatically, so I could fire up my Ubuntu VM and continue setting up the WiFi. YMMV. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Chris Ward • 7 months ago I never thought of mounting it to make changes before plugging it in. Good idea. For the name servers, maybe mention that those are googles servers. How did you get the image to have the whole card usable? I have had to boot my Pi, then expand the file system from the 4gig images up to size of card. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Chris Ward • 7 months ago Thanks! I may do, I did add that bit in after someone on Reddit complained about not showing how to add the name servers so was a quick addition. I got the image to use the whole card after I booted the Zero for the first time using the raspi-config command. I'm not sure of another way to do it. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Chris Ward David Maitland • 7 months ago Oh. I will have to try that. I was messing with parted and ex2fs to drop, then recreate the partition, then expand the file system. I figured that the hard was was the linux way ;-) see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Kevin M David Maitland • 6 months ago I use ubuntu to dd 8G partions to new sd cards. I then use gparted to expand the EXT4 partion to fill the sdcard. I've only tried this with an rpi2-ubuntu image, so I'm not sure if it works for raspian also. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar cyberspice • 7 months ago I would enable the serial getty. Easy to just connect a serial terminal to it if everything else fails. see more 1 • Reply • Share › Twitter Facebook Link − + Avatar Kiran Koduru • 7 months ago Thanks for your article. I bought the Pi Zero and had to order a USB hub &amp; HDMI cable once I couldn't get it to work. But this article would have been easier. Could you suggest a WiFi Adapter to use too? see more 1 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Kiran Koduru • 7 months ago No problem, that's the reason the wrote it! I like the Edimax EW-7811UN (http://www.amazon.co.uk/gp/pro... but the offical WiFi adapter would be a good choice as well (https://shop.pimoroni.com/prod.... see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Igor Ganapolsky • 15 days ago This works great with RASPBIAN JESSIE LITE image. The only thing is I couldn't get my WiFi to set up properly, so I ended up connecting through ethernet. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar the way of the future • 20 days ago Can this be done from a win10 PC running a linux virtual machine? Thanks. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod the way of the future • 20 days ago Yes it can. You just need to attach the USB card reader as a device to the VM. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar the way of the future David Maitland • 19 days ago Thanks I am a total noob to linux and RPI. I get 'could not resolve hostname' or 'connection timed out' when sshing. When I plug in the card to the usb port, 3 things show up on the ubuntu files menu with eject icons; there is 'boot', 'root' and 'settings'. 'Settings' also has a wpa_supplicant.conf file I noticed. Should this one be changed also? It doesn't have the code block from the instructions. I found the main partition to be /media/lerigalacticon/root#. This is the content of my interfaces file after the change: # interfaces(5) file used by ifup(8) and ifdown(8) # Please note that this file is written to be used with dhcpcd # For static IP, consult /etc/dhcpd.conf and 'man dhcpcd.conf' # Include files from /etc/network/interfaces.d: source-directory /etc/network/interfaces.d auto lo iface lo inet loopback iface eth0 inet manual auto wlan0 allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf etc/wpa_supplicant/wpa_supplicant.conf allow-hotplug wlan1 iface wlan1 inet manual wpa-conf etc/wpa_supplicant/wpa_supplicant.conf Could you give some advice as to how to get ssh working for me? Thanks. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar the way of the future the way of the future • 19 days ago I got it to work! I used the settings for static IP address and got the zero IP from logging into the router. Thanks! see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Wilhelm Råbergh • 21 days ago Great guide! I am quite new to Raspberry Pi and the Linux interface, therefore I had some problem figuring out what you meant in the beginning of step three with the leading forward slash. Since I chose to configure the SD card with another RPI I had to add a forward slash. But it was great fun with a little bit of challenge, thank you! see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Wilhelm Råbergh • 20 days ago Did this work? You might have just changed the settings on your existing raspberry pi :/ see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Wilhelm Råbergh David Maitland • 20 days ago Yes that's probably true, forgot to mention that I swapped cards. I put the new SD card in my RPI 3, did the configurations in your guide and then removed the SD card and put it in the Pi Zero. Maybe that explains it better? :) see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Scott Kosman • a month ago Thanks so much for this guide, the step-by-step descriptions worked perfectly for me! One addition: I'm using the same WiFi dongle as you (Edimax EW-7811UN) and after I got it running I found that the wifi connection would drop out after about 30 seconds of idleness. Turns out that I had to disable power management on the dongle itself to keep the connection alive, which is very simple to do: Create a new empty file: sudo nano /etc/modprobe.d/8192cu.conf Paste the following into it: options 8192cu rtw_power_mgnt=0 rtw_enusbss=0 Reboot. Done! No more wifi problems. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Scott Kosman • 20 days ago Interesting, haven't had this issue before. I wonder how much it increases the power usage of the Pi. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Scott Kosman David Maitland • 20 days ago Good question, I'm not sure how to even check that (I'm by no means an expert here – I found the above directions elsewhere after Googling the problem). I'm running mine in headless mode as well, though, so no HDMI port use or GUI so I'm not terribly concerned about power usage at this point. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar wireddude • 5 months ago I'm able to get everything working up to the final step. Whenever I try to ssh into my PI, I get a connection refused. Is there some reason SSH might not be running? ssh: connect to host 192.168.1.105 port 22: Connection refused see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod wireddude • 5 months ago Are you sure it connected to your WiFi network? Maybe check the interface for your router to see if you can find it. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Sergio • 5 months ago Thank you so much for your guide! Unfortunately I'm stuck at the Step One :( the problem is that I can't mount the SD card back! reconnecting it doesn't work, the mount command neither, because there is not a filesystem type assigned to the SD card. Do you know maybe how to solve this issue? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Sergio • 5 months ago What OS are you using? Something must have gone wrong when following the installation guide :/ see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Sergio David Maitland • 5 months ago Thanks for your answer. I was using Xubuntu 14.04, but I decided to mount the image on Windows and then switch to Ubuntu 14.04 to modify the files. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski • 6 months ago Thank You for the guide. I have TP-LINK TL-WN725N wifi nano card and i think its missing drivers. is there a way to add drivers manually to sd card as above steps? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski Maciej Proszewski • 6 months ago After many tries it finally connected with following setup: #Interfaces: auto wlan0 iface lo inet loopback iface eth0 inet dhcp allow-hotplug wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf default inet dhcp #wpa_supplicant: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;ssid&quot; proto=WPA RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP psk=&quot;password&quot; } Then i updated software, changed timezone to CET and rebooted system. After this one time it didn't connect anymore... see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski Maciej Proszewski • 6 months ago I still have a problem with connection. Wifi adapter is powered on and led is blinking like &quot;waiting for connection&quot;. If its connected led is blinking faster with data transmission. Is there a log file anywhere on PI where i can check whats going on there and why its not connecting? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Maciej Proszewski • 6 months ago You can check var/log/syslog to see what it's doing on boot. For example I see this in mine: Dec 11 15:21:34 localhost wpa_supplicant[314]: wlan0: CTRL-EVENT-CONNECTED - Connection to 00:0c:42:fc:9a:6b completed [id=0 id_str=] see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski David Maitland • 6 months ago After every successfull connection i have to edit interface files and wpa_supplicant because they change values. Then it connects at first time and when i reboot system it wont connect anymore. Then i have to do above steps again: edit sdcard's files on my PC. Files changes during &quot;sudo reboot&quot; command: BEFORE: #/etc/network/interfaces auto lo iface lo inet loopback iface eth0 inet dhcp allow-hotplug wlan0 auto wlan0 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf iface default inet dhcp allow-hotplug wlan1 iface wlan0 inet dhcp wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf iface default inet dhcp AFTER: #/etc/network/interfaces !&gt; . n# ô .. wpa_supplicant.conf BEFORE: #/etc/wpa_supplicant/wpa_supplicant.conf ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&quot;ssid&quot; proto=WPA RSN key_mgmt=WPA-PSK pairwise=CCMP TKIP group=CCMP TKIP psk=&quot;psk&quot; } AFTER: #/etc/wpa_supplicant/wpa_supplicant.conf &quot;&gt; . Ů&quot; ô .. I really dont know whats going on here... I downloaded and installed Raspbian again but it didn't change anything. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Jean Maciej Proszewski • 6 months ago I have the exact same issue, have you found a solution for this? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Maciej Proszewski Maciej Proszewski • 6 months ago Its TP-LINK TL-WN725N v2 and the chip is Realtek 8188eu. After some research there are drivers in latest Raspbian compilation &quot;If you’re using Raspbian 2015.01 or later, the Raspberry Pi kernel 3.18 now includes this driver—you don’t need to compile anything and this tutorial is now irrelevant!&quot; Source: https://blog.samat.org/2014/12... see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Tom • 7 months ago I've tried following these steps but when I check the SD card after I only have a boot partition and not a main one? Am I doing something wrong? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Tom • 7 months ago How far did you get in the steps? What distro are you using to do this on? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Tom David Maitland • 7 months ago Hi, Apologies I was following the steps you linked to in Step 1. When I next run df -h I only show one partition on the SD card called boot. It looks like I'm missing the system itself where I can access /etc to make the required changes. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Tom • 6 months ago Are you using Mac by any chance? If so you can't mount the ext4 partion without installing something like OSXFuse or using Virtualbox to start a Linux instance. see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Tom David Maitland • 6 months ago Hi David, thanks for coming back to me. Yes, am using a Mac and your right it was the cause of my issues. I've managed to get a windows system to boot into Linux and then could amend the files. However, still no joy. I'm using the broadcom usb hub/wifi (http://swag.raspberrypi.org/pr..., do you know if it should work the same? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Tom • 6 months ago The hub shouldn't make a difference. Format the SD card. Follow the installation guide again and see if you can mount the partitions :) see more 0 • Reply • Share › Twitter Facebook Link − + Avatar Antero Duarte • 7 months ago Is there any change needed for a WPA2 Enteprise network? I live in a student accommodation. Think about eduroam for example (the secure, world-wide roaming access service developed for the international research and education community, if you don't know it). I would I configure such a network that requires authentication on a headless setup? see more 0 • Reply • Share › Twitter Facebook Link − + Avatar David Maitland Mod Antero Duarte • 7 months ago Just had a quick look online, but haven't been able to test anything. Maybe give this a go in your wpa_supplicant file: network={ ssid=&quot;NETWORK&quot; scan_ssid=1 key_mgmt=WPA-EAP identity=&quot;USERNAME&quot; password=&quot;PASSWORD&quot; eap=PEAP phase1=&quot;peaplabel=0&quot; phase2=&quot;auth=MSCHAPV2&quot; } see more 0 • Reply • Share › Twitter Facebook Link Load more comments Powered by Disqus Subscribe Add Disqus to your site Add Disqus Add Privacy SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160621210426#index"
                   NS1:content=" Contact Us Subscribe Follow Like open culture The best free cultural &amp; educational media on the web Audio Books Online Courses Certificate Courses/MOOCs Movies Languages Textbooks eBooks K-12 700 Free Audio Books: Download Great Books for Free 53.8k SHARES FacebookTwitterGoogle RedditMailTumblrStumbleuponDiggPinterestPrintLinkedinWhatsappDeliciousBufferPocket Advertisement Get a FREE Audio Book from Audible.com and Audiobooks.com Download hundreds of free audio books, mostly classics, to your MP3 player or computer. Below, you’ll find great works of fiction, poetry and non-fiction, by such authors as Twain, Tolstoy, Hemingway, Orwell, Vonnegut, Nietzsche, Austen, Shakespeare, Asimov, HG Wells &amp; more. Also please see our related collection: 800 Free eBooks for iPad, Kindle &amp; Other Devices. Fiction &amp; Literature Aesop – Aesop’s Fables – Free iTunes – Free MP3 – FREE from Audible.com Anderson, Sherwood – Winesburg, Ohio – Free iTunes – Free MP3 Aristophanes – Lysistrata – Free iTunes – Free MP3 Zip File Asimov, Isaac – “Nightfall” – Free MP3 – FREE from Audible.com Asimov, Isaac – Radio Dramas of The Foundation Trilogy &amp; 7 Classic Stories – Free Stream Asimov, Isaac – “The Last Question” (readings by Isaac Asimov &amp; Leonard Nimoy) – Free YouTube Audio Asimov, Isaac – “Youth” – Free MP3 – Free iTunes Austen, Jane – Emma – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Austen, Jane – Lady Susan – Free iTunes – Free MP3 – Free Zip File Austen, Jane – Love and Friendship – Free Zip File – Free MP3 Stream Austen, Jane – Mansfield Park – Free iTunes – Free MP3 Stream Free eBook available here. Austen, Jane – Northanger Abbey – Free iTunes – Free MP3 – FREE from Audible.com Austen, Jane – Persuasion – Free iTunes – Free MP3 Free eBook available here. Austen, Jane – Pride and Prejudice – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Austen, Jane – Pride and Prejudice (alternative version) – Spotify Austen, Jane – Sense and Sensibility – Free iTunes – Free MP3 Stream – Free MP3 Zip File Free eBook available here. Auster, Paul – Free Stream – “Auggie Wren’s Christmas Story” Auster, Paul – Free MP3 – The Red Notebook (read by the author) Babel, Isaac – Free MP3 – “The Story of the Dovecote” (read by Nathan Englander) – Free MP3 Babel, Isaac – “You Must Know Everything” – Free MP3 Baldwin, James – The Story of Siegfried – Free iTunes – Free MP3 Baldwin, James – Fifty Famous Stories Retold – Free MP3 Stream/Download Ballard, JG – “A Place and A Time to Die” (Dramatized version) – Free MP3 Stream Ballard, JG – Cocaine Nights – Free Stream Ballard, JG – “My Dream of Flying to Wake Island” (read by William Boyd) – Free MP3 Ballard, JG – The Drowned World – Free Stream Ballard, JG – “The Stories of JG Ballard” (dramatized for radio) – Free Stream Balzac, Honoré de – La Comédie Humaine (French) – Free Downloads Balzac, Honoré de – Le Père Goriot – Free Stream/Download Balzac, Honoré de – The Peasant Story of Napoleon – Free MP3 Barrie, JM – Peter Pan – Free iTunes – Free MP3 Barrodale, Amie – “William Wei” (read by James Franco) – Free MP3 Barthelme, Donald – “Chablis” (read by Etgar Keret) – Free Stream Barthelme, Donald – “Concerning the Bodyguard” (read by Salman Rushdie) – Free MP3 Barthelme, Donald – “Game” and “School” (read by T.C. Boyle) – Free MP3 Baum, Frank L. – The Wizard of Oz (Vol 1) – Free iTunes – Free MP3 Baum, Frank L. – The Marvelous Land of Oz (Vol 2) – Free iTunes – Free MP3 Baum, Frank L. – Ozma of Oz (Vol 3) – Free iTunes – Free MP3 Baum, Frank L. – Dorothy and the Wizard of Oz (Vol 4) – Free iTunes – Free MP3s Baum, Frank L. – The Road to Oz (Vol 5) – Free iTunes – Free MP3 Baum, Frank L. – The Emerald City of Oz (Vol 6) – Free iTunes – Free MP3s Baum, Frank L. – The Patchwork Girl of Oz (Vol 7) – Free iTunes – Free MP3s Baum, Frank L. – Tik Tok of Oz (Vol 8) – Free iTunes – Free MP3 Baum, L. Frank – The Scarecrow of Oz (Vol 9) – Free iTunes – Free MP3 Baum, L. Frank – Rinkitink in Oz (Vol 10) – Free MP3 Baum, L. Frank – The Lost Princess of Oz (Vol 11) – Free iTunes – Free MP3 Baum, Frank L. – The Tin Woodman of Oz (Vol 12) – Free iTunes – Free MP3 Baum, Frank L. – The Magic of Oz (Vol 13) – Free MP3 Baum, Frank L. – Glinda of Oz (Vol 14) – Free MP3 Beckett, Samuel – The Complete Short Prose, 1929-1989 – Free Audio Stream Beckett, Samuel – Waiting for Godot (Live Reading) – Real Player Beckett, Samuel – Waiting for Godot (Theatrical performance with Bert Lahr) – Spotify Borges, Jorge Luis – ‘On Exactitude in Science’ – Free MP3/Stream Borges, Jorge Luis – Shakespeare’s Memory – Free MP3 – Free iTunes Borges, Jorge Luis – The Gospel According to Mark (read by Paul Theroux) – Free MP3 Bradbury, Ray – Futuria Fantasia – Free iTunes – Free Stream – Background info Bradbury, Ray – All Summer in a Day – Free Stream/MP3 Bradbury, Ray – The Golden Apples of the Sun – Free Stream/MP3 Bradbury, Ray – The Pedestrian – YouTube Bradbury, Ray – The Veldt (Read by Stephen Colbert) – YouTube Bradbury, Ray – There Will Come Soft Rain (read by Burgess Meredith) – YouTube Bradbury, Ray – Stories The Martian Chronicles &amp; The Illustrated Man Read by Leonard Nimoy – YouTube Bradbury, Ray – Radio Dramas of Bradbury Stories – Free Stream Brodkey, Harold – “Dumbness is Everything” (read by Michael Cunningham) – Free Stream Brodkey, Harold – “Spring Fugue” (read by Jeffrey Eugenides) – Free MP3 Brodkey, Harold – “The State of Grace” (read by Richard Ford ) – Free Stream Bronte, Anne – Agnes Grey – Free iTunes Bronte, Charlotte – Jane Eyre – Free iTunes – Free MP3 – Another Free MP3 Free eBook available here. Bronte, Charlotte – The Professor – Free iTunes – Free MP3 – FREE from Audible.com Bronte, Emily – Wuthering Heights – Free MP3 – Free MP3 Zip File Free eBook available here. Brown, Margaret Wise – Good Night Moon (Read by Susan Sarandon) – YouTube Burroughs, William S. – Call Me Burroughs (his first spoken word album) – Spotify Burroughs, William S. – “Ghosts of Chance” – YouTube Burroughs, William S. – Junky – MP3s Burroughs, William S. – The Best of William Burroughs, Spare Ass Annie and Other Tales, Dead City Radio, Break Through in Grey Room, and Call Me Burroughs – Spotify Burroughs, William S. – “Thanksgiving Prayer” – YouTube Calvino, Italo – Invisible Cities (excerpts read by Calvino) – Free Stream Calvino, Italo – The Night (read by Jeanette Winterson) – Free MP3 Calvino, Italo – “The Daughters of the Moon” – Free Stream Carroll, Lewis – Alice’s Adventures in Wonderland – Free iTunes – Free MP3s – FREE from Audible.com Carroll, Lewis – Alice’s Adventures in Wonderland (read by Cory Doctorow) – Multiple formats Carroll, Lewis – Alice’s Adventures in Wonderland (read by Sir John Gielgud) – Stream/Spotify Carroll, Lewis – Sylvie and Bruno – Free MP3 – Free MP3 – Free iTunes Carroll, Lewis – Sylvie and Bruno Concluded – Free MP3 – Free iTunes Carroll, Lewis – The Game of Logic – Free iTunes Carroll, Lewis – Through the Looking Glass – Free iTunes – Free MP3 Carver, Raymond – “Chef’s House” (read by David Means) – Free MP3 Carver, Raymond – “Fat” (read by Anne Enright) – Free MP3 Carver, Raymond – “The Students’ Wife (read by Richard Ford) – Free MP3 Carver, Raymond – “What We Talk About When We Talk About Love” (Read by Carver) – Free MP3 Cervantes Saavedra, Miguel de – Don Quixote – Free MP3 Zip File – FREE from Audible.com Free eBook available here Chabon, Michael – “S. Angel” – Free Stream Chaucer, Geoffrey – Canterbury Tales – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Cheever, John – “The Death of Justina” (read by John Cheever) – Free Stream/Download Cheever, John ” The Enormous Radio” (read by Nathan Englander) – Free Stream Cheever, John – “The Reunion” (read by Richard Ford) – Free MP3 Cheever, John – “The Swimmer” (read by Anne Enright) – Free MP3 Cheever, John – “The Swimmer” (read by Cheever) – Free Stream/Download Chekhov, Anton – Collected Stories – Free MP3 Stream/Download Chekhov, Anton – “The Beauties” (read by Philip Pullman) – Free MP3 Chesterton, G.K. – The Man Who Was Thursday – Free iTunes – FREE from Audible.com Chekhov, Anton – Collected Stories – Free multiple formats – FREE from Audible.com Chekhov, Anton – “The First Class Passenger,” “Harmfulness of Tobacco” and “A Transgression” (Read by Michale Redgrave) – Spotify Chabon, Michael – “S Angel” (read by author) – Free Stream/Download Chopin, Kate – The Awakening – Free iTunes – FREE from Audible.com Free eBook available here. Chopin, Kate – Selected Stories – Multiple Formats Christian Andersen, Hans – Tales of Hans Christian Andersen, including The Emperor’s New Clothes, read by Sir Michael Redgrave – Free Spotify Christian Andersen, Hans – Andersen’s Fairy Tales – Free MP3 Christian Andersen, Hans – The Emperor’s New Clothes – Free iTunes – Free MP3 – FREE from Audible.com Clarke, Arthur C. – “A Walk in the Dark” (A dramatized version of the text) – Free MP3 Stream Clarke, Arthur C. – “Breaking Strain” – YouTube Clarke, Arthur C. – Childhood’s End (Excerpts read by the author) – YouTube Clarke, Arthur C. – “Hammer of God” – Free MP3 Clarke, Arthur C. – “The Nine Billion Names of God” and “The Star” – Free Stream/Download Clarke, Arthur C. – “The Star” (Read by the author) – YouTube Conan Doyle, Arthur – Beyond the City – Free MP3 Conan Doyle, Arthur – The Adventures of Sherlock Holmes – Free iTunes – Free MP3 – Free MP3 Zip File Free eBook available here. Conan Doyle, Arthur – The Memoirs of Sherlock Holmes – Free iTunes – Free MP3s Conan Doyle, Arthur – The Mystery of Cloomber – Free MP3 Conan Doyle, Arthur – The Return of Sherlock Holmes – Free iTunes – Free MP3s Conan Doyle, Arthur – The Speckled Band – Free iTunes Conrad, Joseph – Heart of Darkness – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Conrad, Joseph – Heart of Darkness (Orson Welles’ radio drama from 1938) – YouTube Conrad, Joseph – Lord Jim – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Conrad, Joseph – The Secret Agent – Free iTunes – Free MP3 – Free MP3 Zip File Conrad, Joseph – The Secret Sharer – Free MP3 Conrad, Joseph – The Secret Sharer – YouTube Cooper, James Fenimore – Jack Tier, or the Florida Reef – Free MP3 Cooper, James Fenimore – The Last of the Mohicans – Free iTunes – Free MP3– Free MP3 Zip File Crane, Stephen – The Open Boat – Free MP3 – Free iTunes Crane, Stephen – The Red Badge of Courage – Free iTunes – Free MP3 – Alternate MP3 Free eBook available here. Dante Alighieri – The Divine Comedy (English) – Free iTunes – Free MP3 Free eBook available here. Dante Alighieri – The Divine Comedy (Italian) – Free Stream from Princeton University Dante Alighieri – Divina Commedia (Full reading in Italian) – Free Stream/MP3 Dante Alighieri – The Inferno, Cantos I-VIII (Read by John Ciardi) – Spotify Danticat, Edwidge – Water Child (read by Junot Diaz) – Free MP3 – Free iTunes Defoe, Daniel – Robinson Crusoe – Free iTunes – Free MP3 – Free MP3 Zip file Free eBook available here. Defoe, Daniel – Robinson Crusoe (alternate version read by Nigel Graham) – Spotify DeLillo’s, Don – “Baader-Meinhof” (read by Chang-rae Lee) – MP3 Diaz, Junot – “Alma” (read by Victor Rasuk) – YouTube Diaz, Junot – “How to Date a Brown Girl (Black Girl, White Girl, or Halfie)” – Free MP3 Dick, Philip K. – “Beyond Lies the Wub” – Free MP3 Dick, Philip K. – “Mr. Spaceship” – Free iTunes – Free Stream &amp; Download Dick, Philip K. – “Second Variety” – Free MP3 Zip File – Free iTunes Dick, Philip K. – “The Crystal Crypt” &amp; “Beyond the Door” – Free iTunes – Free Stream Dick, Philip K. – “The Defenders” – Free MP3 Dick, Philip K. – “The Eyes Have It” – Free MP3 Dick, Philip K. – “The Gun” – YouTube Dick, Philip K. – “The Hanging Stranger” – Free MP3 Dick, Philip K. – “The Skull” – Free iTunes – Free MP3 Dick, Philip K – “The Variable Man” – Free Stream – Free iTunes – Free MP3 Zip File Dick, Philip K – “Tony and the Beetles” – MP3 Part 1 – MP3 Part II Dick, Philip K – Radio Plays – Stream Dickens, Charles – A Christmas Carol – Free iTunes – Free MP3s – Free MP3 Zip File Dickens, Charles – A Christmas Carol (Read by Neil Gaiman) – Free Stream Dickens, Charles – A Tale of Two Cities – Free iTunes – Free MP3s – Free MP3 Zip File Free eBook available here. Dickens, Charles – Bleak House – Free iTunes – Free MP3 Zip File Free eBook available here. Dickens, Charles – Christmas Stories – Free MP3s Dickens, Charles – David Copperfield – Free iTunes – Free MP3s – Free MP3s Free eBook available here. Dickens, Charles – Great Expectations – Free iTunes – Free MP3s – Free MP3 Zip File Free eBook available here. Dickens, Charles – Hard Times – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Dickens, Charles – Oliver Twist – Free iTunes – Free MP3s – FREE from Audible.com Free eBook available here. Dickens, Charles – “The Christmas Tree” (Read by Simon Callow) – Free MP3 Dodge, Mary Mapes – Hans Brinker – Free iTunes – Free MP3 Zip File – FREE from Audible.com Dostoyevsky, Fyodor – Crime and Punishment – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Dostoyevsky, Fyodor – Notes from the Underground – Free MP3 Dostoyevsky, Fyodor – The Brothers Karamazov – Free iTunes – Free Stream – Free MP3 Zip File Free eBook available here. Dostoyevsky, Fyodor – The Dream of a Ridiculous Man – Free Stream/Download Dostoyevsky, Fyodor – The Gambler – Free MP3 Zip File – Free Stream Dostoyevsky, Fyodor – The Grand Inquisitor (dramatic reading) – Free Stream – Free MP3 Zip Dostoyevsky, Fyodor – The Idiot – Free MP3 Zip File – Free Stream Dostoyevsky, Fyodor – The Possessed – Free MP3 Doyle, Roddy – “Bullfighting” (Read by Dave Eggers) – Free MP3 Dreiser, Theodore – Sister Carrie – Free MP3 – FREE from Audible.com Free eBook available here. Dreiser, Theodore – The Lost Phoebe – Free iTunes – FREE from Audible.com Dumas, Alexandre – The Comte de Monte Cristo – Free iTunes – Free MP3s – Free MP3 Zip File Free eBook available here. Dumas, Alexandre – The Three Musketeers – Free iTunes – Free Stream – Free MP3 Zip File Free eBook available here. Eliot, George – Silas Marner – Free MP3 – FREE from Audible.com Free eBook available here. Eliot, George – Middlemarch – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Faulkner, William – “Shingles for the Lord” – Free Stream Faulkner, William – Faulkner Reads Faulkner – Free Stream Fitzgerald, F. Scott – Bernice Bobs Her Hair – Free iTunes – Free MP3s/Stream Fitzgerald, F. Scott – Flappers and Philosophers – Free iTunes – Free MP3s Fitzgerald, F. Scott – Tales of the Jazz Age – Free iTunes – Free MP3s Fitzgerald, F. Scott – The Beautiful and Damned – Free iTunes – Free MP3s/Stream Fitzgerald, F. Scott – The Curious Case of Benjamin Button – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Fitzgerald, F. Scott – The Great Gatsby – Free Stream Fitzgerald, F. Scott – This Side of Paradise – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Flaubert, Gustave – Madame Bovary – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Flaubert, Gustave – Three Short Works Free iTunes – Free MP3 Zip File – Free Stream Forster, E.M. – A Room with a View – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Forster, E. M. – Howards End – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Forster, E.M. – “The Machine Stops” – Free iTunes Gaiman, Neil – Coraline – Video Gaiman, Neil – “A Study in Emerald” – Free iTunes Gaiman, Neil – “How to Talk to Other Girls at Parties” – Free MP3 Gaiman, Neil – “Orange” (read live) – Free Video Gaiman, Neil – “Other People” (read by Neil Gaiman) – Free Video Gaiman, Neil – The Graveyard Book (read by Neil Gaiman) – Free Video Gaiman, Neil – “Troll Bridge” (read live, starts at 4:00 mark) – Free iTunes Gaiman, Neil – “The Man Who Forgot Ray Bradbury” (read by Neil Gaiman) – Free Stream Gaiman, Neil – “The Truth Is a Cave in the Black Mountains” – Free MP3 Gaitskill, Mary – “The Other Place” (read by Jennifer Egan) – Free MP3 Geng, Veronica – “Love Trouble Is My Business” (read by Jonathan Franzen) – Free MP3 Gogol, Nikolai – Dead Souls – Free iTunes – Free MP3 Zip File Free eBook available here. Gogol, Nikolai – “The Nose” – Free MP3 Gogol, Nikolai – The Overcoat and Other Short Stories – Free MP3 Zip File – FREE from Audible.com Gordimer, Nadine – “A Style of Her Own” and “The Bridegroom” (read by the author, 1961) – Free Stream/Download Gordimer, Nadine – “City Lovers” – Free MP3 Gordimer, Nadine – “Loot” (read by author) – YouTube Grahame, Kenneth – The Reluctant Dragon (read by Boris Karloff) – YouTube Hawthorne, Nathaniel – House of the Seven Gables – Free MP3s Free eBook available here. Hawthorne, Nathaniel – Rappaccini’s Daughter – Free iTunes Hawthorne, Nathaniel – The Scarlet Letter – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Hayden, Julie – “Day-Old Baby Rats” (read by Lorrie Moore) Free MP3 Heinlein, Robert – Methuselah’s Children (abridged) – Free Stream/MP3 Hemingway, Ernest – Ernest Hemingway Reads Ernest Hemingway – Free Stream Hemingway, Ernest – Homage to Switzerland (read by Julian Barnes) – Free MP3 Hemingway, Ernest – “In Harry’s Bar in Venice” (a short story read by Hemingway: .au format, .gsm format, .ra format) Hemingway, Ernest – “The Snows of Kilimanjaro” (read by Charleston Heston) – Part 1 – Part 2 – Part 3 – Part 4 Hesse, Hermann – Siddhartha – Free MP3 – Spotify Homer, The Iliad (Based on Samuel Butler Translation) – Free MP3 Zip File Free eBook available here. Homer, The Odyssey (Based on Samuel Butler Translation) – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Hughes, Langston – “Simple on Indian Blood”(read by Ossie Davis) – Free Stream Hughes, Langston – “A Toast to Harlem” (read by Ossie Davis) – Free Stream Hughes, Langston – “Last Whipping” (read by Ossie Davis) – Free Stream Hughes, Langston – “Feet Live Their Own Life” (read by Ossie Davis) – Free Stream Hugo, Victor – Les Misérables Vol. 1 – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Hugo, Victor – Les Misérables – Radio drama narrated by Orson Welles – Multiple formats Hugo, Victor – The Hunchback of Notre Dame – Free MP3 – Free iTunes Free eBook available here. Hugo, Victor – The Hunchback of Notre Dame (Abridged version read by Christopher Lee) – Spotify Huxley, Aldous – Brave New World (Dramatized version read by Huxley) – Free MP3s Huxley, Aldous – Crome Yellow – Free iTunes – Free MP3 Zip File Irving, Washington – Rip Van Winkle – Free MP3 Irving, Washington – The Legend of Sleepy Hollow – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. James, Henry – Daisy Miller – Free iTunes – Free MP3 Zip File – FREE from Audible.com James, Henry – “Greville Fane” (read by Cynthia Ozick) – Free Stream/Download James, Henry – The Turn of the Screw – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Johnson, Denis – “Emergency” (read by Tobias Wolff) MP3 Joyce, James – A Portrait of the Artist as a Young Man – Free iTunes – Free MP3 Zip File – Free Stream Free eBook available here. Joyce, James – Chamber Music – Free iTunes – Free Stream Joyce, James – Dubliners – Free iTunes – Free MP3 Zip File – Free Stream – Free on Spotify Joyce, James – “Eveline” (read by Sebastian Barry) – Free MP3 Joyce, James – Finnegans Wake – Free Stream Joyce, James – “The Dead” – Free MP3 Zip File – FREE from Audible.com Joyce, James – “The Dead” (Read by Cynthia Nixon &amp; Colum McCann) – Free Stream Joyce, James – “The Dead” (Read by Bart Wolffe) – Spotify Joyce, James – Ulysses – Free Stream Various Formats – FREE from Audible.com Free eBook available here. July, Miranda – “Ron Spivey” (read by David Sedaris) – Free MP3 Kafka, Franz – “A Little Fable” (Read by David Foster Wallace) – Free Stream Kafka, Franz – “A Hunger Artist” (read by Hanif Kureishi) – Free MP3 Kafka, Franz – “Before the Law” – Free MP3 Kafka, Franz – “In the Penal Colony – Free MP3 Kafka, Franz – The Metamorphosis – Free iTunes – Free MP3 – Free Stream – Spotify Free eBook available here. Kerouac, Burroughs, Ginsberg, etc — 18 Hours of Beat Readings — Spotify Kincaid, Jamaica – “Figures in the Distance” (read by Chimamanda Ngozi Adichie) – Free MP3 Kincaid, Jamaica – “Girl” and “Wingless” (read by Edwidge Danticat) – Free Stream King, Stephen – “Afterlife” – YouTube Kipling, Rudyard – Kim – Free iTunes Kipling, Rudyard – Just So Stories for Little Children – Free iTunes – Free MP3/Stream Kipling, Rudyard – Rikki-Tikki-Tavi – Free MP3 – FREE from Audible.com Kipling, Rudyard – “The Elephant’s Child” – Free MP3 – FREE from Audible.com Kipling, Rudyard – The Jungle Story – Free MP3 Zip File L’Heureux, John – “Three Short Moments in a Long Life” – Free MP3 Stream Lawrence, D.H. – Everlasting Flowers – Free MP3 Zip File – FREE from Audible.com Lawrence, D.H. – A Woman and Her Dead Husband – Free MP3 Le Guin, Ursula – “The End” (Dramatized version) – Free MP3 Stream Leroux, Gaston – The Phantom of the Opera (abridged) – Spotify Lewis, C.S. – The Chronicles of Narnia – Free MP3s The Lion, the Witch and the Wardrobe Prince Caspian: The Return to Narnia The Voyage of the Dawn Treader The Silver Chair The Horse and His Boy The Magician’s Nephew The Last Battle Lewis, C.S. – Spirits in Bondage – Free iTunes – Free MP3s Lewis, C.S. – The Screwtape Letters (narrated by John Cleese) – YouTube Lewis, Sinclair – Babbit – Free iTunes – Free MP3s Free eBook available here. Lewis, Sinclair – Main Street – Free MP3s – Free iTunes London, Jack – Call of the Wild – Free iTunes – Free MP3s – FREE from Audible.com Free eBook available here. London, Jack – The Heathen – Free MP3 – FREE from Audible.com London, Jack -To Build a Fire – Free MP3 London, Jack – White Fang – Free iTunes – Free MP3 Zip File Longfellow, Henry Wadsworth – Selected Works – Free iTunes – Free MP3 Lovecraft, H.P. – The Call of of Cthulhu (Read by Garrick Hagan) – Free YouTube – Free Stream Part 1 – Free Stream Part 2 Lovecraft, H.P – The Call of of Cthulhu &amp; Other Stories – Spotify Lovecraft, H.P. – The Collected Public Domain Works of H. P. Lovecraft – Free Mp3 Zip File – Free Stream Lucretius – On the Nature of Things – Free MP3 Zip File – Free iTunes Lu Xun – A Madman’s Diary and Other Stories – Free MP3 Zip File Mann, Thomas – Death in Venice – Free MP3s/Download McCabe, Eugene – Annahullian (read by Colm Tóibín) – Free MP3 McCann, Colum – “Transatlantic” (read by author) – Free MP3 McEwan, Ian – “My Purple Scented Novel” (read by the author) – Free Stream Melville, Herman – Moby-Dick – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Melville, Herman – Moby-Dick read by Celebrities (Benedict Cumberbatch, John Waters, Stephen Fry, Tilda Swinton &amp; More) – Free iTunes – Soundcloud – Big Read – More details Melville, Herman – Moby-Dick read by Other Celebrities – SoundCloud Melville, Herman – Typee – Free iTunes – Free MP3 Zip File Miller, Arthur – Readings from The Crucible and Death of a Salesman – Spotify Miller Jr, Walter M. – A Canticle for Leibowitz (Dramatized Version) – MP3s Milton, John – Paradise Lost – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Milton, John – Paradise Regained – Free MP3 Zip File – FREE from Audible.com Montgomery, Lucy Maud – Anne of Green Gables – Free iTunes – Free MP3s Moore, Lorrie – “Paper Losses” (read by Gary Shteyngart) – Free Stream Munro, Alice – “Axis” – Free MP3 Murakami, Haruki – “On Seeing the 100% Perfect Girl One Beautiful April Morning” – Free Stream Nabokov, Vladimir – My Russian Education (Read by Orhan Pamuk) – Free MP3 – Free iTunes Nabokov, Vladimir – “Pnin” – Free Stream Nabokov, Vladimir – Signs and Symbols – Free iTunes Nabokov, Vladimir – Vladimir Nabokov Reads from Lolita &amp; Selected Poems – Spotify Northup, Solomon – Twelve Years a Slave – Free iTunes – Free MP3 O’Connor, Flannery – “A Good Man is Hard to Find.” (Read by author in 1959) – Stream/Download O’Connor, Flannery – “Everything That Rises Must Converge” (Read by Estelle Parsons) – YouTube O’Connor, Flannery – “Revelation” (Read by Studs Terkel) – Stream O’Connor, Frank – “The Man of the World” (read by Julian Barnes) MP3 O Henry, The Gift of the Magi – Free iTunes – Free MP3 – FREE from Audible.com Oates, Joyce Carol – “Mastiff” (read by Louise Erdrich) – Free Stream Orwell, George – 1984 – Free Stream – Free MP3 Zip File – Multiple Versions – FREE from Audible.com Free eBook available here. Orwell, George – 1984 (Radio Drama from 1949 starting David Niven) – Free Stream Orwell, George – Animal Farm – Free Stream – Free MP3 Zip File Free eBook available here. Orwell, George – Animal Farm – Spotify version Orwell, George – Homage to Catalonia – Chapter 1 here – Remaining Chapters here Oz, Amos – “The King of Norway” (read by Jonathan Safran Foer) – Free Stream Ozick, Cynthia – “The Shawl” (read by Joyce Carol Oates) – Free Stream Paley, Grace – “Love” (read by George Saunders) – Free Stream Poe, Edgar Allan – 5 Hours of Edgar Allan Poe Stories Read by Vincent Price &amp; Basil Rathbone – Spotify Poe, Edgar Allan – The Complete Works Vol. 1 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 2 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 3 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 4 – Free iTunes – Free Stream/Download Poe, Edgar Allan – The Complete Works Vol. 5 – Free iTunes – Free Stream/Download Poe, Edgar Allan – “The Masque of the Red Death” and Annabel Lee (read by William S. Burroughs) – Free YouTube Audio Poe, Edgar Allan – The Raven (as read by Christopher Walken) – Free YouTube Audio Poe, Edgar Allan – The Raven (as read by James Earl Jones) – Free YouTube Audio Poe, Edgar Allan – The Raven (as read by Christopher Lee) – Free YouTube Audio Poe, Edgar Allan – The Cask of Amontillado – Free MP3/Stream – FREE from Audible.com Poe, Edgar Allan – The Mask of the Red Death (read by William S. Burroughs) – Spotify Poe, Edgar Allan – The Pit and the Pendulum – Free MP3 Poe, Edgar Allan – The Raven – Free MP3 – FREE from Audible.com Poe, Edgar Allan – The Raven (read by Stan Lee) – YouTube Poe, Edgar Allan – The Raven (read by James Earl Jones) – YouTube Poe, Edgar Allan – The Raven (read by Christopher Lee) – YouTube Poe, Edgar Allan – The Raven (read by Christopher Walken) – YouTube Alternate version read by actor John de Lancie (video) Free eBook available here. Poe, Edgar Allan – The Tell Tale Heart – Free MP3 – FREE from Audible.com Poe, Edgar Allan – The Tell Tale Heart (read by Christopher Lee) – Free YouTube Audio Poe, Edgar Allan – The Tell Tale Heart (read by Iggy Pop) – Free YouTube Audio Porter, Eleanor – Pollyanna – Free MP3 Zip File Price, Vincent – The Price of Fear (Classic radio show featuring Vincent Price) – Free Stream Pritchett, V.S. – The Rescue (Read by Jonathan Lethem) – Free Stream Prokofiev, Sergei – Peter and the Wolf (Narrated by David Bowie) – Spotify Proust, Marcel – À La Recherche Du Temps Perdu (Œuvre Intégrale) (in French) – Free Stream Pushkin, Alexander – Eugene Onegin – Free MP3 Stream – Free MP3 Zip File Ratcliffe, Stephen – Continuum – Free MP3 Stream Remarque, Erich Maria – All Quiet on the Western Front – Free Stream Ruskin, John – The Golden River – Free MP3 Safran Foer, Jonathan – “Love is Blind and Deaf” – Video Animation Saramago, José – “The Centaur” (Read by Nadine Gordimer) – Free MP3 Sedaris, David – “The Mouse and the Snake” from Squirrel Seeks Chipmunk: A Modest Bestiary – Free MP3 – Web site Sedaris, David – “Six to Eight Black Men” from the album ‘Live at Carnegie Hall’ – YouTube Audio Sedaris, David – “Solution to Saturday’s Puzzle”from When You Are Engulfed in Flames – Free MP3 Sendak, Maurice – Where the Wild Things Are (read by Christopher Walken) – YouTube Seuss, Dr. – Green Eggs and Ham (read by Neil Gaiman) – YouTube Seuss, Dr. – How The Grinch Stole Christmas (read by Keith Morrison) – YouTube Sewell, Anna – Black Beauty – Free iTunes – Free MP3s Schwartz, Delmore – “In Dreams Begin Responsibilities” (Read by Lou Reed) – Free Stream Shakespeare, William – A 68 Hour Playlist of Shakespeare’s Plays Being Performed by Great Actors: Gielgud, McKellen &amp; More – Free on Spotify Shakespeare, William – 10 Plays Performed by Orson Welles on the Radio – Free Stream Shakespeare, William – All’s Well Ends Well – Free Stream – Free MP3 Zip File Shakespeare, William – A Midsummer Night’s Dream – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Shakespeare, William – Antony and Cleopatra – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – As You Like It – Free iTunes – Free Stream – Free Mp3 Zip File Shakespeare, William – Comedy of Errors – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – Coriolanus – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – Cymbeline – Free iTunes – Free Stream – Free MP3 Zip File Shakespeare, William – Hamlet – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Shakespeare, William – Julius Caesar – Free iTunes – Free MP3 Free eBook available here. Shakespeare, William – King Lear – Free iTunes – Free MP3 Zip File – FREE from Audible.com Free eBook available here. Shakespeare, William – Romeo and Juliet – Free iTunes – Free MP3 – FREE from Audible.com Free eBook available here. Shakespeare, William – The Merchant of Venice – Free iTunes – Free MP3 Free eBook available here. Shakespeare, William – The Sonnets – Free iTunes – Free MP3 Shakespeare, William – The Sonnets (read by Sir John Gielgud) – Part 1, Part 2, Part 3, Part 4 Shakespeare, William – The Tragedy of MacBeth – Free iTunes – FREE from Audible.com Free eBook available here. Shaw, George Bernard – Pygmalion – Free iTunes – Free MP3 Shelley, Mary – Frankenstein – Free iTunes – Free MP3 – FREE from Audible.com Also check out the 1938 radio broadcast that is faithful to Mary Shelley’s text. (iTunes) Free eBook available here. Shelley, Mary – Frankenstein (Abridged version read by Christophe Lee) – Spotify Silverstein, Shel – The Giving Tree (Animated film narrated by the author) – YouTube Silverstein, Shel – The Giving Tree (Read by Arianna Huffington) – YouTube Sinclair, Upton – The Jungle – Free iTunes – Free MP3 Free eBook available here. Singer, Isaac Bashevis – Disguised (read by Nathan Englander) – Free MP3 Smith, Zadie – “Escape from New York” (read by Zadie Smith) – Free Audio Stream Stein, Gertrude – If I Told Him: a Completed Portrait of Picasso – Free MP3 Stein, Gertrude – Matisse – Free MP3 Stein, Gertrude – The Fifteenth Of November . . . T. S. Eliot – Free MP3 Stein, Gertrude – The Making of Americans – Free MP3 Steinbeck, John – “The Snake” and “Johnny Bear” – Free Stream – Spotify Sterne, Laurence – The Life and Opinions of Tristram Shandy, Gentleman – Free Stream: Vol 1. – Vol 2. – Vol 3. – Vol 4. Stevenson, Robert Louis – The Strange Case of Dr Jekyll &amp; Mr Hyde – Free MP3 – FREE from Audible.com Free eBook available here. Stevenson, Robert Louis – The Strange Case of Dr Jekyll &amp; Mr Hyde (Read by Christopher Lee) – Spotify Stevenson, Robert Louis – Treasure Island – Free MP3 – FREE from Audible.com Free eBook available here. Stoker, Bram – Dracula – Free iTunes – FREE from Audible.com See alternative version here. (full zip file) Stoker, Bram – Dracula (Read by Christopher Lee) – Spotify Stowe, Harriet Beecher – Uncle Tom’s Cabin – Free iTunes – Free MP3 – FREE from Audible.com Swift, Jonathan – Gulliver’s Travels – Free iTunes – Free MP3 Zip File – FREE from Audible.com Thayer, Ernest Lawrence – Casey at the Bat – Free iTunes – Free MP3 Thomas, Dylan – A Child’s Christmas in Wales (read by Thomas) – Youtube Tolstoy, Leo – Anna Karenina – Free Stream Tolstoy, Leo – Anna Karenina – Book 1 – Free Zip File Book 2 – Free Zip File Book 3 – Free Zip File Book 4 – Free Zip File Book 5 – Free Zip File Book 6 – Free Zip File Book 7 – Free Zip File Book 8 – Free Zip File Tolstoy, Leo – Selected Short Stories – Free Stream/MP3 Tolstoy, Leo – What Men Live By and Other Tales – Free iTunes Tolstoy, Leo – War &amp; Peace Book 1, Book 2, Book 3, Book 4, Book 5, Book 6, Book 7, Book 8, Book 9 (Zip Files) – FREE from Audible.com Free eBook available here. Tolstoy, Leo – Selected Short Stories – Free Multiple formats Trollope, Anthony – Barchester Towers – Free MP3 Zip File – FREE from Audible.com Twain, Mark – The Adventures of Huckleberry Finn – Multiple versions here Twain, Mark – The Adventures of Tom Sawyer – Free MP3 – FREE from Audible.com Free eBook available here. Twain, Mark – The Adventures of Tom Sawyer – Spotify version Twain, Mark – The Prince and the Pauper – Free iTunes – Free MP3 Zip File – Free Stream Unknown – Epic of Gilgamesh – Free iTunes Unknown – Sir Gawain and the Green Night – Free MP3 Zip File Updike, John – “Playing with Dynamite” (read by Roger Angell) – Free MP3 Updike, John – “A &amp; P.” (read by Allegra Goodman) – Free MP3 Verne, Jules – 20,000 Leagues Under the Sea – Free MP3 Zip File – Free iTunes Free eBook available here. Verne, Jules – Around the World in 80 Days – Free iTunes – Free MP3s – FREE from Audible.com Free eBook available here. Verne, Jules – Mysterious Island – Free iTunes Verne, Jules – The Master of the World – Free MP3 Voltaire – Candide – Free MP3 – FREE from Audible.com Vonnegut, Kurt – 2BR02B – Free MP3 – FREE from Audible.com Vonnegut, Kurt – “Harrison Bergeron” – Free MP3 Vonnegut, Kurt – The Big Trip Up Yonder – Free MP3 Vonnegut, Kurt – Slaughterhouse 5, Cat’s Cradle, Breakfast of Champions, Welcome to the Monkey House (Abridged readings by Vonnegut) – Spotify Wallace, David Foster – “Consider the Lobster” (read by DFW) – Free MP3 Wallace, David Foster – “The View from Mrs. Thompson’s” (read by DFW) – Free MP3 Welles, Orson – The Shadow (Performed by Welles) – Free MP3 Wells, HG – The Invisible Man- Free iTunes – Free Stream – FREE from Audible.com Free eBook available here. Wells, HG – Magic Shop – Free iTunes Wells, HG – Time Machine – Free iTunes – FREE from Audible.com Free eBook available here. Wells, HG – The War of the Worlds – Free iTunes – FREE from Audible.com Free eBook available here. Wells, HG – The War of the Worlds (Famous 1938 radio adaptation by Orson Welles) – Stream Wells, HG – The War of the Worlds (Read by Maxwell Caulfield) – Spotify Welty, Eudora – “The Wide Net” (read by the author) – YouTube Welty, Eudora – “Where Is the Voice Coming From?” (read by Joyce Carol Oates) – MP3 Welty, Eudora – “Why I Live at the P.O.” – YouTube Wharton, Edith – The Age of Innocence – Free iTunes Wharton, Edith – The Fulness of Life – Free MP3 – FREE from Audible.com Wilde, Oscar – The Happy Prince – Free MP3 Version read by Stephen Fry – YouTube Version read by Orson Welles and Bing Crosby – YouTube Wilde, Oscar – The Importance of Being Earnest (Performed by John Gielgud) – Free Wilde, Oscar – The Importance of Being Earnest – Free MP3 – FREE from Audible.com Free eBook available here. Wilde, Oscar – The Picture of Dorian Gray – Free iTunes – Free MP3s Free eBook available here. Wolff, Tobias – “Bullet in the Brain” (read by T. Coraghessan Boyle) (MP3) Wolff, Tobias – “The Night in Question” (read by Akhil Sharma) (MP3) Woolf, Virginia – “A Haunted House” – Free MP3 – Free iTunes Woolf, Virginia, – Jacob’s Room – MP3 Zip File Woolf, Virginia – “The Legacy” – Free MP3 – Free Stream Woolf, Virginia – “The Searchlight” – Free MP3 Woolf, Virginia – The Voyage Out – Free Stream Wyss, Johann David – The Swiss Family Robinson – Free MP3 Zip File – FREE from Audible.com &lt;&gt; Poetry Angelou, Maya – Phenomenal Woman – YouTube Angelou, Maya – Still I Rise &amp; On the Pulse of the Morning (read by author) – YouTube Anonymous – Beowulf – Free iTunes – Free MP3s – Reading by Seamus Heaney Free eBook available here. Apollinaire, Guillaume – Le pont Mirabeau (Read by author in 1913) – Free MP3 Apollinaire, Guillaume – Marie (Read by author in 1913) – Free MP3 Apollinaire, Guillaume – Le Voyageur (Read by author in 1913) – Free MP3 Arnold, Matthew – Dover Beach – Free Stream/Download Ashbery, John – Everyman – Free MP3 Ashbery, John – “Meditations of a Parrot,” “The Painter” and “The Picture of Little J.A. in a Prospect of Flowers” (read by the author)- Free Stream/MP3 Auden, W.H. – 1st September, 1939; As I Walked Out One Evening; “Song of the Master and Boatswain,” (read by Dylan Thomas) – YouTube Auden, W.H. – 1st September, 1939 – YouTube Auden, W.H. – As I Walked Out One Evening (read by Auden) – YouTube Auden, W.H. – Autumn Song – Free MP3 Auden, W.H. – Bucolics and Horae Cononicae (read by Auden) – Free Stream/Download Auden, W.H. – Doggerel by a Senior Citizen (read by Auden) – YouTube Auden, W. H. – In Memory of WB Yeats – YouTube Auden, W.H. – Metalogue to The Magic Flute (read by Auden – Free Stream/Download Auden, W.H. – The Sea and The Mirror (read by the author) – Free Stream/Download Baudelaire, Charles – Les fleurs du mal (in French) – Free Stream Beckett, Samuel – Tailpiece and 23rd Addenda (read by the author) – YouTube Blake, William – A Little Boy Lost – Free MP3 Blake, William – Jerusalem – Free MP3 Zip File Blake, William – Laughing Song – Free MP3 Blake, William – London – Free MP3 Blake, William – Preface to Milton – Free MP3 Blake, William – Piping Down Valleys Wild – Free MP3 Blake, William – Songs of Innocence and Songs of Experience, as read by Allen Ginsberg – Free Stream/MP3 Blake, William – The Chimney Sweeper – Free MP3 Blake, William – The School Boy – Free MP3 Blake, William – Visions of the Daughters of Albion – Free MP3 Borges, Jorge Luis – Art of Poetry/Arte Poétic – Free MP3 Borges, Jorge Luis – Plainness – Free Stream Bradbury, Ray – If Only We Had Taller Been (read by the author) – YouTube Bronte, Emily – Anticipation – Free MP3 Bronte, Emily – Encouragement – Free MP3 Bronte, Emily – Poems – Free MP3 Bukowski, Charles – At Terror Street and Agony Way – Free Audio Bukowski, Charles – Beer – Animated Video Bukowski, Charles – Bluebird – YouTube Audio Bukowski, Charles – Hostage – Spotify Bukowski, Charles – Master Collection – Spotify Bukowski, Charles – Something For The Touts, The Nuns, The Grocery Clerks, And You – YouTube Audio Bukowski, Charles – The Laughing Heart (read by Tom Waits) – YouTube Audio Bukowski, Charles – The Crunch and Roll The Dice (read by Bono) – YouTube Audio Bukowski, Charles – The Secret to My Endurance (read by the author) – YouTube Audio Burton, Tim – The Nightmare Before Christmas (read by Christopher Lee) – YouTube Video Byron – Childe Harold: Canto III – Free MP3 Byron – Darkness – Free MP3 Byron – Newton – Free MP3 Byron – She Walks in Beauty – Free MP3 Cage, John – Overpopulation and Art – Free Stream Carroll, Lewis – Jabberwocky (read by Neil Gaiman) – YouTube Cavafy, C.P. – Ithaca (read by Sean Connery) – YouTube Ciardi, John – As If: Poems New and Selected by John Ciardi (read by the author) – Spotify Cohen, Leonard – “For E.J.P” and “You Have the Lovers” (read by Cohen) – Free Stream/Download Coleridge, Samuel – Kubla Khan – Free MP3 Coleridge, Samuel – Kubla Khan (read by Benedict Cumberbatch) – YouTube Coleridge, Samuel – Rime of the Ancient Mariner – Free MP3 Find version read by Orson Welles Another version by Richard Burton Coleridge, Samuel – The Dungeon – Free MP3 Coleridge, Samuel – Poems (Read by Ralph Richardson) – Free Spotify Billy Collins – The Best Cigarette (Poetry collection read by the author) – Free Spotify Crane, Hart – “The Broken Tower” and “The Hurricane” (read by Tennessee Williams) – Vimeo Cummings, EE – Somewhere I Have Never Travelled – (read by author) – YouTube Cummings, EE – Anyone Lived in a Pretty How Town – (read by author) – YouTube DeTroyes, Chretien – Lancelot, or The Knight of the Cart- Stream Dickinson, Emily – The Poems of Emily Dickinson, Series 1 – Free iTunes – Free MP3 Dickinson, Emily – The Poems of Emily Dickinson, Series 2 – Free MP3 Dickinson, Emily – Poems &amp; Letters – Spotify Dickinson, Emily – Because I Could Not Stop for Death – Free MP3 Dickinson, Emily – Hope Is the Thing With Feathers – Free MP3 Dickinson, Emily – ‘I Started Early–Took My Dog’ – YouTube Donne, John – Death, Be Not Proud – Free Stream/MP3 Donne, John – The Good-morrow – Free Stream/MP3 Donne, John – The Sunne Rising – Free MP3 Ehrmann, Max – Desiderata (Read by Leonard Nimoy) – YouTube Eliot, T.S. – Four Quartets (Read by T.S. Eliot) – YouTube Eliot, T.S. – Four Quartets (Read by Alec Guinness) – YouTube Eliot, T.S. – Journey of the Magi – YouTube Eliot, T.S. – Old Possum’s Book of Practical Cats (Read by T.S. Eliot) – Spotify playlist Eliot, T.S. – The Love Song of J. Alfred Prufrock Listen to reading by TS Eliot – YouTube Listen to reading by Sir Anthony Hopkins – YouTube Eliot, T.S. – The Waste Land – Free MP3 Listen to reading by TS Eliot – YouTube Hear reading by Jeremy Irons and Eileen Atkins – Stream Eliot, T.S. – T.S. Eliot Reading Poems and Choruses – Spotify Ferlinghetti, Lawrence – Selections from A Coney Island of the Mind (read by author) – Free MP3 – Free Stream Ferlinghetti, Lawrence – Baseball Canto – Free MP3/Stream Ferlinghetti, Lawrence – Evil – Free MP3/Stream Ferlinghetti, Lawrence – Wilfred Funk (read by author) – Free MP3/Stream Frost, Robert – A Line Storm Song – Free MP3 Frost, Robert – My Butterfly – Free MP3 Frost, Robert – October – Free MP3 Frost, Robert – Stopping by Woods on a Snowy Evening (read by author) – YouTube Frost, Robert – The Gift Outright (read by author) – YouTube Frost, Robert – “The Road Not Taken,” “The Pasture,” “Mowing,” “Birches,” “After Apple-Picking,” and “The Tuft of Flowers” (read by the author) – Free Stream Frost, Robert – Robert Frost Reads His Poetry – Free Spotify Ginsberg, Allen – A Supermarket in California (read by Ginsberg) – Free MP3 Ginsberg, Allen – America (read by Ginsberg) – Free Stream Ginsberg, Allen – Howl, A Strange New Cottage in Berkeley, and Supermarket in California (read by Ginsberg) – Free MP3/Stream Ginsberg, Allen – Howl (read by Ginsberg, 1959) – YouTube – iTunes Ginsberg, Allen – Howl (first recorded reading of Howl by Ginsberg, 1956) – Free Stream – Free iTunes – Web Ginsberg, Allen – Howl (read by James Franco) – YouTube Ginsberg, Allen – Jahweh and Allah Battle – Free Stream Ginsberg, Allen – Kaddish and other works (read by Ginsberg) – Free Stream Ginsberg , Allen – Mind Breaths (read by Ginsberg) – Free Stream/Download Ginsberg, Allen – Sunflower Sutra (read by Ginsberg) – Free MP3 Ginsberg, Allen – The Lion for Real (read by Ginsberg) – Free on Spotify Ginsberg, Allen – “The Shrouded Stranger Of The Night,” “Sweet Levinsky,” and “Stanzas: Written at Night in Radio City.” – Free Stream/Download Ginsberg, Allen – “What would you do if you lost it?” (read by Ginsberg) – Free Stream/Download Hemingway, Ernest – Second Poem to Mary (read by Hemingway) – Free YouTube Henley, Ernest – Invictus – Free YouTube Hitchcock, Robyn – “If Death is Not the End” (Read by Alan Rickman) – Free Stream Homer, The Odyssey – Free Stream/MP3 Download – Free iTunes Hughes, Langston – Langston Hughes Reads Langston Hughes – Spotify Keats, John – To Autumn – Free MP3 Keats, John – Ode on a Grecian Urn – Free MP3 Keats, John – Ode to a Nightingale (as recited loosely by F. Scott Fitzgerald) – YouTube Keats, John – Ode to a Nightingale (as read by Benedict Cumberbatch) – Soundcloud Keats, John – On First Looking into Chapman’s Homer – Free MP3 Keats, John – When I Have Fears That I May Cease to Be – Free MP3 Kerouac, Jack – 4 Albums with Kerouac Reciting Poetry &amp; Verse – Spotify Kipling, Rudyard – If (read by Dennis Hopper) – YouTube Kipling, Rudyard – If (read by Michael Caine) – YouTube Kipling, Rudyard – My Boy Jack (read by Ralph Fiennes) – YouTube Kipling, Rudyard – The Gods of the Copybook Headings – Free MP3 Kipling, Rudyard – The Way Through the Woods – Free MP3 Longfellow, Henry Wadsworth – Selected Works – Free MP3 McCrae, John – “In Flanders Fields” (read by Leonard Cohen) – YouTube Melville, Herman – Ball’s Bluff – Free Stream Merwin, W.S. – After a Storm (read by author) – Free Stream/Download Milton, John – On His Blindness – Free MP3 Nabokov, Vladimir – The University Town (read by Ralph Fiennes) – Free Stream Neruda, Pablo – Birth (Read by Neruda) – Free Stream Neruda, Pablo – Keeping Quiet (Read by Sylvia Boorstein) – Free Stream Plath, Sylvia – Sylvia Plath reading her poetry (23 poems read by the author) – YouTube Plath, Sylvia – Ariel (read by author) – YouTube Stream Plath, Sylvia – A Birthday Present (read by the author) – Free MP3/Stream Plath, Sylvia – Daddy (read by author) – YouTube Plath, Sylvia – Fever 103 (read by the author) – YouTube Plath, Sylvia – Lady Lazarus (read by author) – YouTube Plath, Sylvia – The Applicant (read by the author) – YouTube Poe, Edgar Allan – Annabel Lee – Free MP3 Poe, Edgar Allan – The Raven (read by Christopher Walken) – YouTube Poe, Edgar Allan – The Raven – Free MP3 Pope, Alexander – Nature and Art – Free Stream Pope, Alexander – The Quiet Life – Free Stream Pound, Ezra – Cantico del sole – Free MP3 [text] Pound, Ezra – Canto XVII (“So that the vine burst from my fingers’) – Free MP3 Pound, Ezra – Canto XXX – Free MP3 Pound, Ezra – Canto XLV – Free MP3 Pound, Ezra – Canto LVI – Free MP3 Pound, Ezra – Homage to Sextus Propertius, Section VI (read by author) – Free MP3 Pound, Ezra – Sestina: Altaforte (read by author) – YouTube Pound, Ezra – The Seafarer (read by author) – Free MP3 Rexroth, Kenneth – “One Hundred Poems from the Chinese” and “In Defense of the Earth” (read by the author) – Free Stream Rich, Adrienne – Mourning Poem, Spring Thunder, White Night and other poems (read by author) – Free Stream/Download Rimbaud, Arthur – Illuminations – Free MP3 Zip File Rumi – Poems read by Tilda Swinton, Madonna, Robert Bly &amp; Coleman Barks – YouTube/Soundcloud Sandburg, Carl – Chicago – Free Stream Sexton, Anne – Waiting to Die (read by author) – YouTube Sexton, Anne – “Her Kind,” “The Ambition Bird,” “Ringing the Bells,” “Music Swims Back to Me,” and “The Truth the Dead Know” (read by the author) – Free Stream Sexton, Anne – “With Mercy for the Greedy,” “The Starry Night,” “Letter Written on a Ferry While Crossing Long Island Sound,” and “Self in 1958,” (read by the author) – Free Stream Sexton, Anne – Divorce, Thy Name is Woman,” “Gods Making a Living,” “Jesus Cooks,” “Jesus Walking,” and “The Fury of Overshoes” (read by the author) – Free Stream Sexton, Anne – “Rowing,” “Riding the Elevator Into the Sky,” “The Play,” “The Rowing Endeth,” “Us,” and “The Touch” (read by the author) – Free Stream Shakespeare, William – Shakespeare’s Sonnets – Free MP3s Shelley, Percy Bysshe – Adonais – Free MP3 Shelley, Percy Bysshe – Ozymandias of Egypt – Free MP3 Shelley, Percy Bysshe – Ozymandias (read by Bryan Cranston) – Free YouTube Shelley, Percy Bysshe – Various Poems (read by Vincent Price) – Free Spotify Stein, Gertrude – A Valentine to Sherwood Anderson (read by Gertrude Stein) – Free MP3 Stevens, Wallace – “Credences of Summer” and “An Ordinary Evening in New Haven” (read by the author) – Free Stream/Download Stevens, Wallace – “The Idea of Order at Key West,” “The Poem that Took the Place of a Mountain,” and “Vacancy in the Park” (read by the author) – .au format – .gsm format –.ra format Stevens, Wallace – To an Old Philosopher in Rome (read by the author) – Free MP3 Tennyson, Alfred Lord – Break, Break, Break – Free MP3 Tennyson, Alfred Lord – The Charge of the Light Brigade – Free MP3/Stream – Quicktime – RealPlayer Tennyson, Alfred Lord – The Lotos-Eaters – Free MP3 Thomas, Dylan – Dylan Thomas Reads 8 Hours of His Poetry – Spotify Thomas, Dylan – Richard Burton Reads 15 Poems by Dylan Thomas – Spotify Thomas, Dylan – Ballad of the Long-Legged Bait’ and 14 Other Poems (read by Richard Burton) – YouTube Thomas, Dylan – Do Not Go Gentle Into That Good Night (read by the author) – Free MP3/Stream Thomas, Dylan – Do Not Go Gentle Into That Good Night (read by the Sir Anthony Hopkins) – Free YouTube Thomas, Dylan – The Wild West (read by the author) – Free MP3/Stream Thomas, Dylan – Under Milk Wood (read by the author) – Free MP3/Stream Updike, John – Rainbow (read by author) – Free Stream Virgil – Aeneid – Free MP3 Zip Download Whitman, Walt – O Captain! My Captain! – Free MP3 Whitman, Walt – Leaves of Grass – Free MP3 Zip File – Free Stream Whitman, Walt – Song of Myself and Other Poems – Free Stream/MP3 Whitman, Walt – Song of Myself (read by James Earl Jones) – Free Stream/Download Whitman, Walt – Song of Myself (read by James Earl Jones) – Free Stream Whitman, Walt – Song of Myself (read by Orson Welles) – Free Stream Whitman, Walt – Song of Myself (read by Eric Forsythe/U. of Iowa) – Free Stream Wilbur, Richard – A Storm in April, The Ride, Shad-Time, Advice From the Muse and Other Poems (read by author) – Free Stream/Download Wilde, Oscar – The Ballad of Reading Gaol – Free MP3/Stream Williams, Tennessee – Selected Poems – Free Stream/Download Williams, Willam Carlos – Selected Poems (read by poet 1954 ) – Free MP3 Williams, William Carlos – 39 Poems Read for The Library of Congress Recording Laboratory. May 5, 1945 – Free MP3 Williams, William Carlos – The Red Wheelbarrow, Tract, The Defective Record, To a Poor Old Woman, A Coronal, To Elsie, The Wind Increases, Classic Scene (read by poet 1954) – Free Wordsworth, William – Daffodils (Read by Jeremy Irons) – YouTube Wordsworth, William – The Last of the Flock – Free MP3 Wordsworth, William – Solitary Reaper – Free MP3 Wordsworth, William – Tintern Abbey – Free MP3 Yeats, William Butler – The Lake Isle of Innisfree, The Fiddler of Dooney, The Song of the Old Mother, Coole and Ballylee (read by the author) – YouTube Yeats, William Butler – Aedh Wishes for the Cloths of Heaven – Free MP3 Yeats, William Butler – Byzantium – Real Media Yeats, William Butler – Lake Isle of Innesfree (read by the author) – Free MP3 Yeats, William Butler – Sailing to Byzantium – Free MP3 Yeats, William Butler – The Cold Heaven – Free Stream/MP3 Yeats, William Butler – The Fiddler of Dooney (read by the author) – Free MP3 Yeats, William Butler – The Song of the Old Mother (read by the author) – Free MP3 Yeats, William Butler – When You Are Old – Free MP3 Non-Fiction Amis, Martin – “Phantom of the Opera“ Aristotle – Poetics (MP3 download) Aristotle – Politics (MP3 download full zip file) Aristotle – Physics Augustine, Saint – City of God (full zip file) Beard, Charles – History of the United States, Volume 1 (full zip file) Beard, Charles – History of the United States, Volume 2(full zip file) Beard, Charles – History of the United States, Volume 3 (full zip file) Beard, Charles – History of the United States, Volume 4 (full zip file) Berkeley, George – A Defence of Free-Thinking in Mathematics (Free MP3) Burke, Edmund – A Philosophical Enquiry (Full zip file) Burke, Edmund – Reflections on the Revolution in France (Full zip file) Camus, Albert – Nobel Prize Acceptance Speech, 1957 (YouTube) Camus, Albert – The Human Crisis (Read by Actor Viggo Mortensen) – Facebook Video Carroll, Lewis – Symbolic Logic (Free MP3) Carroll, Lewis – The Game of Logic (Free MP3) Channing, Edward – A Short History of the United States (full zip file) Confucius – The Sayings of Confucius (MP3 full zip file download) Darwin, Charles – On the Origin of Species by Means of Natural Selection (MP3 download full zip file) Free eBook available here. Descartes, Rene – Discourse on Method (MP3 download) Descartes, Rene – Meditations on First Philosophy (full zip file) Dickens, Charles – A Child’s History of England (full zip file) Doctorow, Cory – Content: Selected Essays on Technology, Creativity, Copyright and the Future of the Future (Streamed) Douglass, Frederick – A Speech to the People of Rochester, New York on the Hypocrisy of Slavery (MP3 download) Dubois, W.E.B. – The Soul of Black Folks (iTunes) Emerson, Ralph Waldo – History (MP3 download) Einhard, The Life of Charlemagne (full zip file) Einstein, Albert – Relativity (MP3 download full zip file) Emerson, Ralph Waldo – Collected Essays of Ralph Waldo Emerson (iTunes) Faulkner, William – Nobel Prize Acceptance Speech, 1954 (Soundcloud) Foster Wallace, David – This is Water, 2005 Kenyon Commencement Speech (YouTube) Freud, Sigmund – Dream Psychology – MP3 Zip File Download – Free Stream Freud, Sigmund – A General Introduction to Psychoanalysis – MP3 Zip File Download – Free Stream Freud, Sigmund – The Interpretation of Dreams – MP3 Zip File Download – Free Stream Freud, Sigmund – Psychopathology of Everyday Life – MP3 Zip File Download – Free Stream Freud, Sigmund – Reflections on War and Death – MP3 Zip File Download – Free Stream Freud, Sigmund – Totem and Taboo – MP3 Zip File Download – Free Stream Garcia Marquez, Gabriel – “The Solitude of Latin America” (Nobel Prize Speech) (YouTube) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 1. (Librivox collection of MP3’s) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 2. (Librivox collection of MP3’s) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 3. (Librivox collection of MP3’s) Gibbon, Edward – The Decline and Fall of the Roman Empire Vol 4. (Librivox collection of MP3’s) Goethe – Theory of Colors (MP3s) Grant, Ulysses S. – The Personal Memoirs of Ulysses S. Grant (Various formats) Harding, Samuel – The Story of the Middle Ages (iTunes) Henry, Patrick – Give Me Liberty or Give Me Death (MP3 download) Henry, Patrick – Speech Addressing the Virginia House of Burgesses; Richmond, Virginia; March 23, 1775 (MP3 download) Holmes, Oliver Wendell – The Fountain of Youth (mp3 download) Huxley, Aldous – Speaking Personally – (Spotify) Huxley, Aldous – The Visionary Experience – (MP3 stream) James, William – The Moral Equivalent of War (mp3 download) Jefferson, Thomas – The Declaration of Independence (mp3 download) Jobs, Steve – Stanford Graduations Speech, 2005 (YouTube) Kandinsky, Wassily – Concerning the Spiritual in Art (mp3 download) Kaufmann, Walter – Lectures on Nietzsche, Kierkegaard and Sartre (1960) Lessig, Lawrence – Free Culture (alternate version here) Lincoln, Abraham – Gettysburg Address (mp3 download) Also see version read by Johnny Cash (YouTube) Macauley, Thomas – History of England (Librivox) Machiavelli, The Prince (mp3 download) Marx, Karl – The Communist Manifesto (full zip download) Mill, John Stuart – Utilitarianism (mp3 download full zip file) Morrison, Toni – Nobel Prize Acceptance Speech, 1993 (YouTube) Nietzsche, Friedrich – Ecce Homo (full zip file) Nietzsche, Friedrich – Beyond Good and Evil (mp3 download) Nietzsche, Friedrich – Thus Spoke Zarathustra (full mp3 download) Nietzsche, Friedrich – Twilight of the Idols (full zip) Paine, Thomas – Common Sense (mp3 download) Plato – The Apology of Socrates (stream/download) Plato – The Republic (iTunes) + Free Stream/MP3 Roosevelt, Theodore – Spanish-American War: The Rough Riders in Tampa (mp3 download) Rousseau, Jean-Jacques – A Discourse Upon the Origin and the Foundation of the Inequality Among Mankind (full zip file) Russell, Bertrand – ABC of Relativity: Understanding Einstein (read by Derek Jacobi) Russell, Bertrand – Why I Am Not a Christian (read by Terrence Hardiman) Sedaris, David – Santaland Diaries (read by David Sedaris) Smith, Adam – A Wealth of Nations Book 1 and Books 2 &amp; 3 (full zip download) Steinbeck, John – Nobel Prize Acceptance Speech, 1962 (YouTube) Strathern, Paul – Nietzsche in 90 Minutes (YouTube Stream) Sun-tzu – The Art of War (mp3 download) Thoreau, Henry David – Walden (mp3 download) Thucydides, The History of the Peloponnesian War (mp3 download) Tocqueville, Alexis de – Democracy in America Part 1 and Part 2 (full zip download) Various – The Federalist Papers Rss Feed Various – The US Constitution Stream Voltaire – Candide (mp3 download) Wittgenstein, Ludwig – Tractatus Logico-Philosophicus &lt;&gt; Audio Book Podcast Sites Librivox iTunesFeedWeb Site Librivox should be your first stop when looking for audio books. It’s the biggest and best collection. Then there are the others. Audiobooks with Annie iTunesFeedWeb Site Audio Literature Odyssey iTunesFeedWeb Site A collection of classics. Henry James, Edgar Allan Poe, Emily Dickinson, etc. Classic Poetry Aloud iTunesFeedWeb Site These poetry podcasts provide readings of the great poems of the past. Classic Tales Podcast iTunesFeedWeb Site The whole point is to make unabridged classics not only available, but approachable. Crimewav.com iTunesFeedWeb Site Podcasts that bring quality crime stories to an audience worldwide. Produced by crime writer Seth Harwood. Escapepod iTunesFeedWeb Site Collections of well-reviewed audio short stories. Great Books – A Chapter a Day iTunesWeb Site Great Speeches in History iTunesFeedWeb Site JC Hutchins iTunes Feed Web Site The author of the 7th Son Trilogy has made available more than 200 hours of audio and video stories and interviews, all of which are available for free download. Kara’s Free AudioBooks iTunesFeedWeb Site Learn OutLoud.com Founding Documents of America iTunesFeedWeb Site Great Speeches in History iTunesFeedWeb Site Philosophy Readings iTunesFeedWeb Site Haverford College – Classic/Ancient Text Read Aloud iTunesWeb Site (see site for feeds) Internet Archive Listen to free audio books and poetry recordings courtesy of the Internet Archive. Lawrence Lessig’s Free Culture Lit2Go iTunesWeb Site An extensive collection of free audiobooks provided by the University of Southern Florida. Litterature Audio Over 700 free audio books in French. Here are the most downloaded books. Naropa Poetics Audio Archives Hosts audio recordings of the Beats — Kerouac, Burroughs, Ginsberg and more. The Penguin Podcast Excerpts read from books newly published by Penguin UK. Podiobooks Provides podcasts of largely sci-fi books that we’ve never heard of before. But, you never know. Podlit Classic Literature iTunesWeb Site A new classic short story each week. Pseudopod iTunesFeedWeb Site The world’s first audio horror magazine Radioboeken iTunesFeedWeb Site “Radiobooks” are just like books, but they will never be printed. They are created by important Dutch and Flemish writers, and will be available in French, English and Spanish versions in 2007. Scott Sigler’s Audiobooks iTunes – Feed – Web Site Very well reviewed sci-fi horror works Stories to Go iTunesFeedWeb Site Stranger Things iTunesFeedWeb Site This high-quality video podcast features stories of ordinary people stumbling into strange worlds (a la The Twilight Zone). The Classic Tales Podcast iTunesFeedWeb Site The Classic Tales Podcast makes unabridged classics not only available, but approachable. Includes professional performances. The Public Domain Podcast iTunesFeedWeb Site The Time Traveler iTunesFeedWeb Site Explores vintage American fiction. Orson Welles, Philip K. Dick, etc. The Twilight Series Get information here. Utopod iTunes – Feed A free French-language podcast, created by Lucas Moreno and and Marc Tiefenauer, that offers readings of fantasy and sci fi stories written by noted authors across the Francophone world. Well Told Tales iTunesFeedWeb Site Pulp fiction audio tales….!!! 53.8k SHARES FacebookTwitterGoogle RedditMailTumblrStumbleuponDiggPinterestPrintLinkedinWhatsappDeliciousBufferPocket Essentials 1,150 Free Online Courses 1000+ MOOCs 725 Free Movies 700 Free Audio Books 800 Free eBooks 200 Free Textbooks 300 Free Language Lessons 150 Free Business Courses Free K-12 Education Get Our Daily Email Free Courses Astronomy Biology Business Chemistry Classics/Ancient World Computer Science Economics Engineering Environment History Literature Math Philosophy Physics Political Science Psychology Religion All 1150 Free Courses 1000+ MOOCs &amp; Certificate Courses Free Movies 725 Free Movies Online Free Film Noir Silent Films Documentaries Martial Arts/Kung Fu Animations Free Hitchcock Films Free Charlie Chaplin Free John Wayne Movies Free Tarkovsky Films Free Dziga Vertov Free Oscar Winners Free Language Lessons Arabic Chinese English French German Italian Russian Spanish All Languages Free eBooks 700 Free eBooks Free Philosophy eBooks The Harvard Classics Philip K. Dick Stories Neil Gaiman Stories David Foster Wallace Stories &amp; Essays Hemingway Stories Great Gatsby &amp; Other Fitzgerald Novels HP Lovecraft Edgar Allan Poe Free Alice Munro Stories Jennifer Egan Stories George Saunders Stories Hunter S. Thompson Essays Joan Didion Essays Gabriel Garcia Marquez Stories David Sedaris Stories Stephen King Chomsky Golden Age Comics Free Books by UC Press Life Changing Books Free Audio Books 700 Free Audio Books Free Audio Books: Fiction Free Audio Books: Poetry Free Audio Books: Non-Fiction Free Textbooks 200 Free Textbooks Free Physics Textbooks Free Computer Science Textbooks Free Math Textbooks K-12 Resources Free Books Free Video Lessons Web Resources by Subject Free Language Lessons Quality YouTube Channels Teacher Resources Test Prep All Free Kids Resources Free Art &amp; Images All Art Images &amp; Books The Met The Getty The Rijksmuseum Smithsonian The Guggenheim The Tate The National Gallery The Whitney LA County Museum Stanford University British Library Google Art Project French Revolution Getty Images Guggenheim Art Books Met Art Books Getty Art Books New York Public Library Maps Museum of New Zealand Street Art Smarthistory Rembrandt Van Gogh Coloring Books Free Music All Bach Organ Works All of Bach 80,000 Classical Music Scores Free Classical Music Live Classical Music 9,000 Grateful Dead Concerts Alan Lomax Blues &amp; Folk Archive Writing Tips Hemingway Fitzgerald Stephen King Ray Bradbury William Zinsser Kurt Vonnegut Toni Morrison Edgar Allan Poe Margaret Atwood David Ogilvy Steinbeck Billy Wilder Archive All posts by date Categories Amazon Kindle Animation Apple Architecture Archives Art Astronomy Audio Books Beat &amp; Tweets Biology Books Business Comedy Comics/Cartoons Computer Science Creativity Current Affairs Dance Deals Design e-books Economics Education English Language Environment Film Food &amp; Drink Games Google Graduation Speech Harvard Health History How to Learn for Free iPad iPhone Jazz K-12 Language Lessons Law Letters Life Literature Magazines Maps Math Media MIT MOOCs Most Popular Museums Music Neuroscience Online Courses Opera Philosophy Photography Physics Podcast Articles and Resources Poetry Politics Psychology Radio Random Religion Sci Fi Science Software Sports Stanford Technology TED Talks Television Theatre Travel Twitter UC Berkeley Uncategorized Video – Arts &amp; Culture Video – Politics/Society Video – Science Video Games Web/Tech Wikipedia Writing Yale YouTube Subscribe Get updates as soon as they go live, via RSS feed, email and now Twitter! Follow on Twitter Get the latest from our Twitter Stream. Facebook Why can't we be friends? Suggest a Link Got a link we should post? Send it our way! About Us Open Culture editor Dan Colman scours the web for the best educational media. He finds the free courses and audio books you need, the language lessons &amp; movies you want, and plenty of enlightenment in between. About Us Contact Us Dan Colman’s Bio Privacy Policy Advertise with Us Great Lectures Michel Foucault Sun Ra at UC Berkeley Richard Feynman Joseph Campbell Carl Sagan Margaret Atwood Jorge Luis Borges Leonard Bernstein Alan Watts Richard Dawkins Buckminster Fuller Walter Kaufmann on Existentialism Jacques Lacan Roland Barthes Nobel Lectures by Writers Toni Morrison Bertrand Russell Oxford Philosophy Lectures Great Recordings T.S. Eliot Reads Waste Land Sylvia Plath - Ariel Joyce Reads Ulysses Joyce - Finnegans Wake Patti Smith Reads Virginia Woolf Albert Einstein Charles Bukowski Bill Murray Hemingway Fitzgerald Reads Shakespeare William Faulkner Flannery O'Connor Tolkien - The Hobbit Allen Ginsberg - Howl W.B Yeats Ezra Pound Dylan Thomas Anne Sexton John Cheever David Foster Wallace Book Lists By Neil deGrasse Tyson Ernest Hemingway F. Scott Fitzgerald Allen Ginsberg Patti Smith Brian Eno Henry Miller Christopher Hitchens Joseph Brodsky W.H. Auden Donald Barthelme Carl Sagan David Bowie Samuel Beckett Art Garfunkel Marilyn Monroe Jorge Luis Borges Picks by Female Creatives Syllabi WH Auden David Foster Wallace Donald Barthelme Allen Ginsberg Zadie Smith &amp; Gary Shteyngart Spike Lee Lynda Barry Junot Diaz Favorite Movies Kubrick Kurosawa's 100 Tarantino Scorsese Tarkovsky David Lynch Werner Herzog Woody Allen Wes Anderson Luis Buñuel Roger Ebert Susan Sontag Scorsese Foreign Films Philosophy Films Archives June 2016 May 2016 April 2016 March 2016 February 2016 January 2016 December 2015 November 2015 October 2015 September 2015 August 2015 July 2015 June 2015 May 2015 April 2015 March 2015 February 2015 January 2015 December 2014 November 2014 October 2014 September 2014 August 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 April 2013 March 2013 February 2013 January 2013 December 2012 November 2012 October 2012 September 2012 August 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 December 2011 November 2011 October 2011 September 2011 August 2011 July 2011 June 2011 May 2011 April 2011 March 2011 February 2011 January 2011 December 2010 November 2010 October 2010 September 2010 August 2010 July 2010 June 2010 May 2010 April 2010 March 2010 February 2010 January 2010 December 2009 November 2009 October 2009 September 2009 August 2009 July 2009 June 2009 May 2009 April 2009 March 2009 February 2009 January 2009 December 2008 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 March 2008 February 2008 January 2008 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 May 2007 April 2007 March 2007 February 2007 January 2007 December 2006 November 2006 October 2006 September 2006 openculture logo ©2006-2016 Open Culture, LLC. All rights reserved. About Us | Advertise with Us | Copyright Policy | Privacy Policy | Terms of Use | RSS Feed | Bio | Switch to Mobile View Close Do you want more open culture? if you like our Facebook fanpage, you'll receive more articles like the one you just read! Do you already like us on Facebook? Do not ask me again for Facebook Continue to the article » Quantcast Download Free Audiobook Try Audible with a Free Audiobook. Listen on iPhone, Android or Tablet audible.com Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d You May Also Like 1.Free Audio Books 2.Download Audio Books 3.Top 10 Audio Books 4.Download eBooks for Free 5.Free Online Education "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620155427#index"
                   NS1:content=" SW startup guide for Vayu 3G From Yantrr Wiki Jump to: navigation, search For a quick guide to starting with the Vayu 3G cape's HW, see Leaflet for 3G cape. Below, we describe how to set up the 3G capes and the associated software. Contents 1 Overview 2 Hardware Configurations 3 Getting started 3.1 Seting up the system 3.2 Power On Modem 3.3 Understanding the TTYUSB ports on BBB capes 3.4 Power Off Modem 3.5 Soft Resetting the Modem 3.6 Hard resetting the modem 3.7 VAYU 3GHx-D(ZTE Modem) 3.8 AT Commands Manual 3.9 FAQ 4 Data connection procedure using PPP 4.1 Wvdial Configuration for Debian Wheezy 4.1.1 System Status 4.1.2 FAQ 4.1.3 Adding a DNS 5 Using GPS module with Debian Wheezy 6 FAQ 6.1 FAQ 1: Modem / TTYUSB of modem not detected Overview Data connection is established based on PPP protocols. Wvdial is mainly used to configure the dialup settings. For setting up various settings for PPP connection and establishing a data connection on these capes follow the link to the wiki Way to setup the Vayu 2G Capes How to read location and coarse time as NMEA-0183 message from the serial UART ttyO4 port How to write wvdial conf files for any network Sample wvdial.conf file for AT&amp;T and T-Mobile USA For using the Vayu-3G-A/Vayu-3GP-A Cape, please ensure that you have the following : USB drivers for the modem (21f5:2012) installed in kernel PPS drivers enabled in kernel, required if GPS module is present. VAYU Device tree overlay file is properly configured. You can either download kernel patches containing the same to use with your existing images or you can download our prebuilt MicroSD card image or EMMC flasher image. All the images and files and extra support on software can be found here: Vayu_Cape_SW_images_and_drivers Note : On most beaglebones, there is a known bug with USB hotplug for using USB HUB with Beaglebone black host port. So to efficiently be able to use the modem, follow the Power on Modem section properly. An alternative easier approach is to keep the second host port on cape populated with a usb device. Hardware Configurations The 3G/WCDMA modem has following interfaces available on the Cape: Leaflet_3G modem Mini USB B Device port on Cape (P9): It has to be connected to USB host port on Beaglebone Black. SMA connector for GSM/WCDMA antenna(P7): Antenna is connected here. LED D2 (5V Power LED of Cape) : This LED indicates that the Cape is powered on with 5V and GSM/WCDMA modem is also powered. LED D4 (SIGNAL LED) : This LED is the SIGNAL LED for the GSM/WCDMA modem whose various blinking states denote the different states of the WCDMA Modem. GPIO45 (ON/OFF PIN) : It is the GPIO connected to Power ON/OFF pin of GSM/WCDMA Modem. GPIO60 (Hard Reset Pin) : It is the GPIO connected to Reset pin of GSM/WCDMA Modem. S1 (ON/OFF switch) : This push button switch is connected to Power ON/OFF pin of GSM/WCDMA modem. S2 (RESET switch) : This push button switch is connected to Hard Reset pin of GSM/WCDMA modem. GPIO45 and GPIO60 should be set high at all instances for the GSM/WCDMA modem to be available for use. USB drivers for the modem (21f5:2012, 21f5:2009) should be included in the kernel. We provide pre-compiled images with USB drivers included in the kernel. Getting started Seting up the system Sim Card and Antennae 1. Place a mini sim in the sim card slot and connect a GSM antenna to the SMA connector. 2. Mount the cape on BBB carefully. 3. Connect the extra usb cable provided with the cape between Host port on Beaglebone Black and miniUSB device port on Cape. 4. To avoid the bug on Beaglebone black with external USB hubs, please connect a USB device (pendrive etc) to extra host port on the cape. 5. Ensuring that the power jumper on the cape is in its place, power up the setup using a 5V DC adapter(min 2.5A) to barrel jack. D2 LED on the cape will glow alongwith LEDs on the Beaglebone black. Note : Before proceeding further ensure D2 LED is glowing properly. Make sure that the adapter being used is of proper rating and has been connected properly. Further check for the presence of the power jumper(#12 on leaflet). Note : Do not try to power up using USB cable alone. Always power up system with a DC adapter. Also while disconnecting power, USB cable should be removed before the DC adapter. Hardware setup Check.jpg Usb.jpg Final.jpg USB ports and power jumper on the cape USB connections on cape and beaglebone black Final setup before login Ways to log into the cape After establishing that the power on the cape is proper, log in to the BBB plus cape setup using any of the following method : 1. Through USB client. 2. Through Ethernet cable. Now login by using the SSH command. Make sure to login as root only so that all the special priviledges are available. 1. Through USB client. Use the command : ssh -l root 192.168.7.2 to login onto the system. Default password is root. 2. Through ethernet cable. The ip address of the ethernet cable should be known. Use that with the ssh command to esatblish a connection : ssh -l root $address Default Username and password is root. In Yantrr Precompiled images, IP address is 192.168.1.150 After logging into the BBB plus cape system, export and set the GPIO45 and GPIO60 high by using: cd /sys/class/gpio/ echo 45 &gt; export echo 60 &gt; export cd gpio45 echo “high” &gt; direction cd .. cd gpio60 echo “high” &gt; direction NOTE : In precompiled image, for ease of use these regular commands for use with the GPIOs have been created as functions : pinexp, setout, setin, pinread. pinexp 45 pinexp 60 setout 45 high setout 60 high Power On Modem The Modem can be powered on by providing a low level pulse at ON/OFF Pin for 3-4s when the module is off. It can be achieved by either using the push button switch S1 or GPIO45. cd /sys/class/gpio/ echo 45 &gt; export cd gpio45 echo &quot;high&quot; &gt; direction sleep 4 echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction After some time, LED D4 should start blinking as to indicate modem has turned on. (Note : In some of 3G modules LED functionality is not enabled by the manufacturer, so the LED D4 might not blink) Note : In cases where a usb device was not connected to extra host port on cape, please connect the provided USB cable after turning on the modem. Check that modem is visible on the USB bus by: lsusb Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 034: ID 21f5:2012 Bus 001 Device 007: ID 046d:0825 Logitech, Inc. Webcam C270 Assigning driver on the USB modem (Not needed if using pre-built images) modprobe usbserial vendor=0x21f5 product=0x2012 lsusb Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 034: ID 21f5:2012 Bus 001 Device 007: ID 046d:0825 Logitech, Inc. Webcam C270 System messages (logs) show what happened when modem was turned on and its drivers were assigned after applying modprobe usbserial. For pre-compiled image, log messages are similar. dmesg | grep -i usb usb 1-1.1: New USB device found, idVendor=21f5, idProduct=2012 usb 1-1.1: New USB device strings: Mfr=3, Product=2, SerialNumber=4 usb 1-1.1: Product: StrongRising Technologies usb 1-1.1: Manufacturer: Modem usb 1-1.1: SerialNumber: 000000000002 usb 1-1.1: usb_probe_device usb 1-1.1: configuration #1 chosen from 1 choice usb 1-1.1: adding 1-1.1:1.0 (config #1, interface 0) usbserial_generic 1-1.1:1.0: usb_probe_interface usbserial_generic 1-1.1:1.0: usb_probe_interface - got id usbserial_generic 1-1.1:1.0: The &quot;generic&quot; usb-serial driver is only for testing and one-off prototypes. usbserial_generic 1-1.1:1.0: Tell linux-usb@vger.kernel.org to add your device to a proper driver. usbserial_generic 1-1.1:1.0: generic converter detected usb 1-1.1: generic converter now attached to ttyUSB0 usb 1-1.1: adding 1-1.1:1.1 (config #1, interface 1) usbserial_generic 1-1.1:1.1: usb_probe_interface usbserial_generic 1-1.1:1.1: usb_probe_interface - got id usbserial_generic 1-1.1:1.1: The &quot;generic&quot; usb-serial driver is only for testing and one-off prototypes. usbserial_generic 1-1.1:1.1: Tell linux-usb@vger.kernel.org to add your device to a proper driver. usbserial_generic 1-1.1:1.1: generic converter detected usb 1-1.1: g'''eneric converter now attached to ttyUSB1''' usb 1-1.1: adding 1-1.1:1.2 (config #1, interface 2) usbserial_generic 1-1.1:1.2: usb_probe_interface usbserial_generic 1-1.1:1.2: usb_probe_interface - got id usbserial_generic 1-1.1:1.2: The &quot;generic&quot; usb-serial driver is only for testing and one-off prototypes. usbserial_generic 1-1.1:1.2: Tell linux-usb@vger.kernel.org to add your device to a proper driver. usbserial_generic 1-1.1:1.2: generic converter detected usb 1-1.1: '''generic converter now attached to ttyUSB2''' It is recommended to add a proper driver for the modem in kernel. The generic driver is not reliable. Note : If the modem is not visible after these steps or any issues are faced while initializing the modem please contact Yantrr Support (support@yantrr.com) with the above log messages (dmesg | grep –I usb or /var/log/syslog). Understanding the TTYUSB ports on BBB capes Vayu 3G cape enumerate 3 different usb ports /dev/ttyUSB0 /dev/ttyUSB1 /dev/ttyUSB2 ttyUSB0 is data port &amp; command for modem, use this for the WVDIAL conf or PPP ttyUSB1 is the diag port for the Firmware upgrade ttyUSB2 is the AT CMD port only. Note : These ttyUSB ports are only created if proper drivers are present or when “modprobe usbserial” command is issued. Pre compiled images with drivers are available on the Yantrr wiki page. Note : Both ttyUSB0 and ttyUSB2 take the AT commands, but ttyUSB0 port is also a Data communications port so for all intended purposes of issuing AT commands use ttyUSB2 port(PCUI port). Power Off Modem The modem can be powered off by providing a low level pulse at ON/OFF pin for 3-4s when the module is On. It can be achieved by either using the push button switch S1 or GPIO45. cd /sys/class/gpio/ echo 45 &gt; export cd gpio45 echo &quot;high&quot; &gt; direction sleep 4 echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction Modem can also be turned off by issuing following AT commands on port /dev/ttyUSB2 AT+ZPWROFF Soft Resetting the Modem Steps - Power Off the Modem. Wait for 1-2s atleast. Power on the modem. Hard resetting the modem There might arise situations where modem does not seem to be responding to any commands issued on AT commands port or it cannot be turned on/off. In such scenarios, issue hard reset to the modem. It can be done by either toggling Switch S2 for atleast 100ms or pulling GPIO60 low for 1s and then setting it high again. cd /sys/class/gpio/ cd gpio60 echo &quot;low&quot; &gt; direction sleep 1 echo &quot;high&quot; &gt; direction Note : Please use hard reset conservatively. Soft reset should be preferred under most conditions. VAYU 3GHx-D(ZTE Modem) VAYU 3GHx-D capes have ZTE MG3732 modem. Their functionality is essentially the same with some minor changes. For more information on ZTE MG3732 modem and a quick reference guide click here AT Commands Manual The AT Command for the 3G Module can be downloaded from here : WCDMA AT Commands Manual FAQ FAQ for this section click here Data connection procedure using PPP Notes All commands are recommended to executed as root user. USB drivers need to be installed in the kernel for the WCDMA modem to work. Modem port for Vayu cape is ttyUSB0, use this port for PPPd or Wvdial AT Commands port for Vayu cape is ttyUSB2 Wvdial Configuration for Debian Wheezy Download and install Wvdial apt-get install wvdial Executing the following command usually sets the wvdial.conf file which is used for dialing to GPRS communication, but since here our modem port is on a UART(/dev/ttyO1) and not on /dev/ttyS* or /dev/ttyUSB* ports, we will have to manually configure it. So, open the wvdial.conf file $ nano /etc/wvdial.conf Assuming that you have the USERNAME, PASSWORD and APN available for the service provider of the sim card being used, edit and make wvdial.conf file like this. Sample wvdial.conf file for AT&amp;T and T-Mobile USA [Dialer Defaults] Modem Type = Analog ModemPhone = *99# ISDN = 0 Baud = 115200 Username = USERNAME Password = PASSWORD Modem = /dev/ttyUSB0 Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Init3 = at+cgdcont=1,&quot;ip&quot;,&quot;APN&quot; Stupid Mode = 1 Usually for GSM Networks, Modemphone is *99# or *99***1#. Consult your network provider for exact details in case you are facing difficulties. After editing, save and exit, now run wvdial for establishing communication. $ wvdial If all parameters are correct and everything is working, you should see a success message from wvdial. Once PPP connection has been established, you will see a ppp0 IP. To check the status of wvdial and find out its IP open a new shell and use either of following: Run ifconfig and find ppp0 in the list of network connections. $ ifconfig or $ ifconfig ppp0 Check the network statistics for IP and their gateways and check the Iface column for ppp0 $ netstat -arn * Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface 0.0.0.0 192.168.1.1 0.0.0.0 UG 0 0 0 eth0 192.168.1.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0 192.168.7.0 0.0.0.0 255.255.255.252 U 0 0 0 usb0 192.200.1.21 0.0.0.0 255.255.255.255 UH 0 0 0 ppp0 Read the system messages as $ cat /var/log/messages It lists all the attempts at establishing ppp communication using the modem and IPs for the successful attempt. Now all that is left is to route the network traffic over the gateway of ppp0 instead of eth0 so that GPRS communication is fully completed. PPP connection has been established over GPRS using 2G/3G module and wvdial. System Status After PPP has been established, the following is the status of the LEDs and GPIOs (For verification) STATUS LED D3 – It is continuously glowing, once the Modem was turned on. SIGNAL LED D4 – It is now blinking at 64ms ON/300ms OFF . Earlier when PPP was not established but SIMcard was detected by modem, then it was blinking at 64ms ON/3000ms OFF. ON/OFF GPIO45 – Its value should be 1. RESET GPIO60 – Its value should always be 1. FAQ FAQ for this section click here Adding a DNS nano /etc/resolv.conf add following nameserver 8.8.8.8 nameserver 208.67.222.222 These are public nameservers, and you are free to use any other if they do not work. Using GPS module with Debian Wheezy Please refer to Software startup Guide for VAYU GPS FAQ FAQ 1: Modem / TTYUSB of modem not detected Solution 1. Remove the power cord from the board and reconnect it while the USB cable is not connected to the cape. Then you should follow the procedure to turn on the 3G module as follows set GPIO 45 to high in output mode Then after 3-4s , either press the switch S1 for 4s and then release it or instead of switch you can also recycle the value of GPIO 45 to low then high at intervals of 4s and now connect the USB cable. ** Always make sure GPIO 45 is in HIGH state ** cd /sys/class/gpio/ echo 45 &gt; export cd gpio45 echo &quot;high&quot; &gt; direction sleep 4 **Now enable the modem by toggling GPIO 45 *** echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction sleep 4 ** To disable the Modem, again toggle GPIO45 ** echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction sleep 4 Solution 2. Due to hotplug issue in AM335x we can do a workaround, connect a usb device like a pendrive on second host port on cape and then just press the switch S1 for 4s after setting GPIO45 high. This will most certainly work. Solution 3. This solution resets the usbcore of the AM335x and reinitialize it. This has been identified as a last resort workaround, NOTE, this will reset all peripheral on that USB CORE If the Device is disconnecting as soon as you try to establish connection even when you are sure that 3G module is on, then following should be followed : reset the USB1 echo 0 &gt; /sys/bus/usb/devices/usb1/bConfigurationValue echo 1 &gt; /sys/bus/usb/devices/usb1/bConfigurationValue Retrieved from &quot;http://www.yantrr.com/w/index.php?title=SW_startup_guide_for_Vayu_3G&amp;oldid=669&quot; Personal tools Log in Namespaces Page Discussion Variants Views Read View source View history Actions Search Navigation Main page Recent changes Random page Yantrr Links BeagleBone M2M Cape Order Capes Tools What links here Related changes Special pages Printable version Permanent link This page was last modified on 21 July 2015, at 11:17. This page has been accessed 13,926 times. Content is available under Attribution-ShareAlike 4.0 International unless otherwise noted. Privacy policy About Yantrr Wiki Disclaimers Attribution-ShareAlike 4.0 International Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616173034#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » Python HOWTOs » HOWTO Fetch Internet Resources Using urllib2¶ Author: Michael Foord Note There is a French translation of an earlier revision of this HOWTO, available at urllib2 - Le Manuel manquant. Introduction¶ Related Articles You may also find useful the following article on fetching web resources with Python: Basic Authentication A tutorial on Basic Authentication, with examples in Python. urllib2 is a Python module for fetching URLs (Uniform Resource Locators). It offers a very simple interface, in the form of the urlopen function. This is capable of fetching URLs using a variety of different protocols. It also offers a slightly more complex interface for handling common situations - like basic authentication, cookies, proxies and so on. These are provided by objects called handlers and openers. urllib2 supports fetching URLs for many “URL schemes” (identified by the string before the ”:” in URL - for example “ftp” is the URL scheme of “ftp://python.org/”) using their associated network protocols (e.g. FTP, HTTP). This tutorial focuses on the most common case, HTTP. For straightforward situations urlopen is very easy to use. But as soon as you encounter errors or non-trivial cases when opening HTTP URLs, you will need some understanding of the HyperText Transfer Protocol. The most comprehensive and authoritative reference to HTTP is RFC 2616. This is a technical document and not intended to be easy to read. This HOWTO aims to illustrate using urllib2, with enough detail about HTTP to help you through. It is not intended to replace the urllib2 docs, but is supplementary to them. Fetching URLs¶ The simplest way to use urllib2 is as follows: import urllib2 response = urllib2.urlopen('http://python.org/') html = response.read() Many uses of urllib2 will be that simple (note that instead of an ‘http:’ URL we could have used a URL starting with ‘ftp:’, ‘file:’, etc.). However, it’s the purpose of this tutorial to explain the more complicated cases, concentrating on HTTP. HTTP is based on requests and responses - the client makes requests and servers send responses. urllib2 mirrors this with a Request object which represents the HTTP request you are making. In its simplest form you create a Request object that specifies the URL you want to fetch. Calling urlopen with this Request object returns a response object for the URL requested. This response is a file-like object, which means you can for example call .read() on the response: import urllib2 req = urllib2.Request('http://www.voidspace.org.uk') response = urllib2.urlopen(req) the_page = response.read() Note that urllib2 makes use of the same Request interface to handle all URL schemes. For example, you can make an FTP request like so: req = urllib2.Request('ftp://example.com/') In the case of HTTP, there are two extra things that Request objects allow you to do: First, you can pass data to be sent to the server. Second, you can pass extra information (“metadata”) about the data or the about request itself, to the server - this information is sent as HTTP “headers”. Let’s look at each of these in turn. Data¶ Sometimes you want to send data to a URL (often the URL will refer to a CGI (Common Gateway Interface) script [1] or other web application). With HTTP, this is often done using what’s known as a POST request. This is often what your browser does when you submit a HTML form that you filled in on the web. Not all POSTs have to come from forms: you can use a POST to transmit arbitrary data to your own application. In the common case of HTML forms, the data needs to be encoded in a standard way, and then passed to the Request object as the data argument. The encoding is done using a function from the urllib library not from urllib2. import urllib import urllib2 url = 'http://www.someserver.com/cgi-bin/register.cgi' values = {'name' : 'Michael Foord', 'location' : 'Northampton', 'language' : 'Python' } data = urllib.urlencode(values) req = urllib2.Request(url, data) response = urllib2.urlopen(req) the_page = response.read() Note that other encodings are sometimes required (e.g. for file upload from HTML forms - see HTML Specification, Form Submission for more details). If you do not pass the data argument, urllib2 uses a GET request. One way in which GET and POST requests differ is that POST requests often have “side-effects”: they change the state of the system in some way (for example by placing an order with the website for a hundredweight of tinned spam to be delivered to your door). Though the HTTP standard makes it clear that POSTs are intended to always cause side-effects, and GET requests never to cause side-effects, nothing prevents a GET request from having side-effects, nor a POST requests from having no side-effects. Data can also be passed in an HTTP GET request by encoding it in the URL itself. This is done as follows: &gt;&gt;&gt; &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; import urllib &gt;&gt;&gt; data = {} &gt;&gt;&gt; data['name'] = 'Somebody Here' &gt;&gt;&gt; data['location'] = 'Northampton' &gt;&gt;&gt; data['language'] = 'Python' &gt;&gt;&gt; url_values = urllib.urlencode(data) &gt;&gt;&gt; print url_values # The order may differ. name=Somebody+Here&amp;language=Python&amp;location=Northampton &gt;&gt;&gt; url = 'http://www.example.com/example.cgi' &gt;&gt;&gt; full_url = url + '?' + url_values &gt;&gt;&gt; data = urllib2.urlopen(full_url) Notice that the full URL is created by adding a ? to the URL, followed by the encoded values. Headers¶ We’ll discuss here one particular HTTP header, to illustrate how to add headers to your HTTP request. Some websites [2] dislike being browsed by programs, or send different versions to different browsers [3]. By default urllib2 identifies itself as Python-urllib/x.y (where x and y are the major and minor version numbers of the Python release, e.g. Python-urllib/2.5), which may confuse the site, or just plain not work. The way a browser identifies itself is through the User-Agent header [4]. When you create a Request object you can pass a dictionary of headers in. The following example makes the same request as above, but identifies itself as a version of Internet Explorer [5]. import urllib import urllib2 url = 'http://www.someserver.com/cgi-bin/register.cgi' user_agent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64)' values = {'name': 'Michael Foord', 'location': 'Northampton', 'language': 'Python' } headers = {'User-Agent': user_agent} data = urllib.urlencode(values) req = urllib2.Request(url, data, headers) response = urllib2.urlopen(req) the_page = response.read() The response also has two useful methods. See the section on info and geturl which comes after we have a look at what happens when things go wrong. Handling Exceptions¶ urlopen raises URLError when it cannot handle a response (though as usual with Python APIs, built-in exceptions such as ValueError, TypeError etc. may also be raised). HTTPError is the subclass of URLError raised in the specific case of HTTP URLs. URLError¶ Often, URLError is raised because there is no network connection (no route to the specified server), or the specified server doesn’t exist. In this case, the exception raised will have a ‘reason’ attribute, which is a tuple containing an error code and a text error message. e.g. &gt;&gt;&gt; &gt;&gt;&gt; req = urllib2.Request('http://www.pretend_server.org') &gt;&gt;&gt; try: urllib2.urlopen(req) ... except URLError as e: ... print e.reason ... (4, 'getaddrinfo failed') HTTPError¶ Every HTTP response from the server contains a numeric “status code”. Sometimes the status code indicates that the server is unable to fulfil the request. The default handlers will handle some of these responses for you (for example, if the response is a “redirection” that requests the client fetch the document from a different URL, urllib2 will handle that for you). For those it can’t handle, urlopen will raise an HTTPError. Typical errors include ‘404’ (page not found), ‘403’ (request forbidden), and ‘401’ (authentication required). See section 10 of RFC 2616 for a reference on all the HTTP error codes. The HTTPError instance raised will have an integer ‘code’ attribute, which corresponds to the error sent by the server. Error Codes¶ Because the default handlers handle redirects (codes in the 300 range), and codes in the 100-299 range indicate success, you will usually only see error codes in the 400-599 range. BaseHTTPServer.BaseHTTPRequestHandler.responses is a useful dictionary of response codes in that shows all the response codes used by RFC 2616. The dictionary is reproduced here for convenience # Table mapping response codes to messages; entries have the # form {code: (shortmessage, longmessage)}. responses = { 100: ('Continue', 'Request received, please continue'), 101: ('Switching Protocols', 'Switching to new protocol; obey Upgrade header'), 200: ('OK', 'Request fulfilled, document follows'), 201: ('Created', 'Document created, URL follows'), 202: ('Accepted', 'Request accepted, processing continues off-line'), 203: ('Non-Authoritative Information', 'Request fulfilled from cache'), 204: ('No Content', 'Request fulfilled, nothing follows'), 205: ('Reset Content', 'Clear input form for further input.'), 206: ('Partial Content', 'Partial content follows.'), 300: ('Multiple Choices', 'Object has several resources -- see URI list'), 301: ('Moved Permanently', 'Object moved permanently -- see URI list'), 302: ('Found', 'Object moved temporarily -- see URI list'), 303: ('See Other', 'Object moved -- see Method and URL list'), 304: ('Not Modified', 'Document has not changed since given time'), 305: ('Use Proxy', 'You must use proxy specified in Location to access this ' 'resource.'), 307: ('Temporary Redirect', 'Object moved temporarily -- see URI list'), 400: ('Bad Request', 'Bad request syntax or unsupported method'), 401: ('Unauthorized', 'No permission -- see authorization schemes'), 402: ('Payment Required', 'No payment -- see charging schemes'), 403: ('Forbidden', 'Request forbidden -- authorization will not help'), 404: ('Not Found', 'Nothing matches the given URI'), 405: ('Method Not Allowed', 'Specified method is invalid for this server.'), 406: ('Not Acceptable', 'URI not available in preferred format.'), 407: ('Proxy Authentication Required', 'You must authenticate with ' 'this proxy before proceeding.'), 408: ('Request Timeout', 'Request timed out; try again later.'), 409: ('Conflict', 'Request conflict.'), 410: ('Gone', 'URI no longer exists and has been permanently removed.'), 411: ('Length Required', 'Client must specify Content-Length.'), 412: ('Precondition Failed', 'Precondition in headers is false.'), 413: ('Request Entity Too Large', 'Entity is too large.'), 414: ('Request-URI Too Long', 'URI is too long.'), 415: ('Unsupported Media Type', 'Entity body in unsupported format.'), 416: ('Requested Range Not Satisfiable', 'Cannot satisfy request range.'), 417: ('Expectation Failed', 'Expect condition could not be satisfied.'), 500: ('Internal Server Error', 'Server got itself in trouble'), 501: ('Not Implemented', 'Server does not support this operation'), 502: ('Bad Gateway', 'Invalid responses from another server/proxy.'), 503: ('Service Unavailable', 'The server cannot process the request due to a high load'), 504: ('Gateway Timeout', 'The gateway server did not receive a timely response'), 505: ('HTTP Version Not Supported', 'Cannot fulfill request.'), } When an error is raised the server responds by returning an HTTP error code and an error page. You can use the HTTPError instance as a response on the page returned. This means that as well as the code attribute, it also has read, geturl, and info, methods. &gt;&gt;&gt; &gt;&gt;&gt; req = urllib2.Request('http://www.python.org/fish.html') &gt;&gt;&gt; try: ... urllib2.urlopen(req) ... except urllib2.HTTPError as e: ... print e.code ... print e.read() ... 404 &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; ... &lt;title&gt;Page Not Found&lt;/title&gt; ... Wrapping it Up¶ So if you want to be prepared for HTTPError or URLError there are two basic approaches. I prefer the second approach. Number 1¶ from urllib2 import Request, urlopen, URLError, HTTPError req = Request(someurl) try: response = urlopen(req) except HTTPError as e: print 'The server couldn\'t fulfill the request.' print 'Error code: ', e.code except URLError as e: print 'We failed to reach a server.' print 'Reason: ', e.reason else: # everything is fine Note The except HTTPError must come first, otherwise except URLError will also catch an HTTPError. Number 2¶ from urllib2 import Request, urlopen, URLError req = Request(someurl) try: response = urlopen(req) except URLError as e: if hasattr(e, 'reason'): print 'We failed to reach a server.' print 'Reason: ', e.reason elif hasattr(e, 'code'): print 'The server couldn\'t fulfill the request.' print 'Error code: ', e.code else: # everything is fine info and geturl¶ The response returned by urlopen (or the HTTPError instance) has two useful methods info() and geturl(). geturl - this returns the real URL of the page fetched. This is useful because urlopen (or the opener object used) may have followed a redirect. The URL of the page fetched may not be the same as the URL requested. info - this returns a dictionary-like object that describes the page fetched, particularly the headers sent by the server. It is currently an httplib.HTTPMessage instance. Typical headers include ‘Content-length’, ‘Content-type’, and so on. See the Quick Reference to HTTP Headers for a useful listing of HTTP headers with brief explanations of their meaning and use. Openers and Handlers¶ When you fetch a URL you use an opener (an instance of the perhaps confusingly-named urllib2.OpenerDirector). Normally we have been using the default opener - via urlopen - but you can create custom openers. Openers use handlers. All the “heavy lifting” is done by the handlers. Each handler knows how to open URLs for a particular URL scheme (http, ftp, etc.), or how to handle an aspect of URL opening, for example HTTP redirections or HTTP cookies. You will want to create openers if you want to fetch URLs with specific handlers installed, for example to get an opener that handles cookies, or to get an opener that does not handle redirections. To create an opener, instantiate an OpenerDirector, and then call .add_handler(some_handler_instance) repeatedly. Alternatively, you can use build_opener, which is a convenience function for creating opener objects with a single function call. build_opener adds several handlers by default, but provides a quick way to add more and/or override the default handlers. Other sorts of handlers you might want to can handle proxies, authentication, and other common but slightly specialised situations. install_opener can be used to make an opener object the (global) default opener. This means that calls to urlopen will use the opener you have installed. Opener objects have an open method, which can be called directly to fetch urls in the same way as the urlopen function: there’s no need to call install_opener, except as a convenience. Basic Authentication¶ To illustrate creating and installing a handler we will use the HTTPBasicAuthHandler. For a more detailed discussion of this subject – including an explanation of how Basic Authentication works - see the Basic Authentication Tutorial. When authentication is required, the server sends a header (as well as the 401 error code) requesting authentication. This specifies the authentication scheme and a ‘realm’. The header looks like: WWW-Authenticate: SCHEME realm=&quot;REALM&quot;. e.g. WWW-Authenticate: Basic realm=&quot;cPanel Users&quot; The client should then retry the request with the appropriate name and password for the realm included as a header in the request. This is ‘basic authentication’. In order to simplify this process we can create an instance of HTTPBasicAuthHandler and an opener to use this handler. The HTTPBasicAuthHandler uses an object called a password manager to handle the mapping of URLs and realms to passwords and usernames. If you know what the realm is (from the authentication header sent by the server), then you can use a HTTPPasswordMgr. Frequently one doesn’t care what the realm is. In that case, it is convenient to use HTTPPasswordMgrWithDefaultRealm. This allows you to specify a default username and password for a URL. This will be supplied in the absence of you providing an alternative combination for a specific realm. We indicate this by providing None as the realm argument to the add_password method. The top-level URL is the first URL that requires authentication. URLs “deeper” than the URL you pass to .add_password() will also match. # create a password manager password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm() # Add the username and password. # If we knew the realm, we could use it instead of None. top_level_url = &quot;http://example.com/foo/&quot; password_mgr.add_password(None, top_level_url, username, password) handler = urllib2.HTTPBasicAuthHandler(password_mgr) # create &quot;opener&quot; (OpenerDirector instance) opener = urllib2.build_opener(handler) # use the opener to fetch a URL opener.open(a_url) # Install the opener. # Now all calls to urllib2.urlopen use our opener. urllib2.install_opener(opener) Note In the above example we only supplied our HTTPBasicAuthHandler to build_opener. By default openers have the handlers for normal situations – ProxyHandler (if a proxy setting such as an http_proxy environment variable is set), UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor. top_level_url is in fact either a full URL (including the ‘http:’ scheme component and the hostname and optionally the port number) e.g. “http://example.com/” or an “authority” (i.e. the hostname, optionally including the port number) e.g. “example.com” or “example.com:8080” (the latter example includes a port number). The authority, if present, must NOT contain the “userinfo” component - for example “joe:password@example.com” is not correct. Proxies¶ urllib2 will auto-detect your proxy settings and use those. This is through the ProxyHandler, which is part of the normal handler chain when a proxy setting is detected. Normally that’s a good thing, but there are occasions when it may not be helpful [6]. One way to do this is to setup our own ProxyHandler, with no proxies defined. This is done using similar steps to setting up a Basic Authentication handler: &gt;&gt;&gt; &gt;&gt;&gt; proxy_support = urllib2.ProxyHandler({}) &gt;&gt;&gt; opener = urllib2.build_opener(proxy_support) &gt;&gt;&gt; urllib2.install_opener(opener) Note Currently urllib2 does not support fetching of https locations through a proxy. However, this can be enabled by extending urllib2 as shown in the recipe [7]. Sockets and Layers¶ The Python support for fetching resources from the web is layered. urllib2 uses the httplib library, which in turn uses the socket library. As of Python 2.3 you can specify how long a socket should wait for a response before timing out. This can be useful in applications which have to fetch web pages. By default the socket module has no timeout and can hang. Currently, the socket timeout is not exposed at the httplib or urllib2 levels. However, you can set the default timeout globally for all sockets using import socket import urllib2 # timeout in seconds timeout = 10 socket.setdefaulttimeout(timeout) # this call to urllib2.urlopen now uses the default timeout # we have set in the socket module req = urllib2.Request('http://www.voidspace.org.uk') response = urllib2.urlopen(req) Footnotes¶ This document was reviewed and revised by John Lee. [1] For an introduction to the CGI protocol see Writing Web Applications in Python. [2] Google for example. [3] Browser sniffing is a very bad practise for website design - building sites using web standards is much more sensible. Unfortunately a lot of sites still send different versions to different browsers. [4] The user agent for MSIE 6 is ‘Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)’ [5] For details of more HTTP request headers, see Quick Reference to HTTP Headers. [6] In my case I have to use a proxy to access the internet at work. If you attempt to fetch localhost URLs through this proxy it blocks them. IE is set to use the proxy, which urllib2 picks up on. In order to test scripts with a localhost server, I have to prevent urllib2 from using the proxy. [7] urllib2 opener for SSL proxy (CONNECT method): ASPN Cookbook Recipe. Table Of Contents HOWTO Fetch Internet Resources Using urllib2 Introduction Fetching URLs Data Headers Handling Exceptions URLError HTTPError Error Codes Wrapping it Up Number 1 Number 2 info and geturl Openers and Handlers Basic Authentication Proxies Sockets and Layers Footnotes Previous topic Unicode HOWTO Next topic HOWTO Use Python in the web This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » Python HOWTOs » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 11, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160727170301#index"
                   NS1:content=" Skip to content &quot;VERSATILITY&quot; JULY 22 - 29 2016 About RFF RFF 2016 Venues Programm 2016 Hillywood 12 RFF 2016 Programm 2016 Venues Mira Nair Mini Film Market News Monsieur Chocolat cover_monsieur_chocolat France/2015/Narrative Feature/110min | Director: Roschdy Zem | Starring Omar Sy, James Thierree Screening: Friday 29th, Kigali Convention Centre, 20h 00 The clown Chocolat (Rafael Padilla) becomes, in 1886, the first black artist of the French scene. He forms a comedy duo with white clown George Foottit in a special universe with the white clown, authoritative, and a black clown scapegoat. All films sidebar_img02 sidebar_img02 sidebar_img03 sidebar_img03 sidebar_img02 sidebar_img02 About RFF RFF 2016 Rwanda Cinema Centre Kwetu film institute Copyright © 2016 RFF | Branding by Lycamedia Africa Ltd :) Chocolat - French trailer english sub If playback doesn't begin shortly, try restarting your device. Share Include playlist An error occurred while retrieving sharing information. Please try again later. Switch camera 0:00 0:00 0:00 / 2:07Live "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160721101841#index"
                   NS1:content=" Arduino userpicture Home Buy Download Products Back Arduino (USA only) Genuino (outside USA) AtHeart Certified Learning Back Getting started Tutorials Reference CTC Program Playground Forum Support Back FAQ Contact Us Blog LOG IN SIGN UP Reference Language | Libraries | Comparison | Changes Language Reference Arduino programs can be divided in three main parts: structure, values (variables and constants), and functions. Structure setup() loop() Control Structures if if...else for switch case while do... while break continue return goto Further Syntax ; (semicolon) {} (curly braces) // (single line comment) /* */ (multi-line comment) #define #include Arithmetic Operators = (assignment operator) + (addition) - (subtraction) * (multiplication) / (division) % (modulo) Comparison Operators == (equal to) != (not equal to) &lt; (less than) &gt; (greater than) &lt;= (less than or equal to) &gt;= (greater than or equal to) Boolean Operators &amp;&amp; (and) || (or) ! (not) Pointer Access Operators * dereference operator &amp; reference operator Bitwise Operators &amp; (bitwise and) | (bitwise or) ^ (bitwise xor) ~ (bitwise not) &lt;&lt; (bitshift left) &gt;&gt; (bitshift right) Compound Operators ++ (increment) -- (decrement) += (compound addition) -= (compound subtraction) *= (compound multiplication) /= (compound division) %= (compound modulo) &amp;= (compound bitwise and) |= (compound bitwise or) Variables Constants HIGH | LOW INPUT | OUTPUT | INPUT_PULLUP LED_BUILTIN true | false integer constants floating point constants Data Types void boolean char unsigned char byte int unsigned int word long unsigned long short float double string - char array String - object array Conversion char() byte() int() word() long() float() Variable Scope &amp; Qualifiers variable scope static volatile const Utilities sizeof() PROGMEM Functions Digital I/O pinMode() digitalWrite() digitalRead() Analog I/O analogReference() analogRead() analogWrite() - PWM Due &amp; Zero only analogReadResolution() analogWriteResolution() Advanced I/O tone() noTone() shiftOut() shiftIn() pulseIn() Time millis() micros() delay() delayMicroseconds() Math min() max() abs() constrain() map() pow() sqrt() Trigonometry sin() cos() tan() Characters isAlphaNumeric() isAlpha() isAscii() isWhitespace() isControl() isDigit() isGraph() isLowerCase() isPrintable() isPunct() isSpace() isUpperCase() isHexadecimalDigit() Random Numbers randomSeed() random() Bits and Bytes lowByte() highByte() bitRead() bitWrite() bitSet() bitClear() bit() External Interrupts attachInterrupt() detachInterrupt() Interrupts interrupts() noInterrupts() Communication Serial Stream USB (32u4 based boards and Due/Zero only) Keyboard Mouse Looking for something else? See the libraries page for interfacing with particular types of hardware. Try the list of community-contributed code. The Arduino language is based on C/C++. It links against AVR Libc and allows the use of any of its functions; see its user manual for details. Reference Home Corrections, suggestions, and new documentation should be posted to the Forum. The text of the Arduino reference is licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Code samples in the reference are released into the public domain. Share Tweet This link has expired. Please re-subscribe to our Newsletters. Subscribe to our Newsletters Email Please enter a valid email to subscribe Arduino Newsletter Arduino Store Newsletter Newsletter Italiana Cancel Next Confirm your email address We need to confirm your email address. To complete the subscription, please click the link in the email we just sent you. Thank you for subscribing! Arduino via Egeo 16 Torino, 10131 Italy Ok Newsletter ©2016 Arduino Copyright Notice Contact us About us Careers Pin it « 5K+ 102 Sorry, there was a problem loading Checkout. If this persists, please try a different browser. This message will automatically close in 5 seconds. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717093521#index"
                   NS1:content=" bannerimage Animated Knots by Grog Follow animatedknots on Twitter TIE KNOTS THE FUN AND EASY WAY Better to know a knot and not need it, than need a knot and not know it. indeximage Home indeximage By Name indeximage Arborist indeximage Basics indeximage Boating indeximage Climbing indeximage Decorative indeximage Fishing indeximage Household indeximage Neckties indeximage Rescue indeximage Rope Care indeximage Scouting indeximage Splicing indeximage Surgical indeximage Various indeximage End Loops indeximage Mid-Loops indeximage Bends indeximage Hitches indeximage Mats indeximage Stoppers indeximage Slide/Grip indeximage Store Lanyard (Diamond) Knot Decorative Index Decorative Options Grog's Sliding Splice Turk's Head Fiador Knot Lanyard Knot, Diamond Celtic Knot Mat Masthead Knot Mat Carrick Bend Mat Ocean Plait Mat Wall Knot Double Matthew Walker Wall &amp; Crown Monkey's Fist Cobra Lanyard Knot Crown Sinnet Chain Sinnet Braid Single Rope Three Strand Braid (1) Three Strand Braid (2) French Sinnet One French Sinnet Two Square Sinnet Four Strand #2974 Knot Terminology Knot &amp; Rope Safety Rope Properties Contact About Facebook Fast Medium Slow Loop Normal Mirror Inverted Rotated Animation: Lanyard (Diamond) Knot Tying (Decorative)Animation: Lanyard (Diamond) Knot Tying Lanyard (Diamond) Knot Tying (Decorative) 1 2 3 4 5 6 7 8 9 10 11 Lanyard (Diamond) Knot Tying Start with a bight in the rope. In one end form a loop. Pass the other end under and around the loop to tie a Carrick Bend. Pass this end around outside the bight and up through the center of the Carrick Bend. Do the same with the other end and then tighten both ends to form the knot. Lanyard (Diamond) Knot Details Name: The Lanyard Knot, also known as the Diamond Knot and Friendship Knot, (ABOK # 787, p 141.) makes a fixed loop in the middle of a piece of rope. Structure: Steps 1 to 6 of the animation show how the ends of the loop are joined together with a Carrick Bend. This pleasingly symmetrical knot forms the center of the Lanyard Knot. Each end is then wrapped around outside the loop and up through the center, away from the loop. The resulting appearance creates the strong impression that the two ropes are passing through a collar. Use: The Lanyard Knot is often used as a decorative component of a Knife Lanyard. Disclaimer: Any activity that involves ropes is potentially hazardous. Lives may be at risk - possibly your own. Considerable attention and effort have been made to ensure that these descriptions are accurate. However, many critical factors cannot be controlled, including: the choice of materials; the age, size, and condition of ropes; and the accuracy with which these descriptions have been followed. No responsibility is accepted for incidents arising from the use of this material. Copyright © 2007 - 2016 All Rights Reserved Grog LLC Switch to: Mobile Version Copyright and Trademark Version 6.0 Jan 1, 2016 Get Our Apps adimage adimage adimage Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like Share "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717091424#index"
                   NS1:content=" bannerimage Animated Knots by Grog Follow animatedknots on Twitter TIE KNOTS THE FUN AND EASY WAY Better to know a knot and not need it, than need a knot and not know it. indeximage Home indeximage By Name indeximage Arborist indeximage Basics indeximage Boating indeximage Climbing indeximage Decorative indeximage Fishing indeximage Household indeximage Neckties indeximage Rescue indeximage Rope Care indeximage Scouting indeximage Splicing indeximage Surgical indeximage Various indeximage End Loops indeximage Mid-Loops indeximage Bends indeximage Hitches indeximage Mats indeximage Stoppers indeximage Slide/Grip indeximage Store Braiding a Single Rope Decorative Index Decorative Options Grog's Sliding Splice Turk's Head Fiador Knot Lanyard Knot, Diamond Celtic Knot Mat Masthead Knot Mat Carrick Bend Mat Ocean Plait Mat Wall Knot Double Matthew Walker Wall &amp; Crown Monkey's Fist Cobra Lanyard Knot Crown Sinnet Chain Sinnet Braid Single Rope Three Strand Braid (1) Three Strand Braid (2) French Sinnet One French Sinnet Two Square Sinnet Four Strand #2974 Knot Terminology Knot &amp; Rope Safety Rope Properties Contact About Facebook Fast Medium Slow Loop Normal Mirror Inverted Rotated Animation: Braiding a Single Rope (Decorative)Animation: Braiding a Single Rope Braiding a Single Rope (Decorative) 1 2 3 4 5 6 7 8 9 10 11 12 Braiding a Single Rope Make a loop which is about the length needed for the braid. Pass the end through the loop. Twist the loop to create the next hole for the end to pass through. Repeat as often as required to complete the braid. Braiding a Single Rope Details Uses: Braiding several strands is often learned in childhood as a way of controlling long hair. This animation demonstrates how to make a braid with a single piece of rope. Methods: The animation shows the braid being tied with the rope's end being threaded through the loop. In practice braiding is made in the usual way. The strands are manipulated close against the braid ignoring the fact that the end and the loop are getting tangled. Then after adding several braids, the end is pulled clear of the loop. Disclaimer: Any activity that involves ropes is potentially hazardous. Lives may be at risk - possibly your own. Considerable attention and effort have been made to ensure that these descriptions are accurate. However, many critical factors cannot be controlled, including: the choice of materials; the age, size, and condition of ropes; and the accuracy with which these descriptions have been followed. No responsibility is accepted for incidents arising from the use of this material. Copyright © 2007 - 2016 All Rights Reserved Grog LLC Switch to: Mobile Version Copyright and Trademark Version 6.0 Jan 1, 2016 Get Our Apps adimage adimage adimage Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Like Share "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160708175508#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 7. String Services » 7.2. re — Regular expression operations¶ This module provides regular expression matching operations similar to those found in Perl. Both patterns and strings to be searched can be Unicode strings as well as 8-bit strings. Regular expressions use the backslash character ('\') to indicate special forms or to allow special characters to be used without invoking their special meaning. This collides with Python’s usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write '\\\\' as the pattern string, because the regular expression must be \\, and each backslash must be expressed as \\ inside a regular Python string literal. The solution is to use Python’s raw string notation for regular expression patterns; backslashes are not handled in any special way in a string literal prefixed with 'r'. So r&quot;\n&quot; is a two-character string containing '\' and 'n', while &quot;\n&quot; is a one-character string containing a newline. Usually patterns will be expressed in Python code using this raw string notation. It is important to note that most regular expression operations are available as module-level functions and RegexObject methods. The functions are shortcuts that don’t require you to compile a regex object first, but miss some fine-tuning parameters. 7.2.1. Regular Expression Syntax¶ A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression (or if a given regular expression matches a particular string, which comes down to the same thing). Regular expressions can be concatenated to form new regular expressions; if A and B are both regular expressions, then AB is also a regular expression. In general, if a string p matches A and another string q matches B, the string pq will match AB. This holds unless A or B contain low precedence operations; boundary conditions between A and B; or have numbered group references. Thus, complex expressions can easily be constructed from simpler primitive expressions like the ones described here. For details of the theory and implementation of regular expressions, consult the Friedl book referenced above, or almost any textbook about compiler construction. A brief explanation of the format of regular expressions follows. For further information and a gentler presentation, consult the Regular Expression HOWTO. Regular expressions can contain both special and ordinary characters. Most ordinary characters, like 'A', 'a', or '0', are the simplest regular expressions; they simply match themselves. You can concatenate ordinary characters, so last matches the string 'last'. (In the rest of this section, we’ll write RE’s in this special style, usually without quotes, and strings to be matched 'in single quotes'.) Some characters, like '|' or '(', are special. Special characters either stand for classes of ordinary characters, or affect how the regular expressions around them are interpreted. Regular expression pattern strings may not contain null bytes, but can specify the null byte using the \number notation, e.g., '\x00'. The special characters are: '.' (Dot.) In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline. '^' (Caret.) Matches the start of the string, and in MULTILINE mode also matches immediately after each newline. '$' Matches the end of the string or just before the newline at the end of the string, and in MULTILINE mode also matches before a newline. foo matches both ‘foo’ and ‘foobar’, while the regular expression foo$ matches only ‘foo’. More interestingly, searching for foo.$ in 'foo1\nfoo2\n' matches ‘foo2’ normally, but ‘foo1’ in MULTILINE mode; searching for a single $ in 'foo\n' will find two (empty) matches: one just before the newline, and one at the end of the string. '*' Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s. '+' Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match ‘a’ followed by any non-zero number of ‘b’s; it will not match just ‘a’. '?' Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’. *?, +?, ?? The '*', '+', and '?' qualifiers are all greedy; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE &lt;.*&gt; is matched against &lt;a&gt; b &lt;c&gt;, it will match the entire string, and not just &lt;a&gt;. Adding ? after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using the RE &lt;.*?&gt; will match only &lt;a&gt;. {m} Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match. For example, a{6} will match exactly six 'a' characters, but not five. {m,n} Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible. For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and omitting n specifies an infinite upper bound. As an example, a{4,}b will match aaaab or a thousand 'a' characters followed by a b, but not aaab. The comma may not be omitted or the modifier would be confused with the previously described form. {m,n}? Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as few repetitions as possible. This is the non-greedy version of the previous qualifier. For example, on the 6-character string 'aaaaaa', a{3,5} will match 5 'a' characters, while a{3,5}? will only match 3 characters. '\' Either escapes special characters (permitting you to match characters like '*', '?', and so forth), or signals a special sequence; special sequences are discussed below. If you’re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn’t recognized by Python’s parser, the backslash and subsequent character are included in the resulting string. However, if Python would recognize the resulting sequence, the backslash should be repeated twice. This is complicated and hard to understand, so it’s highly recommended that you use raw strings for all but the simplest expressions. [] Used to indicate a set of characters. In a set: Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'. Ranges of characters can be indicated by giving two characters and separating them by a '-', for example [a-z] will match any lowercase ASCII letter, [0-5][0-9] will match all the two-digits numbers from 00 to 59, and [0-9A-Fa-f] will match any hexadecimal digit. If - is escaped (e.g. [a\-z]) or if it’s placed as the first or last character (e.g. [a-]), it will match a literal '-'. Special characters lose their special meaning inside sets. For example, [(+*)] will match any of the literal characters '(', '+', '*', or ')'. Character classes such as \w or \S (defined below) are also accepted inside a set, although the characters they match depends on whether LOCALE or UNICODE mode is in force. Characters that are not within a range can be matched by complementing the set. If the first character of the set is '^', all the characters that are not in the set will be matched. For example, [^5] will match any character except '5', and [^^] will match any character except '^'. ^ has no special meaning if it’s not the first character in the set. To match a literal ']' inside a set, precede it with a backslash, or place it at the beginning of the set. For example, both [()[\]{}] and []()[{}] will both match a parenthesis. '|' A|B, where A and B can be arbitrary REs, creates a regular expression that will match either A or B. An arbitrary number of REs can be separated by the '|' in this way. This can be used inside groups (see below) as well. As the target string is scanned, REs separated by '|' are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once A matches, B will not be tested further, even if it would produce a longer overall match. In other words, the '|' operator is never greedy. To match a literal '|', use \|, or enclose it inside a character class, as in [|]. (...) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \number special sequence, described below. To match the literals '(' or ')', use \( or \), or enclose them inside a character class: [(] [)]. (?...) This is an extension notation (a '?' following a '(' is not meaningful otherwise). The first character after the '?' determines what the meaning and further syntax of the construct is. Extensions usually do not create a new group; (?P&lt;name&gt;...) is the only exception to this rule. Following are the currently supported extensions. (?iLmsux) (One or more letters from the set 'i', 'L', 'm', 's', 'u', 'x'.) The group matches the empty string; the letters set the corresponding flags: re.I (ignore case), re.L (locale dependent), re.M (multi-line), re.S (dot matches all), re.U (Unicode dependent), and re.X (verbose), for the entire regular expression. (The flags are described in Module Contents.) This is useful if you wish to include the flags as part of the regular expression, instead of passing a flag argument to the re.compile() function. Note that the (?x) flag changes how the expression is parsed. It should be used first in the expression string, or after one or more whitespace characters. If there are non-whitespace characters before the flag, the results are undefined. (?:...) A non-capturing version of regular parentheses. Matches whatever regular expression is inside the parentheses, but the substring matched by the group cannot be retrieved after performing a match or referenced later in the pattern. (?P&lt;name&gt;...) Similar to regular parentheses, but the substring matched by the group is accessible via the symbolic group name name. Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression. A symbolic group is also a numbered group, just as if the group were not named. Named groups can be referenced in three contexts. If the pattern is (?P&lt;quote&gt;['&quot;]).*?(?P=quote) (i.e. matching a string quoted with either single or double quotes): Context of reference to group “quote” Ways to reference it in the same pattern itself (?P=quote) (as shown) \1 when processing match object m m.group('quote') m.end('quote') (etc.) in a string passed to the repl argument of re.sub() \g&lt;quote&gt; \g&lt;1&gt; \1 (?P=name) A backreference to a named group; it matches whatever text was matched by the earlier group named name. (?#...) A comment; the contents of the parentheses are simply ignored. (?=...) Matches if ... matches next, but doesn’t consume any of the string. This is called a lookahead assertion. For example, Isaac (?=Asimov) will match 'Isaac ' only if it’s followed by 'Asimov'. (?!...) Matches if ... doesn’t match next. This is a negative lookahead assertion. For example, Isaac (?!Asimov) will match 'Isaac ' only if it’s not followed by 'Asimov'. (?&lt;=...) Matches if the current position in the string is preceded by a match for ... that ends at the current position. This is called a positive lookbehind assertion. (?&lt;=abc)def will find a match in abcdef, since the lookbehind will back up 3 characters and check if the contained pattern matches. The contained pattern must only match strings of some fixed length, meaning that abc or a|b are allowed, but a* and a{3,4} are not. Group references are not supported even if they match strings of some fixed length. Note that patterns which start with positive lookbehind assertions will not match at the beginning of the string being searched; you will most likely want to use the search() function rather than the match() function: &gt;&gt;&gt; &gt;&gt;&gt; import re &gt;&gt;&gt; m = re.search('(?&lt;=abc)def', 'abcdef') &gt;&gt;&gt; m.group(0) 'def' This example looks for a word following a hyphen: &gt;&gt;&gt; &gt;&gt;&gt; m = re.search('(?&lt;=-)\w+', 'spam-egg') &gt;&gt;&gt; m.group(0) 'egg' (?&lt;!...) Matches if the current position in the string is not preceded by a match for .... This is called a negative lookbehind assertion. Similar to positive lookbehind assertions, the contained pattern must only match strings of some fixed length and shouldn’t contain group references. Patterns which start with negative lookbehind assertions may match at the beginning of the string being searched. (?(id/name)yes-pattern|no-pattern) Will try to match with yes-pattern if the group with given id or name exists, and with no-pattern if it doesn’t. no-pattern is optional and can be omitted. For example, (&lt;)?(\w+@\w+(?:\.\w+)+)(?(1)&gt;) is a poor email matching pattern, which will match with '&lt;user@host.com&gt;' as well as 'user@host.com', but not with '&lt;user@host.com'. New in version 2.4. The special sequences consist of '\' and a character from the list below. If the ordinary character is not on the list, then the resulting RE will match the second character. For example, \$ matches the character '$'. \number Matches the contents of the group of the same number. Groups are numbered starting from 1. For example, (.+) \1 matches 'the the' or '55 55', but not 'thethe' (note the space after the group). This special sequence can only be used to match one of the first 99 groups. If the first digit of number is 0, or number is 3 octal digits long, it will not be interpreted as a group match, but as the character with octal value number. Inside the '[' and ']' of a character class, all numeric escapes are treated as characters. \A Matches only at the start of the string. \b Matches the empty string, but only at the beginning or end of a word. A word is defined as a sequence of alphanumeric or underscore characters, so the end of a word is indicated by whitespace or a non-alphanumeric, non-underscore character. Note that formally, \b is defined as the boundary between a \w and a \W character (or vice versa), or between \w and the beginning/end of the string, so the precise set of characters deemed to be alphanumeric depends on the values of the UNICODE and LOCALE flags. For example, r'\bfoo\b' matches 'foo', 'foo.', '(foo)', 'bar foo baz' but not 'foobar' or 'foo3'. Inside a character range, \b represents the backspace character, for compatibility with Python’s string literals. \B Matches the empty string, but only when it is not at the beginning or end of a word. This means that r'py\B' matches 'python', 'py3', 'py2', but not 'py', 'py.', or 'py!'. \B is just the opposite of \b, so is also subject to the settings of LOCALE and UNICODE. \d When the UNICODE flag is not specified, matches any decimal digit; this is equivalent to the set [0-9]. With UNICODE, it will match whatever is classified as a decimal digit in the Unicode character properties database. \D When the UNICODE flag is not specified, matches any non-digit character; this is equivalent to the set [^0-9]. With UNICODE, it will match anything other than character marked as digits in the Unicode character properties database. \s When the UNICODE flag is not specified, it matches any whitespace character, this is equivalent to the set [ \t\n\r\f\v]. The LOCALE flag has no extra effect on matching of the space. If UNICODE is set, this will match the characters [ \t\n\r\f\v] plus whatever is classified as space in the Unicode character properties database. \S When the UNICODE flag is not specified, matches any non-whitespace character; this is equivalent to the set [^ \t\n\r\f\v] The LOCALE flag has no extra effect on non-whitespace match. If UNICODE is set, then any character not marked as space in the Unicode character properties database is matched. \w When the LOCALE and UNICODE flags are not specified, matches any alphanumeric character and the underscore; this is equivalent to the set [a-zA-Z0-9_]. With LOCALE, it will match the set [0-9_] plus whatever characters are defined as alphanumeric for the current locale. If UNICODE is set, this will match the characters [0-9_] plus whatever is classified as alphanumeric in the Unicode character properties database. \W When the LOCALE and UNICODE flags are not specified, matches any non-alphanumeric character; this is equivalent to the set [^a-zA-Z0-9_]. With LOCALE, it will match any character not in the set [0-9_], and not defined as alphanumeric for the current locale. If UNICODE is set, this will match anything other than [0-9_] plus characters classified as not alphanumeric in the Unicode character properties database. \Z Matches only at the end of the string. If both LOCALE and UNICODE flags are included for a particular sequence, then LOCALE flag takes effect first followed by the UNICODE. Most of the standard escapes supported by Python string literals are also accepted by the regular expression parser: \a \b \f \n \r \t \v \x \\ (Note that \b is used to represent word boundaries, and means “backspace” only inside character classes.) Octal escapes are included in a limited form: If the first digit is a 0, or if there are three octal digits, it is considered an octal escape. Otherwise, it is a group reference. As for string literals, octal escapes are always at most three digits in length. See also Mastering Regular Expressions Book on regular expressions by Jeffrey Friedl, published by O’Reilly. The second edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail. 7.2.2. Module Contents¶ The module defines several functions, constants, and an exception. Some of the functions are simplified versions of the full featured methods for compiled regular expressions. Most non-trivial applications always use the compiled form. re.compile(pattern, flags=0)¶ Compile a regular expression pattern into a regular expression object, which can be used for matching using its match() and search() methods, described below. The expression’s behaviour can be modified by specifying a flags value. Values can be any of the following variables, combined using bitwise OR (the | operator). The sequence prog = re.compile(pattern) result = prog.match(string) is equivalent to result = re.match(pattern, string) but using re.compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program. Note The compiled versions of the most recent patterns passed to re.match(), re.search() or re.compile() are cached, so programs that use only a few regular expressions at a time needn’t worry about compiling regular expressions. re.DEBUG¶ Display debug information about compiled expression. re.I¶ re.IGNORECASE¶ Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too. This is not affected by the current locale. re.L¶ re.LOCALE¶ Make \w, \W, \b, \B, \s and \S dependent on the current locale. re.M¶ re.MULTILINE¶ When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string. re.S¶ re.DOTALL¶ Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline. re.U¶ re.UNICODE¶ Make \w, \W, \b, \B, \d, \D, \s and \S dependent on the Unicode character properties database. New in version 2.0. re.X¶ re.VERBOSE¶ This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class or when preceded by an unescaped backslash. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored. This means that the two following regular expression objects that match a decimal number are functionally equal: a = re.compile(r&quot;&quot;&quot;\d + # the integral part \. # the decimal point \d * # some fractional digits&quot;&quot;&quot;, re.X) b = re.compile(r&quot;\d+\.\d*&quot;) re.search(pattern, string, flags=0)¶ Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string. re.match(pattern, string, flags=0)¶ If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding MatchObject instance. Return None if the string does not match the pattern; note that this is different from a zero-length match. Note that even in MULTILINE mode, re.match() will only match at the beginning of the string and not at the beginning of each line. If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()). re.split(pattern, string, maxsplit=0, flags=0)¶ Split string by the occurrences of pattern. If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list. (Incompatibility note: in the original Python 1.5 release, maxsplit was ignored. This has been fixed in later releases.) &gt;&gt;&gt; &gt;&gt;&gt; re.split('\W+', 'Words, words, words.') ['Words', 'words', 'words', ''] &gt;&gt;&gt; re.split('(\W+)', 'Words, words, words.') ['Words', ', ', 'words', ', ', 'words', '.', ''] &gt;&gt;&gt; re.split('\W+', 'Words, words, words.', 1) ['Words', 'words, words.'] &gt;&gt;&gt; re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE) ['0', '3', '9'] If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string: &gt;&gt;&gt; &gt;&gt;&gt; re.split('(\W+)', '...words, words...') ['', '...', 'words', ', ', 'words', '...', ''] That way, separator components are always found at the same relative indices within the result list (e.g., if there’s one capturing group in the separator, the 0th, the 2nd and so forth). Note that split will never split a string on an empty pattern match. For example: &gt;&gt;&gt; &gt;&gt;&gt; re.split('x*', 'foo') ['foo'] &gt;&gt;&gt; re.split(&quot;(?m)^$&quot;, &quot;foo\n\nbar\n&quot;) ['foo\n\nbar\n'] Changed in version 2.7: Added the optional flags argument. re.findall(pattern, string, flags=0)¶ Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result unless they touch the beginning of another match. New in version 1.5.2. Changed in version 2.4: Added the optional flags argument. re.finditer(pattern, string, flags=0)¶ Return an iterator yielding MatchObject instances over all non-overlapping matches for the RE pattern in string. The string is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result unless they touch the beginning of another match. New in version 2.2. Changed in version 2.4: Added the optional flags argument. re.sub(pattern, repl, string, count=0, flags=0)¶ Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged. repl can be a string or a function; if it is a string, any backslash escapes in it are processed. That is, \n is converted to a single newline character, \r is converted to a carriage return, and so forth. Unknown escapes such as \j are left alone. Backreferences, such as \6, are replaced with the substring matched by group 6 in the pattern. For example: &gt;&gt;&gt; &gt;&gt;&gt; re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):', ... r'static PyObject*\npy_\1(void)\n{', ... 'def myfunc():') 'static PyObject*\npy_myfunc(void)\n{' If repl is a function, it is called for every non-overlapping occurrence of pattern. The function takes a single match object argument, and returns the replacement string. For example: &gt;&gt;&gt; &gt;&gt;&gt; def dashrepl(matchobj): ... if matchobj.group(0) == '-': return ' ' ... else: return '-' &gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files') 'pro--gram files' &gt;&gt;&gt; re.sub(r'\sAND\s', ' &amp; ', 'Baked Beans And Spam', flags=re.IGNORECASE) 'Baked Beans &amp; Spam' The pattern may be a string or an RE object. The optional argument count is the maximum number of pattern occurrences to be replaced; count must be a non-negative integer. If omitted or zero, all occurrences will be replaced. Empty matches for the pattern are replaced only when not adjacent to a previous match, so sub('x*', '-', 'abc') returns '-a-b-c-'. In string-type repl arguments, in addition to the character escapes and backreferences described above, \g&lt;name&gt; will use the substring matched by the group named name, as defined by the (?P&lt;name&gt;...) syntax. \g&lt;number&gt; uses the corresponding group number; \g&lt;2&gt; is therefore equivalent to \2, but isn’t ambiguous in a replacement such as \g&lt;2&gt;0. \20 would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character '0'. The backreference \g&lt;0&gt; substitutes in the entire substring matched by the RE. Changed in version 2.7: Added the optional flags argument. re.subn(pattern, repl, string, count=0, flags=0)¶ Perform the same operation as sub(), but return a tuple (new_string, number_of_subs_made). Changed in version 2.7: Added the optional flags argument. re.escape(string)¶ Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it. re.purge()¶ Clear the regular expression cache. exception re.error¶ Exception raised when a string passed to one of the functions here is not a valid regular expression (for example, it might contain unmatched parentheses) or when some other error occurs during compilation or matching. It is never an error if a string contains no match for a pattern. 7.2.3. Regular Expression Objects¶ class re.RegexObject¶ The RegexObject class supports the following methods and attributes: search(string[, pos[, endpos]])¶ Scan through string looking for a location where this regular expression produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string. The optional second parameter pos gives an index in the string where the search is to start; it defaults to 0. This is not completely equivalent to slicing the string; the '^' pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start. The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match. If endpos is less than pos, no match will be found, otherwise, if rx is a compiled regular expression object, rx.search(string, 0, 50) is equivalent to rx.search(string[:50], 0). &gt;&gt;&gt; &gt;&gt;&gt; pattern = re.compile(&quot;d&quot;) &gt;&gt;&gt; pattern.search(&quot;dog&quot;) # Match at index 0 &lt;_sre.SRE_Match object at ...&gt; &gt;&gt;&gt; pattern.search(&quot;dog&quot;, 1) # No match; search doesn't include the &quot;d&quot; match(string[, pos[, endpos]])¶ If zero or more characters at the beginning of string match this regular expression, return a corresponding MatchObject instance. Return None if the string does not match the pattern; note that this is different from a zero-length match. The optional pos and endpos parameters have the same meaning as for the search() method. &gt;&gt;&gt; &gt;&gt;&gt; pattern = re.compile(&quot;o&quot;) &gt;&gt;&gt; pattern.match(&quot;dog&quot;) # No match as &quot;o&quot; is not at the start of &quot;dog&quot;. &gt;&gt;&gt; pattern.match(&quot;dog&quot;, 1) # Match as &quot;o&quot; is the 2nd character of &quot;dog&quot;. &lt;_sre.SRE_Match object at ...&gt; If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()). split(string, maxsplit=0)¶ Identical to the split() function, using the compiled pattern. findall(string[, pos[, endpos]])¶ Similar to the findall() function, using the compiled pattern, but also accepts optional pos and endpos parameters that limit the search region like for match(). finditer(string[, pos[, endpos]])¶ Similar to the finditer() function, using the compiled pattern, but also accepts optional pos and endpos parameters that limit the search region like for match(). sub(repl, string, count=0)¶ Identical to the sub() function, using the compiled pattern. subn(repl, string, count=0)¶ Identical to the subn() function, using the compiled pattern. flags¶ The regex matching flags. This is a combination of the flags given to compile() and any (?...) inline flags in the pattern. groups¶ The number of capturing groups in the pattern. groupindex¶ A dictionary mapping any symbolic group names defined by (?P&lt;id&gt;) to group numbers. The dictionary is empty if no symbolic groups were used in the pattern. pattern¶ The pattern string from which the RE object was compiled. 7.2.4. Match Objects¶ class re.MatchObject¶ Match objects always have a boolean value of True. Since match() and search() return None when there is no match, you can test whether there was a match with a simple if statement: match = re.search(pattern, string) if match: process(match) Match objects support the following methods and attributes: expand(template)¶ Return the string obtained by doing backslash substitution on the template string template, as done by the sub() method. Escapes such as \n are converted to the appropriate characters, and numeric backreferences (\1, \2) and named backreferences (\g&lt;1&gt;, \g&lt;name&gt;) are replaced by the contents of the corresponding group. group([group1, ...])¶ Returns one or more subgroups of the match. If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, group1 defaults to zero (the whole match is returned). If a groupN argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group. If a group number is negative or larger than the number of groups defined in the pattern, an IndexError exception is raised. If a group is contained in a part of the pattern that did not match, the corresponding result is None. If a group is contained in a part of the pattern that matched multiple times, the last match is returned. &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(r&quot;(\w+) (\w+)&quot;, &quot;Isaac Newton, physicist&quot;) &gt;&gt;&gt; m.group(0) # The entire match 'Isaac Newton' &gt;&gt;&gt; m.group(1) # The first parenthesized subgroup. 'Isaac' &gt;&gt;&gt; m.group(2) # The second parenthesized subgroup. 'Newton' &gt;&gt;&gt; m.group(1, 2) # Multiple arguments give us a tuple. ('Isaac', 'Newton') If the regular expression uses the (?P&lt;name&gt;...) syntax, the groupN arguments may also be strings identifying groups by their group name. If a string argument is not used as a group name in the pattern, an IndexError exception is raised. A moderately complicated example: &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;, &quot;Malcolm Reynolds&quot;) &gt;&gt;&gt; m.group('first_name') 'Malcolm' &gt;&gt;&gt; m.group('last_name') 'Reynolds' Named groups can also be referred to by their index: &gt;&gt;&gt; &gt;&gt;&gt; m.group(1) 'Malcolm' &gt;&gt;&gt; m.group(2) 'Reynolds' If a group matches multiple times, only the last match is accessible: &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(r&quot;(..)+&quot;, &quot;a1b2c3&quot;) # Matches 3 times. &gt;&gt;&gt; m.group(1) # Returns only the last match. 'c3' groups([default])¶ Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern. The default argument is used for groups that did not participate in the match; it defaults to None. (Incompatibility note: in the original Python 1.5 release, if the tuple was one element long, a string would be returned instead. In later versions (from 1.5.1 on), a singleton tuple is returned in such cases.) For example: &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(r&quot;(\d+)\.(\d+)&quot;, &quot;24.1632&quot;) &gt;&gt;&gt; m.groups() ('24', '1632') If we make the decimal place and everything after it optional, not all groups might participate in the match. These groups will default to None unless the default argument is given: &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(r&quot;(\d+)\.?(\d+)?&quot;, &quot;24&quot;) &gt;&gt;&gt; m.groups() # Second group defaults to None. ('24', None) &gt;&gt;&gt; m.groups('0') # Now, the second group defaults to '0'. ('24', '0') groupdict([default])¶ Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name. The default argument is used for groups that did not participate in the match; it defaults to None. For example: &gt;&gt;&gt; &gt;&gt;&gt; m = re.match(r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;, &quot;Malcolm Reynolds&quot;) &gt;&gt;&gt; m.groupdict() {'first_name': 'Malcolm', 'last_name': 'Reynolds'} start([group])¶ end([group])¶ Return the indices of the start and end of the substring matched by group; group defaults to zero (meaning the whole matched substring). Return -1 if group exists but did not contribute to the match. For a match object m, and a group g that did contribute to the match, the substring matched by group g (equivalent to m.group(g)) is m.string[m.start(g):m.end(g)] Note that m.start(group) will equal m.end(group) if group matched a null string. For example, after m = re.search('b(c?)', 'cba'), m.start(0) is 1, m.end(0) is 2, m.start(1) and m.end(1) are both 2, and m.start(2) raises an IndexError exception. An example that will remove remove_this from email addresses: &gt;&gt;&gt; &gt;&gt;&gt; email = &quot;tony@tiremove_thisger.net&quot; &gt;&gt;&gt; m = re.search(&quot;remove_this&quot;, email) &gt;&gt;&gt; email[:m.start()] + email[m.end():] 'tony@tiger.net' span([group])¶ For MatchObject m, return the 2-tuple (m.start(group), m.end(group)). Note that if group did not contribute to the match, this is (-1, -1). group defaults to zero, the entire match. pos¶ The value of pos which was passed to the search() or match() method of the RegexObject. This is the index into the string at which the RE engine started looking for a match. endpos¶ The value of endpos which was passed to the search() or match() method of the RegexObject. This is the index into the string beyond which the RE engine will not go. lastindex¶ The integer index of the last matched capturing group, or None if no group was matched at all. For example, the expressions (a)b, ((a)(b)), and ((ab)) will have lastindex == 1 if applied to the string 'ab', while the expression (a)(b) will have lastindex == 2, if applied to the same string. lastgroup¶ The name of the last matched capturing group, or None if the group didn’t have a name, or if no group was matched at all. re¶ The regular expression object whose match() or search() method produced this MatchObject instance. string¶ The string passed to match() or search(). 7.2.5. Examples¶ 7.2.5.1. Checking For a Pair¶ In this example, we’ll use the following helper function to display match objects a little more gracefully: def displaymatch(match): if match is None: return None return '&lt;Match: %r, groups=%r&gt;' % (match.group(), match.groups()) Suppose you are writing a poker program where a player’s hand is represented as a 5-character string with each character representing a card, “a” for ace, “k” for king, “q” for queen, “j” for jack, “t” for 10, and “2” through “9” representing the card with that value. To see if a given string is a valid hand, one could do the following: &gt;&gt;&gt; &gt;&gt;&gt; valid = re.compile(r&quot;^[a2-9tjqk]{5}$&quot;) &gt;&gt;&gt; displaymatch(valid.match(&quot;akt5q&quot;)) # Valid. &quot;&lt;Match: 'akt5q', groups=()&gt;&quot; &gt;&gt;&gt; displaymatch(valid.match(&quot;akt5e&quot;)) # Invalid. &gt;&gt;&gt; displaymatch(valid.match(&quot;akt&quot;)) # Invalid. &gt;&gt;&gt; displaymatch(valid.match(&quot;727ak&quot;)) # Valid. &quot;&lt;Match: '727ak', groups=()&gt;&quot; That last hand, &quot;727ak&quot;, contained a pair, or two of the same valued cards. To match this with a regular expression, one could use backreferences as such: &gt;&gt;&gt; &gt;&gt;&gt; pair = re.compile(r&quot;.*(.).*\1&quot;) &gt;&gt;&gt; displaymatch(pair.match(&quot;717ak&quot;)) # Pair of 7s. &quot;&lt;Match: '717', groups=('7',)&gt;&quot; &gt;&gt;&gt; displaymatch(pair.match(&quot;718ak&quot;)) # No pairs. &gt;&gt;&gt; displaymatch(pair.match(&quot;354aa&quot;)) # Pair of aces. &quot;&lt;Match: '354aa', groups=('a',)&gt;&quot; To find out what card the pair consists of, one could use the group() method of MatchObject in the following manner: &gt;&gt;&gt; &gt;&gt;&gt; pair.match(&quot;717ak&quot;).group(1) '7' # Error because re.match() returns None, which doesn't have a group() method: &gt;&gt;&gt; pair.match(&quot;718ak&quot;).group(1) Traceback (most recent call last): File &quot;&lt;pyshell#23&gt;&quot;, line 1, in &lt;module&gt; re.match(r&quot;.*(.).*\1&quot;, &quot;718ak&quot;).group(1) AttributeError: 'NoneType' object has no attribute 'group' &gt;&gt;&gt; pair.match(&quot;354aa&quot;).group(1) 'a' 7.2.5.2. Simulating scanf()¶ Python does not currently have an equivalent to scanf(). Regular expressions are generally more powerful, though also more verbose, than scanf() format strings. The table below offers some more-or-less equivalent mappings between scanf() format tokens and regular expressions. scanf() Token Regular Expression %c . %5c .{5} %d [-+]?\d+ %e, %E, %f, %g [-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)? %i [-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+) %o [-+]?[0-7]+ %s \S+ %u \d+ %x, %X [-+]?(0[xX])?[\dA-Fa-f]+ To extract the filename and numbers from a string like /usr/sbin/sendmail - 0 errors, 4 warnings you would use a scanf() format like %s - %d errors, %d warnings The equivalent regular expression would be (\S+) - (\d+) errors, (\d+) warnings 7.2.5.3. search() vs. match()¶ Python offers two different primitive operations based on regular expressions: re.match() checks for a match only at the beginning of the string, while re.search() checks for a match anywhere in the string (this is what Perl does by default). For example: &gt;&gt;&gt; &gt;&gt;&gt; re.match(&quot;c&quot;, &quot;abcdef&quot;) # No match &gt;&gt;&gt; re.search(&quot;c&quot;, &quot;abcdef&quot;) # Match &lt;_sre.SRE_Match object at ...&gt; Regular expressions beginning with '^' can be used with search() to restrict the match at the beginning of the string: &gt;&gt;&gt; &gt;&gt;&gt; re.match(&quot;c&quot;, &quot;abcdef&quot;) # No match &gt;&gt;&gt; re.search(&quot;^c&quot;, &quot;abcdef&quot;) # No match &gt;&gt;&gt; re.search(&quot;^a&quot;, &quot;abcdef&quot;) # Match &lt;_sre.SRE_Match object at ...&gt; Note however that in MULTILINE mode match() only matches at the beginning of the string, whereas using search() with a regular expression beginning with '^' will match at the beginning of each line. &gt;&gt;&gt; &gt;&gt;&gt; re.match('X', 'A\nB\nX', re.MULTILINE) # No match &gt;&gt;&gt; re.search('^X', 'A\nB\nX', re.MULTILINE) # Match &lt;_sre.SRE_Match object at ...&gt; 7.2.5.4. Making a Phonebook¶ split() splits a string into a list delimited by the passed pattern. The method is invaluable for converting textual data into data structures that can be easily read and modified by Python as demonstrated in the following example that creates a phonebook. First, here is the input. Normally it may come from a file, here we are using triple-quoted string syntax: &gt;&gt;&gt; &gt;&gt;&gt; text = &quot;&quot;&quot;Ross McFluff: 834.345.1254 155 Elm Street ... ... Ronald Heathmore: 892.345.3428 436 Finley Avenue ... Frank Burger: 925.541.7625 662 South Dogwood Way ... ... ... Heather Albrecht: 548.326.4584 919 Park Place&quot;&quot;&quot; The entries are separated by one or more newlines. Now we convert the string into a list with each nonempty line having its own entry: &gt;&gt;&gt; &gt;&gt;&gt; entries = re.split(&quot;\n+&quot;, text) &gt;&gt;&gt; entries ['Ross McFluff: 834.345.1254 155 Elm Street', 'Ronald Heathmore: 892.345.3428 436 Finley Avenue', 'Frank Burger: 925.541.7625 662 South Dogwood Way', 'Heather Albrecht: 548.326.4584 919 Park Place'] Finally, split each entry into a list with first name, last name, telephone number, and address. We use the maxsplit parameter of split() because the address has spaces, our splitting pattern, in it: &gt;&gt;&gt; &gt;&gt;&gt; [re.split(&quot;:? &quot;, entry, 3) for entry in entries] [['Ross', 'McFluff', '834.345.1254', '155 Elm Street'], ['Ronald', 'Heathmore', '892.345.3428', '436 Finley Avenue'], ['Frank', 'Burger', '925.541.7625', '662 South Dogwood Way'], ['Heather', 'Albrecht', '548.326.4584', '919 Park Place']] The :? pattern matches the colon after the last name, so that it does not occur in the result list. With a maxsplit of 4, we could separate the house number from the street name: &gt;&gt;&gt; &gt;&gt;&gt; [re.split(&quot;:? &quot;, entry, 4) for entry in entries] [['Ross', 'McFluff', '834.345.1254', '155', 'Elm Street'], ['Ronald', 'Heathmore', '892.345.3428', '436', 'Finley Avenue'], ['Frank', 'Burger', '925.541.7625', '662', 'South Dogwood Way'], ['Heather', 'Albrecht', '548.326.4584', '919', 'Park Place']] 7.2.5.5. Text Munging¶ sub() replaces every occurrence of a pattern with a string or the result of a function. This example demonstrates using sub() with a function to “munge” text, or randomize the order of all the characters in each word of a sentence except for the first and last characters: &gt;&gt;&gt; &gt;&gt;&gt; def repl(m): ... inner_word = list(m.group(2)) ... random.shuffle(inner_word) ... return m.group(1) + &quot;&quot;.join(inner_word) + m.group(3) &gt;&gt;&gt; text = &quot;Professor Abdolmalek, please report your absences promptly.&quot; &gt;&gt;&gt; re.sub(r&quot;(\w)(\w+)(\w)&quot;, repl, text) 'Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.' &gt;&gt;&gt; re.sub(r&quot;(\w)(\w+)(\w)&quot;, repl, text) 'Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.' 7.2.5.6. Finding all Adverbs¶ findall() matches all occurrences of a pattern, not just the first one as search() does. For example, if one was a writer and wanted to find all of the adverbs in some text, he or she might use findall() in the following manner: &gt;&gt;&gt; &gt;&gt;&gt; text = &quot;He was carefully disguised but captured quickly by police.&quot; &gt;&gt;&gt; re.findall(r&quot;\w+ly&quot;, text) ['carefully', 'quickly'] 7.2.5.7. Finding all Adverbs and their Positions¶ If one wants more information about all matches of a pattern than the matched text, finditer() is useful as it provides instances of MatchObject instead of strings. Continuing with the previous example, if one was a writer who wanted to find all of the adverbs and their positions in some text, he or she would use finditer() in the following manner: &gt;&gt;&gt; &gt;&gt;&gt; text = &quot;He was carefully disguised but captured quickly by police.&quot; &gt;&gt;&gt; for m in re.finditer(r&quot;\w+ly&quot;, text): ... print '%02d-%02d: %s' % (m.start(), m.end(), m.group(0)) 07-16: carefully 40-47: quickly 7.2.5.8. Raw String Notation¶ Raw string notation (r&quot;text&quot;) keeps regular expressions sane. Without it, every backslash ('\') in a regular expression would have to be prefixed with another one to escape it. For example, the two following lines of code are functionally identical: &gt;&gt;&gt; &gt;&gt;&gt; re.match(r&quot;\W(.)\1\W&quot;, &quot; ff &quot;) &lt;_sre.SRE_Match object at ...&gt; &gt;&gt;&gt; re.match(&quot;\\W(.)\\1\\W&quot;, &quot; ff &quot;) &lt;_sre.SRE_Match object at ...&gt; When one wants to match a literal backslash, it must be escaped in the regular expression. With raw string notation, this means r&quot;\\&quot;. Without raw string notation, one must use &quot;\\\\&quot;, making the following lines of code functionally identical: &gt;&gt;&gt; &gt;&gt;&gt; re.match(r&quot;\\&quot;, r&quot;\\&quot;) &lt;_sre.SRE_Match object at ...&gt; &gt;&gt;&gt; re.match(&quot;\\\\&quot;, r&quot;\\&quot;) &lt;_sre.SRE_Match object at ...&gt; Table Of Contents 7.2. re — Regular expression operations 7.2.1. Regular Expression Syntax 7.2.2. Module Contents 7.2.3. Regular Expression Objects 7.2.4. Match Objects 7.2.5. Examples 7.2.5.1. Checking For a Pair 7.2.5.2. Simulating scanf() 7.2.5.3. search() vs. match() 7.2.5.4. Making a Phonebook 7.2.5.5. Text Munging 7.2.5.6. Finding all Adverbs 7.2.5.7. Finding all Adverbs and their Positions 7.2.5.8. Raw String Notation Previous topic 7.1. string — Common string operations Next topic 7.3. struct — Interpret strings as packed binary data This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 7. String Services » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 25, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705152015#index"
                   NS1:content=" Home About Free eBooks Discussion Deals Donate Join TecMint Linux Training Subscribe Linux Hosting Free WordPress Setup Tecmint: Linux Howtos, Tutorials &amp; Guides News Linux Distro’s Interview Questions Programming Shell Scripting Learn Python Learn Awk Linux Commands Linux Tricks Best Linux Tools Certifications RHCE Exam RHCSA Exam LFCE Exam LFCS Exam Guides Docker Seires Postfix Mail XenServer Series RHEV Series Clustering Series LVM Series RAID Series KVM Series iSCSI Series Zentyal Series Ansible Series Django Series Create GUI Apps Monitoring Tools Nagios Zabbix Cacti Observium Monitorix Collectd Collectl MySQL Monitoring CentOS / Fedora / Linux Commands / Linux Distros / RedHat 20 13 Basic Cat Command Examples in Linux by Ravi Saive | Published: August 25, 2012 | Last Updated: April 9, 2016 Download Your Free eBooks NOW - 10 Free Linux eBooks for Administrators | 4 Free Shell Scripting eBooks The cat (short for “concatenate“) command is one of the most frequently used command in Linux/Unix like operating systems. cat command allows us to create single or multiple files, view contain of file, concatenate files and redirect output in terminal or files. In this article, we are going to find out handy use of cat commands with their examples in Linux. Read Also: Learn How to use ‘cat’ and ‘tac’ (Reverse of cat Command) in Linux Linux Cat Command 13 Basic Linux Cat Commands General Syntax cat [OPTION] [FILE]... 1. Display Contains of File In the below example, it will show contains of /etc/passwd file. # cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin narad:x:500:500::/home/narad:/bin/bash 2. View Contains of Multiple Files in terminal In below example, it will display contains of test and test1 file in terminal. # cat test test1 Hello everybody Hi world, 3. Create a File with Cat Command We will create a file called test2 file with below command. # cat &gt;test2 Awaits input from user, type desired text and press CTRL+D (hold down Ctrl Key and type ‘d‘) to exit. The text will be written in test2 file. You can see contains of file with following cat command. # cat test2 hello everyone, how do you do? 4. Use Cat Command with More &amp; Less Options If file having large number of contains that won’t fit in output terminal and screen scrolls up very fast, we can use parameters more and less with cat command as show above. # cat song.txt | more # cat song.txt | less 5. Display Line Numbers in File With -n option you could see the line numbers of a file song.txt in the output terminal. # cat -n song.txt 1 &quot;Heal The World&quot; 2 There's A Place In 3 Your Heart 4 And I Know That It Is Love 5 And This Place Could 6 Be Much 7 Brighter Than Tomorrow 8 And If You Really Try 9 You'll Find There's No Need 10 To Cry 11 In This Place You'll Feel 12 There's No Hurt Or Sorrow 6. Display $ at the End of File In the below, you can see with -e option that ‘$‘ is shows at the end of line and also in space showing ‘$‘ if there is any gap between paragraphs. This options is useful to squeeze multiple lines in a single line. # cat -e test hello everyone, how do you do?$ $ Hey, am fine.$ How's your training going on?$ $ 7. Display Tab separated Lines in File In the below output, we could see TAB space is filled up with ‘^I‘ character. # cat -T test hello ^Ieveryone, how do you do? Hey, ^Iam fine. ^I^IHow's your training ^Igoing on? Let's do ^Isome practice in Linux. 8. Display Multiple Files at Once In the below example we have three files test, test1 and test2 and able to view the contains of those file as shown above. We need to separate each file with ; (semi colon). # cat test; cat test1; cat test2 This is test file This is test1 file. This is test2 file. 9. Use Standard Output with Redirection Operator We can redirect standard output of a file into a new file else existing file with ‘&gt;‘ (greater than) symbol. Careful, existing contains of test1 will be overwritten by contains of test file. # cat test &gt; test1 10. Appending Standard Output with Redirection Operator Appends in existing file with ‘&gt;&gt;‘ (double greater than) symbol. Here, contains of test file will be appended at the end of test1 file. # cat test &gt;&gt; test1 11. Redirecting Standard Input with Redirection Operator When you use the redirect with standard input ‘&lt;‘ (less than symbol), it use file name test2 as a input for a command and output will be shown in a terminal. # cat &lt; test2 This is test2 file. 12. Redirecting Multiple Files Contain in a Single File This will create a file called test3 and all output will be redirected in a newly created file. # cat test test1 test2 &gt; test3 13. Sorting Contains of Multiple Files in a Single File This will create a file test4 and output of cat command is piped to sort and result will be redirected in a newly created file. # cat test test1 test2 test3 | sort &gt; test4 This article shows the basic commands that may help you to explore cat command. You may refer man page of cat command if you want to know more options. In out next article we will cover more advanced cat commands. Please share it if you find this article useful through our comment box below. Share + 20 comments If You Appreciate What We Do Here On TecMint, You Should Consider: Stay Connected to: Twitter | Facebook | Google Plus Subscribe to our email updates: Sign Up Now Use our Linode referral link if you plan to buy VPS (it starts at only $10/month). Support us via PayPal donate - Make a Donation Support us by purchasing our premium books in PDF format. Support us by taking our online Linux courses We are thankful for your never ending support. View all Posts Ravi Saive I am Ravi Saive, creator of TecMint. A Computer Geek and Linux Guru who loves to share tricks and tips on Internet. Most Of My Servers runs on Open Source Platform called Linux. Follow Me: Twitter, Facebook and Google+ Your name can also be listed here. Got a tip? Submit it here to become an TecMint author. Receive Your Free Complimentary eBook NOW! - 4 Promising Linux Distros To Look Forward To In 2015 Download Free Linux eBooks Advanced Bash-Scripting Guide Linux Bible A Newbie's Getting Started Guide to Linux Introduction to Linux - A Hands on Guide Next story Install Skype 4.0 for RHEL/CentOS 6.3 and Fedora 17/16 Previous story Install Fping ICMP Program on RHEL/CentOS 6/5/4 You may also like... Register RHEL 7 in Red Hat 4 How to Register and Enable Red Hat Subscription, Repositories and Updates for RHEL 7.0 Server 5 Jul, 2014 Dtrx Linux Archive Tool 8 Dtrx – An Intelligent Archive Extraction (tar, zip, cpio, rpm, deb, rar) Tool for Linux 7 Jan, 2014 Install LEMP in Fedora 22 4 Installing LEMP (Linux, Nginx, MariaDB and PHP) on Fedora 22 17 Jun, 2015 20 Responses Comments20 Pingbacks0 cecille says: April 6, 2016 at 4:16 am can somebody please explain this code below – the line that starts with cat. it seems like the code does not work since our report still prints as portrait, which may be the default printer setup for orientation. we even manually triggered the code but it still did not work. your help is appreciated. thanks so much… ISP_PRNTR=mcsprt ; export ISP_PRNTR #Extract the last 3 characters (file extension) ext=`echo $1|awk -F . ‘{print $NF}’` #Extract the file name without extension file=`basename $1` file=`echo $file|sed ‘s/\.[^.]*$//’` cat ${1} | /usr/bin/acroread -toPostScript | lp -d $ISP_PRNTR -o landscape Reply Aaron Kili K says: April 6, 2016 at 12:25 pm From the code: This part of the code has not been used in the last command that prints the file, though it only deals with the file name which should not affect the layout during printing. #Extract the last 3 characters (file extension) ext=`echo $1|awk -F . ‘{print $NF}’` #Extract the file name without extension file=`basename $1` file=`echo $file|sed ‘s/\.[^.]*$//’` The variable file has not been used in command; cat ${1} | /usr/bin/acroread -toPostScript | lp -d $ISP_PRNTR -o landscape Instead the original filename, $1 has been used. It could be a problems of printer specific options that are required. Reply cecille says: April 6, 2016 at 8:16 pm Thanks so much… Reply satishchow says: December 16, 2015 at 8:57 am while viewing large file using cat command. how to move immediately to end of the file and how to exit from the file. I used Cntrl+d. But couldn’t exit. and If I need to edit the file, how can I edit using command [vi]. Reply Ravi Saive says: December 16, 2015 at 1:07 pm @Satish, The cat command will list the all content of the file (entire file) on the screen itself you don’t need to scroll up or down. If the file is too long, it quickly moves past you on the screen. To prevent this, use the following command: # cat filename.txt | less If you want to edit the file, open the file with vi editor, press ‘i’ to insert mode for editing. # vi filename.txt If you still don’t understand, I suggest you to read our Vi/Vim tricks guides here. http://www.tecmint.com/vi-editor-usage/ http://www.tecmint.com/learn-vi-and-vim-editor-tips-and-tricks-in-linux/ http://www.tecmint.com/how-to-use-vi-and-vim-editor-in-linux/ displays the contents of an entire file on the screen Reply satish says: November 19, 2015 at 12:54 pm cat test* &gt;&gt;some.txt Reply Sieyongdong says: May 14, 2015 at 5:53 pm thank u so much for sharing this ! It’s very useful. Reply susheel says: October 25, 2013 at 7:49 am i think cat test and cat &lt; test both are same right? if any difference please tell me….. Reply Braden says: February 2, 2014 at 7:13 am They are two very different methods of achieving the same result. ‘cat file’ takes file as an argument, opening the file and displaying its contents ‘cat &lt; file' opens file, and redirects its contents to stdin, so the cat command will take the contents of the file as if they were being typed in by a keyboard. To better understand what's going on, try this: in terminal 1: $ mkfifo test $ cat test In terminal 2, start typing. Every time you hit enter, you will see the text you just typed appear in terminal 1. Hit Ctrl+D and it will kill both the running cats. Reply Braden says: February 2, 2014 at 7:16 am I don’t know why it deleted half my text, but let’s try this again. Terminal 1 should have a cat command, and terminal 2 should also have a cat command. If you don’t see two cat commands, then a bot is filtering my comment. Terminal 1: $ mkfifo test $ cat test Now you can start typing into terminal 2. Reply Braden says: February 2, 2014 at 7:20 am Ah, I figured out what’s going on: It thinks I’m trying to type HTML. One more time: T1: $ mkfifo test $ cat &lt; test T2: $cat &gt; test Reply Braden says: February 2, 2014 at 7:32 am Moderators: If you see this chain of self-replies, please fix it and edit the original reply to convey what I’m trying to convey. If you didn’t already figure out what’s going on, I used &amp;lt; and &amp;gt; to generate &lt; and &gt;, otherwise, “this &lt;te&gt;xt” becomes “this xt” because it is interpreted as a tag. Also, the ability to edit comments would be much welcomed. I hate to mess up a discussion thread with a million self-replies that try to figure out why X didn’t work. Thanks Gul zaman Jamali says: July 9, 2013 at 8:36 pm Excellent information for Linux users.. Reply arush says: July 9, 2013 at 4:16 pm Can you please elaborate point number 11 Reply Braden says: February 2, 2014 at 6:53 am #11 is total B.S. ‘cat &lt; file' does not take 'file' as an argument. What 'cat &lt; file' does, is use the contents (not &quot;contains&quot;) of file as the input for cat, taking the place of the keyboard. It is functionally equivalent to 'cat file', and is thus completely redundant. Reply deepak says: October 27, 2014 at 12:26 pm you are absolutely right. I wasted my time on that command. #11 is crap Reply Ariel Chiong says: January 22, 2013 at 3:08 am Q. Hi All, Can you show me what is the command or terminal to use with this question “Search lines which contains alpha-numeric words( combination of alphabets and number) and copy those lines is sorted order to /root/lines (output should not contain any blank lines)”. for example I have a file called Searchline.txt. thank you. Reply Chris F.A. Johnson says: November 1, 2012 at 12:55 am Why “cat test; cat test1; cat test2” ? Why not “cat test test1 test2” ? Why “cat song.txt | more” instead of “more song.txt”? Reply satish says: November 19, 2015 at 12:50 pm why can’t “cat test &gt;&gt;some.txt*” Reply satish says: November 19, 2015 at 12:51 pm Sorry it is cat test* &gt;&gt;some.txt Reply Got something to say? Join the discussion. Cancel reply Your email address will not be published. Required fields are marked * Comment Name * Email * Website Notify me of followup comments via e-mail. You can also subscribe without commenting. I TecMint : BEGINNER'S GUIDE FOR LINUX Start learning Linux in minutes Vi/Vim Editor BEGINNER'S GUIDE Learn vi/vim as a Full Text Editor Advertise Here Linux Foundation Certification Exam Study Guide to LFCS and LFCE Popular Posts Recent Comments How to Add Linux Host to Nagios Monitoring Server Using NRPE Plugin Nagios 4.0.1 Released – Install on RHEL/CentOS 6.x/5.x and Fedora 19/18/17 Install Cacti (Network Monitoring) on RHEL/CentOS 7.x/6.x/5.x and Fedora 21-12 Google Chrome 51 Released – Install on RHEL/CentOS 7/6 and Fedora 23-15 Wine 1.8 Released After 17 Months of Development – Install on RHEL/CentOS and Fedora Install Latest Apache 2.4, MySQL 5.5/MariaDB 10.1 and PHP 5.5/5.6 on RHEL/CentOS 7/6 &amp; Fedora 24-18 Migdad says: This is the best Linux tutorial I have found till now,... Mohammad says: Qt creator is free Gareth says: One caveat on the way the SELinux tip was worded: just... Ravi Saive says: @Dan, We've added Emacs editor to the list... Karthees says: Very very useful Thank You Aaron Kili K says: Sorry that i did not get back, in the mean time,... RedHat RHCSA and RHCE Certification Exam Study Ebook Linux System Administrator Bundle with 7-Courses (96% off) Add to Cart - $69 Ending In: 5 days Linux Power User Bundle with 5-Courses (97% off) Add to Cart - $19 Ending In: 6 days Download Free Linux eBooks Complete Linux Command Line Cheat Sheet The GNU/Linux Advanced Administration Guide Securing &amp; Optimizing Linux Servers Linux Patch Management: Keeping Linux Up To Date Introduction to Linux – A Hands on Guide Understanding the Linux® Virtual Memory Manager Linux Bible – Packed with Updates and Exercises A Newbie’s Getting Started Guide to Linux Linux from Scratch – Create Your Own Linux OS Linux Shell Scripting Cookbook, Second Edition Securing &amp; Optimizing Linux: The Hacking Solution User Mode Linux – Understanding and Administration INSTANT UPDATES FOR NEW POSTS Linux Monitoring Tools Icinga: A Next Generation Open Source ‘Linux Server Monitoring’ Tool for RHEL/CentOS 7.0 6 Aug, 2014 20 Netstat Commands for Linux Network Management 8 Aug, 2012 Observium: A Complete Network Management and Monitoring System for RHEL/CentOS 1 Jul, 2014 NetHogs – Monitor Per Process Network Bandwidth Usage in Real Time 11 Mar, 2013 Linux Interview Questions 10 Useful Random Linux Interview Questions and Answers 22 Feb, 2014 Practical Interview Questions and Answers on Linux Shell Scripting 7 Jun, 2014 Shilpa Nair Shares Her Interview Experience on RedHat Linux Package Management 23 Jun, 2015 10 Core Linux Interview Questions and Answers 26 Jan, 2014 Open Source Tools Firefox 47 Released – Install on RedHat and Debian Based Systems 13 May, 2015 Install ImageMagick (Image Manipulation) Tool on RHEL/CentOS and Fedora 13 Apr, 2013 The Story Behind ‘init’ and ‘systemd’: Why ‘init’ Needed to be Replaced with ‘systemd’ in Linux 3 Sep, 2014 Install Latest Nodejs and NPM Version in Linux Systems 3 Jun, 2016 Donate to TecMint Contact Us Advertise on TecMint Linux Services Copyright Policy Privacy Policy Career Linux Admin Jobs Tecmint: Linux Howtos, Tutorials &amp; Guides © 2016. All Rights Reserved. This work is licensed under a (cc) BY-NC The material in this site cannot be republished either online or offline, without our permission. Join Over 150K+ Linux Users 100,756 5,113 36,418 Enter your email to get latest Linux Howto's 51 Useful Lesser Known Commands for Linux Users 25 Hardening Security Tips for Linux Servers 60 Commands of Linux : A Guide from Newbies to System Administrator 20 Command Line Tools to Monitor Linux Performance 18 Tar Command Examples in Linux 20 Linux YUM (Yellowdog Updater, Modified) Commands 25 Useful Basic Commands of APT-GET and APT-CACHE 20 Funny Commands of Linux or Linux is Fun in Terminal Ebook: Introducing the RHCSA and RHCE Exam Preparation Guide Preparation for the LFCS (Linux Fundation Certified SysAdmin) Exam Preparation for the LFCE (Linux Fundation Certified Engineer) Exam 10 Useful Free Linux eBooks for Newbies and Administrators 4 Free Shell Scripting eBooks for Newbies and Administrators Ads byGoogle ► Unix Linux ► Linux Basic ► Linux Test ► Linux Shell "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160729153550#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Adafruit Logo 0 Search SHOP BLOG LEARN FORUMS VIDEOS SIGN IN CLOSE MENU 0 Items Sign In Search Adafruit Logo SHOP BLOG LEARN FORUMS VIDEOS Introducing the Raspberry Pi Zero 65mm x 30mm x 5mm of Pi Power A Tour of the Pi Zero Setting up your SD card Making an SD Card – Using a Windows Vista / 7 Making an SD Card – Using a Mac Video Outputs Audio Outputs GPIO header options Single Page Download PDF Contributors lady ada Feedback? Corrections? RASPBERRY PI Setting up your SD card by lady ada raspberry_pi_1537-02.jpg Before you can power up your Pi Zero, you will need to program in the SD card with an Operating System Much like your computer has Windows, Mac OS X or Linux on it to make it run, the Raspberry Pi needs something to help it boot and run software. That software is Raspbian Linux (a flavor of Debian Linux). You can check out our tutorial on What Is Linux if you're curious to learn more If you just want to get rockin, grab the latest Raspbian Jessie operating system from the Raspberry Pi downloads page Just click the button below! Download Latest Raspbian Raspbian Wheezy 5-15 or earlier do not support the Zero! Try Jessie instead raspberry_pi_jessie.png Once downloaded, unzip the zip file, the full image is about 4.5 Gigabytes. Next up grab your SD or micro SD card reader and plug it into your computer raspberry_pi_939-02.jpg Now follow our guide for Windows or Mac OS X to burn the image raspberry_pi_microsd.jpg Once you're done, plug the micro SD card into the slot indicated. It will fit snugly in place but you won't hear or feel a 'click' A TOUR OF THE PI ZERO MAKING AN SD CARD – USING A WINDOWS VISTA / 7 Last updated on 2015-11-25 at 11.52.06 PM Published on 2015-11-26 at 02.00.24 AM 2816-08.jpg Raspberry Pi Zero Starter Pack - Includes Pi Zero v1.3 $54.95 Add To Cart 2817-03.jpg Raspberry Pi Zero Budget Pack - Includes Pi Zero v1.3 $24.95 Add To Cart 2820-00.jpg 4GB SD Card w/ Jessie Lite $9.95 Add To Cart 2767-00.jpg 8GB SD Card with Raspbian Jessie Operating System $11.95 Add To Cart 501-05.jpg 5V 1A (1000mA) USB port power supply - UL Listed $5.95 Add To Cart 1995-02.jpg 5V 2.4A Switching Power Supply w/ 20AWG 6' MicroUSB Cable $7.95 Add To Cart 2819-00.jpg Mini HDMI Plug to Standard HDMI Jack Adapter $2.95 Add To Cart 1099-00.jpg USB OTG Host Cable - MicroB OTG male to A female $2.50 Add To Cart 2822-00.jpg Break-away 0.1&quot; 2x20-pin Strip Dual Male Header $0.95 Add To Cart 2222-00.jpg GPIO Header for Raspberry Pi A+/B+/Pi 2/Pi 3 $1.50 Add To Cart 2823-00.jpg 0.1&quot; 2x20-pin Strip Right Angle Female Header $1.50 Add To Cart 961-07.jpg USB 2.0 Powered Hub - 7 Ports with 5V 2A Power Supply $21.95 Add To Cart 2297-06.jpg 5V 2A Power Supply w/ 20AWG 6' MicroUSB Cable - International $14.95 Add To Cart ADD ALL TO CART RELATED GUIDES Raspberry Pi Zero NPR One Radio If you are a NPR nerd, this project is for you. by Todd Treece Your browser does not support the video tag. Fill your house with your favorite NPR shows and stories by building your own NPR radio. FEATURED Introducing the Raspberry Pi Model B+ Its the freshest new Raspberry Pi, let's check it out! by lady ada This tutorial will give you a tour around the latest Raspberry Pi computer, detailing all changes and updates! FEATURED Raspberry Pi as an Ad Blocking Access Point Ads? What Ads? by Justin Cooper Advertising is prevalent on the web. It's a necessary evil at times, but can also be greatly overused by companies slowing down your page loads, and bringing your connected devices to a crawl. Learn how to block these ads using your Raspberry Pi. Raspberry Pi as a Media Center Turn your Raspberry Pi into a media center by Simon Monk he low cost and full HD video playing capabilities of the Raspberry Pi make it ideal for building your own media center. This will allow you to play music and videos through your Raspberry Pi onto a TV. × OUT OF STOCK NOTIFICATION YOUR NAME YOUR EMAIL You have been successfully subscribed to the Notification List for this product and will therefore receive an e-mail from us when it is back in stock! For security reasons, an e-mail has been sent to you acknowledging your subscription. Please remember that this subscription will not result in you receiving any e-mail from us about anything other than the restocking of this item. If, for any reason, you would like to unsubscribe from the Notification List for this product you will find details of how to do so in the e-mail that has just been sent to you! CLOSE NOTIFY ME CONTACT SUPPORT DISTRIBUTORS EDUCATORS JOBS FAQ SHIPPING &amp; RETURNS TERMS OF SERVICE PRIVACY &amp; LEGAL ABOUT US ENGINEERED IN NYC Adafruit ® &quot;Confusion and clutter are the failure of design, not the attributes of information&quot; - Edward Tufte Seals 2x " />
  <RDF:Description RDF:about="urn:scrapbook:item20160818121224#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Donate0 OpenSCAD The Programmers Solid 3D CAD Modeller Home About News Downloads Documentation Gallery Community GitHub Gallery OpenSCAD Gallery OpenSCAD Gallery Mendel 90 by nophead Prusa Mendel iteration3 by Josef Prusa Metamáquina 2 by Metamáquina Cyclone PCB Factory by Carlos García Saura Tapster - Mobile Automation Robot by Jason Huggins Customizable FlexiRoast Wooden Pen Stand by funlab Automatic Transmission Model by emmett Custom Sleeve for Coffee and Tea Cups by sethmoser OpenSCAD Helical Gears by catarina Customizable iPhone Case by MakerBot Customizable Stacking Container by walter Square Vase, Cup, and Bracelet Generator by Eckerput Parametric pulley - lots of tooth profiles by droftarts Another compartment box by obijuan Screwless Heart Gears by emmett Stretchy Bracelet by emmett Preassembled Secret Heart Box by emmett Blossoming Lamp by emmett Customizable Cube Gears by emmett Parametric Music Box by wizard23 HardyGraph - Dynamical generated and fully printed 3D-Printer by Hardy GoPro Hero Macro Lens Mount by edabot Parametric Simple &amp; Smart Spool Holder by SpoonUnit Topre key by foxdie86 899 " />
  <RDF:Description RDF:about="urn:scrapbook:item20160705162718#index"
                   NS1:content=" Navigation index next | previous | Embedded Software Update Documentation 2016.07 documentation » SWUpdate: software update for embedded system¶ Overview¶ This project is thought to help to update an embedded system from a storage media or from network. However, it should be mainly considered as a framework, where further protocols or installers (in SWUpdate they are called handlers) can be easily added to the application. One use case is to update from an external local media, as USB-Pen or SD-Card. In this case, the update is done without any intervention by an operator: it is thought as “one-key-update”, and the software is started at reset simply pressing a key (or in any way that can be recognized by the target), making all checks automatically. At the end, the updating process reports only the status to the operator (successful or failed). The output can be displayed on a LCD using the frame-buffer device or directed to a serial line (Linux console). It is generally used in the single copy approach, running in a initrd (recipes are provided to generate with Yocto). However, it is possible to use it in a double-copy approach by use of Software collections. If started for a remote update, SWUpdate starts an embedded Web-server and waits for requests. The operator must upload a suitable image, that SWUpdate checks and then install. All output is notified to the operator’s browser via AJAX notifications. Single image delivery¶ The main concept is that the manufacturer delivers a single big image. All single images are packed together (cpio was chosen for its simplicity and because can be streamed) together with an additional file (sw-description), that contains meta information about each single image. The format of sw-description can be customized: SWUpdate can be configured to use its internal parser (based on libconfig), or calling an external parser in LUA. _images/image_format.png Changing the rules to accept images with an external parser, let to extend to new image types and how they are installed. In fact, the scope of the parser is to retrieve which single images must be installed and how. SWUpdate implements “handlers” to install a single image: there are handlers to install images into UBI volumes, or to a SD card, a CFI Flash, and so on. It is then easy to add an own handler if a very special installer is required. For example we can think at a project with a main processor and one or several micro-controllers. Let’s say for simplicity that the main processor communicates with the micro-controllers via UARTS using a proprietary protocol. The software on the micro-controllers can be updated using the proprietary protocol. It is possible to extend SWUpdate writing a handler, that implements the part of the proprietary protocol to perform the upgrade on the micro-controller. The parser must recognize which image must be installed with the new handler, and SWUpdate will call the handler during the installation process. Handling configuration differences¶ The concept can be extended to deliver a single image containing the release for multiple devices. Each device has its own kernel, dtb and root filesystem, or they can share some parts. Currently this is managed (and already used in a real project) by writing an own parser, that checks which images must be installed after recognizing which is the device where software is running. Because the external parser can be written in LUA and it is completely customizable, everybody can set his own rules. For this specific example, the sw-description is written in XML format, with tags identifying the images for each device. To run it, the liblxp library is needed. &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;software version=&quot;1.0&quot;&gt; &lt;name&gt;Update Image&lt;/name&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;description&gt;Firmware for XXXXX Project&lt;/description&gt; &lt;images&gt; &lt;image device=&quot;firstdevice&quot; version=&quot;0.9&quot;&gt; &lt;stream name=&quot;dev1-uImage&quot; type=&quot;ubivol&quot; volume=&quot;kernel&quot; /&gt; &lt;stream name=&quot;dev1.dtb&quot; type=&quot;ubivol&quot; volume=&quot;dtb&quot; /&gt; &lt;stream name=&quot;dev1-rootfs.ubifs&quot; type=&quot;ubivol&quot; volume=&quot;rootfs&quot;/&gt; &lt;stream name=&quot;dev1-uboot-env&quot; type=&quot;uboot&quot; /&gt; &lt;stream name=&quot;raw_vfat&quot; type=&quot;raw&quot; dest=&quot;/dev/mmcblk0p4&quot; /&gt; &lt;stream name=&quot;sdcard.lua&quot; type=&quot;lua&quot; /&gt; &lt;/image&gt; &lt;image device=&quot;seconddevice&quot; version=&quot;0.9&quot;&gt; &lt;stream name=&quot;dev2-uImage&quot; type=&quot;ubivol&quot; volume=&quot;kernel&quot; /&gt; &lt;stream name=&quot;dev2.dtb&quot; rev=&quot;0.9&quot; type=&quot;ubivol&quot; volume=&quot;dtb&quot; /&gt; &lt;stream name=&quot;dev2-rootfs.ubifs&quot; type=&quot;ubivol&quot; volume=&quot;rootfs&quot;/&gt; &lt;/image&gt; &lt;/images&gt; &lt;/software&gt; The parser for this is in the /examples directory. By identifying which is the running device, the parser return a table containing the images that must be installed and their associated handlers. By reading the delivered image, SWUpdate will ignore all images that are not in the list processed by the parser. In this way, it is possible to have a single delivered image for the update of multiple devices. Multiple devices are supported by the default parser, too. software = { version = &quot;0.1.0&quot;; target-1 = { images: ( { ... } ); }; target-2 = { images: ( { ... } ); }; } In this way, it is possible to have a single image providing software for each device you have. By default the hardware information is extracted from /etc/hwrevision file. The file should contain a single line in the following format: &lt;boardname&gt; &lt;revision&gt; Where: &lt;revision&gt; will be used for matching with hardware compatibility list &lt;boardname&gt; can be used for grouping board specific settigns Software collections¶ Software collections and operation modes can be used to implement a dual copy strategy. The simplest case is to define two installation locations for the firmware image and call SWUpdate selecting the appropriate image. software = { version = &quot;0.1.0&quot;; stable = { copy-1: { images: ( { device = &quot;/dev/mtd4&quot; ... } ); } copy-2: { images: ( { device = &quot;/dev/mtd5&quot; ... } ); } }; } In this way it is possible to specify that copy-1 gets installed to /dev/mtd4, while copy-2 to /dev/mtd5. By properly selecting the installation locations, SWUpdate will update the firmware in the other slot. The method of image selection is out of the scope of SWUpdate and user is responsible for calling SWUpdate passing proper settings. Streaming feature¶ SWUpdate is thought to be able to stream the received image directly into the target, without any temporary copy. In fact, the single installer (handler) receive as input the file descriptor set at the beginning of the image that must be installed. The feature can be set on image basis, that means that a user can decide which partial images should be streamed. If not streamed (see installed-directly flag), files are temporary extracted into /tmp. Of course, by streaming it is not possible to make checks on the whole delivered software before installing. The temporary copy is done only when updated from network. When the image is stored on an external storage, there is no need of that copy. List of supported features¶ Install on embedded Media (eMMC, SD, Raw NAND, NOR and SPI-NOR flashes) check if a image is available. The image is built in a specified format (cpio) and it must contain a file describing the software that must be updated. SWUpdate is thought to update UBI volumes (mainly for NAND, but not only) and images on devices. Passing a whole image can still be updated as a partition on the SD card, or a MTD partition. new partition schema. This is bound with UBI volume. SWUpdate can recreate UBI volumes, resizing them and copying the new software. A special UBI volume with the name “data” is saved and restored after repartitioning with all data it contains, to maintain user’s data. support for compressed images, using the zlib library. tarball (tgz file) are supported. support for partitioned USB-pen or unpartitioned (mainly used by Windows). support for updating a single file inside a filesystem. The filesystem where to put the file must be described. checksum for the single components of an image use a structured language to describe the image. This is done using the libconfig library as default parser, that uses a JSON-like description. use custom’s choice for the description of the image. It is possible to write an own parser using the LUA language. An example using a XML description in LUA is provided in the examples directory. Support for setting / erasing U-Boot variables Support for preinstall scripts. They run before updating the images Support for postinstall scripts. They run after updating the images. Network installer using an embedded Web-server (Mongoose Server was chosen, in the version under LUA license). A different Web-server can be used. Multiple interfaces for getting software (local Storage, integrated Web-Server, remote Server) Can be configured to check for compatibility between software and hardware revisions. The software image must contain an entry declaring on which HW revision the software is allowed to run. SWUpdate refuses to install if the compatibility is not verified. support for image extraction. A manufacturer can require to have a single image that contains the software for more as one device. This simplifies the manufacturer’s management and reduces their administrative costs having a single software product. SWUpdate receives the software as stream without temporary storing, and extracts only the required components for the device to be installed. allow custom handlers for installing FPGA firmware, micro-controller firmware via custom protocols. Features are enabled / disabled using “make menuconfig”. (Kbuild is inherited from busybox project) Power-Off safe Images fully streamed¶ In case of remote update, SWUpdate extracts relevant images from the stream and copy them into /tmp before calling the handlers. This guarantee that an update is initiated only if all parts are present and correct. However, on some systems with less resources, the amount of RAM to copy the images could be not enough, for example if the filesystem on an attached SD Card must be updated. In this case, it will help if the images are installed directly as stream by the corresponding handler, without temporary copies. Not all handlers support to stream directly into the target. Streaming with zero-copy is enabled by setting the flag “installed-directly” in the descriptionü of the single image. Configuration and build¶ Requirements¶ There are only a few libraries that are required to compile SWUpdate. mtd-utils: internally, mtd-utils generates libmtd and libubi. They are commonly not exported and not installed, but they are linked by SWUpdate to reuse the same functions for upgrading MTD and UBI volumes. openssl: required with the Webserver LUA: liblua and the development headers. libz, libcrypto are always linked. libconfig: it is used by the default parser. libarchive (optional) for archive handler libjson (optional) for JSON parser New handlers can add some other libraries to the requirement list - check if you need all handlers in case you get build errors, and drop what you do not need. Building with Yocto¶ A meta-SWUpdate layer is provided. It contains the required changes for mtd-utils and for generating LUA. Using meta-SWUpdate is a straightforward process. Firstly, clone meta-SWUpdate from: Add meta-SWUpdate as usual to your bblayers.conf. In meta-SWUpdate there is a recipe to generate a initrd with a rescue system with SWUpdate. Use: MACHINE=&lt;your machine&gt; bitbake swupdate-image You will find the result in your tmp/deploy/&lt;your machine&gt; directory. How to install and start a initrd is very target specific - please check in the documentation of your bootloader. Configuring SWUpdate¶ SWUpdate is configurable via “make menuconfig”. The small footprint is reached using the internal parser and disabling the web-server. Any option has a small help describing its usage. In the default configuration, many options are already activated. To configure the options: make menuconfig Building¶ to cross-compile, set the CC and CXX variables before running make. It is also possible to set the cross-compiler prefix as option with make menuconfig. generate the code make The result is the binary “SWUpdate”. Running SWUpdate¶ What is expected from a SWUpdate run¶ A run of SWUpdate consists mainly of the following steps: check for media (USB-pen) check for an image file. The extension must be .swu extracts sw-description from the image and verifies it It parses sw-description creating a raw description in RAM about the activities that must be performed. Reads the cpio archive and proofs the checksum of each single file SWUpdate stops if the archive is not complete verified check for hardware-software compatibility, if any, reading hardware revision from hardware and matching with the table in sw-description. check that all components described in sw-description are really in the cpio archive. modify partitions, if required. This consists in a resize of UBI volumes, not a resize of MTD partition. A volume with the name “data” is saved and restored after resizing. runs pre-install scripts iterates through all images and call the corresponding handler for installing on target. runs post-install scripts update u-boot environment, if changes are specified in sw-description. reports the status to the operator (stdout) The first step that fails, stops the entire procedure and an error is reported. To start SWUpdate expecting the image from a file: swupdate -i &lt;filename&gt; To start with the embedded web-server: swupdate -w &quot;&lt;web-server options&gt;&quot; The main important parameter for the web-server is “document_root”. SWUpdate -w &quot;-document_root ./www&quot; The embedded web-server is taken from the Mongoose project (last release with LUA license). Additional parameters can be found in mongoose documentation. This uses as website the pages delivered with the code. Of course, they can be customized and replaced. The website uses AJAX to communicate with SWUpdate, and to show the progress of the update to the operator. The default port of the Web-server is 8080. You can then connect to the target with: http://&lt;target_ip&gt;:8080 If it works, the start page should be displayed as in next figure. _images/website.png If a correct image is downloaded, SWUpdate starts to process the received image. All notifications are sent back to the browser. SWUpdate provides a mechanism to send to a receiver the progress of the installation. In fact, SWUpdate takes a list of objects that registers itself with the application and they will be informed any time the application calls the notify() function. This allows also for self-written handlers to inform the upper layers about error conditions or simply return the status. It is then simply to add own receivers to implement customized way to display the results: displaying on a LCD (if the target has one), or sending back to another device via network. An example of the notifications sent back to the browser is in the next figure: _images/webprogress.png Software collections can be specified by passing –select command line option. Assuming sw-description file contains a collection named stable, with alt installation location, SWUpdate can be called like this: swupdate --select stable,alt Command line parameters¶ Parameter Type Description -b &lt;string&gt; string Active only if CONFIG_MTD is set It allows to blacklist MTDs when SWUpdate searches for UBI volumes. Example: U-Boot and environment in MTD0-1: swupdate -b “0 1” -d &lt;URL&gt; string Active only if CONFIG_DOWNLOAD is set This is the URL where new software is pulled. URL is a link to a valid .swu image -r &lt;retries&gt; integer Active only if CONFIG_DOWNLOAD is set Number of retries before a download is considered broken. With “-r 0”, SWUpdate will not stop until a valid software is loaded. -e &lt;sel&gt; string sel is in the format &lt;software&gt;,&lt;mode&gt; It allows to find a subset of rules in the sw-description file. With it, multiple rules are allowed. One common usage is in case of the dual copy approach. Example: -e “stable, copy1” ==&gt; install on copy1 -e “stable, copy2” ==&gt; install on copy2 -h run usage with help -k string Active if CONFIG_SIGNED is set Filename with the public key -s run SWUpdate in daemon mode -i &lt;file&gt; string run SWUpdate with a local .swu file -v activate verbose output -w &lt;parms&gt; string start internal webserver and pass to it a command line string. -u &lt;parms&gt; string start internal suricatta client daemon and pass to it a command line string. see suricatta’s documentation for details. -H &lt;board:rev&gt; string set board name and Hardware revision -t &lt;timeout&gt; integer Timeout for connection lost when downloading Changes in boot-loader code¶ The SWUpdate consists of kernel and a root filesystem (image) that must be started by the boot-loader. In case using U-Boot, the following mechanism can be implemented: U-Boot checks if a sw update is required (check gpio, serial console, etc.). the script “altbootcmd” sets the rules to start SWUpdate in case SWUpdate is required, u-boot run the script “altbootcmd” Is it safe to change U-Boot environment ? Well, it is, but U-Boot must be configured correctly. U-Boot supports two copies of the environment to be power-off safe during a an evironment update. The board’s configuration file must have defined CONFIG_ENV_OFFSET_REDUND or CONFIG_ENV_ADDR_REDUND. Check in U-Boot documentation for these constants and how to use them. There are a further enhancement that can be optionally integrated into u-boot to make the system safer. The most important I will suggest is to add support for boot counter in u-boot (documentation is in U-Boot docs). This allows U-Boot to track for attempts to successfully run the application, and if the boot counter is greater as a limit, can start automatically SWUpdate to replace a corrupt software. Building a single image¶ cpio is used as container for its simplicity. The resulting image is very simple to be built. The file describing the images (“sw-description”, but the name can be configured) must be the first file in the cpio archive. To produce an image, a script like this can be used: CONTAINER_VER=&quot;1.0&quot; PRODUCT_NAME=&quot;my-software&quot; FILES=&quot;sw-description image1.ubifs \ image2.gz.u-boot uImage.bin myfile sdcard.img&quot; for i in $FILES;do echo $i;done | cpio -ov -H crc &gt; ${PRODUCT_NAME}_${CONTAINER_VER}.swu The single images can be put in any order inside the cpio container, with the exception of sw-description, that must be the first one. Table Of Contents SWUpdate: software update for embedded system Overview Single image delivery Handling configuration differences Software collections Streaming feature List of supported features Images fully streamed Configuration and build Requirements Building with Yocto Configuring SWUpdate Building Running SWUpdate What is expected from a SWUpdate run Command line parameters Changes in boot-loader code Building a single image Previous topic Software Management on embedded systems Next topic Suricatta daemon mode This Page Show Source Quick search Enter search terms or a module, class or function name. Navigation index next | previous | Embedded Software Update Documentation 2016.07 documentation » © Copyright 2013-2016, Stefano Babic. Created using Sphinx 1.2.2. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630095043#index"
                   NS1:content=" Take a look at this article. Although none is a 100% replacement of onenote functionality, you'll find there are some impressive apps. tl;dr Here's the list: BasKet is a note taking software that has a number of features for taking notes and organizing data. Zim Wiki – a Desktop Wiki, is a wonderful tool for taking notes. It does not behave anything like any traditional note taking software or Microsoft OneNote. Rather, it works like a wiki. Tomboy is a cool note taking software which is installed by default in many Linux distributions. CherryTree is a cross platform hierarchical note taking software. MyNotex is an upcoming note taking software in Linux that supports a number of features that are ideal for taking notes. KeepNote is designed to be a general note taking software that can be used in many different ways depending on the user’s needs. TuxCards is another note taking software which is quite impressive. Kjots is a very good note taking software. Recently, it has been rewritten grounds up using Qt 4 libraries. It is very quick to start up in GNOME even though it is essentially a KDE application. RedNotebook is more of a personal diary and journal than a note taking software. A simple note taking software written primarily for GNOME/Gtk-2, GJots2 is quite lean in features. Knowit is a note taking software catering to people who want to store text snippets as notes. NoteCase is a hierarchical notes manager (Outliner). It supports rich text editing and image insertion. Wixi – This is a multi-platform wiki application for the desktop. It is written in python/wxpython and uses txt2tags to generate text to many other formats. The goal is to provide a simple wiki tool around the txt2tags document generator and also be multi-platform. Memoranda – This is a free personal diary and scheduling tool. However, it can be used to keep notes. It contains a notes tab which has a rich text editor built-in. You can insert images and use different styles of text as well. If none of these covers your needs, there is the last resort of installing and running onenote through wine. I have read reports of success for the 2007 version but I have no idea about how the newer versions fare in that respe "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628174051#index"
                   NS1:content=" Red Hat Customer Portal Skip to main content Main Navigation Products &amp; Services Back View All Products Infrastructure and Management Back Red Hat Enterprise Linux Red Hat Enterprise Virtualization Red Hat Identity Management Red Hat Directory Server Red Hat Certificate System Red Hat Satellite Subscription Asset Manager Red Hat Update Infrastructure Red Hat Insights Ansible Tower by Red Hat Cloud Computing Back Red Hat CloudForms Red Hat OpenStack Platform Red Hat Cloud Infrastructure Red Hat Cloud Suite OpenShift Enterprise by Red Hat OpenShift Online by Red Hat OpenShift Dedicated by Red Hat Storage Back Red Hat Gluster Storage Red Hat Ceph Storage JBoss Development and Management Back Red Hat JBoss Enterprise Application Platform Red Hat JBoss Data Grid Red Hat JBoss Web Server Red Hat JBoss Portal Red Hat JBoss Operations Network Red Hat JBoss Developer Studio JBoss Integration and Automation Back Red Hat JBoss Data Virtualization Red Hat JBoss Fuse Red Hat JBoss A-MQ Red Hat JBoss BPM Suite Red Hat JBoss BRMS Mobile Back Red Hat Mobile Application Platform Services Back Consulting Technical Account Management Training &amp; Certifications Red Hat Enterprise Linux Developer Program Support Get Support Production Support Development Support Product Life Cycle &amp; Update Policies Knowledge Search Documentation Knowledgebase Videos Discussions Ecosystem Overview Certified Hardware Certified Software Certified Cloud and Service Providers Tools Back Red Hat Insights Learn More Red Hat Access Labs Explore Labs Configuration Deployment Troubleshooting Security Additional Tools Red Hat Access plug-ins Red Hat Satellite Certificate Tool Security Back Product Security Center Security Updates Security Advisories Red Hat CVE Database Security Labs Resources Overview Security Blog Security Measurement Severity Ratings Backporting Policies Product Signing (GPG) Keys Community Back Discussions Red Hat Enterprise Linux Red Hat Enterprise Virtualization Red Hat Satellite Customer Portal Private Groups All Discussions Start a Discussion Blogs Customer Portal Red Hat Product Security Red Hat Access Labs Red Hat Insights All Blogs Events Customer Events Red Hat Summit Stories Red Hat Subscription Benefits You Asked. We Acted. Open Source Communities Subscriptions Downloads Support Cases Account Back Log In Register Red Hat Account Number: Account Details Newsletter and Contact Preferences User Management Account Maintenance My Profile Notifications Help Log Out Language Back English español Deutsch italiano 한국어 français 日本語 português 中文 (中国) русский Red Hat LogoCustomer PortalSearch Products &amp; Services Back View All Products Infrastructure and Management Back Red Hat Enterprise Linux Red Hat Enterprise Virtualization Red Hat Identity Management Red Hat Directory Server Red Hat Certificate System Red Hat Satellite Subscription Asset Manager Red Hat Update Infrastructure Red Hat Insights Ansible Tower by Red Hat Cloud Computing Back Red Hat CloudForms Red Hat OpenStack Platform Red Hat Cloud Infrastructure Red Hat Cloud Suite OpenShift Enterprise by Red Hat OpenShift Online by Red Hat OpenShift Dedicated by Red Hat Storage Back Red Hat Gluster Storage Red Hat Ceph Storage JBoss Development and Management Back Red Hat JBoss Enterprise Application Platform Red Hat JBoss Data Grid Red Hat JBoss Web Server Red Hat JBoss Portal Red Hat JBoss Operations Network Red Hat JBoss Developer Studio JBoss Integration and Automation Back Red Hat JBoss Data Virtualization Red Hat JBoss Fuse Red Hat JBoss A-MQ Red Hat JBoss BPM Suite Red Hat JBoss BRMS Mobile Back Red Hat Mobile Application Platform Services Back Consulting Technical Account Management Training &amp; Certifications Red Hat Enterprise Linux Developer Program Support Get Support Production Support Development Support Product Life Cycle &amp; Update Policies Knowledge Search Documentation Knowledgebase Videos Discussions Ecosystem Overview Certified Hardware Certified Software Certified Cloud and Service Providers Tools Back Red Hat Insights Learn More Red Hat Access Labs Explore Labs Configuration Deployment Troubleshooting Security Additional Tools Red Hat Access plug-ins Red Hat Satellite Certificate Tool Security Back Product Security Center Security Updates Security Advisories Red Hat CVE Database Security Labs Resources Overview Security Blog Security Measurement Severity Ratings Backporting Policies Product Signing (GPG) Keys Community Back Discussions Red Hat Enterprise Linux Red Hat Enterprise Virtualization Red Hat Satellite Customer Portal Private Groups All Discussions Start a Discussion Blogs Customer Portal Red Hat Product Security Red Hat Access Labs Red Hat Insights All Blogs Events Customer Events Red Hat Summit Stories Red Hat Subscription Benefits You Asked. We Acted. Open Source Communities Subscriptions Downloads Support Cases Account Back Log In Register Red Hat Account Number: Account Details Newsletter and Contact Preferences User Management Account Maintenance My Profile Notifications Help Log Out Language Back English español Deutsch italiano 한국어 français 日本語 português 中文 (中国) русский Subscriptions Downloads Support Cases Search Account Language Search Log in to Your Red Hat Account Log In Your Red Hat account gives you access to your profile, preferences, and services, depending on your status. Register If you are a new customer, register now for access to product evaluations and purchasing capabilities. Need access to an account? If your company has an existing Red Hat account, your organization administrator can grant you access. If you have any questions, please contact customer service. Red Hat Account Number: Red Hat Account Account Details Newsletter and Contact Preferences User Management Account Maintenance Customer Portal My Profile Notifications Help For your security, if you’re on a public computer and have finished using your Red Hat services, please be sure to log out. Log Out Select Your Language English español Deutsch italiano 한국어 français 日本語 português 中文 (中国) русский Red HatCustomer Portal Products &amp; Services Tools Security Community Infrastructure and Management Cloud Computing Storage JBoss Development and Management JBoss Integration and Automation Mobile Red Hat Enterprise Linux Red Hat Enterprise Virtualization Red Hat Identity Management Red Hat Directory Server Red Hat Certificate System Red Hat Satellite Subscription Asset Manager Red Hat Update Infrastructure Red Hat Insights Ansible Tower by Red Hat Red Hat CloudForms Red Hat OpenStack Platform Red Hat Cloud Infrastructure Red Hat Cloud Suite OpenShift Enterprise by Red Hat OpenShift Online by Red Hat OpenShift Dedicated by Red Hat Red Hat Gluster Storage Red Hat Ceph Storage Red Hat JBoss Enterprise Application Platform Red Hat JBoss Data Grid Red Hat JBoss Web Server Red Hat JBoss Portal Red Hat JBoss Operations Network Red Hat JBoss Developer Studio Red Hat JBoss Data Virtualization Red Hat JBoss Fuse Red Hat JBoss A-MQ Red Hat JBoss BPM Suite Red Hat JBoss BRMS Red Hat Mobile Application Platform View All Products Support Get Support Production Support Development Support Product Life Cycle &amp; Update Policies Services Consulting Technical Account Management Training &amp; Certifications Red Hat Enterprise Linux Developer Program Knowledge Search Documentation Knowledgebase Videos Discussions Ecosystem Overview Certified Hardware Certified Software Certified Cloud and Service Providers Red Hat Access Labs To help you use Red Hat products to their full potential, our engineers have developed a powerful set of tools to support your ongoing success. Explore Labs Configuration Deployment Troubleshooting Security Additional Tools Red Hat Access plug-ins Red Hat Satellite Certificate Tool Red Hat Insights Increase visibility into IT operations to detect and resolve technical issues before they impact your business. Learn More Red Hat Product Security Center Engage with our Red Hat Product Security team, access security updates, and ensure your environments are not exposed to any known security vulnerabilities. Product Security Center Security Updates Security Advisories Red Hat CVE Database Security Labs Keep your systems secure with Red Hat's specialized responses for high-priority security vulnerabilities. View Responses Resources Overview Security Blog Security Measurement Severity Ratings Backporting Policies Product Signing (GPG) Keys Discussions Red Hat Enterprise Linux Red Hat Enterprise Virtualization Red Hat Satellite Customer Portal Private Groups All Discussions Start a Discussion Blogs Customer Portal Red Hat Product Security Red Hat Access Labs Red Hat Insights All Blogs Events Customer Events Red Hat Summit Stories Red Hat Subscription Benefits You Asked. We Acted. Open Source Communities SupportProduct Documentation Red Hat Enterprise Linux Fuse ESB Fuse ESB Enterprise Fuse IDE Fuse Management Console Fuse Message Broker Fuse MQ Enterprise JBoss A-MQ JBoss Communications Platform JBoss Data Grid JBoss Enterprise Application Platform JBoss Enterprise Application Platform Common Criteria Certification JBoss Enterprise BRMS Platform JBoss Enterprise Data Services JBoss Enterprise Portal Platform JBoss Enterprise SOA Platform JBoss Enterprise Web Platform JBoss Enterprise Web Server JBoss Fuse JBoss Operations Network JBoss Portal Platform JBoss Web Framework Kit OpenShift Enterprise OpenShift Online Red Hat Application Stack Red Hat Ceph Storage Red Hat Certificate System Red Hat Certificate System Common Criteria Certification Red Hat CloudForms Red Hat Customer Portal Red Hat Developer Toolset Red Hat Directory Server Red Hat Enterprise Linux Red Hat Enterprise Linux Atomic Host Red Hat Enterprise Linux for Real Time Red Hat Enterprise Linux Hardware Certification Red Hat Enterprise Linux OpenStack Platform Red Hat Enterprise Linux OpenStack Platform Certification Red Hat Enterprise Linux OpenStack Platform Certification Test Suite Red Hat Enterprise MRG Red Hat Enterprise Virtualization Red Hat Enterprise Virtualization for Desktops Red Hat Enterprise Virtualization for Servers Red Hat Hardware Certification Red Hat HPC Solution Red Hat JBoss A-MQ Red Hat JBoss BPM Suite Red Hat JBoss BRMS Red Hat JBoss Data Grid Red Hat JBoss Data Virtualization Red Hat JBoss Developer Studio Red Hat JBoss Developer Studio Integration Stack Red Hat JBoss Enterprise Application Platform Common Criteria Certification Red Hat JBoss Fuse Red Hat JBoss Fuse Service Works Red Hat JBoss Migration Toolkit JBoss Operations Network Red Hat JBoss Portal Red Hat JBoss Web Framework Kit Red Hat JBoss Web Server Red Hat Network Red Hat Network Satellite Red Hat OpenStack Certification Test Suite Red Hat Satellite Red Hat Software Collections Red Hat Software Test Suite Red Hat Gluster Storage Red Hat Subscription Asset Manager Red Hat Subscription Management Red Hat Update Infrastructure v7 Hardware Certification Test Suite 5 7 6.8 5 4 3 2.1 Deployment Guide 5.0 Release Notes 5.0 Technical Notes 5.10 Release Notes 5.10 Technical Notes 5.11 Release Notes 5.11 Technical Notes 5.1 Release Notes 5.2 Release Notes 5.2 Technical Notes 5.3 Release Notes 5.3 Technical Notes 5.4 Release Notes 5.4 Technical Notes 5.5 Release Notes 5.5 Technical Notes 5.6 Release Notes 5.6 Technical Notes 5.7 Release Notes 5.7 Technical Notes 5.8 Release Notes 5.8 Technical Notes 5.9 Release Notes 5.9 Technical Notes Cluster Administration Cluster Suite Overview Configuration Example - Fence Devices Configuration Example - NFS Over GFS Configuration Example - Oracle HA on Cluster Suite Configuring Identity Management Deployment Guide DM Multipath Global File System Global File System 2 Global Network Block Device Hypervisor Deployment Guide Installation Guide International Language Support Guide Logical Volume Manager Administration Online Storage Reconfiguration Guide Para-virtualized Windows Drivers Guide SystemTap Beginners Guide SystemTap Language Reference SystemTap Tapset Reference Tuning and Optimizing Red Hat Enterprise Linux for Oracle 9i and 10g Databases Virtual Server Administration Virtualization Guide Formats html html-single epub pdf English বাংলা Deutsch Español Français ગુજરાતી 한국어 मराठी Português Brasileiro தமிழ் 繁體中文 Prev Next ⁠2.2. Mounting a File System To attach a certain file system, use the mount command in the following form: mount [option…] device directory When the mount command is run, it reads the content of the /etc/fstab configuration file to see if the given file system is listed. This file contains a list of device names and the directory in which the selected file systems should be mounted, as well as the file system type and mount options. Because of this, when you are mounting a file system that is specified in this file, you can use one of the following variants of the command: mount [option…] directory mount [option…] device Note that unless you are logged in as root, you must have permissions to mount the file system (see Section 2.2.2, “Specifying the Mount Options”). ⁠2.2.1. Specifying the File System Type In most cases, mount detects the file system automatically. However, there are certain file systems, such as NFS (Network File System) or CIFS (Common Internet File System), that are not recognized, and need to be specified manually. To specify the file system type, use the mount command in the following form: mount -t type device directory Table 2.1, “Common File System Types” provides a list of common file system types that can be used with the mount command. For a complete list of all available file system types, consult the relevant manual page as referred to in Section 2.4.1, “Installed Documentation”. ⁠ Table 2.1. Common File System Types Type Description ext2 The ext2 file system. ext3 The ext3 file system. ext4 The ext4 file system. iso9660 The ISO 9660 file system. It is commonly used by optical media, typically CDs. jfs The JFS file system created by IBM. nfs The NFS file system. It is commonly used to access files over the network. nfs4 The NFSv4 file system. It is commonly used to access files over the network. ntfs The NTFS file system. It is commonly used on machines that are running the Windows operating system. udf The UDF file system. It is commonly used by optical media, typically DVDs. vfat The FAT file system. It is commonly used on machines that are running the Windows operating system, and on certain digital media such as USB flash drives or floppy disks. See Example 2.2, “Mounting a USB Flash Drive” for an example usage. ⁠ Example 2.2. Mounting a USB Flash Drive Older USB flash drives often use the FAT file system. Assuming that such drive uses the /dev/sdc1 device and that the /media/flashdisk/ directory exists, you can mount it to this directory by typing the following at a shell prompt as root: ~]# mount -t vfat /dev/sdc1 /media/flashdisk Prev Next Red Hat Quick Links Downloads Subscriptions Support Cases Product Documentation Help Contact Us Log-in Assistance Accessibility Browser Support Policy Site Info Awards and Recognition Colophon Customer Portal FAQ About Red Hat Subscription Value About Red Hat Red Hat Jobs Related Sites RedHat.com JBoss.org OpenShift.com Red Hat Partner Connect Red Hat SummitDevNationTwitterFacebookGoogle+ Privacy Policy Customer Portal Terms of Use All Policies and Guidelines Copyright © 2016 Red Hat, Inc. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620113347#index"
                   NS1:content=" Jump to navigation Advertisement Home News for the Open Source Professional Login / Create Account Facebook Twitter Google Plus LinkedIn Feeds Brought to you by Linux Foundation News Enterprise Desktop Mobile &amp; Embedded Open Source Linux Kernel DevOps Networking Cloud Computing Tutorials Open Source Pro Learn What is Linux? Training Certification Events Webinars Community Participate Q&amp;A Forums Blogs Resources Newsletter Distributions Publications Infographics Photos Videos Ben Martin June 24, 2013 Getting Started With the BeagleBone Black: A 1GHz ARM Linux Machine for $45 The BeagleBone Black (BBB) provides a 1GHz ARM Cortex-A8 with 512Mb of RAM and 2Gb of eMMC flash from which you can run a GNU/Linux system around a 3.8 Linux Kernel. Throw ethernet, HDMI, and a load of IO pins into the mix and you have a little machine that straddles the border between embedded Linux and the Arduino world. The Black is the latest addition to the Beagle series of ARM-based, single-board computers and is based on the BeagleBone before it. The package I got with the BBB contained the board and a single USB cable. You can power the BBB over the USB cable from a HUB so a dedicated power brick is not a necessity. BeagleBone Black, with LED lighted.Looking at the rows of 46 pins on each side of the BBB indicates that the board is very useful for many hardware projects. Depending on how you configure your BBB you can have up to 65 general-purpose, digital IO pins, 8 PWMs, 4 timers, 7 1.8V analog inputs, some serial UARTs, 2 I2C, and 2 SPI along with access to 3.3V and 5V. Some of the pins can be used for multiple purposes. For example, pin 17 on one header serves as a digital IO pin, an I2C, and an SPI pin, so you have to choose for which purpose you want to use it. The two header blocks on the BBB are referred to as the P8 and P9. The HDMI output on the BBB is implemented by bringing a &quot;cape&quot; onto the main board. Capes are what the Beagle community calls the cards, which can be attached to the pin headers, similar to what are called Shields in the Arduino world. The HDMI output on the BBB uses a collection of the general-purpose output pins from the two headers on the BBB. Specifically, it wants 3 SPI pins on header P9 and 30 pins on the P8 header. So if you have an HDMI display then you lose about 2/3 of the pins on the P9 header. More disturbing, if you are planning to output to a 1080 display you can only get a 24Hz output at that resolution (Page 68 of the System Reference Manual). Though that limitation has changed over software revisions. Getting Started with the BeagleBone Black When I first booted the BBB I got a graphical display over its HDMI but I couldn't get any mouse or keyboard to work on any USB port with either a passive or powered hub. That was when I decided I needed to update to the latest software before proceeding. The first step in updating the Linux distribution on the eMMC of the BBB is to download the Angstrom Distribution eMMC flasher from the Latest Images. Use unxz to uncompress the downloaded image and dd to write it to a microSD card. Many of the directions, including those that came on my BBB itself are very Windows-centric. Once you have written the roughly 4GB image to a microSD card, turn off the BBB, insert the card into the BBB, and apply power while holding the &quot;boot&quot; button which is on the opposite side of the BBB from where the microSD card plugs in. During flashing, the LEDs will flash and when done all the LEDs will remain on. For me, the flashing procedure took around an hour to complete. After updating the eMMC I found that if I booted the BBB with a network cable plugged in, I never got HDMI output. To get a display I had to boot without the network cable and then plug in the network cable to gain network access. Power wise, the BBB drew 2.7 Watts sitting idle at a 720p desktop with a passive hub, keyboard and mouse connected but without a network connection. Plugging in an ethernet cable boosted the draw to 3.2 W. Running the CPU at 100 percent moved to 3.9 W total. Disconnecting the hub (and thus keyboard and mouse) dropped the power draw by 0.8 W. How to Use the GPIO Pins Access to the various pins in the headers on the left and right side of the BBB is done through the Linux kernel using its GPIO Interfaces. To demonstrate how to give this a spin I attached an LED from pin 42 (GPIO_7) to the ground pin 44 next to it. That is the red LED shown in the photo, above. The BBB booted up without the LED lit. To get the LED to shine you have to map the GPIO_7 pin into the filesystem. This is done by echoing the GPIO pin into the export file. As you can see, below, I created the new gpio7 link using the export file in order to control that pin. The value is initially zero but when I echo high into the direction the LED lit up! root@bbb:/sys/class/gpio# echo 7 &gt; /sys/class/gpio/export root@bbb:/sys/class/gpio# ls -lh total 0 --w------- 1 root root 4.0K Jun 1 10:54 export lrwxrwxrwx 1 root root 0 Jun 1 10:54 gpio7 -&gt; ../../devices/virtual/gpio/gpio7 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip0 -&gt; ../../devices/virtual/gpio/gpiochip0 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip32 -&gt; ../../devices/virtual/gpio/gpiochip32 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip64 -&gt; ../../devices/virtual/gpio/gpiochip64 lrwxrwxrwx 1 root root 0 Jan 1 2000 gpiochip96 -&gt; ../../devices/virtual/gpio/gpiochip96 --w------- 1 root root 4.0K Jan 1 2000 unexport root@bbb:/sys/class/gpio# cd gpio7 root@bbb:/sys/class/gpio/gpio7# cat value 0 root@bbb:/sys/class/gpio/gpio7# echo low &gt; direction root@bbb:/sys/class/gpio/gpio7# echo high &gt; direction To use GPIO pins that are not connected to the first gpio controller chip (which controls 32 pins), you should refer to the Expansion Header Pinout table in the System Reference Manual to calculate the correct number to echo into the exports file. For example GPIO_51 on pin 16 of the P9 header is gpio1[19]. This makes it the 19th pin on the second gpio controller so you would echo 32+19=51 into the exports file to access GPIO_51. One issue I encountered with the hardware design is that the large USB port on the BBB is very close to the microHDMI port which is attached to the other side of the board. The common combination of plugging in cables to both ports left the cable sleaves pushing each other slightly. In my next article on the BBB I'll show benchmarks for its CPU, along with performance figures for the eMMC flash that comes on the board. Share Email Facebook Twitter LinkedIn Pinterest Google+ Print This Like (0 likes) Advertisement Training See all LFD401 Developing Applications For Linux - ENEA August 29, 2016 Learn more LFD420 Linux Kernel Internals and Development - ENEA September 5, 2016 Learn more LFS462 Linux KVM Virtualization ENEA September 19, 2016 Learn more Newsletter News Enterprise Desktop Mobile &amp; Embedded Open Source Linux Kernel DevOps Networking Cloud Computing Tutorials Open Source Pro Learn What is Linux? Training Certification Events Webinars Community Participate Q&amp;A Forums Blogs Resources Newsletter Distributions Publications Infographics Photos Videos About Linux.com Advertise Terms of Use Privacy Policy Editorial Policy Contact Linux Foundation The Linux Foundation is a non-profit consortium enabling collaboration and innovation through an open source development model. Learn More Fastly © 2016 The Linux Foundation Email Facebook Twitter LinkedIn Pinterest Google+ Reddit Tumblr WordPress Google Gmail WhatsApp StumbleUpon AIM Amazon Wish List AOL Mail App.net Baidu Balatarin BibSonomy Bitty Browser Blinklist Blogger Post BlogMarks Bookmarks.fr Box.net BuddyMarks Buffer Care2 News CiteULike Delicious Design Float Diary.Ru Diaspora Digg diHITT Diigo DZone Evernote Fark Flipboard Folkd Google Bookmarks Google Classroom Hacker News Hatena Instapaper Jamespot Kakao Kik Kindle It Known Line LiveJournal Mail.Ru Mendeley Meneame Mixi MySpace Netlog Netvouz NewsVine NUjij Odnoklassniki Oknotizie Outlook.com Pinboard Plurk Pocket Print PrintFriendly Protopage Bookmarks Pusha Qzone Rediff MyPage Renren Segnalo Sina Weibo SiteJot Skype Slashdot SMS Stumpedia Svejo Symbaloo Feeds Telegram Tuenti Twiddla TypePad Post Viadeo Viber VK Wanelo Webnews WeChat Wykop XING Yahoo Bookmarks Yahoo Mail Yahoo Messenger Yoolink YouMob Yummly AddToAny Email Facebook Twitter LinkedIn Pinterest Google Gmail AOL Mail Outlook.com Yahoo Mail Any email Email app More… First Name Last Name Email Country Comments View our Privacy Policy "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717090045#index"
                   NS1:content=" Nadim Twal – Brand Designer Design – Branding – Strategy Info Projects » Destination Branding Brand Design Logo Design Arabic Calligraphy Blog Contacts Arabic Calligraphy I’ve always loved Arabic calligraphy, I had a course in university and since then I kept on going with my own interpretation of it. As a skill, it is very hard to maintain, continuos training and practice is needed along with endless resources of paper. Recent Project Maazif is a music critic webstie dedicated for arabic music. With all the waves of change happening in the arab world, a back-to-our-roots mentality is becoming more popular, the younger generations are becoming more proud of their culture and heritage, therefore the identity had to reflect an authentic arabic brand to support the same message. Other Projects I’ve also designed a variety of projects that included Arabic calligraphy as a piller to communicate the brand, each of the projects required a different perspective into the calligraphy style, some are hand drawn and some are computer engineered, depending on the required outcome, yet they all reflect and Arabic brand in their own interpretations. Calligraphy Tools Other than the skill required, tools to get the job done can vary, each tool produces a different effect and serves a different purpose. There is no limit for the kind of tool to use, the beauty of it is improvisation and experimentation that might result in unexpected outcomes, for instance a flat wooden spoon. Wednesday, January 25th, 2012 at 3:51 pm Arabic Calligraphy Feed Comments Credits WordPress Themes by Graph Paper Press Powered by WordPress Subscribe Comments © 2016, Nadim Twal – Brand Designer Commentsclose Comments are closed. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160627073717#index"
                   NS1:content=" BEOLINGUS A service provided by TU Chemnitz supported by IBS and MIOTU/Mio2. FAQ Help Contact Browser Conversion Advertising Donate About BEOLINGUS DEEn Dictionary De - En DeEs De - Es DePt De - Pt Vocabulary trainer Spec. subjects Grammar Abbreviations Random search Preferences Search in Sprachauswahl De↔En DictionaryDe→En DictionaryEn→De DictionaryDe↔En ExamplesDefinitions EnSynonyms DeSayings EnSayings DeDe↔Es DictionaryDe→Es DictionaryEs→De DictionaryDe↔Es ExamplesSayings EsDe↔Pt DictionaryDe→Pt DictionaryPt→De DictionaryDe↔Pt Examples Eintracht Eintrag Eintragen eintragen Eintragung Eintragung im Grundbuch eintragungsfähig Eintragungsschein Eintragungsstaat Search for: Mini search box äöüß 11 results for eintragung Word division: Ein·tra·gung Tip: You may choose other colors ... → preferences - German English [Hide examples] Eintrag {m}; Eintragung {f} [listen] entry [listen] Einträge {pl}; Eintragungen {pl} entries [listen] analytische Eintragung {f} analytical entry Eintragung {f}; Einschreibung {f} registration [listen] [Hide examples] Widmung {f}; Eintragung {f}; Eintrag {m} [listen] inscription Widmungen {pl}; Eintragungen {pl} inscriptions [Hide examples] Eintragung im Grundbuch; Einverleibung ins Grundbuch [Ös.] [jur.] registration [Br.] / recording [Am.] in the land register Eintragung des Eigentumsrechts im Grundbuch; Einverleibung des Eigentumsrechts ins Grundbuch [Ös.] [jur.] registration [Br.] / recording [Am.] of the title in the Rand register Eintragen {n}; Eintrag {m}; Eintragung {f} [listen] entering [listen] Land der Zulassung/Eintragung; Zulassungsland {n} [adm.] country of registration; country of registry [aviat.] [naut.] [Hide examples] Aktienbuch {n} [fin.] share register [Br.]; register of members [Br.]; stock register [Am.] Aktienbücher {pl} share registers; registers of members; stock registers Eintragung im Aktienbuch entry in the share register Umschreibung im Aktienbuch registration of transfers [Br.]; transfer of entries in the share register jdm. Einsicht in das Aktienbuch gewähren to give sb. permission to inspect the share register Namensaktien in das Aktienbuch eintragen to record registered shares in the company's [Br.]/corporation's [Am.] share register [Hide examples] Musterregister {n} [jur.] Design Register Einsicht in das Musterregister inspection of the Design Register ein Geschmacksmuster durch Eintragung in das Musterregister schützen to protect a design by registration in the Design Register [Hide examples] Schiffsregister {n} [adm.] register of ships; ships' register Schiffsregister {pl} registers of ships; ships' registers Eintragung eines Schiffes in das Schiffsregister registry of a ship ein Schiff in das Schiffsregister eintragen to enter a ship in the ships' register [Hide examples] jds. Vorstrafenregister {n}; jds. Vorstrafen {pl} [jur.] sb.'s criminal record vorbestraft sein to have a criminal record; to have previous convictions Ladendiebstahl führt zu einer Eintragung ins Strafregister / zu einer Vorstrafe. Shoplifting carries a criminal record. [Hide examples] (Eintragung) löschen [listen] to cancel [listen] löschend cancelling; canceling gelöscht cancelled; canceled [listen] [listen] Search further for &quot;eintragung&quot;: Example sentences | Synonyms | Proverbs, aphorisms, quotations | Wikipedia | Google: Web search No guarantee of accuracy or completeness! ©TU Chemnitz, 2006-2016 Your feedback: Your e-mail address for an answer: Bookmark services Ad partners Englisch Lernen Kern AG - Übersetzen und Dolmetschen Abenteuer Sprachreise English Institute CollegeCouncil Sprachreise mit Sprachdirekt Sprachreisen Englisch Sprachreisen Martin Peters Englisch Sprachreisen mit Sprachcaffe Currency Exchange £2,000+ 0% Commission &amp; No Fees Fast, Free Money Transfers Here! torfx.com/Canadian$-Exchange Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d Ads byGoogle ► Languages ► Language ► Learning ► Duolingo "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630095142#index"
                   NS1:content=" NeverNote Available for: windows mac linux unix java Nevernote was created in response to popular demand of Linux users. A clone of Evernote, it was originally intended for Linux but can also run on Windows. Nevernote is a note-saving program that... Read more "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160623115136#index"
                   NS1:content=" MENU HOME OUR SERVICES PORTFOLIO PROMISES TESTIMONIALS CONSULTING CONTACT US RESOURCES Raspberry Pi Resources Our resources for other geeks, designers and engineers. Contact us Electronic Designers in the South East of England Raspberry Pi Projects Search Autorun browser on startup /Pi Operating Systems / Raspbian - Recommended OS / GUI / Autorun browser on startup Adam Configuring LXDE to start the Midori browser on login This solution works really well. Once the browser loads there is a small black square in the top left of the screen which seems to be a general bug (its mentioned on forums by others) but otherwise the fullscreen mode hides everything except the browser page. Edit the autostart file: sudo nano /etc/xdg/lxsession/LXDE/autostart Comment out everything using a '#' at the start of each line and then add the following lines # Auto run the browser @xset s off @xset -dpms @xset s noblank @midori -e Fullscreen -a http://google.com If necessary use the configuration tool to enable auto running of the GUI on powerup sudo raspi-config If you need to exit back to the command prompt CTRL + ALT + F1 CTRL + ALT + F2 To ensure you have an internet connection first See here USEFUL? We benefit hugely from resources on the web so we decided we should try and give back some of our knowledge and resources to the community by opening up many of our company’s internal notes and libraries through mini sites like this. We hope you find the site helpful. Please feel free to comment if you can add help to this page or point out issues and solutions you have found, but please note that we do not provide support on this site. If you need help with a problem please use one of the many online forums. Admin Categories open all | close all Arduino Programming Arduino Boards Using avrdude on a Raspberry Pi Using Arduino Shields arduPi Our Arduino mini site Bash Bash Files Command Line Command Line Window Tools Screen – Duplicates terminal views IO Pins IO pin control from the command line UART transmit from the command line SSH Tools FireSSH .Command Line General Break File System Help Installing Networking Processes Root user privileges Searching For Files Shutdown Sleep Soft Reset sudo tar, for zipping files, directories, etc Text Files – Editors Text Files – Viewing Update Packages Other Boards Other Boards Like the RPi Pi Hardware Raspberry Pi 1 Model B Model B CAD &amp; Mounting Info Model B Hardware General Specifications Model B IO Pins Model B Power Model B schematics Raspberry Pi 1 Model B+ Model B+ CAD &amp; Mounting Info Model B+ Hardware General Specifications Model B+ IO Pins Model B+ Power Model B+ schematics Using Model B SD Cards On The Model B+ Raspberry Pi 2 Model B RPi2 Model B CAD &amp; Mounting Info RPi2 Model B Hardware General Specifications RPi2 Model B IO Pins RPi2 Model B Schematics Raspberry Pi 3 Model B RPi3 Model B Hardware General Specifications Raspberry Pi 7&quot; Display .RPi 7″ Display General Backlight Control RPi 7″ Display CAD Raspberry Pi Camera Camera Projects Streaming Video Using gstreamer Streaming Video Using Motion Streaming Video Using VLC Player Using The Camera Raspberry Pi Compute Module .Compute Module Overview Compute Module Documentation Compute Module IO Board Compute Module IO Pins Compute Module Schematics Programming The Compute Module Raspberry Pi Zero Minimising power consumption RPi Zero Availability RPi Zero CAD &amp; Mounting Info RPi Zero Hardware General Specifications RPi Zero IO Pins Third Party Hardware PiFace Using The PiFace In A C Project .Raspberry Pi PCB Versions Audio Input BCM2835 SoC Detecting Hardware Version SD Cards Pi Operating Systems Arch Package Manager pacman .Arch General New Arch Installation Arm Bare Metal Coding ARM Bare Metal Coding Debian 'squeeze' .Starting Up For the First Time QT on the Raspberry Pi Licencing costs QT General Raspbian - Recommended OS Bluetooth .Installing Bluetooth Bluetooth Commands Serial over Bluetooth GUI Autorun browser on startup Command prompt Custom boot up screen Desktop Shortcuts Disable screen sleep Fonts Hide mouse cursor IO Pins I2C Pins SPI Pins UART Pins Networking Adding A 2nd Fixed IP Address To The Ethernet Port Check interface connection and trigger reconnect Configuring Network Adaptors Multiple Network Adaptors Networking Commands RPi As Wifi Access Point Package Manager APT Package Manager Troubleshooting Expand Filesystem Issues USB USB Commands .New Raspbian Installation .Raspbian General Auto Running Programs-Command Line Auto Running Programs-GUI Configuration Tool Custom boot up screen Monitor Resolution Raspbian Versions Screensaver Scripts Raspbmc .Raspbmc General Etcher Resizing Partitions &amp; Disks Win32DiskImager Programming In Assembler .General Good resources Programming in C/C++ .Compilers and IDE's Eclipse Linux ARM DS-5 For Raspberry Pi Linux Eclipse Programming of the RPi Eclipse Raspberry Pi Installing Eclipse on QEMU Emulated Raspberry Pi – Windows Installing Eclipse on QEMU Emulated Raspberry Pi – Linux Installing Eclipse On Raspberry Pi 2 Eclipse Windows .Setting Up Windows Eclipse Programming of the RPi Adding Libraries To Eclipse For Windows Create New Eclipse Project For The RPi Eclipse General Notes Updating Project Settings Geany .Geany General Creating A Geany Project Installing Geany NetBeans Windows .Creating A New Project .Installing NetBeans For C++ Remote Development on A Raspberry Pi Adding Libraries Breakpoints Getting the project files Troubleshooting .Getting Your RPi Ready For C Programming Problems With Old Projects Running Your Exe .Distribution of applications Distribution using dropbox, web server, etc Arguments Getting Arguments Supplied To The Program Audio Playing Audio Boost C++ Libraries .Installing and Using Boost String functions C Libraries bcm2835 by Mike McCauley Classes Creating A Class Console Keyboard Input printf std::cout Using console commands in code Databases MySQL Table Design Row Types Accessing The Database Errors Parameterized (Prepared) Statement Type Codes Setup MySQL C Access DateTime DateTime calculations Get Current Time Set the RPi Time struct tm Delays Delays Exit Exit To Terminate Application File Input and Output File Extensions In Linux Read and Write Speed Searching a text file Working With Directories Working With Files File System Get free disk space GUI GTK Buttons-EventBox Image .EventBox Image Button General Buttons-GtkButton .GtkButton General Cairo .Cairo general Color .Color General Images Images Keyboard Keypresses Labels .Labels General Mouse Mouse Cursor Text Fonts Timers .Timers General Widgets .Widgets General Window .Window General Close Window .Creating A GTK Applicaiton .GTK General .Installing GTK QT .QT General TK .TK General I2C Using the I2C interface IO Pins bcm2835 by Mike McCauley GPIO interrupts IO Pin Control – General IO Speed json rapidjson Memory Memory Functions memset Vectors .Vectors General Shared Memory Shared Memory Between C Application And PHP Web Server Variables Null Null Pipes Named Pipes / FIFO’s PWM Using the PWM Pin Random rand() Scheduler Process Allocation By The OS Semaphores Using Semaphores Signal Handling signal() function Speed IO Speed Process Allocation By The OS SPI Using The SPI Interface Strings String Class (+ others) .C++ Strings General .stringstream General .Using Strings-Basics Using Strings-Characters Using Strings-Extracting Using Strings-Replace and Insert Using Strings-Searching Strings Using Strings-Values .Char based Strings General C++ Basic String Functions C++ Converting Strings C++ Converting Values CR and LF Working with strings TCP/IP .General PHP Code Tricks Check interface connection and trigger reconnect Configuring Network Adaptors Network Interface Code Snippets Read Local Network Adaptors Sockets – General Threads Forking A New Thread Timing clock_gettime() For Acurate Timing Delays Timer Resources Troubleshooting SIGILL etc errors UART Serial Port Using the UART .Getting Your RPi Ready For C Programming C General Running Your Exe Programming In PHP and JavaScript UART UART control from PHP Programming in Python .General Python Programming .Python General IDLE Python Programming Comments Commenting Delays sleep GUI TKInter TKInter General I2C Using the I2C Interface Loops For Loop Memory Arrays Arrays General Print / Echo print Running A Python Script At Boot Using Cron Projects Raspberry Pi Running Web App Software and Utilities Databases MySQL Disk Tools gparted Partition Wizard Home Edition Email fetchmail to receive email ssmtp to send emails File Sharing SMB-Network File Sharing vsftpd-FTP Server WinSCP-Transfering Files From Windows PC’s Media Players Codecs omxplayer VLC Player Web Servers PHP Code Bits .General PHP Code Tricks Reboot .General PHP Code Tricks MySQL PHP/Apache vsftpd-FTP Server fping IO Utilities Kiosk Mode Performance Monitoring Screen – Duplicates terminal views System Utilities Updating Packages Web Browsers WiFi Access Point Windows Remote Desktop ZIP Pages Contact us Electronic Designers in the South East of England Home | Raspberry Pi Resources | Terms &amp; Conditions | Login Green Processing © Copyright http://www.raspberry-projects.com/pi. All rights reserved. Raspberry Pi is a trademark of the Raspberry Pi Foundation. Download Opera browser Need more Speed online? Get Opera the Fastest browser. Download now Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d 0 SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160624162352#index"
                   NS1:content=" Using a ZTE MF180 on GNU/Linux with wvdial To use a &quot;ZTE MF180 HSDPA USB Stick&quot; (a device typically retailed by network providers like the Austrian bob as the &quot;bob datenstick&quot; (bob data stick)) on a (e.g Debian) GNU/Linux system, these instructions worked for me. Please note that some of the commads I send to the device were from somewhere in the internet (links given where relevant) or even guessed. They worked for me, but might turn your device into a useless brick! Step 1: Identify device When first connecting the stick, it presents itself as as CD-ROM device after a few seconds. dmesg shows: [...] usb 1-3: new high speed USB device using ehci_hcd and address 45 [...] usb 1-3: New USB device found, idVendor=19d2, idProduct=2000 [...] usb 1-3: New USB device strings: Mfr=3, Product=2, SerialNumber=4 [...] usb 1-3: Product: ZTE WCDMA Technologies MSM [...] usb 1-3: Manufacturer: ZTE,Incorporated [...] usb 1-3: SerialNumber: MF1800ZTED010000 [...] scsi46 : usb-storage 1-3:1.0 [...] scsi 46:0:0:0: CD-ROM ZTE USB SCSI CD-ROM 2.31 PQ: 0 ANSI: 2 [...] sr0: scsi-1 drive [...] sr 46:0:0:0: Attached scsi CD-ROM sr0 [...] sr 46:0:0:0: Attached scsi generic sg1 type 5 and lsusb lists it as: Bus 001 Device 045: ID 19d2:2000 ONDA Communication S.p.A. ZTE MF627/MF628/MF628+ HSDPA (Of course, som details will differ from system to system.) This CD typically contains vendor specific Windows drivers; you might want to look for a fitting icon there if you intend to create a graphical button for launching wvdial. At this stage, the LED on the device should be red. Step 2: Get rid of the CD thing In order to access the modem proper, you'll need to signal to the stick that it may switch now. Fortunately, on this particular stick this is implemented in a quite straigt-forward way -- simply eject the CD: eject /dev/sr0 After ejecting, three new devices will show up at ls /dev/ttyUSB*: /dev/ttyUSB0 /dev/ttyUSB1 /dev/ttyUSB2 The important one is /dev/ttyUSB2. According to an ubuntuforums entry, /dev/ttyUSB0 is a NMEA port (which I have not yet seen doing anything) and /dev/ttyUSB1 is for montioring (e.g. querying signal strength while a connection is open). At this stage, the LED should still be red. You can now communicate with the device using AT commands, e.g. by using screen /dev/ttyUSB2. For example, you can query the security status by entering AT+ZSEC?: AT+ZSEC? +ZSEC: 0,0 OK (That is, you enter AT+ZSEC?, followed by return, and the stick responds with a status and an OK message. You can leave the screen session by pressing Ctrl-a, k, and y. If screen complains about &quot;Cannot access line&quot;, you might need to invoke it with sudo.) The exact interpretation of the ZSEC reply is explained in the 3g-modem wiki, but for now it will be sufficient to know that 0,0 means that no PIN has been entered. Disabling CD mode There are two parameters that can be set: &quot;autorun&quot; and &quot;download&quot;. Autorun can be enabled using AT+ZCDRUN=9, disabled using AT+ZCDRUN=8 and queried using AT+ZCDRUN=4. [1] Download mode can be enabled using AT+ZCDRUN=E, disabled using AT+ZCDRUN=F and queried using AT+ZCDRUN=G. [2] Enabling download mode works best for me as it hides the CD completely. (Autorun mode just makes both the ttyUSB and the CD show up at the same time.) Step 3: Unlock the SIM card Before the modem accepts any commands from wvdial to set up the modem connection, it needs the SIM card unlocked by entering the PIN (where 1234 is your PIN): AT+CPIN=1234 OK The LED will then turn blue after a few seconds, and AT+ZSEC? will then receive the response 3,0. LED color It might happen that you LED remains red or goes back to red after some time, or goes to green. This seems to be due to bad network connectivity; AT+ZPAS? reported &quot;Limited Service&quot; instead of &quot;UMTS&quot;,&quot;CS_PS&quot; for me iff the LED was red, and &quot;GPRS&quot;,&quot;CS_PS&quot; iff the LED was green. Disabling the PIN To use the wvdial configuration below, you need to allow the SIM card to connect without a password. Disable password prompting by issuing AT+CLCK=&quot;SC&quot;,0,&quot;1234&quot; (again, for you PIN being 1234). You can re-enable it using AT+CLCK=&quot;SC&quot;,1,&quot;1234&quot;. The more secure version would be writing a chat script that enters the pin and polls for the response to AT+ZSEC? or AT+ZPAS? to indicate that everything is ready. Step 4: Get a network connection After the device is unlocked and connected to the network, a pretty straightforward /etc/wvdial.conf setting for wvdial is required to get things running; I use this: [Dialer bobstick] Phone = *99# Username = data@bob.at Password = ppp Init2 = AT+CGDCONT=4,&quot;IP&quot;,&quot;bob.at&quot; Modem = /dev/ttyUSB2 Stupid Mode = 1 The Phone, Username and Password parts, the &quot;bob.at&quot; section in the Init2 (that's the APN) and the &quot;Stupid Mode&quot; are specific to bob; instructions what to put there should come with your SIM card. Then, start wvdial bobstick (you might need sudo again, and don't forget to close screen sessions running on /dev/ttyUSB2 as they'll eat the stick's responses): --&gt; WvDial: Internet dialer version 1.60 --&gt; Cannot get information for serial port. --&gt; Initializing modem. --&gt; Sending: ATZ ATZ OK --&gt; Sending: AT+CGDCONT=4,&quot;IP&quot;,&quot;bob.at&quot; AT+CGDCONT=4,&quot;IP&quot;,&quot;bob.at&quot; OK --&gt; Modem initialized. --&gt; Sending: ATDT*99# --&gt; Waiting for carrier. ATDT*99# CONNECT 3600000 --&gt; Carrier detected. Starting PPP immediately. --&gt; Starting pppd at [...] --&gt; Pid of pppd: 22867 --&gt; Using interface ppp0 --&gt; local IP address [...] [...] And there you go, network up and running! The LED should be blinking now. If you want to further interact with the device, use screen /dev/ttyUSB1 as ttyUSB2 is now in use by PPP. Step 5: Reset (Remember what I said about bricking? That's the part where I guessed brutally.) When a connection is active, just stopping wvdial is not enough to make the connection stop on the stick's side -- the LED keeps blinking. Sending the command AT+ZRST resets the device. More commands and devices jtrenchard found some more commands in the binary code of a similar dongle, e.g. a AT+ZVN which I guess stants for &quot;ZTE version&quot; and reports &quot;BD_MF180TLF3V1.0.0B01 [JUNE 8 2010 17:00:00]&quot; for me. The AT+ZRST very much looks like a reset command (as does AT+ZOPRT=0), AT+ZECC? returns US and European emergency numbers. Similar devices probably have different tty numbers. For example, see the ZTE MF193 guide by Rudy Godoy. Written by chrysn 2010-10-26 (updated 2014-02-14), published under the terms of CC-BY-SA. For the latest version, look at the original address, where you will also find the reStructuredText source. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160623111740#index"
                   NS1:content=" Trending Welcome Raspberry Pi Zero now has a camera connector Top 5 Raspberry Pi 3 Project Ideas Using the BBC Microbit with the Raspberry Pi Kano Computer Kit First Impressions 8-megapixel Raspberry Pi Camera Module v2 Write SD Card Images Using Etcher On Windows, Linux &amp; Mac How to Change Your Character Skin In Minecraft Pi Edition 7-Port USB Hub For Raspberry Pi RSS Twitter Google+ Facebook Pinterest YouTube Raspberry Pi Spy Navigate Home Categories General Hardware Programming Python Software Tutorials &amp; Help BerryClip BerryClip Instructions BerryClip Plus Instructions Videos &amp; Reviews Buy Buy Pi Buy Accessories Buy Books Tools Pi-Lite 14×9 LED Matrix Sprite Editor Pi Power Estimator App RPiREF Pin-out Reference App Simple Ohm’s Law Calculator Web Sites &amp; Links Tutorials &amp; Help Contact Us Site Map You are at:Home»Raspbian»How To Autostart Apps In Rasbian LXDE Desktop How To Autostart Apps In Rasbian LXDE Desktop 29 By Matt on May 3, 2014 Raspbian, Tutorials &amp; Help LXDE Desktop If you use the Raspbian operating system on your Raspberry Pi you will be aware that when you type startx you launch the graphical user interface “LXDE”. Within this environment there are plenty of applications and utilities. In your projects you may want to auto-load one or more of these applications when you run startx to save you having to launch them manually. Popular choices might include LXTerminal, Scratch, Midori and Leafpad. There are two methods you can choose. For most people either one will work but if in doubt use Method 1. In the examples below I’ve added two applications (LXTerminal and Leafpad) but you can add however many you need. Start by booting your Pi to the command prompt. Method 1 This method uses a global list of autostart applications that applies to all user accounts. They will load whenever LXDE is loaded regardless of what user is logged in at the time. Usually this user is the default ‘Pi’ account. Use the following command to launch the nano text editor and edit the autostart file : sudo nano /etc/xdg/lxsession/LXDE-pi/autostart Note : The newer Raspbian image changed the folder “LXDE” to “LXDE-pi” so the line above has been updated. After the last line add a line for each application you wish to autorun. For example if I add lines for LXTerminal and Leafpad my file looks like this : @lxpanel --profile LXDE @pcmanfm --desktop --profile LXDE @lxterminal @leafpad @xscreensaver -no-splash@ To save and exit the nano editor press CTRL-X, Y and then ENTER. You can use your preferred text editor if nano isn’t your first choice. Method 2 The alternative method is to create a configuration file that is unique to the currently logged in user. First you need to edit this text file : sudo nano ~/.config/lxsession/LXDE/autostart As in Method 1 this file represents a list of commands to be executed when the GUI loads. It is usually blank when you first edit it so just add the applications you need to auto-load: @lxterminal @leafpad To save and exit the nano editor press CTRL-X, Y and then ENTER. Test Once your configuration file has been updated you are ready to test. startx The LXDE desktop should load and your chosen applications should launch. Both Methods At The Same Time? Since v0.4.9 If both files are present, lxsession only executes the local file. This means you can no longer use both methods at the same time. Method 2 will take priority over Method 1. Auto-run Minecraft Assuming you have already installed Minecraft on your Pi you can auto-run it as well. When I am in a Python-Minecraft mood I launch Minecraft and a terminal window ready for executing scripts using the following lines : @~/mcpi/minecraft-pi @lxterminal This assume the Minecraft executable is located in ~/mcpi/ (same as /home/pi/mcpi/). Auto-run Python Scripts You can auto-launch your own Python scripts by adding the line : @/usr/bin/python /home/pi/example.py This works best with Method 2 as in this example the Python script is stored in the home directory of the default Pi user. If another user is logged in they wouldn’t have access to this directory so LXDE may not be able to autoload it. Whichever method you used just type startx from the command line and your chosen applications should load automatically. LXDE Desktop Note 1 : The order that you place the application commands doesn’t always mean they will load in that order as different applications will take different amounts of time to load completely. I would tend to put the larger applications first so they have as much time as possible to fire up. i.e. Midori before LXTerminal. Note 2 : Make sure your commands come before the @xscreensaver line. Share. Twitter Facebook Google+ Pinterest LinkedIn Tumblr Email Previous ArticleHow To Use Gnuplot To Graph Data On The Raspberry Pi Next Article How To Capture Minecraft Screenshots On The Raspberry Pi Related Posts SD Card Benchmarking on The Raspberry Pi April 11, 2016 1 Write SD Card Images Using Etcher On Windows, Linux &amp; Mac Change Skin in Minecraft Pi Edition March 24, 2016 2 How to Change Your Character Skin In Minecraft Pi Edition 7 Segment Display and the Raspberry Pi March 10, 2016 5 7-segment Display Modules and the Raspberry Pi Raspberry Pi 3 February 29, 2016 0 Raspberry Pi 3 Model B Review &amp; Setup Raspberry Pi Spy WordPress Banner - Code February 27, 2016 0 How to List the Pre-installed Packages in Raspbian systemd Screenshot October 12, 2015 15 How To Autorun A Python Script On Boot Using systemd rasp-config boot options September 30, 2015 0 Raspbian Configuration Utility and New Boot Options Hall Effect Sensor and Magnet September 28, 2015 2 How To Use A Hall Effect Sensor With The Raspberry Pi Basic Temperature Logger June 20, 2015 33 Basic Temperature Logging To The Internet With Raspberry Pi 29 Comments Paul Adomshick on May 4, 2014 12:20 am Will the python script open in a terminal window or run as a process in the background? I’d like to be able to get a python script that outputs text (generated from sensor outputs) to automatically run in a terminal window. Is there an easy way to accomplish that? Reply Matt on May 4, 2014 10:16 am It runs in the background … but you can launch LXTerminal instead and pass it a command line parameter to run a Python script. Haven’t tested it but you could try something like : @lxterminal -e ‘/usr/bin/python /home/pi/myscript.py’ -t ‘MyTitle’ Reply Paul Adomshick on May 6, 2014 4:13 am Much appreciated. I’ll try that. Reply AJ on December 2, 2015 3:35 am IMPORTANT: this line has to be added before the @xscreensaver line. Finally worked for me after reading about that here: https://www.raspberrypi.org/forums/viewtopic.php?f=91&amp;t=65607 Reply Matt on December 3, 2015 7:23 pm Thanks, I’ve added a note at the bottom of the post. Reply Don Sorensen on May 4, 2014 8:16 pm Looks like a “code” tag got misplaces in your first snippet above. I’m pretty sure the lines “To save and exit the nano editor press CTRL-X, Y and then ENTER. You can use your preferred text editor if nano isn’t your first choice.” don’t belong in the autostart file. I’m sorry if it sounds picky, but I’ve been fighting the way Wordpad puts tags into posts for about a week now. Thought you’d like to know. Great site you’ve got here. Thank you for going through the trouble. Reply Matt on May 4, 2014 8:45 pm Thanks Don. I spotted that just before I published it … then obviously forgot to actually correct it! Thanks for pointing it out. It’s sorted now. Reply Jeremy on January 11, 2015 7:23 pm I couldn’t figure out why I couldn’t get this to work. In the latest raspbian image I downloaded (around Dec 30, 2014) they changed the path for the autostart file that is used. This in method #1: sudo nano /etc/xdg/lxsession/LXDE/autostart is now this: sudo nano /etc/xdg/lxsession/LXDE-pi/autostart I hope that saves someone some time. Reply goodsayan on January 12, 2015 11:15 am folder LXDE has changed, Thanks Jeremy! Reply Claudio on January 13, 2015 11:18 pm THANK YOU! This saved me really time! Reply Daniel on January 16, 2015 3:29 am As Jeremy was saying, with the changes to the new image for Raspbian, it also effect the per user basis. I tried to figure it out for hours why my apps were not auto starter per user and you have to change the folder ~/.config/lxsession/LXDE to ~/.config/lxsession/LXDE-pi for it to work properly. Hopes this helps. Reply Ben on January 17, 2015 2:28 pm Thanks Jeremy – I am trying to use the user autostart (to start pipresents on startup) and it didn’t work until i created: ~/.config/lxsession/LXDE-pi/autostart Reading the above I guess this is new – I downloaded and installed NOOBS today, 17th Jan 2015. Hope this helps. Reply Carlos on February 18, 2015 9:39 pm Thanks all, I was having issues with this as well… I had set the pi to autostart into GUI (thru raspi-config) and all the instructions never made this work!!! However, figured out that if I disabled the autostart into GUI (via raspi-config) and run the command startx, it started working… any ideas how to make it boot the pi into GUI and have auto start of an application. My second issue is that I can now see my python script trying to execute (by running startx manually), but can’t start since input() has an EOF error… so I basically want to boot to GUI and ready for keyboard input. Something relatively easy, but has been taking me several days to figure because of all the oddities of Raspian/Pi Thanks, -Carlos Reply David van Wyk on February 24, 2015 3:07 pm Hi Guys, I am busy with an application that utilises the GPIO and it needs root priviliges, but I want it to auto start on boot. Do I need something extra, as on the command line ‘sudo’? I usually have to open the current folder as root and then I can start my application by double clicking. The above code doesn’t start my application up. Thanks. Reply Howard on April 14, 2015 10:09 am I used the following command to change the file ownership to pi and switch back to root afterward. chown pi:pi [filename] Reply David van Wyk on June 7, 2015 10:15 am Howard, I am not quite with you? I have since also upgraded to the Rpi 2B, but still having trouble starting my app. Now on the Rpi 2B I cant switch a window to root user, the option was removed. So my app doesn’t even start on normal double click anymore. It only runs if I remove gpio references from the code. How do I run a GUI with GPIO (root privileges) on Rpi 2B and more especially how can I autostart the app. I changed the file ownership to root, still doesnt work. Reply Henry Hansel on February 25, 2015 12:05 pm I too have been battling this on a RPI2 running Rasbian. My app uses GPIO and tkinter so I need X running. My intention is to auto boot to desktop and then for my application to launch covering the OS like a virtual machine. Strange behavior is that after locating the path .config/lxsession/LXDE-pi/ and creating my autostart file my python program will auto launch about 50% of the time on boot. I have not been able to determine why it will not the other times? I hope that someone can finally put a nail in this, I am dead in the water with this project until I can get 100% autostart to work. Thanks for all the input. Henry Reply Henry Hansel on March 1, 2015 12:01 pm Finally, I think that I have got autostart to work 100% of the time. I had to modify my autostart file in /etc/xdg/lxsession/LXDE-pi/autostart to read: @/usr/bin/python3.2/myscript.py myscript.py resides in home/pi I added python3.2 for it to work, apparently it was trying to run my python3 script with python2 even though the shebang statement at the top of the script calls for python3. I am a linux noob so any insight on why this works would be appreciated. Henry Reply Ashley Burt on March 17, 2015 8:03 pm I just put the commands I needed to autorun into the users .profile in their home directory. Worked like a champ. Reply Rebecca on April 11, 2015 4:51 pm Is it possible to have multiple python scripts set to run at the start up of the GUI? I have tried just adding in another @/usr/bin/python /home/pi/example.py line to the autostart file but it doesn’t run the second python script Reply Frank on October 6, 2015 2:35 pm I was having issues trying to get the R Pi2 to launch a website on boot I ended up making the change to this config file to make it work sudo nano /home/pi/.config/lxsession/LXDE-pi/autostart It worked like a charm. I had a hard time finding this solution and i hope it helps others. Reply Sal on October 26, 2015 5:18 am Frank thank you spent hours and hours looking for this solution, editing sudo nano /home/pi/.config/lxsession/LXDE-pi/autostart Worked perfect! THANKS!!!! Reply Mark Baker on October 28, 2015 3:15 pm I’ve modified /home/pi/.config/lxsession/LXDE-pi/autostart adding @xfreerdp server1 to automatically start a RDP session to a terminal server. It works perfectly if I manually login as pi but as soon as I reconfigure it to automatically login as pi into the desktop it stops working. If I add @leafpad to the autostart file it works but not the @xfreerdp Any suggestions? Reply Peter Triandafillou on January 24, 2016 10:42 pm This thread has been very helpful – thanks to all the contributors. I have a question: I added a line to start an lxterminal to run my program, and it works. However, my program accesses a Sense Hat, and it needs to start with sudo to run properly. Is there a way to specify the user password in the autostart line so that it doesn’t need to be entered? I’m developing an application that would be better off without a keyboard. Thanks! Reply Alex Cahill on February 11, 2016 10:59 pm Annonyingly I took me 2 days to figure out that method 1 no longer works. https://wiki.archlinux.org/index.php/LXDE#Autostart “Note: If both files are present, lxsession only executes the local file as of v0.4.9” Reply Matt on February 15, 2016 8:27 pm Method should work as long as there are no local files defined. Thanks for the tip, I’ve modified the article to mention the local file take priority over the global file. Reply Peter on February 23, 2016 12:54 pm I have a small problem. I want to autostart two programs and of cause it works with mentioned method no.1. The problem is, I want to start them in two different virtuell desktops, unfortunately both programs are starting only on one desktop and I really do not find a way to start on the defined desktops. Any idea? Reply jordan on March 12, 2016 11:09 pm THANK YOU I have been trying to find a way to get this to work, and i’ve seen other tutorials like this, but only using method 1 and I could never get it to work. Method 2 worked perfectly for me. Thank you again! Reply ALI on April 10, 2016 6:39 pm Can I run a shell file placed on Desktop on reboot?? How to do that? Reply Leave A Reply Cancel Reply Recent Popular News Raspberry Pi Zero with camera connector May 16, 2016 0 Raspberry Pi Zero now has a camera connector Top 5 Raspberry Pi 3 Project Ideas May 15, 2016 0 Top 5 Raspberry Pi 3 Project Ideas BBC Microbit and Raspberry Pi May 1, 2016 1 Using the BBC Microbit with the Raspberry Pi Raspberry Pi KANO Computer Kit April 28, 2016 0 Kano Computer Kit First Impressions Pi Camera v2 April 25, 2016 0 8-megapixel Raspberry Pi Camera Module v2 16x2_lcd_module_1 July 27, 2012 86 16×2 LCD Module Control Using Python MCP3008 Example Circuit #2 October 20, 2013 79 Analogue Sensors On The Raspberry Pi Using An MCP3008 Raspberry Pi Sucks September 19, 2014 63 Top 5 Reasons The Raspberry Pi Sucks DS18B20 Command Line Setup March 15, 2013 47 Raspberry Pi 1- Wire Digital Thermometer Sensor (DS18B20) Raspberry Pi Model B+ July 11, 2012 45 Stepper Motor Control In Python Raspberry Pi 3 February 28, 2016 2 Introducing The Raspberry Pi 3 Model B Raspberry Pi Model B+ November 30, 2015 0 Raspberry Pi Family Photo by RasPi.TV Raspberry Pi Zero November 26, 2015 6 Introducing the Raspberry Pi Zero Pi Projects Book November 23, 2015 0 The Official Raspberry Pi Projects Book Raspberry Pi Display September 8, 2015 5 Official Raspberry Pi Touchscreen Display is here Search for: Categories 3D Printing Add-ons BBC Micro:bit BerryClip Books Camera Module Cases Events General Hardware I2C Infographics Minecraft Model A+ Model B+ News Pi 2 Model B Pi Models Pi Zero Power Programming Python Raspbian Robotics Sensors Software SPI Tutorials &amp; Help Tags 3D Printing 44780 audio avconv battery berryclip Birthday bluetooth cambridge camera CamJam cpu DigiMakers display GPIO i2c Kickstarter lcd LED Li-on Linux Minecraft Model A Model B mp4 pcb photography photos Pi-Lite portable power python Raspberry Pi Bootcamp raspbian ravpower revision sd card security sensor soldering SPI temperature ultrasonic usb video Raspberry PI Related Averageman Vs Pi MattsBits – Pi Resources Official RaspBerry Pi Site Raspberry Pi Pod RasPi.tv Raspihub.com RaspTut Rastrack.co.uk RPi School Tech Resources How2Code Technology Spy Archives Archives About Unofficial site devoted to the Raspberry Pi credit card sized computer offering tutorials, guides, resources,scripts and downloads. We hope to help everyone get the most out of their Pi by providing clear, simple articles on configuring, programming and operating it. Popular Posts 16x2_lcd_module_1 July 27, 2012 86 16×2 LCD Module Control Using Python MCP3008 Example Circuit #2 October 20, 2013 79 Analogue Sensors On The Raspberry Pi Using An MCP3008 Raspberry Pi Sucks September 19, 2014 63 Top 5 Reasons The Raspberry Pi Sucks Recent Posts Raspberry Pi Zero with camera connector May 16, 2016 0 Raspberry Pi Zero now has a camera connector Top 5 Raspberry Pi 3 Project Ideas May 15, 2016 0 Top 5 Raspberry Pi 3 Project Ideas BBC Microbit and Raspberry Pi May 1, 2016 1 Using the BBC Microbit with the Raspberry Pi Entries RSS | Comments RSS This site is not associated with the official Raspberrypi.org site or the Raspberry Pi Foundation. Raspberry Pi is a trademark of the Raspberry Pi Foundation. Copyright © 2015 - All Rights Reserved - Matt Hawkins Advertisement More information &amp; opt-out options » What is interest based advertising » AdRoll Privacy Policy » Privacy Controls by Ghostery, Inc. [ X ] AdRoll works with brands to provide ads that are relevant and useful based on anonymous browsing information, and we do not collect or store your personal information. We also believe in providing transparency &amp; control over the type of ads that we show you. Please access the below links for more information. Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622114237#index"
                   NS1:content="­ Menu DIY How to Choose and Optimise Your Raspberry Pi Browser Written by Christian Cawley September 18, 2013 How to Choose and Optimise Your Raspberry Pi Browser Ads by Google Whatever your current Raspberry Pi project, you might need to access the web. Unfortunately, speedy browsing isn’t a strength of this small computer – is there any way to speed things up? Thankfully, there are several methods you can use, depending on your chosen browser. For instance, if you’re using the Raspbian distro (and as the most popular option among many, we’ll assume you are) then you will have the Midori browser pre-installed. Although useful, this browser doesn’t really offer much in terms of speed. So what should you do? Is there a better browser that Raspberry Pi users might find more useful? Why Using The Right Browser Is Important The chances are that if you’re using the Raspberry Pi for web browsing, you’re probably doing so as part of your software development work rather than using the little computer as a desktop PC. As good as Midori is, the general inability of web developers to code JavaScript concisely, economically and correctly can lead to problems with many sites failing to open correctly or in a timely manner on the Pi as the CPU gets tied up with a lot of largely unnecessary processing work. Using the right browser – hopefully something light on resources but fast on page load times – will help you to be more efficient with your web browsing. Ads by Google Top Browser Options For The Raspberry Pi There are four different Linux browsers that can be used with the Raspberry Pi. Each has its own strengths and weaknesses, but it’s arguable that only one of these is really suitable. Midori This is a default browser that is found in Raspbian and all distros and builds based on this OS. muo-rpi-browser-midori NetSurf An alternative to Midori, also found in Raspbian. This is a faster option, and does a reasonably good job rendering “complex” web pages, in general (although as you can see it struggles with the new MakeUseOf home page). muo-rpi-browser-netsurf Lynx Super fast if you want a text-based web browsing experience, Lynx isn’t ideal for everyone. Install using sudo apt-get install lynx. Although it is added to the Other menu, you should run the browser from LXTerminal with the command lynx. muo-rpi-browser-lynx Chromium The Raspberry Pi’s version of the Chromium browser is fast and impressive, and can be installed using sudo apt-get install chromium. A drawback with this browser is that it isn’t as lightweight as the others and will max out your Pi’s processor. muo-rpi-browser-chromium Luakit This is a lightweight and configurable browser that many Raspberry Pi users are now using in preference to Midori. Install with sudo apt-get install luakit. muo-rpi-browser-luakit Configuration Tips For Midori Although Luakit, WebSurf and Lynx are all pretty fast browsers (albeit limited in the case of Lynx!) some useful configuration tips can be employed to get the most out of Midori. In Midori, open Settings &gt; Preferences to make some changes to how the browser behaves. For instance, on the Startup tab, When Midori starts is set to Show last open tabs, which can result in a bit of a wait for the browser to load. To avoid this, switch to Show Speed Dial or Show last tabs without loading. In the Behaviour tab, you should toggle the Load images automatically, Enable scripts and Enable Netscape plugins options to decide whether you want those items active – disabling will speed things up, but may not improve your browsing experience. muo-rpi-browser-midoriprefs Finally on the Privacy tab, use the Enable offline web application cache and Enable HTML5 local storage support options to speed up caching. Shortcomings Of Raspberry Pi Web Browsers While the tips above can be used to improve browsing on the Raspberry Pi, there is a very important element to all of this that cannot be underlined enough: These browsers might be useful, they might be fast at loading certain pages, but they are absolutely useless for loading webpages and content relying on Adobe Flash, such as games and video streaming services. Similarly, websites that use AJAX for formatting and providing live updates (such as Facebook, various newspaper websites, etc.) should also be avoided unless you’re prepared for a wait. Note that NetSurf defaults to mobile versions of such sites – and even then the results can be sluggish. Gmail, too, cannot be used except in HTML mode, and even then you can expect a bit of a wait for the page to load. Some JavaScript is supported by these browsers, but as this code is often used to launch more demanding scripts and content, you should overall not expect to be able to use your Raspberry Pi browser in the same way as you can use a Windows, Mac or standard Linux browser. Customise Midori, Or Rely On Alternatives Although the Midori browser comes as default with the Raspbian distro, speed aside, it is no better or worse than the others and is prone to failure with certain websites. By contrast, NetSurf and Luakit are far better alternatives. What do you think? Is Midori sufficient for your Raspberry Pi browsing needs, or do you use any of the alternatives listed here? Should the Raspbian distro start offering more alternatives to Midori? Let us know your thoughts in the comments below. Image Credits: Raspberry Via Shutterstock Share Tweet Pin Text Stumble Bookmark Mail × Thanks for subscribing. We've sent you a confirmation link you'll need to click on to verify your email address. Sign up to be notified of new articles on the topics discussed: DIY Raspberry Pi Christian Cawley The input is not a valid email addressEmail is required Subscribe Join live MakeUseOf Groups on Grouvi App Join live Groups on Grouvi Raspberry Pi Projects Raspberry Pi Projects 510 Members Join DIY Tech Projects DIY Tech Projects 396 Members Join Arduino Projects Arduino Projects 333 Members Join Comments (7) Write a Comment Josh 17 June, 2016 Hey I am doing a Science Fair Project with my Raspberry Pi 2 Model B. I want to completely uninstall Midori, or just change the settings for the default application to surf the web. I got LuaKit, and I want to make this the default application for using the web. Could anyone help? Thanks! Anonymous. Reply JK 20 February, 2015 How about Dillo? Reply Bill 6 December, 2013 After trying all of the browsers that come with Raspi to display graphics using the shape, none worked. I downloaded Chromium, and it worked fine. You’re no doubt right about using a lot of memory, but I’m working up some experiments using PHP to see if I can dynamically drive svg “space ships”. Here’s the HTML5/XML that worked for on Raspi: SVG Distance Oopz and Hackz Thanks for the tip. Bill Reply jviyer 4 March, 2014 Bill, How did you get it to work with html5 ? (chromium) When I tried loading an html5 page it said “HTML 5 is unsupported” Reply Bill 4 March, 2014 @jviyer Try this using Chromium Web Browser on the following link: http://nemo.mwd.hartford.edu/~wsanders/phpDP/distance1/D0.html The following snippet is in the code: …. Oopz and Titeaz etc… As you can see, it employs HTML5 SVG, and it runs on my Raspi using Debian (Rasbian) OS–being fabulously wealthy, I got the Model B (Rev 2) version of Raspi. Kindest regards, Bill Bill Reply KarlB 21 October, 2013 Thanks for writing up this very useful information! Reply Bartek Zdanowski 19 September, 2013 Hi there. I’ve created little app that had a frontend in jQuery, using CSS3 effects. Midori didn’t handle it and it was very slow. But Chromium did the job very well. I recommend it as it’s modern and runs faster on RPi. Cheers, Bartek Reply A comment is required and cannot be emptyA comment is not valid Post comment Affiliate Disclamer This article may contain affiliate links, which pays us a small compensation if you do decide to make a purchase based on our recommendation. Our judgement is in no way biased, and our recommendations are always based on the merits of the items. For more details, please read our disclosure. Subscribe to our newsletter Get Invoxia Triby Review and Giveaway Win an Invoxia Triby in Our Latest Giveaway! 7 Operating Systems You Can Run With Raspberry Pi Who can argue with a $40 computer? Especially one that also forms a good base for electronics projects! I certainly can't. But the hardware alone is only one side of the story: you still need … Use Your Raspberry Pi Like a Desktop PC There are so many amazing things that you can do with a Raspberry Pi, from running your own space program to building a media centre. But what about using it as a desktop PC? Although ostensibly … 12 Worthy Alternative Browsers for Linux Even though Firefox is the default browser in most Linux distro, that doesn't mean you have to confine yourselves to Firefox. While I love Firefox for its user friendliness and its marvelous library of extensions, … What You Need to Know About Getting Started with Raspberry Pi The Raspberry Pi computer is the latest in a line of compact, multi-function devices, shipped as a barebones package so that end users can use the hardware for virtually any computing project that comes to … How to Cast Videos From PC to TV Using VLC &amp; Chromecast Casting Chrome tabs on your computer to your Google Chromecast couldn't be easier thanks to the dedicated extension, but getting local files from your computer cast to your TV isn't as easy. There's a couple of … Find Out How Far Uber or Lyft Can Go on Your Budget Planning on going somewhere? A little strapped for cash? We've found a cool website that will show you how far you can get with popular services like Uber and Lyft depending on how much money … Affiliate Disclamer This article may contain affiliate links, which pays us a small compensation if you do decide to make a purchase based on our recommendation. Our judgement is in no way biased, and our recommendations are always based on the merits of the items. For more details, please read our disclosure. One-Click Login Home My Bookmarks Tech News Giveaways Windows Mac Linux Android iOS Internet Social Media Browsers Smart Home DIY Security Gaming Tech Explained Self Improvement Creative Office Productivity Entertainment Finance Deals 402k 134k 172k About Advertise Privacy Contact ×Close Login instanly using your social accounts or email or The email is required and cannot be emptyInvalid email address The password is required and cannot be empty Don't have an account? Register Log In Lost your password? ← Back to MakeUseOf The email is required and cannot be emptyInvalid email addressIt looks like you've already registered using either Facebook or Google Plus - try logging in with that Register Resend Confirmation Link ← Back to MakeUseOf Please enter your email address. You will receive a link to create a new password via email. Email is required and cannot be emptyInvalid email addressEmail does not exist Get new password Please enter your email address. You will receive a confirmation link. Email is required and cannot be emptyInvalid email address Resend Confirmation Link × Close Sign up for more tips and awesome articles Let's go New comment Please login to avoid entering captcha Log In Submit Download Opera browser The premium web browser for more Speed, Security &amp; Style. Download now Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d Download Opera browser The premium web browser for more Speed, Security &amp; Style. Download now Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620171940#index"
                   NS1:content=" &lt;plaintext/&gt;&lt;xmp&gt;. Tommy My account Search Maps Play Gmail Drive Calendar Google+ Translate Photos Groups Add a shortcut More Docs Books Blogger Contacts My Business Hangouts Even more from Google Change Tommy Wonday tommy.britnell@googlemail.com Google+ Profile–Privacy My account Google+ Profile Icon Tommy Wonday tommy.britnell@googlemail.com (default) Google+ Profile Icon Thomas Britnell t.a.britnell@gmail.com All your Google+ pages › Add account Sign out Hidden fields Search for groups or messages Groups Post reply of () My groups Home Starred 0 Saved searches Import predefined searches to add them to your saved searches. 0 Favourites Click on a group’s star icon to add it to your favourites 0 Recently viewed 0 BeagleBoard 0 Paper.js 0 reCAPTCHA 0 Gaelyk 0 schule.mathe 0 Recent searches 0 app engine (in recaptcha) 0 Gae (in recaptcha) 0 Recently posted to Sign in or start browsing to organise your groups and view recent items. Privacy - Terms of Service BeagleBoard › This topic is no longer open for new replies due to inactivity. If you would like to post a message, please search for a more recent topic above or post a new question. beaglebone with module GPRS This topic is a duplicate of another discussion. You were redirected here from a duplicate topic. 13 posts by 9 authors Previous Previous Page 1 Next Next Antonio Garcia Oteros 02/03/2012 Other recipients: Hi, I need information about how &amp; which module GPRS use with the beaglebone, I am new with this board and I am looking for links and documentation to use a module GPRS. I think the fast way to start is use a dongle USB GPRS module with drivers Hi, I need information about how &amp; which module GPRS use with the beaglebone, I am new with this board and I am looking for links and documentation to use a module GPRS. I think the fast way to start is use a dongle USB GPRS module with drivers for Linux but I don't know which model is the better. Anybody how to know use a dongle USB GPRS module with beaglebone? Thanks. Show trimmed content Click here to Reply Completed Nina Marin 18/04/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: when i plug Huawei i got this: [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 [ 33.965209] scsi 1:0:0:0: when i plug Huawei i got this: [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 [ 33.965209] scsi 1:0:0:0: Direct-Access HUAWEI SD Storage 2.31 PQ: 0 ANSI: 2 [ 33.975311] scsi 0:0:0:0: CD-ROM HUAWEI Mass Storage 2.31 PQ: 0 ANSI: 2 [ 33.994232] sr0: scsi-1 drive [ 33.997375] cdrom: Uniform CD-ROM driver Revision: 3.20 [ 34.011810] sr 0:0:0:0: Attached scsi CD-ROM sr0 [ 34.012603] sr 0:0:0:0: Attached scsi generic sg0 type 5 [ 34.019958] sd 1:0:0:0: Attached scsi generic sg1 type 0 [ 34.028228] sd 1:0:0:0: [sda] Attached SCSI removable disk it doesn't say where it is attached (tty...)... - show quoted text - Dana četvrtak, 18. travnja 2013. 17:05:00 UTC+2, korisnik Dieter Wirz napisao je: On Thu, Apr 18, 2013 at 3:44 PM, &lt;nina3...@gmail.com&gt; wrote: &gt; &gt; Can someone tell me how to disable cd rom mode of the usb dongle? &gt; &gt; I'm working with Beagleboard (Angstrom) and i want to connect it with my &gt; Huawei e137, but i realized that the problem is that BB sees huawei as cd &gt; rom and not as ttyUSBx. &gt; &gt; Please if someone know step how to do this? i'm new in this so i don't &gt; know where to look. &gt; Most of these modems have both, some &quot;cd rom&quot; with some autoboot software for Windows _and_ a ttyxxxx. Have a look at the Kernel logs to find the latter.... Dieter Show trimmed content Marked as complete byChrs2021 See this answer in its original position All replies vitoracmm 03/03/2012 Other recipients: Hi, in my beaglebone I tested Huawei K3765 , Huawei E353 and ZTE MF626 3G USB dongles with success Now I'm using Huawei E353 because it has antenna connector and more reliable for a all-time-connected. U can find K3765 or E353 on ebay unlocked Hi, in my beaglebone I tested Huawei K3765 , Huawei E353 and ZTE MF626 3G USB dongles with success Now I'm using Huawei E353 because it has antenna connector and more reliable for a all-time-connected. U can find K3765 or E353 on ebay unlocked for nice price. It would be easier to get the modem working on the bone with ubuntu http://elinux.org/BeagleBoardUbuntu#Demo_Image Kind of plug an play, Only need to install ppp dialer apt-get install ppp After that it is recommend to disable the CD-ROM mode of the USB dongle, for this u need to open a serial connection for example in windows and type at^u2diag=256 enter or at^u2diag=0 enter , more info about that search google &quot;HUAWEI Disable CDRom Mode&quot; To test AT command on serial just write AT than enter And u should receive OK if the serial connection is correct, if not try other serial port.. After that u plug the dongle in bone and go on command line and type dmesg It will list the device pluged like this : [254514.772777] usb 1-1.2: new high-speed USB device number 12 using musb-hdrc [254514.874784] usb 1-1.2: New USB device found, idVendor=12d1, idProduct=1001 [254514.874834] usb 1-1.2: New USB device strings: Mfr=3, Product=2, SerialNumber=0 [254514.874872] usb 1-1.2: Product: HUAWEI Mobile [254514.874901] usb 1-1.2: Manufacturer: HUAWEI Technology [254514.885585] option 1-1.2:1.0: GSM modem (1-port) converter detected [254514.886712] usb 1-1.2: GSM modem (1-port) converter now attached to ttyUSB0 [254514.889588] option 1-1.2:1.1: GSM modem (1-port) converter detected [254514.890889] usb 1-1.2: GSM modem (1-port) converter now attached to ttyUSB1 [254514.895496] option 1-1.2:1.2: GSM modem (1-port) converter detected [254514.896857] usb 1-1.2: GSM modem (1-port) converter now attached to ttyUSB2 [254514.899147] scsi9 : usb-storage 1-1.2:1.3 [254515.915439] scsi 9:0:0:0: Direct-Access Vodafone Storage (Huawei) 2.31 PQ: 0 ANSI: 2 [254515.930543] sd 9:0:0:0: Attached scsi generic sg0 type 0 [254515.938729] sd 9:0:0:0: [sda] Attached SCSI removable disk If u get this ur on the good way U have 3 serial ttyUSB0 , ttyUSB1 , ttyUSB2, and sda(microsd card) ttyUSB0 is for the ppp dialer and ttyUSB2 is for AT command mode and monitor (u can also send and receive SMS) If u want to get into GPRS mode instead of 3G/UMTS u have to send an AT command AT^SYSCFG=13,1,3FFFFFFF,1,2 for GPRS only or AT^SYSCFG=14,2,3FFFFFFF,1,2 for 3G only (default) GPRS is much slower and more ping but u have much more distance range Need also to register a modem to network send AT+CPIN=xxxx on AT command line where xxxx is ur PIN , u should receive OK that the modem is registered at network. Now u have to configure the pppd (must be installed first apt-get install ppp) I'm using the following command to activate my connection: pppd /dev/ttyUSB0 921600 mtu 552 mru 552 modem crtscts dump defaultroute noipdefault usepeerdns ktune noauth logfd 2 logfile / pppd.log lock persist holdoff 1 maxfail 20 connect &quot;/usr/sbin/chat -v -f /etc/ppp/connect_script&quot; U have to edit the dialer script with command nano /etc/ppp/ connect_script My script is this: # chat script ABORT 'NO CARRIER' ABORT 'NO DIALTONE' ABORT 'BUSY' ABORT 'ERROR' ABORT 'NO ANSWER' '' 'ATZ' OK 'AT&amp;F' OK 'ATQ0 V1 E1' OK 'AT&amp;D2 &amp;C1' OK 'AT+FCLASS=0' OK 'ATS0=0' # repalce internet.vodafone.pt with ur provider OK 'AT+CGDCONT=1,&quot;IP&quot;,&quot;internet.vodafone.pt&quot;' # make sure the dial number for ur operator data mode is *99# OK 'ATDT*99#' CONNECT '' After u have this script with ur provider and correct dial number u can use the pppd command to get connected as I said before. U can also see the log of pppd to see if everything went allright with command cat /pppd.log Then u do an ifconfig and u will see ur new ppp connection with the IP of mobile dongle. U could also use sakis3G to get connected in a easier way http://wiki.sakis3g.org/wiki/index.php?title=Sakis3G_installation sakis3g connect APN=&quot;internet&quot; APN_USER=&quot;&quot; APN_PASS=&quot;&quot; USBDRIVER=&quot;option&quot; MODEM=&quot;OTHER&quot; OTHER=&quot;CUSTOM_TTY&quot; CUSTOM_TTY=&quot;/dev/ ttyUSB0&quot; SIM_PIN=&quot;xxxx&quot; Just repalce xxxx with pin and use ur APN provider ,user and pass or u can use interactive mode type command sakis3G connect -- interactive If u are using angstrom distribution on bone u will have more work to do get it connected, a good start is http://www.pandorawiki.org/USB_compatibility_list#HSDPA_.283G.29_Modems u can see some help to get dongles working, just collect ideas an u could have luck Regards Show trimmed content whoobee 18/09/2012 Other recipients: Great example @vitoracmm I got my Huavey E3131s-2 working with ubuntu demo image. In ifconfig I see my dongle IP, but I cannot connect to the ssh server with that IP. Any ideea why? I am not that experienced with linux or networking. Thank you Great example @vitoracmm I got my Huavey E3131s-2 working with ubuntu demo image. In ifconfig I see my dongle IP, but I cannot connect to the ssh server with that IP. Any ideea why? I am not that experienced with linux or networking. Thank you Show trimmed content Juan 04/10/2012 Other recipients: Hi , if you are using Ubuntu you can install wvdial, it is easier than ppp : sudo apt-get install wvdial. Hi , if you are using Ubuntu you can install wvdial, it is easier than ppp : sudo apt-get install wvdial. - show quoted text - El martes, 18 de septiembre de 2012 21:50:01 UTC+2, whoobee escribió: Great example @vitoracmm I got my Huavey E3131s-2 working with ubuntu demo image. In ifconfig I see my dongle IP, but I cannot connect to the ssh server with that IP. Any ideea why? I am not that experienced with linux or networking. Thank you Show trimmed content Lars Poulsen 04/10/2012 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: Is wvdial in the repositories for Ubuntu on beaglebone? Last time I checked I could not find it. But I did hear something about it being installed as default at some time. Is wvdial in the repositories for Ubuntu on beaglebone? Last time I checked I could not find it. But I did hear something about it being installed as default at some time. - show quoted text - On 04/10/2012, at 12.50, Juan &lt;jido...@gmail.com&gt; wrote: &gt; - show quoted text - &gt; Hi , if you are using Ubuntu you can install wvdial, it is easier than ppp : sudo apt-get install wvdial. &gt; &gt; &gt; El martes, 18 de septiembre de 2012 21:50:01 UTC+2, whoobee escribió: &gt; &gt; Great example @vitoracmm I got my Huavey E3131s-2 working with ubuntu demo image. In ifconfig I see my dongle IP, but I cannot connect to the ssh server with that IP. Any ideea why? I am not that experienced with linux or networking. &gt; &gt; Thank you &gt; &gt; -- &gt; &gt; Show trimmed content RobertCNelson 04/10/2012 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: It's installed by default with the 9-27 update, in precise &amp; quantal... (for oneiric, it was not apt-get able..) Regards, -- Robert Nelson http://www.rcn-ee.com/ On Thu, Oct 4, 2012 at 11:25 AM, Lars Poulsen &lt;larsop...@gmail.com&gt; wrote: &gt; Is wvdial in the repositories for Ubuntu on beaglebone? Last time I checked &gt; I could not find it. But I did hear something about it being installed as &gt; default at some time. It's installed by default with the 9-27 update, in precise &amp; quantal... (for oneiric, it was not apt-get able..) Regards, -- Robert Nelson http://www.rcn-ee.com/ Show trimmed content Marco Casaroli 08/01/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: http://elinux.org/BeagleBoardUbuntu#Demo_Image Marco Casaroli On Tue, Jan 8, 2013 at 3:00 PM, Adam At Epsilon &lt;adam.at...@gmail.com&gt; wrote: &gt; Hi, &gt; &gt; excuse the noob question but if I compile an Ubuntu kernel to use with &gt; Beaglebone, what http://elinux.org/BeagleBoardUbuntu#Demo_Image Marco Casaroli On Tue, Jan 8, 2013 at 3:00 PM, Adam At Epsilon &lt;adam.at...@gmail.com&gt; wrote: Hi, excuse the noob question but if I compile an Ubuntu kernel to use with Beaglebone, what rootfs should I use on the SD card? Best Regards, Adam - show quoted text - On Thursday, October 4, 2012 7:02:57 PM UTC+2, RobertCNelson wrote: - show quoted text - On Thu, Oct 4, 2012 at 11:25 AM, Lars Poulsen &lt;larsop...@gmail.com&gt; wrote: &gt; Is wvdial in the repositories for Ubuntu on beaglebone? Last time I checked &gt; I could not find it. But I did hear something about it being installed as &gt; default at some time. It's installed by default with the 9-27 update, in precise &amp; quantal... (for oneiric, it was not apt-get able..) Regards, -- Robert Nelson http://www.rcn-ee.com/ -- For more options, visit http://beagleboard.org/discuss Show trimmed content Nina Marin 18/04/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: Can someone tell me how to disable cd rom mode of the usb dongle? I'm working with Beagleboard (Angstrom) and i want to connect it with my Huawei e137, but i realized that the problem is that BB sees huawei as cd rom and not as ttyUSBx. Please if Can someone tell me how to disable cd rom mode of the usb dongle? I'm working with Beagleboard (Angstrom) and i want to connect it with my Huawei e137, but i realized that the problem is that BB sees huawei as cd rom and not as ttyUSBx. Please if someone know step how to do this? i'm new in this so i don't know where to look. Thanks - show quoted text - Dana utorak, 8. siječnja 2013. 20:20:30 UTC+1, korisnik Marco Casaroli napisao je: http://elinux.org/BeagleBoardUbuntu#Demo_Image Marco Casaroli On Tue, Jan 8, 2013 at 3:00 PM, Adam At Epsilon &lt;adam.at...@gmail.com&gt; wrote: Hi, excuse the noob question but if I compile an Ubuntu kernel to use with Beaglebone, what rootfs should I use on the SD card? Best Regards, Adam On Thursday, October 4, 2012 7:02:57 PM UTC+2, RobertCNelson wrote: On Thu, Oct 4, 2012 at 11:25 AM, Lars Poulsen &lt;larsop...@gmail.com&gt; wrote: &gt; Is wvdial in the repositories for Ubuntu on beaglebone? Last time I checked &gt; I could not find it. But I did hear something about it being installed as &gt; default at some time. It's installed by default with the 9-27 update, in precise &amp; quantal... (for oneiric, it was not apt-get able..) Regards, -- Robert Nelson http://www.rcn-ee.com/ -- For more options, visit http://beagleboard.org/discuss Show trimmed content Dieter Wirz 18/04/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: Most of these modems have both, some &quot;cd rom&quot; with some autoboot software for Windows _and_ a ttyxxxx. Have a look at the Kernel logs to find the latter.... Dieter On Thu, Apr 18, 2013 at 3:44 PM, &lt;nina3...@gmail.com&gt; wrote: &gt; &gt; Can someone tell me how to disable cd rom mode of the usb dongle? &gt; &gt; I'm working with Beagleboard (Angstrom) and i want to connect it with my &gt; Huawei e137, but i realized that the problem is that BB sees huawei as cd &gt; rom and not as ttyUSBx. &gt; &gt; Please if someone know step how to do this? i'm new in this so i don't &gt; know where to look. &gt; Most of these modems have both, some &quot;cd rom&quot; with some autoboot software for Windows _and_ a ttyxxxx. Have a look at the Kernel logs to find the latter.... Dieter Show trimmed content Nina Marin 18/04/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: when i plug Huawei i got this: [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 [ 33.965209] scsi 1:0:0:0: when i plug Huawei i got this: [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 [ 33.965209] scsi 1:0:0:0: Direct-Access HUAWEI SD Storage 2.31 PQ: 0 ANSI: 2 [ 33.975311] scsi 0:0:0:0: CD-ROM HUAWEI Mass Storage 2.31 PQ: 0 ANSI: 2 [ 33.994232] sr0: scsi-1 drive [ 33.997375] cdrom: Uniform CD-ROM driver Revision: 3.20 [ 34.011810] sr 0:0:0:0: Attached scsi CD-ROM sr0 [ 34.012603] sr 0:0:0:0: Attached scsi generic sg0 type 5 [ 34.019958] sd 1:0:0:0: Attached scsi generic sg1 type 0 [ 34.028228] sd 1:0:0:0: [sda] Attached SCSI removable disk it doesn't say where it is attached (tty...)... - show quoted text - Dana četvrtak, 18. travnja 2013. 17:05:00 UTC+2, korisnik Dieter Wirz napisao je: On Thu, Apr 18, 2013 at 3:44 PM, &lt;nina3...@gmail.com&gt; wrote: &gt; &gt; Can someone tell me how to disable cd rom mode of the usb dongle? &gt; &gt; I'm working with Beagleboard (Angstrom) and i want to connect it with my &gt; Huawei e137, but i realized that the problem is that BB sees huawei as cd &gt; rom and not as ttyUSBx. &gt; &gt; Please if someone know step how to do this? i'm new in this so i don't &gt; know where to look. &gt; Most of these modems have both, some &quot;cd rom&quot; with some autoboot software for Windows _and_ a ttyxxxx. Have a look at the Kernel logs to find the latter.... Dieter Show trimmed content Marked as complete byChrs2021 Dieter Wirz 18/04/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: Did you wait long enough? I have no BB here, but I plugged in an old Novatel Modem into my ubuntu Laptop: [ 454.282437] usb 1-1.2.1: new full-speed USB device number 13 using ehci_hcd And three minutes later: [ 457.497443] usb 1-1.2.1: GSM On Thu, Apr 18, 2013 at 6:37 PM, &lt;nina3...@gmail.com&gt; wrote: &gt; when i plug Huawei i got this: &gt; &gt; [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile &gt; [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI &gt; [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 &gt; [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 &gt; [ 33.965209] scsi 1:0:0:0: Direct-Access HUAWEI SD Storage &gt; 2.31 PQ: 0 ANSI: 2 &gt; [ 33.975311] scsi 0:0:0:0: CD-ROM HUAWEI Mass Storage &gt; 2.31 PQ: 0 ANSI: 2 &gt; [ 33.994232] sr0: scsi-1 drive &gt; [ 33.997375] cdrom: Uniform CD-ROM driver Revision: 3.20 &gt; [ 34.011810] sr 0:0:0:0: Attached scsi CD-ROM sr0 &gt; [ 34.012603] sr 0:0:0:0: Attached scsi generic sg0 type 5 &gt; [ 34.019958] sd 1:0:0:0: Attached scsi generic sg1 type 0 &gt; [ 34.028228] sd 1:0:0:0: [sda] Attached SCSI removable disk &gt; &gt; it doesn't say where it is attached (tty...)... &gt; Did you wait long enough? I have no BB here, but I plugged in an old Novatel Modem into my ubuntu Laptop: [ 454.282437] usb 1-1.2.1: new full-speed USB device number 13 using ehci_hcd And three minutes later: [ 457.497443] usb 1-1.2.1: GSM modem (1-port) converter now attached to ttyUSB0 Show trimmed content Nina Marin 19/04/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: yes, i waited for ten minutes and nothing happened :( yes, i waited for ten minutes and nothing happened :( - show quoted text - Dana četvrtak, 18. travnja 2013. 20:01:40 UTC+2, korisnik Dieter Wirz napisao je: On Thu, Apr 18, 2013 at 6:37 PM, &lt;nina3...@gmail.com&gt; wrote: &gt; when i plug Huawei i got this: &gt; &gt; [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile &gt; [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI &gt; [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 &gt; [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 &gt; [ 33.965209] scsi 1:0:0:0: Direct-Access HUAWEI SD Storage &gt; 2.31 PQ: 0 ANSI: 2 &gt; [ 33.975311] scsi 0:0:0:0: CD-ROM HUAWEI Mass Storage &gt; 2.31 PQ: 0 ANSI: 2 &gt; [ 33.994232] sr0: scsi-1 drive &gt; [ 33.997375] cdrom: Uniform CD-ROM driver Revision: 3.20 &gt; [ 34.011810] sr 0:0:0:0: Attached scsi CD-ROM sr0 &gt; [ 34.012603] sr 0:0:0:0: Attached scsi generic sg0 type 5 &gt; [ 34.019958] sd 1:0:0:0: Attached scsi generic sg1 type 0 &gt; [ 34.028228] sd 1:0:0:0: [sda] Attached SCSI removable disk &gt; &gt; it doesn't say where it is attached (tty...)... &gt; Did you wait long enough? I have no BB here, but I plugged in an old Novatel Modem into my ubuntu Laptop: [ 454.282437] usb 1-1.2.1: new full-speed USB device number 13 using ehci_hcd And three minutes later: [ 457.497443] usb 1-1.2.1: GSM modem (1-port) converter now attached to ttyUSB0 Show trimmed content Nina Marin 09/05/2013 Re: [beagleboard] Re: beaglebone with module GPRS Other recipients: hi, i'm working with huawei e173s on angstrom and i can't make it to turn in modem mode. i've installed usb_modeswitch: [code]root@beagleboard:~# usb_modeswitch --version * usb_modeswitch: handle USB devices with multiple modes * Version 1.2.1 hi, i'm working with huawei e173s on angstrom and i can't make it to turn in modem mode. i've installed usb_modeswitch: [code]root@beagleboard:~# usb_modeswitch --version * usb_modeswitch: handle USB devices with multiple modes * Version 1.2.1 (C) Josua Dietze 2011 * Based on libusb0 (0.1.12 and above) ! PLEASE REPORT NEW CONFIGURATIONS ![/code] i added: [code]nano /etc/usb_modeswitch.d/12d1:1c0b ######################################################## # Huawei E173s DefaultVendor= 0x12d1 DefaultProduct= 0x1c0b TargetVendor= 0x12d1 TargetProduct= 0x1c05 CheckSuccess=20 MessageEndpoint= 0x0f MessageContent= &quot;55534243123456780000000000000011062000000100000000000000000000&quot; -------------------------------------------------------- [/code] and added a line to &quot;/lib/udev/rules.d/40-usb_modeswitch.rules&quot; [code]Huawei E173s ATTRS{idVendor}==&quot;12d1&quot;, ATTRS{idProduct}==&quot;1c0b&quot;, RUN+=&quot;usb_modeswitch '%b/%k'&quot;[/code] And now it automaticvly turn from 0x1c0b to 0x1c05 as you can see: [code][ 10.072509] usb 1-2.2: new high-speed USB device number 4 using ehci-omap [ 10.422515] usb 1-2.2: New USB device found, idVendor=12d1, idProduct=1c0b [ 10.429870] usb 1-2.2: New USB device strings: Mfr=2, Product=1, SerialNumber=0 [ 10.437683] usb 1-2.2: Product: HUAWEI Mobile [ 10.442413] usb 1-2.2: Manufacturer: HUAWEI [ 10.580352] scsi0 : usb-storage 1-2.2:1.0 [ 10.586303] scsi1 : usb-storage 1-2.2:1.1 [ 13.086059] scsi 1:0:0:0: Direct-Access HUAWEI SD Storage 2.31 PQ: 0 ANSI: 2 [ 13.095977] scsi 0:0:0:0: CD-ROM HUAWEI Mass Storage 2.31 PQ: 0 ANSI: 2 [ 13.115234] sr0: scsi-1 drive [ 13.118408] cdrom: Uniform CD-ROM driver Revision: 3.20 [ 13.134399] sr 0:0:0:0: Attached scsi generic sg0 type 5 [ 13.142211] sd 1:0:0:0: Attached scsi generic sg1 type 0 [ 13.155731] sd 1:0:0:0: [sda] Attached SCSI removable disk [ 14.951202] usb 1-2.2: USB disconnect, device number 4 [ 20.564880] usb 1-2.2: new high-speed USB device number 5 using ehci-omap [ 21.072296] usb 1-2.2: New USB device found, idVendor=12d1, idProduct=1c05 [ 21.079650] usb 1-2.2: New USB device strings: Mfr=2, Product=1, SerialNumber=0 [ 21.087493] usb 1-2.2: Product: HUAWEI Mobile [ 21.092041] usb 1-2.2: Manufacturer: HUAWEI [ 21.232208] scsi2 : usb-storage 1-2.2:1.3 [ 21.238403] scsi3 : usb-storage 1-2.2:1.4 [ 23.723358] scsi 3:0:0:0: Direct-Access HUAWEI SD Storage 2.31 PQ: 0 ANSI: 2 [ 23.733306] scsi 2:0:0:0: CD-ROM HUAWEI Mass Storage 2.31 PQ: 0 ANSI: 2 [ 23.752593] sr0: scsi-1 drive [ 23.759552] sr 2:0:0:0: Attached scsi generic sg0 type 5 [ 23.766845] sd 3:0:0:0: Attached scsi generic sg1 type 0 [ 23.775146] sd 3:0:0:0: [sda] Attached SCSI removable disk[/code] But still iz isn't recognized as ttyUSB*, and i don't know how to use it? am i doing something wrong here? Did it turned into modem mode? Dana petak, 19. travnja 2013. 19:21:30 UTC+2, korisnik Dean Franks napisao je: Usually you can use &quot;eject&quot; to eject the CD-ROM drive, and the USB modem will present the serial interface endpoints. usb-modeswitch also does this automatically for most modems. Dean - show quoted text - On Friday, April 19, 2013 1:58:08 AM UTC-5, nina3...@gmail.com wrote: yes, i waited for ten minutes and nothing happened :( Dana četvrtak, 18. travnja 2013. 20:01:40 UTC+2, korisnik Dieter Wirz napisao je: On Thu, Apr 18, 2013 at 6:37 PM, &lt;nina3...@gmail.com&gt; wrote: &gt; when i plug Huawei i got this: &gt; &gt; [ 31.310058] usb 1-2.1: Product: HUAWEI Mobile &gt; [ 31.314636] usb 1-2.1: Manufacturer: HUAWEI &gt; [ 31.454528] scsi0 : usb-storage 1-2.1:1.0 &gt; [ 31.460510] scsi1 : usb-storage 1-2.1:1.1 &gt; [ 33.965209] scsi 1:0:0:0: Direct-Access HUAWEI SD Storage &gt; 2.31 PQ: 0 ANSI: 2 &gt; [ 33.975311] scsi 0:0:0:0: CD-ROM HUAWEI Mass Storage &gt; 2.31 PQ: 0 ANSI: 2 &gt; [ 33.994232] sr0: scsi-1 drive &gt; [ 33.997375] cdrom: Uniform CD-ROM driver Revision: 3.20 &gt; [ 34.011810] sr 0:0:0:0: Attached scsi CD-ROM sr0 &gt; [ 34.012603] sr 0:0:0:0: Attached scsi generic sg0 type 5 &gt; [ 34.019958] sd 1:0:0:0: Attached scsi generic sg1 type 0 &gt; [ 34.028228] sd 1:0:0:0: [sda] Attached SCSI removable disk &gt; &gt; it doesn't say where it is attached (tty...)... &gt; Did you wait long enough? I have no BB here, but I plugged in an old Novatel Modem into my ubuntu Laptop: [ 454.282437] usb 1-1.2.1: new full-speed USB device number 13 using ehci_hcd And three minutes later: [ 457.497443] usb 1-1.2.1: GSM modem (1-port) converter now attached to ttyUSB0 Show trimmed content Previous Previous Page 1 Next Next "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620152401#index"
                   NS1:content=" Mark's Blog Marko's getting his blog on ;-) Search Main menu Skip to primary content Skip to secondary content Home About Me! Post navigation ← Previous Next → BeagleBone and USB GSM Stick Posted on 19/11/2012 by Mark More sysadmin than electronics today! I have an O2 USB modem and I was wondering about getting the BeagleBone hooked up to it. It would be cool to have the BeagleBone “phone home” if is was out in the field logging, or whatever. Front side of my USB GSM modem As you can see form the photo of the back-side it’s a Huawei Mobile Broadband E1752C USB modem. The back side of the Huawei Mobile Broadband E1752C USB stick It turns out to be really easy to use this (or any other USB GSM modem) with Ubuntu. It a little “old school” without a GUI to work in, but hay, command line is king after all!.. It brings back memories of using pppd and chat scripts when I used Linux to connect over a copper phone line to the “Internet!”. On the O2 network here in Ireland my /etc/ppp/peers/o2 file looks like this: debug connect &quot;/usr/sbin/chat -v -f /etc/chatscripts/o2&quot; lock local user &quot;o2&quot; password &quot;o2&quot; ttyUSB0 noauth defaultroute noipdefault usepeerdns ipcp-max-failure 5 lcp-echo-failure 5 lcp-echo-interval 30 persist #auth refuse-chap refuse-mschap refuse-mschap-v2 refuse-eap # compression novjccomp nobsdcomp noaccomp nopcomp novj noccp And my chat script looks like this: ECHO ON TIMEOUT 10 ABORT 'BUSY' ABORT 'NO ANSWER' ABORT 'ERROR' ABORT 'NO CARRIER' &quot;&quot; AT OK AT+CPIN=XXXX TIMEOUT 5 ERROR-AT-OK AT+CGDCONT=1,&quot;IP&quot;,&quot;open.internet&quot; OK &quot;ATD*99#&quot; CONNECT &quot;&quot; Nice little trick here for the PIN entry.. You need it the first time the modem boots up, but not for re-connecting the “TIMEOUT 5 ERROR-AT-OK” will allow the PIN code to fail (because it already been entered) and not stop the script. As I want to remote connect to BeagleBone, I’ve got it to send it’s IP address back to base (every time the PPP interface comes up). You will need to set up shared SSH keys between your server and the Bone to get this to work without a password. Then I created the following little script ( /etc/ppp/ip-up.d/001updateIP ): #!/bin/sh # # scp the current IP address back to base... # (MMcK 2012-11-19) # /sbin/ifconfig -a \ | awk '/inet addr/ { print $2 }' \ | awk -F: '{ print $2 }' \ &gt; /tmp/bone.ipaddr /usr/bin/scp -q /tmp/bone.ipaddr &lt;me&gt;@&lt;my server&gt;: Now every time the Bone comes online over the PPP interface I can connect to it by looking up it’s new IP address. This entry was posted in BeagleBone, Sysadmin and tagged BeageBone, GSM modem, ppp, USB by Mark. Bookmark the permalink. ©2016 Mark McKillen "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616165627#index"
                   NS1:content=" Previous Page Up One Level Next Page Python Library Reference Contents Module Index Index Previous: 11.5.21 HTTPErrorProcessor Objects Up: 11.5 urllib2 Next: 11.6 httplib 11.5.22 Examples This example gets the python.org main page and displays the first 100 bytes of it: &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; f = urllib2.urlopen('http://www.python.org/') &gt;&gt;&gt; print f.read(100) &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt; &lt;?xml-stylesheet href=&quot;./css/ht2html Here we are sending a data-stream to the stdin of a CGI and reading the data it returns to us. Note that this example will only work when the Python installation supports SSL. &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; req = urllib2.Request(url='https://localhost/cgi-bin/test.cgi', ... data='This data is passed to stdin of the CGI') &gt;&gt;&gt; f = urllib2.urlopen(req) &gt;&gt;&gt; print f.read() Got Data: &quot;This data is passed to stdin of the CGI&quot; The code for the sample CGI used in the above example is: #!/usr/bin/env python import sys data = sys.stdin.read() print 'Content-type: text-plain\n\nGot Data: &quot;%s&quot;' % data Use of Basic HTTP Authentication: import urllib2 # Create an OpenerDirector with support for Basic HTTP Authentication... auth_handler = urllib2.HTTPBasicAuthHandler() auth_handler.add_password('realm', 'host', 'username', 'password') opener = urllib2.build_opener(auth_handler) # ...and install it globally so it can be used with urlopen. urllib2.install_opener(opener) urllib2.urlopen('http://www.example.com/login.html') build_opener() provides many handlers by default, including a ProxyHandler. By default, ProxyHandler uses the environment variables named &lt;scheme&gt;_proxy, where &lt;scheme&gt; is the URL scheme involved. For example, the http_proxy environment variable is read to obtain the HTTP proxy's URL. This example replaces the default ProxyHandler with one that uses programatically-supplied proxy URLs, and adds proxy authorization support with ProxyBasicAuthHandler. proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'}) proxy_auth_handler = urllib2.HTTPBasicAuthHandler() proxy_auth_handler.add_password('realm', 'host', 'username', 'password') opener = build_opener(proxy_handler, proxy_auth_handler) # This time, rather than install the OpenerDirector, we use it directly: opener.open('http://www.example.com/login.html') Adding HTTP headers: Use the headers argument to the Request constructor, or: import urllib2 req = urllib2.Request('http://www.example.com/') req.add_header('Referer', 'http://www.python.org/') r = urllib2.urlopen(req) OpenerDirector automatically adds a User-Agent: header to every Request. To change this: import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User-agent', 'Mozilla/5.0')] opener.open('http://www.example.com/') Also, remember that a few standard headers (Content-Length:, Content-Type: and Host:) are added when the Request is passed to urlopen() (or OpenerDirector.open()). Previous Page Up One Level Next Page Python Library Reference Contents Module Index Index Previous: 11.5.21 HTTPErrorProcessor Objects Up: 11.5 urllib2 Next: 11.6 httplib Release 2.4.4, documentation updated on 18 October 2006. See About this document... for information on suggesting changes. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160726142731#index"
                   NS1:content="­ The ADC of the AVR » maxEmbedded Pages Menu maxEmbedded Index Categories » Featured Getting Started Robotics Electronics e-Linux Computer Vision Microcontrollers Single Board Computers Offbeat Tools maxEmbedded IndexmaxEmbedded Index Categories »Categories » Featured Getting Started Robotics Electronics e-Linux Computer Vision Microcontrollers Single Board Computers Offbeat ToolsTools TwitterRssFacebook maxEmbedded Categories Menu Home mE Index Getting Started Atmel AVR » AVR Basics AVR ADC AVR Serial AVR Timers Electronics More » Search Code Gallery Blogroll Robotics e-Linux Computer Vision MSP430 Single Board Computers Tools Sitemap About » Contact Credits HomeHome mE IndexmE Index Getting StartedGetting Started Atmel AVR »Atmel AVR » AVR Basics AVR ADC AVR Serial AVR Timers ElectronicsElectronics More »More » Search Code Gallery Blogroll Robotics e-Linux Computer Vision MSP430 Single Board Computers Tools Sitemap About »About » Contact Credits Home » Atmel AVR » The ADC of the AVR Posted by Mayank on Jun 20, 2011 in Atmel AVR, Microcontrollers | 318 comments The ADC of the AVR The ADC of the AVR Analog to Digital Conversion AVR SeriesMost real world data is analog. Whether it be temperature, pressure, voltage, etc, their variation is always analog in nature. For example, the temperature inside a boiler is around 800°C. During its light-up, the temperature never approaches directly to 800°C. If the ambient temperature is 400°C, it will start increasing gradually to 450°C, 500°C and thus reaches 800°C over a period of time. This is an analog data. Signal Acquisition Process Signal Acquisition Process Now, we must process the data that we have received. But analog signal processing is quite inefficient in terms of accuracy, speed and desired output. Hence, we convert them to digital form using an Analog to Digital Converter (ADC). Signal Acquisition Process In general, the signal (or data) acquisition process has 3 steps. In the Real World, a sensor senses any physical parameter and converts into an equivalent analog electrical signal. For efficient and ease of signal processing, this analog signal is converted into a digital signal using an Analog to Digital Converter (ADC). This digital signal is then fed to the Microcontroller (MCU) and is processed accordingly. ADC Pins - ATMEGA16/32 ADC Pins – ATMEGA16/32 Interfacing Sensors In general, sensors provide with analog output, but a MCU is a digital one. Hence we need to use ADC. For simple circuits, comparator op-amps can be used. But even this won’t be required if we use a MCU. We can straightaway use the inbuilt ADC of the MCU. In ATMEGA16/32, PORTA contains the ADC pins. The ADC of the AVR The AVR features inbuilt ADC in almost all its MCU. In ATMEGA16/32, PORTA contains the ADC pins. Some other features of the ADC are as follows: ADC Features - ATMEGA16/32 ADC Features – ATMEGA16/32 Right now, we are concerned about the 8 channel 10 bit resolution feature. 8 channel implies that there are 8 ADC pins are multiplexed together. You can easily see that these pins are located across PORTA (PA0…PA7). 10 bit resolution implies that there are 2^10 = 1024 steps (as described below). 8 channel 10 bit ADC 8 channel 10 bit ADC Suppose we use a 5V reference. In this case, any analog value in between 0 and 5V is converted into its equivalent ADC value as shown above. The 0-5V range is divided into 2^10 = 1024 steps. Thus, a 0V input will give an ADC output of 0, 5V input will give an ADC output of 1023, whereas a 2.5V input will give an ADC output of around 512. This is the basic concept of ADC. To those whom it might concern, the type of ADC implemented inside the AVR MCU is of Successive Approximation type. Apart from this, the other things that we need to know about the AVR ADC are: ADC Prescaler ADC Registers – ADMUX, ADCSRA, ADCH, ADCL and SFIOR ADC Prescaler The ADC of the AVR converts analog signal into digital signal at some regular interval. This interval is determined by the clock frequency. In general, the ADC operates within a frequency range of 50kHz to 200kHz. But the CPU clock frequency is much higher (in the order of MHz). So to achieve it, frequency division must take place. The prescaler acts as this division factor. It produces desired frequency from the external higher frequency. There are some predefined division factors – 2, 4, 8, 16, 32, 64, and 128. For example, a prescaler of 64 implies F_ADC = F_CPU/64. For F_CPU = 16MHz, F_ADC = 16M/64 = 250kHz. Now, the major question is… which frequency to select? Out of the 50kHz-200kHz range of frequencies, which one do we need? Well, the answer lies in your need. There is a trade-off between frequency and accuracy. Greater the frequency, lesser the accuracy and vice-versa. So, if your application is not sophisticated and doesn’t require much accuracy, you could go for higher frequencies. ADC Registers We will discuss the registers one by one. ADMUX – ADC Multiplexer Selection Register The ADMUX register is as follows. ADMUX ADMUX Register The bits that are highlighted are of interest to us. In any case, we will discuss all the bits one by one. Bits 7:6 – REFS1:0 – Reference Selection Bits – These bits are used to choose the reference voltage. The following combinations are used. Reference Voltage Selection Reference Voltage Selection ADC Voltage Reference Pins ADC Voltage Reference Pins The ADC needs a reference voltage to work upon. For this we have a three pins AREF, AVCC and GND. We can supply our own reference voltage across AREF and GND. For this, choose the first option. Apart from this case, you can either connect a capacitor across AREF pin and ground it to prevent from noise, or you may choose to leave it unconnected. If you want to use the VCC (+5V), choose the second option. Or else, choose the last option for internal Vref. Let’s choose the second option for Vcc = 5V. Bit 5 – ADLAR – ADC Left Adjust Result – Make it ‘1’ to Left Adjust the ADC Result. We will discuss about this a bit later. Bits 4:0 – MUX4:0 – Analog Channel and Gain Selection Bits – There are 8 ADC channels (PA0…PA7). Which one do we choose? Choose any one! It doesn’t matter. How to choose? You can choose it by setting these bits. Since there are 5 bits, it consists of 2^5 = 32 different conditions as follows. However, we are concerned only with the first 8 conditions. Initially, all the bits are set to zero. Input Channel and Gain Selections Input Channel and Gain Selections Thus, to initialize ADMUX, we write ADMUX = (1&lt;&lt;REFS0); ADCSRA – ADC Control and Status Register A The ADCSRA register is as follows. ADCSRA Register ADCSRA Register The bits that are highlighted are of interest to us. In any case, we will discuss all the bits one by one. Bit 7 – ADEN – ADC Enable – As the name says, it enables the ADC feature. Unless this is enabled, ADC operations cannot take place across PORTA i.e. PORTA will behave as GPIO pins. Bit 6 – ADSC – ADC Start Conversion – Write this to ‘1’ before starting any conversion. This 1 is written as long as the conversion is in progress, after which it returns to zero. Normally it takes 13 ADC clock pulses for this operation. But when you call it for the first time, it takes 25 as it performs the initialization together with it. Bit 5 – ADATE – ADC Auto Trigger Enable – Setting it to ‘1’ enables auto-triggering of ADC. ADC is triggered automatically at every rising edge of clock pulse. View the SFIOR register for more details. Bit 4 – ADIF – ADC Interrupt Flag – Whenever a conversion is finished and the registers are updated, this bit is set to ‘1’ automatically. Thus, this is used to check whether the conversion is complete or not. Bit 3 – ADIE – ADC Interrupt Enable – When this bit is set to ‘1’, the ADC interrupt is enabled. This is used in the case of interrupt-driven ADC. Bits 2:0 – ADPS2:0 – ADC Prescaler Select Bits – The prescaler (division factor between XTAL frequency and the ADC clock frequency) is determined by selecting the proper combination from the following. ADC Prescaler Selections ADC Prescaler Selections Assuming XTAL frequency of 16MHz and the frequency range of 50kHz-200kHz, we choose a prescaler of 128. Thus, F_ADC = 16M/128 = 125kHz. Thus, we initialize ADCSRA as follows. ADCSRA = (1&lt;&lt;ADEN)|(1&lt;&lt;ADPS2)|(1&lt;&lt;ADPS1)|(1&lt;&lt;ADPS0); // prescaler = 128 ADCL and ADCH – ADC Data Registers The result of the ADC conversion is stored here. Since the ADC has a resolution of 10 bits, it requires 10 bits to store the result. Hence one single 8 bit register is not sufficient. We need two registers – ADCL and ADCH (ADC Low byte and ADC High byte) as follows. The two can be called together as ADC. ADC Data Registers (ADLAR = 0) ADC Data Registers (ADLAR = 0) ADC Data Registers (ADLAR = 1) ADC Data Registers (ADLAR = 1) You can very well see the the effect of ADLAR bit (in ADMUX register). Upon setting ADLAR = 1, the conversion result is left adjusted. SFIOR – Special Function I/O Register In normal operation, we do not use this register. This register comes into play whenever ADATE (in ADCSRA) is set to ‘1’. The register goes like this. SFIOR Register SFIOR Register The bits highlighted in yellow will be discussed as they are related to ADATE. Other bits are reserved bits. Bits 7:5 – ADC Auto Trigger Source – Whenever ADATE is set to ‘1’, these bits determine the trigger source for ADC conversion. There are 8 possible trigger sources. ADC Auto Trigerring Source Selections ADC Auto Triggering Source Selections These options are will be discussed in the posts related to timers. Those who have prior knowledge of timers can use it. The rest can leave it for now, we won’t be using this anyway. ADC Initialization The following code segment initializes the ADC. 1 2 3 4 5 6 7 8 9 void adc_init() { // AREF = AVcc ADMUX = (1&lt;&lt;REFS0); // ADC Enable and prescaler of 128 // 16000000/128 = 125000 ADCSRA = (1&lt;&lt;ADEN)|(1&lt;&lt;ADPS2)|(1&lt;&lt;ADPS1)|(1&lt;&lt;ADPS0); } Reading ADC Value The following code segment reads the value of the ADC. Always refer to the register description above for every line of code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 uint16_t adc_read(uint8_t ch) { // select the corresponding channel 0~7 // ANDing with ’7′ will always keep the value // of ‘ch’ between 0 and 7 ch &amp;= 0b00000111; // AND operation with 7 ADMUX = (ADMUX &amp; 0xF8)|ch; // clears the bottom 3 bits before ORing // start single convertion // write ’1′ to ADSC ADCSRA |= (1&lt;&lt;ADSC); // wait for conversion to complete // ADSC becomes ’0′ again // till then, run loop continuously while(ADCSRA &amp; (1&lt;&lt;ADSC)); return (ADC); } Physical Connections Let’s connect two LDRs (Light Dependent Resistors) to pins PA0 and PA1 respectively. The connection is as follows. The function of potentiometers is explained in a later section, Sensor Calibration. You can scroll down to it. ;) LDR Connections LDR Connections Now suppose we want to display the corresponding ADC values in an LCD. So, we also need to connect an LCD to our MCU. Read this post to know about LCD interfacing. Since it is an LDR, it senses the intensity of light and accordingly change its resistance. The resistance decreases exponentially as the light intensity increases. Suppose we also want to light up an LED whenever the light level decreases. So, we can connect the LED to any one of the GPIO pins, say PC0. Note that since the ADC returns values in between 0 and 1023, for dark conditions, the value should be low (below 100 or 150) whereas for bright conditions, the value should be quite high (above 900). Now let’s write the complete code. Example Code To learn about LCD interfacing, view this post. You can type, compile and build it in AVR Studio 5. View this page to know how. To know about the I/O port operations in AVR, view this page. + expand source? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 #include &lt;avr/io.h&gt; #include &lt;util/delay.h&gt; #include &quot;lcd.h&quot; #define LTHRES 500 #define RTHRES 500 // initialize adc void adc_init() { // AREF = AVcc ADMUX = (1&lt;&lt;REFS0); // ADC Enable and prescaler of 128 // 16000000/128 = 125000 ADCSRA = (1&lt;&lt;ADEN)|(1&lt;&lt;ADPS2)|(1&lt;&lt;ADPS1)|(1&lt;&lt;ADPS0); } // read adc value uint16_t adc_read(uint8_t ch) { // select the corresponding channel 0~7 // ANDing with '7' will always keep the value // of 'ch' between 0 and 7 ch &amp;= 0b00000111; // AND operation with 7 ADMUX = (ADMUX &amp; 0xF8)|ch; // clears the bottom 3 bits before ORing // start single conversion // write '1' to ADSC ADCSRA |= (1&lt;&lt;ADSC); // wait for conversion to complete // ADSC becomes '0' again // till then, run loop continuously while(ADCSRA &amp; (1&lt;&lt;ADSC)); return (ADC); } int main() { uint16_t adc_result0, adc_result1; char int_buffer[10]; DDRC = 0x01; // to connect led to PC0 // initialize adc and lcd adc_init(); lcd_init(LCD_DISP_ON_CURSOR); // display the labels on LCD lcd_puts(&quot;left ADC = &quot;); lcd_gotoxy(0,1); lcd_puts(&quot;right ADC = &quot;); _delay_ms(50); while(1) { adc_result0 = adc_read(0); // read adc value at PA0 adc_result1 = adc_read(1); // read adc value at PA1 // condition for led to glow if (adc_result0 &lt; LTHRES &amp;&amp; adc_result1 &lt; RTHRES) PORTC = 0x01; else PORTC = 0x00; // now display on lcd itoa(adc_result0, int_buffer, 10); lcd_gotoxy(12,0); lcd_puts(int_buffer); itoa(adc_result1, int_buffer, 10); lcd_gotoxy(12,1); lcd_puts(int_buffer); _delay_ms(50); } } Sensor Calibration Calibration means linking your real world data with the virtual data. In the problem statement given earlier, I have mentioned that the LED should glow if the light intensity reduces. But when should it start to glow? The MCU/code doesn’t know by itself. You get the readings from the sensor continuously in between 0 and 1023. So, the question is how do we know that below ‘such and such’ level the LED should glow? This is achieved by calibration. You need to physically set this value. What you do is that you run the sensor for all the lighting conditions. You have the ADC values for all these levels. Now, you need to physically see and check the conditions yourself and then apply a threshold. Below this threshold, the light intensity goes sufficiently down enough for the LED to glow. The potentiometer connected in the circuit is also for the same reason. Now, by the basic knowledge of electronics, you could easily say that upon changing the pot value the ADC value changes. Thus, for various reasons (like poor lighting conditions, you are unable to distinguish between bright and dark conditions, etc), you can vary the pot to get desired results. This is why I have given the two thresholds (RTHRES anf LTHRES) in the beginning of the code. So, this is all with the ADC. I hope you enjoyed reading this. Please post the comments below for any suggestion, doubt, clarification, etc. Loved it? Share it! Facebook50 Twitter Google LinkedIn More Email Print Tumblr Like this: Like Loading... Related Sensor Fundamentals Sensor Fundamentals Human-like Robots Humans (or in general any living organism) has to have some senses to become totally autonomous. Humans have five senses - vision, smell, taste, hearing and touch. If so, then what do robots have? Let me ask you a simple question. What does a robot needs to become… June 18, 2011 In &quot;Atmel AVR&quot; AVR Basics AVR Basics Hello everyone! From now on, we will be working with AVR microcontrollers. I hope you have an AVR MCU development board and an ISP with you. And I also assume that you have the elementary concepts of a MCU. If not, then I suggest you to go through the following… June 9, 2011 In &quot;Atmel AVR&quot; Using an Analog Accelerometer Using an Analog Accelerometer Everybody would have at least once heard of &quot;accelerometer&quot;, most probably, in some way associated to smartphones. But what actually are they? Accelerometers What are they? Well, according to the dictionary, an accelerometer is a device (a sensor) that is typically used to measure the acceleration (very obvious from the… June 28, 2013 In &quot;Atmel AVR&quot; 318 Comments ← Older Comments Arturas November 9, 2015 Thank you! This is best example on the Internet! All code compilling, all works. Reply Prashant Agarwal November 24, 2015 Thanks! Keep Reading, Keep Sharing. :D Reply anurag1133 January 2, 2016 thanks for this great blog … but i am facing little bit of problem in displaying current value in lcd using avr atmega16 …please provide me any solution to how to display current flowing in single phase wire and display it on lcd….waiting for your reply Reply phuoc January 22, 2016 i want code asm if you have .and help me . why i do my project only 1 times. Reply Max March 25, 2016 Not sure what you’re asking. We discussed the concept and the register. If you have been programming in assembly, then you should be able to convert the code by yourself. Understand the concept first. Reply Rida February 23, 2016 hello, thanks for sharing this sir… i have tried your code.. but its giving me only 1 fix value 1023 continuously … Reply Max March 25, 2016 Which means your input is always high. Check your input. Reply venky June 24, 2016 [CODE REMOVED BY ADMIN] sir please verify it once ,,,i didnt get anything ,,, I connected one variable pot to ADC0 Reply Shabab Alam March 11, 2016 Hi , I tried to assign port B the digital equivalent of the analog signal but this code didn’t work. can someone please tell me the correction and why this code isn’t working.. thankyou ADMUX |=0b10000000 ; ADMUX &amp;=0b11000000; ADCSRA |= 0b10000111; ADCSRA |= 1&lt;&lt;ADSC; DDRB=0x00; while(ADCSRA &amp; (1&lt;&lt;ADSC)); PORTB=ADCL; Reply Max March 25, 2016 Refer to code in the writeup. You’re setting the ADMUX and ADCSRA wrong. Also PORTB is 8bit and ADC is 16bit register. So there are two ways to do it. First is to set ADLAR=1 (in ADMUX) and read from ADCH (PORTB = ADCH;). Or the second option is to right shift ADC register by 2 and then store the result in PORTB (ADC = ADC &gt;&gt; 2; PORTB = ADCL;) Reply thrishool April 10, 2016 Hey how yo write that code in programmet note pad using c Reply Max May 4, 2016 Sorry what? Reply chazz April 19, 2016 hi max, what is the converted value format.. for suppose if the adc input is 3v.. after conversion we will get the count as 613 or so.. now this obtained conversion value will be in hexadecimal or binary?? Reply Max May 4, 2016 It is in decimal, base 10. Reply mcmark April 20, 2016 hello, do you have a code like this using at32uc3l0256? Reply Max May 4, 2016 If you understand the concept, you should be able to write the code yourself by reading the datasheet. Reply jorirango May 6, 2016 thank for the best tutorials on the internet but one thing i didn’t get is in last EX why the use of pot not just fixed value resistance Reply Max May 7, 2016 It is used for sensor calibration. Read the last section, it is explained there. Reply jorirango May 8, 2016 i know i have read it i just don’t understand how it adjust the sensitivity of the ldr Reply yagmursavlukbas June 4, 2016 adc_result1 = adc_read(1); // read adc value at PA1 printf(“%d\n”,adc_result1); I tried to get the value of A1 pin, the rest of the code is the same with yours except the above. But it does not work. Reply Mayank June 24, 2016 printf() is a C function that prints a formatted string to the serial buffer. Where is your serial buffer connected? Use lcd_puts() if you like to print on the LCD. Reply Aravind Manimaran July 2, 2016 can u give me code to print the adc value of and ldr in the serial monitor.Im using arduino uno and atmega328p.just tell me how to accet values from keyboard so that when i press some letter the printing starts and when i press another key the printing stops. Reply Mayank July 5, 2016 Sorry bro. We don’t write code for others. If you understand the concept, you should be smart enough to write it yourself. Reply ← Older Comments Leave a Reply Cancel reply Search maxEmbedded Search for: Popular Recent Random Mon20 The ADC of the AVR Posted by Mayank in Atmel AVR, Microcontrollers Fri24 AVR Timers – TIMER0 Posted by Mayank in Atmel AVR, Microcontrollers Tue06 RF Module Interfacing without Microcontrollers Posted by Mayank in Electronics Thu16 LCD Interfacing with AVR Posted by Mayank in Atmel AVR, Microcontrollers Thu20 Making an RF Car Posted by Yash in Electronics, Robotics Mon11 How to Turn Your Raspberry Pi Into a Development Server Posted by Irina Papuc in IoT, Raspberry Pi, Single Board Computers Fri06 Getting Started with ESP8266 WiFi Module Posted by Mayank in Expressif ESP8266, Featured, Getting Started, IoT, Microcontrollers Thu24 Using Microchip MPLAB Xpress IDE and Evaluation Board Posted by Mayank in Featured, Getting Started, Microchip PIC, Microcontrollers Sun14 Setting up AVR-GCC Toolchain on Linux and Mac OS X Posted by Mayank in Atmel AVR, Microcontrollers Sun05 Raspberry Pi – Headless Setup Posted by Mayank in e-Linux, Featured, Getting Started, Raspberry Pi, Single Board Computers Mon13 Using the AVR Studio 5 Simulator and Debugger Posted by Mayank in Atmel AVR, Microcontrollers Thu14 AVR Timers – CTC Mode Posted by Mayank in Atmel AVR, Microcontrollers Sun16 The All New maxEmbedded Posted by Mayank in Offbeat Sat07 AVR Timers – PWM Mode – Part II Posted by Mayank in Atmel AVR, Microcontrollers Sun10 Serial Peripheral Interface – SPI Basics Posted by Mayank in Atmel AVR, Microcontrollers Browse maxE by Categories Browse maxE by Categories Subscribe to maxEmbedded Email Address Like maxE on Facebook Sponsored Links Copyright Creative Commons License maxEmbedded by Mayank Prasad is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License. © Copyright 2011-2014 by maxEmbedded. Some rights reserved. Tags accelerometer adapter adc assembly avr adc avr basics avr eeprom avr interrupts avr serial avr timers basics bootloader code gallery code optimization color spaces counters cv basics filter circuit i2c ir sensor matlab msp430 basics opencv pcb design power supply printed circuit boards pwm raspberry pi rf communication rf module robotics robot locomotion rs232 sbc basics sensors Serial spi ssd timers toolchain transformer uart usart voltage regulator wireless Top Posts &amp; Pages How to build your own Power Supply How to build an IR Sensor AVR Timers - TIMER0 The USART of the AVR The ADC of the AVR The SPI of the AVR AVR Timers - CTC Mode Home Copyright Privacy Policy Credits Sitemap Contact © Copyright 2011-2014 by maxEmbedded. Some rights reserved. maxEmbedded is a free and open source platform to share knowledge and learn about the concepts of robotics, embedded systems and computer vision. People from around the world who are enthusiastic about these topics and willing to support the open source community are invited to share their information, knowledge and expertise by means of written tutorials and videos on the website. %d bloggers like this: :) Send to Email Address Your Name Your Email Address loading Cancel Post was not sent - check your email addresses! Email check failed, please try again Sorry, your blog cannot share posts by email. Secure Connection Failed The connection to jetpack.wordpress.com was interrupted while the page was loading. The page you are trying to view cannot be shown because the authenticity of the received data could not be verified. Please contact the web site owners to inform them of this problem. Learn more… Go Back Advanced Try Again Report errors like this to help Mozilla identify and block malicious sites uses security technology that is outdated and vulnerable to attack. An attacker could easily reveal information which you thought to be safe. (Not secure) Try loading using outdated security Like vstrulev One blogger likes this. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. 'It's a new year for maxEmbedded and first as a company! :)' MaxEmbedded 4.2K likes Like PageLiked "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160720141252#index"
                   NS1:content=" Starting out Get the Ebook Get Started with C or C++ Getting a Compiler Book Recommendations Tutorials C Tutorial C++ Tutorial Java Tutorial Game Programming Graphics Programming Algorithms &amp; Data Structures Debugging All Tutorials Practice Practice Problems Quizzes Resources Source Code Source Code Snippets C and C++ Tips Finding a Job References Function Reference Syntax Reference Programming FAQ Getting Help Message Board Email About Us The C Preprocessor By Alex Allain The C preprocessor modifies a source code file before handing it over to the compiler. You're most likely used to using the preprocessor to include files directly into other files, or #define constants, but the preprocessor can also be used to create &quot;inlined&quot; code using macros expanded at compile time and to prevent code from being compiled twice. There are essentially three uses of the preprocessor--directives, constants, and macros. Directives are commands that tell the preprocessor to skip part of a file, include another file, or define a constant or macro. Directives always begin with a sharp sign (#) and for readability should be placed flush to the left of the page. All other uses of the preprocessor involve processing #define'd constants or macros. Typically, constants and macros are written in ALL CAPS to indicate they are special (as we will see). Header Files The #include directive tells the preprocessor to grab the text of a file and place it directly into the current file. Typically, such statements are placed at the top of a program--hence the name &quot;header file&quot; for files thus included. Constants If we write #define [identifier name] [value] whenever [identifier name] shows up in the file, it will be replaced by [value]. If you are defining a constant in terms of a mathematical expression, it is wise to surround the entire value in parentheses: #define PI_PLUS_ONE (3.14 + 1) By doing so, you avoid the possibility that an order of operations issue will destroy the meaning of your constant: x = PI_PLUS_ONE * 5; Without parentheses, the above would be converted to x = 3.14 + 1 * 5; which would result in 1 * 5 being evaluated before the addition, not after. Oops! It is also possible to write simply #define [identifier name] which defines [identifier name] without giving it a value. This can be useful in conjunction with another set of directives that allow conditional compilation. Conditional Compilation There are a whole set of options that can be used to determine whether the preprocessor will remove lines of code before handing the file to the compiler. They include #if, #elif, #else, #ifdef, and #ifndef. An #if or #if/#elif/#else block or a #ifdef or #ifndef block must be terminated with a closing #endif. The #if directive takes a numerical argument that evaluates to true if it's non-zero. If its argument is false, then code until the closing #else, #elif, of #endif will be excluded. Commenting out Code Conditional compilation is a particularly useful way to comment out a block of code that contains multi-line comments (which cannot be nested). #if 0 /* comment ... */ // code /* comment */ #endif Include Guards Another common problem is that a header file is required in multiple other header files that are later included into a source code file, with the result often being that variables, structs, classes or functions appear to be defined multiple times (once for each time the header file is included). This can result in a lot of compile-time headaches. Fortunately, the preprocessor provides an easy technique for ensuring that any given file is included once and only once. By using the #ifndef directive, you can include a block of text only if a particular expression is undefined; then, within the header file, you can define the expression. This ensures that the code in the #ifndef is included only the first time the file is loaded. #ifndef _FILE_NAME_H_ #define _FILE_NAME_H_ /* code */ #endif // #ifndef _FILE_NAME_H_ Notice that it's not necessary to actually give a value to the expression _FILE_NAME_H_. It's sufficient to include the line &quot;#define _FILE_NAME_H_&quot; to make it &quot;defined&quot;. (Note that there is an n in #ifndef--it stands for &quot;if not defined&quot;). A similar tactic can be used for defining specific constants, such as NULL: #ifndef NULL #define NULL (void *)0 #endif // #ifndef NULL Notice that it's useful to comment which conditional statement a particular #endif terminates. This is particularly true because preprocessor directives are rarely indented, so it can be hard to follow the flow of execution. On many compilers, the #pragma once directive can be used intead of include guards. Macros The other major use of the preprocessor is to define macros. The advantage of a macro is that it can be type-neutral (this can also be a disadvantage, of course), and it's inlined directly into the code, so there isn't any function call overhead. (Note that in C++, it's possible to get around both of these issues with templated functions and the inline keyword.) A macro definition is usually of the following form: #define MACRO_NAME(arg1, arg2, ...) [code to expand to] For instance, a simple increment macro might look like this: #define INCREMENT(x) x++ They look a lot like function calls, but they're not so simple. There are actually a couple of tricky points when it comes to working with macros. First, remember that the exact text of the macro argument is &quot;pasted in&quot; to the macro. For instance, if you wrote something like this: #define MULT(x, y) x * y and then wrote int z = MULT(3 + 2, 4 + 2); what value do you expect z to end up with? The obvious answer, 30, is wrong! That's because what happens when the macro MULT expands is that it looks like this: int z = 3 + 2 * 4 + 2; // 2 * 4 will be evaluated first! So z would end up with the value 13! This is almost certainly not what you want to happen. The way to avoid it is to force the arguments themselves to be evaluated before the rest of the macro body. You can do this by surrounding them by parentheses in the macro definition: #define MULT(x, y) (x) * (y) // now MULT(3 + 2, 4 + 2) will expand to (3 + 2) * (4 + 2) But this isn't the only gotcha! It is also generally a good idea to surround the macro's code in parentheses if you expect it to return a value. Otherwise, you can get similar problems as when you define a constant. For instance, the following macro, which adds 5 to a given argument, has problems when embedded within a larger statement: #define ADD_FIVE(a) (a) + 5 int x = ADD_FIVE(3) * 3; // this expands to (3) + 5 * 3, so 5 * 3 is evaluated first // Now x is 18, not 24! To fix this, you generally want to surround the whole macro body with parentheses to prevent the surrounding context from affecting the macro body. #define ADD_FIVE(a) ((a) + 5) int x = ADD_FIVE(3) * 3; On the other hand, if you have a multiline macro that you are using for its side effects, rather than to compute a value, you probably want to wrap it within curly braces so you don't have problems when using it following an if statement. // We use a trick involving exclusive-or to swap two variables #define SWAP(a, b) a ^= b; b ^= a; a ^= b; int x = 10; int y = 5; // works OK SWAP(x, y); // What happens now? if(x &lt; 0) SWAP(x, y); When SWAP is expanded in the second example, only the first statement, a ^= b, is governed by the conditional; the other two statements will always execute. What we really meant was that all of the statements should be grouped together, which we can enforce using curly braces: #define SWAP(a, b) {a ^= b; b ^= a; a ^= b;} Now, there is still a bit more to our story! What if you write code like so: #define SWAP(a, b) { a ^= b; b ^= a; a ^= b; } int x = 10; int y = 5; int z = 4; // What happens now? if(x &lt; 0) SWAP(x, y); else SWAP(x, z); Then it will not compile because semicolon after the closing curly brace will break the flow between if and else. The solution? Use a do-while loop: #define SWAP(a, b) do { a ^= b; b ^= a; a ^= b; } while ( 0 ) int x = 10; int y = 5; int z = 4; // What happens now? if(x &lt; 0) SWAP(x, y); else SWAP(x, z); Now the semi-colon doesn't break anything because it is part of the expression. (By the way, note that we didn't surround the arguments in parentheses because we don't expect anyone to pass an expression into swap!) More Gotchas By now, you've probably realized why people don't really like using macros. They're dangerous, they're picky, and they're just not that safe. Perhaps the most irritating problem with macros is that you don't want to pass arguments with &quot;side effects&quot; to macros. By side effects, I mean any expression that does something besides evaluate to a value. For instance, ++x evaluates to x+1, but it also increments x. This increment operation is a side effect. The problem with side effects is that macros don't evaluate their arguments; they just paste them into the macro text when performing the substitution. So something like #define MAX(a, b) ((a) &lt; (b) ? (b) : (a)) int x = 5, y = 10; int z = MAX(x++, y++); will end up looking like this: int z = (x++ &lt; y++ ? y++ : x++) The problem here is that y++ ends up being evaluated twice! The nasty consequence is that after this expression, y will have a value of 12 rather than the expected 11. This can be a real pain to debug! Multiline macros Until now, we've seen only short, one line macros (possibly taking advantage of the semicolon to put multiple statements on one line.) It turns out that by using a the &quot;\&quot; to indicate a line continuation, we can write our macros across multiple lines to make them a bit more readable. For instance, we could rewrite swap as #define SWAP(a, b) { \ a ^= b; \ b ^= a; \ a ^= b; \ } Notice that you do not need a slash at the end of the last line! The slash tells the preprocessor that the macro continues to the next line, not that the line is a continuation from a previous line. Aside from readability, writing multi-line macros may make it more obvious that you need to use curly braces to surround the body because it's more clear that multiple effects are happening at once. Advanced Macro Tricks In addition to simple substitution, the preprocessor can also perform a bit of extra work on macro arguments, such as turning them into strings or pasting them together. Pasting Tokens Each argument passed to a macro is a token, and sometimes it might be expedient to paste arguments together to form a new token. This could come in handy if you have a complicated structure and you'd like to debug your program by printing out different fields. Instead of writing out the whole structure each time, you might use a macro to pass in the field of the structure to print. To paste tokens in a macro, use ## between the two things to paste together. For instance #define BUILD_FIELD(field) my_struct.inner_struct.union_a.##field Now, when used with a particular field name, it will expand to something like my_struct.inner_struct.union_a.field1 The tokens are literally pasted together. String-izing Tokens Another potentially useful macro option is to turn a token into a string containing the literal text of the token. This might be useful for printing out the token. The syntax is simple--simply prefix the token with a pound sign (#). #define PRINT_TOKEN(token) printf(#token &quot; is %d&quot;, token) For instance, PRINT_TOKEN(foo) would expand to printf(&quot;&lt;foo&gt;&quot; &quot; is %d&quot; &lt;foo&gt;) (Note that in C, string literals next to each other are concatenated, so something like &quot;token&quot; &quot; is &quot; &quot; this &quot; will effectively become &quot;token is this&quot;. This can be useful for formatting printf statements.) For instance, you might use it to print the value of an expression as well as the expression itself (for debugging purposes). PRINT_TOKEN(x + y); Avoiding Macros in C++ In C++, you should generally avoid macros when possible. You won't be able to avoid them entirely if you need the ability to paste tokens together, but with templated classes and type inference for templated functions, you shouldn't need to use macros to create type-neutral code. Inline functions should also get rid of the need for macros for efficiency reasons. (Though you aren't guaranteed that the compiler will inline your code.) Moreover, you should use const to declare typed constants rather than #define to create untyped (and therefore less safe) constants. Const should work in pretty much all contexts where you would want to use a #define, including declaring static sized arrays or as template parameters. Related articles Introduction to Templates in C++ Template Functions in C++ Want to become a C++ programmer? The Cprogramming.com ebook, Jumping into C++, will walk you through it, step-by-step. Get Jumping into C++ today! Popular pages Exactly how to get started with C++ (or C) today C Tutorial C++ Tutorial 5 ways you can learn to program faster The 5 Most Common Problems New Programmers Face How to set up a compiler 8 Common programming Mistakes What is C++11? How to make a game in 48 hours Recent additions subscribe to a feed How to create a shared library on Linux with GCC - December 30, 2011 Enum classes and nullptr in C++11 - November 27, 2011 Learn about The Hash Table - November 20, 2011 Rvalue References and Move Semantics in C++11 - November 13, 2011 C and C++ for Java Programmers - November 5, 2011 A Gentle Introduction to C++ IO Streams - October 10, 2011 Google Custom Search Join our mailing list to keep up with the latest news and updates about Cprogramming.com! Name Email Subscriber Counter Advertising | Privacy policy | Copyright © 1997-2011 Cprogramming.com. All rights reserved. | webmaster@cprogramming.com Popular pages C tutorial C Tutorial Get started Exactly how to get started with C++ (or C) today Learn to program 5 ways you can learn to program faster C++ tutorial C++ Tutorial Problems new programmers face The 5 Most Common Problems New Programmers Face Learn to make a game How to make a game in 48 hours Common problems 8 Common Programming Mistakes C++11 What is C++11? Image credits 25 Tweet "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717093233#index"
                   NS1:content=" Home Video Gallery Free Downloads Press Other Projects Contact Forum Join us on Facebook! Looking for a specific fusion knot? Enter a keyword here: 3 Strand Flat Braid 6 Strand Flat Braid 6 Strand Wide Round Braid 12 strand wide round braid Ara Batur Bar Ashley's Flower Knot Ashoka Chakra Knot Ashoka Chakra Knot two color Asymmetric Border Bar Atomic Solomon Bar Aztec Sun Bar Azulejo Endless Falls Back to Back Feather Bar Back to Back Zipper Sinnet Backbone Bar Badlands Bar Balanced Stone Bar Banded Solomon Bar Bankei Bar Barnacle Knot Basket Weave Knot Beanstalk Bar Bear Claw Bar Bent Solomon Bar Big Celtic Heart Knot Biotic Bar Blast Radius Bar Blaze Bar Bloody Knuckle Knot Bonobo Bar Bonoboed Solomon Bar Boot Lace Bar Bound Endless Falls Bound Tower Bar Branching Mycelium Bar Brainworm Sinnet Brigid's Knot Bug Belly Bar Bugle Cord Bumble Bee Knot Bush Bar two color Bush Bar Butterflied Solomon Bar Caged Solomon Bar Candy Stripe Bar Cascading Water Bar Cat Claw Bar Caterpillar Footed Solomon Bar Caterpillar Sinnet Celtic Bar Celtic Crossed Solomon Bar Celtic Dagger Celtic Heart Knot Celtic Tree of Life Knot Challenge Knot Cheshire Cat Knot Chinese Cloverleaf Knot Clasped Hands Knot Cloud Knot Cobbled Bonobo Bar Cobbled Solomon Bar Corkscrew Crown Sinnet Corset Spine Coyote Trail Crashing Waves Bar Crisscrossed Solomon Bar Crooked River Bar Cross Knot Cullasaja River Bar Cupcake Knot Curling Millipede Bracelet Cyclone Wrap Cyclonic Flow Dawn Sun Bar Desert Flower Medallion Diamond Ring Knot Diamond Waterfall Fob DeAna Star Sinnet Divided Endless Falls Divided Sine Wave Sinnet Divided Snake Belly Bar Djinn Bottle Knot DNA Utility Strap Door Knocker Knot Double Celtic Heart Double Coin Knot Double Coin Snake Knot Bracelet Double Corset Spine Double Diamond Knot Double Plafond Knot Double Ripcord Utility Strap DRUS Double Rolled Thin Line Solomon Bar Double Stitched Switchback Strap Double Woven Endless Falls Double Woven Globe Knot Dragon's Egg Paracord Pouch Dragon's Tounge Dragonfly Knot Dry Riverbed Bar Emergency Service Thin Line Fobs Emperor's Hat Knot Emperor's Snake Knot Endless Falls Endless Turk's Head Bracelet Eternity Knot Firecracker Sinnet Fleur De Lis Knot Flower Knot Four Strand Round Braid Fox Tail Bar Fractal Sinnet Fusion Knot Necklace Genoese Zipper Sinnet Glera River Bar Goliath Beetle Leg Bar Good Luck Knot Guitar Bar Haifoss Bar Hammer Knot Handle Bar Harbin Bar Harbin Heather Bar Harbin Knot Heart Burst Bar Heteromastus Sinnet Hole in Your Heart Knot Honey Basket How to Cinch Your Shoes in 0.5 Seconds Icelandic Dream Bar Icelandic Endless Falls Iktomi Bar Indian Corn Secret Compartment Fob Interwoven Zipper Sinnet Jagged Cacophony Bar Jagged Ladder Bar Jagged Zipper Sinnet Japanese Tassel Knot Jolly Roger KBK Bar Keyhole Knot Knarr Knot Knobby Triangular Crown Sinnet Ladder Strap Lambda Knot lion heart sinnet Lizard Belly Bar Lizard Tail Sinnet Long Dragon Bar Longhorn Knot Lucid Dream Bar Lux Bar Maedate Knot Maori Hei Toki Lashing Marble Lantern Knot Mated Snake Knots Mayan Temple Knot Meadering Larks Head Braid Melting Bar Monkey's Fist two color Muscle Wrapped Skull Knot Mystic Zipper Sinnet Mystical Chained Endless Falls Noise Bridge Bar O Ring Knot Oat Spike Sinnet Olias Knot Optic Star Bar Orr Springs Bar Padlock Knot Pagoda Knot Pan Chang Knot Panel Knot Para Aramid Bar Paracord Acorn Baskets Paracord Angel Wings Paracord Balls Paracord Bumblebee Necklace Paracord Celtic Bar Paracord Cross Paracord Dog Leash Paracord Jellyfish Paracord Rock Crab Paracord Utility Pouch Peacock Medallion Pendent Knot Pentaradial Knot Perfect Whipping Pipa Knot Plafond Knot Prayer Beads Prosperity Knot Pupa Paracord Pull Tie Radiant Zipper Sinnet Rain Drop Sinnet Rattlesnake Knot Ring of Coins Ringbolt Hitch Viceroy Ringbolt Hitching Ripcord Sinnet Bracelet Rising Sun Knot River Bar River Knot Rod of Asclepius Bar Rolling Shore Waves Sinnet Rope Sling Rope Whip Rorschach Knot Rounded Triangle Sinnet Round Brocade Knot Round Crown Sinnet Royal Crown Sinnet Rune Stone Knot Samadhi Sinnet Sea Turtle Knot Secret Compartment Fob Secret River Bar Simple Bottle Wrap Simple Buckle Attachment Single Genoese Bar Single Strand Slash Dash Bar Shark Jaw Bone Slant Wrapped Endless Falls Slip Knot Guitar Strap Slatt's Rescue Belt Snake Belly Bar Snake Knot Bracelet Snake Knot Viceroy Snake Knot Snake Weave two color Snakeskin bar Snowflake Knot Solomon Bar Solomon Bar Rock Wrap Solomon's Sword Grip Spectrally Clustered Crown Sinnet Spectrally Clustered Solomon Bar Spectrally Clustered Stitched Solomon Bar Spinal Sinnet Spiraled Solomon Bar Spiral Hitching Spiral Knot Splashing Zen Fountain Bar Split Spine Solomon Bar Spring Sinnet Starthistle Braid Stitched Flight Sinnet Stitched Monkey Bar Stitched Solomon Bar Stitched Switchback Strap Stitched Valley Bar Stone Wood Henge Bar Strapped Endless Falls Stretched Imagination Bar The Striker Striped Crown Sinnet Sumo Panda Support Bracelet Surreal Solomon Bar Switchback Path Bar Switchback Strap two color Switchback Strap T Virus Sinnet Bracelet Tactical Flashlight Strap Tea Cup Knot Tentacle Bar The Lobster Tail The Radula Thick Zipper Sinnet Thin Thin Line Solomon Bar Thorn Branch Sinnet Tiny Globe Knot Tire Tread Bar Tomahawk Sinnet Triangle Knot Trilobite Bar two color Trilobite Knot Triple Barrel Knot Triple Goddess Knot Triple Wide Zipper Sinnet Triskelion Knot Tulum Bar Tumbling Box Bar Tumbling Hearts Bar Turk's Head 3L7B Twisted Bone Bar Twist Stitched Solomon Bar Two Color Slash Dash Bar two color Snake Skin Sinnet Two Color Stitched Flight Sinnet Webbed Endless Falls Wedge Wheat Stalk Braid Wide Lanyard Knot Wide Solomon Bar Wide Solomon Bar with Side Release Buckle Wide Wheat Stalk Braid Wide Zipper Sinnet Wind Temple Bar Winter Creek Bar Witness to Your Splendor Celtic Knot Woven Celtic Cross Woven Snakebite Bar Woven Wave The Wrapture Zigzag Braid Zipper Sinnet two color © 2015 FusionKnots.com Home Video Gallery Free Downloads Press Other Projects Contact Forum Join us on Facebook! "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717090439#index"
                   NS1:content=" BILL'S SPACE Learn, teach, or do calligraphy at Bill's Space. Skip to content Bill’s Space Gallery Bill’s You Tube CHANNEL Vimeo for Bill’s Space Bill’s Flickr Photostream Bill’s Art &amp; Calligraphy supplies Regularly updated links More Lovely Links Luton Calligraphy Workshops. Luton Calligraphy Workshops. Week 1 Luton Calligraphy Workshops. Week 2 Luton Calligraphy Workshops. Week 3 Luton Calligraphy Workshops. Week 4 Luton Calligraphy Workshops. Week 5 Learn, Teach or Do Calligraphy in Luton Hints and Tips ← A Calligraphy Workshop at Jewels. Blowing my own trumpet. → Getting Started in Calligraphy Posted on October 26, 2011 | 11 Comments Calligraphy. Getting started. The Scribe's nightmare. The Scribe’s Nightmare. I strongly suggest that beginners read this post first and then click on Lesson One. Familiarise yourself first with the Roundhand alphabet. I am sure it will save a lot of heartache later. Firstly, there are so many products on sale, all purported to be the must have for the budding scribe. For the time being, my advice is to forget all that. Keep it simple. Buy or make only that which you need to get through the next stage in your journey. All the pens and brushes in the whole wide world are of no use if you have no idea what to do with them. If you follow the Calligradoodles videos and use the worksheets that go with them, you will notice that all the elements are made up of pencil marks on paper. So, all we need to get started, is a sheet of ordinary copy paper, a ruler and two pencils joined together with elastic bands. ( Better than tape when it comes to sharpening ). A board of some description propped at an angle of about 20 degrees on your table, or even on your knees ( Not good for the back! ), will be enough for the first few sessions. So, now you are able to construct a half decent Roundhand and Roman alphabet and are ready to progress. You will need a pen and some ink, and once again there are so many products out there that confusion can easily set in, so simplicity is best. A fountain pen set with 4 – 6 nib sizes and a good supply of cartridges or ink is a good addition to your tool-box at this point. A couple of pen holders and some broad nibs plus a bottle of black calligraphy ink ( not waterproof, this will easily clog your nib ). Here I shall make no apologies for directing you to Bill’s Art and Calligraphy Supplies I do earn a small commission from Amazon on any sales, But please don’t feel that you have to buy here. The main reason for setting up this A Shop was to illustrate the mind boggling choices we have just in this one discipline. The Book Section is mind blowing! If I can raise a few pennies to offset expenses, thanks for your custom. The Technik Art Layout Pad A/3 is a handy addition right now. Only 50 gsm means you can make one guideline sheet and lay it under each page. A good tip at this point is to rule lines at 1/8″intervals from top to bottom of that page. If you do this in landscape format it will be much more versatile. When laid under the actual working page it is easy to mark an X over 1,2,3, or however many lines it takes to make up the x height needed for the particular nib size you are using. This will stand you in good stead for the rest of your life. If you do have to draw lines, always draw them in multiples of 1/8″ according to nib size. More on this as you progress. The Brause assortment calligraphy set or William Mitchell right hand italic set. ( There are left hand versions available, and you will find a really good book for Lefthanders in the book department ). ( See also The Left-handed Calligrapher, here at Bill’s Space, and for more support and info try the Facebook group, Calligraphy for the Left Handed ) . The Manuscript Leonardt Calligraphy dip pen nibs – Italic and Poster set, is particularly good value. A bottle of black Manuscript ink or set of three, black, gold, red, W &amp; N inks will keep you busy for a while. A better quality paper is now needed to show off your new skills so a pad of Daler Rowney A/3 might be your next choice. Why A/3? Simply, this size gives more scope for layouts. If you need a smaller format, it is no problem to cut a page. For line drawing, a Rowney or any of the many boards or drawing machines available will make life a bit easier, but I find a set square running along a 2 foot ruler taped to my board is quite sufficient. Incidentally, I use a home made light -table whenever possible. If you try this, PLEASE USE ONLY TOUGHENED GLASS.There is a commercially made Artograph box in Bill’s Art and calligraphy supplies. A “T”-square is a handy addition and perhaps a few basic drawing instruments next. You see. Your collection is building up already. But only with stuff you use. Not just stuff! Scribblers have kindly issued 50 calligraphy tips You might find these useful. By the way, when conducting a workshop, I usually ask participants to bring with them the following articles if at all possible. A drawing board, approximately 18” x 24”. MDF or something similar will do, Something to prop it up to make a writing slope, i.e., a piece of wood 4” x 4” or perhaps a brick wrapped in a carrier bag. A ruler , preferably 2 foot, and a set square. A set of roundhand nibs with penholder and reservoirs. A calligraphy fountain pen is a handy addition for practice work. (Any left-handers will benefit by choosing left hand oblique nibs). Calligraphy ink. NOT WATERPROOF. Avoid Indian ink whether waterproof or not. Gouache or watercolours. Coeruleum Blue, and Vermilion. Winsor &amp; Newton Gold ink. (Optional but very handy.) 2, HB and I, 2H pencil. A 00 paint brush. A cheap brush for mixing. A palette or saucer. A jar for water and a kitchen roll. An A3 Layout pad or even a cheap sketch book. If you have some, a nice HP watercolour paper for your finished work If you have problems obtaining any commercially marketed equipment, You might try going back to basics and making your own. It is a good idea anyway to experiment with quills, reeds, bamboo, tin cans etc. My take on the Cola pen. The RED STRIPE Pen. To my mind, much more fun emptying the can. A chisel cut pencil to dip. A needlepoint and 6mm with film reservoir. Bamboo, and a 2mm Reed. Make sure mummy and daddy are supervising. Heheh. We don’t want any cut fingers! With scissors, cut top and bottom from the can, making sure you have first downed the contents. (Adults, it might be best to leave this stage ’til tomorrow, depending on the strength of the aforesaid). Carefully, (The cut tin can will be very sharp). Open up and then fold down the length of the metal. Cut whatever shape you are looking for for the nib…then continue down the length,making sure to leave enough for the handle. This is rolled and then taped tightly. Perhaps strengthening by rolling the handle round a pencil. You could make a much prettier job by soldering.Just make sure that all bare edges are covered or blunted. ‘speriment and enjoy. You might like to note that I have been experimenting with various materials to use as reservoirs. The best so far is old fashioned film or even negatives. Used flat it can be cut and pushed into a slit formed in the quill, reed, bamboo or whatever, or rolled into a spring and pushed into the aperture. Some other examples………….. http://www.youtube.com/watch?v=kbcXlvTiuIw http://www.flick.com/~liralen/quills/quills.html http://joshberer.wordpress.com/2010/09/10/the-kamis-pen/ http://www.facebook.com/posted.php?id=100000056736005#!/video/video.php?v=303620954270 Now may I suggest that you join Lesson One. If you have any problems, questions, advice, etc., do not hesitate to use the comment boxes throughout this site. If I don’t know the answer, I’m sure to know someone who does. I hope you get as much enjoyment as I do from making good letters. Keep watching this space. 0.337141 0.165825 Rate this: i 5 Votes Share this: Email Facebook41 Twitter Press This Print LinkedIn Reddit Google Tumblr Pinterest Like this: Like Loading... Related Luton Calligraphy Workshops Luton Calligraphy Workshops If you have signed up for or are thinking of attending the Calligraphy Workshops at Wardown Park Museum, or would like to follow the progress of the group, this is the place to come for information and support. These sessions will be very informal with the emphasis being on doing,… In &quot;,calligraphy,calligraffiti,lettering, how to&quot; Calligraphy and handwriting for Children Calligraphy and handwriting for Children I am often asked how long I have been doing calligraphy and how I got interested in the first place. As a youngster, the only books in the house were a 10 volume Arthur Mee Childrens Encyclopaedia. The many articles and illustrations of ancient civilisations, carvings and manuscripts that I found there really… In &quot;Beginners&quot; Welcome to Bill's Space. Welcome to Bill's Space. Bill’s Space is aimed at anyone who has a love of calligraphy, or lettering. Especially beginners and those who are having trouble getting started. Featuring videos and worksheets, links and articles, all with a bias toward art, calligraphy, lettering, and teacher's resources, and updated as new material comes to my notice.… In &quot;Art&quot; This entry was posted in ,calligraphy,calligraffiti,lettering, how to, Beginners, Calligraphy Supplies., calligraphy tools, Cola pen, light table and tagged Beginners, calligraphy, Learning, lettering, light table. Bookmark the permalink. ← A Calligraphy Workshop at Jewels. Blowing my own trumpet. → 11 responses to “Getting Started in Calligraphy” Janee | October 31, 2011 at 5:18 pm | Reply 0 0 i Rate This Wow, I’ve never seen a soda can nib, how fun! LikeLike billgrant43 | October 31, 2011 at 5:52 pm | Reply 0 0 i Rate This Hi Janee. Have fun designing a pen that suits you. Be careful of sharp edges though. LikeLike Pingback: About Pointed Pen Calligraphy…Now Posted!!! « billgrant43 | November 4, 2011 at 11:47 am | Reply 0 0 i Rate This Hi Laura. Thanks for joining us here. Your blog will be very useful for our pointed pen beginners. LikeLike Pingback: Luton Calligraphy Workshops | BILL'S SPACE Pingback: Luton Calligraphy Workshops. Week 5 | BILL'S SPACE Mindy Phillips Lawrence | October 12, 2013 at 12:12 am | Reply 0 0 i Rate This Hello Bill. I find the wealth of information here on your site so helpful. Thank you for thinking of other calligraphers…Mindy LikeLike billgrant43 | October 12, 2013 at 12:49 pm | Reply 0 0 i Rate This Hi Mindy. It is my pleasure. I am glad you are finding it interesting. PPP Cheers. Bill LikeLike Pingback: Inspiration Board: Calligraphy | Julie Goodwin | June 6, 2015 at 9:32 pm | Reply 0 0 i Rate This Hi Bill, I enjoyed looking through your posts. I have been a calligrapher for about 35 years (and calligraphic engraver for nine) and was approached to teach a brief class this summer to elementary students. Each class is about 45 minutes long and I’ve been told they want a demonstration followed by time for the kids to practice. Do you have any brilliant ideas? I’ve taught adults before but my challenge this time is that many of these kids have not yet mastered their OWN handwriting skills! Thank you for any light you can shed on this situation! LikeLiked by 1 person billgrant43 | June 9, 2015 at 1:37 pm | Reply 0 0 i Rate This Hi Julie. Heheh! You have found yourself in a very difficult situation. I also have been asked to do something similar for a local Guide / Brownie group but have decided that 45 minutes is just not long enough to do justice to the subject. OK if you are going to have follow up sessions but not a one off. Here is one with 15 / 16 year olds that took twice as long and was still a bit of a rush. https://calligraphybybillgrant.com/2014/05/19/a-calligraphy-workshop-at-the-red-dot-gallery/ For youngsters it might be an idea to draw out a large banner on lining paper then ask them to put on some colour. This seems always to go down very well and for some, it might just stick in the mind and bloom in the years to come. https://calligraphybybillgrant.com/2014/08/25/the-luton-fleadh-fiesta-2014/ Have fun and let me know how you get on. Cheers. Bill. LikeLike Please feel free to comment, make suggestions or ask questions. If I don't know the answer, I'm sure I will know someone who does.......SPAM WILL NOT BE TOLERATED. Cancel reply Fill in your details below or click an icon to log in: Gravatar Email (required) (Address never made public) Name (required) Website Gravatar kinyarwandablog: You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Notify me of new posts via email. Translate this page Powered by Microsoft® Translator To browse WebRing visit Blog Stats 355,808 hits Recent Posts EID MUBARAK Failure. Does it help or hinder? Wishing Season’s Greetings to all my friends and all you lovely scribes out there. Quitting the Evil Weed Precision, Perfection, Practice Top Posts Getting Started in Calligraphy TIME TO GET TO WORK. Updated March 2013 ITALIC WORKSHEETS. With thanks to Richard Crookes. Updated May 11th '11 Luton Calligraphy Workshops. Week 1 Welcome to Bill's Space The Foundational or Roundhand Alphabet. With thanks to Richard Crookes. Practice, Positive Practice Hints and Tips Learn Roman Capitals. Updated March 2013 Luton Calligraphy Workshops. Week 2 Archives Archives Archaeology Art arts Beginners Bill's Space Bill Grant Bradwell Abbey Business calligradoodles calligraphy calligraphy practice Child Christmas Christmas greetings cola pen Competition crafts Dunstable. Easter Easter day Easter Sunday eBay Education Edward Johnston exhibition For sale Free Godiva Awakes Good Friday groups Guideline sheets Handwriting He is risen Houghton Regis. Human Rights. Italic Jewels Latin alphabet learn calligraphy Learning left handers lettering light table Lower case Luton luton art '11 exhibition Luton art '12 exhibition Luton Irish Forum Medieval Milton Keynes Namedoodles New Year peace Penmanship Picture resources Richard Crookes Roman Capitals Roundhand roundhand alphabet Statistics St Mary's Chapel St Patrick's Day Swash Capitals uncial Valentine's day video Wall Paintings Wardown Park. Wardown Park Museum Whiteboard William Morris Worksheets workshop Writing NetworkedBlogs Blog: Bill's Space Topics: Lettering, Calligraphy, Teachers Resources Follow my blog Email Subscription Click to subscribe to this blog and receive notifications of new posts by email. Join 1,617 other followers RSS - Posts RSS - Comments Meta Log out Entries RSS Comments RSS WordPress.com Search for: CALLIGRAPHY LESSONS and Worksheets Getting started in calligraphy. LESSON ONE. ROUNDHAND LESSON TWO. ROMAN CAPITALS LESSON THREE. UNCIALS LESSON FOUR ITALICS The roundhand alphabet. Worksheets The Roman alphabet. Worksheets Uncial alphabet. Worksheets All 3 sets of worksheets pdf Bill's Light- table education Calligraphy and handwriting for children Homework Elephant Teacher's web ring Teachers Media. Free Education Videos and Resources Teachers TV TES Teaching Resources The Guardian Teacher's Network The Khan Academy My Links Bill's Art and Calligraphy supplies Bill's Facebook page CALLIGRAPHY at Bill's Space MK II Some Arty Links CATZ Picasso Joan Miro. Gustav Klimt Wassily Kandinsky Calligraphy by Bill Grant Promote your Page tooBill Grant Create your badge Follow Me on Pinterest Flickr Photos A Day in our lives 3 CCF02042015_00002 CCF30082014_00000 More Photos Blogs I Follow Twitter Updates Should we report #LabourNEC to rogue Traders re misleading information on membership forms?... fb.me/4fPq1q6F6 1 day ago My letter to #Labour over the corruption of the leadership contest voxpoliticalonline.com/2016/07/15/my-… via @MidWalesMike 1 day ago Food for thought for the #LabourParty ? A progressive alliance need win only once, then use that victory to... fb.me/4N43E1xQ7 1 day ago So why would a traditional #LabourParty not get behind #Jeremy fb.me/wygj5GBH 2 days ago fb.me/78R20Vh9K 2 days ago Help with the upkeep of Bill’s Space Create a free website or blog at WordPress.com. The Coraline Theme. Ann Narkeh Media Loudmouth with a laptop, documenting the apocalypse... The Waha Report - a daily insight on the Syria situation the nearest station to the pub meandering around the rail network and drinking beer Richard Crookes - Artist and Writer new home website for artist and writer Richard Crookes the void narking off the state since 2005 Misty Karen ambertale independent researcher interested in visual art, poem and short story writing, nature photo taking, science, paranormal phenomena and politics. Warning - Wicked Sense of Humour! Day One Every journey begins with a single step everyday gurus Everyday, Everywhere We Are Guided Towards Happiness medievalbooks Erik Kwakkel blogging about medieval manuscripts Moya Calligrapher from Melbourne, Australia. Hi! Designtraveler Diary of Design History Field Trips quixotree A wild, visionary idea, an eccentric notion or act - trees: givers of bounty, givers of beauty, givers of life scribescribbling A scadian scribe's experiences Atlanta Penablers Atlanta Penablers::: Helping artists and calligraphers flourish through community and education. Ellen Waldren My blog is all about being creative. I invite you to share my passion - calligraphy and lettering. Yoga World &amp; Pesto The Aspirational Luton Blog life ... places &amp; faces ... photojournalism BILL'S SPACE Learn, teach, or do calligraphy at Bill's Space. medievalfragments Turning Over a New Leaf The Library of Trinity College Dublin News and Events from Ireland's Largest University Library Instant de Calligraphie Quand Calligraphie &amp; Poésie se répondent... Daily Inspiration for daily inspiration and motivation G. E. Gallas Writer and Illustrator Jewels Houghton Regis Whether you need paints, knitting needles, a cup of tea, a space to crochet or person to chat to then Jewels is the place for you. Bobbsta's Blog Striding through this World, using baby steps Bamburgh Research Project's Blog ... bringing the past to life for everyone... Dragonfly Studio Custom Made Graphic Design арт полка Блог с картинками и настроением diariodiviaggioconflavia Just another WordPress.com site Post to Cancel Follow New posts from this site will now appear in your Reader BILL'S SPACE Customize Follow Copy shortlink Report this content View Site in the Reader Manage Sites I Follow Collapse this bar %d bloggers like this: Skip to toolbar My Site kinyarwandablogkinyarwandablog.wordpress.com + Add New WordPress Stats Stats PlanFree Publish Blog PostsAdd PagesAdd Personalize ThemesCustomize Menus Configure Sharing PeopleAdd DomainsAdd Settings Reader Streams Followed SitesManage Discover Recommendations My Likes Notifications Me kinyarwandablog@kinyarwandablog Sign Out Profile My Profile Account Settings Billing History Security Notifications Special Get Apps Next Steps Help Log Out Send to Email Address loading Cancel Post was not sent - check your email addresses! Email check failed, please try again Sorry, your blog cannot share posts by email. :) Portrait image for Type@Cooper Cutting Quills from Type@Cooper pro 00:00 04:19 Vimeo 04:19 Like Add to Watch Later Share Clip ID:68078367 Delivery:progressive Playing:360p@30 Embed size:398×224 CDN:level3 Open link Like Reblog Like japhethwg One blogger likes this. All Unread Comments Follows Likes  Older than a week  Your stats are booming! kinyarwandablog is getting lots of traffic. Older than a month  You've made 5 posts on kinyarwandablog. Follow @billgrant43 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622090408#index"
                   NS1:content=" SW startup guide for Vayu 3G From Yantrr Wiki Jump to: navigation, search For a quick guide to starting with the Vayu 3G cape's HW, see Leaflet for 3G cape. Below, we describe how to set up the 3G capes and the associated software. Contents [hide] 1 Overview 2 Hardware Configurations 3 Getting started 3.1 Seting up the system 3.2 Power On Modem 3.3 Understanding the TTYUSB ports on BBB capes 3.4 Power Off Modem 3.5 Soft Resetting the Modem 3.6 Hard resetting the modem 3.7 VAYU 3GHx-D(ZTE Modem) 3.8 AT Commands Manual 3.9 FAQ 4 Data connection procedure using PPP 4.1 Wvdial Configuration for Debian Wheezy 4.1.1 System Status 4.1.2 FAQ 4.1.3 Adding a DNS 5 Using GPS module with Debian Wheezy 6 FAQ 6.1 FAQ 1: Modem / TTYUSB of modem not detected Overview Data connection is established based on PPP protocols. Wvdial is mainly used to configure the dialup settings. For setting up various settings for PPP connection and establishing a data connection on these capes follow the link to the wiki Way to setup the Vayu 2G Capes How to read location and coarse time as NMEA-0183 message from the serial UART ttyO4 port How to write wvdial conf files for any network Sample wvdial.conf file for AT&amp;T and T-Mobile USA For using the Vayu-3G-A/Vayu-3GP-A Cape, please ensure that you have the following : USB drivers for the modem (21f5:2012) installed in kernel PPS drivers enabled in kernel, required if GPS module is present. VAYU Device tree overlay file is properly configured. You can either download kernel patches containing the same to use with your existing images or you can download our prebuilt MicroSD card image or EMMC flasher image. All the images and files and extra support on software can be found here: Vayu_Cape_SW_images_and_drivers Note : On most beaglebones, there is a known bug with USB hotplug for using USB HUB with Beaglebone black host port. So to efficiently be able to use the modem, follow the Power on Modem section properly. An alternative easier approach is to keep the second host port on cape populated with a usb device. Hardware Configurations The 3G/WCDMA modem has following interfaces available on the Cape: Leaflet_3G modem Mini USB B Device port on Cape (P9): It has to be connected to USB host port on Beaglebone Black. SMA connector for GSM/WCDMA antenna(P7): Antenna is connected here. LED D2 (5V Power LED of Cape) : This LED indicates that the Cape is powered on with 5V and GSM/WCDMA modem is also powered. LED D4 (SIGNAL LED) : This LED is the SIGNAL LED for the GSM/WCDMA modem whose various blinking states denote the different states of the WCDMA Modem. GPIO45 (ON/OFF PIN) : It is the GPIO connected to Power ON/OFF pin of GSM/WCDMA Modem. GPIO60 (Hard Reset Pin) : It is the GPIO connected to Reset pin of GSM/WCDMA Modem. S1 (ON/OFF switch) : This push button switch is connected to Power ON/OFF pin of GSM/WCDMA modem. S2 (RESET switch) : This push button switch is connected to Hard Reset pin of GSM/WCDMA modem. GPIO45 and GPIO60 should be set high at all instances for the GSM/WCDMA modem to be available for use. USB drivers for the modem (21f5:2012, 21f5:2009) should be included in the kernel. We provide pre-compiled images with USB drivers included in the kernel. Getting started Seting up the system Sim Card and Antennae 1. Place a mini sim in the sim card slot and connect a GSM antenna to the SMA connector. 2. Mount the cape on BBB carefully. 3. Connect the extra usb cable provided with the cape between Host port on Beaglebone Black and miniUSB device port on Cape. 4. To avoid the bug on Beaglebone black with external USB hubs, please connect a USB device (pendrive etc) to extra host port on the cape. 5. Ensuring that the power jumper on the cape is in its place, power up the setup using a 5V DC adapter(min 2.5A) to barrel jack. D2 LED on the cape will glow alongwith LEDs on the Beaglebone black. Note : Before proceeding further ensure D2 LED is glowing properly. Make sure that the adapter being used is of proper rating and has been connected properly. Further check for the presence of the power jumper(#12 on leaflet). Note : Do not try to power up using USB cable alone. Always power up system with a DC adapter. Also while disconnecting power, USB cable should be removed before the DC adapter. Hardware setup Check.jpg Usb.jpg Final.jpg USB ports and power jumper on the cape USB connections on cape and beaglebone black Final setup before login Ways to log into the cape After establishing that the power on the cape is proper, log in to the BBB plus cape setup using any of the following method : 1. Through USB client. 2. Through Ethernet cable. Now login by using the SSH command. Make sure to login as root only so that all the special priviledges are available. 1. Through USB client. Use the command : ssh -l root 192.168.7.2 to login onto the system. Default password is root. 2. Through ethernet cable. The ip address of the ethernet cable should be known. Use that with the ssh command to esatblish a connection : ssh -l root $address Default Username and password is root. In Yantrr Precompiled images, IP address is 192.168.1.150 After logging into the BBB plus cape system, export and set the GPIO45 and GPIO60 high by using: cd /sys/class/gpio/ echo 45 &gt; export echo 60 &gt; export cd gpio45 echo “high” &gt; direction cd .. cd gpio60 echo “high” &gt; direction NOTE : In precompiled image, for ease of use these regular commands for use with the GPIOs have been created as functions : pinexp, setout, setin, pinread. pinexp 45 pinexp 60 setout 45 high setout 60 high Power On Modem The Modem can be powered on by providing a low level pulse at ON/OFF Pin for 3-4s when the module is off. It can be achieved by either using the push button switch S1 or GPIO45. cd /sys/class/gpio/ echo 45 &gt; export cd gpio45 echo &quot;high&quot; &gt; direction sleep 4 echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction After some time, LED D4 should start blinking as to indicate modem has turned on. (Note : In some of 3G modules LED functionality is not enabled by the manufacturer, so the LED D4 might not blink) Note : In cases where a usb device was not connected to extra host port on cape, please connect the provided USB cable after turning on the modem. Check that modem is visible on the USB bus by: lsusb Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 034: ID 21f5:2012 Bus 001 Device 007: ID 046d:0825 Logitech, Inc. Webcam C270 Assigning driver on the USB modem (Not needed if using pre-built images) modprobe usbserial vendor=0x21f5 product=0x2012 lsusb Bus 001 Device 002: ID 0424:2412 Standard Microsystems Corp. Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 001 Device 034: ID 21f5:2012 Bus 001 Device 007: ID 046d:0825 Logitech, Inc. Webcam C270 System messages (logs) show what happened when modem was turned on and its drivers were assigned after applying modprobe usbserial. For pre-compiled image, log messages are similar. dmesg | grep -i usb usb 1-1.1: New USB device found, idVendor=21f5, idProduct=2012 usb 1-1.1: New USB device strings: Mfr=3, Product=2, SerialNumber=4 usb 1-1.1: Product: StrongRising Technologies usb 1-1.1: Manufacturer: Modem usb 1-1.1: SerialNumber: 000000000002 usb 1-1.1: usb_probe_device usb 1-1.1: configuration #1 chosen from 1 choice usb 1-1.1: adding 1-1.1:1.0 (config #1, interface 0) usbserial_generic 1-1.1:1.0: usb_probe_interface usbserial_generic 1-1.1:1.0: usb_probe_interface - got id usbserial_generic 1-1.1:1.0: The &quot;generic&quot; usb-serial driver is only for testing and one-off prototypes. usbserial_generic 1-1.1:1.0: Tell linux-usb@vger.kernel.org to add your device to a proper driver. usbserial_generic 1-1.1:1.0: generic converter detected usb 1-1.1: generic converter now attached to ttyUSB0 usb 1-1.1: adding 1-1.1:1.1 (config #1, interface 1) usbserial_generic 1-1.1:1.1: usb_probe_interface usbserial_generic 1-1.1:1.1: usb_probe_interface - got id usbserial_generic 1-1.1:1.1: The &quot;generic&quot; usb-serial driver is only for testing and one-off prototypes. usbserial_generic 1-1.1:1.1: Tell linux-usb@vger.kernel.org to add your device to a proper driver. usbserial_generic 1-1.1:1.1: generic converter detected usb 1-1.1: g'''eneric converter now attached to ttyUSB1''' usb 1-1.1: adding 1-1.1:1.2 (config #1, interface 2) usbserial_generic 1-1.1:1.2: usb_probe_interface usbserial_generic 1-1.1:1.2: usb_probe_interface - got id usbserial_generic 1-1.1:1.2: The &quot;generic&quot; usb-serial driver is only for testing and one-off prototypes. usbserial_generic 1-1.1:1.2: Tell linux-usb@vger.kernel.org to add your device to a proper driver. usbserial_generic 1-1.1:1.2: generic converter detected usb 1-1.1: '''generic converter now attached to ttyUSB2''' It is recommended to add a proper driver for the modem in kernel. The generic driver is not reliable. Note : If the modem is not visible after these steps or any issues are faced while initializing the modem please contact Yantrr Support (support@yantrr.com) with the above log messages (dmesg | grep –I usb or /var/log/syslog). Understanding the TTYUSB ports on BBB capes Vayu 3G cape enumerate 3 different usb ports /dev/ttyUSB0 /dev/ttyUSB1 /dev/ttyUSB2 ttyUSB0 is data port &amp; command for modem, use this for the WVDIAL conf or PPP ttyUSB1 is the diag port for the Firmware upgrade ttyUSB2 is the AT CMD port only. Note : These ttyUSB ports are only created if proper drivers are present or when “modprobe usbserial” command is issued. Pre compiled images with drivers are available on the Yantrr wiki page. Note : Both ttyUSB0 and ttyUSB2 take the AT commands, but ttyUSB0 port is also a Data communications port so for all intended purposes of issuing AT commands use ttyUSB2 port(PCUI port). Power Off Modem The modem can be powered off by providing a low level pulse at ON/OFF pin for 3-4s when the module is On. It can be achieved by either using the push button switch S1 or GPIO45. cd /sys/class/gpio/ echo 45 &gt; export cd gpio45 echo &quot;high&quot; &gt; direction sleep 4 echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction Modem can also be turned off by issuing following AT commands on port /dev/ttyUSB2 AT+ZPWROFF Soft Resetting the Modem Steps - Power Off the Modem. Wait for 1-2s atleast. Power on the modem. Hard resetting the modem There might arise situations where modem does not seem to be responding to any commands issued on AT commands port or it cannot be turned on/off. In such scenarios, issue hard reset to the modem. It can be done by either toggling Switch S2 for atleast 100ms or pulling GPIO60 low for 1s and then setting it high again. cd /sys/class/gpio/ cd gpio60 echo &quot;low&quot; &gt; direction sleep 1 echo &quot;high&quot; &gt; direction Note : Please use hard reset conservatively. Soft reset should be preferred under most conditions. VAYU 3GHx-D(ZTE Modem) VAYU 3GHx-D capes have ZTE MG3732 modem. Their functionality is essentially the same with some minor changes. For more information on ZTE MG3732 modem and a quick reference guide click here AT Commands Manual The AT Command for the 3G Module can be downloaded from here : WCDMA AT Commands Manual FAQ FAQ for this section click here Data connection procedure using PPP Notes All commands are recommended to executed as root user. USB drivers need to be installed in the kernel for the WCDMA modem to work. Modem port for Vayu cape is ttyUSB0, use this port for PPPd or Wvdial AT Commands port for Vayu cape is ttyUSB2 Wvdial Configuration for Debian Wheezy Download and install Wvdial apt-get install wvdial Executing the following command usually sets the wvdial.conf file which is used for dialing to GPRS communication, but since here our modem port is on a UART(/dev/ttyO1) and not on /dev/ttyS* or /dev/ttyUSB* ports, we will have to manually configure it. So, open the wvdial.conf file $ nano /etc/wvdial.conf Assuming that you have the USERNAME, PASSWORD and APN available for the service provider of the sim card being used, edit and make wvdial.conf file like this. Sample wvdial.conf file for AT&amp;T and T-Mobile USA [Dialer Defaults] Modem Type = Analog ModemPhone = *99# ISDN = 0 Baud = 115200 Username = USERNAME Password = PASSWORD Modem = /dev/ttyUSB0 Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Init3 = at+cgdcont=1,&quot;ip&quot;,&quot;APN&quot; Stupid Mode = 1 Usually for GSM Networks, Modemphone is *99# or *99***1#. Consult your network provider for exact details in case you are facing difficulties. After editing, save and exit, now run wvdial for establishing communication. $ wvdial If all parameters are correct and everything is working, you should see a success message from wvdial. Once PPP connection has been established, you will see a ppp0 IP. To check the status of wvdial and find out its IP open a new shell and use either of following: Run ifconfig and find ppp0 in the list of network connections. $ ifconfig or $ ifconfig ppp0 Check the network statistics for IP and their gateways and check the Iface column for ppp0 $ netstat -arn * Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface 0.0.0.0 192.168.1.1 0.0.0.0 UG 0 0 0 eth0 192.168.1.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0 192.168.7.0 0.0.0.0 255.255.255.252 U 0 0 0 usb0 192.200.1.21 0.0.0.0 255.255.255.255 UH 0 0 0 ppp0 Read the system messages as $ cat /var/log/messages It lists all the attempts at establishing ppp communication using the modem and IPs for the successful attempt. Now all that is left is to route the network traffic over the gateway of ppp0 instead of eth0 so that GPRS communication is fully completed. PPP connection has been established over GPRS using 2G/3G module and wvdial. System Status After PPP has been established, the following is the status of the LEDs and GPIOs (For verification) STATUS LED D3 – It is continuously glowing, once the Modem was turned on. SIGNAL LED D4 – It is now blinking at 64ms ON/300ms OFF . Earlier when PPP was not established but SIMcard was detected by modem, then it was blinking at 64ms ON/3000ms OFF. ON/OFF GPIO45 – Its value should be 1. RESET GPIO60 – Its value should always be 1. FAQ FAQ for this section click here Adding a DNS nano /etc/resolv.conf add following nameserver 8.8.8.8 nameserver 208.67.222.222 These are public nameservers, and you are free to use any other if they do not work. Using GPS module with Debian Wheezy Please refer to Software startup Guide for VAYU GPS FAQ FAQ 1: Modem / TTYUSB of modem not detected Solution 1. Remove the power cord from the board and reconnect it while the USB cable is not connected to the cape. Then you should follow the procedure to turn on the 3G module as follows set GPIO 45 to high in output mode Then after 3-4s , either press the switch S1 for 4s and then release it or instead of switch you can also recycle the value of GPIO 45 to low then high at intervals of 4s and now connect the USB cable. ** Always make sure GPIO 45 is in HIGH state ** cd /sys/class/gpio/ echo 45 &gt; export cd gpio45 echo &quot;high&quot; &gt; direction sleep 4 **Now enable the modem by toggling GPIO 45 *** echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction sleep 4 ** To disable the Modem, again toggle GPIO45 ** echo &quot;low&quot; &gt; direction sleep 4 echo &quot;high&quot; &gt; direction sleep 4 Solution 2. Due to hotplug issue in AM335x we can do a workaround, connect a usb device like a pendrive on second host port on cape and then just press the switch S1 for 4s after setting GPIO45 high. This will most certainly work. Solution 3. This solution resets the usbcore of the AM335x and reinitialize it. This has been identified as a last resort workaround, NOTE, this will reset all peripheral on that USB CORE If the Device is disconnecting as soon as you try to establish connection even when you are sure that 3G module is on, then following should be followed : reset the USB1 echo 0 &gt; /sys/bus/usb/devices/usb1/bConfigurationValue echo 1 &gt; /sys/bus/usb/devices/usb1/bConfigurationValue Retrieved from &quot;http://www.yantrr.com/w/index.php?title=SW_startup_guide_for_Vayu_3G&amp;oldid=669&quot; Personal tools Log in Namespaces Page Discussion Variants Views Read View source View history Actions Search Navigation Main page Recent changes Random page Yantrr Links BeagleBone M2M Cape Order Capes Tools What links here Related changes Special pages Printable version Permanent link This page was last modified on 21 July 2015, at 11:17. This page has been accessed 13,926 times. Content is available under Attribution-ShareAlike 4.0 International unless otherwise noted. Privacy policy About Yantrr Wiki Disclaimers Attribution-ShareAlike 4.0 International Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616141056#index"
                   NS1:content=" This is a file from the Wikimedia Commons File:An example of theoretical DNS recursion.svg From Wikipedia, the free encyclopedia Jump to: navigation, search File File history File usage Global file usage Metadata File:An example of theoretical DNS recursion.svg Size of this PNG preview of this SVG file: 563 × 200 pixels. Other resolutions: 320 × 114 pixels | 640 × 227 pixels | 800 × 284 pixels | 1,024 × 364 pixels | 1,280 × 455 pixels. Original file ‎(SVG file, nominally 563 × 200 pixels, file size: 16 KB) This is a file from the Wikimedia Commons. Information from its description page there is shown below. Commons is a freely licensed media file repository. You can help. Summary[edit] DescriptionAn example of theoretical DNS recursion.svg English: A DNS resolver iteratively queries a root nameserver, org. nameserver, and wikipedia.org. nameserver in its quest to resolve the IP address associated with the domain name www.wikipedia.org. Date 25 October 2005 Source Own work Author Lion Kimbro Other versions File:An example of theoretical DNS recursion hu.svg (Hungarian translation) File:An example of theoretical DNS recursion-nl.svg (Dutch translation) Licensing[edit] Public domainPublic domainfalsefalse Public domain I, the copyright holder of this work, release this work into the public domain. This applies worldwide. In some countries this may not be legally possible; if so: I grant anyone the right to use this work for any purpose, without any conditions, unless such conditions are required by law. Public domainPublic domainfalsefalse File history Click on a date/time to view the file as it appeared at that time. Date/Time Thumbnail Dimensions User Comment current 03:39, 7 October 2014 Thumbnail for version as of 03:39, 7 October 2014 563 × 200 (16 KB) Wereldburger758 Valid SVG now. 05:07, 25 October 2005 Thumbnail for version as of 05:07, 25 October 2005 563 × 200 (23 KB) LionKimbro A DNS resolver recursively queries a root nameserver, org. nameserver, and wikipedia.org. nameserver in it's quest to resolve the IP address associated with the domain name www.wikipedia.org. Created and placed into the public domain by myself, Lion Kimbr File usage The following pages on the English Wikipedia link to this file (pages on other projects are not listed): Domain Name System Global file usage The following other wikis use this file: Usage on af.wikipedia.org Domeinnaamstelsel Usage on beta.wikiversity.org Computer networks -- 2008-2009 -- info.uvt.ro/Course 11 Usage on de.wikinews.org Internet-Root-Server angegriffen Usage on en.wikibooks.org Intellectual Property and the Internet/Domain Name System Usage on en.wikiversity.org Web Science/Part1: Foundations of the web/Domain Name System/DNS address resolution Web Science/Part1: Foundations of the web/MoocIndex Usage on hi.wikipedia.org डोमेन नाम प्रणाली Usage on it.wikiversity.org Nomi a dominio Usage on pt.wikibooks.org Sistemas de Informação Distribuídos/Infraestrutura/Serviços de Nomes Usage on pt.wikiversity.org Sistemas de Informação Distribuídos/Infraestrutura/Serviços de Nomes Usage on ta.wikipedia.org களப் பெயர் முறைமை Usage on te.wikipedia.org డొమైన్ నేమ్ సిస్టం Usage on tr.wikipedia.org Portal:İnternet/Gündemdeki madde/1 Metadata This file contains additional information, probably added from the digital camera or scanner used to create or digitize it. If the file has been modified from its original state, some details may not fully reflect the modified file. Width 450pt Height 160pt Retrieved from &quot;https://en.wikipedia.org/wiki/File:An_example_of_theoretical_DNS_recursion.svg&quot; Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces File Talk Variants Views Read View on Commons More Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Upload file Special pages Page information Languages Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view Wikimedia Foundation Powered by MediaWiki "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620152343#index"
                   NS1:content=" Marco Marchini computer engineer, developer, maker LinkedIn GitHub Twitter Facebook Instagram Email 13 Nov 2014 • on beaglebone black, GSM Click profile image for Marco Marchini by Marco Marchini Using the Mikroelektronika GSM Click on the BeagleBone Black I recently came across the problem of connecting a BeagleBone Black to the Internet using a GSM/GPRS connection, so that the applications on the board could access a remote service without the need for a cabled or wifi network. After some research, I found a pretty good solution: the GSM Click from Mikroelektronika. This add-on board is one of a series of boards associated by the use of the so called Mikrobus interface. The GSM Click mounts a Telit GL865-QUAD GSM/GPRS module, which supports GSM/GPRS 850/900/1800/ 1900 MHz Quad-band frequency. Wiring The GSM Click can use a 3.3V power supply and communicates through a simple serial interface. Therefore, connecting it to the BeagleBone Black was pretty straightforward: BeagleBone Black GSM Click P9_04 (DC_3.3V) 3.3V P9_02 (GND) GND P9_21 (UART2_TXD) RX P9_22 (UART2_RXD) TX As you can see, I used the UART2 port on the BeagleBone Black. This is because I've noticed that using UART1 for the GSM Click creates problems if there's a USB device plugged into the board (as in my case). Otherwise, if no USB device is attached, UART1 works perfectly. Actyally, it seems there are problems with the GSM Click whenever we have another serial device attached. In fact, there are problems also when the UART0 (debug) is attached to my laptop. &lt;--- VERIFY THIS! Using the UARTs with the Adafruit BBIO Python library GPIO handling is greatly simplified on the BeagleBone Black, thanks to the awesome job done by Adafruit with its Adafruit BBIO Python library. First thing, download and install the library (complete guide at the link provided above) and some other prerequisites: sudo apt-get install build-essential python-dev python-pip -y sudo pip install Adafruit_BBIO sudo pip install pyserial then execute this simple Python script to test out that everything works correctly: import Adafruit_BBIO.UART as UART import serial UART.setup(&quot;UART2&quot;) sp = serial.Serial(port = '/dev/ttyO2', baudrate=9600) sp.close() sp.open() if sp.isOpen(): print &quot;Serial port is open!&quot; sp.write(&quot;hello&quot;) sp.close() Testing serial communication with minicom Installing minicom is useful to test serial ports and to interact with serial devices: sudo apt-get install minicom If you are using UART2 for the GSM module, you can launch: minicom -b 9600 -D /dev/ttyO2 and then write the command &quot;AT&quot; (without quotes) followed by carriage return. If you get the response &quot;OK&quot;, your module is good to go. Sakis3g and ppp Next step: installing sakis3g. This utility handles Internet connections through UMTS USB devices. For some reason sakis3g's website (sakis3g.org) has been down for a while, but it's possible to download the software from download mirrors, like this one. sudo apt-get install ppp The initialization script tinit.py Connecting Disconnecting References Adafruit BBIO and UARTs Sakis3g download mirror Marco Marchini © 2014. All rights reserved. Uno theme by Dale-Anthony Proudly published with Ghost "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160802140703#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Donate0 OpenSCAD The Programmers Solid 3D CAD Modeller Home About News Downloads Documentation Gallery Community GitHub Recent News 14 Jul 2016 OpenSCAD Customizer The topic of this year's Google Summer of Code project is... 3 Mar 2016 Google Summer of Code 2016 OpenSCAD, in collaboration with 10 Mar 2015 OpenSCAD release: 2015.03 OpenSCAD 2015.03 has just been released! This release adds a number of features which has been in development for some... OpenSCAD is a software for creating solid 3D CAD objects. It is free software and available for Linux/UNIX, MS Windows and Mac OS X. Download OpenSCAD OpenSCAD 2015.03-3 Linux Other OSs and Versions " />
  <RDF:Description RDF:about="urn:scrapbook:item20160810104654#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Lloyds Bank - Print Friendly Statement Lloyds BankLloyds Bank MENU Cookie Policy Safe and secureOur Internet Banking guarantee Our online and mobile banking guarantee We guarantee to refund your money in the unlikely event you experience fraud with our Internet Banking service - as long as you've been careful, for example, by taking reasonable steps to keep your security information safe. We protect you with safeguards that meet Industry Standards. Keep your password secure and do not let anyone else make use of your security details, even if they share a joint account with you. Do not let anyone watch you enter your security details and log off after each Online Banking session. Carry out regular virus checks on your devices and have the latest operating system and web browser installed. Find out more about how to protect yourself online. Security information +00206943289 Classic statement Printed: 10 August 2016 Print Thomas Britnell Flieder Street 1 Vater Stetten Bavaria 85591 Germany Sort code: 30-64-42BIC: LOYDGB21670 Account number: 20721960IBAN: GB72LOYD30644220721960 The data shown on your statement was correct at the time of printing. Please read through the entries on your statement. If you think something is incorrect, please contact us on 0345 300 0000 straight away and we'll check it for you. Date Description Type In (£) Out (£) Balance (£) 08 Aug 16 NON-STG CASH FEE CD 0568 07AUG16 DEB 2.00 276.79 08 Aug 16 NON-STG TRANS FEE 2.99% CD 0568 07AUG16 DEB 2.91 278.79 08 Aug 16 ABPR RW 100000.00 VISAXR 1026.27258 CD 0568 07AUG16 DEB 97.44 281.70 04 Aug 16 STUDENT LOANS SO 137.00 379.14 28 Jul 16 NON-STG CASH FEE CD 0568 28JUL16 DEB 2.00 516.14 28 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 28JUL16 DEB 2.97 518.14 28 Jul 16 BK OLD BUILDING RW 102000.00 VISAXR 1024.50783 CD 0568 28JUL16 DEB 99.56 521.11 28 Jul 16 F/FLOW THOMAS BRIT TFR 173.33 620.67 25 Jul 16 NON-STG CASH FEE CD 0568 24JUL16 DEB 2.00 447.34 25 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 24JUL16 DEB 2.91 449.34 25 Jul 16 BPR RSWITCH RWANDA RW 100000.00 VISAXR 1024.27533 CD 0568 24JUL16 DEB 97.63 452.25 18 Jul 16 NON-STG CASH FEE CD 0568 17JUL16 DEB 2.00 549.88 18 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 17JUL16 DEB 2.88 551.88 18 Jul 16 KG RW 100000.00 VISAXR 1035.41106 CD 0568 17JUL16 DEB 96.58 554.76 18 Jul 16 NON-STG CASH FEE CD 0568 15JUL16 DEB 2.00 651.34 18 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 15JUL16 DEB 2.94 653.34 18 Jul 16 BK KINAMBA K-CONNE RW 102000.00 VISAXR 1035.42788 CD 0568 15JUL16 DEB 98.51 656.28 11 Jul 16 NON-STG CASH FEE CD 0568 09JUL16 DEB 2.00 754.79 11 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 09JUL16 DEB 2.98 756.79 11 Jul 16 KIGALI RW 100000.00 VISAXR 1000.90081 CD 0568 09JUL16 DEB 99.91 759.77 08 Jul 16 NON-STG CASH FEE CD 0568 06JUL16 DEB 2.00 859.68 08 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 06JUL16 DEB 3.05 861.68 08 Jul 16 BK KINAMBA K-CONNE RW 102000.00 VISAXR 997.45746 CD 0568 06JUL16 DEB 102.26 864.73 05 Jul 16 NON-STG CASH FEE CD 0568 01JUL16 DEB 2.00 966.99 05 Jul 16 NON-STG TRANS FEE 2.99% CD 0568 01JUL16 DEB 2.91 968.99 BGC Bank Giro Credit BP Bill Payments CD Card * (followed by the last 4 digits of the card) CHG Charge CHQ Cheque(s) COMM Commission COR Correction CPT Cashpoint CSH Cash CSQ Cash/Cheque DD Direct Debit DEB Debit Card DEP Deposit DR Overdrawn Balance EUR Euro Cheque FPI Faster Payments in FPO Faster Payments out IB Internet Banking MPI Mobile Payment Incoming MPO Mobile Payment Outgoing MTU Mobile top up PAY Payment PSV Paysave SAL Salary SO Standing Order TFR Transfer Useful Information Checking Your Statements Please read through the entries on your statement. If you think something is incorrect, please contact us straight away on 0345 300 0000 and we will check it for you. The earlier you contact us regarding a disputed entry, the more we may be able to do. For example if you have a personal account, we may not be able to refund you if you tell us more than 13 months after the date of the payment. Take care when storing or disposing of information about your accounts Interest rates You can find out the interest rates that we have used to calculate the interest you have earned or been paid by clicking the ‘Find out more about our interest rates and charges’ link under your online statement, by visiting www.lloydsbank.com, or your local branch or by calling our interest rate line on 0845 300 0032 (8am-9pm Monday-Friday and 9am-5pm Saturday-Sunday). Dispute resolution If you have a problem with your agreement, please try to resolve it with us in the first instance. If you are not happy with the way in which we handled your complaint or the result, you may be able to complain to the Financial Ombudsman Service. If you do not take up your problem with us first you will not be entitled to complain to the Ombudsman. We can provide details of how to contact the Ombudsman. Personal Debit and Cashpoint® Card Charges Whenever you use your card to withdraw cash or make a payment in currencies other than in sterling, the amount is converted to sterling on the day it is processed by Visa, using their standard exchange rate that day. We also include a foreign exchange fee of 2.99%. Visa rates can change daily - you can call 0345 300 0000 (or +44 1733 347 007 if you are abroad) to find out the Visa rate on a particular day (please note this might vary from the rate applied to your payment). Please check our Banking Charges guide, visit lloydsbank.com, call us on 0345 300 0000 or visit any Lloyds Bank Branch for the other charges that apply. Lloyds Bank plc Registered Office: 25 Gresham Street, London EC2V 7HN. Registered in England and Wales No: 2065. Authorised by the Prudential Regulation Authority and regulated by the Financial Conduct Authority and the Prudential Regulation Authority, under registration number 119278. Banking with us Branch finder CashPoint® finder Mobile Banking Rate and charges Glossary About us Communities Lloyds Banking Group Careers About this site Security Legal Privacy Terms and conditions Accessibility Contact us Go to mobile site Lloyds Bank plc is authorised by the Prudential Regulation Authority and regulated by the Financial Conduct Authority and the Prudential Regulation Authority under registration number 119278. Lloyds Bank plc is covered by the Financial Services Compensation Scheme and the Financial Ombudsman Service. (Please note that due to the schemes eligibility criteria not all Lloyds Bank business customers will be covered by these schemes.) Calls may be recorded for our mutual protection, training and monitoring purposes. Accounts in Jersey, the Bailiwick of Guernsey and the Isle of Man are held by Lloyds Bank International Limited which is not and is not required to be, authorised under the Financial Services and Markets Act 2000 of the United Kingdom and therefore is not subject to the rules and regulations of the Financial Services Compensation Scheme made under that Act for the protection of depositors or investors. For more information about depositor compensation schemes in Jersey, the Bailiwick of Guernsey and the Isle of Man please click here. Lloyds Bank International Limited. Registered office and principal place of business: PO Box 160, 25 New Street, St. Helier, Jersey JE4 8RG. Lloyds Bank International Limited is incorporated in Jersey No. 4029 and is regulated by the Jersey Financial Services Commission to carry on deposit-taking business under the Banking Business (Jersey) Law 1991 and investment and general insurance mediation business under the Financial Services (Jersey) Law 1998. Lloyds Bank International Limited subscribes to the Jersey Code of Practice for Consumer Lending and has also notified the Jersey Financial Services Commission that it carries on money service business. The Guernsey branch of Lloyds Bank International Limited, principal place of business PO Box 136, Sarnia House, Le Truchot, St Peter Port, Guernsey, GY1 4EN, is licensed by the Guernsey Financial Services Commission to take deposits and to carry on controlled investment business and insurance intermediary business under The Banking Supervision (Bailiwick of Guernsey) Law, 1994, The Protection of Investors (Bailiwick of Guernsey) Law, 1987 (as amended) and The Insurance Managers and Insurance Intermediaries (Bailiwick of Guernsey) Law, 2002 (as amended), respectively, and is also registered with the Guernsey Financial Services Commission as a money service provider. The Isle of Man branch of Lloyds Bank International Limited of PO Box 111, Peveril Buildings, Peveril Square, Douglas, Isle of Man IM99 1JJ, is licensed by the Isle of Man Financial Supervision Commission to conduct deposit-taking and investment business and is registered with the Isle of Man Insurance and Pensions Authority in respect of general insurance business (intermediary). " />
  <RDF:Description RDF:about="urn:scrapbook:item20160628160522#index"
                   NS1:content=" The Geek Stuff ≡ Menu Home Free eBook Start Here Contact About 7 Chmod Command Examples for Beginners by SathiyaMoorthy on June 8, 2010 Earlier we discussed about how to use octal permission bits with chmod. In this article, let us review how to use symbolic representation with chmod. Following are the symbolic representation of three different roles: u is for user, g is for group, and o is for others. Following are the symbolic representation of three different permissions: r is for read permission, w is for write permission, x is for execute permission. Following are few examples on how to use the symbolic representation on chmod. 1. Add single permission to a file/directory Changing permission to a single set. + symbol means adding permission. For example, do the following to give execute permission for the user irrespective of anything else: $ chmod u+x filename 2. Add multiple permission to a file/directory Use comma to separate the multiple permission sets as shown below. $ chmod u+r,g+x filename 3. Remove permission from a file/directory Following example removes read and write permission for the user. $ chmod u-rx filename 4. Change permission for all roles on a file/directory Following example assigns execute privilege to user, group and others (basically anybody can execute this file). $ chmod a+x filename 5. Make permission for a file same as another file (using reference) If you want to change a file permission same as another file, use the reference option as shown below. In this example, file2’s permission will be set exactly same as file1’s permission. $ chmod --reference=file1 file2 6. Apply the permission to all the files under a directory recursively Use option -R to change the permission recursively as shown below. $ chmod -R 755 directory-name/ 7. Change execute permission only on the directories (files are not affected) On a particular directory if you have multiple sub-directories and files, the following command will assign execute permission only to all the sub-directories in the current directory (not the files in the current directory). $ chmod u+X * Note: If the files has execute permission already for either the group or others, the above command will assign the execute permission to the user &gt; Add your comment If you enjoyed this article, you might also like.. 50 Linux Sysadmin Tutorials 50 Most Frequently Used Linux Commands (With Examples) Top 25 Best Linux Performance Monitoring and Debugging Tools Mommy, I found it! – 15 Practical Linux Find Command Examples Linux 101 Hacks 2nd Edition eBook Linux 101 Hacks Book Awk Introduction – 7 Awk Print Examples Advanced Sed Substitution Examples 8 Essential Vim Editor Navigation Fundamentals 25 Most Frequently Used Linux IPTables Rules Examples Turbocharge PuTTY with 12 Powerful Add-Ons Bash 101 Hacks Book Sed and Awk 101 Hacks Book Nagios Core 3 Book Vim 101 Hacks Book Tagged as: Chmod Command, Chmod Examples, Linux Chmod Examples, Unix Chmod Examples { 23 comments… add one } Egor June 8, 2010, 3:32 am I think correct command for the p.3 in accordance with its subject should be $ chmod u-rw filename, don’t I? Link nardi June 8, 2010, 5:59 am The last one is most handy! Can’t even remember, how many times I tried to remove exec permision from files copyed from M$ systems but not affect directories. former solution: for f in `ls -R` ; do [ ! -d “$f” ] &amp;&amp; chmod a-x “$f” ; done and now: chmod -R a-x,u+X * big thx Link rbz June 8, 2010, 7:20 am @nardi: While the first six examples are rather trivial I agree for the last one. I’ve been looking for this solution for months. chmod -R a-x,u+X * – such a beauty! thx Link Alex June 12, 2010, 12:51 am The last one is truly great. I’ve always used “find -type d -exec …” for this. I’m a little confused about your note, though. Why would it care about the group permissions? Link nardi June 13, 2010, 1:26 pm @Alex The note is about regular files, that the +X rule is not only affecting directories. See man chmod or try it yourself by hand. This will set the exec rights: nardi@kub1x ~/test $ ll file -rw-r-xr– 1 nardi nardi 56 Jun 13 21:06 file* nardi@kub1x ~/test $ chmod a+X file nardi@kub1x ~/test $ ll file -rwxr-xr-x 1 nardi nardi 56 Jun 13 21:06 file* This won’t set anything, because regular file “file” is neither a directory nor has any exec bit on. nardi@kub1x ~/test $ ll file -rw-r–r– 1 nardi nardi 56 Jun 13 21:06 file nardi@kub1x ~/test $ chmod u+X file nardi@kub1x ~/test $ ll file -rw-r–r– 1 nardi nardi 56 Jun 13 21:06 file Link john August 30, 2011, 7:32 am chmod -R a-x,u+X * this command applyed my vstfd stop please give solution Link Claudia February 22, 2012, 5:11 am I used to work with linux command in the University and after a pause of few years… it brought me back to ‘beginers mode’ when I needed to use chmod. I was looking for some sites where I can find a comprehensive explanation with few examples. I could benefit a lot from this guide and a BIG “THANK YOU”! Link prabhakar March 24, 2012, 12:18 pm thanks for posting chmod command information Link Hal February 15, 2013, 2:12 am Hey! Thanks for the examples, I have read thousand article about chmod. Everybody writes what chmod does and Which file permission what does..Cool! But, Noone writes where I have to set those codes…To be able to change file permission exp: I will use this $ chmod u+r,g+x filename. Where do I have to add this? Thanks alot! Regards. Link Rohit July 19, 2013, 3:44 am What about “STICKY BITS” ?? Link jose August 13, 2013, 8:51 am how to fix this? the terminal says ‘no such file is in the directory’. Link ram August 19, 2013, 8:29 am i was changing file permission of a certain file named “hostname” with a file attribute of r-x r-x rx. I went to that file location since it was located in a folder directory of /bin. when I use the chmod it says “no file name” but I am already inside /bin where hostname is located. any help please! Link julijuli October 29, 2013, 9:42 am thats good Link Varun Jain December 4, 2013, 10:11 pm The beauty of Linux file security is chmod. It allow all user to different permission. Simply: Read: 4 Write: 2 Execute: 1 First character for : User Second for : Group and Third for : All For example User wants to only read file only for user then: chmod 400 easy job!! Love File Permission Link Mitch December 23, 2013, 12:15 pm Yes, simple binary. RWX 4,2,1. Any combination for owner, group, all. Here are some very common chmod examples. 755 – Can’t execute without read. So owner gets all rights and all others can execute and read. 644 – Non-executable file that the owner can write to and all others can read. 666 Read/Write by all, inherently evil. Link Karthik Srigaddhe March 20, 2014, 12:55 am Thank u so much for this info… I find it very useful for beginners Link Paul Johnson April 29, 2014, 9:38 am Shouldn’t example 3 be “$ chmod u-rw filename” instead of “$ chmod u-rx filename”? Link Terry Clancy July 10, 2014, 10:26 pm Hi SathiyaMoorthy I am trying to use ncftp to use chmod to set permssions on files and folders on a site I have hosted on a Windows Server at GoDaddy I connect OK but when I enter chmod a+rwx web.cofig I get this error chmod web.config: server said: ‘SITE’: command not understood. Any idea what the problem is ? Thanks Terry Clancy Link Minol October 18, 2014, 12:05 pm chmod sticky mod How? Link Baju koko January 30, 2015, 6:33 am how to chmod a+rx ? Link vishal February 8, 2015, 3:59 am great help But can you please explain 3rd example I think it should be chmod u – rw filename. Link semaj February 10, 2015, 8:06 pm I new to AIX, I want to change 800 files system permissions to 750, and the owner:group. How can I do this in a script, all at once? Link Javad Sadeqzadeh April 18, 2015, 8:32 am This is one of the greatest and most clear guides on permissions and the chmod command. Thank you for such a clear guide. Link Cancel reply Leave a Comment Name Email Website Comment Notify me of followup comments via e-mail Next post: Ask Yoda: What the Heck is RTFM? Previous post: Bash Brace Expansion Tutorial: 6 Examples of Expanding Expressions within Braces RSS | Email | Twitter | Facebook | Google+ EBOOKS Linux 101 Hacks Book Linux 101 Hacks 2nd Edition eBook - Practical Examples to Build a Strong Foundation in Linux Bash 101 Hacks eBook - Take Control of Your Bash Command Line and Shell Scripting Sed and Awk 101 Hacks eBook - Enhance Your UNIX / Linux Life with Sed and Awk Vim 101 Hacks eBook - Practical Examples for Becoming Fast and Productive in Vim Editor Nagios Core 3 eBook - Monitor Everything, Be Proactive, and Sleep Well POPULAR POSTS 12 Amazing and Essential Linux Books To Enrich Your Brain and Library 50 UNIX / Linux Sysadmin Tutorials 50 Most Frequently Used UNIX / Linux Commands (With Examples) How To Be Productive and Get Things Done Using GTD 30 Things To Do When you are Bored and have a Computer Linux Directory Structure (File System Structure) Explained with Examples Linux Crontab: 15 Awesome Cron Job Examples Get a Grip on the Grep! – 15 Practical Grep Command Examples Unix LS Command: 15 Practical Examples 15 Examples To Master Linux Command Line History Top 10 Open Source Bug Tracking System Vi and Vim Macro Tutorial: How To Record and Play Mommy, I found it! -- 15 Practical Linux Find Command Examples 15 Awesome Gmail Tips and Tricks 15 Awesome Google Search Tips and Tricks RAID 0, RAID 1, RAID 5, RAID 10 Explained with Diagrams Can You Top This? 15 Practical Linux Top Command Examples Top 5 Best System Monitoring Tools Top 5 Best Linux OS Distributions How To Monitor Remote Linux Host using Nagios 3.0 Awk Introduction Tutorial – 7 Awk Print Examples How to Backup Linux? 15 rsync Command Examples The Ultimate Wget Download Guide With 15 Awesome Examples Top 5 Best Linux Text Editors Packet Analyzer: 15 TCPDUMP Command Examples The Ultimate Bash Array Tutorial with 15 Examples 3 Steps to Perform SSH Login Without Password Using ssh-keygen &amp; ssh-copy-id Unix Sed Tutorial: Advanced Sed Substitution Examples UNIX / Linux: 10 Netstat Command Examples The Ultimate Guide for Creating Strong Passwords 6 Steps to Secure Your Home Wireless Network Turbocharge PuTTY with 12 Powerful Add-Ons CATEGORIES Linux Tutorials Vim Editor Sed Scripting Awk Scripting Bash Shell Scripting Nagios Monitoring OpenSSH IPTables Firewall Apache Web Server MySQL Database Perl Programming Google Tutorials Ubuntu Tutorials PostgreSQL DB Hello World Examples C Programming C++ Programming DELL Server Tutorials Oracle Database VMware Tutorials About The Geek Stuff Linux 101 Hacks Book My name is Ramesh Natarajan. I will be posting instruction guides, how-to, troubleshooting tips and tricks on Linux, database, hardware, security and web. My focus is to write articles that will either teach you or help you resolve a problem. Read more about Ramesh Natarajan and the blog. Contact Us Email Me : Use this Contact Form to get in touch me with your comments, questions or suggestions about this site. You can also simply drop me a line to say hello!. Follow us on Google+ Follow us on Twitter Become a fan on Facebook Support Us Support this blog by purchasing one of my ebooks. Bash 101 Hacks eBook Sed and Awk 101 Hacks eBook Vim 101 Hacks eBook Nagios Core 3 eBook Copyright © 2008–2015 Ramesh Natarajan. All rights reserved | Terms of Service Like Like 4847 Projectors Find Discount Learn more Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628134447#index"
                   NS1:content=" Skip to main content. Navigation: DENX &gt; U-Boot &gt; WebHome Translations: Edit | Attach | Raw | Ref-By | Printable | More Denx.de U-Boot Sections of this site: DENX Home | DULG | ELDK-5 | Know | Training | U-Boot | U-Bootdoc Topics U-Boot Home Documentation Source Code The Custodians Custodian Repositories Development Process Release Cycle Coding Style Patches Tasks Contacts Changes Index List of pages in U-Boot Search Das U-Boot -- the Universal Boot Loader Welcome to the Wiki area for cooperating on U-Boot development. TIP Note: Documentation on how to use U-Boot belongs into the DULG Manual. General Information Documentation Licensing Source Code Release Cycle and Release Schedule List of custodians and their git repositories Workflow for custodian git repositories Development Process Coding Style Patches Tasks Mailing List Mailing List Archive: http://lists.denx.de/pipermail/u-boot/ http://dir.gmane.org/gmane.comp.boot-loaders.u-boot http://marc.info/?l=u-boot Contacts Events with U-Boot presence Upcoming U-Boot Mini Summit at ELCE 2015 in Dublin U-Boot Mini Summit at ELCE 2014 in Düsseldorf OpenSource India Conference 2013 in Bangalore, India U-Boot Mini Summit at ELCE 2013 in Edinburgh Custodian specific area Information on how to use flat device trees in U-Boot Driver model conversion (in progress in 2014-16) Patch status page. This will be replaced real soon(tm) by our bug tracking system. Site Tools Show recent changes Show web index Search Revision r1.28 - 29 Feb 2016 - 04:24 - SimonGlass Diffs | r1.28 | &gt; | r1.27 | &gt; | r1.26 Copyright © 2002-2016 by DENX Software Engineering "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705162115#index"
                   NS1:content=" Navigation index next | Embedded Software Update Documentation 2016.07 documentation » Updating an embedded system¶ SWUpdate provides a reliable way to update the software on an embedded system. Sources are hosted at https://github.com/sbabic/swupdate Software Management on embedded systems Updating through the boot loader Updating through a package manager Strategies for an application doing software upgrade Something went wrong ? SWUpdate Documentation¶ SWUpdate: software update for embedded system Overview Configuration and build Running SWUpdate Changes in boot-loader code Building a single image Suricatta daemon mode Running suricatta Supporting different Servers SWUpdate: syntax and tags with the default parser Introduction hardware-compatibility partitions : UBI layout images Files Scripts uboot Board specific settings Software collections and operation modes Checking version of installed software Attribute reference Update images from verified source Signing the compound image Signing the sub-images Combining signing sw-description with hash verification Generating private and public key Signing the SWU image Example for sw-description with signed image Running SWUpdate with signed images Handlers Overview Supplied handlers Creating own handlers Handler for UBI Volumes Extend SWUpdate with handlers in LUA SWUpdate: API for external programs Overview Help and support¶ Help and support Mailing List Presentations slides Project’s road-map SWUpdate’s road-map Suricatta road-map Indices and tables¶ Index Module Index Search Page Table Of Contents Updating an embedded system SWUpdate Documentation Help and support Indices and tables Next topic Software Management on embedded systems This Page Show Source Quick search Enter search terms or a module, class or function name. Navigation index next | Embedded Software Update Documentation 2016.07 documentation » © Copyright 2013-2016, Stefano Babic. Created using Sphinx 1.2.2. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160630094820#index"
                   NS1:content=" If you are looking for a replacement that has similar features and will open OneNote files, then the answer would have to be no. OneNote reportedly works OK in Wine. You can check the WineHQ AppDB here: http://appdb.winehq.org/objectManage...ation&amp;iId=2911 For programs that have similar functionality to OneNote, try BasKet or Tomboy. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628173951#index"
                   NS1:content=" ×Finish signing up for your account Ubuntu Community Ask! Developer Design Discourse Hardware Insights Juju Shop More › Apps Help Forum Launchpad MAAS Canonical current community chat log out Ask Ubuntu Ask Ubuntu Meta your communities edit cancel Ask Ubuntu 1 reset to default list more stack exchange communities company blog Stack Exchange Inbox Reputation and Badges 1 complete sign up help Tour Start here for a quick overview of the site Help Center Detailed answers to any questions you might have Meta Discuss the workings and policies of this site About Us Learn more about Stack Overflow the company Business Learn more about hiring developers or posting ads with us Ask Ubuntu Questions Tags Users Badges Unanswered Ask Question mount: you must specify the filesystem type No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 45 down vote favorite 13 I want to mount a partition to an auxiliary folder via mount to fix a damaged grub. I used the command. sudo mount /dev/sdb2 /home/ubuntu/temp and got as error: mount: you must specify the filesystem type Why? mount share|edit edited Jul 23 '13 at 1:23 thomasrutter 15.6k43967 asked May 29 '12 at 14:50 andandandand 5194716 add a comment | 5 Answers 5 active oldest votes up vote 40 down vote accepted You need to add the -t FILESYSTEMTYPE argument to the command, replacing FILESYSTEMTYPE with your filesystem type. This specifies the filesystem type of the filesystem to be mounted. In your case, this would be /dev/sdb2. Some common, valid filesystem types are: auto - this is a special one. It will try to guess the fs type when you use this. ext4 - this is probably the most common Linux fs type of the last few years ext3 - this is the most common Linux fs type from a couple years back ntfs - this is the most common Windows fs type or larger external hard drives vfat - this is the most common fs type used for smaller external hard drives share|edit answered May 29 '12 at 15:01 reverendj1 8,6192534 6 But normally, it will guess the correct filesystem. I don't think I usually need to specify the file system type. There may be some other problem preventing it from recognizing the type in this case. – Marty Fried May 29 '12 at 16:25 Given that the OP seems to be trying to fix a damaged filesystem, it may not be detected correctly. – reverendj1 May 29 '12 at 16:44 I only see a damaged grub configuration, with a UUID that doesn't exist; but what I was gettting at is to suggest that this may not be the problem (not so much for you as for the OP). The problem may well be something like an incorrect partition specifier, but I didn't want to get too detailed because his question was not well done (note he didn't even specify the mount command at all), plus he's already started other topics on the subject, it seems. I didn't want him to be too surprised if it still didn't work. – Marty Fried May 29 '12 at 16:52 add a comment | No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 10 down vote I was getting a similar error: # mount /dev/sdb1 /mydisk/ -t auto mount: you must specify the filesystem type I tried finding out the issue and the issue was, I had partitioned it but no filesystem was assigned. # mkfs.ext3 /dev/sdb1 2&gt;/dev/null ... Superblock backups stored on blocks: ... Writing inode tables: done Creating journal (32768 blocks): done Writing superblocks and filesystem accounting information: done This filesystem will be automatically checked every 39 mounts or 180 days, whichever comes first. Use tune2fs -c or -i to override After this it successfully got mounted. share|edit edited Aug 21 '13 at 8:02 Eliah Kagan 53.6k15154246 answered Aug 21 '13 at 7:41 user185943 10112 add a comment | up vote 7 down vote There is more to the story here. Usually if you mount a partition with a common filesystem type using mount, it will auto-detect the partition type. The fact that it isn't auto-detecting it in this case could signal a few possibilities. You haven't installed filesystem tools for the chosen filesystem. If you did a standard desktop install of Ubuntu, this shouldn't normally be a problem. For example, to mount ntfs drives in recent versions of Ubuntu you need the ntfs-3g package. You selected the wrong partition. The partition is corrupt or unformatted. In this case, you should probably do a filesystem check (fsck) on it before mounting it. You may then want to proceed to mount it manually, specifying the filesystem type, as read-only. If all else fails you may need special recovery software such as testdisk photorec. share|edit edited Jun 30 '15 at 23:59 answered Jul 23 '13 at 1:29 thomasrutter 15.6k43967 Change from testdisk to photorec is because testdisk is for undeleting when the partition is healthy, or finding a lost (but healthy) partition. Photorec is for recovering some file types when the partition is corrupt and eg. can't be mounted. – thomasrutter Jul 1 '15 at 0:01 add a comment | up vote 4 down vote Please use parted -l to check the partition type and make sure you are mounting an actual data partition with known partition types (for example, ntfs, fat, etc). Here is what you would see from an 8TB drive, the first partition is not the actual data partition and instead, you should mount the second partition, which is the actual data partition. Model: TRUSTED Mass Storage (scsi) Disk /dev/sdb: 8796GB Sector size (logical/physical): 512B/512B Partition Table: gpt Number Start End Size File system Name Flags 1 17.4kB 134MB 134MB Microsoft reserved partition msftr ` es 2 134MB 8796GB 8796GB ntfs Basic data partition share|edit edited May 8 '15 at 15:38 Pabi 3,87921836 answered Jul 23 '13 at 1:14 AZhu 1411 1 @Ron If you edit posts like this, don't just indent the code, remove the ` signs aswell. – Pabi May 8 '15 at 15:40 add a comment | up vote 0 down vote You can check the filesystem type by file command: file -sL /dev/sd* The usage of -s is explained in file - Linux/Unix command and here is an excerpt: &quot;This is useful for determining the filesystem types of the data in raw disk partitions, which are block special files.&quot; Besides, I mounted successfully without specifying -t type. share|edit answered Aug 13 '15 at 11:07 Clara 1 add a comment | Your Answer Links Images Styling/Headers Lists Blockquotes Code HTML advanced help » In most cases, a plain URL will be recognized as such and automatically linked: Visit http://area51.stackexchange.com/ regularly! Use angle brackets to force linking: Have you seen &lt;http://superuser.com&gt;? To create fancier links, use Markdown: Here's [a link](http://www.example.com/)! And a reference-style link to [a panda][1]. References don't have to be [numbers][question]. [1]: http://notfound.stackexchange.com/ [question]: http://english.stackexchange.com/questions/11481 You can add tooltips to links: Click [here](http://diy.stackexchange.com &quot;this text appears when you mouse over&quot;)! This works with [reference links][blog] as well. [blog]: http://blog.stackoverflow.com/ &quot;click here for updates&quot; Images are exactly like links, but they have an exclamation point in front of them: ![a busy cat](http://sstatic.net/Sites/stackoverflow/img/error-lolcat-problemz.jpg) ![two muppets][1] [1]: http://i.imgur.com/I5DFV.jpg &quot;tooltip&quot; The word in square brackets is the alt text, which gets displayed if the browser can't show the image. Be sure to include meaningful alt text for screen-reading software. Be sure to use text styling sparingly; only where it helps readability. *This is italicized*, and so is _this_. **This is bold**, just like __this__. You can ***combine*** them if you ___really have to___. To break your text into sections, you can use headers: A Large Header ============== Smaller Subheader ----------------- Use hash marks if you need several levels of headers: # Header 1 # ## Header 2 ## ### Header 3 ### Both bulleted and numbered lists are possible: - Use a minus sign for a bullet + Or plus sign * Or an asterisk 1. Numbered lists are easy 2. Markdown keeps track of the numbers for you 7. So this will be item 3. 1. Lists in a list item: - Indented four spaces. * indented eight spaces. - Four spaces again. 2. You can have multiple paragraphs in a list items. Just be sure to indent. &gt; Create a blockquote by &gt; prepending “&gt;” to each line. &gt; &gt; Other formatting also works here, e.g. &gt; &gt; 1. Lists or &gt; 2. Headings: &gt; &gt; ## Quoted Heading ## You can even put blockquotes in blockquotes: &gt; A standard blockquote is indented &gt; &gt; A nested blockquote is indented more &gt; &gt; &gt; &gt; You can nest to any depth. To create code blocks or other preformatted text, indent by four spaces: This will be displayed in a monospaced font. The first four spaces will be stripped off, but all other whitespace will be preserved. Markdown and HTML are turned off in code blocks: &lt;i&gt;This is not italic&lt;/i&gt;, and [this is not a link](http://example.com) To create not a block, but an inline code span, use backticks: The `$` character is just a shortcut for `window.jQuery`. If you want to have a preformatted block within a list, indent by eight spaces: 1. This is normal text. 2. So is this, but now follows a code block: Skip a line and indent eight spaces. That's four spaces for the list and four to trigger the code block. If you need to do something that Markdown can't handle, use HTML. Note that we only support a very strict subset of HTML! Strikethrough humor is &lt;strike&gt;funny&lt;/strike&gt;. Markdown is smart enough not to mangle your span-level HTML: &lt;b&gt;Markdown works *fine* in here.&lt;/b&gt; Block-level HTML elements have a few restrictions: They must be separated from surrounding text by blank lines. The begin and end tags of the outermost block element must not be indented. Markdown can't be used within HTML blocks. &lt;pre&gt; You can &lt;em&gt;not&lt;/em&gt; use Markdown in here. &lt;/pre&gt; draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Email and Password Post as a guest Name Email discard Not the answer you're looking for? Browse other questions tagged mount or ask your own question. Welcome! This is a collaboratively edited question and answer site for Ubuntu users and developers. It's 100% free. Got a question about the site itself? meta is the place to talk about things like what questions are appropriate, what tags we should use, etc. about » help » meta » asked 4 years ago viewed 301021 times active 10 months ago Featured on Meta 2016 Community Moderator Election Results Hot Meta Posts 7 Should a question be reopened if another close reason now suits it better? 4 Should I answer my own question when the solution is too simple? 3 Ubuntu misspellings Should I address customs/immigration in their language when I can? No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. Linked 17 Boot error &gt; no such device: grub rescue 3 Grub rescue fails with “Boot Repair” with error “unknown file system” Related 3 Difficulty trying to mount an ISO file “mount: you must specify the filesystem type” 1 Mounting an unknown filesystem type 5 Mount on filesystem of type eCryptfs explicitly disallowed due to known incompatibilities 1 Why to explicitly mention filesystem type while mounting? 0 How do I mount my External HDD with filesystem type errors? 1 I am trying to mount a dvd, but it does not work 2 Creating an SD disk image from scratch: “you must specify a filesystem type” 0 the attempt to mount a filesystem with type ext4 failed 3 How do I remount a filesystem read/write? 1 Steam Library-Must be on a filesystem mounted with execute permissions Hot Network Questions Why man is mortal irrespective of good or bad activity? Build this formula in LaTeX Public key cryptosystems not based on number theory bfcat - encode a file as a brainf*** program VBAT circuit explanation Does the Dory-like fish actually have a short-term memory loss? Why did Qyburn use children for homicide? Would biological brain in a box considerably increase life expectancy? Can i correct a previous mistake in Fallout 4 (XB1) Folding paper into corners SQL injection is 17 years old. Why is it still around? Multiple grounds from diode bridge? Safe or really stupid/dangerous? Will it damage my MacBook if I put it in the fridge to cool it down? has seen vs have seen Simulate action of mv command Multi or Single colored rating stars How to quickly move into and from deeply nested directories through CLI? How to respond to peer review - a step by step guide to my first response? Theoretically output Graham's number How to interpret reviews that focus only on grammar mistakes but a decision of &quot;consider after major changes&quot;? How to reconcile a feudal system with a congressional/parliamentary democracy...? How to print lines between pattern1 and 2nd match of pattern2? Why can't alternators provide full amperage at idle? Dealing with NTP reflection attacks in IPTables question feed about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix &amp; Linux Ask Different (Apple) WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce ExpressionEngine® Answers more (13) Photography Science Fiction &amp; Fantasy Graphic Design Movies &amp; TV Seasoned Advice (cooking) Home Improvement Personal Finance &amp; Money Academia more (9) English Language &amp; Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow Chemistry Biology more (5) Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required rev 2016.6.27.3710 Ubuntu and Canonical are registered trademarks of Canonical Ltd. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628140329#index"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Watch 1 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 1 Star 1 Fork Where should we fork this repository? Loading 1 linneman/planck Code Issues 2 Pull requests 0 Wiki Pulse Graphs How to create a Boot SD Card for the BeagleBone black Otto Linnemann edited this page on 23 Jan · 3 revisions Pages 4 Home How to boot the BeagleBone black from an SD Card How to create a Boot SD Card for the BeagleBone black How to flash the BeagleBone's internal EMMC Flash Clone this wiki locally Clone in Desktop The most straight forward way of applying the Linux image to the BeagleBone is by booting the system up from an external SD card. Since the BeagleBone black seems to be kind of a reference platform for the YoctoProject, it provides a good instruction how to flash the image. The following instruction is widely taken from this: Table of Contents Preconditions Partition and Format the SD Card Identify SD Device File Setup Partitions on SD Card Format the Partitions Create Mount Point Directories Mount Partitions on SD Card Install the Image Data Boot Loaders Root File System Unmount the SD Card Preconditions You need a Linux host PC, a micro SD card and USB SD card reader in order to prepare the image. Most of the following commands require root priviledges so it is recommended to execute them as user root. Partition and Format the SD Card These steps need to be done only once. The SD card needs to provide two primary partitions. The first one carries the bootloader, the second one the Linux kernel and the user land file system. Identify SD Device File Before you insert the card reader equipped with the SD card where the new image is going to be installed, open up a shell on the Linux host and enter tail -f /var/log/kern.log Insert the card reader to the Linux host and observe the log output which shall be similar to this: kernel: sd 35:0:0:0: [sdb] 61497344 512-byte logical blocks: (31.4 GB/29.3 GiB) kernel: sd 35:0:0:0: [sdb] Write Protect is off ... kernel: sdb: sdb1 sdb2 That means the SD card can be accessed under /dev/sdb. In the example above the card has been already partitioned which is the reason why sdb1 and sdb2 are present as well. Nevertheless the following two steps taken from http://www.armhf.com/boards/beaglebone-black/bbb-sd-install/ explain this. Setup Partitions on SD Card Start the fdisk console application with the following command: fdisk /dev/sdX where /dev/sdX denotes the device file as indicated under point 1. Now create the a new partition table by following these steps: Initialize a new partition table by selecting o, then verify the partition table is empty by selecting p. Create a boot partition by selecting n for ‘new’, then p for ‘primary’, and 1 to specify the first partition. Press enter to accept the default first sector and specify +72261K for specifying the size in kilobytes. Change the partition type to FAT16 by selecting t for ‘type’ and c for ‘W95 FAT32 (LBA)’. Set the partition bootable by selecting a then 1. Next, create the data partition for the root filesystem by selecting n for ‘new’, then p for ‘primary’, and 2 to specify the second partition. Accept the default values for the first and last sectors by pressing enter twice. Press p to ‘print’ the partition table. It should look similar to the one below. Finally, commit the changes by selecting w to ‘write’ the partition table and exit fdisk. Disk /dev/sdb: 7948 MB, 7948206080 bytes 255 heads, 63 sectors/track, 966 cylinders, total 15523840 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk identifier: 0xafb3f87b . Device Boot Start End Blocks Id System /dev/sdb1 * 2048 146569 72261 c W95 FAT32 (LBA) /dev/sdb2 146570 15759359 7806395 83 Linux Format the Partitions Before formatting unplug and plug again the SD card respectively the USB card reader to allow the driver stack to correctly discover the filesystem partitions. Check that the SD card does still use the same device files as in the given example /dev/sdb by watching the output of tail -f /var/log/messages.Then enter the following commands to create the required filesystems: mkfs.vfat -F 16 -n &quot;boot&quot; /dev/sdb1 mke2fs -j -L &quot;root&quot; /dev/sdb2 Create Mount Point Directories In order to mount the filesystems of newly created partitions on the SD card to the filesystem on the Linux host you need to create two mount point directories. We recommend to put them under the directory mount with the following commands: mkdir /mnt/sd1 mkdir /mnt/sd2 Mount Partitions on SD Card Whenever you insert the SD card or after having successfully executed the steps above you have to mount the directories on the SD card by the following commands: mount /dev/sdb1 /mnt/sd1 mount /dev/sdb2 /mnt/sd2 In case the partitions on the SD cards contain already some data you might want to remove it first before actually applying a new or updated image: rm -rf /mnt/sd1/* rm -rf /mnt/sd2/* IN the majority of the cases you will exclusively change the Linux kernel or the content on the Linux file system image. In this case you can keep the first parition as it is and only update the content of the second one. Install the Image Data The following instructions assume that your SD card partitions can be accessed under /dev/sdb1 and /dev/sdb2 as in the example above. It is possible that the SD card uses a different device file on your system which in this case must be used instead. Refer to the first step for further details. After successfull build all image data can be found under ##project_root_folder##/build/tmp-eglibc/deploy/images/ Boot Loaders Install the boot loaders: cp MLO-beaglebone /mnt/sd1/MLO cp u-boot-beaglebone.img /mnt/sd1/u-boot.img Root File System Install the root filesystem: tar x -C /mnt/sd2 -f $IMAGE_TYPE-beaglebone.tar.gz where $IMAGE_TYPE currently denotes to ltenad2 for the standard CDC-RNDIS configuration used with the manufactures images for BeagleBone black or ltenad2-cdc-ncm for the more efficient and modified CDC-NCM drivers as used in connectivity modules based on MDM9640. Unmount the SD Card Whenever you remove the SD card from the host PC you have to unmount its partitions with the following commands: umount /mnt/sd1 umount /mnt/sd2 Status API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Contact Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160628102204#index"
                   NS1:content=" Billwaa's Blog There's just so Much to Life that the Sky is not the Limit! Search Main menu Skip to primary content Home Resume Notebooks Aerospace Arduino BeagleBone Black Cookbook Engineering Java Programming Photography Recreational Showcase About Post navigation ← Previous Next → [Beaglebone Black] File Transfer with PC using SCP Posted on October 8, 2014 by Billwaa On Windows, we can easily transfer files between the PC and the BBB through SecureShell File Transfer Client. However, in Linux, we will have to use the terminal program Secure Copy or SCP that’s built-in. Overall, the scp command for copying to a computer (aka use the to computer’s username and ip) is: 1 scp filename usename@ipaddress:/directory/ First we need to find the IP Address of the BBB and the PC, use the following command: 1 ifconfig This is the output from the BBB: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 eth0 Link encap:Ethernet HWaddr 1c:ba:8c:98:ef:4f UP BROADCAST MULTICAST MTU:1500 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B) Interrupt:40 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B) usb0 Link encap:Ethernet HWaddr c6:ca:a6:85:cf:9e inet addr:192.168.7.2 Bcast:192.168.7.3 Mask:255.255.255.252 inet6 addr: fe80::c4ca:a6ff:fe85:cf9e/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:197352 errors:0 dropped:0 overruns:0 frame:0 TX packets:359213 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:10460267 (9.9 MiB) TX bytes:56807339 (54.1 MiB) And this is the output from the PC: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 eth0 Link encap:Ethernet HWaddr ec:a8:6b:f1:ef:ea inet addr:128.180.112.46 Bcast:128.180.115.255 Mask:255.255.252.0 inet6 addr: fe80::eea8:6bff:fef1:efea/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:231823 errors:0 dropped:0 overruns:0 frame:0 TX packets:40236 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:112426350 (112.4 MB) TX bytes:8012706 (8.0 MB) Interrupt:20 Memory:f7c00000-f7c20000 eth3 Link encap:Ethernet HWaddr 1c:ba:8c:98:ef:51 inet addr:192.168.7.1 Bcast:192.168.7.3 Mask:255.255.255.252 inet6 addr: fe80::1eba:8cff:fe98:ef51/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:359261 errors:0 dropped:0 overruns:0 frame:0 TX packets:197409 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:35978849 (35.9 MB) TX bytes:21914639 (21.9 MB) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:3269 errors:0 dropped:0 overruns:0 frame:0 TX packets:3269 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:429869 (429.8 KB) TX bytes:429869 (429.8 KB) We know that the BBB is connected to the computer by a USB, so look under ubs0, the IP Address is 192.168.7.2 . In addition, the BBB’s user is debian (you can see that in the terminal, the header before you type in the command, the username is before the @ symbol. The string after is the computer name), so we got debian@192.168.7.2 . On the PC’s side, look for the address that start the same as the BBB, we got 192.168.7.1, that’s the PC’s IP Address. The PC’s username is space, so we got space@192.168.7.1 . Example I got a file LEDServer.py on the BBB’s home folder that I want to send to my PC’s home folder. I change directory to that file in the BBB and type in the following (using the BBB’s terminal): 1 scp LEDServer.py space@192.168.7.1:/home/space/ So now, let say I want to copy from PC to BBB, I just replace the username and IP with the BBB’s info and run the same command on the PC’s side. Share this: Press This Twitter Facebook Like this: Like Loading... Related [BeagleBone Black] Enable All UART Ports at BootIn &quot;BeagleBone Black&quot; [Beaglebone Black] Enable On-Board Serial UARTIn &quot;BeagleBone Black&quot; [BeagleBone Black] Boot Debian OS from ImageIn &quot;BeagleBone Black&quot; This entry was posted in BeagleBone Black and tagged Address, BBB, BeagleBone, Black, Copy, file, IP, SCP, Secure, Transfer, username by Billwaa. Bookmark the permalink. Leave a Reply Cancel reply Fill in your details below or click an icon to log in: Gravatar Email (required) (Address never made public) Name (required) Website Gravatar kinyarwandablog: You are commenting using your WordPress.com account. ( Log Out / Change ) Twitter picture You are commenting using your Twitter account. ( Log Out / Change ) Facebook photo You are commenting using your Facebook account. ( Log Out / Change ) Google+ photo You are commenting using your Google+ account. ( Log Out / Change ) Cancel Connecting to %s Notify me of new comments via email. Notify me of new posts via email. The Twenty Eleven Theme. | Create a free website or blog at WordPress.com. Post to Cancel Follow New posts from this site will now appear in your Reader Billwaa's Blog Customize Follow Get theme: Twenty Eleven Copy shortlink Report this content View Site in the Reader Manage Sites I Follow Collapse this bar %d bloggers like this: Skip to toolbar My Site kinyarwandablogkinyarwandablog.wordpress.com + Add New WordPress Stats Stats PlanFree Publish Blog PostsAdd PagesAdd Personalize ThemesCustomize Menus Configure Sharing PeopleAdd DomainsAdd Settings Reader Streams Followed SitesManage Discover Recommendations My Likes Notifications Me kinyarwandablog@kinyarwandablog Sign Out Profile My Profile Account Settings Billing History Security Notifications Special Get Apps Next Steps Help Log Out :) Like Reblog Like Shirish Kadam One blogger likes this. All Unread Comments Follows Likes  Older than 2 days  Your stats are booming! kinyarwandablog is getting lots of traffic. Older than a week  You've made 5 posts on kinyarwandablog. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160712163439#index"
                   NS1:content=" Arduino userpicture Home Buy Download Products Back Arduino (USA only) Genuino (outside USA) AtHeart Certified Learning Back Getting started Tutorials Reference CTC Program Playground Forum Support Back FAQ Contact Us Blog LOG IN SIGN UP Reference Language | Libraries | Comparison | Changes analogReference() Description Configures the reference voltage used for analog input (i.e. the value used as the top of the input range). The options are: DEFAULT: the default analog reference of 5 volts (on 5V Arduino boards) or 3.3 volts (on 3.3V Arduino boards) INTERNAL: an built-in reference, equal to 1.1 volts on the ATmega168 or ATmega328 and 2.56 volts on the ATmega8 (not available on the Arduino Mega) INTERNAL1V1: a built-in 1.1V reference (Arduino Mega only) INTERNAL2V56: a built-in 2.56V reference (Arduino Mega only) EXTERNAL: the voltage applied to the AREF pin (0 to 5V only) is used as the reference. Syntax analogReference(type) Parameters type: which type of reference to use (DEFAULT, INTERNAL, INTERNAL1V1, INTERNAL2V56, or EXTERNAL). Returns None. Note After changing the analog reference, the first few readings from analogRead() may not be accurate. Warning Don't use anything less than 0V or more than 5V for external reference voltage on the AREF pin! If you're using an external reference on the AREF pin, you must set the analog reference to EXTERNAL before calling analogRead(). Otherwise, you will short together the active reference voltage (internally generated) and the AREF pin, possibly damaging the microcontroller on your Arduino board. Alternatively, you can connect the external reference voltage to the AREF pin through a 5K resistor, allowing you to switch between external and internal reference voltages. Note that the resistor will alter the voltage that gets used as the reference because there is an internal 32K resistor on the AREF pin. The two act as a voltage divider, so, for example, 2.5V applied through the resistor will yield 2.5 * 32 / (32 + 5) = ~2.2V at the AREF pin. See also Description of the analog input pins analogRead() Reference Home Corrections, suggestions, and new documentation should be posted to the Forum. The text of the Arduino reference is licensed under a Creative Commons Attribution-ShareAlike 3.0 License. Code samples in the reference are released into the public domain. Share This link has expired. Please re-subscribe to our Newsletters. Subscribe to our Newsletters Email Please enter a valid email to subscribe Arduino Newsletter Arduino Store Newsletter Newsletter Italiana Cancel Next Confirm your email address We need to confirm your email address. To complete the subscription, please click the link in the email we just sent you. Thank you for subscribing! Arduino via Egeo 16 Torino, 10131 Italy Ok Newsletter ©2016 Arduino Copyright Notice Contact us About us Careers Pin it « 5K+ 4 Sorry, there was a problem loading Checkout. If this persists, please try a different browser. This message will automatically close in 5 seconds. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. Tweet Like7 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160705093313#index"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Watch 17 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 31 Star 31 Fork Where should we fork this repository? Loading 17 ungureanuvladvictor/BBBlfs Code Issues 3 Pull requests 0 Wiki Pulse Graphs Flash your BeagleBone Black via USB http://ungureanuvladvictor.github.io/BBBlfs/ 165 commits 6 branches 1 release 6 contributors C 76.0% Shell 23.3% Makefile 0.7% C Shell Makefile Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Create new file Upload files Find file Branch: master Switch branches/tags Branches Tags beagleboot gh-pages master osx windows-partial windows Nothing to show v0.1 Nothing to show New pull request Latest commit 2519fcb on 9 Mar @ungureanuvladvictor ungureanuvladvictor Merge pull request #24 from silvawp/master … main: fix a memory leak. Permalink Failed to load latest commit information. bin Do resize even if debian image is used 2 years ago include Removed autoconf req. a year ago src main: fix a memory leak. 4 months ago tools Removed unused files. a year ago .gitignore Ignoring compiler. a year ago .travis.yml Added .travis.yml for CI. a year ago Makefile.am Fixed rule for README.md. a year ago README.md Update README.md with the automake dependency 4 months ago autogen.sh Moved to autotools. a year ago compile_tools.sh Moved tools/fit.sh tools/uboot.sh into a single file. a year ago configure.ac Removed autoconf req. a year ago README.md BBBlfs Build Status Beagle Bone Black Linux Flash System This project provides a way to flash a BeagleBone Black via USB from a Linux machine. The project was developed during Google Summer of Code '13. Build sudo apt-get install libusb-1.0-0-dev automake ./autogen.sh ./configure make Usage Press the S2 button on the BeagleBone Black and apply power to the board. The board should start now into USB boot mode. Connect the board to the host PC. The kernel should now identify your board as an RNDIS interface. Be sure you do not have any BOOTP servers on your network. Go to bin/ and execute flash_script.sh It needs the flashing image as argument to be provided. For now only .xz compressed images are supported. sudo ./flash_script.sh [ debian | ubuntu | image.xz ] debian and ubuntu will use tarball from armhf.com website If there are bugs please feel free to contact me. How to build the binary blobs The full system works as follow: The AM335x ROM when in USB boot mode exposes a RNDIS interface to the PC and waits to TFTP a binary blob that it executes. That binary blob is the SPL Once the SPL runs it applies the same proceure as the ROM and TFTPs U-Boot Again U-Boot applies the same thinking and TFTPs a FIT(flatten image tree) which includes a Kernel, Ramdisk and the DTB U-Boot runs this FIT and boots the Kernel When the kernel starts the init script exports the eMMC using the g_mass_storage kernel module as an USB stick to the Linux so it can be flashed Building U-Boot for USB booting Grab the latest U-Boot sources from git://git.denx.de/u-boot.git Checkout commit id 524123a70761110c5cf3ccc5f52f6d4da071b959 Install your favourite cross-compiler, I am using arm-linux-gnueabihf- Apply this patch to U-Boot sources https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/USB_FLash.patch make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- am335x_evm_usbspl_config make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- Now you have u-boot.img which is the uboot binary and spl/u-boot-spl.bin which is the spl binary Building the Kernel Grab the latest from https://github.com/beagleboard/kernel git checkout 3.14 ./patch.sh cp configs/beaglebone kernel/arch/arm/configs/beaglebone_defconfig wget http://arago-project.org/git/projects/?p=am33x-cm3.git\;a=blob_plain\;f=bin/am335x-pm-firmware.bin\;hb=HEAD -O kernel/firmware/am335x-pm-firmware.bin cd kernel make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- beaglebone_defconfig -j4 make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- zImage dtbs modules -j4 After compilation you have in arch/arm/boot/ the zImage Building the ramdisk Our initramfs will be built around BusyBox. First we create the basic folder structure. mkdir initramfs mkdir -p initramfs/{bin,sbin,etc,proc,sys} cd initramfs wget -O init https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/init chmod +x init Now we need to cross-compile BusyBox for our ARM architecture git clone git://git.busybox.net/busybox cd busybox make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- defconfig make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig Now here we need to compile busybox as a static binary: Busybox Settings --&gt; Build Options --&gt; Build Busybox as a static binary (no shared libs) - Enable this option by pressing &quot;Y&quot; make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j4 make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- install CONFIG_PREFIX=/path/to/initramfs Now we need to install the kernel modules in our initramfs cd /path/to/kernel/sources make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- modules_install INSTALL_MOD_PATH=/path/to/initramfs Packing things up Now we need to put our initramfs in a .gz archive that the kernel knows how to process mkdir maker cd /path/to/initramfs find . | cpio -H newc -o &gt; ../initramfs.cpio cd .. &amp;&amp; cat initramfs.cpio | gzip &gt; initramfs.gz mv initramfs.gz /path/to/maker/folder/ramdisk.cpio.gz Now we need to pack all things in a FIT image. In order to do so we need some additional packages installed, namely the mkimage and dtc compiler. sudo apt-get update sudo apt-get install u-boot-tools device-tree-compiler cd /path/to/maker/folder wget -O maker.its https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/maker.its cp /path/to/kernel/arch/arm/boot/zImage . cp /path/to/kernel/arch/arm/boot/dts/am335x-boneblack.dtb . mkimage -f maker.its FIT At this point we have all things put into place. You need to copy the binary blobs in the bin/ folder and run flash_script.sh Contact vvu@vdev.ro vvu on #beagle, #beagle-gsoc Status API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Contact Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160808152013#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Ansible Logo Documentation ANSIBLE Introduction Installation Getting Started Inventory Dynamic Inventory Patterns Introduction To Ad-Hoc Commands Configuration file BSD Support Windows Support Networking Support Quickstart Video Playbooks Intro to Playbooks Playbook Roles and Include Statements Variables Jinja2 filters Jinja2 tests Conditionals Loops Blocks Strategies Best Practices Playbooks: Special Topics Become (Privilege Escalation) Accelerated Mode Asynchronous Actions and Polling Check Mode (“Dry Run”) Playbook Debugger Delegation, Rolling Updates, and Local Actions Setting the Environment (and Working With Proxies) Error Handling In Playbooks Advanced Syntax Using Lookups Prompts Tags Vault Start and Step Directives Glossary About Modules Introduction Core Modules Extras Modules Common Return Values Module Index All Modules Bmc Modules Cloud Modules Clustering Modules Commands Modules Database Modules Files Modules Inventory Modules Messaging Modules Monitoring Modules Network Modules Notification Modules Packaging Modules Source Control Modules System Modules Utilities Modules Web Infrastructure Modules Windows Modules Detailed Guides Amazon Web Services Guide Getting Started with Azure Rackspace Cloud Guide Google Cloud Platform Guide CloudStack Cloud Guide Using Vagrant and Ansible Continuous Delivery and Rolling Upgrades Getting Started with Docker Developer Information Python API Developing Dynamic Inventory Sources Developing Modules Developing Plugins Developing the Ansible Core Engine Helping Testing PRs Releases Ansible Tower Community Information &amp; Contributing Ansible Users For Current and Prospective Developers Other Topics Community Code of Conduct Contributors License Agreement Ansible Galaxy The Website The ansible-galaxy command line tool Testing Strategies Integrating Testing With Ansible Playbooks The Right Level of Testing Check Mode As A Drift Test Modules That Are Useful for Testing Testing Lifecycle Integrating Testing With Rolling Updates Achieving Continuous Deployment Conclusion Frequently Asked Questions How can I set the PATH or any other environment variable for a task or entire playbook? How do I handle different machines needing different user accounts or ports to log in with? How do I get ansible to reuse connections, enable Kerberized SSH, or have Ansible pay attention to my local SSH config file? How do I configure a jump host to access servers that I have no direct access to? How do I speed up management inside EC2? How do I handle python pathing not having a Python 2.X in /usr/bin/python on a remote machine? What is the best way to make content reusable/redistributable? Where does the configuration file live and what can I configure in it? How do I disable cowsay? How do I see a list of all of the ansible_ variables? How do I see all the inventory vars defined for my host? How do I loop over a list of hosts in a group, inside of a template? How do I access a variable name programmatically? How do I access a variable of the first host in a group? How do I copy files recursively onto a target host? How do I access shell environment variables? How do I generate crypted passwords for the user module? Can I get training on Ansible or find commercial support? Is there a web interface / REST API / etc? How do I submit a change to the documentation? How do I keep secret data in my playbook? When should I use {{ }}? Also, how to interpolate variables or dynamic variable names I don’t see my question here Glossary YAML Syntax YAML Basics Gotchas Porting Guide Playbook Deprecated Other caveats Porting plugins Lookup plugins Connection plugins Action plugins Callback plugins Connection plugins Hybrid plugins Lookup plugins Connection plugins Action plugins Callback plugins Connection plugins Porting custom scripts Ansible Documentation Docs » Start and Step Edit on GitHub Start and Step¶ This shows a few alternative ways to run playbooks. These modes are very useful for testing new plays or debugging. Start-at-task¶ If you want to start executing your playbook at a particular task, you can do so with the --start-at-task option: ansible-playbook playbook.yml --start-at-task=&quot;install packages&quot; The above will start executing your playbook at a task named “install packages”. Step¶ Playbooks can also be executed interactively with --step: ansible-playbook playbook.yml --step This will cause ansible to stop on each task, and ask if it should execute that task. Say you had a task called “configure ssh”, the playbook run will stop and ask: Perform task: configure ssh (y/n/c): Answering “y” will execute the task, answering “n” will skip the task, and answering “c” will continue executing all the remaining tasks without asking. Next Previous Copyright © 2016 Red Hat, Inc. Last updated on Aug 05, 2016. Ansible docs are generated from GitHub sources using Sphinx using a theme provided by Read the Docs. Close suggested results Search this site " />
  <RDF:Description RDF:about="urn:scrapbook:item20160624161032#index"
                   NS1:content=" Ubuntu Community Ask! Developer Design Discourse Hardware Insights Juju Shop More › Apps Help Forum Launchpad MAAS Canonical current community chat Ask Ubuntu Ask Ubuntu Meta your communities Sign up or log in to customize your list. more stack exchange communities company blog Stack Exchange Inbox Reputation and Badges sign up log in tour help Tour Start here for a quick overview of the site Help Center Detailed answers to any questions you might have Meta Discuss the workings and policies of this site About Us Learn more about Stack Overflow the company Business Learn more about hiring developers or posting ads with us Ask Ubuntu Questions Tags Users Badges Unanswered Ask Question _ Ask Ubuntu is a question and answer site for Ubuntu users and developers. It's 100% free. Sign up Here's how it works: Anybody can ask a question Anybody can answer The best answers are voted up and rise to the top ubuntu 13.04 recognizes usb mobile broadband modem as ethernet connection No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 1 down vote favorite When I plug in my USB mobile broadband modem (ZTE MF-667), in the network manager instead of a mobile broadband connection, I get an Ethernet connection, called: Ethernet Network (ZTE WCDMA Technologies MSM), which of course doesn't work. Here is my lsusb output and the relevant parts of dmesg output: lsusb: Bus 001 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub Bus 002 Device 002: ID 8087:0024 Intel Corp. Integrated Rate Matching Hub Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 003: ID 0cf3:3005 Atheros Communications, Inc. AR3011 Bluetooth Bus 001 Device 004: ID 04f2:b1b9 Chicony Electronics Co., Ltd Asus Integrated Webcam Bus 001 Device 005: ID 058f:6366 Alcor Micro Corp. Multi Flash Reader Bus 002 Device 004: ID 19d2:1405 ZTE WCDMA Technologies MSM dmesg: [ 195.328467] usb 2-1.1: new high-speed USB device number 3 using ehci-pci [ 195.423545] usb 2-1.1: New USB device found, idVendor=19d2, idProduct=1225 [ 195.423555] usb 2-1.1: New USB device strings: Mfr=3, Product=2, SerialNumber=4 [ 195.423561] usb 2-1.1: Product: ZTE WCDMA Technologies MSM [ 195.423567] usb 2-1.1: Manufacturer: ZTE,Incorporated [ 195.423572] usb 2-1.1: SerialNumber: P680A1ZTED000000 [ 195.426319] scsi7 : usb-storage 2-1.1:1.0 [ 196.425354] scsi 7:0:0:0: CD-ROM CWID USB SCSI CD-ROM 2.31 PQ: 0 ANSI: 2 [ 197.447919] usb 2-1.1: USB disconnect, device number 3 [ 197.457582] sr0: scsi3-mmc drive: 243x/186x xa/form2 cdda pop-up [ 197.457594] cdrom: Uniform CD-ROM driver Revision: 3.20 [ 197.459058] sr 7:0:0:0: Attached scsi CD-ROM sr0 [ 197.459483] sr 7:0:0:0: Attached scsi generic sg2 type 5 [ 197.759186] usb 2-1.1: new high-speed USB device number 4 using ehci-pci [ 197.854543] usb 2-1.1: New USB device found, idVendor=19d2, idProduct=1405 [ 197.854556] usb 2-1.1: New USB device strings: Mfr=4, Product=3, SerialNumber=5 [ 197.854564] usb 2-1.1: Product: ZTE WCDMA Technologies MSM [ 197.854572] usb 2-1.1: Manufacturer: ZTE,Incorporated [ 197.854579] usb 2-1.1: SerialNumber: P680A1ZTED010000 [ 197.957739] scsi8 : usb-storage 2-1.1:1.2 [ 198.076554] cdc_ether 2-1.1:1.0 eth1: register 'cdc_ether' at usb-0000:00:1d.0-1.1, CDC Ethernet Device, 00:a0:c6:00:00:00 [ 198.076583] usbcore: registered new interface driver cdc_ether [ 198.955985] scsi 8:0:0:0: CD-ROM CWID USB SCSI CD-ROM 2.31 PQ: 0 ANSI: 2 [ 198.956797] scsi 8:0:0:1: Direct-Access ZTE MMC Storage 2.31 PQ: 0 ANSI: 2 I created the appropriate mobile broadband connection manually, but I cannot enable it in network manager, since the device is not recognized as mobile broadband. Any tips how to make it work? network-manager usb-modem mobile-broadband share|improve this question edited Oct 28 '13 at 16:22 Mitch♦ 61k11121177 asked Oct 28 '13 at 15:23 Bence Mihalka 613 First install ZTE linux modem drivers. – Avinash Raj Nov 19 '13 at 12:26 add a comment | 2 Answers 2 active oldest votes up vote 1 down vote Yes! This is one of the problems I have been facing and here is a possible solution. Looking at your lsusb output, I find the following: Bus 002 Device 004: ID 19d2:1405 ZTE WCDMA Technologies MSM This indicates that the Vendor ID is 0x19d2 and the Product ID is 0x1405. I would advise you the following steps: (1) Create a bash script as follows. This bash script is to be run, everytime you would like to use your mobile modem CDMA connection. Let us suppose that the name of the bash script is `myModem.sh. Do this by typing: sudo nano ~/myModem.sh Type in the following lines here: #!/bin/bash sudo /sbin/modprobe usbserial vendor=0x19d2 product=0x1405 Save your script and exit from nano. Type: sudo chmod +x ~/myModem.sh (2) Run the following commands: sudo apt-get update sudo apt-get upgrade sudo apt-get install wvdial sudo apt-get install usb-modeswitch usb-modeswitch-data (4) Type the following: sudo nano /etc/udev/rules.d/90-zte.rules and type in the following line (it is a single line and no carriage returns please): SUBSYSTEM==&quot;block&quot;,SUBSYSTEM==&quot;scsi&quot;,ATTRS{model}==&quot;USB Storage 1405&quot;,ACTION==&quot;add&quot;,RUN+=&quot;/sbin/modprobe usbserial vendor=0x19d2 product=0x1405&quot; Save the file and exit from nano. (5) Now run your bash script from your home directory: sudo ~/myModem.sh (6) Now we have to configure wvdial. sudo wvdialconf /etc/wvdial.conf This will detect the modem and create a configuration file. (7) Edit the configuration file to adjust the setting according to your country/service provider. Especially change the dialing phone number, username and password. Do this by typing sudo nano /etc/wvdial.conf Remove the semicolons before the phone, username and password. The semicolons tell wvdial that these lines are commented. Save your file and exit from nano. (8) Now create your connection. Make sure you check the Connect Automatically option. I hope this will set your modem working. share|improve this answer edited Nov 19 '13 at 14:25 community wiki 2 revs Indian I tried this method, but couldn't get my modem to work. At the 6th step, i got the following output: Scanning your serial ports for a modem. Modem Port Scan&lt;*1&gt;: S0 S1 S2 S3 S4 S5 S6 S7 Modem Port Scan&lt;*1&gt;: S8 S9 S10 S11 S12 S13 S14 S15 Modem Port Scan&lt;*1&gt;: S16 S17 S18 S19 S20 S21 S22 S23 Modem Port Scan&lt;*1&gt;: S24 S25 S26 S27 S28 S29 S30 S31 Sorry, no modem was detected! Is it in use by another program? Did you configure it properly with setserial? How should I configure it with setserial so the port scan finds the device? – Bence Mihalka Nov 25 '13 at 12:45 add a comment | No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. up vote 1 down vote I had the same problem with ubuntu 13.10 detecting ZTE MF667 as ethernet connection. The solution posted here didn't work for me, as wvdial was not able to detect it as a modem - which makes perfect sense, because it is an ethernet device. After trying different solutions, I stumbled upon this: http://www.draisberghof.de/usb_modeswitch/bb/viewtopic.php?f=3&amp;t=1662 And finally I understood, that there is no problem with usb-modeswitch or anything! You don't need to configure your connection in the ethernet settings at all. As I use it with an O2 sim card, I just connect to the ZTE ethernet connection, open my browser and go to &quot;o2surf.stick&quot; (this might be similar for your provider). I found this when I tried to run the setup.exe provided on the ZTE in Wine. There I can enter the PIN (can be disabled in the settings later) and connect to the mobile network. After that everything works fine :) The interface provided by o2 reminds me of our wlan router config. You can see there your connection duration and the data volume used. Sorry, if my English is somewhat awkward... I hope, this might help some people. share|improve this answer answered Nov 28 '13 at 10:48 Tinkerbell 111 On the Telstra 3G USB+WiFi version of this, the configuration settings page is at m.home – tudor Apr 22 '14 at 2:12 add a comment | Your Answer draft saved draft discarded Sign up or log in Sign up using Google Sign up using Facebook Sign up using Email and Password Post as a guest Name Email discard By posting your answer, you agree to the privacy policy and terms of service. Not the answer you're looking for? Browse other questions tagged network-manager usb-modem mobile-broadband or ask your own question. asked 2 years ago viewed 7964 times active 2 years ago hinduism.stackexchange.com Why Lord Chaitanya leaves his incarnation in Puri dham? – Gopal Biswas 1 answer mythology vishnu krishna narayana chaitanya No problem. We won't show you that ad again. Why didn't you like it? Uninteresting Misleading Offensive Repetitive Other Oops! I didn't mean to do this. Linked 5 Why Network Manager Can't Detect My ZTE USB 3G Modem! Related 2 How to activate mobile broadband automatically once a broadband modem is active? 2 No “ENABLE BROADBAND” option in network settings of ubuntu 12.10 -1 3G modem on Ubuntu 14.04 0 How to configure iBall airway 3G usb modem in Ubuntu 14.04 0 Cannot connect to mobile broadband Ubuntu 15.04 12 'ip-config-unavailable' error when USB modem tries to connect 0 Launch mobile broadband assistant from cli 0 Lenovo ThinkPad R61 on Ubuntu 15.10: Mobile broadband USB stick needs annoying number of trials until it eventually connects 0 LTE network connection with USB stick 1 USB Modem Stopped Working Ubuntu 15.10 Hot Network Questions Cannot upload .mpg file to SP2013 Asset Library Codes, How fun?! ^_^ Is there any effect on mechanical waves by electromagnetic waves (and vise versa)? javascript a.x=a={n: b} how is this part work? Automatic transaction on credit card to stay active Salad packaged with raw meat: is it safe? Mysterious behaviour of Pick Is there a reason Hillary Clinton's logo has hidden notches? Convert YYYYMM to MMMYY Can a Morse function define a unique structure on a closed manifold? Does the chance of rolling a 1 in a pool of d10s increase as the number of dice increases? I proved a theorem I heard from another person. What can I do with it? What are the immediate impacts of the UK leaving the EU? Bytes/Character Why did Ramsay strike him? Can you hide your face from a facehugger? Who are these guys? Gravitational force when standing on an infinite disc Rube Goldberg Hello World Found at an Estate sale How did the word &quot;Bazinga&quot; originate? One of my players is trying to cast a spell that isn't in the handbook, and he hasn't told me how his character knows it How to counter a team of multiple Torbjörns? Algebraic multiplicity = geometric multiplicity? question feed about us tour help blog chat data legal privacy policy work here advertising info mobile contact us feedback Technology Life / Arts Culture / Recreation Science Other Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix &amp; Linux Ask Different (Apple) WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce ExpressionEngine® Answers more (13) Photography Science Fiction &amp; Fantasy Graphic Design Movies &amp; TV Seasoned Advice (cooking) Home Improvement Personal Finance &amp; Money Academia more (9) English Language &amp; Usage Skeptics Mi Yodeya (Judaism) Travel Christianity Arqade (gaming) Bicycles Role-playing Games more (21) Mathematics Cross Validated (stats) Theoretical Computer Science Physics MathOverflow Chemistry Biology more (5) Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design / logo © 2016 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required rev 2016.6.23.3704 Ubuntu and Canonical are registered trademarks of Canonical Ltd. Advertisement "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160623111552#index"
                   NS1:content=" Partners Support Community Ubuntu.com Ubuntu Documentation Official Documentation Community Help Wiki Contribute Page History Login to edit AptGet/Howto Contents Package management with APT Introduction to APT Commands Installation commands auto-apt Maintenance commands Removal commands Search commands Typical usage example Setting up apt-get to use a http-proxy Temporary proxy session APT configuration file method BASH rc method How to login a proxy user Useful additional packages See also Additional links Troubleshooting apt-get or aptitude or Synaptic package manager errors (i) This article applies to all supported versions of Ubuntu Package management with APT IconsPage/apt.png Package management via apt-get runs hand-in-hand with the /etc/apt/sources.list file. For information on editing or updating your sources list see SourcesList. Introduction to APT &quot;In the beginning there was the .tar.gz. Users had to compile each program that they wanted to use on their GNU/Linux systems. When Debian was created, it was deemed necessary that the system include a method of managing the packages installed on the machine. The name dpkg was given to this system. Thus the famous 'package' first came into being on GNU/Linux, a while before Red Hat decided to create their own 'rpm' system. A new dilemma quickly took hold of the minds of the makers of GNU/Linux. They needed a rapid, practical, and efficient way to install packages that would manage dependencies automatically and take care of their configuration files while upgrading. Here again, Debian led the way and gave birth to APT, the Advanced Packaging Tool, which has since been ported by Conectiva for use with rpm and has been adopted by some other distributions.&quot; -- From Debian APT HOWTO Commands IconsPage/info.png All these commands except the search commands must be run as root or with superuser privileges, see sudo for more information. IconsPage/example.png sudo apt-get install ubuntu-desktop Installation commands apt-get install &lt;package_name&gt; This command installs a new package. apt-get build-dep &lt;package_name&gt; This command searches the repositories and installs the build dependencies for &lt;package_name&gt;. If the package is not in the repositories it will return an error. aptitude install &lt;package_name&gt; Aptitude is an Ncurses viewer of packages installed or available. Aptitude can be used from the command line in a similar way to apt-get. See man aptitude for more information. APT and aptitude will accept multiple package names as a space delimited list. For example: apt-get install &lt;package1_name&gt; &lt;package2_name&gt; &lt;package3_name&gt; IconsPage/note.png Use the -s flag to simulate an action.&quot;sudo apt-get -s install &lt;package_name&gt;&quot; will simulate installing the package showing you what packages will be installed and configured. auto-apt auto-apt run &lt;command_string&gt; When invoked, the auto-apt command automatically installs packages upon missing file access. If a program tries to access a file known to belong in an uninstalled package, auto-apt will install that package using apt-get. This feature requires apt and sudo to work. Auto-apt keeps databases which need to be kept up-to-date in order for it to be effective. This is achieved by calling the commands auto-apt update, auto-apt updatedb and auto-apt update-local. Usage example IconsPage/example.png You're compiling a program and, all of a sudden, there's an error because it needs a file you don't have. The program auto-apt asks you to install packages if they're needed, stopping the relevant process and continuing once the package is installed. # auto-apt run ./configure It will then ask to install the needed packages and call apt-get automatically. If you're running X, a graphical interface will replace the default text interface. Maintenance commands apt-get update Run this command after changing /etc/apt/sources.list or /etc/apt/preferences . For information regarding /etc/apt/preferences, see PinningHowto. Run this command periodically to make sure your source list is up-to-date. This is the equivalent of &quot;Reload&quot; in Synaptic or &quot;Fetch updates&quot; in Adept. apt-get upgrade This command upgrades all installed packages. This is the equivalent of &quot;Mark all upgrades&quot; in Synaptic. apt-get dist-upgrade The same as the above, except add the &quot;smart upgrade&quot; checkbox. It tells APT to use &quot;smart&quot; conflict resolution system, and it will attempt to upgrade the most important packages at the expense of less important ones if necessary. IconsPage/note.png &quot;apt-get dist-upgrade&quot; does not upgrade from a previous version of Ubuntu. For more information of upgrading from a previous version of Ubuntu see http://www.ubuntu.com/getubuntu/upgrading . apt-get check This command is a diagnostic tool. It does an update of the package lists and checks for broken dependencies. apt-get -f install This command does the same thing as Edit-&gt;Fix Broken Packages in Synaptic. Do this if you get complaints about packages with &quot;unmet dependencies&quot;. apt-get autoclean This command removes .deb files for packages that are no longer installed on your system. Depending on your installation habits, removing these files from /var/cache/apt/archives may regain a significant amount of diskspace. apt-get clean The same as above, except it removes all packages from the package cache. This may not be desirable if you have a slow Internet connection, since it will cause you to redownload any packages you need to install a program. The package cache is in /var/cache/apt/archives . The command du -sh /var/cache/apt/archives will tell you how much space cached packages are consuming. dpkg-reconfigure &lt;package_name&gt; Reconfigure the named package. With many packages, you’ll be prompted with some configuration questions you may not have known were there. IconsPage/example.png For example: dpkg-reconfigure fontconfig-config will present you with a &quot;wizard&quot; on configuring fonts in Ubuntu. echo &quot;&lt;package_name&gt; hold&quot; | dpkg --set-selections This command places the desired package on hold. TODO: Bug #42178: This is the same as Synaptic's Package-&gt;Lock Version. */ IconsPage/info.png This command may have the unintended side effect of preventing upgrades to packages that depend on updated versions of the pinned package. apt-get dist-upgrade will override this, but will warn you first. If you want to use this command with sudo, you need to use echo &quot;&lt;package_name&gt; hold&quot; | sudo dpkg --set-selections not sudo echo &quot;&lt;package_name&gt; hold&quot; | dpkg --set-selections. echo &quot;&lt;package_name&gt; install&quot; | dpkg --set-selections This command removes the &quot;hold&quot; or &quot;locked package&quot; state set by the above command. The note above about sudo usage applies to this command. Removal commands apt-get remove &lt;package_name&gt; This command removes an installed package, leaving configuration files intact. apt-get purge &lt;package_name&gt; This command completely removes a package and the associated configuration files. Configuration files residing in ~ are not usually affected by this command. + operator IconsPage/example.png If you want to remove package1 and install package2 in one step: apt-get remove &lt;package1&gt; &lt;package2&gt;+ . apt-get autoremove This command removes packages that were installed by other packages and are no longer needed. apt-get autoremove &lt;package_name&gt; This command removes an installed package and dependencies. While there is no built in way to remove all of your configuration information from your removed packages you can remove all configuration data from every removed package with the following command. dpkg -l | grep '^rc' | awk '{print $2}' | xargs dpkg --purge Search commands apt-cache search &lt;search_term&gt; This command will find packages that include &lt;search_term&gt;. dpkg -l *&lt;search_term&gt;* This will find packages whose names contain &lt;search_term&gt;. Similar to apt-cache search, but also shows whether a package is installed on your system by marking it with ii (installed) and un (not installed). apt-cache show &lt;package_name&gt; This command shows the description of package &lt;package_name&gt; and other relevant information including version, size, dependencies and conflicts. dpkg --print-avail &lt;package_name&gt; This command is similar to &quot;apt-cache show&quot;. dpkg -L &lt;package_name&gt; This command will list files in package &lt;package_name&gt;. dpkg -c foo.deb This command lists files in the package &quot;foo.deb&quot;. Note that foo.deb is a pathname. Use this command on .deb packages that you have manually downloaded. dlocate &lt;package_name&gt; This command determines which installed package owns &lt;package_name&gt;. It shows files from installed packages that match &lt;package_name&gt;, with the name of the package they came from. Consider this to be a &quot;reverse lookup&quot; utility. IconsPage/info.png In order to use this command, the package dlocate must be installed on your system. dpkg -S &lt;filename_search_pattern&gt; This command does the same as dlocate, but does not require the installation of any additional packages. It is slower than dlocate but has the advantage of being installed by default on all Debian and Ubuntu systems. apt-file search &lt;filename_search_pattern&gt; This command acts like dlocate and dpkg -S, but searches all available packages. It answers the question, &quot;what package provides this file?&quot;. apt-file needs to be updated regularly like apt-get. Use the command: apt-file update IconsPage/info.png In order to use this command, the package apt-file must be installed on your system. apt-cache pkgnames This command provides a listing of every package in the system A general note on searching: If searching generates a list that is too long, you can filter your results by piping them through the command grep. Examples: apt-cache search &lt;filename&gt; | grep -w &lt;filename&gt; will show only the files that contain &lt;filename&gt; as a whole word dpkg -L package | grep /usr/bin will list files located in the directory /usr/bin, useful if you're looking for a particular executable. For more information on apt-get, apt-cache and dpkg consult their manual pages by using the man command. These manuals will provide a wider scope of information in addition to all of the options that you can use with each program. IconsPage/example.png Example: man apt-get . Typical usage example I want to feel the wind in my hair, I want the adrenaline of speed. So let's install a racing game. But what racing games are available? apt-cache search racing game It gives me a lot of answers. I see a game named &quot;torcs&quot;. Let's get some more information on this game. apt-cache show torcs Hmmm... it seems interesting. But is this game not already installed on my computer? And what is the available version? Which repository is it from (Universe or Main)? apt-cache policy torcs Ok, so now, let's install it! apt-get install torcs What is the command I must type in the console to launch this game? In this example, it's straightforward (&quot;torcs&quot;), but that's not always the case. One way of finding the name of the binary is to look at what files the package has installed in &quot;/usr/bin&quot;. For games, the binary will be in &quot;/usr/games&quot;. For administrative programs, it's in &quot;/usr/sbin&quot;. dpkg -L torcs | grep /usr/games/ The first part of the command display all files installed by the package &quot;torcs&quot; (try it). With the second part, we ask to only display lines containing &quot;/usr/games/&quot;. Hmmm, that game is cool. Maybe there are some extra tracks? apt-cache search torcs But I'm running out of space. I will delete the apt cache! apt-get clean Oh no, my mother asked me to remove all games from this computer. But I want to keep the configuration files so I can simply re-install it later. apt-get remove torcs If I want to also remove config files : apt-get purge torcs Setting up apt-get to use a http-proxy These are three methods of using apt-get with a http-proxy. Temporary proxy session This is a temporary method that you can manually use each time you want to use apt-get through a http-proxy. This method is useful if you only want to temporarily use a http-proxy. Enter this line in the terminal prior to using apt-get (substitute your details for yourproxyaddress and proxyport). export http_proxy=http://yourproxyaddress:proxyport If you normally use sudo to run apt-get you will need to login as root first for this to work unless you also add some explicit environment settings to /etc/sudoers, e.g. Defaults env_keep = &quot;http_proxy https_proxy ftp_proxy&quot; APT configuration file method This method uses the apt.conf file which is found in your /etc/apt/ directory. This method is useful if you only want apt-get (and not other applications) to use a http-proxy permanently. IconsPage/info.png On some installations there will be no apt-conf file set up. This procedure will either edit an existing apt-conf file or create a new apt-conf file. gksudo gedit /etc/apt/apt.conf Add this line to your /etc/apt/apt.conf file (substitute your details for yourproxyaddress and proxyport). Acquire::http::Proxy &quot;http://yourproxyaddress:proxyport&quot;; Save the apt.conf file. BASH rc method This method adds a two lines to your .bashrc file in your $HOME directory. This method is useful if you would like apt-get and other applications for instance wget, to use a http-proxy. gedit ~/.bashrc Add these lines to the bottom of your ~/.bashrc file (substitute your details for yourproxyaddress and proxyport) http_proxy=http://yourproxyaddress:proxyport export http_proxy Save the file. Close your terminal window and then open another terminal window or source the ~/.bashrc file: source ~/.bashrc Test your proxy with sudo apt-get update and whatever networking tool you desire. You can use firestarter or conky to see active connections. If you make a mistake and go back to edit the file again, you can close the terminal and reopen it or you can source ~/.bashrc as shown above. source ~/.bashrc How to login a proxy user If you need to login to the Proxy server this can be achieved in most cases by using the following layout in specifying the proxy address in http-proxy. (substitute your details for username, password, yourproxyaddress and proxyport) http_proxy=http://username:password@yourproxyaddress:proxyport Useful additional packages Deborphan Debfoster See also Repositories/CommandLine For further apt-get goodness see PinningHowto. AutoDeb Additional links Synaptic Package Manager Debian Apt-howto documentation also available in package apt-howto. Ubuntu Community Forums: Installations and Upgrades How to speed up package updates using apt-fast which downloads packages in parallel. Troubleshooting apt-get or aptitude or Synaptic package manager errors https://help.ubuntu.com/community/PackageManagerTroubleshootingProcedure CategoryPackageManagement CategoryCommandLine AptGet/Howto (last edited 2016-06-22 10:35:40 by clissold345) The material on this wiki is available under a free license, see Copyright / License for details You can contribute to this wiki, see Wiki Guide for details "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160622094138#index"
                   NS1:content=" The Geek Stuff ≡ Menu Home Free eBook Start Here Contact About Ping Tutorial: 15 Effective Ping Command Examples by Ramesh Natarajan on November 30, 2009 Linux Ping Command for Debian, Ubuntu and Fedora - ExamplesAs you already know, ping command is used to find out whether the peer host/gateway is reachable. If you are thinking ping is such a simple command and why do I need 15 examples, you should read the rest of the article. Ping command provides lot more options than what you might already know. Ping Example 1. Increase or Decrease the Time Interval Between Packets By default ping waits for 1 second before sending the next packet. You can increase or decrease this using option -i as shown below. Increase Ping Time Interval Example: Wait for 5 seconds before sending the next packet. $ ping -i 5 IP Decrease Ping Time Interval Example: Wait 0.1 seconds before sending the next packet. # ping -i 0.1 IP Note: Only super user can specify interval less than 0.2 seconds. If not, you’ll get the following error message. $ ping -i 0.1 127.0.0.1 PING 0 (127.0.0.1) 56(84) bytes of data. ping: cannot flood; minimal interval, allowed for user, is 200ms Ping Example 2. Check whether the local network interface is up and running Before checking whether the peer machine is reachable, first check whether the local network network is up and running using any one of the following 3 methods. Ping localhost using zero (0) This is probably the easiest and simplest way to ping a local host $ ping 0 PING 0 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.024 ms ^C Ping localhost using name $ ping localhost PING localhost (127.0.0.1) 56(84) bytes of data. 64 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.051 ms 64 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.055 ms ^C --- localhost ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 999ms rtt min/avg/max/mdev = 0.051/0.053/0.055/0.002 ms Ping localhost using ip $ ping 127.0.0.1 To quit the ping command, send SIGINT signal by pressing CTRL+C. If you have not specified any option to make the ping to exit automatically, then you will be terminating using CTRL+C ( SIGINT ) which will show the statistics and then terminate the ping process. When everything is working properly, it should say ‘0% packet loss’ 2 packets transmitted, 2 received, 0% packet loss, time 999ms rtt min/avg/max/mdev = 0.051/0.053/0.055/0.002 ms Ping Example 3. Send N packets and stop Send N packets specified with -c option and then stop. This way the ping command can exit automatically instead of pressing CTRL+C to exit. In the following example, ping command sends 5 packets, and waits for response from the destination host. Ping will exit after receiving the response or error. $ ping -c 5 google.com PING google.com (74.125.45.100) 56(84) bytes of data. 64 bytes from yx-in-f100.google.com (74.125.45.100): icmp_seq=1 ttl=44 time=731 ms 64 bytes from yx-in-f100.google.com (74.125.45.100): icmp_seq=2 ttl=44 time=777 ms 64 bytes from yx-in-f100.google.com (74.125.45.100): icmp_seq=3 ttl=44 time=838 ms 64 bytes from yx-in-f100.google.com (74.125.45.100): icmp_seq=4 ttl=44 time=976 ms 64 bytes from yx-in-f100.google.com (74.125.45.100): icmp_seq=5 ttl=44 time=1071 ms --- google.com ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 4216ms rtt min/avg/max/mdev = 731.039/879.129/1071.050/126.625 ms Ping Example 4. Show Version and Exit Display the current version of ping program using -V option. $ ping -V ping utility, iputils-sss20071127 Ping Example 5. Flood the network Super users can send hundred or more packets per second using -f option. It prints a ‘.’ when a packet is sent, and a backspace is printed when a packet is received. As shown below, ping -f has sent more than 400,000 packets in few seconds. # ping -f localhost PING localhost (127.0.0.1) 56(84) bytes of data. .^C --- localhost ping statistics --- 427412 packets transmitted, 427412 received, 0% packet loss, time 10941ms rtt min/avg/max/mdev = 0.003/0.004/1.004/0.002 ms, ipg/ewma 0.025/0.004 ms Ping Example 6. Audible ping: Give beep when the peer is reachable This option is useful for sysadmin during troubleshooting. There is no need for you to look at the ping output after each and every change. You can continue working with your changes, and when the remote machine become reachable you’ll hear the beep automatically. $ ping -a IP Note: It can give beep only from terminal number 1 through 7 and gnome-terminal ( It will not work in console ). Ping Example 7. Find out the IP address You can identify the ip-address using the host name as shown below. $ ping -c 1 google.com PING google.com (74.125.67.100) 56(84) bytes of data. 64 bytes from gw-in-f100.google.com (74.125.67.100): icmp_seq=1 ttl=43 time=287 ms --- google.com ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 287.903/287.903/287.903/0.000 ms Ping Example 8. Print Only Ping Command Summary Statistics Use option -q to view only the ping statistics summary as shown below. $ ping -c 5 -q 127.0.0.1 PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data. --- 127.0.0.1 ping statistics --- 5 packets transmitted, 5 received, 0% packet loss, time 3998ms rtt min/avg/max/mdev = 0.047/0.053/0.061/0.009 ms Ping Example 9. Change Ping Packet Size You can change the packet size of ping command using -s option. Example: Change the default packet size from 56 to 100. $ ping -s 100 localhost PING localhost (127.0.0.1) 100(128) bytes of data. 108 bytes from localhost (127.0.0.1): icmp_seq=1 ttl=64 time=0.022 ms 108 bytes from localhost (127.0.0.1): icmp_seq=2 ttl=64 time=0.021 ms 108 bytes from localhost (127.0.0.1): icmp_seq=3 ttl=64 time=0.020 ms ^C --- localhost ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 1998ms rtt min/avg/max/mdev = 0.020/0.021/0.022/0.000 ms Ping Packet Size In the above example, when we set the packet size to 100, it displays ‘128 bytes’ in the output. This is because of the Ping packet header size, which is 28 bytes. So, if you specify the packet size as 100, 28 bytes for header will be added to it and 128 bytes will be sent. Ping Bytes Sent = Ping Packet Size + Ping Header Packet Size (28 bytes) Ping Example 10. Timeout -w Ping -w option specifies the deadline to terminate the ping output. This specifies the total number of seconds the ping command should send packets to the remote host. The following example will ping for 5 seconds. i.e ping command will exit after 5 seconds irrespective of how many packets are sent or received. $ ping -w 5 localhost Note: When you specify both -w, and -c, whichever comes first will terminate the ping command. Ping Example 11. Online ping Ping from different locations and check the reachability (availability or time for reaching) of your server from different locations. If you want to do an online ping, try just ping. Ping Example 12. Option -w or -c Exits Ping $ ping -c 4 0 -w 2 PING 0 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.064 ms 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.060 ms 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.058 ms --- 0 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 1998ms rtt min/avg/max/mdev = 0.058/0.060/0.064/0.009 ms $ ping -c 4 0 -w 10 PING 0 (127.0.0.1) 56(84) bytes of data. 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.063 ms 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.060 ms 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.055 ms 64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.061 ms --- 0 ping statistics --- 4 packets transmitted, 4 received, 0% packet loss, time 2997ms rtt min/avg/max/mdev = 0.055/0.059/0.063/0.009 ms Ping Example 13. Shorter statistics with SIGQUIT While ping is printing the individual packet status, when you want to view the shorter statistics you can use this technique. Pressing CTRL+| (Control key followed by pipe symbol) for the shows the summary in between, and continues with it packet sending and receiving process. $ ping -w 100 localhost PING localhost (127.0.0.1) 56(84) bytes of data. 64 bytes from localhost (127.0.0.1): icmp_seq=10 ttl=64 time=0.021 ms 64 bytes from localhost (127.0.0.1): icmp_seq=11 ttl=64 time=0.022 ms 11/11 packets, 0% loss, min/avg/ewma/max = 0.020/0.022/0.022/0.024 ms 64 bytes from localhost (127.0.0.1): icmp_seq=12 ttl=64 time=0.021 ms 64 bytes from localhost (127.0.0.1): icmp_seq=13 ttl=64 time=0.022 ms 64 bytes from localhost (127.0.0.1): icmp_seq=14 ttl=64 time=0.021 ms 64 bytes from localhost (127.0.0.1): icmp_seq=15 ttl=64 time=0.021 ms 19/19 packets, 0% loss, min/avg/ewma/max = 0.020/0.022/0.022/0.024 ms 64 bytes from localhost (127.0.0.1): icmp_seq=31 ttl=64 time=0.022 ms 64 bytes from localhost (127.0.0.1): icmp_seq=32 ttl=64 time=0.022 ms 32/32 packets, 0% loss, min/avg/ewma/max = 0.020/0.022/0.022/0.027 ms 64 bytes from localhost (127.0.0.1): icmp_seq=33 ttl=64 time=0.023 ms .. Ping Example 14. Specify path for ping to send the packet You can also specify through which path the ping should send the packet to destination. $ ping hop1 hop2 hop3 .. hopN destination $ ping 192.168.3.33 192.168.7.1 192.168.4.45 Note: If one of the hop in the path is not reachable then you will have failure in pinging. Ping Example 15. Record and print route of how ECHO_REQUEST sent and ECHO_REPLY received It records, and prints the network route through which the packet is sent and received. This is useful for network engineers who wish to know how the packet is sent and received. $ ping -R 192.168.1.63 PING 192.168.1.63 (192.168.1.63) 56(84) bytes of data. 64 bytes from 192.168.1.63: icmp_seq=1 ttl=61 time=2.05 ms RR: 192.168.9.118 192.168.3.25 192.168.10.35 192.168.1.26 192.168.1.63 192.168.1.63 192.168.10.4 192.168.3.10 192.168.4.25 64 bytes from 192.168.1.63: icmp_seq=2 ttl=61 time=2.00 ms (same route) &gt; Add your comment If you enjoyed this article, you might also like.. 50 Linux Sysadmin Tutorials 50 Most Frequently Used Linux Commands (With Examples) Top 25 Best Linux Performance Monitoring and Debugging Tools Mommy, I found it! – 15 Practical Linux Find Command Examples Linux 101 Hacks 2nd Edition eBook Linux 101 Hacks Book Awk Introduction – 7 Awk Print Examples Advanced Sed Substitution Examples 8 Essential Vim Editor Navigation Fundamentals 25 Most Frequently Used Linux IPTables Rules Examples Turbocharge PuTTY with 12 Powerful Add-Ons Bash 101 Hacks Book Sed and Awk 101 Hacks Book Nagios Core 3 Book Vim 101 Hacks Book Tagged as: Linux Ping Command, Ping -t, Ping Command, Ping Examples, Unix Ping Command { 38 comments… add one } Salih November 30, 2009, 7:21 pm Hi Ramesh, Good Article. Thanks :) Best Regards Salih KM Link Anonymous December 1, 2009, 10:26 am very good tutorial Link diptanu paul December 2, 2009, 11:54 pm Excellent article Ramesh.Thanks for the increasing the kowledgebase. Link S.RAGHU December 3, 2009, 3:13 am Great article.Never knew ping could be used to determine the ip or route and also get the short stat. Thanx Link Sravan Babu December 5, 2009, 12:53 am Hi Ramesh…Awesome tut on ping :) but I m unable to use the audible option When I use ” ping -a google.com” I m not able to hear any beep :( :( Link NetSpider December 6, 2009, 1:12 pm i’ve got strange result on FreeBSD :) ~&gt; netstat -r -n Routing tables Internet: Destination Gateway Flags Refs Use Netif Expire default a.b.c.1 UGS 0 66309126 em0 Okay, my GW is a.b.c.1. But when i’m going to ping 0, i’ve got this: ~&gt; ping 0.0.0.0 PING 0.0.0.0 (0.0.0.0): 56 data bytes 64 bytes from a.b.c.2: icmp_seq=0 ttl=64 time=0.261 ms 64 bytes from a.b.c.2: icmp_seq=1 ttl=64 time=0.109 ms ^C i don’t know why.. =( 0 should be my default GW (!not 127.0.0.1!) Link Ramesh Natarajan December 10, 2009, 5:55 pm @Salih, Diptanu, Thanks for the comment. I’m very glad you found this article helpful. @Raghu, Yes. Lot of people underestimate the power of ping. @Sravan, If you are trying to do a ‘ping -a’ on a remote server, you’ll hear the beep only on the host where the ping command is getting executed. For example, from your laptop, if you’ve ssh-ed to dev-db and executing ‘ping -a google.com’ on dev-db, you’ll hear the beep only on the dev-db box. @Netspider, That is strange. I’m not sure why that is happening. When you do, ping 0, it is supposed to ping only the local host and not even the gateway. Are there any strange entries in your /etc/hosts file? Link Reza December 21, 2009, 12:17 am Thanks for your very nice tutorial. Could you please also help me with these two questions: 1- Ping claims to give an estimation about RTT(Round Trip Time) for SPECIFIC PACKET SIZE. But as it shows the packet that is coming back is 20Bytes less. So we have a RTT for which packet size (86 which goes or 66 which is coming back) ? 2-What does “mdev” means in mid/avg/max/mdev TQ Link Anonymous March 23, 2011, 5:12 am superb article Link saikrishna July 18, 2011, 4:09 am super article Link TK Nallappan August 6, 2011, 4:36 pm Hi All, Here is the command to protect yourself from a form of attack known as a ‘ping flood’ # sysctl -w net.ipv4.icmp_echoreply_rate=10 Link Greg Janssen October 27, 2011, 12:38 pm This must not be about Windows XP! Parts of it do not work with XP. Can the Increase Decrease Time Internal of Ping packets be shown for XP? Thanks. Link angel July 8, 2012, 10:32 pm One of the small hive of usable articles! Link Gaurav B August 6, 2012, 10:51 am One word !!! Ultimate !!! Thanks for posting. Link sumit September 5, 2012, 2:04 pm i’m using ubuntu 11.10, and new linux user……. ping -R isn’t working……it isn’t showing me the return path Link Sean January 31, 2013, 7:33 pm can you tell me what the difference between Ping -R and normal ping i notice i can always ping but Ping -R doesnt behave the same we had some issues with mac not being able print or use afp ( we recently upgraded to mountain lion) we narrowed it down to the bridge that connects another bridge connection which links to a gateway to the windows 2008 server side. As soon as we disconnected the bridge connection and use Ping -R to a printer works straight away and afp works too.. soon as we connected it back it stops working and ping -R time out Link kumar February 11, 2013, 4:22 am how to reduce ping Link Heinz March 29, 2013, 9:34 am Hi Nice tutorial. I get a correct address when I ping 0 but get something different when I ping localhost? Strange Link Anuraj August 28, 2013, 6:10 am Good Article Link Anonymous October 25, 2013, 12:58 pm Awesome tutorial dude. learned alot. Link Bob November 10, 2013, 12:29 am this article is wrong in many respects %ping -V ping: illegal option — V host(1) or drill(1) should be used to determine IP – not ping. there is no -w option. you mean to use -t for timeout CTRL+| is wrong. You mean CTRL-t ping does not support source routing Link NetSpider November 11, 2013, 8:29 pm Bob, I assume you’re using Mac OS X or FreeBSD? I’ve got the same error on FreeBSD: ~ ~&gt; ping -V ping: illegal option — V Ramesh should specify that some examples may vary on non-Linux OSes or even on some Linux versions. A better way to determine IP is dig: ~ ~&gt; dig +short google.com 173.194.70.101 173.194.70.139 … In order to try “drill” I had to install /usr/ports/dns/ldns, but in my taste the “dig” is better. Link prashant December 3, 2013, 6:51 am sir… its really good.. im a beginner to linux… please give a idea to develope my career.. Link Ujwal December 16, 2013, 8:52 am Hi, Great article! Can you tell me how to loop pinging a particular IP after regular intervals of time. Ex: Say suppose I have an IP: a.b.c.d I want to ping this IP every 300sec. What is to be done? Link NetSpider December 16, 2013, 2:22 pm Ujwal, you can use -i key: -i wait Wait wait seconds between sending *each packet*. Or you can use bash-script: while :; do ping -c yy a.b.c.d; sleep xx; done This script will send yy icmp-packets every xx seconds. Link Vitalie March 24, 2014, 2:12 am Also you could include -r option. -r – direct ping without taking in account routing table. Problem: need to check if we have wire electrical connection. lnx#&gt; ping -r Link gandhimathi April 20, 2014, 6:14 pm Hi Ramesh, This is very useful article. I have a question. The time displayed in the ping statistics is taken from where? Is the time taken to run the the ping command? for example, 5 packets transmitted, 5 received, 0% packet loss, time 3998ms Then no.of packets sent * avg RTT is the time taken to send and receive is the time taken for the pings right. Why both the times are not equal? Link Bobin chacko April 24, 2014, 11:27 am hi I tried to use the command ping -c 5 google.com it gives me a message that access denied option -c requires administrative privileges… while I am logged in as administrator with an elevated command prompt please help Link Ritesh April 25, 2014, 1:11 am If I ping using hostname it does not ping. Ex $ ping abc //abc as host name It gives message ping: unknown host abc Link Kevin December 10, 2014, 3:53 pm HI Sir, thank you for sharing. What is a perpetual ping? Link rodnaldo January 12, 2015, 5:15 am Hi there! I’m Rodnaldo. I’d like to ask you about an output that I’m having.. When I ping 10.0.51.24 I’m geting: 40 bytes from 10.0.51.24: icmp_req=503 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=504 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=505 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=506 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=507 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=508 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=509 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=510 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=511 ttl=127 (truncated) 40 bytes from 10.0.51.24: icmp_req=512 ttl=127 (truncated) ^C — 10.0.51.24 ping statistics — 512 packets transmitted, 512 received, 0% packet loss, time 511001ms rtt min/avg/max/mdev = 0.189/3.012/167.145/16.791 ms Do you know what’s happenning? What does truncated mean? Since already thank you so much Link SK98 February 7, 2015, 3:04 am Hello, just had a bit of a problem when I tried to use the ping -s command. I tried to change the value to 100, but it gave me an error saying “Bad value for option -s, valid range is from 1 to 4.” Anyone know why this is happening? Thanks Link VINAY G March 11, 2015, 11:58 pm hi, how to find everysecond of ping of a subnet ip address.. example : 10.4.34.4 … 10.4.34.254.In between all IP’s ping of every second ….. how to do ? need batch file or some other soluction…. thanks Link Suleman April 22, 2015, 3:54 am Very Good Link Krishna July 24, 2015, 12:55 pm Very nice and usefull , tips and tricks. explained in a very good mannered and almost cover all useful tips for ping Link Sys January 10, 2016, 8:46 am The -W parameter is also very useful (it’s not the same as the -w parameter) to achieve that ping stops waiting after x seconds: -W timeout Time to wait for a response, in seconds. The option affects only timeout in absence of any responses, otherwise ping waits for two RTTs. Link Roshan January 20, 2016, 12:01 am [root@1-2 ~]# ping 10.3.3.24 -c 1 -t 80 PING 10.3.3.24 (10.3.3.24) 56(84) bytes of data. 64 bytes from 10.3.3.24: icmp_seq=1 ttl=63 time=1.33 ms In this statemement i am setting a ttl value as 80 and i have one hop for the destination, so i was expecting ttl=79 in my result but it is showing it as 63 which is default TTL. Can anyone explain me what is happening here? ping 10.3.3.24 -c 1 -t 80 C means count t means TTL Link Hara Prasasd Sahoo May 31, 2016, 5:27 am You wrote -s to change the packet size ,but it is not working it tells “Bad value for option -s,valid values range from 1 to 4” But I think you had mistaken -s for -l. ping -l 100 URL_VARIABLE is working perfectly and sending packets of size 100 bytes. Link Cancel reply Leave a Comment Name Email Website Comment Notify me of followup comments via e-mail Next post: 4 Ways to Kill a Process – kill, killall, pkill, xkill Previous post: Black Friday Deal: 40% Discount on Vim 101 Hacks Book RSS | Email | Twitter | Facebook | Google+ EBOOKS Linux 101 Hacks Book Linux 101 Hacks 2nd Edition eBook - Practical Examples to Build a Strong Foundation in Linux Bash 101 Hacks eBook - Take Control of Your Bash Command Line and Shell Scripting Sed and Awk 101 Hacks eBook - Enhance Your UNIX / Linux Life with Sed and Awk Vim 101 Hacks eBook - Practical Examples for Becoming Fast and Productive in Vim Editor Nagios Core 3 eBook - Monitor Everything, Be Proactive, and Sleep Well POPULAR POSTS 12 Amazing and Essential Linux Books To Enrich Your Brain and Library 50 UNIX / Linux Sysadmin Tutorials 50 Most Frequently Used UNIX / Linux Commands (With Examples) How To Be Productive and Get Things Done Using GTD 30 Things To Do When you are Bored and have a Computer Linux Directory Structure (File System Structure) Explained with Examples Linux Crontab: 15 Awesome Cron Job Examples Get a Grip on the Grep! – 15 Practical Grep Command Examples Unix LS Command: 15 Practical Examples 15 Examples To Master Linux Command Line History Top 10 Open Source Bug Tracking System Vi and Vim Macro Tutorial: How To Record and Play Mommy, I found it! -- 15 Practical Linux Find Command Examples 15 Awesome Gmail Tips and Tricks 15 Awesome Google Search Tips and Tricks RAID 0, RAID 1, RAID 5, RAID 10 Explained with Diagrams Can You Top This? 15 Practical Linux Top Command Examples Top 5 Best System Monitoring Tools Top 5 Best Linux OS Distributions How To Monitor Remote Linux Host using Nagios 3.0 Awk Introduction Tutorial – 7 Awk Print Examples How to Backup Linux? 15 rsync Command Examples The Ultimate Wget Download Guide With 15 Awesome Examples Top 5 Best Linux Text Editors Packet Analyzer: 15 TCPDUMP Command Examples The Ultimate Bash Array Tutorial with 15 Examples 3 Steps to Perform SSH Login Without Password Using ssh-keygen &amp; ssh-copy-id Unix Sed Tutorial: Advanced Sed Substitution Examples UNIX / Linux: 10 Netstat Command Examples The Ultimate Guide for Creating Strong Passwords 6 Steps to Secure Your Home Wireless Network Turbocharge PuTTY with 12 Powerful Add-Ons CATEGORIES Linux Tutorials Vim Editor Sed Scripting Awk Scripting Bash Shell Scripting Nagios Monitoring OpenSSH IPTables Firewall Apache Web Server MySQL Database Perl Programming Google Tutorials Ubuntu Tutorials PostgreSQL DB Hello World Examples C Programming C++ Programming DELL Server Tutorials Oracle Database VMware Tutorials About The Geek Stuff Linux 101 Hacks Book My name is Ramesh Natarajan. I will be posting instruction guides, how-to, troubleshooting tips and tricks on Linux, database, hardware, security and web. My focus is to write articles that will either teach you or help you resolve a problem. Read more about Ramesh Natarajan and the blog. Contact Us Email Me : Use this Contact Form to get in touch me with your comments, questions or suggestions about this site. You can also simply drop me a line to say hello!. Follow us on Google+ Follow us on Twitter Become a fan on Facebook Support Us Support this blog by purchasing one of my ebooks. Bash 101 Hacks eBook Sed and Awk 101 Hacks eBook Vim 101 Hacks eBook Nagios Core 3 eBook Copyright © 2008–2015 Ramesh Natarajan. All rights reserved | Terms of Service Like Like 169168 Like Like 169168 "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160620171615#index"
                   NS1:content=" Debian Wiki Login FrontPage RecentChanges FindPage HelpContents Modem/3G Search: Debian Wiki/ Login Comments Info Attachments Modem 3G Translation(s): English - Italiano Contents Hardware Support Installation with PPP and /etc/network/interfaces Advanced Installation with WVDial For Novatel For Option Extra Steps for the HSDPA card Extra steps for the Novatel U740 Card Extra Steps for the Huawei Cards Huawei E169 Huawei E220 Notes How to connect using a Franklin U210 USB wireless/WAN/mobile broadband modem FAQ TODO Resources External Links Hardware Support The following cards/phones works 100% with next scripts/configs: BandLuxe C100 Huawei/E176 (works out of the box) Huawei/E169 works without any problems Huawei/E220 Huawei/E620 Huawei/K3565-Z Motorola E1000 Nokia 6680 (just don't set the speed/service - no 3gonly and 384k configs) Nokia N80 (with a nice How-To UseYourCellPhoneAsModem) Novatel HSDPA Card Novatel Merlin U630 Option Fusion Option HSDPA Card Option Quad Installation with PPP and /etc/network/interfaces This works with Debian Wheezy 7. Install the packages netbase, ifupdown, and ppp if you don't have them already: apt-get install netbase ifupdown ppp Create a file /etc/ppp/peers/gprs with this content: user &quot;YOUR_USERNAME&quot; connect &quot;/usr/sbin/chat -v -f /etc/chatscripts/gprs -T YOUR_APN&quot; /dev/ttyUSB0 noipdefault defaultroute replacedefaultroute hide-password #lcp-echo-interval 30 #lcp-echo-failure 4 noauth persist #mtu 1492 #maxfail 0 #holdoff 20 usepeerdns #Optional, make it always appear as ppp2: #unit 2 Then edit /etc/ppp/chap-secrets and add at the end: &quot;YOUR_USERNAME&quot; * &quot;YOUR_PASSWORD&quot; Similarly, edit /etc/ppp/pap-secrets and add at the end: &quot;YOUR_USERNAME&quot; * &quot;YOUR_PASSWORD&quot; Then edit /etc/network/interfaces and add the following: auto gprs iface gprs inet ppp provider gprs Thats all you need most of the time. The connection will be brought up at boot, you can start it with ifup gprs or stop it with ifdown gprs. Advanced Installation with WVDial You need to download the new wvdial.conf for the HSDPA stuff to work !!! This was originally written for Gentoo Linux which compiles everything from source. As a result of things might be a bit different, but we can work around it. Firstly, we need to get Linux to detect your card, start your PCMCIA services - normally this can be done using (most distros do this for you): Before you insert your card, open a console/switch to an open console and as root run the following : invoke-rc.d pcmciautils start This will allow you to &quot;see&quot; what Linux is doing : tail -f /var/log/messages Right, now insert your card and you should see some stuff happening. I have included log traces of what the two cards &quot;look&quot; like under /var/log/messages in the attachment section. If you see only the option_insert_nousb.txt messages using an option card run the following command: modprobe usbserial vendor=0x0af0 product=0x5000 If you had to run the above command, you will need to save the vmc_g file attached into /etc/modules.d. Now we need to find out where your card is - you will see in the messages where the card is - /dev/ttyS* for Novatel or /dev/ttyUSB* for Option: find /dev/ | grep ttyS Should show /dev/ttyS0 or /dev/ttyS1 for a Novatel Card. find /dev/ | grep ttyUSB Should show /dev/ttyUSB0 and USB1 and USB2 for an Option Card. (or /dev/tts/ttyUSB0-2 for udev) Once we found that, we need to change /etc/wvdial.conf to match your settings, attached is my working wvdial.conf (this one is tested on GSM network Play in Poland, with e169 modem, but uses no specific options so should be very portable). The file is: [Dialer Defaults] Modem = /dev/ttyUSB0 Baud = 3600000 Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Phone = *99# Username = ppp Password = ppp Ask Password = 0 Dial Command = ATDT Stupid Mode = 1 Compuserve = 0 Idle Seconds = 0 ISDN = 0 Auto DNS = 1 It is possible to set the PIN that is sent to modem to unlock SIM card, how ever this example does not use this option (you should search for it). Some SIM cards do not need the PIN to work as modems. Now we can start dialing up. For Novatel wvdial novatel internet 3gonly 384k For Option wvdial option internet 3gonly 384k If you need to send your PIN, add &quot;pin&quot; infront of all the commands, e.g. wvdial pin novatel internet 3gonly 384k Once your connection is up - surf away Now you can setup things like KPPP and Gnome's Modem Lights to do your dialing for you. Extra Steps for the HSDPA card Download the kernel module from the link below. Extract it to a directory somewhere safe. Compile the driver using the following commands: make clean &amp;&amp; make Once this is done, run the following command to insert the module into the kernel insmod nozomi.ko Once you have done that, use the following command to setup the connection: wvdial hsdpa Extra steps for the Novatel U740 Card Until I get time to update the files etc. our Novatel Linux Users out there can just type this command before using the normal dialing command: modprobe usbserial vendor=0x1410 product=0x1400 OR modprobe usbserial vendor=0x1410 product=0x1410 Using lsusb will show you the Vendor and Product ID's or cat /proc/bus/usb/devices will do the same.I will still add them into the FAQ but at least this should help for now This will add the USB's like the 3G Option did - am I seeing a swap here ? - so just dial /dev/ttyUSB0 or so - check the logs Extra Steps for the Huawei Cards None really - just make sure usbserial is loaded and the card will come up on /dev/ttyUSB0 - check the logs again to confirm If the card doesn't come up, unload usbserial and reload with the following command: rmmod usbserial modprobe usbserial vendor=0x12d1 product=0x1001 I am still trying to work on the USB only card, so at the moment, I don't know if it will work under Linux. Huawei E169 Tested by rfree on Debian Wheezy with Polish operator Play. All works well: make sure with stat /dev/ttyUSB0 that such device-file is (re)created when you connect the modem (and wait 10 seconds), the date of file should change. if device-file is not created (or if something does not work) then force the modem to work as modem only instead as card-reader/memory, using: rmmod usb_storage modprobe usbserial vendor=0x0af0 product=0x5000 # (or adjust vendor and product number to the ones you see in dmesg or lsusb when you look for your modem) copy the attached example file wvdial.conf-e169 to /etc/wvdial.conf run wvdial (install wvdial if you don't have it) - and should be done Huawei E220 I have found that this modem will only work with the short cable supplied...not the long one with two plugs...*shrug* Same as the E620, except use the following modprobe command: rmmod usb-storage modprobe usbserial vendor=0x12d1 product=0x1003 (Some have reported an ID of 0x1001 - use lsusb to confirm) After that, you will notice only one USB serial coming up, then, remove the device and re-attach it, you shouldn't need to re-insert usbserial. Notes I have only seen 3G speeds on this device, but I think it is because of my RF conditions and location. More on this to follow... How to connect using a Franklin U210 USB wireless/WAN/mobile broadband modem Though this section needs work, it documents how one Debian user connects to the Internet over NTelos' cellular network in the United States using a Franklin CDMA EV-DO U210 USB modem. NTelos uses Sprint's network, and moreover it would appear that Franklin's U210 is the base model of Franklin's U-series (U210, U600, U601, U602, U770, U772), so there is a reasonably good chance that you can use this information even if your situation differs somewhat from the writer's -- but, as they say, your mileage may vary. This advice is targeted to the beginning-to-intermediate user. Advanced users are challenged to edit the wiki to improve the advice. Your Franklin USB modem presents itself to the wireless network as though it were a cell phone. It has a phone number. To connect, it calls another phone number. On NTelos' (and presumably also on Sprint's) network in the United States, the phone number your USB modem must call is &quot;#777&quot;. You need not, but probably can, discover your USB modem's own phone number by logging into your account on your cellular provider's website. The only number you need today however is the &quot;#777&quot;. As root or via sudo(1), install the Debian package &quot;wvdial&quot;, for instance by $ sudo apt-get install wvdial If desired, save the original state of /etc/wvdial.conf using RCS's ci(1) or the like (you can ignore this advice re RCS if you neither know nor care what it is about). Edit /etc/wvdial.conf to look something like this: [Dialer Defaults] Stupid Mode = true Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2 +FCLASS=0 Modem Type = USB Modem Baud = 460800 New PPPD = yes Modem = /dev/ttyACM0 ISDN = 0 Phone = #777 Password = &lt;Your Password&gt; Username = &lt;Your Login Name&gt; The important lines are the &quot;Stupid Mode = true&quot; and the &quot;Phone = #777&quot;. You need not fill in a password or username. Edit &quot;/etc/group&quot; [again after using ci(1) first if you wish] to change dialout:x:20: to dialout:x:20:foo typing your username in place of &quot;foo&quot;. At this point, you may need to log out and log back in to get the system (which part of the system? not sure) to recognize that you now belong to the &quot;dialout&quot; group. If unsure, check with the groups(1) command. Plug in your USB modem if you have not already done so. Not as root but as yourself, give the command &quot;wvdial&quot; at the terminal's command line. If all goes well, this should connect you to the Internet over your cellular network. Later, press &lt;Ctrl-C&gt; to disconnect. One is given to understand that the &quot;usb-modeswitch&quot; package may be necessary if your USB modem has not been used before. The writer has neither met nor tested the circumstance in question. To state the obvious: the procedure should be expected to work only if you have paid a subscription to the cellular network. It is not asserted that the procedure were the smoothest possible, but the procedure does have the virtue of being relatively obvious in its operation. Refinements may occur to the interested user. FAQ How do I enable &quot;Internet Connection Sharing&quot; ? A) Since the 2.6 kernel is main stream etc. I will only cover IPTables and Kernel 2.6. I am also assuming that ppp0 is your dialup and eth0 is your lan. Firstly - we need to add some rules to iptables - run the following commands: #This will CLEAR ALL RULES !!! iptables -F #Enable NAT (through the ppp0 interface) iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE #then we need to enable routing: echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward That should do it - from here you can add rules to block incomming connections etc. My card is broken/replies &quot;ERROR&quot; to all the commands A) You didn't send your PIN to the card - either add the &quot;pin&quot; command or disable the PIN on the SIM My Novatel card is very slow - +-800 bytes per second A) Try running &quot;setserial -a /dev/ttyS1 low_latency spd_warp&quot; - replace /dev/ttyS1 with your port Once you have your setserial command, insert it into /etc/ppp/ip-up.local - this will cause the command to be ran everytime a connection is made. What does all the wvdial sections do/mean ? Defaults - What to do if nothing is selected (Always included) pin - send your pin to the card novatel - select the novatel card option - select the option card hsdpa - Option HSDPA card e1000 - select the E1000 via USB onboard - select the onboard modem of my notebook internet - select the internet APN internetvpn - select the internetvpn APN myapn - select your apn 384k,144k,64k - select the speed of your 3G connection 2gonly - select GPRS only 3gonly - select 3G only How do I see the usage under Linux ? ToDo Linux Usage TODO Make the Option card call &quot;modprobe usbserial&quot; by itself Make the Novatel card register the second port under Linux Do some research into the signal levels reported via +CSQ Get the PIN to work with wvdial and Novatel Resources Modem/3G/Cards Modem/3G/FAQ Modem/3G/Vodafone External Links http://www.peck.org.uk/GlobeTrotterGPRShowto.html - GPRS HowTo Vodafone_Mobile_Connect_USB_Modem http://markus.wernig.net/en/it/usb-serial-handy-ppp.phtml - How to connect a cell phone via USB to a Linux laptop and dial-up an internet connection. Hardware | Modem Modem/3G (last edited 2015-01-25 10:32:25 by BeatriceTorracca) MoinMoin Powered Python Powered Debian Wiki team, bugs and config available. Hosting provided by Dembach Goo Informatik GmbH &amp; Co KG "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616162207#index"
                   NS1:content=" Requests: HTTP for Humans¶ Release v2.10.0. (Installation) Requests is the only Non-GMO HTTP library for Python, safe for human consumption. Warning: Recreational use of other HTTP libraries may result in dangerous side-effects, including: security vulnerabilities, verbose code, reinventing the wheel, constantly reading documentation, depression, headaches, or even death. Behold, the power of Requests: &gt;&gt;&gt; r = requests.get('https://api.github.com/user', auth=('user', 'pass')) &gt;&gt;&gt; r.status_code 200 &gt;&gt;&gt; r.headers['content-type'] 'application/json; charset=utf8' &gt;&gt;&gt; r.encoding 'utf-8' &gt;&gt;&gt; r.text u'{&quot;type&quot;:&quot;User&quot;...' &gt;&gt;&gt; r.json() {u'private_gists': 419, u'total_private_repos': 77, ...} See similar code, sans Requests. Requests allows you to send organic, grass-fed HTTP/1.1 requests, without the need for manual labor. There's no need to manually add query strings to your URLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling are 100% automatic, powered by urllib3, which is embedded within Requests. User Testimonials¶ Her Majesty's Government, Amazon, Google, Twilio, Runscope, Mozilla, Heroku, PayPal, NPR, Obama for America, Transifex, Native Instruments, The Washington Post, Twitter, SoundCloud, Kippt, Readability, Sony, and Federal U.S. Institutions that prefer to be unnamed claim to use Requests internally. Armin Ronacher Requests is the perfect example how beautiful an API can be with the right level of abstraction. Matt DeBoard I'm going to get @kennethreitz's Python requests module tattooed on my body, somehow. The whole thing. Daniel Greenfeld Nuked a 1200 LOC spaghetti code library with 10 lines of code thanks to @kennethreitz's request library. Today has been AWESOME. Kenny Meyers Python HTTP: When in doubt, or when not in doubt, use Requests. Beautiful, simple, Pythonic. Requests is one of the most downloaded Python packages of all time, pulling in over 7,000,000 downloads every month. All the cool kids are doing it! Supported Features¶ Requests is ready for today's web. International Domains and URLs Keep-Alive &amp; Connection Pooling Sessions with Cookie Persistence Browser-style SSL Verification Basic/Digest Authentication Elegant Key/Value Cookies Automatic Decompression Automatic Content Decoding Unicode Response Bodies Multipart File Uploads HTTP(S) Proxy Support Connection Timeouts Streaming Downloads .netrc Support Chunked Requests Thread-safety Requests supports Python 2.6 — 3.5, and runs great on PyPy. The User Guide¶ This part of the documentation, which is mostly prose, begins with some background information about Requests, then focuses on step-by-step instructions for getting the most out of Requests. Introduction Philosophy Apache2 License Requests License Installation Pip Install Requests Get the Source Code Quickstart Make a Request Passing Parameters In URLs Response Content Binary Response Content JSON Response Content Raw Response Content Custom Headers More complicated POST requests POST a Multipart-Encoded File Response Status Codes Response Headers Cookies Redirection and History Timeouts Errors and Exceptions Advanced Usage Session Objects Request and Response Objects Prepared Requests SSL Cert Verification CA Certificates Body Content Workflow Keep-Alive Streaming Uploads Chunk-Encoded Requests POST Multiple Multipart-Encoded Files Event Hooks Custom Authentication Streaming Requests Proxies Compliance HTTP Verbs Link Headers Transport Adapters Blocking Or Non-Blocking? Header Ordering Timeouts Authentication Basic Authentication Digest Authentication OAuth 1 Authentication Other Authentication New Forms of Authentication The Community Guide¶ This part of the documentation, which is mostly prose, details the Requests ecosystem and community. Frequently Asked Questions Recommended Packages and Extensions Integrations Articles &amp; Talks Support Vulnerability Disclosure Community Updates Release and Version History Release Process and Rules The API Documentation / Guide¶ If you are looking for information on a specific function, class, or method, this part of the documentation is for you. Developer Interface Main Interface Exceptions Request Sessions Lower-Level Classes Lower-Lower-Level Classes Authentication Encodings Cookies Status Code Lookup Migrating to 1.x Migrating to 2.x The Contributor Guide¶ If you want to contribute to the project, this part of the documentation is for you. Contributor's Guide Be Cordial Get Early Feedback Contribution Suitability Code Contributions Steps for Submitting Code Code Review New Contributors Kenneth Reitz's Code Style™ Documentation Contributions Bug Reports Feature Requests Development Philosophy Management Style Values Semantic Versioning Standard Library? Linux Distro Packages How to Help Feature Freeze Development Dependencies Runtime Environments Are you crazy? Downstream Repackaging Authors Keepers of the Three Crystals Urllib3 Patches and Suggestions There are no more guides. You are now guideless. Good luck. [Rezzy the Requests Sea Turtle] Requests is an elegant and simple HTTP library for Python, built for human beings. Stay Informed Receive updates on new releases and upcoming projects. Join Mailing List. Other Projects More Kenneth Reitz projects: pep8.org httpbin.org The Python Guide Records: SQL for Humans Legit: Git for Humans Tablib: Tabular Datasets Markdown, Please! Useful Links Recommended Packages and Extensions Requests @ GitHub Requests @ PyPI Issue Tracker Release History Translations English French German Japanese Chinese Portuguese Italian Spanish Quick search Enter search terms or a module, class or function name. ©2016. A Kenneth Reitz Project. Fork me on GitHub v: latest Languages en zh_CN de es pl pt_BR Versions latest stable master v3.0.0 v2.9.1 v2.8.1 v2.7.0 v2.6.2 v2.5.3 v2.4.3 v2.3.0 v2.2.1 v2.1.0 v2.0.0 v1.2.3 v1.1.0 v1.0.4 Downloads PDF HTML Epub On Read the Docs Project Home Builds Downloads On GitHub View Edit Search Free document hosting provided by Read the Docs. Star 19,418 Follow @kennethreitz 9,721 Follow @kennethreitz "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616164532#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 20. Internet Protocols and Support » 20.6. urllib2 — extensible library for opening URLs¶ Note The urllib2 module has been split across several modules in Python 3 named urllib.request and urllib.error. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. The urllib2 module defines functions and classes which help in opening URLs (mostly HTTP) in a complex world — basic and digest authentication, redirections, cookies and more. See also The Requests package is recommended for a higher-level HTTP client interface. The urllib2 module defines the following functions: urllib2.urlopen(url[, data[, timeout[, cafile[, capath[, cadefault[, context]]]]])¶ Open the URL url, which can be either a string or a Request object. data may be a string specifying additional data to send to the server, or None if no such data is needed. Currently HTTP requests are the only ones that use data; the HTTP request will be a POST instead of a GET when the data parameter is provided. data should be a buffer in the standard application/x-www-form-urlencoded format. The urllib.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format. urllib2 module sends HTTP/1.1 requests with Connection:close header included. The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). This actually only works for HTTP, HTTPS and FTP connections. If context is specified, it must be a ssl.SSLContext instance describing the various SSL options. See HTTPSConnection for more details. The optional cafile and capath parameters specify a set of trusted CA certificates for HTTPS requests. cafile should point to a single file containing a bundle of CA certificates, whereas capath should point to a directory of hashed certificate files. More information can be found in ssl.SSLContext.load_verify_locations(). The cadefault parameter is ignored. This function returns a file-like object with three additional methods: geturl() — return the URL of the resource retrieved, commonly used to determine if a redirect was followed info() — return the meta-information of the page, such as headers, in the form of an mimetools.Message instance (see Quick Reference to HTTP Headers) getcode() — return the HTTP status code of the response. Raises URLError on errors. Note that None may be returned if no handler handles the request (though the default installed global OpenerDirector uses UnknownHandler to ensure this never happens). In addition, if proxy settings are detected (for example, when a *_proxy environment variable like http_proxy is set), ProxyHandler is default installed and makes sure the requests are handled through the proxy. Changed in version 2.6: timeout was added. Changed in version 2.7.9: cafile, capath, cadefault, and context were added. urllib2.install_opener(opener)¶ Install an OpenerDirector instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call OpenerDirector.open() instead of urlopen(). The code does not check for a real OpenerDirector, and any class with the appropriate interface will work. urllib2.build_opener([handler, ...])¶ Return an OpenerDirector instance, which chains the handlers in the order given. handlers can be either instances of BaseHandler, or subclasses of BaseHandler (in which case it must be possible to call the constructor without any parameters). Instances of the following classes will be in front of the handlers, unless the handlers contain them, instances of them or subclasses of them: ProxyHandler (if proxy settings are detected), UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor. If the Python installation has SSL support (i.e., if the ssl module can be imported), HTTPSHandler will also be added. Beginning in Python 2.3, a BaseHandler subclass may also change its handler_order attribute to modify its position in the handlers list. The following exceptions are raised as appropriate: exception urllib2.URLError¶ The handlers raise this exception (or derived exceptions) when they run into a problem. It is a subclass of IOError. reason¶ The reason for this error. It can be a message string or another exception instance (socket.error for remote URLs, OSError for local URLs). exception urllib2.HTTPError¶ Though being an exception (a subclass of URLError), an HTTPError can also function as a non-exceptional file-like return value (the same thing that urlopen() returns). This is useful when handling exotic HTTP errors, such as requests for authentication. code¶ An HTTP status code as defined in RFC 2616. This numeric value corresponds to a value found in the dictionary of codes as found in BaseHTTPServer.BaseHTTPRequestHandler.responses. reason¶ The reason for this error. It can be a message string or another exception instance. The following classes are provided: class urllib2.Request(url[, data][, headers][, origin_req_host][, unverifiable])¶ This class is an abstraction of a URL request. url should be a string containing a valid URL. data may be a string specifying additional data to send to the server, or None if no such data is needed. Currently HTTP requests are the only ones that use data; the HTTP request will be a POST instead of a GET when the data parameter is provided. data should be a buffer in the standard application/x-www-form-urlencoded format. The urllib.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format. headers should be a dictionary, and will be treated as if add_header() was called with each key and value as arguments. This is often used to “spoof” the User-Agent header value, which is used by a browser to identify itself – some HTTP servers only allow requests coming from common browsers as opposed to scripts. For example, Mozilla Firefox may identify itself as &quot;Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11&quot;, while urllib2‘s default user agent string is &quot;Python-urllib/2.6&quot; (on Python 2.6). The final two arguments are only of interest for correct handling of third-party HTTP cookies: origin_req_host should be the request-host of the origin transaction, as defined by RFC 2965. It defaults to cookielib.request_host(self). This is the host name or IP address of the original request that was initiated by the user. For example, if the request is for an image in an HTML document, this should be the request-host of the request for the page containing the image. unverifiable should indicate whether the request is unverifiable, as defined by RFC 2965. It defaults to False. An unverifiable request is one whose URL the user did not have the option to approve. For example, if the request is for an image in an HTML document, and the user had no option to approve the automatic fetching of the image, this should be true. class urllib2.OpenerDirector¶ The OpenerDirector class opens URLs via BaseHandlers chained together. It manages the chaining of handlers, and recovery from errors. class urllib2.BaseHandler¶ This is the base class for all registered handlers — and handles only the simple mechanics of registration. class urllib2.HTTPDefaultErrorHandler¶ A class which defines a default handler for HTTP error responses; all responses are turned into HTTPError exceptions. class urllib2.HTTPRedirectHandler¶ A class to handle redirections. class urllib2.HTTPCookieProcessor([cookiejar])¶ A class to handle HTTP Cookies. class urllib2.ProxyHandler([proxies])¶ Cause requests to go through a proxy. If proxies is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables &lt;protocol&gt;_proxy. If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry’s Internet Settings section, and in a Mac OS X environment proxy information is retrieved from the OS X System Configuration Framework. To disable autodetected proxy pass an empty dictionary. class urllib2.HTTPPasswordMgr¶ Keep a database of (realm, uri) -&gt; (user, password) mappings. class urllib2.HTTPPasswordMgrWithDefaultRealm¶ Keep a database of (realm, uri) -&gt; (user, password) mappings. A realm of None is considered a catch-all realm, which is searched if no other realm fits. class urllib2.AbstractBasicAuthHandler([password_mgr])¶ This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. class urllib2.HTTPBasicAuthHandler([password_mgr])¶ Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. class urllib2.ProxyBasicAuthHandler([password_mgr])¶ Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. class urllib2.AbstractDigestAuthHandler([password_mgr])¶ This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. class urllib2.HTTPDigestAuthHandler([password_mgr])¶ Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. class urllib2.ProxyDigestAuthHandler([password_mgr])¶ Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported. class urllib2.HTTPHandler¶ A class to handle opening of HTTP URLs. class urllib2.HTTPSHandler([debuglevel[, context]])¶ A class to handle opening of HTTPS URLs. context has the same meaning as for httplib.HTTPSConnection. Changed in version 2.7.9: context added. class urllib2.FileHandler¶ Open local files. class urllib2.FTPHandler¶ Open FTP URLs. class urllib2.CacheFTPHandler¶ Open FTP URLs, keeping a cache of open FTP connections to minimize delays. class urllib2.UnknownHandler¶ A catch-all class to handle unknown URLs. class urllib2.HTTPErrorProcessor¶ Process HTTP error responses. 20.6.1. Request Objects¶ The following methods describe all of Request‘s public interface, and so all must be overridden in subclasses. Request.add_data(data)¶ Set the Request data to data. This is ignored by all handlers except HTTP handlers — and there it should be a byte string, and will change the request to be POST rather than GET. Request.get_method()¶ Return a string indicating the HTTP request method. This is only meaningful for HTTP requests, and currently always returns 'GET' or 'POST'. Request.has_data()¶ Return whether the instance has a non-None data. Request.get_data()¶ Return the instance’s data. Request.add_header(key, val)¶ Add another header to the request. Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server. Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the key collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header. Request.add_unredirected_header(key, header)¶ Add a header that will not be added to a redirected request. New in version 2.4. Request.has_header(header)¶ Return whether the instance has the named header (checks both regular and unredirected). New in version 2.4. Request.get_full_url()¶ Return the URL given in the constructor. Request.get_type()¶ Return the type of the URL — also known as the scheme. Request.get_host()¶ Return the host to which a connection will be made. Request.get_selector()¶ Return the selector — the part of the URL that is sent to the server. Request.get_header(header_name, default=None)¶ Return the value of the given header. If the header is not present, return the default value. Request.header_items()¶ Return a list of tuples (header_name, header_value) of the Request headers. Request.set_proxy(host, type)¶ Prepare the request by connecting to a proxy server. The host and type will replace those of the instance, and the instance’s selector will be the original URL given in the constructor. Request.get_origin_req_host()¶ Return the request-host of the origin transaction, as defined by RFC 2965. See the documentation for the Request constructor. Request.is_unverifiable()¶ Return whether the request is unverifiable, as defined by RFC 2965. See the documentation for the Request constructor. 20.6.2. OpenerDirector Objects¶ OpenerDirector instances have the following methods: OpenerDirector.add_handler(handler)¶ handler should be an instance of BaseHandler. The following methods are searched, and added to the possible chains (note that HTTP errors are a special case). protocol_open — signal that the handler knows how to open protocol URLs. http_error_type — signal that the handler knows how to handle HTTP errors with HTTP error code type. protocol_error — signal that the handler knows how to handle errors from (non-http) protocol. protocol_request — signal that the handler knows how to pre-process protocol requests. protocol_response — signal that the handler knows how to post-process protocol responses. OpenerDirector.open(url[, data][, timeout])¶ Open the given url (which can be a request object or a string), optionally passing the given data. Arguments, return values and exceptions raised are the same as those of urlopen() (which simply calls the open() method on the currently installed global OpenerDirector). The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS and FTP connections). Changed in version 2.6: timeout was added. OpenerDirector.error(proto[, arg[, ...]])¶ Handle an error of the given protocol. This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific). The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the http_error_*() methods of the handler classes. Return values and exceptions raised are the same as those of urlopen(). OpenerDirector objects open URLs in three stages: The order in which these methods are called within each stage is determined by sorting the handler instances. Every handler with a method named like protocol_request has that method called to pre-process the request. Handlers with a method named like protocol_open are called to handle the request. This stage ends when a handler either returns a non-None value (ie. a response), or raises an exception (usually URLError). Exceptions are allowed to propagate. In fact, the above algorithm is first tried for methods named default_open(). If all such methods return None, the algorithm is repeated for methods named like protocol_open. If all such methods return None, the algorithm is repeated for methods named unknown_open(). Note that the implementation of these methods may involve calls of the parent OpenerDirector instance’s open() and error() methods. Every handler with a method named like protocol_response has that method called to post-process the response. 20.6.3. BaseHandler Objects¶ BaseHandler objects provide a couple of methods that are directly useful, and others that are meant to be used by derived classes. These are intended for direct use: BaseHandler.add_parent(director)¶ Add a director as parent. BaseHandler.close()¶ Remove any parents. The following attributes and methods should only be used by classes derived from BaseHandler. Note The convention has been adopted that subclasses defining protocol_request() or protocol_response() methods are named *Processor; all others are named *Handler. BaseHandler.parent¶ A valid OpenerDirector, which can be used to open using a different protocol, or handle errors. BaseHandler.default_open(req)¶ This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs. This method, if implemented, will be called by the parent OpenerDirector. It should return a file-like object as described in the return value of the open() of OpenerDirector, or None. It should raise URLError, unless a truly exceptional thing happens (for example, MemoryError should not be mapped to URLError). This method will be called before any protocol-specific open method. BaseHandler.protocol_open(req) (“protocol” is to be replaced by the protocol name.) This method is not defined in BaseHandler, but subclasses should define it if they want to handle URLs with the given protocol. This method, if defined, will be called by the parent OpenerDirector. Return values should be the same as for default_open(). BaseHandler.unknown_open(req)¶ This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it. This method, if implemented, will be called by the parent OpenerDirector. Return values should be the same as for default_open(). BaseHandler.http_error_default(req, fp, code, msg, hdrs)¶ This method is not defined in BaseHandler, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors. It will be called automatically by the OpenerDirector getting the error, and should not normally be called in other circumstances. req will be a Request object, fp will be a file-like object with the HTTP error body, code will be the three-digit code of the error, msg will be the user-visible explanation of the code and hdrs will be a mapping object with the headers of the error. Return values and exceptions raised should be the same as those of urlopen(). BaseHandler.http_error_nnn(req, fp, code, msg, hdrs)¶ nnn should be a three-digit HTTP error code. This method is also not defined in BaseHandler, but will be called, if it exists, on an instance of a subclass, when an HTTP error with code nnn occurs. Subclasses should override this method to handle specific HTTP errors. Arguments, return values and exceptions raised should be the same as for http_error_default(). BaseHandler.protocol_request(req) (“protocol” is to be replaced by the protocol name.) This method is not defined in BaseHandler, but subclasses should define it if they want to pre-process requests of the given protocol. This method, if defined, will be called by the parent OpenerDirector. req will be a Request object. The return value should be a Request object. BaseHandler.protocol_response(req, response) (“protocol” is to be replaced by the protocol name.) This method is not defined in BaseHandler, but subclasses should define it if they want to post-process responses of the given protocol. This method, if defined, will be called by the parent OpenerDirector. req will be a Request object. response will be an object implementing the same interface as the return value of urlopen(). The return value should implement the same interface as the return value of urlopen(). 20.6.4. HTTPRedirectHandler Objects¶ Note Some HTTP redirections require action from this module’s client code. If this is the case, HTTPError is raised. See RFC 2616 for details of the precise meanings of the various redirection codes. HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)¶ Return a Request or None in response to a redirect. This is called by the default implementations of the http_error_30*() methods when a redirection is received from the server. If a redirection should take place, return a new Request to allow http_error_30*() to perform the redirect to newurl. Otherwise, raise HTTPError if no other handler should try to handle this URL, or return None if you can’t but another handler might. Note The default implementation of this method does not strictly follow RFC 2616, which says that 301 and 302 responses to POST requests must not be automatically redirected without confirmation by the user. In reality, browsers do allow automatic redirection of these responses, changing the POST to a GET, and the default implementation reproduces this behavior. HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)¶ Redirect to the Location: or URI: URL. This method is called by the parent OpenerDirector when getting an HTTP ‘moved permanently’ response. HTTPRedirectHandler.http_error_302(req, fp, code, msg, hdrs)¶ The same as http_error_301(), but called for the ‘found’ response. HTTPRedirectHandler.http_error_303(req, fp, code, msg, hdrs)¶ The same as http_error_301(), but called for the ‘see other’ response. HTTPRedirectHandler.http_error_307(req, fp, code, msg, hdrs)¶ The same as http_error_301(), but called for the ‘temporary redirect’ response. 20.6.5. HTTPCookieProcessor Objects¶ New in version 2.4. HTTPCookieProcessor instances have one attribute: HTTPCookieProcessor.cookiejar¶ The cookielib.CookieJar in which cookies are stored. 20.6.6. ProxyHandler Objects¶ ProxyHandler.protocol_open(request) (“protocol” is to be replaced by the protocol name.) The ProxyHandler will have a method protocol_open for every protocol which has a proxy in the proxies dictionary given in the constructor. The method will modify requests to go through the proxy, by calling request.set_proxy(), and call the next handler in the chain to actually execute the protocol. 20.6.7. HTTPPasswordMgr Objects¶ These methods are available on HTTPPasswordMgr and HTTPPasswordMgrWithDefaultRealm objects. HTTPPasswordMgr.add_password(realm, uri, user, passwd)¶ uri can be either a single URI, or a sequence of URIs. realm, user and passwd must be strings. This causes (user, passwd) to be used as authentication tokens when authentication for realm and a super-URI of any of the given URIs is given. HTTPPasswordMgr.find_user_password(realm, authuri)¶ Get user/password for given realm and URI, if any. This method will return (None, None) if there is no matching user/password. For HTTPPasswordMgrWithDefaultRealm objects, the realm None will be searched if the given realm has no matching user/password. 20.6.8. AbstractBasicAuthHandler Objects¶ AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)¶ Handle an authentication request by getting a user/password pair, and re-trying the request. authreq should be the name of the header where the information about the realm is included in the request, host specifies the URL and path to authenticate for, req should be the (failed) Request object, and headers should be the error headers. host is either an authority (e.g. &quot;python.org&quot;) or a URL containing an authority component (e.g. &quot;http://python.org/&quot;). In either case, the authority must not contain a userinfo component (so, &quot;python.org&quot; and &quot;python.org:80&quot; are fine, &quot;joe:password@python.org&quot; is not). 20.6.9. HTTPBasicAuthHandler Objects¶ HTTPBasicAuthHandler.http_error_401(req, fp, code, msg, hdrs)¶ Retry the request with authentication information, if available. 20.6.10. ProxyBasicAuthHandler Objects¶ ProxyBasicAuthHandler.http_error_407(req, fp, code, msg, hdrs)¶ Retry the request with authentication information, if available. 20.6.11. AbstractDigestAuthHandler Objects¶ AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)¶ authreq should be the name of the header where the information about the realm is included in the request, host should be the host to authenticate to, req should be the (failed) Request object, and headers should be the error headers. 20.6.12. HTTPDigestAuthHandler Objects¶ HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)¶ Retry the request with authentication information, if available. 20.6.13. ProxyDigestAuthHandler Objects¶ ProxyDigestAuthHandler.http_error_407(req, fp, code, msg, hdrs)¶ Retry the request with authentication information, if available. 20.6.14. HTTPHandler Objects¶ HTTPHandler.http_open(req)¶ Send an HTTP request, which can be either GET or POST, depending on req.has_data(). 20.6.15. HTTPSHandler Objects¶ HTTPSHandler.https_open(req)¶ Send an HTTPS request, which can be either GET or POST, depending on req.has_data(). 20.6.16. FileHandler Objects¶ FileHandler.file_open(req)¶ Open the file locally, if there is no host name, or the host name is 'localhost'. Change the protocol to ftp otherwise, and retry opening it using parent. 20.6.17. FTPHandler Objects¶ FTPHandler.ftp_open(req)¶ Open the FTP file indicated by req. The login is always done with empty username and password. 20.6.18. CacheFTPHandler Objects¶ CacheFTPHandler objects are FTPHandler objects with the following additional methods: CacheFTPHandler.setTimeout(t)¶ Set timeout of connections to t seconds. CacheFTPHandler.setMaxConns(m)¶ Set maximum number of cached connections to m. 20.6.19. UnknownHandler Objects¶ UnknownHandler.unknown_open()¶ Raise a URLError exception. 20.6.20. HTTPErrorProcessor Objects¶ New in version 2.4. HTTPErrorProcessor.http_response()¶ Process HTTP error responses. For 200 error codes, the response object is returned immediately. For non-200 error codes, this simply passes the job on to the protocol_error_code handler methods, via OpenerDirector.error(). Eventually, urllib2.HTTPDefaultErrorHandler will raise an HTTPError if no other handler handles the error. HTTPErrorProcessor.https_response()¶ Process HTTPS error responses. The behavior is same as http_response(). 20.6.21. Examples¶ In addition to the examples below, more examples are given in HOWTO Fetch Internet Resources Using urllib2. This example gets the python.org main page and displays the first 100 bytes of it: &gt;&gt;&gt; &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; f = urllib2.urlopen('http://www.python.org/') &gt;&gt;&gt; print f.read(100) &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt; &lt;?xml-stylesheet href=&quot;./css/ht2html Here we are sending a data-stream to the stdin of a CGI and reading the data it returns to us. Note that this example will only work when the Python installation supports SSL. &gt;&gt;&gt; &gt;&gt;&gt; import urllib2 &gt;&gt;&gt; req = urllib2.Request(url='https://localhost/cgi-bin/test.cgi', ... data='This data is passed to stdin of the CGI') &gt;&gt;&gt; f = urllib2.urlopen(req) &gt;&gt;&gt; print f.read() Got Data: &quot;This data is passed to stdin of the CGI&quot; The code for the sample CGI used in the above example is: #!/usr/bin/env python import sys data = sys.stdin.read() print 'Content-type: text-plain\n\nGot Data: &quot;%s&quot;' % data Use of Basic HTTP Authentication: import urllib2 # Create an OpenerDirector with support for Basic HTTP Authentication... auth_handler = urllib2.HTTPBasicAuthHandler() auth_handler.add_password(realm='PDQ Application', uri='https://mahler:8092/site-updates.py', user='klem', passwd='kadidd!ehopper') opener = urllib2.build_opener(auth_handler) # ...and install it globally so it can be used with urlopen. urllib2.install_opener(opener) urllib2.urlopen('http://www.example.com/login.html') build_opener() provides many handlers by default, including a ProxyHandler. By default, ProxyHandler uses the environment variables named &lt;scheme&gt;_proxy, where &lt;scheme&gt; is the URL scheme involved. For example, the http_proxy environment variable is read to obtain the HTTP proxy’s URL. This example replaces the default ProxyHandler with one that uses programmatically-supplied proxy URLs, and adds proxy authorization support with ProxyBasicAuthHandler. proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'}) proxy_auth_handler = urllib2.ProxyBasicAuthHandler() proxy_auth_handler.add_password('realm', 'host', 'username', 'password') opener = urllib2.build_opener(proxy_handler, proxy_auth_handler) # This time, rather than install the OpenerDirector, we use it directly: opener.open('http://www.example.com/login.html') Adding HTTP headers: Use the headers argument to the Request constructor, or: import urllib2 req = urllib2.Request('http://www.example.com/') req.add_header('Referer', 'http://www.python.org/') # Customize the default User-Agent header value: req.add_header('User-Agent', 'urllib-example/0.1 (Contact: . . .)') r = urllib2.urlopen(req) OpenerDirector automatically adds a User-Agent header to every Request. To change this: import urllib2 opener = urllib2.build_opener() opener.addheaders = [('User-agent', 'Mozilla/5.0')] opener.open('http://www.example.com/') Also, remember that a few standard headers (Content-Length, Content-Type and Host) are added when the Request is passed to urlopen() (or OpenerDirector.open()). Table Of Contents 20.6. urllib2 — extensible library for opening URLs 20.6.1. Request Objects 20.6.2. OpenerDirector Objects 20.6.3. BaseHandler Objects 20.6.4. HTTPRedirectHandler Objects 20.6.5. HTTPCookieProcessor Objects 20.6.6. ProxyHandler Objects 20.6.7. HTTPPasswordMgr Objects 20.6.8. AbstractBasicAuthHandler Objects 20.6.9. HTTPBasicAuthHandler Objects 20.6.10. ProxyBasicAuthHandler Objects 20.6.11. AbstractDigestAuthHandler Objects 20.6.12. HTTPDigestAuthHandler Objects 20.6.13. ProxyDigestAuthHandler Objects 20.6.14. HTTPHandler Objects 20.6.15. HTTPSHandler Objects 20.6.16. FileHandler Objects 20.6.17. FTPHandler Objects 20.6.18. CacheFTPHandler Objects 20.6.19. UnknownHandler Objects 20.6.20. HTTPErrorProcessor Objects 20.6.21. Examples Previous topic 20.5. urllib — Open arbitrary resources by URL Next topic 20.7. httplib — HTTP protocol client This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 20. Internet Protocols and Support » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 11, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160726104548#index"
                   NS1:content=" Skip to content This repository Pull requests Issues Gist New repository Import repository New organization This repository New issue @Britnell Signed in as Britnell Your profile Your stars Explore Integrations Help Settings Sign out Stop ignoring 2 Notifications Not watching Be notified when participating or @mentioned. Watch Watching Be notified of all conversations. Unwatch Ignoring Never be notified. Stop ignoring Unstar 0 Star 0 Fork Where should we fork this repository? Loading 31 GreatLakesEnergy/emonpi forked from openenergymonitor/emonpi Code Issues 0 Pull requests 3 Wiki Pulse Graphs emonPi - Raspberry Pi Energy Monitoring Shield 436 commits 10 branches 3 releases 6 contributors Eagle 90.2% Arduino 5.4% Shell 2.3% Python 1.6% Other 0.5% Eagle Arduino Shell Python Other Clone or download Use SSH Clone with HTTPS Use Git or checkout with SVN using the web URL. Use HTTPS Clone with SSH Use an SSH key and passphrase from account. Open in Desktop Download ZIP Create new file Upload files Find file Branch: beaglebone Switch branches/tags Branches Tags beaglebone config-file-path-service development emonTx_hub_with_DC_hall_class install_release_tag lcd_config_env master pulsecount_dev relay-dev testing Create branch: from ‘beaglebone’ v0.5 emonSD-17Jun2015 V1.0 Nothing to show New pull request Pull request Compare This branch is 114 commits ahead, 493 commits behind openenergymonitor:master. Latest commit 1c47a4d 2 days ago @jlark jlark committed on GitHub Merge pull request #19 from bumi/config-downloader … Add ConfigDownloader to download emonpo config file from the server Permalink Failed to load latest commit information. Atmega328 Adding relays driver 2 months ago Python_test_scripts cleanup 2 years ago gprs adding reset bash script for monit 8 days ago hardware Adding relays driver 2 months ago lcd Merge pull request #19 from bumi/config-downloader 2 days ago shutdownpi Update Readme.md a year ago .gitignore fixing shutdown a year ago README.md Add link to SD card image download a year ago dhclient-script add dhclient-script mod a year ago emonPi_System_Diagram.png add updated diagram a year ago emoncms9install updating repo everyday 4 days ago emoncmsinstall modify paths and usernames for bbb 9 months ago emoncmspi-logo.png add emoncms emonpi logo a year ago emoncmsupdate disabling unnecessary services, fixing some bugs 4 days ago emonfirmwareinstall adding USB_hub script to work with BMV and wifi dongle 29 days ago emonpiupdate disabling unnecessary services, fixing some bugs 4 days ago factoryreset changing paths form bbb to debian 9 months ago imagebuild.md remove old info 9 months ago install disabling unnecessary services, fixing some bugs 4 days ago install_wifi_autoreset.sh removing typing error 19 days ago raspbian_slimdown.sh frees 137Mb 10 months ago software.md Update software.md 10 months ago update disabling unnecessary services, fixing some bugs 4 days ago usb_reset.sh adding USB_hub script to work with BMV and wifi dongle 29 days ago usbreset.c Cleaning repo and fixing bugs in wifi autoreset 19 days ago userguide.md Update userguide.md a year ago wifi-check add wifi check file a year ago Drop to upload your files README.md emonPi emonPi - Raspberry Pi Energy Monitoring Unit emonpi_diagram User guide Setup Guide Ready-to-go SD card image info &amp; download Technical: Hardware Technical Wiki Technical Software Stack Docs Open-Hardware: Schematic &amp; Board CAD Design Files Community &amp; Support OpenEnergyMonitor Forums emonPi Hardware Development Thread OpenEnergyMonitor Shop Support: support@openenergymonitor.zendesk.com License The hardware designs (schematics and CAD files) are licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. The firmware is released under the GNU GPL V3 license The documentation is subject to GNU Free Documentation License The hardware designs follow the terms of the OSHW (Open-source hardware) Statement of Principles 1.0. Disclaimer OUR PRODUCTS AND ASSEMBLY KITS MAY BE USED BY EXPERIENCED, SKILLED USERS, AT THEIR OWN RISK. TO THE FULLEST EXTENT PERMISSIBLE BY THE APPLICABLE LAW, WE HEREBY DISCLAIM ANY AND ALL RESPONSIBILITY, RISK, LIABILITY AND DAMAGES ARISING OUT OF DEATH OR PERSONAL INJURY RESULTING FROM ASSEMBLY OR OPERATION OF OUR PRODUCTS. Your safety is your own responsibility, including proper use of equipment and safety gear, and determining whether you have adequate skill and experience. OpenEnergyMonitor and Megni registered partnership disclaims all responsibility for any resulting damage, injury, or expense. It is your responsibility to make sure that your activities comply with applicable laws, including copyright. Always check the webpage associated with each unit before you get started. There may be important updates or corrections. All use of the instructions, kits, projects and suggestions given both by megni.co.uk, openenergymonitor.org and shop.openenergymonitor.org are to be used at your own risk. The technology (hardware , firmware and software) are constantly changing, documentation (including build guide and instructions) may not be complete or correct. If you feel uncomfortable with assembling or using any part of our system, return it to us for a full refund. Contact GitHub API Training Shop Blog About © 2016 GitHub, Inc. Terms Privacy Security Status Help Something went wrong with that request. Please try again. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160720095147#index"
                   NS1:content=" LOGIN Lost your password? Connect with: Facebook Twitter Google Logging In SIGN UP Create an Inhabitat account Sign up for weekly newsletter I agree to receive emails from the site. I can withdraw my consent at any time by unsubscribing. Do you live in Canada? Register here. Connect with: Facebook Twitter Google Signing Up LOST PASSWORD Checking for Account instagram twitter facebook pinterest user Log In Sign Up opener News Environment Architecture Design Innovation More About Mission Submit a story Advertise with us Contact Press Legal Privacy Policy Cookie Policy Log In Sign Up How To: Make a Bird Feeder for Small Spaces With Recycled Materials Innovation 05/28/2014 under DIY, Features, Green Materials, Innovation, Recycled Materials by Emily Peckenham 0 Comments by Emily Peckenham View Slideshow If you live in an urban apartment, finding access to outdoor space can often be a challenge. But, as other creative urban gardeners and nature lovers have shown, even the smallest of spaces can be turned in a tiny oasis. If all you have is a fire escape, hang up a few bird feeders and you'll have a flurry of feathered visitors in no time. In this simple how-to, we show you how to create a fun, recycled feeder that you can hang from your fire escape or windowsill. It costs next to nothing and anyone can do it—all you need to do is dig through your recycling bin and follow these 8 easy steps! Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step One: Gather the materials Gather the materials you’ll need to create your recycled bird feeder. We used: A recycled clean plastic peanut-butter jar with a screw-on lid (any size will do) Lid from a large plastic yogurt container Dremel (you can also use a small electric drill or make do with a Swiss Army Knife, nail, or utility knife) Washer or nut Sturdy string or twine Scissors Birdseed Gorilla Glue or similar strong glue Stick (you could use a bamboo skewer or even a long pencil). Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Two: Drill Holes for the String Drill a small hole in the middle of the yogurt lid, the jar and the jar lid. The hole needs only be big enough to fit the string. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Three: Cut Feeding Holes Next, make holes for the birds to feed through. Sketch out 3-4 holes with a marker before you begin cutting – make each hole slightly bigger than a half-dollar. Carefully cut out the holes with a utility knife and discard the plastic pieces you cut out. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Four: Create a perch Using a marker and ruler, mark off two spots exactly opposite from each other slightly below your feeding holes. This is where you will thread through your stick, or feeding perch. Use your drill to make two holes that are sized correctly for the circumference of the stick you are using. How much money can a solar roof save you in Kigali? Profit from your roof space: find local deals on solar in your area, eliminate your power bill, and join the solar revolution. Calculate My Savings! Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Five: String together your birdfeeder Approximate a length of string that is adequate to pass through your birdfeeder with an additional 6-8 inches for hanging, then double it by folding, and then cut your doubled length of string. Folding your piece of string in half, tie the washer or nut to the bottom. Thread the folded end of your string through your birdfeeder, beginning with the yogurt lid, then go through the jar, and finally pull the string through the jar lid. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Six: Attach Base and Perch Pull the string taut and place the lid on the peanut butter jar. Carefully glue the bottom of the jar to the yogurt lid. Next, thread the perch through the two holes you created and add a dab of the glue to each hole. Let the glue dry for an hour. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Seven: Add food to your birdfeeder Unscrew the lid and add the birdseed of your choice. As you see here, we used storebought birdseed mixed with peanut butter. Since we knew we were going to be hanging the birdfeeder on a fire escape, we used peanut butter to keep birdseed from falling into the shared yard below our window. If you aren’t worried about seeds scattering, you can fill it will plain birdseed and the yogurt lid will catch most of the extra seeds. Birdfeeder, How-to, Window, Upcycle, Recycled, Peanut Butter Jar, Urban, DIY, Fire Escape Step Eight: Hang it Up! Screw on the peanut butter jar lid, hang up your new recycled bird feeder, and wait for your new feathered friends to stop by for a snack! We tried hanging our bird feeder in a few different locations: here, outside our window hanging from the fire escape above. We also tested the feeder on the fire escape outside our window. We finally decided on hanging the feeder outside our window so we could see the birds when they come to visit. We used an over-the-door coat hook on the top of our window to hold the feeder. View Comments LEAVE A COMMENT You must be logged in to post a comment. Log In Login Remember Me Lost your password? Connect with: Facebook Twitter Google OR Signup with Inhabitat Sign me up for weekly Inhabitat updates Do you live in Canada? Register here. RECOMMENDED FOR YOU How To Save Money And Energy With The Right Window Treatments For Your Home architecture View Gallery (19) How to Find the Right Window Treatments to... crock-pot yogurt environment View Gallery (8) DIY: Make Your Own Yogurt in a Crock-Pot! DIY Plastic Bottle Bird Feeder design View Gallery (4) DIY: How to Make a Bird Feeder From a Plas... [Solar Roof Saving] Start Slideshow Share Pin Tweet + Design Share Pin Tweet + StartSlideshow &gt; How To: Make a Bird Feeder for Small Spaces With Recycled Mate... Share Pin Tweet Photo 1 of 12 Grow Up! How to Design Vertical Gardens for Tiny Spaces Design 03/05/2014 under carousel showcase, Design, DIY, Features, Gardening and Plants, Innovation, Recycled Materials by Catherine Winter-Hebert 4 Comments by Catherine Winter-Hebert View Slideshow If you’re one of the many people in the northern hemisphere who are counting down the days ’til springtime, chances are you may have also been daydreaming about gardening as well. March isn’t just one of the coldest months of the year—it’s also the month in which seed catalogs are sent out to green-thumbed folks everywhere, so plans can be made and plots can be mapped out in preparation for the luscious growing season ahead. If you happen to be lacking in yard space, there’s no need to feel left out! There are some brilliant ways to take full advantage of small spaces, and the key is to plant vertically. Vertical garden, urban gardening, vertical gardening, climbing plants, climbing food plants, edible climbersImage via Shutterstock Grow Up! As with any type of garden-planning, the very first thing you have to do is observe your space, so plan to spend a full day documenting your garden-to-be with a combination of photography and note-taking. Aim to wake a little before dawn so you can determine the first spot that gets early morning sunshine, and then take pictures every 30 minutes until the sun sets. This will allow you to determine the areas that get the most sunlight for the longest period of time and which remain shaded, so you can ensure that the light-gobbling plants get plenty of sunshine, and the shade lovers don’t get sunburned. When it comes to assembling a vertical garden, you don’t have to go out and spend a crazy amount of money on the latest, coolest gadgets and gardening systems. Some of the most incredible green spaces are those that have been put together from found/up-cycled materials, and a trip around the neighborhood on recycling day may yield just the equipment that you need. Vertical garden, urban gardening, vertical gardening, pallet, pallet garden, pallet gardeningImage via Shutterstock Pallets &amp; Pockets These are ideal for growing various types of greens (lettuce, spinach, kale, etc.), herbs, and edible flowers. The key with these is to take advantage of sunny spots like the side of a building, the area alongside a fence, or the brightest part of your balcony/patio and maximize space and yield by cramming that entire space full of plants. Pallets are ideal for this, as they can be divided into separate compartments for different plant species, and they’re sturdy enough to protect your plants in case there are any summer storms or high winds. They’re also ridiculously cheap: you can probably even score some for free. Vertical garden, urban gardening, vertical gardening, shoe garden, shoe organizer garden, shoe holder planterImage © GardenWeb Have you ever seen one of those divided fabric shoe holders that can be hung in a closet or on the back of a door? Each of those little pockets can be stuffed with compost-rich soil and used to grow food plants. Imagine an entire fence decked out like that? Vertical garden, urban gardening, vertical gardening, gutter plants, lettuce, edible climbersImage via Shutterstock Gutters, Bottles &amp; Cans Gutters tend to get the short end of the stick as far as gardening is concerned, since the only time people seem to associate them with greenery is when they have to replace their rooftop gutters because trees are growing in them. You can actually grow a lot of food in gutters, whether you latch several of them to the side of a building, or hang sections of them one above the other on chains or durable rope. Just drill some holes into the bottom of each section for adequate drainage, add compost-rich potting soil, and tuck your plants into them. You do have to ensure that the plants you choose don’t require a lot of root space, so aim for assorted lettuces and mixed herbs rather than root vegetables. Vertical garden, urban gardening, vertical gardening, herbs, hanging planter, bottle herbsImage via Shutterstock You can also take full advantage of window ledges and balcony railings, and hang all manner of planters from them. In addition to hanging pop-bottle planters, you grow herbs in used water bottles, or punch drainage holes in aluminum cans and sling those around as well. As long as you leave enough space above and below your hanging containers so the other plants get adequate light, you can create an entire mosaic of food plants rising as high as you can reach. Vertical garden, urban gardening, vertical gardening, climbing plants, climbing tomatoes, edible climbersImage via Shutterstock Lattices, Webs &amp; Trellises If the best spot you have for growing food happens to be a sunny outdoor wall, you’re actually in luck: many plants love to climb, including pole beans, peas, tomatoes, nasturtiums, squashes, cucumbers, hops, and even melons. You can use just about anything to help coax your plants skyward, from sections of fence lattice to lengths of plastic mesh. I once used a broken futon frame for my beans, and that worked absolute wonders. Ultimately, you just need some sort of frame so the little tendril thingers that your plants use to climb with have something to cling to on their way up. Vertical garden, urban gardening, vertical gardening, climbing plants, climbing food plants, bamboo polesImage via Shutterstock These structures don’t just have to be propped up against a wall either: if you have a small patch of yard space, you can lash bamboo poles together for your veg to climb, create trellises from string and wooden frames, or even make a climbing bean/pea tipi from old broom handles. Be creative, use whatever you have on hand, and you’ll be amazed at just how much you can grow. View Comments (4) LEAVE A COMMENT You must be logged in to post a comment. Log In Login Remember Me Lost your password? Connect with: Facebook Twitter Google OR Signup with Inhabitat Sign me up for weekly Inhabitat updates Do you live in Canada? Register here. 4 thoughts on “Grow Up! How to Design Vertical Gardens for Tiny Spaces” Ozgur Katamaran July 21, 2015 at 12:33 pm Types and benefits of Vertical Gardens. 62 plants for Vertical Gardens http://cdn.intechopen.com/pdfs-wm/45441.pdf fencing2habitat October 16, 2014 at 11:27 pm What an incredible garden! Great to see that recycle materials and pallet can design fencing into edible vertical garden. Your tips are very innovative and pocket able. As I provide fencing to residential and commercial buildings so my clients can take the advantage of your tips. Nice share. Justin Lawless May 20, 2014 at 10:54 am I remember this post, or something like it from last year and again am left wondering specifically about the upcycled plastic bottles growing herbs... whether or not bad things leaching from the plastic would make their way into the edibles. Khaled Majouji March 7, 2014 at 8:12 pm Looks like you guys have published the picture of my salad fence :) wonder where you came across it though :) RECOMMENDED FOR YOU Potted Herbs design View Gallery (9) DIY: How to Plant a Personal Garden In a S... Easy Edible Gardening Projects for spring botanical View Gallery (14) 5 surprisingly easy edible gardening proje... Spring garden planning agriculture View Gallery (8) HOW TO: grow your best spring garden yet Start Slideshow Share Pin Tweet + Design Share Pin Tweet + StartSlideshow &gt; Grow Up! How to Design Vertical Gardens for Tiny Spaces Share Pin Tweet + Photo 1 of 12 7 creative urban gardening hacks for spring DIY 04/12/2016 under carousel showcase, DIY, Features, Gardening and Plants, Urban Farming by Emily Peckenham 0 Comments by Emily Peckenham View Slideshow Spring brings warmer temperatures and longer days, along with a plethora of blooms, buds, and leaves. Those with yards can really dive into gardening this time of year clearing away leaves and winter debris, and starting seedlings for summer. If you live in the city, however, you might find yourself spending time indoors, but you don't have to. Even if you don't have a large outdoor space, you can still take advantage of the increasing daylight hours with these 7 creative gardening projects. gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soil ®Flickr/Yutaka Seki Cultivate a jar of sprouts Sprouts You know those delicious, crunchy, sometimes spicy little green strands you eat in sandwiches and salads? Sprouts are one of the easiest veggies you can grow in even the tiniest of spaces with absolutely no access to sunlight or outdoor space. All you really need is a large sanitized glass jar, a piece of cheesecloth, water, a handful of seeds, and a few days’ time. You can purchase or order sprouts online from seed supply companies or some health and natural food stores. Alfalfa sprouts are of the most common sprouts, and you can spice up your sprout mix by adding in some flavorful broccoli or radish sprouts as well. Make sure you buy seeds that are meant for sprouting and eating, since some garden seeds could be chemically treated. All you’ll do is soak the seeds overnight in the jar, add a rubber band to hold on the cheesecloth, then rinse and drain them twice per day until they’re ready to eat in 2-3 days. gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soil ®Flickr/Niall McNulty Propagate houseplants If you can’t garden outdoors, garden indoors instead. Spring is a great time to propagate your favorite houseplants, since the longer daylight hours stimulate their growth. You can snip a leaf, vine, or stem from many common houseplants and simply place it in a vase of water for a couple of weeks until you see roots beginning to form. Not only is this a great way to get new plants for free, it’s fun to trade cuttings with friends to diversify your collection. Once you see roots forming in the water, you can plant the cutting in a pot or dish filled with potting soil. Houseplants that are easy to propagate by snipping off a segment of vine include pothos vines, spider plants, monsteras, philodendrons, and African violets. Succulents are also easy. Simply snip off a section of a succulent that’s become “leggy” (the stem has become thin and long) and let it dry out for a day or two. Then place it in a vase of water and wait for roots to appear before planting it in a new dish. gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soil Grow veggies from cuttings If you don’t have the space to grow your own veggies in the city, you can still cultivate fresh shoots right in your own kitchen on a sunny windowsill. Next time you pick up spring onions, ginger, or carrots from the farmer’s market, don’t throw away the cuttings – you can use them again. Intrigued? Check out our tutorial to learn how to regrow several different herbs and veggies or how you can create your own at-home “scallion farm“. urban gardening, urban gardening ideas, gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soilImage © Josh Leo Craft a terrarium Do you sometimes feel like a cave-dweller because your apartment is small and dark? It doesn’t mean you can’t cultivate some greenery to make your space more cozy. Terrariums are a terrific indoor gardening option for those apartments that lack good natural light. Mosses, ferns, ground creepers, and vines thrive in a cool, dark, moist environment. Scavenge your recycling bin or curio shelf for a unique glass vessel to plant in, and then hit your local gardening store, nursery, or hardware store for a few simple ingredients, including potting soil, gravel, moss, and a few fern seedlings. Read more about how to choose plants that will thrive in your specific living conditions in our primer on terrariums. gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soil ®Flickr/Alice Henneman Build an indoor herb garden If you have a room that gets consistent direct, natural sunlight, you could actually grow your own edible herbs indoors, and spring is a great time to sprout the seedlings. Herbs like basil, mint, and parsley will thrive indoors. But even if you have good light, that doesn’t solve the problem of space; if you don’t have enough windowsills or tabletops to host a collection of of plant pots, we have a solution for that too! With a handful of mason jars, a few pieces of wood, and some metal hose clamps from the hardware store, you can actually create your own delightful wall-mounted herb garden this spring. Read our full tutorial for more details and step-by-step instructions. gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soil ®Flickr/Dogeared Grow delicate microgreens Delicious microgreens are showing up everywhere from salads to smoothies and juices, and are now a presentation staple at fine restaurants. Did you know they’re actually not all that complicated to grow from scratch? Instead of dropping big bucks on a plastic packaged container of delicate microgreens at your local gourmet grocery, try growing them yourself. You’ll need seeds, some potting soil, and a flat shallow tray (a reused food container or a baking dish would be suitable). You’ll want to source edible, non-chemically treated salad seeds – some fun greens to grow include arugula, tatsoi, mustard greens, radishes, and lettuces. You can shop online or via seed and gardening catalogs. The difference between sprouts and microgreens is that the latter are ready to snip and eat once they’ve leafed out and started to photosynthesize – thus, you’ll need to find a sunny windowsill for this project. Read more on how to get started in this tutorial. gardening, urban, apartment, greenery, spring, decor, sprouting, seed bombs, guerrilla gardening, herbs, mason jars, alfalfa, terrariums, microgreens, DIY, propagating, succulents, potting soil ®Flickr/Cedim Throw seed bombs If you are really itching to garden outdoors this spring, you could make your urban outdoor environment greener with seed bombs. These funny looking marble-shaped objects are actually made from a variety of flower and plant seeds mixed with a binder (usually comprised of compost and clay) to keep it all together. You can toss, bury, or plant them anywhere you see a patch of dirt, including abandoned lots, sad and empty planter boxes, scraggly looking median strips, or the edges of parking lots. Whether you call it guerrilla gardening or tactical urbanism, with a little luck and a shower or two of rain, you could singlehandedly contribute to creating a green bright spot in an abandoned corner of your city. Lead image (modified) ®Flickr/Bill Selak View Comments LEAVE A COMMENT You must be logged in to post a comment. Log In Login Remember Me Lost your password? Connect with: Facebook Twitter Google OR Signup with Inhabitat Sign me up for weekly Inhabitat updates Do you live in Canada? Register here. RECOMMENDED FOR YOU DIY Seed Saving Part 1 design View Gallery (9) Seed-Saving Part 1: Harvesting and Storing... Fall-Seeds-for-Spring-Veg design View Gallery (13) 10 Vegetables to Plant Now for a Bountiful... How to start a seed bank design View Gallery (7) DIY: How to start a community seed bank Start Slideshow Share Pin Tweet + Design Share Pin Tweet + StartSlideshow &gt; 7 creative urban gardening hacks for spring Share Pin Tweet + Photo 1 of 12 Loading... Loading... JOIN THE INHABITAT NEWSLETTER Choose your location preference: San Francisco London New York Los Angeles "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160717093112#index"
                   NS1:content=" LOGIN Lost your password? Connect with: Facebook Twitter Google Logging In SIGN UP Create an Inhabitat account Sign up for weekly newsletter I agree to receive emails from the site. I can withdraw my consent at any time by unsubscribing. Do you live in Canada? Register here. Connect with: Facebook Twitter Google Signing Up LOST PASSWORD Checking for Account instagram twitter facebook pinterest user Log In Sign Up opener News Environment Architecture Design More Innovation About Mission Submit a story Advertise with us Contact Press Legal Privacy Policy Cookie Policy Log In Sign Up DIY: Learn How to Make a Knotted String Hanging Planter from Recycled Materials Design 05/18/2015 under carousel showcase, Design, DIY, Features, Gardening and Plants by Emily Peckenham 0 Comments by Emily Peckenham View Slideshow Instead of lugging your recyclables outside for collection this week, why not rummage through to gather materials for this unique hanging planter project? For this fun DIY decoration, you'll use string to knot a custom plant holder for a recycled container. Jam jars, plastic takeout containers, and yogurt cups can all be repurposed into a modern and functional hanging planter. DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 1: Gather your materials Recycled containers (glass jam or sauce jars, plastic takeout containers, or yogurt cups are ideal) String or twine (cotton, hemp, or nylon). We used basic cotton twine but you could punch it up with colored nylon string Plants (succulents and vines work well) Sand and/or pebbles for plant drainage Potting soil Scissors DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 2: Cut string Cut twine or string into 8 equal lengths of approximately 24-34 inches (depending on how large your container is). Knot the ends. DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 3: Start knotting Lay out the string on a flat surface and divide the 8 strings into 4 pairs. Knot each pair approximately 3 inches from the base. Take the two ends (left and right) and knot them as well to complete the circle. DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 4: Keep knotting Keep creating a row of knots by repeating this step 2-4 inches above your first row of knot (depending on how wide your container is – wider containers will require a larger space). Do this by knotting together two strings from alternating rows so that your second row of knots consists of the opposite pair of strings (see picture). Remember to take the two spare ends and knot them together after each row to complete the circle. How much money can a solar roof save you in Kigali? Profit from your roof space: find local deals on solar in your area, eliminate your power bill, and join the solar revolution. Calculate My Savings! DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 5: Test the size Test the size of your knotted plant hanger by draping it over your container. Then you can either add additional knots or finish the plant holder. DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 6: Planting Plant your succulent, vine, cactus, or other plant. Start by adding a layer of sand and/or pebbles to the bottom of the container. This will promote healthy drainage for your plant since these containers do not have an open bottom. Cover the pebbles with a layer of potting soil and gently add your plant. DIY, recycled, string, planter, succulent, interior, how-to, knotted, plants, decoration STEP 7: Hang your planter Gently pull your new knotted string plant hanger up over your recycled container. The final step is knotting all 8 strands together at the top for hanging. Add a hook to hang from a window, shelf, or the ceiling. Variations: You can adapt this plant holder method as creatively as you like. Try a large plant container. Try a tiny plant container. Try a rock or other natural object. View Comments LEAVE A COMMENT You must be logged in to post a comment. Log In Login Remember Me Lost your password? Connect with: Facebook Twitter Google OR Signup with Inhabitat Sign me up for weekly Inhabitat updates Do you live in Canada? Register here. RECOMMENDED FOR YOU twine crafts design View Gallery (7) DIY: 3 Cool Crafts to Make with Household... Upcycled-Xmas-Cards design View Gallery (11) DIY: Recycle last year's Christmas cards i... Bird-Feeder diy View Gallery (12) How To: Make a Bird Feeder for Small Space... [Solar Roof Saving] Start Slideshow Share Pin Tweet + Design Share Pin Tweet + StartSlideshow &gt; DIY: Learn How to Make a Knotted String Hanging Planter from R... Share Pin Tweet Photo 1 of 12 Loading... Loading... SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. See the Facebook Help Center for more information. recaptcha status Recaptcha requires verification I'm not a robot reCAPTCHA Privacy - Terms recaptcha status Recaptcha requires verification I'm not a robot reCAPTCHA Privacy - Terms "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160711210418#index"
                   NS1:content=" Menu Topics Biomedicine Business Computing Energy Mobile Robotics 10 Breakthrough Technologies 35 Innovators Under 35 50 Smartest Companies Views Views from the Marketplace Top Stories Magazine Business Reports More Events Special Publications MIT News Magazine Help/Support Log in / Register Subscribe Renew your subscription days to renew your subscription Log in / Register Search Energy Lake Kivu’s Great Gas Gamble In a first-of-its-kind endeavor, electricity-starved Rwanda and the Democratic Republic of Congo are trying to get power from a lake—and avert catastrophe. by Jonathan W. Rosen April 16, 2015 Eighty percent of the people in Rwanda and TK percent in the DRC do not have electricity. It’s a Friday afternoon on the Rwandan side of Lake Kivu, and in what was once a quiet cove, a daring venture is taking shape. Floating just offshore, like a giant mechanical swan, is a nearly completed gas extraction platform: 3,000 tons of concrete and stainless steel that will soon begin capturing a resource not found at this scale in any other lake in the world. Dissolved within Kivu, which straddles the border of Rwanda and the Democratic Republic of Congo (DRC), are approximately 60 billion cubic meters of methane and 300 billion cubic meters of carbon dioxide. The gases, which come from nearby volcanic activity and bacteria decomposing organic material in the lake, represent both danger and economic potential. If extracted, Kivu’s methane could be used to add up to 960 megawatts of electricity-generating capacity, more than six times what Rwanda has now. For both Rwanda and the eastern DRC, which face crippling power shortages and limited options for expanding their electric grids, that could be an economic game changer, supporting new industries and offering a chance to alleviate searing poverty. If the extraction is done properly and the countries can coöperate, it could even help improve their troubled relations and advance stability in a region long beset by turmoil. A safety inspector examines the new barge on shore in Kibuye, Rwanda. Just as critical, removing Kivu’s methane may prevent a possible catastrophe. With methane concentrations rising, scientists warn that Kivu will eventually experience a deadly phenomenon known as an overturn. Also known as a limnic eruption, an overturn can occur if the pressure of the gases in a lake exceeds the pressure of the water at a given depth, causing a chain reaction that releases them with violent results. Only two limnic eruptions are known to have occurred in recorded history—both in small lakes in Cameroon in the 1980s. In the deadlier of the two episodes, at Lake Nyos in 1986, more than 1,700 people were asphyxiated when a cloud of carbon dioxide, which burst from the lake along with a 100-meter fountain of water,spread as far as 25 kilometers from shore. Kivu contains a thousand times more gas than Nyos: if even part of it escaped this way, more than two million people living near its shores would be at risk. In Kivu it’s the methane, rather than the carbon dioxide, that’s most likely to trigger a gas eruption. That adds urgency to the prospect of harnessing its energy potential, something both Rwanda and the DRC have long sought to do. After decades of little or no progress, gas extraction efforts in both countries have finally gained momentum. On my visit to the lake in February, more than a hundred orange-vested workers were putting the final touches on the first phase of KivuWatt, a $200 million project owned by the U.S. energy firm Contour Global. The lake’s first industrial-scale gas-fueled power project, it is expected to add 25 megawatts of generating capacity by the middle of this year and eventually scale up to 100. Another U.S. company, Symbion Power, is set to begin construction of a 50-megawatt project on the Rwandan side of the lake by the end of the year. In the DRC’s distant capital, Kinshasa, the Ministry of Hydrocarbons is now reviewing bids for that country’s first Kivu gas concession. Getting the gas out correctly, however, will be tricky. Although the Rwandan government has operated a pilot gas-fired power plant at the lake since 2008, the process of extraction is novel and has been done only on a very small scale. While most experts agree that the lake’s methane should be kept from accumulating further in order to prevent a disaster by the end of the century, a few warn that certain extraction processes could disturb the natural stratification that keeps the bulk of the gases trapped in deep waters. Undertaking them could increase, rather than mitigate, the risk of gas eruption. Until a large-scale extraction operation has commenced, it also remains unclear how efficiently the technology will function and how much electricity Kivu will ultimately yield. Get Flash Player “We are very curious to see how our process works,” says Jarmo Gummerus, a Finnish engineer and KivuWatt’s Rwanda country manager. “Very soon we’ll have a much better idea of the potential of this lake.” Boosting the grid Three hours by car over winding roads from KivuWatt, the Rwandan capital, Kigali, does not appear to be a city in the midst of an energy crisis. In the 21 years since the Rwandan genocide, in which an estimated 800,000 people were killed, the city of a million has transformed from a corpse-ridden backwater into a tidy modern metropolis. Today, Kigali is a town of smooth tree-lined streets, sprouting office towers and American-style subdivisions that stretch to the surrounding hills. It’s also the engine of a Rwandan economy that’s grown at an average of 8 percent per year over the last decade—one of the highest rates in the world. As Rwanda and its capital have developed, however, the country’s electricity grid has struggled to keep pace. Although installed capacity has doubled in the last five years, it remains a scant 156 megawatts. Today, nearly 80 percent of Rwanda’s 12 million people, including the vast majority of rural residents, still lack a connection to the grid. Families and business that do have power, meanwhile, face some of the highest electricity prices in the region—in part because nearly a third of the country’s power is generated from imported diesel and heavy fuel oil, which arrive by truck from Kenya and Tanzania. According to the World Bank, Rwandan companies pay an average of 24 cents per kilowatt-hour, compared with 15 cents in Kenya and 17 cents in Uganda. The average industrial user in the United States pays less than seven cents. Kivu, 1,460 meters above sea level, is part of a system of lakes along the Great Rift Valley. Hoping to reduce its widespread poverty and boost its small industrial base, Rwanda has set ambitious electrification targets. The country’s second Economic Development and Poverty Reduction Strategy, launched in 2013, assumed a nearly fourfold expansion of the power grid, to 563 megawatts, by the end of 2017. Given financial constraints and limited domestic energy resources, however, this will be difficult to pull off. Aside from KivuWatt, the only significant power project nearing completion is a 15-megawatt plant that will burn peat. Although work has begun on another 80-megawatt peat facility, and financing is being arranged for two large-scale regional hydroelectric projects, it’s not clear if any will be on the grid by the 2017 target. Rwanda might also have significant geothermal resources, if preliminary surveys are correct, but two exploratory wells drilled in 2013 came up empty. And although Rwanda recently inaugurated East Africa’s first utility–scale solar field and authorities are working to bring off-grid solar installations to rural homes, schools, and hospitals, it’s unlikely that solar will be able to meet a significant portion of industry’s demands. Out of desperation, Rwanda could soon become a significant electricity importer. According to the Ministry of Infrastructure, arrangements are in the works to purchase 30 megawatts from Kenya this year and, eventually, up to 400 megawatts from Ethiopia. Across the border in the eastern part of the Democratic Republic of Congo (formerly known as Zaire), the power crisis is even more acute. The DRC, a country of 77 million people in a territory roughly the size of Western Europe, contains extensive hydroelectric resources. If fully tapped, the Congo River’s Inga Falls could yield an estimated 40,000 megawatts, nearly twice the capacity of the world’s largest power station, the Three Gorges Dam in China. Today, however, the DRC’s aging grid has an installed capacity of just 2,400 megawatts, roughly half of which is routinely unavailable because the transmission infrastructure is in such poor shape. In the war-torn east, power is particularly limited. Goma, the largest city on Lake Kivu, has an available capacity of less than five megawatts—a meager amount for a town of a million residents and a situation, some argue, that helps promote conflict. If boosting eastern Congo’s grid can spur the development of industries, says Bantu Lukambo, an environmental activist based in Goma, that would reduce the appeal of the region’s dozens of armed groups, which are magnets for youth with no other employment prospects. In addition, he says, more development could weaken the market for illicit charcoal, a trade that generates millions of dollars per year for local militias and leads to extensive deforestation. Gases from the lake will enter the gray stainless-steel tube to be separated. The volcanoes responsible for much of Kivu’s gas loom over Goma and its environs. In 2002, an eruption of Nyiragongo, a volcano located 20 kilometers north of town, destroyed a fifth of the city, leaving tens of thousands of people homeless and depositing lava that’s still being used as a building material. On a drive west from town, Mathieu Yalire, chief geochemist at the government-run Goma Volcano Observatory, shows me several depressions known to contain lethal seepages of carbon dioxide that are concentrated near the ground at the edges of past lava flows and occasionally asphyxiate children. At Kasinga Primary School in the town of Sake, 25 kilometers west of Goma, principal Batchoka Lubungo shows us a photo, displayed on the wall of his office, of a young victim. “One morning we found the boy dead over there,” he says, pointing to a known danger zone just outside his window. “We keep this picture here as a warning to the students.” The presence of mazuku is a reminder of Lake Kivu’s potential to sow disaster. But the carbon dioxide is not the only danger. The lake’s geochemistry is unusual, largely as a consequence of local subaquatic springs that absorb carbon dioxide from the region’s volcanic soil and feed the gas into Kivu’s deepest waters. Much of the methane comes from decomposing organic matter; the rest comes either from the volcanic soil or from bacteria converting the carbon dioxide to methane. Critically, these springs are saline, while the water sources feeding the lake’s upper layers are fresh. Since saline water is much denser than fresh water, this creates density gradients that prevent the gases from diffusing upward and into the atmosphere. Although this stratification is stable at present, the gas accumulation it makes possible has apparently led to limnic eruptions in the distant past. If nothing is done, it is likely to do so in the future. Still, much about this risk remains uncertain. Studies of Kivu’s sediment record suggest that the lake has experienced at least five overturns in the last 6,000 years. It’s not clear, however, whether these events involved all the lake’s layers of water, thus releasing all its gas, or just portions of its upper layers. In addition, though recent measurements have found that the concentration of methane is increasing—at a rate that could bring the gas close to saturation by the end of the century—it’s not yet known why this is happening or whether it will continue. Complicating matters, Kivu consists of five different basins of varying depths, each with distinct physiochemical properties. Top: Women dry tiny sambaza, or sardines. Bottom: A sign in Kibuye explains KivuWatt. It is clear, though, that an eruption in Kivu’s main basin could cause a disaster of apocalyptic proportions. If all the methane and carbon dioxide currently dissolved in Kivu were released into the atmosphere, they would cover the entire lake in a cloud of gas more than 100 meters thick. If even a small fraction of the gas were to get out, it could suffocate entire towns along the lake shore. This can happen if water at a given depth becomes fully saturated with gas and is lifted by a big earthquake, a volcanic eruption, or another external disturbance to a depth where the water pressure is not great enough to keep the gas dissolved. Extraction Whatever the extent of Kivu’s eruption risks, its methane has long been of commercial interest. From 1963 until 2006, Rwanda’s lakeside Bralirwa Brewery fueled its boilers with methane extracted 800 meters offshore. In the 1980s, researchers from the Netherlands tapped Bralirwa’s excess gas to fuel a fleet of cars, though the project eventually foundered. By the early 1990s, cross-border efforts to utilize the gas for electricity had begun to gain momentum, but progress was cut short by the Rwandan genocide and subsequent wars in eastern Congo. Eventually, with the return of stability in Rwanda, the government in Kigali entered into partnership with a Scottish firm to build a small pilot facility on the lake. The plant, known as KP1, began working intermittently in 2008 and produces a few megawatts of electricity. Another project briefly produced 2.4 megawatts in 2010, but the equipment was removed from the lake after it was damaged in a storm. KivuWatt is the country’s first attempt at large-scale gas extraction. Even though its technology is novel, the concept is relatively simple. A barge will be anchored to the lake bed 13 kilometers offshore, where four plastic pipes will draw up water from 350 meters below the surface. As the water rises, bubbles of methane and carbon dioxide will begin to form; eventually, roughly 80 percent of the methane and 40 percent of the carbon dioxide will be siphoned off inside a subsurface horizontal chamber known as a separator. From there, the partially degassed water will be reinjected deep into the lake, and the gas—at this point roughly 30 percent methane and 70 percent carbon dioxide,with trace amounts of hydrogen sulfide—will continue upward into one of four towers on the barge. Here, “wash water” taken from a depth of 40 meters will be mixed with the gas to remove as much of the remaining carbon dioxide as possible. This water will be returned to a depth of 60 meters, shallow enough for some of the carbon dioxide to eventually diffuse into the atmosphere. The end product, a gas composed of roughly 85 percent methane, will then be pressurized and sent to a power plant on shore. For a region in such dire need of electricity, Kivu’s gas is an attractive proposition. According to Gummerus, the engineer overseeing the project, KivuWatt will sell power generated in its first phase to Rwanda’s state-owned utility for less than 15 cents per kilowatt-hour. That’s competitive with the rates expected from the country’s forthcoming peat projects and less than half the cost of power generated from imported fossil fuels. (Later the rate is expected to fall to less than 12 cents per kilowatt-hour.) As desirable as the project seems for both economic and safety reasons, however, it could pose environmental risks of its own—including the chance that the degassing operations could change the structure and properties of the lake. Children of fishermen play around fishing boats off the shores of Gisenyi. According to the Management Prescriptions for the Development of Lake Kivu Gas Resources, a 2009 document—known as the MPs—that both Rwanda and the DRC have adopted as general guidelines for gas extraction, the risks have less to do with the removal of the gas itself than with the reinjection of the degassed water. Since Kivu’s methane-rich deep water is saline, dense, and abundant in nutrients, releasing it near the surface could damage the lake’s ecosystem and weaken its density stratification. To mitigate these risks, the report dictates that all water extracted from the lake’s deep-water “resource zone” be reinjected at least 260 meters below the surface so that it remains under enough pressure. Because KivuWatt’s design was approved before the report was released, however, the project isn’t subject to this requirement, and its degassed water will be returned above that level, at a depth of 240 meters. Although this distinction may seem trivial, Philip Morkel, a South African engineer and a member of the five-person expert committee that wrote the guidelines, believes otherwise. “Once you punch through those gradient layers, you start damaging the protective mechanism that the lake has to preserve itself,” he says. “On a large scale it becomes seriously problematic.” Some experts see less reason for alarm. Dario Tedesco, an Italian volcanologist with extensive knowledge of the lake, tells me the quantity of water reinjected is unlikely to be large enough to create a serious disturbance. Alfred Johny Wüest, head of the aquatic physics research group at the Swiss Federal Institute of Aquatic Science and Technology and another member of the MPs committee, says it erred on the side of caution, which means that even the water from KivuWatt will be reinjected deep enough for safety. Wüest has other concerns, however, including that the project could harm the lake’s ecology. That worries some fishermen, too. Fishing will be forbidden in an exclusion zone around KivuWatt, but even outside that area, the reinjection of wash water and the noise and vibrations from the extraction project could be noticeable. Fishermen near the KP1 pilot plant told me that their catches, mainly of sardines known as sambaza, have fallen significantly since the facility began to operate. It’s difficult to isolate the cause there, however, since a drop in sambaza numbers has been documented across the lake—a decline linked to a rise in unregulated boats and the introduction of a predator species. Workers attend to the final construction phase of the KivuWatt barge. A portrait of Rwanda’s president looms over controls in the KP1 pilot plant. The most pressing concern from an energy standpoint is how well the gas extraction technology will perform. The MPs’ authors estimate that the lake is capable of providing between 160 and 960 megawatts of generating capacity over a period of 50 years. After that, the gas that continues to accumulate could be harnessed for up to 100 megawatts of capacity in perpetuity. All of this, though, hinges on the efficiency of the extraction process and the onshore power conversion technology. KivuWatt should extract about two-thirds of the methane from the water it draws up, with the rest lost during the separation process and in the washing towers. Although some of that gas will be returned to the lake in the reinjected water and could theoretically be reëxtracted at a later date, it is likely to settle in smaller concentrations, which could make it uneconomical to capture. But these projections are based only on simulations, and the real efficiency won’t be known until the barge begins to operate. Essentially, the lake’s potential is still highly uncertain. Disappointing results could spur disputes between Rwanda and the Democratic Republic of Congo. Although the two countries signed an agreement in 1975 to share the methane equally, Rwanda’s head start in exploitation means it could potentially infringe upon its neighbor’s resource, particularly if the lake yields less power than expected. (Because gas levels in the lake’s main basin are uniform across a given depth, it’s impossible to extract from Rwandan waters without affecting the quantity available in the DRC.) The two countries do not exactly have an amicable history. Since the current Rwandan government seized power at the end of the genocide, Rwanda has twice launched rebellions to topple governments in Kinshasa—once successfully. It has also been implicated in the support of numerous proxy militias in the DRC’s east as well as the widespread smuggling of Congolese minerals, including gold, tin, and coltan, an ore mined for use in electronics manufacturing. In this context, some worry, Kivu’s gas may simply be another means by which Rwanda, a small yet highly organized state, manages to profit at the expense of its larger, dysfunctional neighbor. After the barge is completed, it will be towed 13 kilometers onto the lake to begin extracting gas. If the project is successful, though, it could help mend cross-border relations. The two countries, which already share power from a hydroelectric plant on their border south of Kivu, have long sought to implement a joint gas-to-power project, according to Augusta Umutoni, head of Rwanda’s Lake Kivu Monitoring Program, a government body that oversees the extraction process. Despite the vagaries of politics, she says, energy officials from the two countries collaborate well at a technical level. Both, however, are waiting until the concept has been shown to work on a commercial scale. With so many questions lingering as KivuWatt prepares for launch, it’s easy to forget that KP1, the pilot facility, is now in its eighth year of operation. Although the project, originally conceived to generate five megawatts, struggled to produce more than a single megawatt for years, it is now consistently generating between two and three—giving authorities a slight boost of confidence. On a February evening, I join Olivier Ntirushwa, KP1’s plant manager, on a tour of the barge, which floats a kilometer from shore, within sight of the Rwanda-DRC border. Looking north, I see the city of Goma and its erratic patchwork of lights. Further afield is the steaming cone of Nyiragongo. Over the noise of the barge’s machinery, Ntirushwa gives me a brief history of the project: how it operated well below capacity for years; how recent improvements to its separator finally boosted its power output. When I ask about his predictions for KivuWatt, Ntirushwa says he doesn’t know much about the project, or how much electricity the lake might eventually yield. Instead, he stresses how it feels to be involved in such a high-stakes experiment. “It’s exciting because we are the pioneers of this technology,” he says as we stare out over the water. “Nobody else has ever done this.” Jonathan W. Rosen is a journalist based in Kigali. Tagged Rwanda, lake Kivu, Kivu WAtt Credit Photographs and videography by Jason Florio; video satellite animation courtesy of NASA Jonathan W. Rosen Guest Contributor Jonathan W. Rosen is a journalist based in Kigali. 12 comments Share your thoughts Subscribe to Continue Reading Uh oh–you've read all five of your free articles for this month. Become an Insider for unlimited access to online stories for as low as $29.95/year. Insider basic Gift $29.95/yr US PRICE Subscribe What's Included Your Gift Includes 1 year (6 issues) of MIT Technology Review magazine in print OR digital format Access to the entire online story archive: 1997-present Special discounts to select partners Discounts to our events Subscribe See international, alumni and other pricing options Already an Insider? Log into your account Energy Can we transform how we power and feed the world in time to head off climate change? China’s Massive Effort to Purify Seawater Is Drying Up Stalled projects and underperforming plants have hampered China’s desalination plans. by Yiting Sun Get Ready for GMO Labels on Foods Congress wants you to know if biotech corn is in that box of cereal. by Mike Orcutt Seven Must-Read Stories (Week Ending July 9, 2016) Another chance to catch the most interesting, and important, articles from the previous week on MIT Technology Review. More from Energy The Download What's important in technology and innovation, delivered to you every day. Follow us Twitter Facebook RSS The mission of MIT Technology Review is to equip its audiences with the intelligence to understand a world shaped by technology. Browse International Editions Company About Us Careers Advertise with Us Reprints and Permissions Your Account Log In / Create Account Newsletters Manage Account Manage Subscription Customer Support Help/FAQs Contact Us Feedback Sitemap More Events MIT Enterprise Forum MIT News Policies Ethics Statement Terms of Service Privacy Commenting Guidelines MIT Technology Review © 2016 v.|eiπ| You've read of free articles this month. Subscribe Become an Insider or Sign in for unlimited access to online articles . "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160708142818#index"
                   NS1:content=" Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 13. File Formats » 13.2. ConfigParser — Configuration file parser¶ Note The ConfigParser module has been renamed to configparser in Python 3. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. This module defines the class ConfigParser. The ConfigParser class implements a basic configuration file parser language which provides a structure similar to what you would find on Microsoft Windows INI files. You can use this to write Python programs which can be customized by end users easily. Note This library does not interpret or write the value-type prefixes used in the Windows Registry extended version of INI syntax. See also Module shlex Support for a creating Unix shell-like mini-languages which can be used as an alternate format for application configuration files. Module json The json module implements a subset of JavaScript syntax which can also be used for this purpose. The configuration file consists of sections, led by a [section] header and followed by name: value entries, with continuations in the style of RFC 822 (see section 3.1.1, “LONG HEADER FIELDS”); name=value is also accepted. Note that leading whitespace is removed from values. The optional values can contain format strings which refer to other values in the same section, or values in a special DEFAULT section. Additional defaults can be provided on initialization and retrieval. Lines beginning with '#' or ';' are ignored and may be used to provide comments. Configuration files may include comments, prefixed by specific characters (# and ;). Comments may appear on their own in an otherwise empty line, or may be entered in lines holding values or section names. In the latter case, they need to be preceded by a whitespace character to be recognized as a comment. (For backwards compatibility, only ; starts an inline comment, while # does not.) On top of the core functionality, SafeConfigParser supports interpolation. This means values can contain format strings which refer to other values in the same section, or values in a special DEFAULT section. Additional defaults can be provided on initialization. For example: [My Section] foodir: %(dir)s/whatever dir=frob long: this value continues in the next line would resolve the %(dir)s to the value of dir (frob in this case). All reference expansions are done on demand. Default values can be specified by passing them into the ConfigParser constructor as a dictionary. Additional defaults may be passed into the get() method which will override all others. Sections are normally stored in a built-in dictionary. An alternative dictionary type can be passed to the ConfigParser constructor. For example, if a dictionary type is passed that sorts its keys, the sections will be sorted on write-back, as will be the keys within each section. class ConfigParser.RawConfigParser([defaults[, dict_type[, allow_no_value]]])¶ The basic configuration object. When defaults is given, it is initialized into the dictionary of intrinsic defaults. When dict_type is given, it will be used to create the dictionary objects for the list of sections, for the options within a section, and for the default values. When allow_no_value is true (default: False), options without values are accepted; the value presented for these is None. This class does not support the magical interpolation behavior. All option names are passed through the optionxform() method. Its default implementation converts option names to lower case. New in version 2.3. Changed in version 2.6: dict_type was added. Changed in version 2.7: The default dict_type is collections.OrderedDict. allow_no_value was added. class ConfigParser.ConfigParser([defaults[, dict_type[, allow_no_value]]])¶ Derived class of RawConfigParser that implements the magical interpolation feature and adds optional arguments to the get() and items() methods. The values in defaults must be appropriate for the %()s string interpolation. Note that __name__ is an intrinsic default; its value is the section name, and will override any value provided in defaults. All option names used in interpolation will be passed through the optionxform() method just like any other option name reference. Using the default implementation of optionxform(), the values foo %(bar)s and foo %(BAR)s are equivalent. New in version 2.3. Changed in version 2.6: dict_type was added. Changed in version 2.7: The default dict_type is collections.OrderedDict. allow_no_value was added. class ConfigParser.SafeConfigParser([defaults[, dict_type[, allow_no_value]]])¶ Derived class of ConfigParser that implements a more-sane variant of the magical interpolation feature. This implementation is more predictable as well. New applications should prefer this version if they don’t need to be compatible with older versions of Python. New in version 2.3. Changed in version 2.6: dict_type was added. Changed in version 2.7: The default dict_type is collections.OrderedDict. allow_no_value was added. exception ConfigParser.Error¶ Base class for all other configparser exceptions. exception ConfigParser.NoSectionError¶ Exception raised when a specified section is not found. exception ConfigParser.DuplicateSectionError¶ Exception raised if add_section() is called with the name of a section that is already present. exception ConfigParser.NoOptionError¶ Exception raised when a specified option is not found in the specified section. exception ConfigParser.InterpolationError¶ Base class for exceptions raised when problems occur performing string interpolation. exception ConfigParser.InterpolationDepthError¶ Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH. Subclass of InterpolationError. exception ConfigParser.InterpolationMissingOptionError¶ Exception raised when an option referenced from a value does not exist. Subclass of InterpolationError. New in version 2.3. exception ConfigParser.InterpolationSyntaxError¶ Exception raised when the source text into which substitutions are made does not conform to the required syntax. Subclass of InterpolationError. New in version 2.3. exception ConfigParser.MissingSectionHeaderError¶ Exception raised when attempting to parse a file which has no section headers. exception ConfigParser.ParsingError¶ Exception raised when errors occur attempting to parse a file. ConfigParser.MAX_INTERPOLATION_DEPTH¶ The maximum depth for recursive interpolation for get() when the raw parameter is false. This is relevant only for the ConfigParser class. See also Module shlex Support for a creating Unix shell-like mini-languages which can be used as an alternate format for application configuration files. 13.2.1. RawConfigParser Objects¶ RawConfigParser instances have the following methods: RawConfigParser.defaults()¶ Return a dictionary containing the instance-wide defaults. RawConfigParser.sections()¶ Return a list of the sections available; DEFAULT is not included in the list. RawConfigParser.add_section(section)¶ Add a section named section to the instance. If a section by the given name already exists, DuplicateSectionError is raised. If the name DEFAULT (or any of it’s case-insensitive variants) is passed, ValueError is raised. RawConfigParser.has_section(section)¶ Indicates whether the named section is present in the configuration. The DEFAULT section is not acknowledged. RawConfigParser.options(section)¶ Returns a list of options available in the specified section. RawConfigParser.has_option(section, option)¶ If the given section exists, and contains the given option, return True; otherwise return False. New in version 1.6. RawConfigParser.read(filenames)¶ Attempt to read and parse a list of filenames, returning a list of filenames which were successfully parsed. If filenames is a string or Unicode string, it is treated as a single filename. If a file named in filenames cannot be opened, that file will be ignored. This is designed so that you can specify a list of potential configuration file locations (for example, the current directory, the user’s home directory, and some system-wide directory), and all existing configuration files in the list will be read. If none of the named files exist, the ConfigParser instance will contain an empty dataset. An application which requires initial values to be loaded from a file should load the required file or files using readfp() before calling read() for any optional files: import ConfigParser, os config = ConfigParser.ConfigParser() config.readfp(open('defaults.cfg')) config.read(['site.cfg', os.path.expanduser('~/.myapp.cfg')]) Changed in version 2.4: Returns list of successfully parsed filenames. RawConfigParser.readfp(fp[, filename])¶ Read and parse configuration data from the file or file-like object in fp (only the readline() method is used). If filename is omitted and fp has a name attribute, that is used for filename; the default is &lt;???&gt;. RawConfigParser.get(section, option)¶ Get an option value for the named section. RawConfigParser.getint(section, option)¶ A convenience method which coerces the option in the specified section to an integer. RawConfigParser.getfloat(section, option)¶ A convenience method which coerces the option in the specified section to a floating point number. RawConfigParser.getboolean(section, option)¶ A convenience method which coerces the option in the specified section to a Boolean value. Note that the accepted values for the option are &quot;1&quot;, &quot;yes&quot;, &quot;true&quot;, and &quot;on&quot;, which cause this method to return True, and &quot;0&quot;, &quot;no&quot;, &quot;false&quot;, and &quot;off&quot;, which cause it to return False. These string values are checked in a case-insensitive manner. Any other value will cause it to raise ValueError. RawConfigParser.items(section)¶ Return a list of (name, value) pairs for each option in the given section. RawConfigParser.set(section, option, value)¶ If the given section exists, set the given option to the specified value; otherwise raise NoSectionError. While it is possible to use RawConfigParser (or ConfigParser with raw parameters set to true) for internal storage of non-string values, full functionality (including interpolation and output to files) can only be achieved using string values. New in version 1.6. RawConfigParser.write(fileobject)¶ Write a representation of the configuration to the specified file object. This representation can be parsed by a future read() call. New in version 1.6. RawConfigParser.remove_option(section, option)¶ Remove the specified option from the specified section. If the section does not exist, raise NoSectionError. If the option existed to be removed, return True; otherwise return False. New in version 1.6. RawConfigParser.remove_section(section)¶ Remove the specified section from the configuration. If the section in fact existed, return True. Otherwise return False. RawConfigParser.optionxform(option)¶ Transforms the option name option as found in an input file or as passed in by client code to the form that should be used in the internal structures. The default implementation returns a lower-case version of option; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior. You don’t necessarily need to subclass a ConfigParser to use this method, you can also re-set it on an instance, to a function that takes a string argument. Setting it to str, for example, would make option names case sensitive: cfgparser = ConfigParser() ... cfgparser.optionxform = str Note that when reading configuration files, whitespace around the option names are stripped before optionxform() is called. 13.2.2. ConfigParser Objects¶ The ConfigParser class extends some methods of the RawConfigParser interface, adding some optional arguments. ConfigParser.get(section, option[, raw[, vars]])¶ Get an option value for the named section. If vars is provided, it must be a dictionary. The option is looked up in vars (if provided), section, and in defaults in that order. All the '%' interpolations are expanded in the return values, unless the raw argument is true. Values for interpolation keys are looked up in the same manner as the option. ConfigParser.items(section[, raw[, vars]])¶ Return a list of (name, value) pairs for each option in the given section. Optional arguments have the same meaning as for the get() method. New in version 2.3. 13.2.3. SafeConfigParser Objects¶ The SafeConfigParser class implements the same extended interface as ConfigParser, with the following addition: SafeConfigParser.set(section, option, value)¶ If the given section exists, set the given option to the specified value; otherwise raise NoSectionError. value must be a string (str or unicode); if not, TypeError is raised. New in version 2.4. 13.2.4. Examples¶ An example of writing to a configuration file: import ConfigParser config = ConfigParser.RawConfigParser() # When adding sections or items, add them in the reverse order of # how you want them to be displayed in the actual file. # In addition, please note that using RawConfigParser's and the raw # mode of ConfigParser's respective set functions, you can assign # non-string values to keys internally, but will receive an error # when attempting to write to a file or when you get it in non-raw # mode. SafeConfigParser does not allow such assignments to take place. config.add_section('Section1') config.set('Section1', 'an_int', '15') config.set('Section1', 'a_bool', 'true') config.set('Section1', 'a_float', '3.1415') config.set('Section1', 'baz', 'fun') config.set('Section1', 'bar', 'Python') config.set('Section1', 'foo', '%(bar)s is %(baz)s!') # Writing our configuration file to 'example.cfg' with open('example.cfg', 'wb') as configfile: config.write(configfile) An example of reading the configuration file again: import ConfigParser config = ConfigParser.RawConfigParser() config.read('example.cfg') # getfloat() raises an exception if the value is not a float # getint() and getboolean() also do this for their respective types a_float = config.getfloat('Section1', 'a_float') an_int = config.getint('Section1', 'an_int') print a_float + an_int # Notice that the next output does not interpolate '%(bar)s' or '%(baz)s'. # This is because we are using a RawConfigParser(). if config.getboolean('Section1', 'a_bool'): print config.get('Section1', 'foo') To get interpolation, you will need to use a ConfigParser or SafeConfigParser: import ConfigParser config = ConfigParser.ConfigParser() config.read('example.cfg') # Set the third, optional argument of get to 1 if you wish to use raw mode. print config.get('Section1', 'foo', 0) # -&gt; &quot;Python is fun!&quot; print config.get('Section1', 'foo', 1) # -&gt; &quot;%(bar)s is %(baz)s!&quot; # The optional fourth argument is a dict with members that will take # precedence in interpolation. print config.get('Section1', 'foo', 0, {'bar': 'Documentation', 'baz': 'evil'}) Defaults are available in all three types of ConfigParsers. They are used in interpolation if an option used is not defined elsewhere. import ConfigParser # New instance with 'bar' and 'baz' defaulting to 'Life' and 'hard' each config = ConfigParser.SafeConfigParser({'bar': 'Life', 'baz': 'hard'}) config.read('example.cfg') print config.get('Section1', 'foo') # -&gt; &quot;Python is fun!&quot; config.remove_option('Section1', 'bar') config.remove_option('Section1', 'baz') print config.get('Section1', 'foo') # -&gt; &quot;Life is hard!&quot; The function opt_move below can be used to move options between sections: def opt_move(config, section1, section2, option): try: config.set(section2, option, config.get(section1, option, 1)) except ConfigParser.NoSectionError: # Create non-existent section config.add_section(section2) opt_move(config, section1, section2, option) else: config.remove_option(section1, option) Some configuration files are known to include settings without values, but which otherwise conform to the syntax supported by ConfigParser. The allow_no_value parameter to the constructor can be used to indicate that such values should be accepted: &gt;&gt;&gt; &gt;&gt;&gt; import ConfigParser &gt;&gt;&gt; import io &gt;&gt;&gt; sample_config = &quot;&quot;&quot; ... [mysqld] ... user = mysql ... pid-file = /var/run/mysqld/mysqld.pid ... skip-external-locking ... old_passwords = 1 ... skip-bdb ... skip-innodb ... &quot;&quot;&quot; &gt;&gt;&gt; config = ConfigParser.RawConfigParser(allow_no_value=True) &gt;&gt;&gt; config.readfp(io.BytesIO(sample_config)) &gt;&gt;&gt; # Settings with values are treated as before: &gt;&gt;&gt; config.get(&quot;mysqld&quot;, &quot;user&quot;) 'mysql' &gt;&gt;&gt; # Settings without values provide None: &gt;&gt;&gt; config.get(&quot;mysqld&quot;, &quot;skip-bdb&quot;) &gt;&gt;&gt; # Settings which aren't specified still raise an error: &gt;&gt;&gt; config.get(&quot;mysqld&quot;, &quot;does-not-exist&quot;) Traceback (most recent call last): ... ConfigParser.NoOptionError: No option 'does-not-exist' in section: 'mysqld' Table Of Contents 13.2. ConfigParser — Configuration file parser 13.2.1. RawConfigParser Objects 13.2.2. ConfigParser Objects 13.2.3. SafeConfigParser Objects 13.2.4. Examples Previous topic 13.1. csv — CSV File Reading and Writing Next topic 13.3. robotparser — Parser for robots.txt This Page Report a Bug Show Source Quick search Enter search terms or a module, class or function name. « Navigation index modules | next | previous | Python » Documentation » The Python Standard Library » 13. File Formats » © Copyright 1990-2016, Python Software Foundation. The Python Software Foundation is a non-profit corporation. Please donate. Last updated on Jun 25, 2016. Found a bug? Created using Sphinx 1.3.3. "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160824112714#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Table of ASCII Characters This table lists the ASCII characters and their decimal, octal and hexadecimal numbers. Characters which appear as names in parentheses (e.g., (nl)) are non-printing characters. A table of the common non-printing characters appears after this table. Char Dec Oct Hex | Char Dec Oct Hex | Char Dec Oct Hex | Char Dec Oct Hex ------------------------------------------------------------------------------------- (nul) 0 0000 0x00 | (sp) 32 0040 0x20 | @ 64 0100 0x40 | ` 96 0140 0x60 (soh) 1 0001 0x01 | ! 33 0041 0x21 | A 65 0101 0x41 | a 97 0141 0x61 (stx) 2 0002 0x02 | &quot; 34 0042 0x22 | B 66 0102 0x42 | b 98 0142 0x62 (etx) 3 0003 0x03 | # 35 0043 0x23 | C 67 0103 0x43 | c 99 0143 0x63 (eot) 4 0004 0x04 | $ 36 0044 0x24 | D 68 0104 0x44 | d 100 0144 0x64 (enq) 5 0005 0x05 | % 37 0045 0x25 | E 69 0105 0x45 | e 101 0145 0x65 (ack) 6 0006 0x06 | &amp; 38 0046 0x26 | F 70 0106 0x46 | f 102 0146 0x66 (bel) 7 0007 0x07 | ' 39 0047 0x27 | G 71 0107 0x47 | g 103 0147 0x67 (bs) 8 0010 0x08 | ( 40 0050 0x28 | H 72 0110 0x48 | h 104 0150 0x68 (ht) 9 0011 0x09 | ) 41 0051 0x29 | I 73 0111 0x49 | i 105 0151 0x69 (nl) 10 0012 0x0a | * 42 0052 0x2a | J 74 0112 0x4a | j 106 0152 0x6a (vt) 11 0013 0x0b | + 43 0053 0x2b | K 75 0113 0x4b | k 107 0153 0x6b (np) 12 0014 0x0c | , 44 0054 0x2c | L 76 0114 0x4c | l 108 0154 0x6c (cr) 13 0015 0x0d | - 45 0055 0x2d | M 77 0115 0x4d | m 109 0155 0x6d (so) 14 0016 0x0e | . 46 0056 0x2e | N 78 0116 0x4e | n 110 0156 0x6e (si) 15 0017 0x0f | / 47 0057 0x2f | O 79 0117 0x4f | o 111 0157 0x6f (dle) 16 0020 0x10 | 0 48 0060 0x30 | P 80 0120 0x50 | p 112 0160 0x70 (dc1) 17 0021 0x11 | 1 49 0061 0x31 | Q 81 0121 0x51 | q 113 0161 0x71 (dc2) 18 0022 0x12 | 2 50 0062 0x32 | R 82 0122 0x52 | r 114 0162 0x72 (dc3) 19 0023 0x13 | 3 51 0063 0x33 | S 83 0123 0x53 | s 115 0163 0x73 (dc4) 20 0024 0x14 | 4 52 0064 0x34 | T 84 0124 0x54 | t 116 0164 0x74 (nak) 21 0025 0x15 | 5 53 0065 0x35 | U 85 0125 0x55 | u 117 0165 0x75 (syn) 22 0026 0x16 | 6 54 0066 0x36 | V 86 0126 0x56 | v 118 0166 0x76 (etb) 23 0027 0x17 | 7 55 0067 0x37 | W 87 0127 0x57 | w 119 0167 0x77 (can) 24 0030 0x18 | 8 56 0070 0x38 | X 88 0130 0x58 | x 120 0170 0x78 (em) 25 0031 0x19 | 9 57 0071 0x39 | Y 89 0131 0x59 | y 121 0171 0x79 (sub) 26 0032 0x1a | : 58 0072 0x3a | Z 90 0132 0x5a | z 122 0172 0x7a (esc) 27 0033 0x1b | ; 59 0073 0x3b | [ 91 0133 0x5b | { 123 0173 0x7b (fs) 28 0034 0x1c | &lt; 60 0074 0x3c | \ 92 0134 0x5c | | 124 0174 0x7c (gs) 29 0035 0x1d | = 61 0075 0x3d | ] 93 0135 0x5d | } 125 0175 0x7d (rs) 30 0036 0x1e | &gt; 62 0076 0x3e | ^ 94 0136 0x5e | ~ 126 0176 0x7e (us) 31 0037 0x1f | ? 63 0077 0x3f | _ 95 0137 0x5f | (del) 127 0177 0x7f ASCII Name Description C Escape Sequence nul null byte \0 bel bell character \a bs backspace \b ht horizontal tab \t np formfeed \f nl newline \n cr carriage return \r vt vertical tab esc escape sp space " />
  <RDF:Description RDF:about="urn:scrapbook:item20160627073645#index"
                   NS1:content=" BEOLINGUS A service provided by TU Chemnitz supported by IBS and MIOTU/Mio2. FAQ Help Contact Browser Conversion Advertising Donate About BEOLINGUS DEEn Dictionary De - En DeEs De - Es DePt De - Pt Vocabulary trainer Spec. subjects Grammar Abbreviations Random search Preferences Search in Sprachauswahl De↔En DictionaryDe→En DictionaryEn→De DictionaryDe↔En ExamplesDefinitions EnSynonyms DeSayings EnSayings DeDe↔Es DictionaryDe→Es DictionaryEs→De DictionaryDe↔Es ExamplesSayings EsDe↔Pt DictionaryDe→Pt DictionaryPt→De DictionaryDe↔Pt Examples Kein Trinkwasser Kein Widerspruch kein Wort herausbringen kein Zuckerschlecken sein keine Keine Ahnung keine Chance haben keine Grenzen kennen Keine Haarspalterei Search for: Mini search box äöüß 303 results for keine Tip: To exclude a word: word1 -word2 - German English [Hide examples] keine; keiner; keines {pron} [listen] [listen] no [listen] auf keinen Fall; unter keinen Umständen under no circumstances Sie sagte kein Wort. She didn't say a word. [Hide examples] keine; keiner; keines; gar nicht [listen] [listen] none {pron} [listen] Es gibt keine mehr. There are none left. wir/sie alle nicht none of us/them Wir werden alle nicht jünger. None of us is getting younger. / We are none of us getting any younger. [Hide examples] nichts; null; keine; keiner; keines {pron} [listen] [listen] [listen] [listen] none; naught; nil; nowt [Br.] [listen] [listen] [listen] Nullregelungsbescheinigung {f} (Steuerberechnung) nil-rule certificate (tax calculation) Nullbestände müssen angezeigt werden.; Keine Angaben, kein Bestand. (in einem Formular) Nil returns are required. (in a form) Auch Negativantworten sind erbeten. Nil replies are requested. [Hide examples] keine; keiner; keines {pron} [listen] [listen] neither [listen] keine(r,s) von beiden neither of them Keines von beiden!; Weder noch!; Weder das eine noch das andere! Neither!; Neither one! [coll.] [Hide examples] hetzen; keine Ruhe lassen to badger [listen] hetzend badgering gehetzt badgered hetzt badgers hetzte badgered [Hide examples] keine; keiner; keines {pron} [listen] [listen] not any Ich habe jetzt wirklich keine Zeit für dich! I really haven't got any time for you now! Er ist auf vielen Gebieten bewandert, aber auf keinem ein echter Fachmann. He is versed in many areas, but is not a real expert in any. [Hide examples] keine Worte finden; nicht wissen, was man sagen soll to be at a loss for words Ich finde keine Worte. I'm at a loss for words. Er ist nicht auf den Mund gefallen. He is never at a loss of words. [Hide examples] keine Wirkung haben; keinen Einfluss haben to cut no ice [fig.] Mich beeindruckt er nicht. Mir imponiert er nicht. He cuts no ice with me. [Hide examples] keine Mühe scheuen(, etw. zu tun) to go out of one's way (to do sth.) sich große Mühe geben(, etw. zu tun) to go out of one's way (to do sth.) keine Hexerei sein; kein Kunststück sein; nichts Großartiges/Weltbewegendes sein to be no big deal; to be NBD [Am.] [coll.] Keine Wendemöglichkeit! [auto] No Turning Space! Keine Ahnung! No idea! Keine Sorge! Don't (you) worry! Keine Sorge, es macht keine Mühe. Don't worry, it's no hassle! Keine Bange! No fear! Keine Haarspalterei! Don't split hairs! Keine Komplimente! No ceremony! Keine Panik! Don't get panicky! Keine Unverschämtheiten! None of your lip! Keine Ursache!; Gern geschehen!; Nichts zu danken! Don't mention it!; Not at all! Keine zehn Pferde bringen mich dahin. [übtr.] Wild horses couldn't drag me there. keine Kosten verursachen to be costless keine halben Sachen machen to not take half measures keine Mühen scheuen to spare no efforts keine Grenzen kennen to know no bounds [Hide examples] einer Sache ausgeliefert sein; einer Sache nicht entgehen können; zu etw. keine Alternative haben; einer Sache nicht auskommen [Bayr.] [Ös.] [ugs.] {vi} to be captive to sth. monopolabhängige Kunden captive customers auf eine bestimmte Vertriebsform angewiesen sein to be captive to a given form of distribution Da ich nicht weg konnte, musste ich seine Geschichten über mich ergehen lassen. As I couldn't leave, I was a captive audience for his stories. Ich habe für Unterhaltung bezahlt und will nicht mit Werbung zwangsbeglückt werden. I have paid my money for entertainment and don't want to be part of a captive audience for advertising. [Hide examples] jdn. (durch Lästigsein) ärgern; jdm. keine Ruhe geben {vt} (Person) [soc.] to bother sb.; to trouble sb. (person) Mami, der Andi ärgert mich ständig! Ma, Andy keeps bothering me! Sag ihr, sie soll aufhören, mich zu ärgern. Tell her to quit bothering me. Gib Ruh!; Gib eine Ruh! Don't bother me/us! [Hide examples] eine Wahlmöglichkeit, die eigentlich gar keine ist a Hobson's choice (no choice at all) (often incorrectly used for a choice between bad options) eigentlich gar keine Wahl/eigentlich keine andere Wahl haben to face a Hobson's choice Es gibt nur die Wahl zwischen dieser Option oder gar nichts. It's a case of Hobson's choice.; It's a Hobson's choice. [Hide examples] Es ist keine Überraschung, dass ... It comes as no surprise that ... Es sollte nicht/niemanden überraschen, dass ... It should come as no surprise that ... Es sollte keine Überraschung sein, dass ... It should come as no surprise that ... [Hide examples] an jdm. nagen; jdm. keine Ruhe lassen to prey on sb.'s mind/conscience Der Gedanke an meine kommende Verabredung ließ mir keine Ruhe. The thought of my upcoming appointment preyed on my mind. [Hide examples] Dazu habe ich keine Lust. I can't be bothered to do that. Sie haben keine Lust.; Sie halten es nicht für nötig. They can't be bothered. [Hide examples] kein schlechter/keine schlechte/kein schlechtes ... sein to be no mean ... Das ist keine schlechte Leistung. This is no mean achievement. Auffassung, dass bei Zielkäufen keine Wuchergrenzen gelten [econ.] time-price doctrine [Am.] am Ende sein; keine Chance haben; an einem toten Punkt sein to be dead in the water [fig.] &quot;Pilze sind keine Pflanzen.&quot; &quot;Soll sein!&quot; &quot;Fungi are not plants.&quot; &quot;Whatever!&quot; Soma {n}; die somatischen Zellen {pl} (alle Körperzellen, die keine Keimzellen sind) [biol.] soma; the somatic cells (all body cells other than the reproductive cells) Nur keine Bange!; Nur keine Sorge! Never fear! schlecht abschneiden; keine gute Punktzahl erreichen; wenig Tore schießen to score badly auf etw. nicht ansprechen; auf etw. nicht reagieren; für etw. nicht empfänglich sein; keine Reaktion zeigen {adj} [med.] to be unresponsive to sth. ausgebliebene Revolution {f}; abgesagte Revolution {f}; Revolution {f}, die keine war [pol.] [soc.] non-revolution lästig sein; keine Ruhe geben {vi} [soc.] to pester; to nag [listen] jdn. nervös machen; jdm. keine Ruhe lassen {vt} to fuss at sb. unpaarig; nicht paarweise angeordnet; keine Zweiergruppen bildend {adj} [biol.] unpaired Armut macht krank - Da beißt die Maus keinen Faden ab. / Da fährt die Eisenbahn drüber. [Ös.] / Das schleckt keine Geiß weg. [Schw.] Poverty breeds ill-health - there's no changing that. Das Alter spielt mit Dir ein Spiel um seine Rolle: spielst du nicht mit, spielt's keine Rolle. (Mark Twain) Age is an issue of mind over matter: If you don't mind, it doesn't matter. (Mark Twain) Das ist doch keine Sünde. It's no crime. Das sind keine Tatsachen. It's all make believe. Dem Glücklichen schlägt keine Stunde. Hours do not strike for a happy man. Du brauchst doch keine Angst zu haben. You surely don't have to be afraid. Der hat von Tuten und Blasen keine Ahnung. He doesn't know the first thing about anything.; He hasn't got/doesn't have a clue about anything. More results &gt;&gt;&gt; Search further for &quot;keine&quot;: Example sentences | Synonyms | Proverbs, aphorisms, quotations | Wikipedia | Google: Web search Example sentences | Synonyms / explanations | Proverbs, aphorisms, quotations | Wikipedia | Google: Web search No guarantee of accuracy or completeness! ©TU Chemnitz, 2006-2016 Your feedback: Your e-mail address for an answer: Bookmark services Ad partners Englisch Lernen Sprachcaffe Abenteuer Sprachreise Sprachreisen CollegeCouncil Sprachreise mit Sprachdirekt Sprachreisen Englisch Sprachreisen Martin Peters Englisch Sprachreisen mit Sprachcaffe Immersion Spanish Courses The Most Efficient and Enjoyable Way to Learn Spanish. Register Now! proyecto-es.com Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d Ads byGoogle ► Deutsch ► German ► Languages ► Learning "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160616135942#index"
                   NS1:content=" Trending: I don’t want to be LinkedIn with Microsoft Advanced beginner's guide to R Subscribe to newsletters Resources/White Papers Search computerworld Sign In | Register Hi! Here are the latest Insider stories. Beginner's guide to virtual reality Review: SQL Server 2016 boosts speed, analytics Tips for adding IPv6 to IPv4 networks Digital download: Profiles of all 100 Best Places to Work in IT 2016 More Insider Sign Out Search for Suggestions for you Insider email Cloud Computing All Cloud Computing Cloud Security Cloud Storage Hybrid Cloud Private Cloud Public Cloud Computer Hardware All Computer Hardware Apple Mac Chromebooks Computer Peripherals Computer Processors Solid State Drives Windows PCs Consumerization of IT All Consumerization of IT Bring Your Own Device (BYOD) Gamification Home Tech Location-Based Services Personal Technology Data Center All Data Center Data Storage Disaster Recovery High-Performance Computing (HPC) Infrastructure Management Sustainable IT Virtualization Emerging Technology All Emerging Technology 3D Printing Car Tech Environment Internet of Things Robotics Space Technology Wearables Enterprise Applications All Enterprise Applications Application Development Big Data Business Intelligence (BI) Business Process Management (BPM) CRM Collaboration Content/Document Management Data Analytics Database Management Desktop Apps Enterprise Architecture Enterprise Resource Planning (ERP) Java Development Open Source Social Business Software Integration Software as a Service (SaaS) Unified Communications (UC) IT Management All IT Management Digital Transformation H-1B IT Careers IT Industry IT Outsourcing IT Project Management IT Skills &amp; Training Technology Law &amp; Regulation Internet All Internet E-commerce Search Social Media Web Apps Web Browsers Mobile &amp; Wireless All Mobile &amp; Wireless Android Apple iOS BlackBerry Mobile Apps Mobile Device Management Mobile Payments Mobile Security Smartphones Tablets Windows 10 Mobile Wireless Carriers Networking All Networking Network Security Servers Wireless Networking Operating Systems All Operating Systems Chrome OS Linux MacOS Windows 10 Security All Security Application Security Cyberattacks Cybercrime &amp; Hacking Data Privacy Data Security Encryption Endpoint Security Malware &amp; Vulnerabilities Vertical IT All Vertical IT Financial Services IT Government IT Healthcare IT Retail IT Small Enterprise IT All Topics News Features Reviews Blogs Opinions Insider Shark Tank Slideshows Video Digital Magazine Digital Downloads Newsletters Computerworld Events IT Job Search Resources/White Papers × Close Home Operating Systems IDG Contributor Network Want to Join? Sandra Henry-Stocker Unix as a Second Language By Sandra Henry-Stocker star Influencer Follow Analysis Unix networking basics for the beginner More like this ifconfig Getting the most from ifconfig Server's down: How do I find out what's wrong? stats nils ze Getting system insights with dstat on IDG Answers Does enabling MAC address filtering significantly improve home network... Need a jump start on Unix networking? Whether you're working on your home network or setting up systems at work, here are some basic Unix commands and insights that might prove helpful. Email a friend To Use commas to separate multiple email addresses From reCAPTCHA challenge image Get a new challenge Get an audio challengeGet a visual challenge Help Privacy &amp; Terms Privacy Policy Thank you Your message has been sent. Sorry There was an error emailing this page. Comments Computerworld | Mar 16, 2014 4:21 PM PT Like this article? thumbsup 0 thumbsdown RELATED TOPICS Operating Systems Open Source Networking Linux Comments The days before home networks Once upon a time, there was something called a &quot;standalone Computer&quot; -- one that was used to perform some specific task and didn't require other devices or a network interface to do its job. It might have allowed its owner to write essays, play games, or manage family finances, but all data was stored and processed locally. And, if there was a printer involved, it was a &quot;slave&quot; printer -- one that hung off a port on the system and wasn't shared unless someone carried it to another computer. My first home computer was a standalone and my neighbors at the time thought I was some kind of freak just for having computer in my home, never mind having it sitting on a desk in the corner of my dining room. At the time, this identified me as being clearly abnormal, though I'd bet today these same people all have home computers and can't imagine going through life without them. Standalones may still exist today and their isolation may work to their advantage, but they are very rare. These days, nearly all computers are hooked to networks and are able to connect to systems around the globe. Unix/Linux systems are no exception. This kind of connectivity changes relationships between families, friends, and people with shared interests dramatically. I hear from my sister far more often than the 2,920 miles between us would allow if facebook and gmail didn't provide a way for us to share the fairly trivial news from our day-to-day lives. And I recently met a 5th cousin once removed on linkedin. That's fairly incredible and something I'd never have had the patience or the tools to pull off 20 years ago. Top 25 Windows 10 Free Tools Your step-by-step guide to repairing Windows 10 When Windows 10 gets wonky, there's a whole set of activities to try and set things right. If Read Now The scene today Instead of a standalone computer, today most people I know now have a home network. They have multiple computers connected to a private LAN, maybe a printer or two, and maybe even a large capacity network drive for backups. And some of those home networks include a mix of Windows and Linux systems. So, what do you need to know if one or more of those computers is a Linux system? What do you need to know if you're going to be setting up network connections on Linux systems at work? Setting up your network connection Whether at home or at work, if you're configuring a system to act as a Linux server, you will need to assign it what is called a &quot;static&quot; address. Static means it doesn't change. Server means that other systems need to find and connect to it. A static address is necessary so that clients, when they need to initiate connections, have a known address to use for these connections. For non-servers or &quot;client&quot; systems, addresses can be assigned dynamically and generally are -- whether they are assigned an address by a local router (as I have in my home) or by a DHCP server that manages this role within an organization. Even if your system is assigned an address dynamically, this doesn't mean that the address will change every time you boot it. Even DHCP addresses tends to be stable for a while. There is some likelihood that the same IP address will be assigned to a system for weeks, even months -- just no guarantee. As I like to tell my students, clients need to be able to find servers like shoppers need to find supermarkets. Servers never need to find their clients and supermarkets don't need to find their customers. Since clients initiate the connections, they can be coming from nearly anywhere. Examining your network interfaces To view your network settings, you would use the ifconfig command. If you try this command and get an error that claims the command cannot be found, it is likely that /sbin is not on your search path. You can try typing /sbin/ifconfig instead or you can modify your search path and then try ifconfig again. $ ifconfig -bash: ifconfig: command not found $ PATH=$PATH:/sbin $ ifconfig eth0 Link encap:Ethernet HWaddr 00:16:35:69:BD:79 inet addr:192.168.0.11 Bcast:192.168.0.255 Mask:255.255.255.0 inet6 addr: fe80::212:ff35:fe69:bd12/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:16791460 errors:0 dropped:0 overruns:0 frame:0 TX packets:30066639 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2182259898 (2.0 GiB) TX bytes:3951206845 (3.6 GiB) Interrupt:209 Memory:fdef0000-fdf00000 lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:16436 Metric:1 RX packets:32098 errors:0 dropped:0 overruns:0 frame:0 TX packets:32098 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3227365 (3.0 MiB) TX bytes:3227365 (3.0 MiB) Output like that shown above tells you a number of things. It tells you that the local network is a private network. You can tell this by the IP address shown in the second line. Any IP address that starts with 192.168 is part of a private address range. Many home networks will make use of a local router that assigns addresses like these to systems on the LAN as they boot. You can also tell, by looking at the 255.255.255.0 mask, that this network is capable of accommodating hundreds of systems, even if the router only provides eight ports. In today's typical home network, systems are likely to use wireless networking, so the number of available ports on the router isn't particularly significant. We can also see that the network interface is operational (RUNNING), view some numbers that tell us that data is going out and coming in (RX and TX packets), and note that a second network interface is listed. This second interface (i.e., the &quot;lo&quot; interface) is the &quot;loopback&quot;. This interface is used by the system to communicate with itself. You should always see a loopback interface in your ifconfig output and it should always have the address 127.0.0.1. This address isn't used for anything else. Where does your IP address come from? Most likely, your IP address for both your home systems and the one that may be sitting on your desk at work are assigned addresses dynamically. And most likely, those addresses fall into one of the address ranges that can only be used internally and can be used by anyone. Those address ranges are: &lt;b&gt;&lt;u&gt;Range Decimal values # of addresses&lt;/u&gt;&lt;/b&gt; 10.0.0.0-10.255.255.255 167772160-184549375 16777216 172.16.0.0-172.31.255.255 2886729728-2887778303 1048576 192.168.0.0-192.168.255.255 3232235520-3232301055 65536 Most home networks use IP addresses in the 192.168.0.0/24 (i.e., the bottom line shown above) because so many of the small network routers available today are set up to assign these addresses. You might notice that the first address range shown up is the largest of the three. This address range includes more than 16 million addresses. For this reason, it's the network address range that many organizations use for their internal systems, though most will only use a small portion of the available addresses. The second range contains more than 1 million address and the third more than 65,000. Most organizations will, of course, only use a small subset of the addresses in whatever range they choose to use. What Readers Like nanowires lithium-ion batteries Scientists can now make lithium-ion batteries last a lifetime Apple iPhone passcode ID 4 new ways to bypass passcode lock screen on iPhones, iPads running iOS 9 10 Signs Layoffs Are Coming Sen. Durbin calls Abbott Labs' IT layoffs 'harsh and insensitive’ Networks big and small When organizations use the 10.0.0.0/8 (i.e., the top network range above), they generally break it into many smaller network segments to limit the amount of network traffic that traverses each segment, avoiding high collision rates (when &quot;packets&quot; interfere with each other) and network slowdowns. Other IP address ranges are public. This means that they can only be used by their registered &quot;owners&quot; and that they can be used to move data over the Internet. Private addresses can only be used inside private networks. Most organizations today use a private address range for their internal systems and a handful of public addresses that allow their web sites, email servers and other public-facing systems to be generally accessible. Of course, your home system can communicate over the Internet, but only because your connection goes through some kind of device that translates its IP address from an internal address to a public address as needed. If you were to log into a remote system from your home network and then run a command that shows where that remote system thinks you are coming from, you would *not* see your private IP, but the translated address that your router or cable modem provides. The 204.111.96.105 address shown below is not my system's IP address. More like this ifconfig Getting the most from ifconfig Server's down: How do I find out what's wrong? stats nils ze Getting system insights with dstat on IDG Answers Does enabling MAC address filtering significantly improve home network... As Business Data Growth Explodes, Complete Backup is Essential BrandPost Sponsored by Acronis As Business Data Growth Explodes, Complete Backup is Essential The exponential increase in data from the Internet, mobile devices, digital business processes, and the Internet of Things provides businesses with invaluable potential assets that can be leveraged for competitive gain. $ who shs pts/0 2014-03-08 18:09 (204.111.96.105) Other useful commands Popular Resources Getting the Most Out of Video Conferencing B2B 360-Degrees: A Revolution in EDI and API Integration See All Go The netstat -r command is another good command to know. It displays the routing table on your system. Think of a routing table as one that tells your system &quot;If you want to reach System X, go this way&quot;. In the routing table below, connections to any address in the 192.168.0.x or 169.254.x.x ranges are local while, if you want to reach any systems on any other address ranges, your connection requests will be sent to 192.168.0.1 and then forwarded from there. $ netstat -r Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface 192.168.0.0 * 255.255.255.0 U 0 0 0 eth0 169.254.0.0 * 255.255.0.0 U 0 0 0 eth0 10.1.0.0 192.168.0.2 255.255.0.0 U 0 0 0 eth0 default 192.168.0.1 0.0.0.0 UG 0 0 0 eth0 The &quot;default&quot; entry represents what is called your &quot;default router&quot;. This address represents where your connections are sent whenever the systems you're trying to reach are 1) not on the subnet your system is attached to and 2) not on another subnet that is listed in the routing table. Another basic command that you need to know is ping. This command can help you determine if you can reach a remote system. For example, a command such as ping remhost.whatever.org might tell you whether that system is up and running. It's also useful, however, for confirming that your system is connecting properly to the local network. If you can ping a system that is across the Internet somewhere, you will know that your system is both connecting to the local network and able to reach beyond. The only problem with ping is that the lack of a response does not necessarily mean that the system you are trying to reach is down or that your network connection is hosed. The ping command or the entire protocol family of which it is a part of may be blocked before it gets to the remote system or before the response gets back to you. Another useful command that will provide you with a lot of insights into how connections are made with remote systems is traceroute. This command will display the route taken to reach the remote host and, along with the stops it makes, provide some timing information that shows how long each leg in the route is taking. This kind of information can come in handy when troubleshooting connection problems as it can show you where connections are breaking down. $ traceroute server1.abc123.com traceroute to server1.abc123.com (192.75.145.55), 30 hops max, 40 byte packets 1 pix (192.168.0.1) 0.460 ms 0.417 ms 0.392 ms 2 * * * 3 gig1-core.net.umx.org (133.164.211.33) 11.011 ms 10.986 ms 10.500 ms ... 15 server1.abc123.com (192.78.133.15) 22.824 ms 24.296 ms 23.553 ms Closing ... We'll look at some additional aspects of networking on Unix and Linux systems in next week's post. Read more of Sandra Henry-Stocker's Unix as a Second Language blog and follow the latest IT news at ITworld, Twitter and Facebook. This article is published as part of the IDG Contributor Network. Want to Join? RELATED TOPICS Operating Systems Open Source Networking Linux Previous Post Unix: Pranks that sysadmins play Next Post Unix: More networking basics for the beginner Sandra Henry-Stocker Sandra Henry-Stocker star Influencer IDG Contributor Network Sandra Henry-Stocker has been administering Unix systems for more than 30 years. She describes herself as &quot;USL&quot; (Unix as a second language) but remembers enough English to write books and buy groceries. She now works for Comtech Telecommunications Corp where no one else necessarily shares any of her opinions. The advanced beginner's guide to R View Comments You Might Like Ads by Revcontent Kigali, Rwanda: Watch This Video Before It's Banned The Aussie Method x America's Homeowners Are In For A Big Surprise in 2016 FetchaRate x Kigali, Rwanda #1 Weird Trick To Restore 20/20 Vision Quantum Vision System x The Diabetes Breakthrough Your Doctor Won't Tell You About Diabetes Protocol x Rwanda: Watch This Video Before It Gets Banned &amp; Deleted (Shocking) The Aussie Method x Rwanda Millionaire's Want This Video Banned From The Internet - Watch It Now! Millionaire Blueprint x Scientists can now make lithium-ion batteries last a lifetime x How Big Data Helps Deliver the True Total Customer Relationship x 33% off Fire HD 6 Kids Edition Tablet - Deal Alert x Woman In Kigali Shocked: 2 Veggies That Burn Tons Of Fat! Channel 07 News x Quantcast Join the discussion Be the first to comment on this article. Our Commenting Policies Login Login Or Guest (Logout) Cancel Post Share: 1 Comment Sort Subscribe RSS (edited)141 days ago aditya kiran Most home networks use IP addresses in the 192.168.0.0/16 and not /24 https://en.wikipedia.org/wiki/Private_network Like Reply Edit Delete Share 0 What Readers Like nanowires lithium-ion batteries Scientists can now make lithium-ion batteries last a lifetime Researchers at the University of California have discovered a way to use nanowires to allow lithium-ion... Apple iPhone passcode ID 4 new ways to bypass passcode lock screen on iPhones, iPads running iOS 9 10 Signs Layoffs Are Coming Sen. Durbin calls Abbott Labs' IT layoffs 'harsh and insensitive’ Newsletters Sign up and receive the latest news, reviews and trends on your favorite technology topics. Get our daily newsletter Go Google April Fool's Day Gmail mic drop Google's asinine Gmail prank: What were these fools thinking? apple night shift ios stock Apple delivers a 'significant' update with iOS 9.3 After releasing seven developer betas and several public betas, Apple on Monday released a noteworthy... Popular Resources White Paper A Cloud for Every Workload White Paper Are You a Security-First Organization? White Paper But I Was Compliant: Investing in Top-Down Security to Build a Compliant Business White Paper Cross-Enterprise Workload Automation helps reduce cost and complexity, improve service delivery eBook Sponsored Feeling the Love for Node.js: The Performance Basics You Need to know Now Go Top Stories click fraud Companies paid more than $3.1B to fake-CEO email scams Email scammers, often pretending to be CEOs, have duped businesses into giving away at least $3.1... cellphone africa The next billion: How to best serve the Internet’s new users To a large degree, technology companies can do more than the law to make online transactions... Computerworld's Best Places to Work in IT 2016 - Welcome to the Club Welcome newbies! Meet the 21 organizations new to the Best Places ranks Three cheers for the 21 organizations joining Computerworld's list of the Best Places to Work in IT for... Computerworld's Best Places to Work in IT 2016 See who made the Best Places to Work in IT list Our 23rd annual report, in the newest version of the Computerworld Digital Magazine, highlights top... Sponsored Links Online Master of Science in Information Systems at Northwestern University Redefining NTP Server Security: ALL NEW Microsemi SyncServer S600 Computerworld The Voice of Business Technology Follow us Cloud Computing Computer Hardware Consumerization of IT Data Center Emerging Technology Enterprise Applications IT Management Internet Mobile &amp; Wireless Networking Operating Systems Security Vertical IT All Topics News Features Reviews Blogs Opinions Insider Shark Tank Slideshows Video Newsletters Computerworld Events Resources/White Papers About Us Contact Privacy Policies Editorial Calendar Advertising Careers at IDG Site Map Ad Choices E-commerce Affiliate Relationships Copyright © 1994 - 2016 Computerworld, Inc. All rights reserved. Explore the IDG Network descend CIO Computerworld CSO Greenbot IDC IDG IDG Answers IDG Connect IDG Knowledge Hub IDG TechNetwork IDG.TV IDG Ventures Infoworld IT News ITwhitepapers ITworld JavaWorld LinuxWorld Macworld Network World PC World TechHive close "
                   NS1:folder="urn:scrapbook:root" />
  <RDF:Description RDF:about="urn:scrapbook:item20160802170544#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Tutorial By Example Web Services, Agile Scrum, Java, Spring, Hibernet, Open Source &amp; All. Pages Home Videos Web Services JMeter SoapUI Agile Scrum Java Blog Contact Us Concerns &gt; Cookies This Blog Linked From Here The Web This Blog Linked From Here The Web fatal: [localhost] =&gt; SSH Error: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password). fatal-localhost-SSH Error Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password). Following are the solution of &quot;fatal: [localhost] =&gt; SSH Error: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).&quot;: Video: Create the files likewise mention bellow: [root@vagrant-centos65 vagrant]# pwd /home/vagrant [root@vagrant-centos65 vagrant]# ls -R .: hosts provision.sh tutorialbyexample.yml or [root@vagrant-centos65 vagrant]# ls -ltr total 12 -rw-r--r-- 1 root root 342 Feb 11 21:50 hosts -rw-r--r-- 1 root root 854 Feb 11 21:50 tutorialbyexample.yml -rwxrwxrwx 1 root root 141 Feb 11 21:55 provision.sh Add the contents in files like: vi hosts # This is the default ansible 'hosts' file. # # It should live in /etc/ansible/hosts # # - Comments begin with the '#' character # - Blank lines are ignored # - Groups of hosts are delimited by [header] elements # - You can enter hostnames or ip addresses # - A hostname/ip can be a member of multiple groups [local-1] localhost Save the file. vi tutorialbyexample.yml # This yml file is used for # Created by: Vinod Kumar ################################################################## --- - hosts: local-1 sudo: yes vars: ################################################################## # This is the task section for all activities ################################################################## tasks: # ############################################################# # This is for host checking alive or not # ############################################################# - name: 1. Check that the servers alive action: ping # ############################################################# vi provision.sh cp -rf /home/vagrant/hosts /tmp chmod -x /tmp/hosts sudo ansible-playbook -vvvv -i /tmp/hosts /home/vagrant/tutorialbyexample.yml -u root -k Run it provision.sh and provide the password. [root@vagrant-centos65 vagrant]# ./provision.sh SSH password: PLAY [local-1] **************************************************************** GATHERING FACTS *************************************************************** &lt;localhost&gt; ESTABLISH CONNECTION FOR USER: root &lt;localhost&gt; REMOTE_MODULE setup &lt;localhost&gt; EXEC sshpass -d4 ssh -C -tt -vvv -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=&quot;/root/.ansible/cp/ansible-ssh-%h-%p-%r&quot; -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o PubkeyAuthentication=no -o ConnectTimeout=10 localhost /bin/sh -c 'mkdir -p $HOME/.ansible/tmp/ansible-tmp-1455228622.12-15128046797845 &amp;&amp; echo $HOME/.ansible/tmp/ansible-tmp-1455228622.12-15128046797845' &lt;localhost&gt; PUT /tmp/tmpQBbGli TO /root/.ansible/tmp/ansible-tmp-1455228622.12-15128046797845/setup &lt;localhost&gt; EXEC sshpass -d4 ssh -C -tt -vvv -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=&quot;/root/.ansible/cp/ansible-ssh-%h-%p-%r&quot; -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o PubkeyAuthentication=no -o ConnectTimeout=10 localhost /bin/sh -c 'sudo -k &amp;&amp; sudo -H -S -p &quot;[sudo via ansible, key=oxmfsjkdmwkijahkrvcznamgmnbjwubl] password: &quot; -u root /bin/sh -c '&quot;'&quot;'echo BECOME-SUCCESS-oxmfsjkdmwkijahkrvcznamgmnbjwubl; LANG=C LC_CTYPE=C /usr/bin/python /root/.ansible/tmp/ansible-tmp-1455228622.12-15128046797845/setup; rm -rf /root/.ansible/tmp/ansible-tmp-1455228622.12-15128046797845/ &gt;/dev/null 2&gt;&amp;1'&quot;'&quot;'' ok: [localhost] TASK: [1. Check that the servers alive] *************************************** &lt;localhost&gt; ESTABLISH CONNECTION FOR USER: root &lt;localhost&gt; REMOTE_MODULE ping &lt;localhost&gt; EXEC sshpass -d7 ssh -C -tt -vvv -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=&quot;/root/.ansible/cp/ansible-ssh-%h-%p-%r&quot; -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o PubkeyAuthentication=no -o ConnectTimeout=10 localhost /bin/sh -c 'mkdir -p $HOME/.ansible/tmp/ansible-tmp-1455228644.99-208418987783009 &amp;&amp; echo $HOME/.ansible/tmp/ansible-tmp-1455228644.99-208418987783009' &lt;localhost&gt; PUT /tmp/tmpyLzvHg TO /root/.ansible/tmp/ansible-tmp-1455228644.99-208418987783009/ping &lt;localhost&gt; EXEC sshpass -d7 ssh -C -tt -vvv -o ControlMaster=auto -o ControlPersist=60s -o ControlPath=&quot;/root/.ansible/cp/ansible-ssh-%h-%p-%r&quot; -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o PubkeyAuthentication=no -o ConnectTimeout=10 localhost /bin/sh -c 'sudo -k &amp;&amp; sudo -H -S -p &quot;[sudo via ansible, key=bllzznvgwbdnusqwnapssctiakzilnke] password: &quot; -u root /bin/sh -c '&quot;'&quot;'echo BECOME-SUCCESS-bllzznvgwbdnusqwnapssctiakzilnke; LANG=C LC_CTYPE=C /usr/bin/python /root/.ansible/tmp/ansible-tmp-1455228644.99-208418987783009/ping; rm -rf /root/.ansible/tmp/ansible-tmp-1455228644.99-208418987783009/ &gt;/dev/null 2&gt;&amp;1'&quot;'&quot;'' ok: [localhost] =&gt; {&quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;} PLAY RECAP ******************************************************************** localhost : ok=2 changed=0 unreachable=0 failed=0 Hopping your issue got resolved..if not then put you details..... Posted by Tutorialbyexample Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest Labels: Ansible, DevOps, Open Source Reactions: 3 comments: Anonymous27 February 2016 at 12:06 Grt...example and video for Ansible, I was facing this issue from long time, tried several way finally resolved by your video by bellow line.... vi provision.sh cp -rf /home/vagrant/hosts /tmp chmod -x /tmp/hosts sudo ansible-playbook -vvvv -i /tmp/hosts /home/vagrant/tutorialbyexample.yml -u root -k ReplyDelete Replies Tutorialbyexample13 March 2016 at 12:09 Thanks for your response.......Ansible will rule devops....Cheers Team!!! Delete Reply Unknown8 April 2016 at 02:51 Thankssssssssssssssss :D ReplyDelete Add comment Load more... Please provide your input, it will honer for me... Links to this post Create a Link Newer Post Older Post Home Subscribe to: Post Comments (Atom) Search This Blog powered by Labels About TutorialByExample (1) Agile (6) Ansible (8) Apache (3) Apache Tomcat (5) Birthday (2) Cache (1) CentOS (4) Cobertura (3) Coding-Standards (5) Common (22) Communication (2) Design-Pattern (1) DevOps (13) Docker (1) Eclipse (4) Expect (2) Food (1) Gerrit (1) Git (4) Hibernate (2) Hudson (2) Interview (2) Issue-Solution (1) Jar (2) Java (34) JAX-WS (4) Jenkins (3) Jenkins Pipeline (1) Jmeter (4) Jsp (2) JUnit (1) Logging (2) Marketing (1) Maven (1) mongodb (1) Open Source (46) Provision (1) Restful-WS (1) Scrum (5) SDLC (3) Service Virtualisation (1) SoapUI (4) Tar (1) Testing (7) Tomcat (5) Unix (20) Vagrant (6) VirtualBox (4) Web Services (13) Web Services Client (7) WinSCP (1) Zip (2) Popular Posts Oracle DataBase Testing By Jmeter Let's start for JMeter tutorial, how to connect database and all: Start the jmeter from */*/bin/jmeter.bat. Where * indicate the ... Deploying SOAP Web Services as Mock Service By SoapUI WAR in Tomcate Tutorial In our earlier tutorial, we discussed about how to create mock services in SoapUI environment. Web Services SOAP (WSDL) MockService by So... Apache Server Load Balancer Sticky Non Sticky Sessions In this tutorial, we'll discuses about (Apache Server) load balancer, hardware &amp; software. Let's discussed about so... How to install Ansible 1.9.4 in CentOS 6.5 Follow the following steps for installing the ansible 1.9.4 in centos6.5: Video: Logging with root user in Centos6.5 and perform b... Log4j Logging in Java Overview: Log4j is an open source project maintained by the Apache Foundation. It is available for many programming languages other tha... About Me My photo Tutorialbyexample View my complete profile IT &amp; Non IT, WebServices, SOA, JMeter, SOAP UI, Ansible, Open Source Tools, Java, J2ee, Maven . Picture Window template. Powered by Blogger. Ansible fatal SSH Error Permission denied publickey gssapi keyex gssapi with mic password If playback doesn't begin shortly, try restarting your device. Share Include playlist An error occurred while retrieving sharing information. Please try again later. Switch camera 0:00 0:00 / Live Download Opera browser The premium web browser for more Speed, Security &amp; Style. Download now Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d Plsql Developer Download PL/SQL Developer lots of features, plug-ins &amp; more allroundautomations.com Ads byGoogle Ad covers the page Stop seeing this ad It's gone. Undo What was wrong with this ad? Inappropriate Irrelevant Repetitive Thanks for the feedback! Back We’ll review this ad to improve your experience in the future. Help us show you better ads by updating your ads settings. Thanks for the feedback! Undo We’ll use your feedback to review ads on this site. Help us show you better ads by updating your ads settings. Closing ad: %1$d " />
</RDF:RDF>
