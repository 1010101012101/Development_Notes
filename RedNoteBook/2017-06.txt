4: {text: '#linux #service



'}
6: {text: "\n\n#android #dev\n\n \nAndroid \nGetting Started | Android Developers
    - Mozilla Firefox \n \n\t~ sudo bash Coding/android-studio/bin/studio.sh \n\n\n\n#fragment\nare
    liek submodules of an activity\nthey can be reused in different activities\nit
    has its own lifecycle, receives its onw input events and \n\n1. It requires the
    support library\n\n[Setup instructioons \"\"https://developer.android.com/topic/libraries/support-library/setup.html\"\"]\n\nset
    up your project to use the v4 library by following the Support Library Setup document\n\nyou
    can also include the app bar in your activities by instead using the v7 appcompat
    library, which is compatible with Android 2.1 (API level 7) and also includes
    the Fragment APIs.\n\n\n**Tutorials**\n\n[Android Development – Tutorial \"\"http://www.vogella.com/tutorials/Android/article.html\"\"]\n\nThe
    reason this tutorial is near the top is that it’s very up-to-date (based on Android
    7.0, the latest Android version as of today).\n\nThis tutorial has more topics
    and information than the tutorial from Google, so if you are looking for an in-depth
    tutorial, this is one the.\n\n**pdf**\n\n[Tutorials point \"\"https://www.tutorialspoint.com/android/\"\"]\nwebsite
    / pdf\n\n\n[Android action bar \"\"http://www.sitepoint.com/better-user-interfaces-android-action-bar/\"\"]\n\nBetter
    User Interfaces with the Android Action Bar\nAfter you have had enough of general
    Android tutorials, let’s move to tutorials for common tasks. For some of these
    topics you can find information in the general tutorials as well but if you want
    more detail, this is for you. The first tutorial is about how to build Better
    User Interfaces with the Android Action Bar.\n\n\n\n\n\n~"}
9: {text: "\n#evernote #python #lib\n\nlets do this\n\n[Evernote Python \"\"https://dev.evernote.com/doc/start/python.php\"\"]\n\n-
    [python SDK - Git \"\"https://github.com/evernote/evernote-sdk-python/\"\"]\n\n\n**
    [Evernote Developers \"\"http://dev.evernote.com/\"\"]\n\n** [Doc Ref \"\"http://dev.evernote.com/doc/reference/\"\"]\n\nAlternately,
    If you’re using git to manage your project, you can instead install the Evernote
    SDK for Python as a git submodule by issuing the following commands:\n\n\t~ git
    submodule add git://github.com/evernote/evernote-sdk-python/ evernote\n\n\t~ git
    submodule init\n\n\t~ git submodule update\n\nYou can then issue git submodule
    update whenever a new version of the SDK is released, and the changes will be
    automatically added to your copy of the SDK. Don’t forget to run the setup.py
    script after downloading or updating.\n\nOR\n\npip install evernote\ndamn...\n\n#developer
    #token\nworks just as your own token and can be [downloaded here \"\"https://sandbox.evernote.com/Login.action?targetUrl=%2Fapi%2FDeveloperToken.action\"\"]\n\n\n\nSo
    now we should be ready\n\nfrom evernote.api.client import EvernoteClient\n...\nsee
    evernote_test.py\n\n[Types.Note \"\"https://dev.evernote.com/documentation/reference/Types.html#Struct_Note\"\"]\nrepresents
    a single note in a user’s account.\n\n[Types.Notebook \"\"https://dev.evernote.com/documentation/reference/Types.html#Struct_Notebook\"\"]\n
    represents a notebook in a user’s account.\n\n[Types.Resource \"\"https://dev.evernote.com/documentation/reference/Types.html#Struct_Resource\"\"]\n
    instance describes a file (image, PDF or any other type of file) attached to a
    note. \nRead more about working with Resource objects [here \"\"https://dev.evernote.com/start/core/resources.php\"\"].\n\nNotes
    can have one or more related instances of [Types.Tag \"\"https://dev.evernote.com/documentation/reference/Types.html#Struct_Tag\"\"]
    attached to them; these are short, textual labels that aid the user in organizing
    their information within Evernote.\nThere are other types you’ll be using as you
    build your integration; if you haven’t already, it might be worth taking a few
    minutes to go over the [API speccification \"\"https://dev.evernote.com/documentation/reference/\"\"]
    \ after you finish with this.\n\n**Common tasks**\n[Start \"\"https://dev.evernote.com/doc/start/python.php\"\"]\n\n\n#\n\n\n\n#linux
    #scp #copy over #ssh\n\nCopy the file \"foobar.txt\" from a remote host to the
    local host\n\n$ scp your_username@remotehost.edu:foobar.txt /some/local/directory\nCopy
    the file \"foobar.txt\" from the local host to a remote host\n\n$ scp foobar.txt
    your_username@remotehost.edu:/some/remote/directory\nCopy the directory \"foo\"
    from the local host to a remote host's directory \"bar\"\n\n$ scp -r foo your_username@remotehost.edu:/some/remote/directory/bar\n\n\n~"}
10: {text: "\n\n\n#python #time #sleep\n\n[ time sleep \"\"https://www.tutorialspoint.com/python/time_sleep.htm\"\"]\n\ntime.sleet(t)\n
    t ~ time in seconds\n\n\n#done #setup\n\n\n1. copy .sh script into /etc/init.d/...\nsudo
    cp service/test_service.sh /etc/init.d\n\n2. check permission\nsudo chmod 755
    /etc/init.d/test_service.sh \n\n  a)  check persmission of python\n        sudo
    chmod 755 service/test_service.py\n\nAlso\n\"\"\"\nTo make the Raspberry Pi use
    your init script at the right time, one more step is required: running the command
    \n     ~ sudo update-rc.d test_service.sh defaults\nThis command adds in symbolic
    links to the    /etc/rc?.d   directories so that the init script is run at the
    default times. you can see these links if you do \n     ~ ls -l /etc/rc?.d/*test_service.sh\n\"\"\"\n\n#start
    using\n\nsudo /etc/init.d/test_service.sh start\n\n#status\nsudo /etc/init.d/test_service.sh
    status\n\n#log\ndefault log:\nsudo tail -f /tmp/test_service.log\n\n#debug\n1.
    python file is exectuable as sudo service/test_service.py\n\n2. try running daemon
    in terminal\nstart-stop-daemon --start --background --pidfile $PIDFILE --make-pidfile
    --user $DAEMON_USER --chuid $DAEMON_USER --startas $DAEMON -- $DAEMON_OPTS\n\nstart-stop-daemon
    --start --background --pidfile /var/run/test_service.pid --make-pidfile --user
    tommy --chuid tommy --startas /home/tommy/Coding/Python/service/test_service.py
    --\n\n\n#python #time and #date\nimport time\n\nI can now directly unformat the
    Twitter string to a time.date struct:\n\nusing\n\t$  time.strptime(datestring,
    \"%a %b %d %H:%M:%S +0000 %Y\")\n\nreturning struct:\ndate[0] = year\ndate[1]
    = month\ndate[2] = day\ndate[3] = hour\ndate[4] = min\ndate[5] = sec\ndate[6]
    = weekday\ndate[7] = day of the year\n\n#debugging\n\nfrom twitter_trump import
    *\nhist = get_history()\nrec = most_recent(hist)\nray = most_recent_x(hist, 3)\n\n\n#
    ~"}
